{"ast":null,"code":"var _jsxFileName = \"D:\\\\Rohit\\\\Git projects\\\\Manthan\\\\src\\\\components\\\\Common\\\\BreadcrumbNew.js\",\n    _s = $RefreshSig$();\n\n// import React, { useEffect, useState } from \"react\"\n// import { Row, Col, Modal, Button, } from \"reactstrap\"\n// import { useHistory } from \"react-router-dom\";\n// import { useDispatch, useSelector } from \"react-redux\";\n// import { Breadcrumb_inputName } from \"../../store/Utilites/Breadcrumb/actions\";\n// import { AvForm, AvInput } from \"availity-reactstrap-validation\";\n// import * as XLSX from 'xlsx';\n// import * as urlRalations from \"../../routes/urlRalations\"\n// import { MetaTags } from \"react-meta-tags\";\n// export const initialstate = {\n//   breadShow: false,\n//   bredcrumbItemName: '',\n//   showCountlabel: \"\",\n//   userAccess: {},\n//   newBtnView: false,\n//   excelBtnView: false,\n//   pageHeading: '',\n//   showCount: false,\n//   excelData: [],\n//   userAcc: {},\n//   pageField: {},\n//   masterPage: ''\n// }\n// const BreadcrumbNew = props => {\n//   const history = useHistory();\n//   const dispatch = useDispatch();\n//   // for Excel Download\n//   const [modal_scroll, setmodal_scroll] = useState(false);\n//   const [downListKey, setDownListKey] = useState([]);\n//   const [breadcrumbDetail, setbreadcrumbDetail] = useState({});\n//   const { downBtnData = [] } = useSelector((state) => ({\n//     // userAccess: state.Login.RoleAccessUpdateData,\n//     downBtnData: state.BreadcrumbReducer.downBtnData,\n//   }));\n//   const { userAccess = [],pageId } = props;\n//   let { showCountlabel = '', bredcrumbItemName = '',breadcrumbDetails=\"\" } = useSelector((state) => ({\n//     showCountlabel: state.BreadcrumbReducer.showCountlabel,\n//     bredcrumbItemName: state.BreadcrumbReducer.bredcrumbItemName,\n//     breadcrumbDetail:state.BreadcrumbReducer.breadcrumbDetail,\n//   }));\n//   // Onfocus Search Box\n//   // useEffect(() => {\n//   //   history.listen(location => {\n//   //     // dispatch(CommonBreadcrumbDetails(initialstate));\n//   //     setbreadcrumbDetail(initialstate)\n//   //     debugger\n//   //   });\n//   // }, [history])\n//   // useEffect(() => {\n//   //   const reducerstate = redux.breadcrumbDetail\n//   //   let initial = { ...breadcrumbDetail }\n//   //   let selectedValues = Object.keys(reducerstate);\n//   //   selectedValues.forEach((i) => {\n//   //     initial[`${i}`] = reducerstate[`${i}`]\n//   //   })\n//   //   setbreadcrumbDetail(initial)\n//   // }, [])\n//   const {\n//     breadShow = true,\n//     newBtnView = true,\n//     excelBtnView = false,\n//     pageHeading = '',\n//     CountLabel = true,\n//     masterPage =\"\"\n//   } = breadcrumbDetail;\n//   useEffect(() => {\n//     debugger\n//     const locationPath = history.location.pathname\n//     let userAcc = userAccess.find((inx) => {\n//       return (inx.id === pageId)\n//     });\n//     if (!(userAcc === undefined)) {\n//       showCountlabel = '';\n//       bredcrumbItemName = '';\n//       const isnewBtnView = ((userAcc.PageType === 2) && (userAcc.RoleAccess_IsSave));\n//       const isCountLabel = (userAcc.CountLabel);\n//       const isexcelBtnView = (!(userAcc.PageType === 1) && (userAcc.RoleAccess_Exceldownload));\n//       dispatch(Breadcrumb_inputName(''))\n//       setbreadcrumbDetail({\n//         newBtnView: isnewBtnView,\n//         excelBtnView: isexcelBtnView,\n//         pageHeading: userAcc.PageHeading,\n//         CountLabel: isCountLabel,\n//         masterPage: urlRalations[userAcc.ActualPagePath],\n//       })\n//     }\n//   }, [history, userAccess])\n//   function tog_scroll() {\n//     setmodal_scroll(!modal_scroll);\n//     removeBodyCss();\n//   }\n//   function removeBodyCss() {\n//     document.body.classList.add(\"no_padding\");\n//   }\n//   // New Button Handller\n//   const NewButtonHandeller = () => {\n//     debugger\n//     history.push({\n//       pathname: masterPage,\n//     })\n//   }\n//   useEffect(() => {\n//     if (!(downBtnData === undefined)) {\n//       if ((downBtnData.length > 0)) {\n//         // object to array conversion\n//         const propertyNames = Object.keys(downBtnData[0]);\n//         setDownListKey(propertyNames)\n//       }\n//     }\n//   }, [downBtnData])\n//   const DownloadInExcelButtonHanler = (event, values) => {\n//     debugger\n//     var list = []\n//     var object1 = {}\n//     var selectedValues = Object.keys(values);\n//     var filteredValues = selectedValues.filter(function (selectedValues) {\n//       return values[selectedValues]\n//     });\n//     downBtnData.map((index1) => {\n//       filteredValues.map((index2) => {\n//         if (index1.hasOwnProperty(index2)) {\n//           object1[index2] = index1[index2]\n//         }\n//       })\n//       list.push(object1)\n//       object1 = {}\n//     })\n//     const worksheet = XLSX.utils.json_to_sheet(list);\n//     const workbook = XLSX.utils.book_new();\n//     XLSX.utils.book_append_sheet(workbook, worksheet, \"Sheet1\");\n//     XLSX.writeFile(workbook, \"Excel File.xlsx\");\n//     setmodal_scroll(false)\n//   }\n//   const handleChange = (e) => {\n//     var chek = document.getElementById(\"checkAll\")\n//     if (chek) {\n//       for (var i = 0; i < downListKey.length; i++) {\n//         document.getElementById(`chckbox${i}`).checked = true\n//       }\n//     }\n//     else {\n//       for (var i = 0; i < downListKey.length; i++) {\n//         document.getElementById(`chckbox${i}`).checked = false\n//       }\n//     }\n//   };\n//   const excelCheckBoxOnChange = (e) => {\n//     // e.preventDefault();\n//     const check = e.target\n//     // var chek = document.getElementById(\"checkAll\").checked\n//     if (check.id === \"checkAll\") {\n//       if (check.checked) {\n//         for (var i = 0; i < downListKey.length; i++) {\n//           const a = document.getElementById(`chckbox${i}`)\n//           if (a) {\n//             a.checked = true\n//             // excelData[0][`$defSelect${downListKey[i]}`] = true\n//           }\n//         }\n//       }\n//       else {\n//         for (var i = 0; i < downListKey.length; i++) {\n//           const a = document.getElementById(`chckbox${i}`)\n//           if (a) {\n//             a.checked = false\n//             // excelData[0][`$defSelect${downListKey[i]}`] = false\n//           }\n//         }\n//       }\n//     }\n//   };\n//   function ExcelCheckBox() {\n//     const arrDiv = []\n//     downListKey.forEach((index, key) => {\n//       const match = index.slice(0, 1);\n//       if (!(match === \"$\")) {\n//         arrDiv.push(\n//           <div className=\"row\" >\n//             <div className=\"col col-12\"  >\n//               <Row>\n//                 <div className=\"col col-12 \" >\n//                   <AvInput\n//                     className=\" text-black checkbox-border-red\"\n//                     type=\"checkbox\"\n//                     id={`chckbox${key}`}\n//                     name={index}\n//                     defaultValue={(downBtnData[0][`$defSelect${index}`]) ? true : false}\n//                   />&nbsp;&nbsp;&nbsp;\n//                   <label className=\"form-label text-black\"> {index} </label>\n//                 </div>\n//               </Row>\n//             </div>\n//           </div>\n//         )\n//       }\n//     })\n//     return arrDiv\n//   }\n//   if (breadShow) {\n//     return (\n//       <React.Fragment>\n//         <header id=\"page-topbar\" style={{ marginTop: \"56px\", backgroundColor: 'white', zIndex: \"1\" }} >\n//           <div className=\"navbar-header\" style={{ paddingRight: \"-10px\" }}>\n//             <div className=\"d-flex\" >\n//               <div className=\"navbar-brand-box\" ></div>\n//               <div style={{ paddingLeft: \"7px\" }}>\n//                 {\n//                   newBtnView ?\n//                     <div >\n//                       <button type=\"button\" className=\"btn btn-success\"\n//                         data-mdb-toggle=\"tooltip\" data-mdb-placement=\"top\" title=\"Create New\"\n//                         onClick={NewButtonHandeller}>\n//                         New\n//                       </button>\n//                       <label className=\"font-size-18 form-label text-black \" style={{ paddingLeft: \"7px\", }} >{pageHeading}</label>\n//                     </div>\n//                     :\n//                     <div>\n//                       <label className=\"font-size-18  col-ls-6 col-form-label text-black\" style={{ marginLeft: \"6px\" }}>\n//                         {pageHeading}</label>\n//                       {(bredcrumbItemName.length > 0) ?\n//                         <label className=\"font-size-24 form-label  text-nowrap bd-highlight text-primary\"\n//                           style={{ paddingLeft: \"7px\", color: \"#5156be\" }} >&nbsp;/&nbsp;{bredcrumbItemName}</label>\n//                         : null\n//                       }\n//                     </div>\n//                 }\n//               </div>\n//             </div>\n//             <div className=\" d-flex  justify-content-end\"  >\n//               {excelBtnView ?\n//                 <div className=\"px-2 \" style={{ marginTop: \"7px\" }}>\n//                   <Button\n//                     type=\"button\"\n//                     title=\"Download List\"\n//                     color=\"btn btn-sm btn-outline-primary \"\n//                     onClick={() => { tog_scroll(); }}\n//                     data-toggle=\"modal\"\n//                   >\n//                     <i className=\"bx bx-download font-size-14\" ></i>\n//                   </Button>\n//                 </div>\n//                 : null}\n//               {\n//                 (((CountLabel) && (showCountlabel.length > 0))) ?\n//                   <div className=\"bg-dark text-center text-light external-event col-form-label  border border-Success rounded-2\"\n//                     style={{ width: \"100%\" }}>\n//                     <samp className=\"px-2 \">{showCountlabel}</samp>\n//                   </div>\n//                   :\n//                   null\n//               }\n//             </div>\n//           </div>\n//         </header>\n//         <Modal\n//           isOpen={modal_scroll}\n//           toggle={() => {\n//             tog_scroll();\n//           }}\n//           scrollable={true}\n//         >\n//           <div className=\"modal-header\">\n//             <h5 className=\"modal-title mt-0\">List</h5>\n//             <button\n//               type=\"button\"\n//               onClick={() => setmodal_scroll(false)}\n//               className=\"close\"\n//               data-dismiss=\"modal\"\n//               aria-label=\"Close\"\n//             >\n//               <span aria-hidden=\"true\">&times;</span>\n//             </button>\n//           </div>\n//           <div className=\"modal-body\">\n//             <AvForm onValidSubmit={(e, v) => { DownloadInExcelButtonHanler(e, v); }}>\n//               <div className=\"form-check\">\n//                 <input\n//                   id=\"checkAll\"\n//                   type=\"checkbox\"\n//                   className=\"form-check-input\"\n//                   onChange={excelCheckBoxOnChange}\n//                 />\n//                 <label className=\"form-label text-black\">All Select</label>\n//               </div>\n//               <ExcelCheckBox />\n//               <div className=\"modal-body\">\n//                 <div className=\"modal-footer\">\n//                   <button\n//                     type=\"button\"\n//                     className=\"btn btn-secondary\"\n//                     onClick={() => setmodal_scroll(false)}\n//                   >\n//                     Cancel\n//                   </button>\n//                   <button type=\"submit\" className=\"btn btn-primary\" >\n//                     Download in Excel\n//                   </button>\n//                 </div>\n//               </div>\n//             </AvForm>\n//           </div>\n//         </Modal>\n//       </React.Fragment>\n//     )\n//   } else {\n//     return (<></>)\n//   }\n// }\n// export default BreadcrumbNew\nimport React, { useEffect, useState } from \"react\";\nimport { Row, Col, Modal, Button } from \"reactstrap\";\nimport { useHistory } from \"react-router-dom\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { BreadcrumbShowCountlabel, Breadcrumb_inputName } from \"../../store/Utilites/Breadcrumb/actions\";\nimport { AvForm, AvInput } from \"availity-reactstrap-validation\";\nimport * as XLSX from 'xlsx';\nimport * as urlRalations from \"../../routes/urlRalations\";\nimport { MetaTags } from \"react-meta-tags\";\nimport { GetHpageListData } from \"../../store/actions\"; // export const initialstate = {\n//   breadShow: false,\n//   bredcrumbItemName: '',\n//   showCountlabel: \"\",\n//   userAccess: {},\n//   newBtnView: false,\n//   excelBtnView: false,\n//   pageHeading: '',\n//   showCount: false,\n//   excelData: [],\n//   userAcc: {},\n//   pageField: {},\n//   masterPage: ''\n// }\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst BreadcrumbNew = props => {\n  _s();\n\n  const history = useHistory();\n  const dispatch = useDispatch(); // for Excel Download\n\n  const [modal_scroll, setmodal_scroll] = useState(false);\n  const [downListKey, setDownListKey] = useState([]);\n  const [breadcrumbDetail, setbreadcrumbDetail] = useState({});\n  const {\n    downBtnData = [],\n    userAccess\n  } = useSelector(state => ({\n    userAccess: state.Login.RoleAccessUpdateData,\n    downBtnData: state.BreadcrumbReducer.downBtnData,\n    PageList: state.H_Pages.HPagesListData\n  })); // const { pageId } = props;\n\n  let {\n    showCountlabel = '',\n    bredcrumbItemName = '',\n    breadcrum\n  } = useSelector(state => ({\n    showCountlabel: state.BreadcrumbReducer.showCountlabel,\n    bredcrumbItemName: state.BreadcrumbReducer.bredcrumbItemName,\n    breadcrum: state.BreadcrumbReducer.breadcrumbDetail\n  }));\n  useEffect(() => {\n    dispatch(Breadcrumb_inputName(''));\n  }, []);\n  const {\n    breadShow = true,\n    newBtnView = true,\n    excelBtnView = true,\n    pageHeading = '',\n    CountLabel = true,\n    masterPage = \"\",\n    pageMode = \"\" // breadcrumbDetail=[]\n\n  } = breadcrumbDetail;\n  useEffect(() => {\n    const locationPath = history.location.pathname;\n    let userAcc = userAccess.find(inx => {\n      return `/${inx.ActualPagePath}` === locationPath;\n    });\n\n    if (!(userAcc === undefined)) {\n      showCountlabel = '';\n      bredcrumbItemName = '';\n      const isnewBtnView = userAcc.PageType === 2 && userAcc.RoleAccess_IsSave;\n      const isCountLabel = userAcc.CountLabel;\n      const isexcelBtnView = userAcc.PageType === 2 && userAcc.RoleAccess_Exceldownload; // const isbreadshow = ((userAcc.IsEditPopuporComponent === true))\n\n      dispatch(Breadcrumb_inputName(''));\n      setbreadcrumbDetail({\n        // masterPage:masterPage,\n        newBtnView: isnewBtnView,\n        excelBtnView: isexcelBtnView,\n        pageHeading: userAcc.PageHeading,\n        CountLabel: isCountLabel,\n        // breadShow:isbreadshow,\n        masterPage: urlRalations[userAcc.ActualPagePath]\n      });\n    } else if (userAcc === undefined) {\n      setbreadcrumbDetail({\n        // masterPage:masterPage,\n        newBtnView: false,\n        excelBtnView: false,\n        pageHeading: false,\n        CountLabel: false // breadShow:isbreadshow,\n\n      });\n    }\n  }, [userAccess]);\n\n  function tog_scroll() {\n    setmodal_scroll(!modal_scroll);\n    removeBodyCss();\n  }\n\n  function removeBodyCss() {\n    document.body.classList.add(\"no_padding\");\n  } // New Button Handller\n  // const NewButtonHandeller = () => {\n  //   history.push({\n  //     pathname: masterPage,\n  //   })\n  // }\n\n\n  const NewButtonHandeller = () => {\n    if (pageMode === \"add\") {\n      let pathName = history.location.pathname;\n      let userAcc = breadcrum.userAccess.find(inx => {\n        return `/${inx.ActualPagePath}` === pathName;\n      });\n      let listPagePath = userAccess.find(inx => {\n        return inx.id === userAcc.RelatedPageID;\n      });\n\n      if (listPagePath === undefined) {\n        return;\n      }\n\n      history.push({\n        pathname: `/${listPagePath.ActualPagePath}`\n      });\n    } else {\n      history.push({\n        pathname: masterPage,\n        pageMode: pageMode\n      });\n    }\n  };\n\n  useEffect(() => {\n    if (!(downBtnData === undefined)) {\n      if (downBtnData.length > 0) {\n        // object to array conversion\n        const propertyNames = Object.keys(downBtnData[0]);\n        setDownListKey(propertyNames);\n      }\n    }\n  }, [downBtnData]);\n\n  const DownloadInExcelButtonHanler = (event, values) => {\n    // const exldata = downBtnData\n    let list = [];\n    let object1 = {};\n    var selectedValues = Object.keys(values);\n    var filteredValues = selectedValues.filter(function (selectedValues) {\n      return values[selectedValues];\n    }); // debugger\n\n    downBtnData.map(index1 => {\n      // debugger\n      filteredValues.map(index2 => {\n        // debugger\n        if (index1.hasOwnProperty(index2)) {\n          object1[index2] = index1[index2];\n        }\n      });\n      list.push(object1);\n      object1 = {};\n    }); // debugger\n\n    const worksheet = XLSX.utils.json_to_sheet(list);\n    const workbook = XLSX.utils.book_new();\n    XLSX.utils.book_append_sheet(workbook, worksheet, \"Sheet1\");\n    XLSX.writeFile(workbook, \"Excel File.xlsx\");\n    setmodal_scroll(false);\n  };\n\n  const handleChange = e => {\n    var chek = document.getElementById(\"checkAll\");\n\n    if (chek) {\n      for (var i = 0; i < downListKey.length; i++) {\n        document.getElementById(`chckbox${i}`).checked = true;\n      }\n    } else {\n      for (var i = 0; i < downListKey.length; i++) {\n        document.getElementById(`chckbox${i}`).checked = false;\n      }\n    }\n  };\n\n  const excelCheckBoxOnChange = e => {\n    // e.preventDefault();\n    const check = e.target; // var chek = document.getElementById(\"checkAll\").checked\n\n    if (check.id === \"checkAll\") {\n      if (check.checked) {\n        for (var i = 0; i < downListKey.length; i++) {\n          const a = document.getElementById(`chckbox${i}`);\n\n          if (a) {\n            a.checked = true; // excelData[0][`$defSelect${downListKey[i]}`] = true\n          }\n        }\n      } else {\n        for (var i = 0; i < downListKey.length; i++) {\n          const a = document.getElementById(`chckbox${i}`);\n\n          if (a) {\n            a.checked = false; // excelData[0][`$defSelect${downListKey[i]}`] = false\n          }\n        }\n      }\n    }\n  };\n\n  function ExcelCheckBox() {\n    const arrDiv = [];\n    downListKey.forEach((index, key) => {\n      const match = index.slice(0, 1);\n\n      if (!(match === \"$\")) {\n        arrDiv.push( /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"row\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col col-12\",\n            children: /*#__PURE__*/_jsxDEV(Row, {\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"col col-12 \",\n                children: [/*#__PURE__*/_jsxDEV(AvInput, {\n                  className: \" text-black checkbox-border-red\",\n                  type: \"checkbox\",\n                  id: `chckbox${key}-${index.id}`,\n                  name: index,\n                  defaultValue: downBtnData[0][`$defSelect${index}`] ? true : false\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 590,\n                  columnNumber: 19\n                }, this), \"\\xA0\\xA0\\xA0\", /*#__PURE__*/_jsxDEV(\"label\", {\n                  className: \"form-label text-black\",\n                  children: [\" \", index, \" \"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 597,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 589,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 588,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 587,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 586,\n          columnNumber: 11\n        }, this));\n      }\n    });\n    return arrDiv;\n  }\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      id: \"page-topbar\",\n      style: {\n        marginTop: \"56px\",\n        backgroundColor: 'white',\n        zIndex: \"1\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"navbar-header\",\n        style: {\n          paddingRight: \"-10px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"d-flex\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"navbar-brand-box\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 613,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              paddingLeft: \"7px\"\n            },\n            children: newBtnView ? /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                type: \"button\",\n                className: \"btn btn-success\",\n                \"data-mdb-toggle\": \"tooltip\",\n                \"data-mdb-placement\": \"top\",\n                title: \"Create New\",\n                onClick: NewButtonHandeller,\n                children: \"New\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 618,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                className: \"font-size-18 form-label text-black \",\n                style: {\n                  paddingLeft: \"7px\"\n                },\n                children: pageHeading\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 623,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 617,\n              columnNumber: 19\n            }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                className: \"font-size-18  col-ls-6 col-form-label text-black\",\n                style: {\n                  marginLeft: \"6px\"\n                },\n                children: pageHeading\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 627,\n                columnNumber: 21\n              }, this), bredcrumbItemName.length > 0 ? /*#__PURE__*/_jsxDEV(\"label\", {\n                className: \"font-size-24 form-label  text-nowrap bd-highlight text-primary\",\n                style: {\n                  paddingLeft: \"7px\",\n                  color: \"#5156be\"\n                },\n                children: [\"\\xA0/\\xA0\", bredcrumbItemName]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 630,\n                columnNumber: 23\n              }, this) : null]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 626,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 614,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 612,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \" d-flex  justify-content-end\",\n          children: [excelBtnView ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"px-2 \",\n            style: {\n              marginTop: \"7px\"\n            },\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              type: \"button\",\n              title: \"Download List\",\n              color: \"btn btn-sm btn-outline-primary \",\n              onClick: () => {\n                tog_scroll();\n              },\n              \"data-toggle\": \"modal\",\n              children: /*#__PURE__*/_jsxDEV(\"i\", {\n                className: \"bx bx-download font-size-14\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 649,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 642,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 641,\n            columnNumber: 15\n          }, this) : null, CountLabel && showCountlabel.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"bg-dark text-center text-light external-event col-form-label  border border-Success rounded-2\",\n            style: {\n              width: \"100%\"\n            },\n            children: /*#__PURE__*/_jsxDEV(\"samp\", {\n              className: \"px-2 \",\n              children: showCountlabel\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 657,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 655,\n            columnNumber: 17\n          }, this) : null]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 639,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 611,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 610,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: modal_scroll,\n      toggle: () => {\n        tog_scroll();\n      },\n      scrollable: true,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n          className: \"modal-title mt-0\",\n          children: \"List\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 675,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: () => setmodal_scroll(false),\n          className: \"close\",\n          \"data-dismiss\": \"modal\",\n          \"aria-label\": \"Close\",\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            \"aria-hidden\": \"true\",\n            children: \"\\xD7\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 684,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 677,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 674,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-body\",\n        children: /*#__PURE__*/_jsxDEV(AvForm, {\n          onValidSubmit: (event, values) => {\n            DownloadInExcelButtonHanler(event, values);\n          },\n          children: [/*#__PURE__*/_jsxDEV(ExcelCheckBox, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 698,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"modal-body\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"modal-footer\",\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                type: \"button\",\n                className: \"btn btn-secondary\",\n                onClick: () => setmodal_scroll(false),\n                children: \"Cancel\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 702,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                type: \"submit\",\n                className: \"btn btn-primary\",\n                children: \"Download in Excel\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 709,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 701,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 700,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 688,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 687,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 667,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 609,\n    columnNumber: 5\n  }, this);\n};\n\n_s(BreadcrumbNew, \"/Bzh4J31MBtoq8zxN7wTqXo3TjA=\", false, function () {\n  return [useHistory, useDispatch, useSelector, useSelector];\n});\n\n_c = BreadcrumbNew;\nexport default BreadcrumbNew;\n\nvar _c;\n\n$RefreshReg$(_c, \"BreadcrumbNew\");","map":{"version":3,"names":["React","useEffect","useState","Row","Col","Modal","Button","useHistory","useDispatch","useSelector","BreadcrumbShowCountlabel","Breadcrumb_inputName","AvForm","AvInput","XLSX","urlRalations","MetaTags","GetHpageListData","BreadcrumbNew","props","history","dispatch","modal_scroll","setmodal_scroll","downListKey","setDownListKey","breadcrumbDetail","setbreadcrumbDetail","downBtnData","userAccess","state","Login","RoleAccessUpdateData","BreadcrumbReducer","PageList","H_Pages","HPagesListData","showCountlabel","bredcrumbItemName","breadcrum","breadShow","newBtnView","excelBtnView","pageHeading","CountLabel","masterPage","pageMode","locationPath","location","pathname","userAcc","find","inx","ActualPagePath","undefined","isnewBtnView","PageType","RoleAccess_IsSave","isCountLabel","isexcelBtnView","RoleAccess_Exceldownload","PageHeading","tog_scroll","removeBodyCss","document","body","classList","add","NewButtonHandeller","pathName","listPagePath","id","RelatedPageID","push","length","propertyNames","Object","keys","DownloadInExcelButtonHanler","event","values","list","object1","selectedValues","filteredValues","filter","map","index1","index2","hasOwnProperty","worksheet","utils","json_to_sheet","workbook","book_new","book_append_sheet","writeFile","handleChange","e","chek","getElementById","i","checked","excelCheckBoxOnChange","check","target","a","ExcelCheckBox","arrDiv","forEach","index","key","match","slice","marginTop","backgroundColor","zIndex","paddingRight","paddingLeft","marginLeft","color","width"],"sources":["D:/Rohit/Git projects/Manthan/src/components/Common/BreadcrumbNew.js"],"sourcesContent":["// import React, { useEffect, useState } from \"react\"\r\n// import { Row, Col, Modal, Button, } from \"reactstrap\"\r\n// import { useHistory } from \"react-router-dom\";\r\n// import { useDispatch, useSelector } from \"react-redux\";\r\n// import { Breadcrumb_inputName } from \"../../store/Utilites/Breadcrumb/actions\";\r\n// import { AvForm, AvInput } from \"availity-reactstrap-validation\";\r\n// import * as XLSX from 'xlsx';\r\n// import * as urlRalations from \"../../routes/urlRalations\"\r\n// import { MetaTags } from \"react-meta-tags\";\r\n\r\n\r\n// export const initialstate = {\r\n//   breadShow: false,\r\n//   bredcrumbItemName: '',\r\n//   showCountlabel: \"\",\r\n//   userAccess: {},\r\n//   newBtnView: false,\r\n//   excelBtnView: false,\r\n//   pageHeading: '',\r\n//   showCount: false,\r\n//   excelData: [],\r\n//   userAcc: {},\r\n//   pageField: {},\r\n//   masterPage: ''\r\n// }\r\n// const BreadcrumbNew = props => {\r\n\r\n//   const history = useHistory();\r\n//   const dispatch = useDispatch();\r\n//   // for Excel Download\r\n\r\n//   const [modal_scroll, setmodal_scroll] = useState(false);\r\n//   const [downListKey, setDownListKey] = useState([]);\r\n//   const [breadcrumbDetail, setbreadcrumbDetail] = useState({});\r\n\r\n//   const { downBtnData = [] } = useSelector((state) => ({\r\n//     // userAccess: state.Login.RoleAccessUpdateData,\r\n//     downBtnData: state.BreadcrumbReducer.downBtnData,\r\n//   }));\r\n\r\n//   const { userAccess = [],pageId } = props;\r\n//   let { showCountlabel = '', bredcrumbItemName = '',breadcrumbDetails=\"\" } = useSelector((state) => ({\r\n//     showCountlabel: state.BreadcrumbReducer.showCountlabel,\r\n//     bredcrumbItemName: state.BreadcrumbReducer.bredcrumbItemName,\r\n//     breadcrumbDetail:state.BreadcrumbReducer.breadcrumbDetail,\r\n\r\n//   }));\r\n\r\n//   // Onfocus Search Box\r\n//   // useEffect(() => {\r\n//   //   history.listen(location => {\r\n//   //     // dispatch(CommonBreadcrumbDetails(initialstate));\r\n//   //     setbreadcrumbDetail(initialstate)\r\n//   //     debugger\r\n//   //   });\r\n//   // }, [history])\r\n\r\n//   // useEffect(() => {\r\n\r\n//   //   const reducerstate = redux.breadcrumbDetail\r\n//   //   let initial = { ...breadcrumbDetail }\r\n//   //   let selectedValues = Object.keys(reducerstate);\r\n//   //   selectedValues.forEach((i) => {\r\n\r\n//   //     initial[`${i}`] = reducerstate[`${i}`]\r\n//   //   })\r\n//   //   setbreadcrumbDetail(initial)\r\n\r\n//   // }, [])\r\n\r\n//   const {\r\n//     breadShow = true,\r\n//     newBtnView = true,\r\n//     excelBtnView = false,\r\n//     pageHeading = '',\r\n//     CountLabel = true,\r\n//     masterPage =\"\"\r\n//   } = breadcrumbDetail;\r\n\r\n\r\n//   useEffect(() => {\r\n//     debugger\r\n//     const locationPath = history.location.pathname\r\n//     let userAcc = userAccess.find((inx) => {\r\n//       return (inx.id === pageId)\r\n//     });\r\n\r\n//     if (!(userAcc === undefined)) {\r\n//       showCountlabel = '';\r\n//       bredcrumbItemName = '';\r\n//       const isnewBtnView = ((userAcc.PageType === 2) && (userAcc.RoleAccess_IsSave));\r\n//       const isCountLabel = (userAcc.CountLabel);\r\n//       const isexcelBtnView = (!(userAcc.PageType === 1) && (userAcc.RoleAccess_Exceldownload));\r\n//       dispatch(Breadcrumb_inputName(''))\r\n//       setbreadcrumbDetail({\r\n//         newBtnView: isnewBtnView,\r\n//         excelBtnView: isexcelBtnView,\r\n//         pageHeading: userAcc.PageHeading,\r\n//         CountLabel: isCountLabel,\r\n//         masterPage: urlRalations[userAcc.ActualPagePath],\r\n//       })\r\n\r\n//     }\r\n//   }, [history, userAccess])\r\n\r\n//   function tog_scroll() {\r\n//     setmodal_scroll(!modal_scroll);\r\n//     removeBodyCss();\r\n//   }\r\n\r\n//   function removeBodyCss() {\r\n//     document.body.classList.add(\"no_padding\");\r\n//   }\r\n\r\n//   // New Button Handller\r\n//   const NewButtonHandeller = () => {\r\n//     debugger\r\n//     history.push({\r\n//       pathname: masterPage,\r\n\r\n//     })\r\n//   }\r\n\r\n//   useEffect(() => {\r\n\r\n//     if (!(downBtnData === undefined)) {\r\n//       if ((downBtnData.length > 0)) {\r\n//         // object to array conversion\r\n//         const propertyNames = Object.keys(downBtnData[0]);\r\n//         setDownListKey(propertyNames)\r\n//       }\r\n//     }\r\n//   }, [downBtnData])\r\n\r\n//   const DownloadInExcelButtonHanler = (event, values) => {\r\n//     debugger\r\n//     var list = []\r\n//     var object1 = {}\r\n//     var selectedValues = Object.keys(values);\r\n//     var filteredValues = selectedValues.filter(function (selectedValues) {\r\n//       return values[selectedValues]\r\n//     });\r\n\r\n//     downBtnData.map((index1) => {\r\n//       filteredValues.map((index2) => {\r\n//         if (index1.hasOwnProperty(index2)) {\r\n//           object1[index2] = index1[index2]\r\n//         }\r\n//       })\r\n//       list.push(object1)\r\n//       object1 = {}\r\n//     })\r\n//     const worksheet = XLSX.utils.json_to_sheet(list);\r\n//     const workbook = XLSX.utils.book_new();\r\n//     XLSX.utils.book_append_sheet(workbook, worksheet, \"Sheet1\");\r\n//     XLSX.writeFile(workbook, \"Excel File.xlsx\");\r\n//     setmodal_scroll(false)\r\n//   }\r\n\r\n//   const handleChange = (e) => {\r\n//     var chek = document.getElementById(\"checkAll\")\r\n//     if (chek) {\r\n//       for (var i = 0; i < downListKey.length; i++) {\r\n//         document.getElementById(`chckbox${i}`).checked = true\r\n//       }\r\n//     }\r\n//     else {\r\n//       for (var i = 0; i < downListKey.length; i++) {\r\n//         document.getElementById(`chckbox${i}`).checked = false\r\n//       }\r\n//     }\r\n//   };\r\n\r\n//   const excelCheckBoxOnChange = (e) => {\r\n\r\n//     // e.preventDefault();\r\n//     const check = e.target\r\n//     // var chek = document.getElementById(\"checkAll\").checked\r\n\r\n//     if (check.id === \"checkAll\") {\r\n//       if (check.checked) {\r\n//         for (var i = 0; i < downListKey.length; i++) {\r\n//           const a = document.getElementById(`chckbox${i}`)\r\n//           if (a) {\r\n//             a.checked = true\r\n//             // excelData[0][`$defSelect${downListKey[i]}`] = true\r\n//           }\r\n//         }\r\n//       }\r\n//       else {\r\n//         for (var i = 0; i < downListKey.length; i++) {\r\n//           const a = document.getElementById(`chckbox${i}`)\r\n//           if (a) {\r\n//             a.checked = false\r\n//             // excelData[0][`$defSelect${downListKey[i]}`] = false\r\n//           }\r\n//         }\r\n//       }\r\n//     }\r\n\r\n//   };\r\n\r\n//   function ExcelCheckBox() {\r\n//     const arrDiv = []\r\n//     downListKey.forEach((index, key) => {\r\n//       const match = index.slice(0, 1);\r\n//       if (!(match === \"$\")) {\r\n//         arrDiv.push(\r\n//           <div className=\"row\" >\r\n//             <div className=\"col col-12\"  >\r\n//               <Row>\r\n//                 <div className=\"col col-12 \" >\r\n//                   <AvInput\r\n//                     className=\" text-black checkbox-border-red\"\r\n//                     type=\"checkbox\"\r\n//                     id={`chckbox${key}`}\r\n//                     name={index}\r\n//                     defaultValue={(downBtnData[0][`$defSelect${index}`]) ? true : false}\r\n//                   />&nbsp;&nbsp;&nbsp;\r\n//                   <label className=\"form-label text-black\"> {index} </label>\r\n//                 </div>\r\n//               </Row>\r\n//             </div>\r\n//           </div>\r\n//         )\r\n//       }\r\n//     })\r\n//     return arrDiv\r\n//   }\r\n\r\n//   if (breadShow) {\r\n//     return (\r\n//       <React.Fragment>\r\n//         <header id=\"page-topbar\" style={{ marginTop: \"56px\", backgroundColor: 'white', zIndex: \"1\" }} >\r\n//           <div className=\"navbar-header\" style={{ paddingRight: \"-10px\" }}>\r\n//             <div className=\"d-flex\" >\r\n//               <div className=\"navbar-brand-box\" ></div>\r\n//               <div style={{ paddingLeft: \"7px\" }}>\r\n//                 {\r\n//                   newBtnView ?\r\n//                     <div >\r\n//                       <button type=\"button\" className=\"btn btn-success\"\r\n//                         data-mdb-toggle=\"tooltip\" data-mdb-placement=\"top\" title=\"Create New\"\r\n//                         onClick={NewButtonHandeller}>\r\n//                         New\r\n//                       </button>\r\n//                       <label className=\"font-size-18 form-label text-black \" style={{ paddingLeft: \"7px\", }} >{pageHeading}</label>\r\n\r\n//                     </div>\r\n//                     :\r\n//                     <div>\r\n//                       <label className=\"font-size-18  col-ls-6 col-form-label text-black\" style={{ marginLeft: \"6px\" }}>\r\n//                         {pageHeading}</label>\r\n//                       {(bredcrumbItemName.length > 0) ?\r\n//                         <label className=\"font-size-24 form-label  text-nowrap bd-highlight text-primary\"\r\n//                           style={{ paddingLeft: \"7px\", color: \"#5156be\" }} >&nbsp;/&nbsp;{bredcrumbItemName}</label>\r\n//                         : null\r\n//                       }\r\n//                     </div>\r\n//                 }\r\n//               </div>\r\n//             </div>\r\n\r\n//             <div className=\" d-flex  justify-content-end\"  >\r\n//               {excelBtnView ?\r\n//                 <div className=\"px-2 \" style={{ marginTop: \"7px\" }}>\r\n//                   <Button\r\n//                     type=\"button\"\r\n//                     title=\"Download List\"\r\n//                     color=\"btn btn-sm btn-outline-primary \"\r\n//                     onClick={() => { tog_scroll(); }}\r\n//                     data-toggle=\"modal\"\r\n//                   >\r\n//                     <i className=\"bx bx-download font-size-14\" ></i>\r\n//                   </Button>\r\n//                 </div>\r\n//                 : null}\r\n//               {\r\n//                 (((CountLabel) && (showCountlabel.length > 0))) ?\r\n//                   <div className=\"bg-dark text-center text-light external-event col-form-label  border border-Success rounded-2\"\r\n//                     style={{ width: \"100%\" }}>\r\n//                     <samp className=\"px-2 \">{showCountlabel}</samp>\r\n//                   </div>\r\n//                   :\r\n//                   null\r\n//               }\r\n//             </div>\r\n\r\n\r\n//           </div>\r\n//         </header>\r\n//         <Modal\r\n//           isOpen={modal_scroll}\r\n//           toggle={() => {\r\n//             tog_scroll();\r\n//           }}\r\n//           scrollable={true}\r\n//         >\r\n//           <div className=\"modal-header\">\r\n//             <h5 className=\"modal-title mt-0\">List</h5>\r\n\r\n//             <button\r\n//               type=\"button\"\r\n//               onClick={() => setmodal_scroll(false)}\r\n//               className=\"close\"\r\n//               data-dismiss=\"modal\"\r\n//               aria-label=\"Close\"\r\n//             >\r\n//               <span aria-hidden=\"true\">&times;</span>\r\n//             </button>\r\n//           </div>\r\n//           <div className=\"modal-body\">\r\n//             <AvForm onValidSubmit={(e, v) => { DownloadInExcelButtonHanler(e, v); }}>\r\n//               <div className=\"form-check\">\r\n//                 <input\r\n//                   id=\"checkAll\"\r\n//                   type=\"checkbox\"\r\n//                   className=\"form-check-input\"\r\n//                   onChange={excelCheckBoxOnChange}\r\n//                 />\r\n//                 <label className=\"form-label text-black\">All Select</label>\r\n//               </div>\r\n//               <ExcelCheckBox />\r\n\r\n//               <div className=\"modal-body\">\r\n//                 <div className=\"modal-footer\">\r\n//                   <button\r\n//                     type=\"button\"\r\n//                     className=\"btn btn-secondary\"\r\n//                     onClick={() => setmodal_scroll(false)}\r\n//                   >\r\n//                     Cancel\r\n//                   </button>\r\n//                   <button type=\"submit\" className=\"btn btn-primary\" >\r\n//                     Download in Excel\r\n//                   </button>\r\n//                 </div>\r\n//               </div>\r\n//             </AvForm>\r\n//           </div>\r\n//         </Modal>\r\n//       </React.Fragment>\r\n//     )\r\n//   } else {\r\n//     return (<></>)\r\n//   }\r\n// }\r\n\r\n\r\n// export default BreadcrumbNew\r\n\r\n\r\n\r\n\r\n\r\n\r\nimport React, { useEffect, useState } from \"react\"\r\nimport { Row, Col, Modal, Button, } from \"reactstrap\"\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { BreadcrumbShowCountlabel, Breadcrumb_inputName } from \"../../store/Utilites/Breadcrumb/actions\";\r\nimport { AvForm, AvInput } from \"availity-reactstrap-validation\";\r\nimport * as XLSX from 'xlsx';\r\nimport * as urlRalations from \"../../routes/urlRalations\"\r\nimport { MetaTags } from \"react-meta-tags\";\r\nimport { GetHpageListData } from \"../../store/actions\";\r\n\r\n\r\n// export const initialstate = {\r\n//   breadShow: false,\r\n//   bredcrumbItemName: '',\r\n//   showCountlabel: \"\",\r\n//   userAccess: {},\r\n//   newBtnView: false,\r\n//   excelBtnView: false,\r\n//   pageHeading: '',\r\n//   showCount: false,\r\n//   excelData: [],\r\n//   userAcc: {},\r\n//   pageField: {},\r\n//   masterPage: ''\r\n// }\r\nconst BreadcrumbNew = (props) => {\r\n\r\n  const history = useHistory();\r\n  const dispatch = useDispatch();\r\n  // for Excel Download\r\n\r\n  const [modal_scroll, setmodal_scroll] = useState(false);\r\n  const [downListKey, setDownListKey] = useState([]);\r\n  const [breadcrumbDetail, setbreadcrumbDetail] = useState({});\r\n\r\n  const { downBtnData = [], userAccess, } = useSelector((state) => ({\r\n    userAccess: state.Login.RoleAccessUpdateData,\r\n    downBtnData: state.BreadcrumbReducer.downBtnData,\r\n    PageList: state.H_Pages.HPagesListData,\r\n  }));\r\n\r\n  // const { pageId } = props;\r\n  let { showCountlabel = '', bredcrumbItemName = '', breadcrum } = useSelector((state) => ({\r\n    showCountlabel: state.BreadcrumbReducer.showCountlabel,\r\n    bredcrumbItemName: state.BreadcrumbReducer.bredcrumbItemName,\r\n    breadcrum: state.BreadcrumbReducer.breadcrumbDetail,\r\n\r\n  }));\r\n\r\n  useEffect(() => {\r\n    dispatch(Breadcrumb_inputName(''))\r\n\r\n  }, [])\r\n  const {\r\n    breadShow = true,\r\n    newBtnView = true,\r\n    excelBtnView = true,\r\n    pageHeading = '',\r\n    CountLabel = true,\r\n    masterPage = \"\",\r\n    pageMode = \"\",\r\n    // breadcrumbDetail=[]\r\n  } = breadcrumbDetail;\r\n\r\n  useEffect(() => {\r\n    const locationPath = history.location.pathname\r\n    let userAcc = userAccess.find((inx) => {\r\n      return (`/${inx.ActualPagePath}` === locationPath)\r\n    });\r\n    if (!(userAcc === undefined)) {\r\n      showCountlabel = '';\r\n      bredcrumbItemName = '';\r\n      const isnewBtnView = ((userAcc.PageType === 2) && (userAcc.RoleAccess_IsSave));\r\n      const isCountLabel = (userAcc.CountLabel);\r\n      const isexcelBtnView = ((userAcc.PageType === 2) && (userAcc.RoleAccess_Exceldownload));\r\n      // const isbreadshow = ((userAcc.IsEditPopuporComponent === true))\r\n      dispatch(Breadcrumb_inputName(''))\r\n\r\n      setbreadcrumbDetail({\r\n        // masterPage:masterPage,\r\n        newBtnView: isnewBtnView,\r\n        excelBtnView: isexcelBtnView,\r\n        pageHeading: userAcc.PageHeading,\r\n        CountLabel: isCountLabel,\r\n        // breadShow:isbreadshow,\r\n        masterPage: urlRalations[userAcc.ActualPagePath],\r\n\r\n      })\r\n    }\r\n    else if (userAcc === undefined) {\r\n      setbreadcrumbDetail({\r\n        // masterPage:masterPage,\r\n        newBtnView: false,\r\n        excelBtnView: false,\r\n        pageHeading: false,\r\n        CountLabel: false,\r\n        // breadShow:isbreadshow,\r\n      })\r\n    }\r\n  }, [userAccess])\r\n\r\n  function tog_scroll() {\r\n    setmodal_scroll(!modal_scroll);\r\n    removeBodyCss();\r\n  }\r\n\r\n  function removeBodyCss() {\r\n    document.body.classList.add(\"no_padding\");\r\n  }\r\n\r\n  // New Button Handller\r\n  // const NewButtonHandeller = () => {\r\n  //   history.push({\r\n  //     pathname: masterPage,\r\n\r\n  //   })\r\n  // }\r\n  const NewButtonHandeller = () => {\r\n    if (pageMode === \"add\") {\r\n      let pathName = history.location.pathname\r\n      let userAcc = breadcrum.userAccess.find((inx) => {\r\n        return (`/${inx.ActualPagePath}` === pathName)\r\n      })\r\n      let listPagePath = userAccess.find((inx) => {\r\n        return (inx.id === userAcc.RelatedPageID)\r\n      })\r\n      if (listPagePath === undefined) {\r\n        return\r\n      }\r\n      history.push({\r\n        pathname: `/${listPagePath.ActualPagePath}`,\r\n      })\r\n    }\r\n    else {\r\n      history.push({\r\n        pathname: masterPage,\r\n        pageMode: pageMode\r\n      })\r\n    }\r\n\r\n\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (!(downBtnData === undefined)) {\r\n      if ((downBtnData.length > 0)) {\r\n        // object to array conversion\r\n        const propertyNames = Object.keys(downBtnData[0]);\r\n        setDownListKey(propertyNames)\r\n      }\r\n    }\r\n  }, [downBtnData])\r\n\r\n  const DownloadInExcelButtonHanler = (event, values) => {\r\n    // const exldata = downBtnData\r\n    let list = []\r\n    let object1 = {}\r\n    var selectedValues = Object.keys(values);\r\n    var filteredValues = selectedValues.filter(function (selectedValues) {\r\n      return values[selectedValues]\r\n    });\r\n    // debugger\r\n    downBtnData.map((index1) => {\r\n      // debugger\r\n      filteredValues.map((index2) => {\r\n        // debugger\r\n        if (index1.hasOwnProperty(index2)) {\r\n          object1[index2] = index1[index2]\r\n        }\r\n      })\r\n      list.push(object1)\r\n      object1 = {}\r\n    })\r\n    // debugger\r\n    const worksheet = XLSX.utils.json_to_sheet(list);\r\n    const workbook = XLSX.utils.book_new();\r\n    XLSX.utils.book_append_sheet(workbook, worksheet, \"Sheet1\");\r\n    XLSX.writeFile(workbook, \"Excel File.xlsx\");\r\n    setmodal_scroll(false)\r\n  }\r\n\r\n  const handleChange = (e) => {\r\n    var chek = document.getElementById(\"checkAll\")\r\n    if (chek) {\r\n      for (var i = 0; i < downListKey.length; i++) {\r\n        document.getElementById(`chckbox${i}`).checked = true\r\n      }\r\n    }\r\n    else {\r\n      for (var i = 0; i < downListKey.length; i++) {\r\n        document.getElementById(`chckbox${i}`).checked = false\r\n      }\r\n    }\r\n  };\r\n\r\n  const excelCheckBoxOnChange = (e) => {\r\n    // e.preventDefault();\r\n    const check = e.target\r\n    // var chek = document.getElementById(\"checkAll\").checked\r\n    if (check.id === \"checkAll\") {\r\n      if (check.checked) {\r\n        for (var i = 0; i < downListKey.length; i++) {\r\n          const a = document.getElementById(`chckbox${i}`)\r\n          if (a) {\r\n            a.checked = true\r\n            // excelData[0][`$defSelect${downListKey[i]}`] = true\r\n          }\r\n        }\r\n      }\r\n      else {\r\n        for (var i = 0; i < downListKey.length; i++) {\r\n          const a = document.getElementById(`chckbox${i}`)\r\n          if (a) {\r\n            a.checked = false\r\n            // excelData[0][`$defSelect${downListKey[i]}`] = false\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n  };\r\n\r\n  function ExcelCheckBox() {\r\n    const arrDiv = []\r\n    downListKey.forEach((index, key) => {\r\n      const match = index.slice(0, 1);\r\n      if (!(match === \"$\")) {\r\n        arrDiv.push(\r\n          <div className=\"row\" >\r\n            <div className=\"col col-12\"  >\r\n              <Row>\r\n                <div className=\"col col-12 \" >\r\n                  <AvInput\r\n                    className=\" text-black checkbox-border-red\"\r\n                    type=\"checkbox\"\r\n                    id={`chckbox${key}-${index.id}`}\r\n                    name={index}\r\n                    defaultValue={(downBtnData[0][`$defSelect${index}`]) ? true : false}\r\n                  />&nbsp;&nbsp;&nbsp;\r\n                  <label className=\"form-label text-black\"> {index} </label>\r\n                </div>\r\n              </Row>\r\n            </div>\r\n          </div>\r\n        )\r\n      }\r\n    })\r\n    return arrDiv\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <header id=\"page-topbar\" style={{ marginTop: \"56px\", backgroundColor: 'white', zIndex: \"1\" }} >\r\n        <div className=\"navbar-header\" style={{ paddingRight: \"-10px\" }}>\r\n          <div className=\"d-flex\" >\r\n            <div className=\"navbar-brand-box\" ></div>\r\n            <div style={{ paddingLeft: \"7px\" }}>\r\n              {\r\n                newBtnView ?\r\n                  <div >\r\n                    <button type=\"button\" className=\"btn btn-success\"\r\n                      data-mdb-toggle=\"tooltip\" data-mdb-placement=\"top\" title=\"Create New\"\r\n                      onClick={NewButtonHandeller}>\r\n                      New\r\n                    </button>\r\n                    <label className=\"font-size-18 form-label text-black \" style={{ paddingLeft: \"7px\", }} >{pageHeading}</label>\r\n                  </div>\r\n                  :\r\n                  <div>\r\n                    <label className=\"font-size-18  col-ls-6 col-form-label text-black\" style={{ marginLeft: \"6px\" }}>\r\n                      {pageHeading}</label>\r\n                    {(bredcrumbItemName.length > 0) ?\r\n                      <label className=\"font-size-24 form-label  text-nowrap bd-highlight text-primary\"\r\n                        style={{ paddingLeft: \"7px\", color: \"#5156be\" }} >&nbsp;/&nbsp;{bredcrumbItemName}</label>\r\n                      : null\r\n                    }\r\n                  </div>\r\n              }\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\" d-flex  justify-content-end\"  >\r\n            {excelBtnView ?\r\n              <div className=\"px-2 \" style={{ marginTop: \"7px\" }}>\r\n                <Button\r\n                  type=\"button\"\r\n                  title=\"Download List\"\r\n                  color=\"btn btn-sm btn-outline-primary \"\r\n                  onClick={() => { tog_scroll(); }}\r\n                  data-toggle=\"modal\"\r\n                >\r\n                  <i className=\"bx bx-download font-size-14\" ></i>\r\n                </Button>\r\n              </div>\r\n              : null}\r\n            {\r\n              (((CountLabel) && (showCountlabel.length > 0))) ?\r\n                <div className=\"bg-dark text-center text-light external-event col-form-label  border border-Success rounded-2\"\r\n                  style={{ width: \"100%\" }}>\r\n                  <samp className=\"px-2 \">{showCountlabel}</samp>\r\n                </div>\r\n                :\r\n                null\r\n            }\r\n          </div>\r\n\r\n\r\n        </div>\r\n      </header>\r\n      <Modal\r\n        isOpen={modal_scroll}\r\n        toggle={() => {\r\n          tog_scroll();\r\n        }}\r\n        scrollable={true}\r\n      >\r\n        <div className=\"modal-header\">\r\n          <h5 className=\"modal-title mt-0\">List</h5>\r\n\r\n          <button\r\n            type=\"button\"\r\n            onClick={() => setmodal_scroll(false)}\r\n            className=\"close\"\r\n            data-dismiss=\"modal\"\r\n            aria-label=\"Close\"\r\n          >\r\n            <span aria-hidden=\"true\">&times;</span>\r\n          </button>\r\n        </div>\r\n        <div className=\"modal-body\">\r\n          <AvForm onValidSubmit={(event, values) => { DownloadInExcelButtonHanler(event, values); }}>\r\n            {/* <div className=\"form-check\">\r\n              <input\r\n                id=\"checkAll\"\r\n                type=\"checkbox\"\r\n                className=\"form-check-input\"\r\n                onChange={excelCheckBoxOnChange}\r\n              />\r\n              <label className=\"form-label text-black\">All Select</label>\r\n            </div> */}\r\n            <ExcelCheckBox />\r\n\r\n            <div className=\"modal-body\">\r\n              <div className=\"modal-footer\">\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"btn btn-secondary\"\r\n                  onClick={() => setmodal_scroll(false)}\r\n                >\r\n                  Cancel\r\n                </button>\r\n                <button type=\"submit\" className=\"btn btn-primary\" >\r\n                  Download in Excel\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </AvForm>\r\n        </div>\r\n      </Modal>\r\n    </React.Fragment>\r\n  )\r\n\r\n}\r\n\r\n\r\nexport default BreadcrumbNew\r\n"],"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"},"metadata":{},"sourceType":"module"}