{"ast":null,"code":"import { groupBy } from \"../../components/Common/CommonFunction\";\nimport { numberWithCommas } from \"../Report_common_function\"; // original\n\nexport const columns = [\"HSN Item Name\", \"Quantity\", \"MRP\", \"Rate\", \"Basic   Amount \", \"CGST%\", \"CGST   Amount \", \"SGST%\", \"SGST   Amount\", \"Total Amount\"];\nexport const columnsWithIGST = [\"HSN Item Name\", \"Quantity\", \"MRP\", \"Rate\", \"Basic   Amount \", \"IGST%\", \"IGST   Amount \", \"Total Amount\"];\nexport const PageHedercolumns = [\"Billed by\", \"Billed to\", ''];\nexport const Footercolumn = [\"\"];\nexport const BilledBy = [\"Billed by\"];\nexport const BilledTo = [\"Billed by\"];\nexport const DetailsOfTransport = [\"Billed by\"];\nexport const Rows = data => {\n  const {\n    OrderItem = []\n  } = data;\n  let hasHedRow = [];\n  const grouped = groupBy(OrderItem, ele => ele.GSTPercentage);\n  console.log(grouped);\n  grouped.forEach(i => {\n    if (i.length > 0) {\n      let totalBasicAmount = 0;\n      let totalCGst = 0;\n      let totalSGst = 0;\n      let totalAmount = 0;\n      let totalQuantity = 0;\n      let TotalGst = 0;\n      let GSTPercentage = 0;\n      i.forEach(element => {\n        const tableitemRow = [`(${element.HSNCode}) ${element.ItemName}     \n                     ${element.Comment === null ? \"\" : element.Comment}`, `${Number(element.Quantity).toFixed(2)} ${element.PrimaryUnitName}  ${element.UnitName}`, `${numberWithCommas(Number(element.MRPValue).toFixed(2))}`, `${numberWithCommas(Number(element.Rate).toFixed(2))}`, `${numberWithCommas(Number(element.BasicAmount).toFixed(2))}`, `${Number(element.CGSTPercentage)}%`, `${numberWithCommas(Number(element.CGST).toFixed(2))}`, `${Number(element.SGSTPercentage)}%`, `${numberWithCommas(Number(element.SGST).toFixed(2))}`, `${numberWithCommas(Number(element.Amount).toFixed(2))}`, \"row\"];\n        totalQuantity = Number(totalQuantity) + Number(element.Quantity);\n        totalCGst = Number(totalCGst) + Number(element.CGST);\n        totalSGst = Number(totalSGst) + Number(element.SGST);\n        TotalGst = totalCGst + totalSGst;\n        totalAmount = Number(totalAmount) + Number(element.Amount);\n        GSTPercentage = Number(element.CGSTPercentage) + Number(element.SGSTPercentage);\n        totalBasicAmount = Number(totalBasicAmount) + Number(element.BasicAmount);\n        hasHedRow.push(tableitemRow);\n      });\n\n      function totalrow() {\n        return [`GST ${parseFloat(GSTPercentage)}%  Total:${numberWithCommas(Number(TotalGst).toFixed(2))}`, \"\", `${numberWithCommas(Number(totalBasicAmount).toFixed(2))}`, \"\", \"\", `${numberWithCommas(Number(totalCGst).toFixed(2))}`, \"isaddition\", `${numberWithCommas(Number(totalSGst).toFixed(2))}`, \"\", `${numberWithCommas(Number(totalAmount).toFixed(2))}`];\n      }\n\n      ;\n      hasHedRow.push(totalrow());\n    }\n  });\n  return hasHedRow;\n};\n_c = Rows;\nexport const RowsWithIGST = data => {\n  const {\n    OrderItem = []\n  } = data;\n  let hasHedRow = [];\n  const grouped = groupBy(OrderItem, ele => ele.GSTPercentage);\n  console.log(grouped);\n  grouped.forEach(i => {\n    if (i.length > 0) {\n      let totalBasicAmount = 0;\n      let totalIGst = 0;\n      let totalAmount = 0;\n      let totalQuantity = 0;\n      let GSTPercentage = 0;\n      i.forEach(element => {\n        const tableitemRow = [`(${element.HSNCode}) ${element.ItemName}     \n                     ${element.Comment === null ? \"\" : element.Comment}`, `${Number(element.Quantity).toFixed(2)} ${element.PrimaryUnitName}                  ${element.UnitName}`, `${numberWithCommas(Number(element.MRPValue).toFixed(2))}`, `${numberWithCommas(Number(element.Rate).toFixed(2))}`, `${numberWithCommas(Number(element.BasicAmount).toFixed(2))}`, `${Number(element.IGSTPercentage)}%`, `${numberWithCommas(Number(element.IGST).toFixed(2))}`, `${numberWithCommas(Number(element.Amount).toFixed(2))}`, \"row\"];\n        totalQuantity = Number(totalQuantity) + Number(element.Quantity);\n        totalIGst = Number(totalIGst) + Number(element.IGST);\n        totalAmount = Number(totalAmount) + Number(element.Amount);\n        totalBasicAmount = Number(totalBasicAmount) + Number(element.BasicAmount);\n        GSTPercentage = Number(element.IGSTPercentage);\n        hasHedRow.push(tableitemRow);\n      });\n\n      function totalrow() {\n        return [`GST ${Number(GSTPercentage)}%  Total:${numberWithCommas(Number(totalIGst).toFixed(2))} `, `${numberWithCommas(Number(totalBasicAmount).toFixed(2))}`, \"\", \"\", \"\", `${numberWithCommas(Number(totalIGst).toFixed(2))}`, \"isaddition\", `${numberWithCommas(Number(totalAmount).toFixed(2))}`];\n      }\n\n      ;\n      hasHedRow.push(totalrow());\n    }\n  });\n  return hasHedRow;\n};\n_c2 = RowsWithIGST;\nexport const ReportFotterColumns = [\"SGST\", \"CGST\", \"Quantity\", \"GST % \", \"TaxbleAmt.\", \"IGST\", \"Total Amt\"];\nexport const ReportFotterColumns2 = [\"SGST\"];\nexport const ReportRows = (data, doc) => {\n  const terms = data.OrderTermsAndCondition;\n  const slicedArray = terms.slice(0, 2);\n  var TableArray = [[\"Terms And Condition\"], [`${slicedArray[0] === undefined ? \"\" : slicedArray[0].TermsAndCondition}`], [`${slicedArray[1] === undefined ? \"\" : slicedArray[1].TermsAndCondition}`]];\n  return TableArray;\n};\n_c3 = ReportRows;\nexport const BilledByRow = data => {\n  var BilledByArray = [[`${data.SupplierName}`], [`${data.SupplierAddress}`], [`FSSAI:${data.SupplierFssai}`], [`GSTIN:${data.SupplierGSTIN}`]];\n  return BilledByArray;\n};\n_c4 = BilledByRow;\nexport const BilledToRow = data => {\n  var BilledToArray = [[`${data.CustomerName}`], [`${data.BillingAddress}`], [`FSSAI:${data.BillingFssai}`], [`GSTIN:${data.CustomerGSTIN}`]];\n  return BilledToArray;\n};\n_c5 = BilledToRow;\nexport const DetailsOfTransportRow = data => {\n  var DetailsOfTransportArray = [[`${data.POTypeName}`], [`${data.CustomerName}`], [`${data.BillingAddress}`], [`FSSAI:${data.ShippingFssai}`]];\n  return DetailsOfTransportArray;\n};\n_c6 = DetailsOfTransportRow;\n\nvar _c, _c2, _c3, _c4, _c5, _c6;\n\n$RefreshReg$(_c, \"Rows\");\n$RefreshReg$(_c2, \"RowsWithIGST\");\n$RefreshReg$(_c3, \"ReportRows\");\n$RefreshReg$(_c4, \"BilledByRow\");\n$RefreshReg$(_c5, \"BilledToRow\");\n$RefreshReg$(_c6, \"DetailsOfTransportRow\");","map":{"version":3,"names":["groupBy","numberWithCommas","columns","columnsWithIGST","PageHedercolumns","Footercolumn","BilledBy","BilledTo","DetailsOfTransport","Rows","data","OrderItem","hasHedRow","grouped","ele","GSTPercentage","console","log","forEach","i","length","totalBasicAmount","totalCGst","totalSGst","totalAmount","totalQuantity","TotalGst","element","tableitemRow","HSNCode","ItemName","Comment","Number","Quantity","toFixed","PrimaryUnitName","UnitName","MRPValue","Rate","BasicAmount","CGSTPercentage","CGST","SGSTPercentage","SGST","Amount","push","totalrow","parseFloat","RowsWithIGST","totalIGst","IGSTPercentage","IGST","ReportFotterColumns","ReportFotterColumns2","ReportRows","doc","terms","OrderTermsAndCondition","slicedArray","slice","TableArray","undefined","TermsAndCondition","BilledByRow","BilledByArray","SupplierName","SupplierAddress","SupplierFssai","SupplierGSTIN","BilledToRow","BilledToArray","CustomerName","BillingAddress","BillingFssai","CustomerGSTIN","DetailsOfTransportRow","DetailsOfTransportArray","POTypeName","ShippingFssai"],"sources":["D:/Rohit/Git projects/Manthan/src/Reports/OrderReport/TableData.js"],"sourcesContent":["import { groupBy } from \"../../components/Common/CommonFunction\";\r\nimport { numberWithCommas } from \"../Report_common_function\";\r\n\r\n// original\r\nexport const columns = [\r\n    \"HSN Item Name\",\r\n    \"Quantity\",\r\n    \"MRP\",\r\n    \"Rate\",\r\n    \"Basic   Amount \",\r\n    \"CGST%\",\r\n    \"CGST   Amount \",\r\n    \"SGST%\",\r\n    \"SGST   Amount\",\r\n    \"Total Amount\"];\r\n\r\nexport const columnsWithIGST = [\r\n    \"HSN Item Name\",\r\n    \"Quantity\",\r\n    \"MRP\",\r\n    \"Rate\",\r\n    \"Basic   Amount \",\r\n    \"IGST%\",\r\n    \"IGST   Amount \",\r\n    \"Total Amount\"];\r\n\r\nexport const PageHedercolumns = [\r\n    \"Billed by\",\r\n    \"Billed to\",\r\n    ''\r\n]\r\nexport const Footercolumn = [\r\n    \"\",\r\n]\r\n\r\nexport const BilledBy = [\r\n    \"Billed by\",\r\n]\r\nexport const BilledTo = [\r\n    \"Billed by\",\r\n]\r\nexport const DetailsOfTransport = [\r\n    \"Billed by\",\r\n]\r\n\r\nexport const Rows = (data) => {\r\n\r\n    const { OrderItem = [] } = data\r\n    let hasHedRow = []\r\n    const grouped = groupBy(OrderItem, ele => ele.GSTPercentage);\r\n    console.log(grouped)\r\n    grouped.forEach(i => {\r\n\r\n        if (i.length > 0) {\r\n\r\n            let totalBasicAmount = 0\r\n            let totalCGst = 0\r\n            let totalSGst = 0\r\n            let totalAmount = 0\r\n            let totalQuantity = 0\r\n            let TotalGst = 0\r\n            let GSTPercentage = 0\r\n\r\n\r\n            i.forEach(element => {\r\n\r\n                const tableitemRow = [\r\n                    `(${element.HSNCode}) ${element.ItemName}     \r\n                     ${element.Comment === null ? \"\" : element.Comment}`,\r\n                    `${Number(element.Quantity).toFixed(2)} ${element.PrimaryUnitName}  ${element.UnitName}`,\r\n                    `${(numberWithCommas(Number(element.MRPValue).toFixed(2)))}`,\r\n                    `${(numberWithCommas(Number(element.Rate).toFixed(2)))}`,\r\n                    `${(numberWithCommas(Number(element.BasicAmount).toFixed(2)))}`,\r\n                    `${Number(element.CGSTPercentage)}%`,\r\n                    `${(numberWithCommas(Number(element.CGST).toFixed(2)))}`,\r\n                    `${Number(element.SGSTPercentage)}%`,\r\n                    `${(numberWithCommas(Number(element.SGST).toFixed(2)))}`,\r\n                    `${(numberWithCommas(Number(element.Amount).toFixed(2)))}`,\r\n                    \"row\"\r\n                ];\r\n\r\n                totalQuantity = Number(totalQuantity) + Number(element.Quantity)\r\n                totalCGst = Number(totalCGst) + Number(element.CGST)\r\n                totalSGst = Number(totalSGst) + Number(element.SGST)\r\n                TotalGst = totalCGst + totalSGst;\r\n                totalAmount = Number(totalAmount) + Number(element.Amount)\r\n                GSTPercentage = Number(element.CGSTPercentage) + Number(element.SGSTPercentage)\r\n                totalBasicAmount = Number(totalBasicAmount) + Number(element.BasicAmount)\r\n\r\n                hasHedRow.push(tableitemRow);\r\n            })\r\n\r\n            function totalrow() {\r\n                return [\r\n                    `GST ${(parseFloat(GSTPercentage))}%  Total:${numberWithCommas(Number(TotalGst).toFixed(2))}`,\r\n                    \"\",\r\n                    `${numberWithCommas(Number(totalBasicAmount).toFixed(2))}`,\r\n                    \"\",\r\n                    \"\",\r\n                    `${numberWithCommas(Number(totalCGst).toFixed(2))}`,\r\n                    \"isaddition\",\r\n                    `${numberWithCommas(Number(totalSGst).toFixed(2))}`,\r\n                    \"\",\r\n                    `${numberWithCommas(Number(totalAmount).toFixed(2))}`,\r\n                ];\r\n            };\r\n            hasHedRow.push(totalrow());\r\n        }\r\n    })\r\n    return hasHedRow\r\n}\r\n\r\nexport const RowsWithIGST = (data) => {\r\n\r\n    const { OrderItem = [] } = data\r\n    let hasHedRow = []\r\n    const grouped = groupBy(OrderItem, ele => ele.GSTPercentage);\r\n    console.log(grouped)\r\n    grouped.forEach(i => {\r\n\r\n        if (i.length > 0) {\r\n\r\n            let totalBasicAmount = 0\r\n            let totalIGst = 0\r\n            let totalAmount = 0\r\n            let totalQuantity = 0\r\n            let GSTPercentage = 0\r\n\r\n\r\n            i.forEach(element => {\r\n\r\n                const tableitemRow = [\r\n                    `(${element.HSNCode}) ${element.ItemName}     \r\n                     ${element.Comment === null ? \"\" : element.Comment}`,\r\n                    `${Number(element.Quantity).toFixed(2)} ${element.PrimaryUnitName}                  ${element.UnitName}`,\r\n                    `${numberWithCommas(Number(element.MRPValue).toFixed(2))}`,\r\n                    `${numberWithCommas(Number(element.Rate).toFixed(2))}`,\r\n                    `${numberWithCommas(Number(element.BasicAmount).toFixed(2))}`,\r\n                    `${Number(element.IGSTPercentage)}%`,\r\n                    `${numberWithCommas(Number(element.IGST).toFixed(2))}`,\r\n                    `${numberWithCommas(Number(element.Amount).toFixed(2))}`,\r\n                    \"row\"\r\n                ];\r\n\r\n                totalQuantity = Number(totalQuantity) + Number(element.Quantity)\r\n                totalIGst = Number(totalIGst) + Number(element.IGST)\r\n                totalAmount = Number(totalAmount) + Number(element.Amount)\r\n                totalBasicAmount = Number(totalBasicAmount) + Number(element.BasicAmount)\r\n                GSTPercentage = Number(element.IGSTPercentage)\r\n\r\n\r\n                hasHedRow.push(tableitemRow);\r\n            })\r\n\r\n            function totalrow() {\r\n                return [\r\n                    `GST ${(Number(GSTPercentage))}%  Total:${(numberWithCommas(Number(totalIGst).toFixed(2)))} `,\r\n                    `${numberWithCommas(Number(totalBasicAmount).toFixed(2))}`,\r\n                    \"\",\r\n                    \"\",\r\n                    \"\",\r\n                    `${numberWithCommas(Number(totalIGst).toFixed(2))}`,\r\n                    \"isaddition\",\r\n                    `${numberWithCommas(Number(totalAmount).toFixed(2))}`,\r\n\r\n                ];\r\n            };\r\n            hasHedRow.push(totalrow());\r\n        }\r\n    })\r\n    return hasHedRow\r\n}\r\n\r\nexport const ReportFotterColumns = [\r\n    \"SGST\",\r\n    \"CGST\", \"Quantity\",\r\n    \"GST % \",\r\n    \"TaxbleAmt.\", \"IGST\", \"Total Amt\"\r\n];\r\n\r\nexport const ReportFotterColumns2 = [\r\n    \"SGST\",\r\n];\r\n\r\nexport const ReportRows = (data, doc) => {\r\n\r\n    const terms = data.OrderTermsAndCondition\r\n    const slicedArray = terms.slice(0, 2);\r\n    var TableArray = [[\"Terms And Condition\"],\r\n    [`${slicedArray[0] === undefined ? \"\" : slicedArray[0].TermsAndCondition}`,\r\n    ],\r\n    [`${slicedArray[1] === undefined ? \"\" : slicedArray[1].TermsAndCondition}`,\r\n    ],\r\n    ]\r\n    return TableArray\r\n}\r\n\r\nexport const BilledByRow = (data) => {\r\n    var BilledByArray = [\r\n        [`${data.SupplierName}`],\r\n        [`${data.SupplierAddress}`],\r\n        [`FSSAI:${data.SupplierFssai}`],\r\n        [`GSTIN:${data.SupplierGSTIN}`],\r\n\r\n    ]\r\n    return BilledByArray;\r\n}\r\n\r\nexport const BilledToRow = (data) => {\r\n\r\n    var BilledToArray = [\r\n        [`${data.CustomerName}`],\r\n        [`${data.BillingAddress}`],\r\n        [`FSSAI:${data.BillingFssai}`],\r\n        [`GSTIN:${data.CustomerGSTIN}`],\r\n\r\n    ]\r\n\r\n    return BilledToArray;\r\n}\r\n\r\nexport const DetailsOfTransportRow = (data) => {\r\n\r\n    var DetailsOfTransportArray = [\r\n        [`${data.POTypeName}`],\r\n        [`${data.CustomerName}`],\r\n        [`${data.BillingAddress}`],\r\n        [`FSSAI:${data.ShippingFssai}`],\r\n\r\n    ]\r\n\r\n    return DetailsOfTransportArray;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}