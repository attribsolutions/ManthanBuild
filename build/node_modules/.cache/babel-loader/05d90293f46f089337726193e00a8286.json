{"ast":null,"code":"export const columns = [\"SR No.\", \"ItemName\", \"BatchCode\", \"MRP\", \"Box\", \"Outer \", // \"Pcs\",\n\"quantity\", \"UnitName\"];\nexport const columns1 = [\"SR No.\", \"Invoice Date\", \"Invoice Number\", \"Party Name\", \"Amount\", \"Cash \", \"Cheque\", \"Credit\", \"Online RTGS/M Wallet\"];\nexport const PageHedercolumns = [\"Billed by\", \"Billed to\", ''];\nexport const Rows = data => {\n  const {\n    InvoiceItems = []\n  } = data; // InvoiceItemNames.sort((firstItem, secondItem) => firstItem.GSTPercentage - secondItem.GSTPercentage);\n\n  const returnArr = [];\n  let Gst = 0;\n  let TotalMRP = 0;\n  let TotalBox = 0;\n  let TotalPcs = 0;\n  let TotalQuantity = 0;\n  InvoiceItems.forEach((element, key) => {\n    const tableitemRow = [element.Item, element.ItemName, element.BatchCode, element.MRP, element.Box, element.Outer, // element.Pcs,\n    element.Quantity, element.UnitName];\n\n    function totalLots() {\n      TotalMRP = Number(TotalMRP) + Number(element.MRP);\n      TotalBox = Number(TotalBox) + Number(element.Box);\n      TotalPcs = Number(TotalPcs) + Number(element.Pcs);\n      TotalQuantity = Number(TotalQuantity) + Number(element.Quantity);\n    }\n\n    ;\n\n    function totalrow() {\n      return [\" \", \"Total\", \"\", `${parseFloat(TotalMRP).toFixed(2)}`, ``, \"\", `${parseFloat(TotalQuantity).toFixed(2)}`, ``];\n    }\n\n    ;\n    returnArr.push(tableitemRow);\n    data[\"tableTot\"] = totalLots();\n\n    if (key === InvoiceItems.length - 1) {\n      returnArr.push(totalrow());\n    }\n  });\n  return returnArr;\n};\n_c = Rows;\nexport const Rows1 = data => {\n  const {\n    InvoiceParent = []\n  } = data; // InvoiceItemNames.sort((firstItem, secondItem) => firstItem.GSTPercentage - secondItem.GSTPercentage);\n\n  const returnArr = [];\n  let Gst = 0;\n  let TotalAmount = 0;\n  InvoiceParent.forEach((element, key) => {\n    const tableitemRow = [element.srNO, element.InvoiceDate, element.FullInvoiceNumber, element.CustomerName, element.GrandTotal, element.Cash, element.Cheque, element.Credit, element.OnlineRTGS];\n\n    function totalLots() {\n      TotalAmount = Number(TotalAmount) + Number(element.GrandTotal);\n    }\n\n    ;\n\n    function totalrow() {\n      return [\" \", \"Total\", \"\", ``, `${parseFloat(TotalAmount).toFixed(2)}`, \"\", ``, ``];\n    }\n\n    ; // if (Gst === 0) { Gst = element.GSTPercentage };\n    // let aa = { TotalCGst: 0, totalSGst: 0 }\n    // if (data[\"tableTot\"] === undefined) { data[\"tableTot\"] = aa }\n    // else {\n    //     // returnArr.push(totalrow());\n    //     returnArr.push(tableitemRow);\n    //     data[\"tableTot\"] = totalLots()\n    // }\n\n    returnArr.push(tableitemRow);\n    data[\"tableTot\"] = totalLots();\n\n    if (key === InvoiceParent.length - 1) {\n      returnArr.push(totalrow());\n    }\n  });\n  return returnArr;\n};\n_c2 = Rows1;\nexport const ReportHederRows = (data, doc) => {\n  debugger;\n  const Address = data.PartyDetails.PartyAddress;\n  const Routes = data.PartyDetails.RouteName;\n  const DriverName = data.PartyDetails.DriverName;\n  const VehicleNo = data.PartyDetails.VehicleNo;\n  var reportArray = [[\"Address:\", `${Address}`], [\"Routes:\", `${Routes}                   DriverName:${DriverName}                      Vehicle No:${VehicleNo}     `] // [`FSSAI :f23dfxxxxxwe55`, ,`To Date:      ${data.Todate}`  ],\n  // [,,`INR NO :${data.FullInvoiceNumber}`]\n  ];\n  return reportArray;\n};\n_c3 = ReportHederRows;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Rows\");\n$RefreshReg$(_c2, \"Rows1\");\n$RefreshReg$(_c3, \"ReportHederRows\");","map":{"version":3,"names":["columns","columns1","PageHedercolumns","Rows","data","InvoiceItems","returnArr","Gst","TotalMRP","TotalBox","TotalPcs","TotalQuantity","forEach","element","key","tableitemRow","Item","ItemName","BatchCode","MRP","Box","Outer","Quantity","UnitName","totalLots","Number","Pcs","totalrow","parseFloat","toFixed","push","length","Rows1","InvoiceParent","TotalAmount","srNO","InvoiceDate","FullInvoiceNumber","CustomerName","GrandTotal","Cash","Cheque","Credit","OnlineRTGS","ReportHederRows","doc","Address","PartyDetails","PartyAddress","Routes","RouteName","DriverName","VehicleNo","reportArray"],"sources":["D:/Rohit/Git projects/Manthan/src/Reports/Van Loading Party Wise InvoiceList/TableData.js"],"sourcesContent":["\r\nexport const columns = [\r\n    \"SR No.\",\r\n    \"ItemName\",\r\n    \"BatchCode\",\r\n    \"MRP\",\r\n    \"Box\",\r\n    \"Outer \",\r\n    // \"Pcs\",\r\n    \"quantity\",\r\n    \"UnitName\",\r\n];\r\nexport const columns1 = [\r\n    \"SR No.\",\r\n    \"Invoice Date\",\r\n    \"Invoice Number\",\r\n    \"Party Name\",\r\n    \"Amount\",\r\n    \"Cash \",\r\n    \"Cheque\",\r\n    \"Credit\",\r\n    \"Online RTGS/M Wallet\",\r\n];\r\n\r\nexport const PageHedercolumns = [\r\n    \"Billed by\",\r\n    \"Billed to\",\r\n    ''\r\n]\r\n\r\nexport const Rows = (data) => {\r\n    const { InvoiceItems = [] } = data\r\n    // InvoiceItemNames.sort((firstItem, secondItem) => firstItem.GSTPercentage - secondItem.GSTPercentage);\r\n    const returnArr = [];\r\n    let Gst = 0\r\n    let TotalMRP = 0\r\n    let TotalBox = 0\r\n    let TotalPcs = 0\r\n    let TotalQuantity = 0\r\n\r\n    InvoiceItems.forEach((element, key) => {\r\n         \r\n        const tableitemRow = [\r\n            element.Item,\r\n            element.ItemName,\r\n            element.BatchCode,\r\n            element.MRP,\r\n            element.Box,\r\n            element.Outer,\r\n            // element.Pcs,\r\n            element.Quantity,\r\n            element.UnitName,\r\n        ];\r\n\r\n        function totalLots() {\r\n            TotalMRP = Number(TotalMRP) + Number(element.MRP)\r\n            TotalBox = Number(TotalBox) + Number(element.Box)\r\n            TotalPcs = Number(TotalPcs) + Number(element.Pcs)\r\n            TotalQuantity = Number(TotalQuantity) + Number(element.Quantity)\r\n        };\r\n\r\n        function totalrow() {\r\n            return [\r\n                \" \",\r\n                \"Total\",\r\n                \"\",\r\n                `${parseFloat(TotalMRP).toFixed(2)}`,\r\n                ``,\r\n                \"\",\r\n                `${parseFloat(TotalQuantity).toFixed(2)}`,\r\n                ``,\r\n\r\n            ];\r\n        };\r\n        returnArr.push(tableitemRow);\r\n        data[\"tableTot\"] = totalLots()\r\n\r\n\r\n        if (key === InvoiceItems.length - 1) {\r\n            returnArr.push(totalrow());\r\n        }\r\n    })\r\n    return returnArr;\r\n}\r\n\r\nexport const Rows1 = (data) => {\r\n    const { InvoiceParent = [] } = data\r\n    // InvoiceItemNames.sort((firstItem, secondItem) => firstItem.GSTPercentage - secondItem.GSTPercentage);\r\n    const returnArr = [];\r\n    let Gst = 0\r\n    let TotalAmount = 0\r\n\r\n\r\n    InvoiceParent.forEach((element, key) => {\r\n        const tableitemRow = [\r\n            element.srNO,\r\n            element.InvoiceDate,\r\n            element.FullInvoiceNumber,\r\n            element.CustomerName,\r\n            element.GrandTotal,\r\n            element.Cash,\r\n            element.Cheque,\r\n            element.Credit,\r\n            element.OnlineRTGS,\r\n        ];\r\n\r\n        function totalLots() {\r\n            TotalAmount = Number(TotalAmount) + Number(element.GrandTotal)\r\n\r\n        };\r\n\r\n        function totalrow() {\r\n            return [\r\n                \" \",\r\n                \"Total\",\r\n                \"\",\r\n                ``,\r\n                `${parseFloat(TotalAmount).toFixed(2)}`,\r\n                \"\",\r\n                ``,\r\n                ``,\r\n\r\n\r\n            ];\r\n        };\r\n\r\n\r\n        // if (Gst === 0) { Gst = element.GSTPercentage };\r\n        // let aa = { TotalCGst: 0, totalSGst: 0 }\r\n        // if (data[\"tableTot\"] === undefined) { data[\"tableTot\"] = aa }\r\n\r\n        // else {\r\n        //     // returnArr.push(totalrow());\r\n        //     returnArr.push(tableitemRow);\r\n        //     data[\"tableTot\"] = totalLots()\r\n        // }\r\n        returnArr.push(tableitemRow);\r\n        data[\"tableTot\"] = totalLots()\r\n\r\n        if (key === InvoiceParent.length - 1) {\r\n            returnArr.push(totalrow());\r\n        }\r\n    })\r\n    return returnArr;\r\n}\r\n\r\n\r\nexport const ReportHederRows = (data,doc) => {\r\n    debugger\r\n    const Address = data.PartyDetails.PartyAddress\r\n    const Routes = data.PartyDetails.RouteName\r\n    const DriverName = data.PartyDetails.DriverName\r\n    const VehicleNo = data.PartyDetails.VehicleNo\r\n\r\n    var reportArray = [\r\n        [\"Address:\", `${Address}`,],\r\n\r\n        [\"Routes:\", `${Routes}                   DriverName:${DriverName}                      Vehicle No:${VehicleNo}     `],\r\n        // [`FSSAI :f23dfxxxxxwe55`, ,`To Date:      ${data.Todate}`  ],\r\n        // [,,`INR NO :${data.FullInvoiceNumber}`]\r\n    ]\r\n    return reportArray;\r\n} "],"mappings":"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"},"metadata":{},"sourceType":"module"}