{"ast":null,"code":"var _jsxFileName = \"D:\\\\Rohit\\\\Git projects\\\\Manthan\\\\src\\\\pages\\\\Adminisrator\\\\CategoryTypePages\\\\CategoryTypeMaster.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { Card, CardBody, CardHeader, Col, Container, FormGroup, Input, Label, Row } from \"reactstrap\";\nimport { MetaTags } from \"react-meta-tags\";\nimport { AlertState, commonPageField, commonPageFieldSuccess } from \"../../../store/actions\";\nimport { useHistory } from \"react-router-dom\";\nimport { Breadcrumb_inputName } from \"../../../store/Utilites/Breadcrumb/actions\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { saveCategoryTypeMaster, saveCategoryTypeMaster_Success, editCategoryTypeIDSuccess, updateCategoryTypeID, getCategoryTypelistSuccess, updateCategoryTypeIDSuccess } from \"../../../store/Administrator/CategoryTypeRedux/actions\";\nimport { comAddPageFieldFunc, formValid, initialFiledFunc, onChangeText, resetFunction } from \"../../../components/Common/validationFunction\";\nimport { SaveButton } from \"../../../components/Common/CommonButton\";\nimport { breadcrumbReturnFunc, btnIsDissablefunc, loginUserID, metaTagLabel } from \"../../../components/Common/CommonFunction\";\nimport * as url from \"../../../routes/route_url\";\nimport * as pageId from \"../../../routes/allPageID\";\nimport * as mode from \"../../../routes/PageMode\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CategoryTypeMaster = props => {\n  _s();\n\n  const history = useHistory();\n  const dispatch = useDispatch();\n  const fileds = {\n    id: \"\",\n    Name: \"\"\n  };\n  const [state, setState] = useState(() => initialFiledFunc(fileds));\n  const [modalCss, setModalCss] = useState(false);\n  const [pageMode, setPageMode] = useState(mode.defaultsave);\n  const [userPageAccessState, setUserAccState] = useState(123);\n  const [editCreatedBy, seteditCreatedBy] = useState(\"\"); //Access redux store Data /  'save_ModuleSuccess' action data\n\n  const {\n    postMsg,\n    updateMsg,\n    pageField,\n    userAccess\n  } = useSelector(state => ({\n    postMsg: state.categoryTypeReducer.PostData,\n    updateMsg: state.categoryTypeReducer.updateMessage,\n    userAccess: state.Login.RoleAccessUpdateData,\n    pageField: state.CommonPageFieldReducer.pageField\n  }));\n  useEffect(() => {\n    const page_Id = pageId.CATEGORYTYPE;\n    dispatch(commonPageFieldSuccess(null));\n    dispatch(commonPageField(page_Id));\n  }, []);\n  const values = { ...state.values\n  };\n  const {\n    isError\n  } = state;\n  const {\n    fieldLabel\n  } = state;\n  const location = { ...history.location\n  };\n  const hasShowloction = location.hasOwnProperty(mode.editValue);\n  const hasShowModal = props.hasOwnProperty(mode.editValue); // userAccess useEffect\n\n  useEffect(() => {\n    let userAcc = null;\n    let locationPath = location.pathname;\n\n    if (hasShowModal) {\n      locationPath = props.masterPath;\n    }\n\n    ;\n    userAcc = userAccess.find(inx => {\n      return `/${inx.ActualPagePath}` === locationPath;\n    });\n\n    if (userAcc) {\n      setUserAccState(userAcc);\n      breadcrumbReturnFunc({\n        dispatch,\n        userAcc\n      });\n    }\n\n    ;\n  }, [userAccess]); //This UseEffect 'SetEdit' data and 'autoFocus' while this Component load First Time.\n\n  useEffect(() => {\n    if (hasShowloction || hasShowModal) {\n      let hasEditVal = null;\n\n      if (hasShowloction) {\n        setPageMode(location.pageMode);\n        hasEditVal = location.editValue;\n      } else if (hasShowModal) {\n        hasEditVal = props.editValue;\n        setPageMode(props.pageMode);\n        setModalCss(true);\n      }\n\n      if (hasEditVal) {\n        const {\n          id,\n          Name\n        } = hasEditVal;\n        const {\n          values,\n          fieldLabel,\n          hasValid,\n          required,\n          isError\n        } = { ...state\n        };\n        values.Name = Name;\n        values.id = id;\n        hasValid.Name.valid = true;\n        setState({\n          values,\n          fieldLabel,\n          hasValid,\n          required,\n          isError\n        });\n        dispatch(Breadcrumb_inputName(hasEditVal.Name));\n        seteditCreatedBy(hasEditVal.CreatedBy);\n      }\n\n      dispatch(editCategoryTypeIDSuccess({\n        Status: false\n      }));\n    }\n  }, []);\n  useEffect(() => {\n    if (postMsg.Status === true && postMsg.StatusCode === 200) {\n      dispatch(saveCategoryTypeMaster_Success({\n        Status: false\n      }));\n      setState(() => resetFunction(fileds, state)); //Clear form values\n\n      dispatch(Breadcrumb_inputName(''));\n\n      if (pageMode === \"other\") {\n        dispatch(AlertState({\n          Type: 1,\n          Status: true,\n          Message: postMsg.Message\n        }));\n      } else {\n        dispatch(AlertState({\n          Type: 1,\n          Status: true,\n          Message: postMsg.Message,\n          RedirectPath: url.CATEGORYTYPE_lIST\n        }));\n      }\n    } else if (postMsg.Status === true) {\n      dispatch(getCategoryTypelistSuccess({\n        Status: false\n      }));\n      dispatch(AlertState({\n        Type: 4,\n        Status: true,\n        Message: JSON.stringify(postMsg.Message),\n        RedirectPath: false,\n        AfterResponseAction: false\n      }));\n    }\n  }, [postMsg]);\n  useEffect(() => {\n    if (updateMsg.Status === true && updateMsg.StatusCode === 200 && !modalCss) {\n      setState(() => resetFunction(fileds, state)); // Clear form values\n\n      history.push({\n        pathname: url.CATEGORYTYPE_lIST\n      });\n    } else if (updateMsg.Status === true && !modalCss) {\n      dispatch(updateCategoryTypeIDSuccess({\n        Status: false\n      }));\n      dispatch(AlertState({\n        Type: 3,\n        Status: true,\n        Message: JSON.stringify(updateMsg.Message)\n      }));\n    }\n  }, [updateMsg, modalCss]);\n  useEffect(() => {\n    if (pageField) {\n      const fieldArr = pageField.PageFieldMaster;\n      comAddPageFieldFunc({\n        state,\n        setState,\n        fieldArr\n      });\n    }\n  }, [pageField]);\n\n  const SaveHandler = async event => {\n    event.preventDefault();\n    const btnId = event.target.id;\n\n    try {\n      if (formValid(state, setState)) {\n        btnIsDissablefunc({\n          btnId,\n          state: true\n        });\n        const jsonBody = JSON.stringify({\n          Name: values.Name,\n          CreatedBy: loginUserID(),\n          UpdatedBy: loginUserID()\n        });\n\n        if (pageMode === mode.edit) {\n          dispatch(updateCategoryTypeID({\n            jsonBody,\n            updateId: values.id,\n            btnId\n          }));\n        } else {\n          dispatch(saveCategoryTypeMaster({\n            jsonBody,\n            btnId\n          }));\n        }\n      }\n    } catch (e) {\n      btnIsDissablefunc({\n        btnId,\n        state: false\n      });\n    }\n  }; // IsEditMode_Css is use of module Edit_mode (reduce page-content marging)\n\n\n  var IsEditMode_Css = '';\n\n  if (modalCss || pageMode === mode.dropdownAdd) {\n    IsEditMode_Css = \"-5.5%\";\n  }\n\n  ;\n\n  if (!(userPageAccessState === '')) {\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(MetaTags, {\n        children: metaTagLabel(userPageAccessState)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"page-content\",\n        style: {\n          marginTop: IsEditMode_Css\n        },\n        children: /*#__PURE__*/_jsxDEV(Container, {\n          fluid: true,\n          children: /*#__PURE__*/_jsxDEV(Card, {\n            className: \"text-black\",\n            children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n              className: \"card-header   text-black c_card_header\",\n              children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                className: \"card-title text-black\",\n                children: userPageAccessState.PageDescription\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 232,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"card-title-desc text-black\",\n                children: userPageAccessState.PageDescriptionDetails\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 233,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 231,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(CardBody, {\n              className: \" vh-10 0 text-black\",\n              style: {\n                backgroundColor: \"#whitesmoke\"\n              },\n              children: /*#__PURE__*/_jsxDEV(\"form\", {\n                noValidate: true,\n                children: /*#__PURE__*/_jsxDEV(Row, {\n                  className: \"\",\n                  children: /*#__PURE__*/_jsxDEV(Col, {\n                    md: 12,\n                    children: /*#__PURE__*/_jsxDEV(Card, {\n                      children: /*#__PURE__*/_jsxDEV(CardBody, {\n                        className: \"c_card_body\",\n                        children: /*#__PURE__*/_jsxDEV(Row, {\n                          children: [/*#__PURE__*/_jsxDEV(FormGroup, {\n                            className: \"mb-2 col col-sm-4 \",\n                            children: [/*#__PURE__*/_jsxDEV(Label, {\n                              htmlFor: \"validationCustom01\",\n                              children: fieldLabel.Name\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 244,\n                              columnNumber: 61\n                            }, this), /*#__PURE__*/_jsxDEV(Input, {\n                              name: \"Name\",\n                              id: \"txtName\",\n                              value: values.Name,\n                              type: \"text\",\n                              className: isError.Name.length > 0 ? \"is-invalid form-control\" : \"form-control\",\n                              placeholder: \"Please Enter Name\",\n                              autoComplete: \"off\",\n                              autoFocus: true,\n                              onChange: event => {\n                                onChangeText({\n                                  event,\n                                  state,\n                                  setState\n                                });\n                                dispatch(Breadcrumb_inputName(event.target.value));\n                              }\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 245,\n                              columnNumber: 61\n                            }, this), isError.Name.length > 0 && /*#__PURE__*/_jsxDEV(\"span\", {\n                              className: \"invalid-feedback\",\n                              children: isError.Name\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 260,\n                              columnNumber: 65\n                            }, this)]\n                          }, void 0, true, {\n                            fileName: _jsxFileName,\n                            lineNumber: 243,\n                            columnNumber: 57\n                          }, this), /*#__PURE__*/_jsxDEV(FormGroup, {\n                            className: \"mt-2\",\n                            children: /*#__PURE__*/_jsxDEV(Row, {\n                              children: /*#__PURE__*/_jsxDEV(Col, {\n                                sm: 2,\n                                children: /*#__PURE__*/_jsxDEV(SaveButton, {\n                                  pageMode: pageMode,\n                                  onClick: SaveHandler,\n                                  userAcc: userPageAccessState,\n                                  editCreatedBy: editCreatedBy,\n                                  module: \"CategoryTypeMaster\"\n                                }, void 0, false, {\n                                  fileName: _jsxFileName,\n                                  lineNumber: 267,\n                                  columnNumber: 69\n                                }, this)\n                              }, void 0, false, {\n                                fileName: _jsxFileName,\n                                lineNumber: 266,\n                                columnNumber: 65\n                              }, this)\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 265,\n                              columnNumber: 61\n                            }, this)\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 264,\n                            columnNumber: 57\n                          }, this)]\n                        }, void 0, true, {\n                          fileName: _jsxFileName,\n                          lineNumber: 242,\n                          columnNumber: 53\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 241,\n                        columnNumber: 49\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 240,\n                      columnNumber: 45\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 239,\n                    columnNumber: 41\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 238,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 237,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 236,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 230,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 13\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 291,\n      columnNumber: 13\n    }, this);\n  }\n};\n\n_s(CategoryTypeMaster, \"d4tczaJOlBLID2C62yKAFVRvfsE=\", false, function () {\n  return [useHistory, useDispatch, useSelector];\n});\n\n_c = CategoryTypeMaster;\nexport default CategoryTypeMaster;\n\nvar _c;\n\n$RefreshReg$(_c, \"CategoryTypeMaster\");","map":{"version":3,"names":["React","useEffect","useState","Card","CardBody","CardHeader","Col","Container","FormGroup","Input","Label","Row","MetaTags","AlertState","commonPageField","commonPageFieldSuccess","useHistory","Breadcrumb_inputName","useDispatch","useSelector","saveCategoryTypeMaster","saveCategoryTypeMaster_Success","editCategoryTypeIDSuccess","updateCategoryTypeID","getCategoryTypelistSuccess","updateCategoryTypeIDSuccess","comAddPageFieldFunc","formValid","initialFiledFunc","onChangeText","resetFunction","SaveButton","breadcrumbReturnFunc","btnIsDissablefunc","loginUserID","metaTagLabel","url","pageId","mode","CategoryTypeMaster","props","history","dispatch","fileds","id","Name","state","setState","modalCss","setModalCss","pageMode","setPageMode","defaultsave","userPageAccessState","setUserAccState","editCreatedBy","seteditCreatedBy","postMsg","updateMsg","pageField","userAccess","categoryTypeReducer","PostData","updateMessage","Login","RoleAccessUpdateData","CommonPageFieldReducer","page_Id","CATEGORYTYPE","values","isError","fieldLabel","location","hasShowloction","hasOwnProperty","editValue","hasShowModal","userAcc","locationPath","pathname","masterPath","find","inx","ActualPagePath","hasEditVal","hasValid","required","valid","CreatedBy","Status","StatusCode","Type","Message","RedirectPath","CATEGORYTYPE_lIST","JSON","stringify","AfterResponseAction","push","fieldArr","PageFieldMaster","SaveHandler","event","preventDefault","btnId","target","jsonBody","UpdatedBy","edit","updateId","e","IsEditMode_Css","dropdownAdd","marginTop","PageDescription","PageDescriptionDetails","backgroundColor","length","value"],"sources":["D:/Rohit/Git projects/Manthan/src/pages/Adminisrator/CategoryTypePages/CategoryTypeMaster.js"],"sourcesContent":["import React, { useEffect, useState, } from \"react\";\r\nimport {\r\n    Card,\r\n    CardBody,\r\n    CardHeader,\r\n    Col,\r\n    Container,\r\n    FormGroup,\r\n    Input,\r\n    Label,\r\n    Row,\r\n} from \"reactstrap\";\r\nimport { MetaTags } from \"react-meta-tags\";\r\nimport { AlertState, commonPageField, commonPageFieldSuccess } from \"../../../store/actions\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { Breadcrumb_inputName } from \"../../../store/Utilites/Breadcrumb/actions\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n    saveCategoryTypeMaster,\r\n    saveCategoryTypeMaster_Success,\r\n    editCategoryTypeIDSuccess,\r\n    updateCategoryTypeID,\r\n    getCategoryTypelistSuccess,\r\n    updateCategoryTypeIDSuccess,\r\n} from \"../../../store/Administrator/CategoryTypeRedux/actions\";\r\nimport {\r\n    comAddPageFieldFunc,\r\n    formValid,\r\n    initialFiledFunc,\r\n    onChangeText,\r\n    resetFunction\r\n} from \"../../../components/Common/validationFunction\";\r\nimport { SaveButton } from \"../../../components/Common/CommonButton\";\r\nimport { breadcrumbReturnFunc, btnIsDissablefunc, loginUserID, metaTagLabel, } from \"../../../components/Common/CommonFunction\";\r\nimport * as url from \"../../../routes/route_url\";\r\nimport * as pageId from \"../../../routes/allPageID\"\r\nimport * as mode from \"../../../routes/PageMode\"\r\n\r\nconst CategoryTypeMaster = (props) => {\r\n\r\n    const history = useHistory()\r\n    const dispatch = useDispatch();\r\n\r\n    const fileds = {\r\n        id: \"\",\r\n        Name: \"\",\r\n    }\r\n\r\n    const [state, setState] = useState(() => initialFiledFunc(fileds))\r\n    const [modalCss, setModalCss] = useState(false);\r\n    const [pageMode, setPageMode] = useState(mode.defaultsave);\r\n    const [userPageAccessState, setUserAccState] = useState(123);\r\n    const [editCreatedBy, seteditCreatedBy] = useState(\"\");\r\n\r\n    //Access redux store Data /  'save_ModuleSuccess' action data\r\n    const {\r\n        postMsg,\r\n        updateMsg,\r\n        pageField,\r\n        userAccess } = useSelector((state) => ({\r\n            postMsg: state.categoryTypeReducer.PostData,\r\n            updateMsg: state.categoryTypeReducer.updateMessage,\r\n            userAccess: state.Login.RoleAccessUpdateData,\r\n            pageField: state.CommonPageFieldReducer.pageField\r\n        }));\r\n\r\n    useEffect(() => {\r\n        const page_Id = pageId.CATEGORYTYPE\r\n        dispatch(commonPageFieldSuccess(null));\r\n        dispatch(commonPageField(page_Id))\r\n    }, []);\r\n\r\n    const values = { ...state.values }\r\n    const { isError } = state;\r\n    const { fieldLabel } = state;\r\n\r\n    const location = { ...history.location }\r\n    const hasShowloction = location.hasOwnProperty(mode.editValue)\r\n    const hasShowModal = props.hasOwnProperty(mode.editValue)\r\n\r\n    // userAccess useEffect\r\n    useEffect(() => {\r\n        let userAcc = null;\r\n        let locationPath = location.pathname;\r\n\r\n        if (hasShowModal) {\r\n            locationPath = props.masterPath;\r\n        };\r\n\r\n        userAcc = userAccess.find((inx) => {\r\n            return (`/${inx.ActualPagePath}` === locationPath)\r\n        })\r\n\r\n        if (userAcc) {\r\n            setUserAccState(userAcc)\r\n            breadcrumbReturnFunc({ dispatch, userAcc });\r\n        };\r\n    }, [userAccess])\r\n\r\n\r\n    //This UseEffect 'SetEdit' data and 'autoFocus' while this Component load First Time.\r\n    useEffect(() => {\r\n\r\n        if ((hasShowloction || hasShowModal)) {\r\n\r\n            let hasEditVal = null\r\n            if (hasShowloction) {\r\n                setPageMode(location.pageMode)\r\n                hasEditVal = location.editValue\r\n            }\r\n            else if (hasShowModal) {\r\n                hasEditVal = props.editValue\r\n                setPageMode(props.pageMode)\r\n                setModalCss(true)\r\n            }\r\n\r\n            if (hasEditVal) {\r\n\r\n                const { id, Name } = hasEditVal\r\n                const { values, fieldLabel, hasValid, required, isError } = { ...state }\r\n                values.Name = Name;\r\n                values.id = id\r\n\r\n                hasValid.Name.valid = true;\r\n\r\n                setState({ values, fieldLabel, hasValid, required, isError })\r\n                dispatch(Breadcrumb_inputName(hasEditVal.Name))\r\n                seteditCreatedBy(hasEditVal.CreatedBy)\r\n            }\r\n            dispatch(editCategoryTypeIDSuccess({ Status: false }))\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n\r\n        if ((postMsg.Status === true) && (postMsg.StatusCode === 200)) {\r\n            dispatch(saveCategoryTypeMaster_Success({ Status: false }))\r\n            setState(() => resetFunction(fileds, state))//Clear form values\r\n            dispatch(Breadcrumb_inputName(''))\r\n            if (pageMode === \"other\") {\r\n                dispatch(AlertState({\r\n                    Type: 1,\r\n                    Status: true,\r\n                    Message: postMsg.Message,\r\n                }))\r\n            }\r\n            else {\r\n                dispatch(AlertState({\r\n                    Type: 1,\r\n                    Status: true,\r\n                    Message: postMsg.Message,\r\n                    RedirectPath: url.CATEGORYTYPE_lIST,\r\n                }))\r\n            }\r\n        }\r\n        else if (postMsg.Status === true) {\r\n            dispatch(getCategoryTypelistSuccess({ Status: false }))\r\n            dispatch(AlertState({\r\n                Type: 4,\r\n                Status: true,\r\n                Message: JSON.stringify(postMsg.Message),\r\n                RedirectPath: false,\r\n                AfterResponseAction: false\r\n            }));\r\n        }\r\n    }, [postMsg])\r\n\r\n    useEffect(() => {\r\n        if (updateMsg.Status === true && updateMsg.StatusCode === 200 && !modalCss) {\r\n            setState(() => resetFunction(fileds, state))// Clear form values\r\n            history.push({\r\n                pathname: url.CATEGORYTYPE_lIST,\r\n            })\r\n        } else if (updateMsg.Status === true && !modalCss) {\r\n            dispatch(updateCategoryTypeIDSuccess({ Status: false }));\r\n            dispatch(\r\n                AlertState({\r\n                    Type: 3,\r\n                    Status: true,\r\n                    Message: JSON.stringify(updateMsg.Message),\r\n                })\r\n            );\r\n        }\r\n    }, [updateMsg, modalCss]);\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        if (pageField) {\r\n            const fieldArr = pageField.PageFieldMaster\r\n            comAddPageFieldFunc({ state, setState, fieldArr })\r\n        }\r\n    }, [pageField])\r\n\r\n    const SaveHandler = async (event) => {\r\n        event.preventDefault();\r\n        const btnId = event.target.id\r\n        try {\r\n            if (formValid(state, setState)) {\r\n                btnIsDissablefunc({ btnId, state: true })\r\n\r\n                const jsonBody = JSON.stringify({\r\n                    Name: values.Name,\r\n                    CreatedBy: loginUserID(),\r\n                    UpdatedBy: loginUserID()\r\n                });\r\n\r\n                if (pageMode === mode.edit) {\r\n                    dispatch(updateCategoryTypeID({ jsonBody, updateId: values.id, btnId }));\r\n                }\r\n                else {\r\n                    dispatch(saveCategoryTypeMaster({ jsonBody, btnId }));\r\n                }\r\n            }\r\n        } catch (e) { btnIsDissablefunc({ btnId, state: false }) }\r\n    };\r\n\r\n    // IsEditMode_Css is use of module Edit_mode (reduce page-content marging)\r\n    var IsEditMode_Css = ''\r\n    if ((modalCss) || (pageMode === mode.dropdownAdd)) { IsEditMode_Css = \"-5.5%\" };\r\n\r\n    if (!(userPageAccessState === '')) {\r\n        return (\r\n            <React.Fragment>\r\n              <MetaTags>{metaTagLabel(userPageAccessState)}</MetaTags>\r\n\r\n                <div className=\"page-content\" style={{ marginTop: IsEditMode_Css }}>\r\n                    <Container fluid>\r\n\r\n                        <Card className=\"text-black\">\r\n                            <CardHeader className=\"card-header   text-black c_card_header\">\r\n                                <h4 className=\"card-title text-black\">{userPageAccessState.PageDescription}</h4>\r\n                                <p className=\"card-title-desc text-black\">{userPageAccessState.PageDescriptionDetails}</p>\r\n                            </CardHeader>\r\n\r\n                            <CardBody className=\" vh-10 0 text-black\" style={{ backgroundColor: \"#whitesmoke\" }} >\r\n                                <form noValidate>\r\n                                    <Row className=\"\">\r\n                                        <Col md={12}>\r\n                                            <Card>\r\n                                                <CardBody className=\"c_card_body\">\r\n                                                    <Row>\r\n                                                        <FormGroup className=\"mb-2 col col-sm-4 \">\r\n                                                            <Label htmlFor=\"validationCustom01\">{fieldLabel.Name}</Label>\r\n                                                            <Input\r\n                                                                name=\"Name\"\r\n                                                                id=\"txtName\"\r\n                                                                value={values.Name}\r\n                                                                type=\"text\"\r\n                                                                className={isError.Name.length > 0 ? \"is-invalid form-control\" : \"form-control\"}\r\n                                                                placeholder=\"Please Enter Name\"\r\n                                                                autoComplete=\"off\"\r\n                                                                autoFocus={true}\r\n                                                                onChange={(event) => {\r\n                                                                    onChangeText({ event, state, setState })\r\n                                                                    dispatch(Breadcrumb_inputName(event.target.value))\r\n                                                                }}\r\n                                                            />\r\n                                                            {isError.Name.length > 0 && (\r\n                                                                <span className=\"invalid-feedback\">{isError.Name}</span>\r\n                                                            )}\r\n                                                        </FormGroup>\r\n\r\n                                                        <FormGroup className=\"mt-2\">\r\n                                                            <Row>\r\n                                                                <Col sm={2}>\r\n                                                                    <SaveButton pageMode={pageMode}\r\n                                                                        onClick={SaveHandler}\r\n                                                                        userAcc={userPageAccessState}\r\n                                                                        editCreatedBy={editCreatedBy}\r\n                                                                        module={\"CategoryTypeMaster\"}\r\n                                                                    />\r\n                                                                </Col>\r\n                                                            </Row>\r\n                                                        </FormGroup>\r\n                                                    </Row>\r\n                                                </CardBody>\r\n                                            </Card>\r\n                                        </Col>\r\n                                    </Row>\r\n                                </form>\r\n                            </CardBody>\r\n                        </Card>\r\n                    </Container>\r\n                </div>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n    else {\r\n        return (\r\n            <React.Fragment></React.Fragment>\r\n        )\r\n    }\r\n};\r\n\r\nexport default CategoryTypeMaster\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}