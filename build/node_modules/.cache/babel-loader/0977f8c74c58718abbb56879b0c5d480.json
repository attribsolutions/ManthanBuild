{"ast":null,"code":"// original\nexport const columns = [\"HSN Item Name\", \"Quantity\", \"Rate\", \"BasicAmt \", \"CGST%\", \"CGSTAmt \", \"SGST%\", \"SGSTAmt\", // \"comment\",\n\"Total Amt\"];\nexport const PageHedercolumns = [\"Billed by\", \"Billed to\", ''];\nexport const Footercolumn = [\"\"];\nexport const BilledBy = [\"Billed by\"];\nexport const BilledTo = [\"Billed by\"];\nexport const DetailsOfTransport = [\"Billed by\"]; // export const Rows = (data) => {\n//     const { OrderItem = [] } = data\n//     var a = [];\n//     let Gst = 0\n//     let totalBasicAmount = 0\n//     let totalCGst = 0\n//     let totalSGst = 0\n//     let totalAmount = 0\n//     let totalQuantity = 0\n//     let SubTotalGst = 0\n//     OrderItem.forEach(element => {\n//         \n//         if (Gst === 0) { Gst = element.GSTPercentage };\n//         if ((Gst === element.GSTPercentage)) {\n//             totalQuantity = Number(totalQuantity) + Number(element.Quantity)\n//             totalCGst = Number(totalCGst) + Number(element.CGST)\n//             totalSGst = Number(totalSGst) + Number(element.SGST)\n//             totalAmount = Number(totalAmount) + Number(element.Amount)\n//             const tableitemRow = [\n//                 `${element.ItemName} (${element.HSNCode})`,\n//                 `${element.Quantity} ${element.UnitName}`,\n//                 element.Rate,\n//                 element.BasicAmount,\n//                 `${element.CGSTPercentage}%`,\n//                 element.CGST,\n//                 `${element.SGSTPercentage}%`,\n//                 element.SGST,\n//                 element.Comment,\n//                 element.Amount,\n//             ];\n//             a.push(tableitemRow);\n//             Gst = element.GSTPercentage\n//         } else {\n//             const tableTotalRow = [\n//                 `Total Quantity:${parseFloat(totalQuantity).toFixed(2)}`,\n//                 \" \",\n//                 `BasicAmount:${parseFloat(totalBasicAmount).toFixed(2)}`,\n//                 \"\",\n//                 `TotalCGST:${parseFloat(totalCGst).toFixed(2)}`,\n//                 \"isaddition\",\n//                 `TotalSGST:${parseFloat(totalSGst).toFixed(2)}`,\n//                 \"\",\n//                 \"\",\n//                 `Amount:${parseFloat(totalAmount).toFixed(2)}`,\n//             ];\n//             a.push(tableTotalRow);\n//             Gst = 0\n//             totalBasicAmount = 0\n//             totalCGst = 0\n//             totalSGst = 0\n//             totalAmount = 0\n//             totalQuantity = 0\n//             totalQuantity = Number(totalQuantity) + Number(element.Quantity)\n//             totalCGst = Number(totalCGst) + Number(element.CGST)\n//             totalSGst = Number(totalSGst) + Number(element.SGST)\n//             totalAmount = Number(totalAmount) + Number(element.Amount)\n//             const tableTotalRowNew = [\n//                 `${element.ItemName} (${element.HSNCode})`,\n//                 `${element.Quantity} ${element.UnitName}`,\n//                 element.Rate,\n//                 element.BasicAmount,\n//                 `${element.CGSTPercentage}%`,\n//                 element.CGST,\n//                 `${element.SGSTPercentage}%`,\n//                 element.SGST,\n//                 element.Comment,\n//                 element.Amount,\n//             ];\n//             a.push(tableTotalRowNew);\n//             const tableTotalRowLast = [\n//                 `Total Quantity:${parseFloat(totalQuantity).toFixed(2)}`,\n//                 \" \",\n//                 `BasicAmount:${parseFloat(totalBasicAmount).toFixed(2)}`,\n//                 \"\",\n//                 `TotalCGST:${parseFloat(totalCGst).toFixed(2)}`,\n//                 \"isaddition\",\n//                 `TotalSGST:${parseFloat(totalSGst).toFixed(2)}`,\n//                 \"\",\n//                 \"\",\n//                 `Amount:${parseFloat(totalAmount).toFixed(2)}`,\n//             ];\n//             a.push(tableTotalRowLast);\n//             return a;\n//         }\n//     })\n// }\n\nexport const Rows = data => {\n  const {\n    OrderItem = []\n  } = data;\n  OrderItem.sort((firstItem, secondItem) => firstItem.GSTPercentage - secondItem.GSTPercentage);\n  const returnArr = [];\n  let Gst = 0;\n  let totalBasicAmount = 0;\n  let totalCGst = 0;\n  let totalSGst = 0;\n  let totalAmount = 0;\n  let totalQuantity = 0;\n  let SubTotalGst = 0;\n  OrderItem.forEach((element, key) => {\n    const tableitemRow = [`${element.ItemName} (${element.HSNCode})      \n             ${element.Comment === null ? \"\" : element.Comment}`, `${Number(element.Quantity).toFixed(2)} ${element.UnitName}`, element.Rate, element.BasicAmount, `${element.CGSTPercentage}%`, element.CGST, `${element.SGSTPercentage}%`, element.SGST, // element.Comment,\n    element.Amount, \"row\"];\n\n    function totalLots() {\n      totalQuantity = Number(totalQuantity) + Number(element.Quantity);\n      totalCGst = Number(totalCGst) + Number(element.CGST);\n      totalSGst = Number(totalSGst) + Number(element.SGST);\n      totalAmount = Number(totalAmount) + Number(element.Amount);\n      totalBasicAmount = Number(totalBasicAmount) + Number(element.BasicAmount);\n      let cgst = data[\"tableTot\"].TotalCGst; // return ({ TotalCGst: Number(cgst) + Number(totalCGst),})\n\n      return {\n        TotalCGst: parseInt(totalCGst) + parseInt(cgst)\n      };\n    }\n\n    ;\n\n    function totalrow() {\n      return [`Total Quantity :${parseFloat(totalQuantity).toFixed(2)}${element.UnitName}`, \" \", `TotalBasic:${parseFloat(totalBasicAmount).toFixed(2)}`, \"\", `Total:${parseFloat(totalCGst).toFixed(2)}`, \"isaddition\", `Total:${parseFloat(totalSGst).toFixed(2)}`, \"\", `Total:${parseFloat(totalAmount).toFixed(2)}` // parseFloat(TotalCGst).toFixed(2),\n      // parseFloat(TotalSGst).toFixed(2),\n      ];\n    }\n\n    ;\n\n    if (Gst === 0) {\n      Gst = element.GSTPercentage;\n    }\n\n    ;\n    let aa = {\n      TotalCGst: 0,\n      totalSGst: 0\n    };\n\n    if (data[\"tableTot\"] === undefined) {\n      data[\"tableTot\"] = aa;\n    }\n\n    if (Gst === element.GSTPercentage) {\n      data[\"tableTot\"] = totalLots();\n      returnArr.push(tableitemRow);\n    } else {\n      returnArr.push(totalrow());\n      returnArr.push(tableitemRow);\n      totalBasicAmount = 0;\n      totalCGst = 0;\n      totalSGst = 0;\n      totalAmount = 0;\n      totalQuantity = 0;\n      data[\"tableTot\"] = totalLots();\n    }\n\n    if (key === OrderItem.length - 1) {\n      returnArr.push(totalrow());\n    }\n\n    SubTotalGst = Number(SubTotalGst) + Number(element.CGST);\n  });\n  return returnArr;\n};\n_c = Rows;\nexport const ReportFotterColumns = [\"SGST\", \"CGST\", \"Quantity\", \"GST % \", \"TaxbleAmt.\", \"IGST\", \"Total Amt\"];\nexport const ReportFotterColumns2 = [\"SGST\"];\nexport const ReportRows = (data, doc) => {\n  const terms = data.OrderTermsAndCondition;\n  const slicedArray = terms.slice(0, 2);\n  var TableArray = [[\"Terms And Condition\"], [`${slicedArray[0] === undefined ? \"\" : slicedArray[0].TermsAndCondition}`], [`${slicedArray[1] === undefined ? \"\" : slicedArray[1].TermsAndCondition}`] // [`${slicedArray[2] === undefined ? \"\" : slicedArray[2].TermsAndCondition}`\n  // ],\n  // [`${slicedArray[3] === undefined ? \"\" : slicedArray[3].TermsAndCondition}`\n  // ],\n  ];\n  return TableArray;\n}; // export const ReportHederRows = (data) => {\n//     var reportArray = [\n//         [`${data.SupplierName}`, `${data.CustomerName}`, `${data.POTypeName}`],\n//         [`${data.ShippingAddress}`, `${data.BillingAddress}`, `${data.CustomerName}`],\n//         [`FSSAI:${data.ShippingFssai}`, `FSSAI :ui3dfxxxxxwe55`, `${data.BillingAddress}`,],\n//     ]\n//     return reportArray;\n// }\n\n_c2 = ReportRows;\nexport const BilledByRow = data => {\n  var BilledByArray = [[`${data.SupplierName}`], [`${data.ShippingAddress}`], [`FSSAI:${data.ShippingFssai}`]];\n  return BilledByArray;\n};\n_c3 = BilledByRow;\nexport const BilledToRow = data => {\n  var BilledToArray = [[`${data.CustomerName}`], [`${data.BillingAddress}`], [`FSSAI :ui3dfxxxxxwe55`]];\n  return BilledToArray;\n};\n_c4 = BilledToRow;\nexport const DetailsOfTransportRow = data => {\n  var DetailsOfTransportArray = [[`${data.POTypeName}`], [`${data.CustomerName}`], [`${data.BillingAddress}`]];\n  return DetailsOfTransportArray;\n};\n_c5 = DetailsOfTransportRow;\n\nvar _c, _c2, _c3, _c4, _c5;\n\n$RefreshReg$(_c, \"Rows\");\n$RefreshReg$(_c2, \"ReportRows\");\n$RefreshReg$(_c3, \"BilledByRow\");\n$RefreshReg$(_c4, \"BilledToRow\");\n$RefreshReg$(_c5, \"DetailsOfTransportRow\");","map":{"version":3,"names":["columns","PageHedercolumns","Footercolumn","BilledBy","BilledTo","DetailsOfTransport","Rows","data","OrderItem","sort","firstItem","secondItem","GSTPercentage","returnArr","Gst","totalBasicAmount","totalCGst","totalSGst","totalAmount","totalQuantity","SubTotalGst","forEach","element","key","tableitemRow","ItemName","HSNCode","Comment","Number","Quantity","toFixed","UnitName","Rate","BasicAmount","CGSTPercentage","CGST","SGSTPercentage","SGST","Amount","totalLots","cgst","TotalCGst","parseInt","totalrow","parseFloat","aa","undefined","push","length","ReportFotterColumns","ReportFotterColumns2","ReportRows","doc","terms","OrderTermsAndCondition","slicedArray","slice","TableArray","TermsAndCondition","BilledByRow","BilledByArray","SupplierName","ShippingAddress","ShippingFssai","BilledToRow","BilledToArray","CustomerName","BillingAddress","DetailsOfTransportRow","DetailsOfTransportArray","POTypeName"],"sources":["D:/Rohit/Git projects/Manthan/src/Reports/OrderReport/TableData.js"],"sourcesContent":["\r\n// original\r\nexport const columns = [\r\n    \"HSN Item Name\",\r\n    \"Quantity\",\r\n    \"Rate\",\r\n    \"BasicAmt \",\r\n    \"CGST%\",\r\n    \"CGSTAmt \",\r\n    \"SGST%\",\r\n    \"SGSTAmt\",\r\n    // \"comment\",\r\n    \"Total Amt\"];\r\n\r\nexport const PageHedercolumns = [\r\n    \"Billed by\",\r\n    \"Billed to\",\r\n    ''\r\n]\r\nexport const Footercolumn = [\r\n    \"\",\r\n]\r\n\r\nexport const BilledBy = [\r\n    \"Billed by\",\r\n]\r\nexport const BilledTo = [\r\n    \"Billed by\",\r\n]\r\nexport const DetailsOfTransport = [\r\n    \"Billed by\",\r\n]\r\n\r\n\r\n// export const Rows = (data) => {\r\n//     const { OrderItem = [] } = data\r\n//     var a = [];\r\n//     let Gst = 0\r\n//     let totalBasicAmount = 0\r\n//     let totalCGst = 0\r\n//     let totalSGst = 0\r\n//     let totalAmount = 0\r\n//     let totalQuantity = 0\r\n//     let SubTotalGst = 0\r\n\r\n\r\n//     OrderItem.forEach(element => {\r\n//         \r\n//         if (Gst === 0) { Gst = element.GSTPercentage };\r\n//         if ((Gst === element.GSTPercentage)) {\r\n//             totalQuantity = Number(totalQuantity) + Number(element.Quantity)\r\n//             totalCGst = Number(totalCGst) + Number(element.CGST)\r\n//             totalSGst = Number(totalSGst) + Number(element.SGST)\r\n//             totalAmount = Number(totalAmount) + Number(element.Amount)\r\n\r\n//             const tableitemRow = [\r\n//                 `${element.ItemName} (${element.HSNCode})`,\r\n//                 `${element.Quantity} ${element.UnitName}`,\r\n//                 element.Rate,\r\n//                 element.BasicAmount,\r\n//                 `${element.CGSTPercentage}%`,\r\n//                 element.CGST,\r\n//                 `${element.SGSTPercentage}%`,\r\n//                 element.SGST,\r\n//                 element.Comment,\r\n//                 element.Amount,\r\n//             ];\r\n//             a.push(tableitemRow);\r\n//             Gst = element.GSTPercentage\r\n//         } else {\r\n\r\n//             const tableTotalRow = [\r\n//                 `Total Quantity:${parseFloat(totalQuantity).toFixed(2)}`,\r\n//                 \" \",\r\n//                 `BasicAmount:${parseFloat(totalBasicAmount).toFixed(2)}`,\r\n//                 \"\",\r\n//                 `TotalCGST:${parseFloat(totalCGst).toFixed(2)}`,\r\n//                 \"isaddition\",\r\n//                 `TotalSGST:${parseFloat(totalSGst).toFixed(2)}`,\r\n//                 \"\",\r\n//                 \"\",\r\n//                 `Amount:${parseFloat(totalAmount).toFixed(2)}`,\r\n\r\n//             ];\r\n//             a.push(tableTotalRow);\r\n\r\n//             Gst = 0\r\n//             totalBasicAmount = 0\r\n//             totalCGst = 0\r\n//             totalSGst = 0\r\n//             totalAmount = 0\r\n//             totalQuantity = 0\r\n\r\n//             totalQuantity = Number(totalQuantity) + Number(element.Quantity)\r\n//             totalCGst = Number(totalCGst) + Number(element.CGST)\r\n//             totalSGst = Number(totalSGst) + Number(element.SGST)\r\n//             totalAmount = Number(totalAmount) + Number(element.Amount)\r\n\r\n//             const tableTotalRowNew = [\r\n//                 `${element.ItemName} (${element.HSNCode})`,\r\n//                 `${element.Quantity} ${element.UnitName}`,\r\n//                 element.Rate,\r\n//                 element.BasicAmount,\r\n//                 `${element.CGSTPercentage}%`,\r\n//                 element.CGST,\r\n//                 `${element.SGSTPercentage}%`,\r\n//                 element.SGST,\r\n//                 element.Comment,\r\n//                 element.Amount,\r\n//             ];\r\n\r\n//             a.push(tableTotalRowNew);\r\n\r\n//             const tableTotalRowLast = [\r\n//                 `Total Quantity:${parseFloat(totalQuantity).toFixed(2)}`,\r\n//                 \" \",\r\n//                 `BasicAmount:${parseFloat(totalBasicAmount).toFixed(2)}`,\r\n//                 \"\",\r\n//                 `TotalCGST:${parseFloat(totalCGst).toFixed(2)}`,\r\n//                 \"isaddition\",\r\n//                 `TotalSGST:${parseFloat(totalSGst).toFixed(2)}`,\r\n//                 \"\",\r\n//                 \"\",\r\n//                 `Amount:${parseFloat(totalAmount).toFixed(2)}`,\r\n\r\n//             ];\r\n\r\n//             a.push(tableTotalRowLast);\r\n\r\n//             return a;\r\n//         }\r\n//     })\r\n// }\r\n\r\n\r\nexport const Rows = (data) => {\r\n    const { OrderItem = [] } = data\r\n    OrderItem.sort((firstItem, secondItem) => firstItem.GSTPercentage - secondItem.GSTPercentage);\r\n    const returnArr = [];\r\n    let Gst = 0\r\n    let totalBasicAmount = 0\r\n    let totalCGst = 0\r\n    let totalSGst = 0\r\n    let totalAmount = 0\r\n    let totalQuantity = 0\r\n    let SubTotalGst = 0\r\n\r\n\r\n    OrderItem.forEach((element, key) => {\r\n        const tableitemRow = [\r\n            `${element.ItemName} (${element.HSNCode})      \r\n             ${element.Comment === null ? \"\" : element.Comment}`,\r\n            `${Number(element.Quantity).toFixed(2)} ${element.UnitName}`,\r\n            element.Rate,\r\n            element.BasicAmount,\r\n            `${element.CGSTPercentage}%`,\r\n            element.CGST,\r\n            `${element.SGSTPercentage}%`,\r\n            element.SGST,\r\n            // element.Comment,\r\n            element.Amount,\r\n            \"row\"\r\n        ];\r\n\r\n        function totalLots() {\r\n            totalQuantity = Number(totalQuantity) + Number(element.Quantity)\r\n            totalCGst = Number(totalCGst) + Number(element.CGST)\r\n            totalSGst = Number(totalSGst) + Number(element.SGST)\r\n            totalAmount = Number(totalAmount) + Number(element.Amount)\r\n            totalBasicAmount = Number(totalBasicAmount) + Number(element.BasicAmount)\r\n            let cgst = data[\"tableTot\"].TotalCGst\r\n            // return ({ TotalCGst: Number(cgst) + Number(totalCGst),})\r\n            return ({ TotalCGst: parseInt(totalCGst) + parseInt(cgst), })\r\n        };\r\n\r\n\r\n\r\n        function totalrow() {\r\n            return [\r\n                `Total Quantity :${parseFloat(totalQuantity).toFixed(2)}${element.UnitName}`,\r\n                \" \",\r\n                `TotalBasic:${parseFloat(totalBasicAmount).toFixed(2)}`,\r\n                \"\",\r\n                `Total:${parseFloat(totalCGst).toFixed(2)}`,\r\n                \"isaddition\",\r\n                `Total:${parseFloat(totalSGst).toFixed(2)}`,\r\n                \"\",\r\n                `Total:${parseFloat(totalAmount).toFixed(2)}`,\r\n                // parseFloat(TotalCGst).toFixed(2),\r\n                // parseFloat(TotalSGst).toFixed(2),\r\n            ];\r\n        };\r\n        if (Gst === 0) { Gst = element.GSTPercentage };\r\n        let aa = { TotalCGst: 0, totalSGst: 0 }\r\n        if (data[\"tableTot\"] === undefined) { data[\"tableTot\"] = aa }\r\n        if ((Gst === element.GSTPercentage)) {\r\n            data[\"tableTot\"] = totalLots()\r\n            returnArr.push(tableitemRow);\r\n        }\r\n\r\n        else {\r\n            returnArr.push(totalrow())\r\n            returnArr.push(tableitemRow);\r\n            totalBasicAmount = 0\r\n            totalCGst = 0\r\n            totalSGst = 0\r\n            totalAmount = 0\r\n            totalQuantity = 0\r\n\r\n            data[\"tableTot\"] = totalLots()\r\n        }\r\n        if (key === OrderItem.length - 1) {\r\n            returnArr.push(totalrow());\r\n        }\r\n\r\n        SubTotalGst = Number(SubTotalGst) + Number(element.CGST)\r\n    })\r\n    return returnArr;\r\n}\r\nexport const ReportFotterColumns = [\r\n    \"SGST\",\r\n    \"CGST\", \"Quantity\",\r\n    \"GST % \",\r\n    \"TaxbleAmt.\", \"IGST\", \"Total Amt\"\r\n];\r\n\r\n\r\nexport const ReportFotterColumns2 = [\r\n    \"SGST\",\r\n];\r\n\r\n\r\n\r\nexport const ReportRows = (data, doc) => {\r\n\r\n    const terms = data.OrderTermsAndCondition\r\n    const slicedArray = terms.slice(0, 2);\r\n    var TableArray = [[\"Terms And Condition\"],\r\n    [`${slicedArray[0] === undefined ? \"\" : slicedArray[0].TermsAndCondition}`,\r\n    ],\r\n    [`${slicedArray[1] === undefined ? \"\" : slicedArray[1].TermsAndCondition}`,\r\n    ],\r\n        // [`${slicedArray[2] === undefined ? \"\" : slicedArray[2].TermsAndCondition}`\r\n        // ],\r\n        // [`${slicedArray[3] === undefined ? \"\" : slicedArray[3].TermsAndCondition}`\r\n        // ],\r\n\r\n    ]\r\n    return TableArray\r\n}\r\n// export const ReportHederRows = (data) => {\r\n//     var reportArray = [\r\n//         [`${data.SupplierName}`, `${data.CustomerName}`, `${data.POTypeName}`],\r\n//         [`${data.ShippingAddress}`, `${data.BillingAddress}`, `${data.CustomerName}`],\r\n//         [`FSSAI:${data.ShippingFssai}`, `FSSAI :ui3dfxxxxxwe55`, `${data.BillingAddress}`,],\r\n//     ]\r\n//     return reportArray;\r\n// }\r\n\r\nexport const BilledByRow = (data) => {\r\n    var BilledByArray = [\r\n        [`${data.SupplierName}`],\r\n        [`${data.ShippingAddress}`],\r\n        [`FSSAI:${data.ShippingFssai}`],\r\n    ]\r\n    return BilledByArray;\r\n}\r\nexport const BilledToRow = (data) => {\r\n\r\n    var BilledToArray = [\r\n        [`${data.CustomerName}`],\r\n        [`${data.BillingAddress}`],\r\n        [`FSSAI :ui3dfxxxxxwe55`],\r\n    ]\r\n\r\n    return BilledToArray;\r\n}\r\nexport const DetailsOfTransportRow = (data) => {\r\n\r\n    var DetailsOfTransportArray = [\r\n        [`${data.POTypeName}`],\r\n        [`${data.CustomerName}`],\r\n        [`${data.BillingAddress}`],\r\n    ]\r\n\r\n    return DetailsOfTransportArray;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}