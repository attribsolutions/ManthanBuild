{"ast":null,"code":"var _jsxFileName = \"D:\\\\Rohit\\\\Git projects\\\\Manthan\\\\src\\\\components\\\\VerticalLayout\\\\BradcrumbFix1.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { Row, Col, Modal, Button } from \"reactstrap\";\nimport { useHistory } from \"react-router-dom\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Breadcrumb_inputName } from \"../../store/Utilites/Breadcrumb/actions\";\nimport { AvForm, AvInput } from \"availity-reactstrap-validation\";\nimport * as XLSX from 'xlsx';\nimport * as urlRalations from \"../../routes/urlRalations\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const initialstate = {\n  breadShow: false,\n  bredcrumbItemName: '',\n  showCountlabel: \"\",\n  userAccess: {},\n  newBtnView: false,\n  excelBtnView: false,\n  pageHeading: '',\n  showCount: false,\n  excelData: [],\n  userAcc: {},\n  pageField: {},\n  masterPage: ''\n};\n\nconst BreadcrumbFix = props => {\n  _s();\n\n  const history = useHistory();\n  const dispatch = useDispatch(); // for Excel Download\n\n  const [modal_scroll, setmodal_scroll] = useState(false);\n  const [downListKey, setDownListKey] = useState([]);\n  const [breadcrumbDetail, setbreadcrumbDetail] = useState({});\n  const {\n    userAccess = [],\n    downBtnData = []\n  } = useSelector(state => ({\n    userAccess: state.Login.RoleAccessUpdateData,\n    downBtnData: state.BreadcrumbReducer.downBtnData\n  })); // debugger\n\n  let {\n    showCountlabel = '',\n    bredcrumbItemName = ''\n  } = useSelector(state => ({\n    showCountlabel: state.BreadcrumbReducer.showCountlabel,\n    bredcrumbItemName: state.BreadcrumbReducer.bredcrumbItemName\n  })); // Onfocus Search Box\n  // useEffect(() => {\n  //   history.listen(location => {\n  //     // dispatch(CommonBreadcrumbDetails(initialstate));\n  //     setbreadcrumbDetail(initialstate)\n  //     debugger\n  //   });\n  // }, [history])\n  // useEffect(() => {\n  //   const reducerstate = redux.breadcrumbDetail\n  //   let initial = { ...breadcrumbDetail }\n  //   let selectedValues = Object.keys(reducerstate);\n  //   selectedValues.forEach((i) => {\n  //     initial[`${i}`] = reducerstate[`${i}`]\n  //   })\n  //   setbreadcrumbDetail(initial)\n  // }, [])\n\n  const {\n    breadShow = true,\n    newBtnView = false,\n    excelBtnView = false,\n    pageHeading = '',\n    CountLabel = true,\n    // excelData = [],\n    masterPage\n  } = breadcrumbDetail;\n  var aaaa = CountLabel && showCountlabel.length > 0;\n  debugger;\n  useEffect(() => {\n    const locationPath = history.location.pathname;\n    let userAcc = userAccess.find(inx => {\n      return `/${inx.ActualPagePath}` === locationPath;\n    });\n\n    if (!(userAcc === undefined)) {\n      showCountlabel = '';\n      bredcrumbItemName = '';\n      const isnewBtnView = userAcc.PageType === 2 && userAcc.RoleAccess_IsSave;\n      const isCountLabel = userAcc.CountLabel;\n      const isexcelBtnView = !(userAcc.PageType === 1) && userAcc.RoleAccess_Exceldownload;\n      dispatch(Breadcrumb_inputName(''));\n      setbreadcrumbDetail({\n        newBtnView: isnewBtnView,\n        excelBtnView: isexcelBtnView,\n        pageHeading: userAcc.PageHeading,\n        CountLabel: isCountLabel,\n        masterPage: urlRalations[userAcc.ActualPagePath]\n      });\n    }\n  }, [history, userAccess]);\n\n  function tog_scroll() {\n    setmodal_scroll(!modal_scroll);\n    removeBodyCss();\n  }\n\n  function removeBodyCss() {\n    document.body.classList.add(\"no_padding\");\n  } // New Button Handller\n\n\n  const NewButtonHandeller = () => {\n    // let pathName = history.location.pathname\n    // let userAcc = userAccess.find((inx) => {\n    //     return (`/${inx.ActualPagePath}` === pathName)\n    // })\n    // let listPagePath = userAccess.find((inx) => {\n    //     return (inx.id === userAcc.RelatedPageID)\n    // })\n    // if (listPagePath === undefined) {\n    //     return\n    // }\n    // debugger\n    history.push({\n      pathname: masterPage\n    });\n  };\n\n  useEffect(() => {\n    if (!(downBtnData === undefined)) {\n      if (downBtnData.length > 0) {\n        // object to array conversion\n        const propertyNames = Object.keys(downBtnData[0]);\n        setDownListKey(propertyNames);\n      }\n    }\n  }, [downBtnData]);\n\n  const DownloadInExcelButtonHanler = (event, values) => {\n    debugger;\n    var list = [];\n    var object1 = {};\n    var selectedValues = Object.keys(values);\n    var filteredValues = selectedValues.filter(function (selectedValues) {\n      return values[selectedValues];\n    });\n    downBtnData.map(index1 => {\n      filteredValues.map(index2 => {\n        if (index1.hasOwnProperty(index2)) {\n          object1[index2] = index1[index2];\n        }\n      });\n      list.push(object1);\n      object1 = {};\n    });\n    const worksheet = XLSX.utils.json_to_sheet(list);\n    const workbook = XLSX.utils.book_new();\n    XLSX.utils.book_append_sheet(workbook, worksheet, \"Sheet1\");\n    XLSX.writeFile(workbook, \"Excel File.xlsx\");\n    setmodal_scroll(false);\n  };\n\n  const handleChange = e => {\n    debugger;\n    var chek = document.getElementById(\"checkAll\");\n\n    if (chek) {\n      for (var i = 0; i < downListKey.length; i++) {\n        document.getElementById(`chckbox${i}`).checked = true;\n      }\n    } else {\n      for (var i = 0; i < downListKey.length; i++) {\n        document.getElementById(`chckbox${i}`).checked = false;\n      }\n    }\n  };\n\n  const excelCheckBoxOnChange = e => {\n    // e.preventDefault();\n    const check = e.target; // var chek = document.getElementById(\"checkAll\").checked\n\n    if (check.id === \"checkAll\") {\n      if (check.checked) {\n        for (var i = 0; i < downListKey.length; i++) {\n          const a = document.getElementById(`chckbox${i}`);\n\n          if (a) {\n            a.checked = true; // excelData[0][`$defSelect${downListKey[i]}`] = true\n          }\n        }\n      } else {\n        for (var i = 0; i < downListKey.length; i++) {\n          const a = document.getElementById(`chckbox${i}`);\n\n          if (a) {\n            a.checked = false; // excelData[0][`$defSelect${downListKey[i]}`] = false\n          }\n        }\n      }\n    }\n  };\n\n  function ExcelCheckBox() {\n    const arrDiv = [];\n    downListKey.forEach((index, key) => {\n      const match = index.slice(0, 1);\n\n      if (!(match === \"$\")) {\n        arrDiv.push( /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"row\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col col-12\",\n            children: /*#__PURE__*/_jsxDEV(Row, {\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"col col-12 \",\n                children: [/*#__PURE__*/_jsxDEV(AvInput, {\n                  className: \" text-black checkbox-border-red\",\n                  type: \"checkbox\",\n                  id: `chckbox${key}`,\n                  name: index,\n                  defaultValue: downBtnData[0][`$defSelect${index}`] ? true : false\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 227,\n                  columnNumber: 19\n                }, this), \"\\xA0\\xA0\\xA0\", /*#__PURE__*/_jsxDEV(\"label\", {\n                  className: \"form-label text-black\",\n                  children: [\" \", index, \" \"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 234,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 226,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 225,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 224,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 11\n        }, this));\n      }\n    });\n    return arrDiv;\n  }\n\n  if (breadShow) {\n    return (\n      /*#__PURE__*/\n      // <React.Fragment>\n      //   <header id=\"page-topbar\" style={{ marginTop: \"56px\", backgroundColor: 'white', zIndex: \"1\" }} >\n      //     <div className=\"navbar-header\" style={{ paddingRight: \"-10px\" }}>\n      //       <div className=\"d-flex\" >\n      //         <div className=\"navbar-brand-box\" ></div>\n      //         <div style={{ paddingLeft: \"7px\" }}>\n      //           {\n      //             newBtnView ?\n      //               <div >\n      //                 <button type=\"button\" className=\"btn btn-success\"\n      //                   data-mdb-toggle=\"tooltip\" data-mdb-placement=\"top\" title=\"Create New\"\n      //                   onClick={NewButtonHandeller}>\n      //                   New\n      //                 </button>\n      //                 <label className=\"font-size-18 form-label text-black \" style={{ paddingLeft: \"7px\", }} >{pageHeading}</label>\n      //               </div>\n      //               :\n      //               <div>\n      //                 <label className=\"font-size-18  col-ls-6 col-form-label text-black\" style={{ marginLeft: \"6px\" }}>\n      //                   {pageHeading}</label>\n      //                 {(bredcrumbItemName.length > 0) ?\n      //                   <label className=\"font-size-24 form-label  text-nowrap bd-highlight text-primary\"\n      //                     style={{ paddingLeft: \"7px\", color: \"#5156be\" }} >&nbsp;/&nbsp;{bredcrumbItemName}</label>\n      //                   : null\n      //                 }\n      //               </div>\n      //           }\n      //         </div>\n      //       </div>\n      //       <div className=\" d-flex  justify-content-end\"  >\n      //         {excelBtnView ?\n      //           <div className=\"px-2 \" style={{ marginTop: \"7px\" }}>\n      //             <Button\n      //               type=\"button\"\n      //               title=\"Download List\"\n      //               color=\"btn btn-sm btn-outline-primary \"\n      //               onClick={() => { tog_scroll(); }}\n      //               data-toggle=\"modal\"\n      //             >\n      //               <i className=\"bx bx-download font-size-14\" ></i>\n      //             </Button>\n      //           </div>\n      //           : null}\n      //         {\n      //           (((CountLabel) && (showCountlabel.length > 0))) ?\n      //             <div className=\"bg-dark text-center text-light external-event col-form-label  border border-Success rounded-2\"\n      //               style={{ width: \"100%\" }}>\n      //               <samp className=\"px-2 \">{showCountlabel}</samp>\n      //             </div>\n      //             :\n      //             null\n      //         }\n      //       </div>\n      //     </div>\n      //   </header>\n      //   <Modal\n      //     isOpen={modal_scroll}\n      //     toggle={() => {\n      //       tog_scroll();\n      //     }}\n      //     scrollable={true}\n      //   >\n      //     <div className=\"modal-header\">\n      //       <h5 className=\"modal-title mt-0\">List</h5>\n      //       <button\n      //         type=\"button\"\n      //         onClick={() => setmodal_scroll(false)}\n      //         className=\"close\"\n      //         data-dismiss=\"modal\"\n      //         aria-label=\"Close\"\n      //       >\n      //         <span aria-hidden=\"true\">&times;</span>\n      //       </button>\n      //     </div>\n      //     <div className=\"modal-body\">\n      //       <AvForm onValidSubmit={(e, v) => { DownloadInExcelButtonHanler(e, v); }}>\n      //         <div className=\"form-check\">\n      //           <input\n      //             id=\"checkAll\"\n      //             type=\"checkbox\"\n      //             className=\"form-check-input\"\n      //             onChange={excelCheckBoxOnChange}\n      //           />\n      //           <label className=\"form-label text-black\">All Select</label>\n      //         </div>\n      //         <ExcelCheckBox />\n      //         <div className=\"modal-body\">\n      //           <div className=\"modal-footer\">\n      //             <button\n      //               type=\"button\"\n      //               className=\"btn btn-secondary\"\n      //               onClick={() => setmodal_scroll(false)}\n      //             >\n      //               Cancel\n      //             </button>\n      //             <button type=\"submit\" className=\"btn btn-primary\" >\n      //               Download in Excel\n      //             </button>\n      //           </div>\n      //         </div>\n      //       </AvForm>\n      //     </div>\n      //   </Modal>\n      // </React.Fragment>\n      _jsxDEV(_Fragment, {}, void 0, false)\n    );\n  } else {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n  }\n};\n\n_s(BreadcrumbFix, \"vie/llXKcQ/obYpyaNegP0UmTe4=\", false, function () {\n  return [useHistory, useDispatch, useSelector, useSelector];\n});\n\n_c = BreadcrumbFix;\nexport default BreadcrumbFix;\n\nvar _c;\n\n$RefreshReg$(_c, \"BreadcrumbFix\");","map":{"version":3,"names":["React","useEffect","useState","Row","Col","Modal","Button","useHistory","useDispatch","useSelector","Breadcrumb_inputName","AvForm","AvInput","XLSX","urlRalations","initialstate","breadShow","bredcrumbItemName","showCountlabel","userAccess","newBtnView","excelBtnView","pageHeading","showCount","excelData","userAcc","pageField","masterPage","BreadcrumbFix","props","history","dispatch","modal_scroll","setmodal_scroll","downListKey","setDownListKey","breadcrumbDetail","setbreadcrumbDetail","downBtnData","state","Login","RoleAccessUpdateData","BreadcrumbReducer","CountLabel","aaaa","length","locationPath","location","pathname","find","inx","ActualPagePath","undefined","isnewBtnView","PageType","RoleAccess_IsSave","isCountLabel","isexcelBtnView","RoleAccess_Exceldownload","PageHeading","tog_scroll","removeBodyCss","document","body","classList","add","NewButtonHandeller","push","propertyNames","Object","keys","DownloadInExcelButtonHanler","event","values","list","object1","selectedValues","filteredValues","filter","map","index1","index2","hasOwnProperty","worksheet","utils","json_to_sheet","workbook","book_new","book_append_sheet","writeFile","handleChange","e","chek","getElementById","i","checked","excelCheckBoxOnChange","check","target","id","a","ExcelCheckBox","arrDiv","forEach","index","key","match","slice"],"sources":["D:/Rohit/Git projects/Manthan/src/components/VerticalLayout/BradcrumbFix1.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\"\r\nimport { Row, Col, Modal, Button, } from \"reactstrap\"\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Breadcrumb_inputName } from \"../../store/Utilites/Breadcrumb/actions\";\r\nimport { AvForm, AvInput } from \"availity-reactstrap-validation\";\r\nimport * as XLSX from 'xlsx';\r\nimport * as urlRalations from \"../../routes/urlRalations\"\r\n\r\n\r\nexport const initialstate = {\r\n  breadShow: false,\r\n  bredcrumbItemName: '',\r\n  showCountlabel: \"\",\r\n  userAccess: {},\r\n  newBtnView: false,\r\n  excelBtnView: false,\r\n  pageHeading: '',\r\n  showCount: false,\r\n  excelData: [],\r\n  userAcc: {},\r\n  pageField: {},\r\n  masterPage: ''\r\n}\r\nconst BreadcrumbFix = props => {\r\n\r\n  const history = useHistory();\r\n  const dispatch = useDispatch();\r\n  // for Excel Download\r\n  const [modal_scroll, setmodal_scroll] = useState(false);\r\n  const [downListKey, setDownListKey] = useState([]);\r\n  const [breadcrumbDetail, setbreadcrumbDetail] = useState({});\r\n\r\n  const { userAccess = [], downBtnData = [] } = useSelector((state) => ({\r\n    userAccess: state.Login.RoleAccessUpdateData,\r\n    downBtnData: state.BreadcrumbReducer.downBtnData,\r\n  }));\r\n  // debugger\r\n  let { showCountlabel = '', bredcrumbItemName = '' } = useSelector((state) => ({\r\n    showCountlabel: state.BreadcrumbReducer.showCountlabel,\r\n    bredcrumbItemName: state.BreadcrumbReducer.bredcrumbItemName,\r\n\r\n  }));\r\n\r\n  // Onfocus Search Box\r\n  // useEffect(() => {\r\n  //   history.listen(location => {\r\n  //     // dispatch(CommonBreadcrumbDetails(initialstate));\r\n  //     setbreadcrumbDetail(initialstate)\r\n  //     debugger\r\n  //   });\r\n  // }, [history])\r\n\r\n  // useEffect(() => {\r\n\r\n  //   const reducerstate = redux.breadcrumbDetail\r\n  //   let initial = { ...breadcrumbDetail }\r\n  //   let selectedValues = Object.keys(reducerstate);\r\n  //   selectedValues.forEach((i) => {\r\n\r\n  //     initial[`${i}`] = reducerstate[`${i}`]\r\n  //   })\r\n  //   setbreadcrumbDetail(initial)\r\n\r\n  // }, [])\r\n\r\n  const {\r\n    breadShow = true,\r\n    newBtnView = false,\r\n    excelBtnView = false,\r\n    pageHeading = '',\r\n    CountLabel = true,\r\n    // excelData = [],\r\n    masterPage\r\n  } = breadcrumbDetail;\r\n\r\n  var aaaa = ((CountLabel) && (showCountlabel.length > 0))\r\n  debugger\r\n  useEffect(() => {\r\n\r\n    const locationPath = history.location.pathname\r\n    let userAcc = userAccess.find((inx) => {\r\n      return (`/${inx.ActualPagePath}` === locationPath)\r\n    })\r\n    if (!(userAcc === undefined)) {\r\n\r\n      showCountlabel = '';\r\n      bredcrumbItemName = '';\r\n      const isnewBtnView = ((userAcc.PageType === 2) && (userAcc.RoleAccess_IsSave));\r\n      const isCountLabel = (userAcc.CountLabel);\r\n      const isexcelBtnView = (!(userAcc.PageType === 1) && (userAcc.RoleAccess_Exceldownload));\r\n      dispatch(Breadcrumb_inputName(''))\r\n      setbreadcrumbDetail({\r\n        newBtnView: isnewBtnView,\r\n        excelBtnView: isexcelBtnView,\r\n        pageHeading: userAcc.PageHeading,\r\n        CountLabel: isCountLabel,\r\n        masterPage: urlRalations[userAcc.ActualPagePath],\r\n      })\r\n\r\n    }\r\n  }, [history, userAccess])\r\n\r\n  function tog_scroll() {\r\n    setmodal_scroll(!modal_scroll);\r\n    removeBodyCss();\r\n  }\r\n\r\n  function removeBodyCss() {\r\n    document.body.classList.add(\"no_padding\");\r\n  }\r\n\r\n  // New Button Handller\r\n  const NewButtonHandeller = () => {\r\n\r\n\r\n\r\n    // let pathName = history.location.pathname\r\n    // let userAcc = userAccess.find((inx) => {\r\n    //     return (`/${inx.ActualPagePath}` === pathName)\r\n    // })\r\n    // let listPagePath = userAccess.find((inx) => {\r\n    //     return (inx.id === userAcc.RelatedPageID)\r\n    // })\r\n    // if (listPagePath === undefined) {\r\n    //     return\r\n    // }\r\n    // debugger\r\n    history.push({\r\n      pathname: masterPage,\r\n    })\r\n  }\r\n\r\n  useEffect(() => {\r\n\r\n    if (!(downBtnData === undefined)) {\r\n      if ((downBtnData.length > 0)) {\r\n        // object to array conversion\r\n        const propertyNames = Object.keys(downBtnData[0]);\r\n        setDownListKey(propertyNames)\r\n      }\r\n    }\r\n  }, [downBtnData])\r\n\r\n  const DownloadInExcelButtonHanler = (event, values) => {\r\n    debugger\r\n    var list = []\r\n    var object1 = {}\r\n    var selectedValues = Object.keys(values);\r\n    var filteredValues = selectedValues.filter(function (selectedValues) {\r\n      return values[selectedValues]\r\n    });\r\n\r\n    downBtnData.map((index1) => {\r\n      filteredValues.map((index2) => {\r\n        if (index1.hasOwnProperty(index2)) {\r\n          object1[index2] = index1[index2]\r\n        }\r\n      })\r\n      list.push(object1)\r\n      object1 = {}\r\n    })\r\n    const worksheet = XLSX.utils.json_to_sheet(list);\r\n    const workbook = XLSX.utils.book_new();\r\n    XLSX.utils.book_append_sheet(workbook, worksheet, \"Sheet1\");\r\n    XLSX.writeFile(workbook, \"Excel File.xlsx\");\r\n    setmodal_scroll(false)\r\n  }\r\n\r\n  const handleChange = (e) => {\r\n    debugger\r\n    var chek = document.getElementById(\"checkAll\")\r\n    if (chek) {\r\n      for (var i = 0; i < downListKey.length; i++) {\r\n        document.getElementById(`chckbox${i}`).checked = true\r\n      }\r\n    }\r\n    else {\r\n      for (var i = 0; i < downListKey.length; i++) {\r\n        document.getElementById(`chckbox${i}`).checked = false\r\n      }\r\n    }\r\n  };\r\n\r\n  const excelCheckBoxOnChange = (e) => {\r\n\r\n    // e.preventDefault();\r\n    const check = e.target\r\n    // var chek = document.getElementById(\"checkAll\").checked\r\n\r\n    if (check.id === \"checkAll\") {\r\n      if (check.checked) {\r\n        for (var i = 0; i < downListKey.length; i++) {\r\n          const a = document.getElementById(`chckbox${i}`)\r\n          if (a) {\r\n            a.checked = true\r\n            // excelData[0][`$defSelect${downListKey[i]}`] = true\r\n          }\r\n        }\r\n      }\r\n      else {\r\n        for (var i = 0; i < downListKey.length; i++) {\r\n          const a = document.getElementById(`chckbox${i}`)\r\n          if (a) {\r\n            a.checked = false\r\n            // excelData[0][`$defSelect${downListKey[i]}`] = false\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n  };\r\n\r\n  function ExcelCheckBox() {\r\n\r\n    const arrDiv = []\r\n    downListKey.forEach((index, key) => {\r\n\r\n      const match = index.slice(0, 1);\r\n      if (!(match === \"$\")) {\r\n\r\n        arrDiv.push(\r\n          <div className=\"row\" >\r\n            <div className=\"col col-12\"  >\r\n              <Row>\r\n                <div className=\"col col-12 \" >\r\n                  <AvInput\r\n                    className=\" text-black checkbox-border-red\"\r\n                    type=\"checkbox\"\r\n                    id={`chckbox${key}`}\r\n                    name={index}\r\n                    defaultValue={(downBtnData[0][`$defSelect${index}`]) ? true : false}\r\n                  />&nbsp;&nbsp;&nbsp;\r\n                  <label className=\"form-label text-black\"> {index} </label>\r\n                </div>\r\n              </Row>\r\n            </div>\r\n          </div>\r\n        )\r\n      }\r\n    })\r\n    return arrDiv\r\n  }\r\n\r\n  if (breadShow) {\r\n    return (\r\n      // <React.Fragment>\r\n      //   <header id=\"page-topbar\" style={{ marginTop: \"56px\", backgroundColor: 'white', zIndex: \"1\" }} >\r\n      //     <div className=\"navbar-header\" style={{ paddingRight: \"-10px\" }}>\r\n      //       <div className=\"d-flex\" >\r\n      //         <div className=\"navbar-brand-box\" ></div>\r\n      //         <div style={{ paddingLeft: \"7px\" }}>\r\n      //           {\r\n      //             newBtnView ?\r\n      //               <div >\r\n      //                 <button type=\"button\" className=\"btn btn-success\"\r\n      //                   data-mdb-toggle=\"tooltip\" data-mdb-placement=\"top\" title=\"Create New\"\r\n      //                   onClick={NewButtonHandeller}>\r\n      //                   New\r\n      //                 </button>\r\n      //                 <label className=\"font-size-18 form-label text-black \" style={{ paddingLeft: \"7px\", }} >{pageHeading}</label>\r\n\r\n      //               </div>\r\n      //               :\r\n      //               <div>\r\n      //                 <label className=\"font-size-18  col-ls-6 col-form-label text-black\" style={{ marginLeft: \"6px\" }}>\r\n      //                   {pageHeading}</label>\r\n      //                 {(bredcrumbItemName.length > 0) ?\r\n      //                   <label className=\"font-size-24 form-label  text-nowrap bd-highlight text-primary\"\r\n      //                     style={{ paddingLeft: \"7px\", color: \"#5156be\" }} >&nbsp;/&nbsp;{bredcrumbItemName}</label>\r\n      //                   : null\r\n      //                 }\r\n      //               </div>\r\n      //           }\r\n      //         </div>\r\n      //       </div>\r\n\r\n      //       <div className=\" d-flex  justify-content-end\"  >\r\n      //         {excelBtnView ?\r\n      //           <div className=\"px-2 \" style={{ marginTop: \"7px\" }}>\r\n      //             <Button\r\n      //               type=\"button\"\r\n      //               title=\"Download List\"\r\n      //               color=\"btn btn-sm btn-outline-primary \"\r\n      //               onClick={() => { tog_scroll(); }}\r\n      //               data-toggle=\"modal\"\r\n      //             >\r\n      //               <i className=\"bx bx-download font-size-14\" ></i>\r\n      //             </Button>\r\n      //           </div>\r\n      //           : null}\r\n      //         {\r\n      //           (((CountLabel) && (showCountlabel.length > 0))) ?\r\n      //             <div className=\"bg-dark text-center text-light external-event col-form-label  border border-Success rounded-2\"\r\n      //               style={{ width: \"100%\" }}>\r\n      //               <samp className=\"px-2 \">{showCountlabel}</samp>\r\n      //             </div>\r\n      //             :\r\n      //             null\r\n      //         }\r\n      //       </div>\r\n\r\n\r\n      //     </div>\r\n      //   </header>\r\n      //   <Modal\r\n      //     isOpen={modal_scroll}\r\n      //     toggle={() => {\r\n      //       tog_scroll();\r\n      //     }}\r\n      //     scrollable={true}\r\n      //   >\r\n      //     <div className=\"modal-header\">\r\n      //       <h5 className=\"modal-title mt-0\">List</h5>\r\n\r\n      //       <button\r\n      //         type=\"button\"\r\n      //         onClick={() => setmodal_scroll(false)}\r\n      //         className=\"close\"\r\n      //         data-dismiss=\"modal\"\r\n      //         aria-label=\"Close\"\r\n      //       >\r\n      //         <span aria-hidden=\"true\">&times;</span>\r\n      //       </button>\r\n      //     </div>\r\n      //     <div className=\"modal-body\">\r\n      //       <AvForm onValidSubmit={(e, v) => { DownloadInExcelButtonHanler(e, v); }}>\r\n      //         <div className=\"form-check\">\r\n      //           <input\r\n      //             id=\"checkAll\"\r\n      //             type=\"checkbox\"\r\n      //             className=\"form-check-input\"\r\n      //             onChange={excelCheckBoxOnChange}\r\n      //           />\r\n      //           <label className=\"form-label text-black\">All Select</label>\r\n      //         </div>\r\n      //         <ExcelCheckBox />\r\n\r\n      //         <div className=\"modal-body\">\r\n      //           <div className=\"modal-footer\">\r\n      //             <button\r\n      //               type=\"button\"\r\n      //               className=\"btn btn-secondary\"\r\n      //               onClick={() => setmodal_scroll(false)}\r\n      //             >\r\n      //               Cancel\r\n      //             </button>\r\n      //             <button type=\"submit\" className=\"btn btn-primary\" >\r\n      //               Download in Excel\r\n      //             </button>\r\n      //           </div>\r\n      //         </div>\r\n      //       </AvForm>\r\n      //     </div>\r\n      //   </Modal>\r\n      // </React.Fragment>\r\n      <></>\r\n    )\r\n  } else {\r\n    return (<></>)\r\n  }\r\n}\r\n\r\n\r\nexport default BreadcrumbFix\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}