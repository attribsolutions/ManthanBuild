{"ast":null,"code":"import _defineProperty from\"D:/Rohit/Git projects/Manthan/node_modules/@babel/runtime/helpers/esm/defineProperty\";// import { invoice, invoiceA5 } from \"../ReportIndex\";\n// export const columns = [\n//     \"SR\",\n//     \"HSN Item Name\",\n//     \"Quantity\",\n//     \"MRP\",\n//     \"Rate\",\n//     \"Discount\",\n//     \"Discount Amount \",\n//     \"Taxable Amount\",\n//     \"          CGST           %        Amount\",\n//     \"CGST \",\n//     \"          SGST           %        Amount\",\n//     \"SGST Amount\",\n//     \"Total Amount\",\n// ];\n// export const BilledBy = [\n//     \"Billed by\",\n// ]\n// export const BilledTo = [\n//     \"Billed by\",\n// ]\n// export const DetailsOfTransport = [\n//     \"Billed by\",\n// ]\n// export const Rows = (data) => {\n//     const { InvoiceItems = [] } = data\n//     InvoiceItems.sort((firstItem, secondItem) => firstItem.GSTPercentage - secondItem.GSTPercentage);\n//     const returnArr = [];\n//     let Gst = 0\n//     let totalBasicAmount = 0\n//     let totalCGst = 0\n//     let totalSGst = 0\n//     let totalAmount = 0\n//     let totalQuantity = 0\n//     let SrNO = 1\n//     let TotalGst = 0\n//     let GSTPercentage = 0\n//     const groupedItems = InvoiceItems.reduce((accumulator, currentItem) => {\n//         const { HSNCode, ItemName, MRP, Rate, Discount, CGST, SGST, Amount, DiscountAmount, BasicAmount, Quantity, UnitName, MRPValue, CGSTPercentage, SGSTPercentage, GSTPercentage, BatchCode, BatchDate, DiscountType, PrimaryUnitName } = currentItem;\n//         const key = ItemName + '_' + MRP;\n//         if (accumulator[key]) {\n//             accumulator[key].DiscountAmount += Number(DiscountAmount);\n//             accumulator[key].Quantity += Number(Quantity);\n//             accumulator[key].BasicAmount += Number(BasicAmount);\n//             accumulator[key].CGST += Number(CGST);\n//             accumulator[key].SGST += Number(SGST);\n//             accumulator[key].Amount += Number(Amount);\n//             accumulator[key].BatchCode += BatchCode;\n//             accumulator[key].BatchDate += BatchDate;\n//             accumulator[key].quantityString += ` ,  ${BatchCode} ${BatchDate} `;\n//         } else {\n//             accumulator[key] = {\n//                 ItemName, HSNCode,\n//                 MRPValue, DiscountType, Rate, Discount, CGST: Number(CGST), SGST: Number(SGST), Amount: Number(Amount), DiscountAmount: Number(DiscountAmount), BasicAmount: Number(BasicAmount), Quantity: Number(Quantity), UnitName, CGSTPercentage, SGSTPercentage, GSTPercentage, BatchDate, BatchCode: BatchCode, PrimaryUnitName, BatchDate: BatchDate, quantityString: `  ${BatchCode}  ${BatchDate}`\n//             };\n//         }\n//         return accumulator;\n//     }, {});\n//     Object.values(groupedItems).forEach((element, key) => {\n//         let HSNcodes = \"\"\n//         if (data.SettingData.HSNCodeDigit.Value === \"1\") {\n//             HSNcodes = element.HSNCode.slice(0, 4);\n//         }\n//         if (data.SettingData.HSNCodeDigit.Value === \"2\") {\n//             HSNcodes = element.HSNCode.slice(0, 6);\n//         }\n//         if (data.SettingData.HSNCodeDigit.Value === \"3\") {\n//             HSNcodes = element.HSNCode.slice(0, 8);\n//         }\n//         const tableitemRow = [\n//             SrNO++,\n//             `${HSNcodes} ${element.ItemName}`,\n//             `${Number(element.Quantity).toFixed(2)} ${element.PrimaryUnitName}   ${element.UnitName}`,\n//             `${Number(element.MRPValue).toFixed(2)}`,\n//             `${Number(element.Rate).toFixed(2)}`,\n//             `${element.Discount} ${element.DiscountType === \"1\" ? \"Rs\" : \"%\"}`,\n//             `${Number(element.DiscountAmount).toFixed(2)}`,\n//             `${Number(element.BasicAmount).toFixed(2)}`,\n//             `${Number(element.CGSTPercentage).toFixed(1)}%`,\n//             `${Number(element.CGST).toFixed(2)}`,\n//             `${Number(element.SGSTPercentage).toFixed(1)}%`,\n//             `${Number(element.SGST).toFixed(2)}`,\n//             `${Number(element.Amount).toFixed(2)}`,\n//         ];\n//         function totalLots() {\n//             totalQuantity = Number(totalQuantity) + Number(element.Quantity)\n//             totalCGst = Number(totalCGst) + Number(element.CGST)\n//             totalSGst = Number(totalSGst) + Number(element.SGST)\n//             totalAmount = Number(totalAmount) + Number(element.Amount)\n//             totalBasicAmount = Number(totalBasicAmount) + Number(element.BasicAmount)\n//             TotalGst = totalCGst + totalSGst;\n//             GSTPercentage = Number(element.CGSTPercentage) + Number(element.SGSTPercentage)\n//             let cgst = data[\"tableTot\"].TotalCGst\n//             return ({ TotalCGst: Number(totalCGst) + Number(cgst) })\n//         };\n//         function totalrow() {\n//             return [\n//                 \"\",\n//                 ` GST ${(Number(GSTPercentage))}%  Total:${(Number(TotalGst).toFixed(2))} `,\n//                 \" \",\n//                 ``,\n//                 \"\",\n//                 \"\",\n//                 ``,\n//                 `${Number(totalBasicAmount).toFixed(2)}`,\n//                 `${Number(totalCGst).toFixed(2)}`,\n//                 \"isaddition\",\n//                 `${Number(totalSGst).toFixed(2)}`,\n//                 \"\",\n//                 `${Number(totalAmount).toFixed(2)}`,\n//             ];\n//         };\n//         const BatchRow = [\n//             `Batch:  ${element.quantityString} `,\n//             `Batch`,\n//             \" \",\n//             ``,\n//             \"\",\n//             \"\",\n//             \"\",\n//             \"\",\n//             ``,\n//             \"\",\n//             ``,\n//             \"\",\n//             ``,\n//         ]\n//         if (Gst === 0) { Gst = element.GSTPercentage };\n//         let aa = { TotalCGst: 0, totalSGst: 0 }\n//         if (data[\"tableTot\"] === undefined) { data[\"tableTot\"] = aa }\n//         if ((Gst === element.GSTPercentage)) {\n//             data[\"tableTot\"] = totalLots()\n//             returnArr.push(tableitemRow);\n//         }\n//         else {\n//             returnArr.push(totalrow());\n//             returnArr.push(tableitemRow);\n//             totalBasicAmount = 0\n//             totalCGst = 0\n//             totalSGst = 0\n//             totalAmount = 0\n//             totalQuantity = 0\n//             data[\"tableTot\"] = totalLots()\n//             Gst = element.GSTPercentage;\n//         }\n//         if (data.SettingData.ShowBatchNoOnInvoicePrint.Value === \"1\") {\n//             returnArr.push((BatchRow))\n//         }\n//         if (key === Object.keys(groupedItems).length - 1) {\n//             returnArr.push(totalrow());\n//         }\n//     })\n//     return returnArr;\n// }\n// export const BilledByRow = (data) => {\n//     var BilledByArray = [\n//         [`${data.PartyName}`],\n//         [`${data.PartyAddress}`],\n//         [`${data.PartyState}`],\n//         [`GSTIN:${data.PartyGSTIN}`],\n//         [`FSSAINo:${data.PartyFSSAINo}`],\n//     ]\n//     return BilledByArray;\n// }\n// export const BilledToRow = (data) => {\n//     var BilledToArray = [\n//         [`${data.CustomerName}`],\n//         [`${data.CustomerAddress}`],\n//         [`${data.CustomerState}`],\n//         [`GSTIN:${data.CustomerGSTIN}`,],\n//         [`FSSAINo:${data.CustomerFSSAINo}`],\n//     ]\n//     return BilledToArray;\n// }\n// export const DetailsOfTransportRow = (data) => {\n//     let result = data.InvoicesReferences.map(a => a.FullOrderNumber);\n//     const PONumber = result.toString()\n//     var DetailsOfTransportArray = [\n//         [data.ReportType === invoiceA5 ? ` PO Number:${PONumber}` : data.DriverName === null ? \"Driver Name:\" : `Driver Name :${data.DriverName}`],\n//         [`vehical No :${data.VehicleNo === null ? \"\" : data.VehicleNo}`],\n//         [`E-way Bill :`],\n//         [`IRN NO :`]\n//     ]\n//     return DetailsOfTransportArray;\n// }\n// // export const ReportHederRows = (data) => {\n// //     var reportArray = [\n// //         [, ,data.ReportType===invoice?`Purches Order No: 1`:'Driver Name : Sameer'],\n// //         [`${data.PartyName}`, `${data.CustomerName}`,data.ReportType===invoice?`Driver Name : Sameer`:`vehical No :MH34566` ,],\n// //         [`maharashtra`, `karnatak`,data.ReportType===invoice?`vehical No :MH34566`:`E-way Bill :24654364633` ],\n// //         [`FSSAI :f23dfxxxxxwe55`, `FSSAI :ui3dfxxxxxwe55`, data.ReportType===invoice?`E-way Bill :24654364633`:`INR NO :${data.FullInvoiceNumber}`, ],\n// //         [,,  data.ReportType===invoice?`INR NO :${data.FullInvoiceNumber}`:null]\n// //     ]\n// //     return reportArray;\n// // }\nimport{invoice}from\"../ReportIndex\";export var columns=[\"SR\",\"HSN Item Name\",\"Quantity (UOM)\",\"MRP\",\"Rate\",\"Discount\",\"Discount Amount \",\"Taxable Amount\",\"          CGST           %        Amount\",\"CGST Amount\",\"          SGST           %        Amount\",\"SGST Amount\",\"Amount\"];export var columnsWithIGST=[\"SR\",\"HSN Item Name\",\"Quantity (UOM)\",\"MRP\",\"Rate\",\"Discount\",\"Discount Amount \",\"Taxable Amount\",\"          IGST           %        Amount\",\"IGST Amount\",\"Amount\"];export var Footercolumn=[\"\"];export var BilledBy=[\"Billed by\"];export var BilledTo=[\"Billed by\"];export var DetailsOfTransport=[\"Billed by\"];export var Rows=function Rows(data){var _data$InvoiceItems=data.InvoiceItems,InvoiceItems=_data$InvoiceItems===void 0?[]:_data$InvoiceItems;InvoiceItems.sort(function(firstItem,secondItem){return firstItem.GSTPercentage-secondItem.GSTPercentage;});var returnArr=[];var Gst=0;var totalBasicAmount=0;var totalCGst=0;var totalSGst=0;var totalAmount=0;var totalQuantity=0;var SrNO=1;var TotalGst=0;var GSTPercentage=0;var groupedItems=InvoiceItems.reduce(function(accumulator,currentItem){var HSNCode=currentItem.HSNCode,ItemName=currentItem.ItemName,MRP=currentItem.MRP,Rate=currentItem.Rate,Discount=currentItem.Discount,CGST=currentItem.CGST,SGST=currentItem.SGST,Amount=currentItem.Amount,DiscountAmount=currentItem.DiscountAmount,BasicAmount=currentItem.BasicAmount,Quantity=currentItem.Quantity,UnitName=currentItem.UnitName,MRPValue=currentItem.MRPValue,CGSTPercentage=currentItem.CGSTPercentage,SGSTPercentage=currentItem.SGSTPercentage,GSTPercentage=currentItem.GSTPercentage,BatchCode=currentItem.BatchCode,BatchDate=currentItem.BatchDate,DiscountType=currentItem.DiscountType,PrimaryUnitName=currentItem.PrimaryUnitName;var key=ItemName+'_'+MRP;if(accumulator[key]){accumulator[key].DiscountAmount+=Number(DiscountAmount);accumulator[key].Quantity+=Number(Quantity);accumulator[key].BasicAmount+=Number(BasicAmount);accumulator[key].CGST+=Number(CGST);accumulator[key].SGST+=Number(SGST);accumulator[key].Amount+=Number(Amount);accumulator[key].BatchCode+=BatchCode;accumulator[key].BatchDate+=BatchDate;accumulator[key].quantityString+=\" ,  \".concat(BatchCode,\" \").concat(BatchDate,\" \");}else{var _accumulator$key;accumulator[key]=(_accumulator$key={ItemName:ItemName,HSNCode:HSNCode,MRPValue:MRPValue,DiscountType:DiscountType,Rate:Rate,Discount:Discount,CGST:Number(CGST),SGST:Number(SGST),Amount:Number(Amount),DiscountAmount:Number(DiscountAmount),BasicAmount:Number(BasicAmount),Quantity:Number(Quantity),UnitName:UnitName,CGSTPercentage:CGSTPercentage,SGSTPercentage:SGSTPercentage,GSTPercentage:GSTPercentage,BatchDate:BatchDate,BatchCode:BatchCode},_defineProperty(_accumulator$key,\"BatchDate\",BatchDate),_defineProperty(_accumulator$key,\"quantityString\",\"  \".concat(BatchCode,\"  \").concat(BatchDate)),_defineProperty(_accumulator$key,\"PrimaryUnitName\",PrimaryUnitName),_accumulator$key);}return accumulator;},{});Object.values(groupedItems).forEach(function(element,key){var HSNcodes=\"\";if(data.SettingData.HSNCodeDigit.Value===\"1\"){HSNcodes=element.HSNCode.slice(0,4);}if(data.SettingData.HSNCodeDigit.Value===\"2\"){HSNcodes=element.HSNCode.slice(0,6);}if(data.SettingData.HSNCodeDigit.Value===\"3\"){HSNcodes=element.HSNCode.slice(0,8);}var tableitemRow=[SrNO++,\"\".concat(HSNcodes,\" \").concat(element.ItemName),\"\".concat(Number(element.Quantity).toFixed(2),\" \").concat(element.PrimaryUnitName,\"   \").concat(element.UnitName),\"\".concat(Number(element.MRPValue).toFixed(2)),\"\".concat(Number(element.Rate).toFixed(2)),\"\".concat(element.Discount,\" \").concat(element.DiscountType===\"1\"?\"Rs\":\"%\"),\"\".concat(Number(element.DiscountAmount).toFixed(2)),\"\".concat(Number(element.BasicAmount).toFixed(2)),\"\".concat(Number(element.CGSTPercentage).toFixed(1),\"%\"),\"\".concat(Number(element.CGST).toFixed(2)),\"\".concat(Number(element.SGSTPercentage).toFixed(1),\"%\"),\"\".concat(Number(element.SGST).toFixed(2)),\"\".concat(Number(element.Amount).toFixed(2))];function totalLots(){totalQuantity=Number(totalQuantity)+Number(element.Quantity);totalCGst=Number(totalCGst)+Number(element.CGST);totalSGst=Number(totalSGst)+Number(element.SGST);totalAmount=Number(totalAmount)+Number(element.Amount);totalBasicAmount=Number(totalBasicAmount)+Number(element.BasicAmount);TotalGst=totalCGst+totalSGst;GSTPercentage=Number(element.CGSTPercentage)+Number(element.SGSTPercentage);var cgst=data[\"tableTot\"].TotalCGst;return{TotalCGst:Number(totalCGst)+Number(cgst)};};function totalrow(){return[\"\",\" GST \".concat(parseFloat(GSTPercentage),\"%  Total:\").concat(Number(TotalGst).toFixed(2),\" \"),\" \",\"\",\"\",\"\",\"\",\"\".concat(Number(totalBasicAmount).toFixed(2)),\"\".concat(Number(totalCGst).toFixed(2)),\"isaddition\",\"\".concat(Number(totalSGst).toFixed(2)),\"\",\"\".concat(Number(totalAmount).toFixed(2))];};var BatchRow=[\"Batch:  \".concat(element.quantityString,\" \"),\"Batch\",\" \",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"];if(Gst===0){Gst=element.GSTPercentage;};var aa={TotalCGst:0,totalSGst:0};if(data[\"tableTot\"]===undefined){data[\"tableTot\"]=aa;}if(Gst===element.GSTPercentage){data[\"tableTot\"]=totalLots();returnArr.push(tableitemRow);}else{returnArr.push(totalrow());returnArr.push(tableitemRow);totalBasicAmount=0;totalCGst=0;totalSGst=0;totalAmount=0;totalQuantity=0;data[\"tableTot\"]=totalLots();Gst=element.GSTPercentage;}if(data.SettingData.ShowBatchNoOnInvoicePrint.Value===\"1\"){returnArr.push(BatchRow);}if(key===Object.keys(groupedItems).length-1){returnArr.push(totalrow());}});return returnArr;};export var RowsWithIGST=function RowsWithIGST(data){var _data$InvoiceItems2=data.InvoiceItems,InvoiceItems=_data$InvoiceItems2===void 0?[]:_data$InvoiceItems2;InvoiceItems.sort(function(firstItem,secondItem){return firstItem.GSTPercentage-secondItem.GSTPercentage;});var returnArr=[];var Gst=0;var totalBasicAmount=0;var totalIGst=0;var totalAmount=0;var totalQuantity=0;var SrNO=1;var TotalGst=0;var GSTPercentage=0;var groupedItems=InvoiceItems.reduce(function(accumulator,currentItem){var HSNCode=currentItem.HSNCode,ItemName=currentItem.ItemName,IGSTPercentage=currentItem.IGSTPercentage,MRP=currentItem.MRP,Rate=currentItem.Rate,Discount=currentItem.Discount,CGST=currentItem.CGST,SGST=currentItem.SGST,Amount=currentItem.Amount,DiscountAmount=currentItem.DiscountAmount,BasicAmount=currentItem.BasicAmount,Quantity=currentItem.Quantity,UnitName=currentItem.UnitName,MRPValue=currentItem.MRPValue,CGSTPercentage=currentItem.CGSTPercentage,SGSTPercentage=currentItem.SGSTPercentage,GSTPercentage=currentItem.GSTPercentage,BatchCode=currentItem.BatchCode,BatchDate=currentItem.BatchDate,DiscountType=currentItem.DiscountType,PrimaryUnitName=currentItem.PrimaryUnitName,IGST=currentItem.IGST;var key=ItemName+'_'+MRP;if(accumulator[key]){accumulator[key].DiscountAmount+=Number(DiscountAmount);accumulator[key].Quantity+=Number(Quantity);accumulator[key].BasicAmount+=Number(BasicAmount);accumulator[key].CGST+=Number(CGST);accumulator[key].IGST+=Number(IGST);accumulator[key].SGST+=Number(SGST);accumulator[key].Amount+=Number(Amount);accumulator[key].BatchCode+=BatchCode;accumulator[key].BatchDate+=BatchDate;accumulator[key].quantityString+=\" ,  \".concat(BatchCode,\" \").concat(BatchDate,\" \");}else{var _accumulator$key2;accumulator[key]=(_accumulator$key2={ItemName:ItemName,HSNCode:HSNCode,MRPValue:MRPValue,IGSTPercentage:IGSTPercentage,DiscountType:DiscountType,Rate:Rate,Discount:Discount,CGST:Number(CGST),SGST:Number(SGST),Amount:Number(Amount),DiscountAmount:Number(DiscountAmount),BasicAmount:Number(BasicAmount),Quantity:Number(Quantity),UnitName:UnitName,CGSTPercentage:CGSTPercentage,SGSTPercentage:SGSTPercentage,GSTPercentage:GSTPercentage,BatchDate:BatchDate,BatchCode:BatchCode},_defineProperty(_accumulator$key2,\"BatchDate\",BatchDate),_defineProperty(_accumulator$key2,\"quantityString\",\"  \".concat(BatchCode,\"  \").concat(BatchDate)),_defineProperty(_accumulator$key2,\"PrimaryUnitName\",PrimaryUnitName),_defineProperty(_accumulator$key2,\"IGST\",IGST),_accumulator$key2);}return accumulator;},{});Object.values(groupedItems).forEach(function(element,key){var HSNcodes=\"\";if(data.SettingData.HSNCodeDigit.Value===\"1\"){HSNcodes=element.HSNCode.slice(0,4);}if(data.SettingData.HSNCodeDigit.Value===\"2\"){HSNcodes=element.HSNCode.slice(0,6);}if(data.SettingData.HSNCodeDigit.Value===\"3\"){HSNcodes=element.HSNCode.slice(0,8);}var tableitemRow=[SrNO++,\"\".concat(HSNcodes,\" \").concat(element.ItemName),\"\".concat(Number(element.Quantity).toFixed(2),\" \").concat(element.PrimaryUnitName,\"   \").concat(element.UnitName),\"\".concat(Number(element.MRPValue).toFixed(2)),\"\".concat(Number(element.Rate).toFixed(2)),\"\".concat(element.Discount,\" \").concat(element.DiscountType===\"1\"?\"Rs\":\"%\"),\"\".concat(Number(element.DiscountAmount).toFixed(2)),\"\".concat(Number(element.BasicAmount).toFixed(2)),\"\".concat(Number(element.IGSTPercentage).toFixed(1),\"%\"),\"\".concat(Number(element.IGST).toFixed(2)),\"\".concat(Number(element.Amount).toFixed(2))];function totalLots(){totalQuantity=Number(totalQuantity)+Number(element.Quantity);totalIGst=Number(totalIGst)+Number(element.IGST);totalAmount=Number(totalAmount)+Number(element.Amount);totalBasicAmount=Number(totalBasicAmount)+Number(element.BasicAmount);GSTPercentage=Number(element.CGSTPercentage)+Number(element.SGSTPercentage);};function totalrow(){return[\"\",\" GST \".concat(parseFloat(GSTPercentage),\"%  Total:\").concat(Number(TotalGst).toFixed(2),\" \"),\" \",\"\",\"\",\"\",\"\",\"\".concat(Number(totalBasicAmount).toFixed(2)),\"\".concat(Number(totalIGst).toFixed(2)),\"isaddition\",\"\".concat(Number(totalAmount).toFixed(2))];};var BatchRow=[\"Batch:  \".concat(element.quantityString,\" \"),\"Batch\",\" \",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"];if(Gst===0){Gst=element.GSTPercentage;};var aa={TotalCGst:0,totalSGst:0};if(data[\"tableTot\"]===undefined){data[\"tableTot\"]=aa;}if(Gst===element.GSTPercentage){data[\"tableTot\"]=totalLots();returnArr.push(tableitemRow);}else{returnArr.push(totalrow());returnArr.push(tableitemRow);totalBasicAmount=0;totalAmount=0;totalQuantity=0;data[\"tableTot\"]=totalLots();Gst=element.GSTPercentage;}if(data.SettingData.ShowBatchNoOnInvoicePrint.Value===\"1\"){returnArr.push(BatchRow);}if(key===Object.keys(groupedItems).length-1){returnArr.push(totalrow());}});return returnArr;};export var BilledByRow=function BilledByRow(data){var PartyAddress=\"\";if(Array.isArray(data.PartyAddress)){var filteredArray=data.PartyAddress.filter(function(obj){return obj.IsDefault===true;});PartyAddress=filteredArray[0]===undefined?\"\":filteredArray[0].Address;}else{PartyAddress=data.PartyAddress;}var BilledByArray=[[\"\".concat(data.PartyName)],[\"\".concat(PartyAddress)],[\"\".concat(data.PartyState)],[\"GSTIN:\".concat(data.PartyGSTIN)],[\"FSSAINo:\".concat(data.PartyFSSAINo)]];return BilledByArray;};export var BilledToRow=function BilledToRow(data){var CustomerAddress=\"\";if(Array.isArray(data.CustomerAddress)){var filteredArray=data.CustomerAddress.filter(function(obj){return obj.IsDefault===true;});CustomerAddress=filteredArray[0]===undefined?\"\":filteredArray[0].Address;}else{CustomerAddress=data.CustomerAddress;}var BilledToArray=[[\"\".concat(data.CustomerName)],[\"\".concat(CustomerAddress)],[\"\".concat(data.CustomerState)],[\"GSTIN:\".concat(data.CustomerGSTIN)],[\"FSSAINo:\".concat(data.CustomerFSSAINo)]];return BilledToArray;};export var DetailsOfTransportRow=function DetailsOfTransportRow(data){var result=data.InvoicesReferences.map(function(a){return a.FullOrderNumber;});var PONumber=result.toString();var DetailsOfTransportArray=[[data.ReportType===invoice?\" PO Number:\".concat(PONumber):data.DriverName===null?\"Driver Name:\":\"Driver Name :\".concat(data.DriverName)],[\"vehical No :\".concat(data.VehicleNo===null?\"\":data.VehicleNo)],[\"E-way Bill :\"],[\"IRN NO :\"]];return DetailsOfTransportArray;};// export const ReportHederRows = (data) => {\n//     var reportArray = [\n//         [, ,data.ReportType===invoice?`Purches Order No: 1`:'Driver Name : Sameer'],\n//         [`${data.PartyName}`, `${data.CustomerName}`,data.ReportType===invoice?`Driver Name : Sameer`:`vehical No :MH34566` ,],\n//         [`maharashtra`, `karnatak`,data.ReportType===invoice?`vehical No :MH34566`:`E-way Bill :24654364633` ],\n//         [`FSSAI :f23dfxxxxxwe55`, `FSSAI :ui3dfxxxxxwe55`, data.ReportType===invoice?`E-way Bill :24654364633`:`INR NO :${data.FullInvoiceNumber}`, ],\n//         [,,  data.ReportType===invoice?`INR NO :${data.FullInvoiceNumber}`:null]\n//     ]\n//     return reportArray;\n// }","map":{"version":3,"names":["invoice","columns","columnsWithIGST","Footercolumn","BilledBy","BilledTo","DetailsOfTransport","Rows","data","InvoiceItems","sort","firstItem","secondItem","GSTPercentage","returnArr","Gst","totalBasicAmount","totalCGst","totalSGst","totalAmount","totalQuantity","SrNO","TotalGst","groupedItems","reduce","accumulator","currentItem","HSNCode","ItemName","MRP","Rate","Discount","CGST","SGST","Amount","DiscountAmount","BasicAmount","Quantity","UnitName","MRPValue","CGSTPercentage","SGSTPercentage","BatchCode","BatchDate","DiscountType","PrimaryUnitName","key","Number","quantityString","Object","values","forEach","element","HSNcodes","SettingData","HSNCodeDigit","Value","slice","tableitemRow","toFixed","totalLots","cgst","TotalCGst","totalrow","parseFloat","BatchRow","aa","undefined","push","ShowBatchNoOnInvoicePrint","keys","length","RowsWithIGST","totalIGst","IGSTPercentage","IGST","BilledByRow","PartyAddress","Array","isArray","filteredArray","filter","obj","IsDefault","Address","BilledByArray","PartyName","PartyState","PartyGSTIN","PartyFSSAINo","BilledToRow","CustomerAddress","BilledToArray","CustomerName","CustomerState","CustomerGSTIN","CustomerFSSAINo","DetailsOfTransportRow","result","InvoicesReferences","map","a","FullOrderNumber","PONumber","toString","DetailsOfTransportArray","ReportType","DriverName","VehicleNo"],"sources":["D:/Rohit/Git projects/Manthan/src/Reports/InvioceReport/TableData.js"],"sourcesContent":["// import { invoice, invoiceA5 } from \"../ReportIndex\";\r\n// export const columns = [\r\n//     \"SR\",\r\n//     \"HSN Item Name\",\r\n//     \"Quantity\",\r\n//     \"MRP\",\r\n//     \"Rate\",\r\n//     \"Discount\",\r\n//     \"Discount Amount \",\r\n//     \"Taxable Amount\",\r\n//     \"          CGST           %        Amount\",\r\n//     \"CGST \",\r\n//     \"          SGST           %        Amount\",\r\n//     \"SGST Amount\",\r\n//     \"Total Amount\",\r\n// ];\r\n\r\n\r\n// export const BilledBy = [\r\n//     \"Billed by\",\r\n// ]\r\n// export const BilledTo = [\r\n//     \"Billed by\",\r\n// ]\r\n// export const DetailsOfTransport = [\r\n//     \"Billed by\",\r\n// ]\r\n\r\n\r\n\r\n\r\n\r\n// export const Rows = (data) => {\r\n\r\n//     const { InvoiceItems = [] } = data\r\n//     InvoiceItems.sort((firstItem, secondItem) => firstItem.GSTPercentage - secondItem.GSTPercentage);\r\n//     const returnArr = [];\r\n//     let Gst = 0\r\n//     let totalBasicAmount = 0\r\n//     let totalCGst = 0\r\n//     let totalSGst = 0\r\n//     let totalAmount = 0\r\n//     let totalQuantity = 0\r\n//     let SrNO = 1\r\n//     let TotalGst = 0\r\n//     let GSTPercentage = 0\r\n\r\n//     const groupedItems = InvoiceItems.reduce((accumulator, currentItem) => {\r\n\r\n//         const { HSNCode, ItemName, MRP, Rate, Discount, CGST, SGST, Amount, DiscountAmount, BasicAmount, Quantity, UnitName, MRPValue, CGSTPercentage, SGSTPercentage, GSTPercentage, BatchCode, BatchDate, DiscountType, PrimaryUnitName } = currentItem;\r\n//         const key = ItemName + '_' + MRP;\r\n//         if (accumulator[key]) {\r\n\r\n//             accumulator[key].DiscountAmount += Number(DiscountAmount);\r\n//             accumulator[key].Quantity += Number(Quantity);\r\n//             accumulator[key].BasicAmount += Number(BasicAmount);\r\n//             accumulator[key].CGST += Number(CGST);\r\n//             accumulator[key].SGST += Number(SGST);\r\n//             accumulator[key].Amount += Number(Amount);\r\n//             accumulator[key].BatchCode += BatchCode;\r\n//             accumulator[key].BatchDate += BatchDate;\r\n//             accumulator[key].quantityString += ` ,  ${BatchCode} ${BatchDate} `;\r\n\r\n//         } else {\r\n//             accumulator[key] = {\r\n//                 ItemName, HSNCode,\r\n//                 MRPValue, DiscountType, Rate, Discount, CGST: Number(CGST), SGST: Number(SGST), Amount: Number(Amount), DiscountAmount: Number(DiscountAmount), BasicAmount: Number(BasicAmount), Quantity: Number(Quantity), UnitName, CGSTPercentage, SGSTPercentage, GSTPercentage, BatchDate, BatchCode: BatchCode, PrimaryUnitName, BatchDate: BatchDate, quantityString: `  ${BatchCode}  ${BatchDate}`\r\n//             };\r\n//         }\r\n//         return accumulator;\r\n//     }, {});\r\n\r\n//     Object.values(groupedItems).forEach((element, key) => {\r\n//         let HSNcodes = \"\"\r\n\r\n//         if (data.SettingData.HSNCodeDigit.Value === \"1\") {\r\n//             HSNcodes = element.HSNCode.slice(0, 4);\r\n//         }\r\n//         if (data.SettingData.HSNCodeDigit.Value === \"2\") {\r\n//             HSNcodes = element.HSNCode.slice(0, 6);\r\n//         }\r\n//         if (data.SettingData.HSNCodeDigit.Value === \"3\") {\r\n//             HSNcodes = element.HSNCode.slice(0, 8);\r\n//         }\r\n\r\n//         const tableitemRow = [\r\n//             SrNO++,\r\n//             `${HSNcodes} ${element.ItemName}`,\r\n//             `${Number(element.Quantity).toFixed(2)} ${element.PrimaryUnitName}   ${element.UnitName}`,\r\n//             `${Number(element.MRPValue).toFixed(2)}`,\r\n//             `${Number(element.Rate).toFixed(2)}`,\r\n//             `${element.Discount} ${element.DiscountType === \"1\" ? \"Rs\" : \"%\"}`,\r\n//             `${Number(element.DiscountAmount).toFixed(2)}`,\r\n//             `${Number(element.BasicAmount).toFixed(2)}`,\r\n//             `${Number(element.CGSTPercentage).toFixed(1)}%`,\r\n//             `${Number(element.CGST).toFixed(2)}`,\r\n//             `${Number(element.SGSTPercentage).toFixed(1)}%`,\r\n//             `${Number(element.SGST).toFixed(2)}`,\r\n//             `${Number(element.Amount).toFixed(2)}`,\r\n//         ];\r\n\r\n//         function totalLots() {\r\n//             totalQuantity = Number(totalQuantity) + Number(element.Quantity)\r\n//             totalCGst = Number(totalCGst) + Number(element.CGST)\r\n//             totalSGst = Number(totalSGst) + Number(element.SGST)\r\n//             totalAmount = Number(totalAmount) + Number(element.Amount)\r\n//             totalBasicAmount = Number(totalBasicAmount) + Number(element.BasicAmount)\r\n//             TotalGst = totalCGst + totalSGst;\r\n//             GSTPercentage = Number(element.CGSTPercentage) + Number(element.SGSTPercentage)\r\n//             let cgst = data[\"tableTot\"].TotalCGst\r\n//             return ({ TotalCGst: Number(totalCGst) + Number(cgst) })\r\n\r\n//         };\r\n\r\n\r\n//         function totalrow() {\r\n\r\n//             return [\r\n//                 \"\",\r\n//                 ` GST ${(Number(GSTPercentage))}%  Total:${(Number(TotalGst).toFixed(2))} `,\r\n//                 \" \",\r\n//                 ``,\r\n//                 \"\",\r\n//                 \"\",\r\n//                 ``,\r\n//                 `${Number(totalBasicAmount).toFixed(2)}`,\r\n//                 `${Number(totalCGst).toFixed(2)}`,\r\n//                 \"isaddition\",\r\n//                 `${Number(totalSGst).toFixed(2)}`,\r\n//                 \"\",\r\n//                 `${Number(totalAmount).toFixed(2)}`,\r\n//             ];\r\n//         };\r\n//         const BatchRow = [\r\n//             `Batch:  ${element.quantityString} `,\r\n//             `Batch`,\r\n//             \" \",\r\n//             ``,\r\n//             \"\",\r\n//             \"\",\r\n//             \"\",\r\n//             \"\",\r\n//             ``,\r\n//             \"\",\r\n//             ``,\r\n//             \"\",\r\n//             ``,\r\n//         ]\r\n\r\n//         if (Gst === 0) { Gst = element.GSTPercentage };\r\n//         let aa = { TotalCGst: 0, totalSGst: 0 }\r\n//         if (data[\"tableTot\"] === undefined) { data[\"tableTot\"] = aa }\r\n//         if ((Gst === element.GSTPercentage)) {\r\n//             data[\"tableTot\"] = totalLots()\r\n//             returnArr.push(tableitemRow);\r\n//         }\r\n//         else {\r\n//             returnArr.push(totalrow());\r\n//             returnArr.push(tableitemRow);\r\n//             totalBasicAmount = 0\r\n//             totalCGst = 0\r\n//             totalSGst = 0\r\n//             totalAmount = 0\r\n//             totalQuantity = 0\r\n\r\n//             data[\"tableTot\"] = totalLots()\r\n//             Gst = element.GSTPercentage;\r\n//         }\r\n//         if (data.SettingData.ShowBatchNoOnInvoicePrint.Value === \"1\") {\r\n//             returnArr.push((BatchRow))\r\n//         }\r\n\r\n//         if (key === Object.keys(groupedItems).length - 1) {\r\n\r\n//             returnArr.push(totalrow());\r\n//         }\r\n//     })\r\n//     return returnArr;\r\n// }\r\n\r\n\r\n\r\n// export const BilledByRow = (data) => {\r\n\r\n\r\n//     var BilledByArray = [\r\n\r\n//         [`${data.PartyName}`],\r\n//         [`${data.PartyAddress}`],\r\n//         [`${data.PartyState}`],\r\n//         [`GSTIN:${data.PartyGSTIN}`],\r\n//         [`FSSAINo:${data.PartyFSSAINo}`],\r\n//     ]\r\n//     return BilledByArray;\r\n// }\r\n// export const BilledToRow = (data) => {\r\n\r\n\r\n//     var BilledToArray = [\r\n//         [`${data.CustomerName}`],\r\n//         [`${data.CustomerAddress}`],\r\n//         [`${data.CustomerState}`],\r\n//         [`GSTIN:${data.CustomerGSTIN}`,],\r\n//         [`FSSAINo:${data.CustomerFSSAINo}`],\r\n//     ]\r\n\r\n//     return BilledToArray;\r\n// }\r\n// export const DetailsOfTransportRow = (data) => {\r\n\r\n\r\n//     let result = data.InvoicesReferences.map(a => a.FullOrderNumber);\r\n//     const PONumber = result.toString()\r\n//     var DetailsOfTransportArray = [\r\n//         [data.ReportType === invoiceA5 ? ` PO Number:${PONumber}` : data.DriverName === null ? \"Driver Name:\" : `Driver Name :${data.DriverName}`],\r\n//         [`vehical No :${data.VehicleNo === null ? \"\" : data.VehicleNo}`],\r\n//         [`E-way Bill :`],\r\n//         [`IRN NO :`]\r\n//     ]\r\n\r\n//     return DetailsOfTransportArray;\r\n// }\r\n\r\n\r\n// // export const ReportHederRows = (data) => {\r\n// //     var reportArray = [\r\n// //         [, ,data.ReportType===invoice?`Purches Order No: 1`:'Driver Name : Sameer'],\r\n// //         [`${data.PartyName}`, `${data.CustomerName}`,data.ReportType===invoice?`Driver Name : Sameer`:`vehical No :MH34566` ,],\r\n// //         [`maharashtra`, `karnatak`,data.ReportType===invoice?`vehical No :MH34566`:`E-way Bill :24654364633` ],\r\n// //         [`FSSAI :f23dfxxxxxwe55`, `FSSAI :ui3dfxxxxxwe55`, data.ReportType===invoice?`E-way Bill :24654364633`:`INR NO :${data.FullInvoiceNumber}`, ],\r\n// //         [,,  data.ReportType===invoice?`INR NO :${data.FullInvoiceNumber}`:null]\r\n// //     ]\r\n// //     return reportArray;\r\n// // }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nimport { invoice } from \"../ReportIndex\";\r\n\r\nexport const columns =[\r\n    \"SR\",\r\n    \"HSN Item Name\",\r\n    \"Quantity (UOM)\" ,\r\n    \"MRP\",\r\n    \"Rate\",\r\n    \"Discount\",\r\n    \"Discount Amount \",\r\n    \"Taxable Amount\",\r\n    \"          CGST           %        Amount\",\r\n    \"CGST Amount\",\r\n    \"          SGST           %        Amount\",\r\n    \"SGST Amount\",\r\n   \"Amount\" ,\r\n];\r\nexport const columnsWithIGST =[\r\n    \"SR\",\r\n    \"HSN Item Name\",\r\n    \"Quantity (UOM)\" ,\r\n    \"MRP\",\r\n    \"Rate\",\r\n    \"Discount\",\r\n    \"Discount Amount \",\r\n    \"Taxable Amount\",\r\n    \"          IGST           %        Amount\",\r\n    \"IGST Amount\",\r\n   \"Amount\" ,\r\n];\r\n\r\n\r\n\r\nexport const Footercolumn = [\r\n    \"\",\r\n]\r\n\r\nexport const BilledBy = [\r\n    \"Billed by\",  \r\n]\r\nexport const BilledTo = [\r\n    \"Billed by\",\r\n]\r\nexport const DetailsOfTransport = [\r\n    \"Billed by\",\r\n]\r\n\r\nexport const Rows = (data) => {\r\n    const { InvoiceItems = [] } = data\r\n    InvoiceItems.sort((firstItem, secondItem) => firstItem.GSTPercentage - secondItem.GSTPercentage);\r\n    const returnArr = [];\r\n    let Gst = 0\r\n    let totalBasicAmount = 0\r\n    let totalCGst = 0\r\n    let totalSGst = 0\r\n    let totalAmount = 0\r\n    let totalQuantity = 0\r\n    let SrNO = 1\r\n    let TotalGst = 0\r\n    let GSTPercentage=0\r\n\r\n    const groupedItems = InvoiceItems.reduce((accumulator, currentItem) => {\r\n        \r\n        const {HSNCode, ItemName, MRP, Rate, Discount, CGST,SGST,Amount,DiscountAmount,BasicAmount, Quantity, UnitName, MRPValue, CGSTPercentage,SGSTPercentage,GSTPercentage,BatchCode,BatchDate,DiscountType,PrimaryUnitName} = currentItem;\r\n        const key = ItemName + '_' + MRP;\r\n        if (accumulator[key]) {\r\n            accumulator[key].DiscountAmount += Number(DiscountAmount);\r\n            accumulator[key].Quantity += Number(Quantity);\r\n            accumulator[key].BasicAmount += Number(BasicAmount);\r\n            accumulator[key].CGST += Number(CGST);\r\n            accumulator[key].SGST += Number(SGST);\r\n            accumulator[key].Amount += Number(Amount);\r\n            accumulator[key].BatchCode += BatchCode ;\r\n            accumulator[key].BatchDate += BatchDate ;\r\n            accumulator[key].quantityString += ` ,  ${BatchCode} ${BatchDate} `;\r\n\r\n        } else {\r\n            accumulator[key] = { ItemName,HSNCode,\r\n                 MRPValue, DiscountType, Rate, Discount, CGST:Number(CGST),SGST: Number(SGST),Amount:Number(Amount),DiscountAmount:Number(DiscountAmount),BasicAmount:Number(BasicAmount), Quantity:Number(Quantity), UnitName ,CGSTPercentage,SGSTPercentage,GSTPercentage,BatchDate,BatchCode:BatchCode,BatchDate:BatchDate,quantityString:`  ${BatchCode}  ${BatchDate}`,PrimaryUnitName};\r\n        }\r\n        return accumulator;\r\n    }, {});\r\n\r\n    Object.values(groupedItems).forEach((element, key) => {\r\n        \r\n        let  HSNcodes =\"\"\r\nif (data.SettingData.HSNCodeDigit.Value=== \"1\") {\r\n     HSNcodes = element.HSNCode.slice(0, 4);\r\n}\r\nif (data.SettingData.HSNCodeDigit.Value=== \"2\") {\r\n     HSNcodes = element.HSNCode.slice(0, 6);\r\n}\r\nif (data.SettingData.HSNCodeDigit.Value=== \"3\") {\r\n     HSNcodes = element.HSNCode.slice(0, 8);\r\n}\r\n   \r\n        const tableitemRow = [\r\n            SrNO++,\r\n            `${HSNcodes} ${element.ItemName}` ,\r\n            `${Number(element.Quantity).toFixed(2)} ${element.PrimaryUnitName}   ${element.UnitName}`,\r\n            `${Number(element.MRPValue).toFixed(2)}`,\r\n            `${Number( element.Rate).toFixed(2)}`,\r\n            `${element.Discount} ${element.DiscountType=== \"1\"? \"Rs\":\"%\" }`,\r\n            `${Number(element.DiscountAmount).toFixed(2)}`,\r\n            `${Number( element.BasicAmount).toFixed(2)}`,\r\n            `${Number(element.CGSTPercentage).toFixed(1)}%`,\r\n            `${Number(element.CGST).toFixed(2)}`,\r\n            `${Number(element.SGSTPercentage).toFixed(1)}%`,\r\n            `${Number( element.SGST).toFixed(2)}`,\r\n            `${Number(element.Amount).toFixed(2)}`,\r\n        ];\r\n\r\n        function totalLots() {\r\n            totalQuantity = Number(totalQuantity) + Number(element.Quantity)\r\n            totalCGst = Number(totalCGst) + Number(element.CGST)\r\n            totalSGst = Number(totalSGst) + Number(element.SGST)\r\n            totalAmount = Number(totalAmount) + Number( element.Amount)\r\n            totalBasicAmount = Number(totalBasicAmount) + Number(element.BasicAmount)\r\n            TotalGst =totalCGst +totalSGst;\r\n            GSTPercentage = Number(element.CGSTPercentage) + Number(element.SGSTPercentage)\r\n            let cgst = data[\"tableTot\"].TotalCGst\r\n            return ({ TotalCGst: Number(totalCGst) + Number(cgst)})\r\n          \r\n        };\r\n\r\n         \r\n        function totalrow() {\r\n        \r\n            return [\r\n                \"\",\r\n                ` GST ${(parseFloat(GSTPercentage))}%  Total:${(Number(TotalGst).toFixed(2))} `,\r\n                \" \",\r\n                ``,\r\n                \"\",\r\n                \"\",\r\n                ``,\r\n                `${Number(totalBasicAmount).toFixed(2)}`,\r\n                `${Number(totalCGst).toFixed(2)}`,\r\n                \"isaddition\",\r\n                `${Number(totalSGst).toFixed(2)}`,\r\n                \"\",\r\n                `${Number(totalAmount).toFixed(2)}`,\r\n            ];\r\n        };\r\n        const BatchRow =[\r\n            `Batch:  ${element.quantityString} `,\r\n            `Batch`,\r\n            \" \",\r\n            ``,\r\n            \"\",\r\n            \"\",\r\n            \"\",\r\n            \"\",\r\n            ``,\r\n            \"\",\r\n            ``,\r\n            \"\",\r\n            ``,\r\n        ]\r\n\r\n        if (Gst === 0) { Gst = element.GSTPercentage };\r\n        let aa = { TotalCGst: 0, totalSGst: 0 }\r\n        if (data[\"tableTot\"] === undefined) { data[\"tableTot\"] = aa }\r\n      \r\n        if ((Gst === element.GSTPercentage)) {\r\n            data[\"tableTot\"] = totalLots()\r\n            returnArr.push(tableitemRow) \r\n           \r\n        }\r\n\r\n       \r\n        else {\r\n            returnArr.push(totalrow());\r\n            returnArr.push(tableitemRow);\r\n            totalBasicAmount = 0\r\n            totalCGst = 0\r\n            totalSGst = 0\r\n            totalAmount = 0\r\n            totalQuantity = 0\r\n\r\n            data[\"tableTot\"] = totalLots()\r\n            Gst = element.GSTPercentage;\r\n        }\r\n        if (data.SettingData.ShowBatchNoOnInvoicePrint.Value=== \"1\") {\r\n            returnArr.push((BatchRow))\r\n        }\r\n        \r\n        if (key === Object.keys(groupedItems).length - 1) {\r\n          \r\n            returnArr.push(totalrow());\r\n        }\r\n    })\r\n    return returnArr;\r\n}\r\n\r\nexport const RowsWithIGST = (data) => {\r\n    const { InvoiceItems = [] } = data\r\n    InvoiceItems.sort((firstItem, secondItem) => firstItem.GSTPercentage - secondItem.GSTPercentage);\r\n    const returnArr = [];\r\n    let Gst = 0\r\n    let totalBasicAmount = 0\r\n    let totalIGst = 0\r\n    let totalAmount = 0\r\n    let totalQuantity = 0\r\n    let SrNO = 1\r\n    let TotalGst = 0\r\n    let GSTPercentage=0\r\n\r\n    const groupedItems = InvoiceItems.reduce((accumulator, currentItem) => {\r\n        \r\n        const {HSNCode, ItemName, IGSTPercentage,MRP, Rate, Discount, CGST,SGST,Amount,DiscountAmount,BasicAmount, Quantity, UnitName, MRPValue, CGSTPercentage,SGSTPercentage,GSTPercentage,BatchCode,BatchDate,DiscountType,PrimaryUnitName,IGST} = currentItem;\r\n        const key = ItemName + '_' + MRP;\r\n        if (accumulator[key]) {\r\n            accumulator[key].DiscountAmount += Number(DiscountAmount);\r\n            accumulator[key].Quantity += Number(Quantity);\r\n            accumulator[key].BasicAmount += Number(BasicAmount);\r\n            accumulator[key].CGST += Number(CGST);\r\n            accumulator[key].IGST += Number(IGST);\r\n            accumulator[key].SGST += Number(SGST);\r\n            accumulator[key].Amount += Number(Amount);\r\n            accumulator[key].BatchCode += BatchCode ;\r\n            accumulator[key].BatchDate += BatchDate ;\r\n            accumulator[key].quantityString += ` ,  ${BatchCode} ${BatchDate} `;\r\n\r\n        } else {\r\n            accumulator[key] = { ItemName,HSNCode,\r\n                 MRPValue,IGSTPercentage, DiscountType, Rate, Discount, CGST:Number(CGST),SGST: Number(SGST),Amount:Number(Amount),DiscountAmount:Number(DiscountAmount),BasicAmount:Number(BasicAmount), Quantity:Number(Quantity), UnitName ,CGSTPercentage,SGSTPercentage,GSTPercentage,BatchDate,BatchCode:BatchCode,BatchDate:BatchDate,quantityString:`  ${BatchCode}  ${BatchDate}`,PrimaryUnitName,IGST};\r\n        }\r\n        return accumulator;\r\n    }, {});\r\n\r\n    Object.values(groupedItems).forEach((element, key) => {\r\n        \r\n        let  HSNcodes =\"\"\r\nif (data.SettingData.HSNCodeDigit.Value=== \"1\") {\r\n     HSNcodes = element.HSNCode.slice(0, 4);\r\n}\r\nif (data.SettingData.HSNCodeDigit.Value=== \"2\") {\r\n     HSNcodes = element.HSNCode.slice(0, 6);\r\n}\r\nif (data.SettingData.HSNCodeDigit.Value=== \"3\") {\r\n     HSNcodes = element.HSNCode.slice(0, 8);\r\n}\r\n   \r\n        const tableitemRow = [\r\n            SrNO++,\r\n            `${HSNcodes} ${element.ItemName}` ,\r\n            `${Number(element.Quantity).toFixed(2)} ${element.PrimaryUnitName}   ${element.UnitName}`,\r\n            `${Number(element.MRPValue).toFixed(2)}`,\r\n            `${Number( element.Rate).toFixed(2)}`,\r\n            `${element.Discount} ${element.DiscountType=== \"1\"? \"Rs\":\"%\" }`,\r\n            `${Number(element.DiscountAmount).toFixed(2)}`,\r\n            `${Number( element.BasicAmount).toFixed(2)}`,\r\n            `${Number(element.IGSTPercentage).toFixed(1)}%`,\r\n            `${Number(element.IGST).toFixed(2)}`,\r\n            `${Number(element.Amount).toFixed(2)}`,\r\n        ];\r\n\r\n        function totalLots() {\r\n            totalQuantity = Number(totalQuantity) + Number(element.Quantity)\r\n            totalIGst = Number(totalIGst) + Number(element.IGST)\r\n            totalAmount = Number(totalAmount) + Number( element.Amount)\r\n            totalBasicAmount = Number(totalBasicAmount) + Number(element.BasicAmount)\r\n          \r\n            GSTPercentage = Number(element.CGSTPercentage) + Number(element.SGSTPercentage)\r\n          \r\n        };\r\n\r\n         \r\n        function totalrow() {\r\n        \r\n            return [\r\n                \"\",\r\n                ` GST ${(parseFloat(GSTPercentage))}%  Total:${(Number(TotalGst).toFixed(2))} `,\r\n                \" \",\r\n                ``,\r\n                \"\",\r\n                \"\",\r\n                ``,\r\n                `${Number(totalBasicAmount).toFixed(2)}`,\r\n                `${Number(totalIGst).toFixed(2)}`,\r\n                \"isaddition\",\r\n                `${Number(totalAmount).toFixed(2)}`,\r\n                \r\n            ];\r\n        };\r\n        const BatchRow =[\r\n            `Batch:  ${element.quantityString} `,\r\n            `Batch`,\r\n            \" \",\r\n            ``,\r\n            \"\",\r\n            \"\",\r\n            \"\",\r\n            \"\",\r\n            ``,\r\n            \"\",\r\n            ``,\r\n        ]\r\n\r\n        if (Gst === 0) { Gst = element.GSTPercentage };\r\n        let aa = { TotalCGst: 0, totalSGst: 0 }\r\n        if (data[\"tableTot\"] === undefined) { data[\"tableTot\"] = aa }\r\n      \r\n        if ((Gst === element.GSTPercentage)) {\r\n            data[\"tableTot\"] = totalLots()\r\n            returnArr.push(tableitemRow) \r\n           \r\n        }\r\n\r\n       \r\n        else {\r\n            returnArr.push(totalrow());\r\n            returnArr.push(tableitemRow);\r\n            totalBasicAmount = 0\r\n            totalAmount = 0\r\n            totalQuantity = 0\r\n\r\n            data[\"tableTot\"] = totalLots()\r\n            Gst = element.GSTPercentage;\r\n        }\r\n        if (data.SettingData.ShowBatchNoOnInvoicePrint.Value=== \"1\") {\r\n            returnArr.push((BatchRow))\r\n        }\r\n        \r\n        if (key === Object.keys(groupedItems).length - 1) {\r\n          \r\n            returnArr.push(totalrow());\r\n        }\r\n    })\r\n    return returnArr;\r\n}\r\n  \r\n\r\nexport const BilledByRow = (data) => {\r\n    \r\n    let PartyAddress =\"\"\r\n    if (Array.isArray(data.PartyAddress)) {\r\n    const filteredArray = data.PartyAddress.filter(obj => obj.IsDefault === true); \r\n    PartyAddress = filteredArray[0]=== undefined?\"\":filteredArray[0].Address\r\n    }else{\r\n        PartyAddress=data.PartyAddress\r\n    }\r\n\r\n    var BilledByArray = [\r\n        [`${data.PartyName}`], \r\n        [`${PartyAddress}`]  ,\r\n        [`${data.PartyState}`],\r\n        [`GSTIN:${data.PartyGSTIN}`],\r\n        [`FSSAINo:${data.PartyFSSAINo}`],\r\n    ]\r\n    return BilledByArray;\r\n} \r\nexport const BilledToRow = (data) => {\r\n    \r\n    let CustomerAddress =\"\"\r\n    if (Array.isArray(data.CustomerAddress)) {\r\n    const filteredArray = data.CustomerAddress.filter(obj => obj.IsDefault === true); \r\n    CustomerAddress = filteredArray[0]=== undefined?\"\":filteredArray[0].Address\r\n    }else{\r\n        CustomerAddress=data.CustomerAddress\r\n    }\r\n    var BilledToArray = [\r\n        [`${data.CustomerName}`],\r\n        [`${CustomerAddress}`]  ,\r\n        [`${data.CustomerState}`],\r\n        [`GSTIN:${data.CustomerGSTIN}`,],\r\n        [`FSSAINo:${data.CustomerFSSAINo}`],\r\n    ]\r\n  \r\n    return BilledToArray;\r\n}\r\nexport const DetailsOfTransportRow = (data) => {\r\n\r\n\r\nlet result = data.InvoicesReferences.map(a => a.FullOrderNumber);\r\n\r\n    const PONumber =result.toString()\r\n    var DetailsOfTransportArray = [\r\n        [data.ReportType===invoice?` PO Number:${PONumber}`:data.DriverName ===null?\"Driver Name:\": `Driver Name :${data.DriverName}`],\r\n        [`vehical No :${data.VehicleNo === null ?\"\":data.VehicleNo}`],\r\n        [`E-way Bill :`],\r\n        [`IRN NO :`]\r\n    ]\r\n  \r\n    return DetailsOfTransportArray;\r\n}\r\n\r\n\r\n\r\n// export const ReportHederRows = (data) => {\r\n   \r\n//     var reportArray = [\r\n//         [, ,data.ReportType===invoice?`Purches Order No: 1`:'Driver Name : Sameer'],\r\n//         [`${data.PartyName}`, `${data.CustomerName}`,data.ReportType===invoice?`Driver Name : Sameer`:`vehical No :MH34566` ,],\r\n//         [`maharashtra`, `karnatak`,data.ReportType===invoice?`vehical No :MH34566`:`E-way Bill :24654364633` ],\r\n//         [`FSSAI :f23dfxxxxxwe55`, `FSSAI :ui3dfxxxxxwe55`, data.ReportType===invoice?`E-way Bill :24654364633`:`INR NO :${data.FullInvoiceNumber}`, ],\r\n//         [,,  data.ReportType===invoice?`INR NO :${data.FullInvoiceNumber}`:null]\r\n//     ]\r\n//     return reportArray;\r\n// }\r\n\r\n\r\n\r\n\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}