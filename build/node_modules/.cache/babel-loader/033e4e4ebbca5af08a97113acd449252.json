{"ast":null,"code":"var _jsxFileName = \"D:\\\\Rohit\\\\Git projects\\\\Manthan\\\\src\\\\Reports\\\\SapLedgerReport\\\\SapLedger.js\",\n    _s = $RefreshSig$();\n\n// import React, { useEffect, useState } from \"react\";\n// import {\n//     Col,\n//     FormGroup,\n//     Label,\n//     Button\n// } from \"reactstrap\";\n// import { MetaTags } from \"react-meta-tags\";\n// import { commonPageFieldSuccess } from \"../../store/actions\";\n// import { useDispatch, useSelector } from \"react-redux\";\n// import { useHistory } from \"react-router-dom\";\n// import { url, mode, pageId } from \"../../routes/index\"\n// import { LoadingSheet_GoBtn_API_Succcess } from \"../../store/Sales/LoadingSheetRedux/action\";\n// import ToolkitProvider from \"react-bootstrap-table2-toolkit\";\n// import BootstrapTable from \"react-bootstrap-table-next\";\n// import { mySearchProps } from \"../../components/Common/SearchBox/MySearch\";\n// import { makeBtnCss } from \"../../components/Common/ListActionsButtons\";\n// import { GetOpeningBalance, ReceiptGoButtonMaster, ReceiptGoButtonMaster_Success } from \"../../store/Accounting/Receipt/action\";\n// import DynamicColumnHook, { selectAllCheck } from \"../../components/Common/TableCommonFunc\";\n// import * as _cfunc from \"../../components/Common/CommonFunction\";\n// import { customAlert } from \"../../CustomAlert/ConfirmDialog\";\n// import { C_DatePicker } from \"../../CustomValidateForm\";\n// import { commonPageField } from \"../../store/actions\";\n// import { SapLedger_Go_Button_API, SapLedger_Go_Button_API_Success } from \"../../store/Report/SapLedger Redux/action\";\n// const SapLedger = (props) => {\n//     const dispatch = useDispatch();\n//     const history = useHistory()\n//     const currentDate_ymd = _cfunc.date_ymd_func();\n//     const [userPageAccessState, setUserAccState] = useState('');\n//     const [loadingDate, setLoadingDate] = useState(currentDate_ymd);\n//     const [headerFilters, setHeaderFilters] = useState('');\n//     const {\n//         userAccess,\n//         List,\n//         LoginPartydata,\n//         pageField,\n//     } = useSelector((state) => ({\n//         List: state.SapLedgerReducer.goBtnSapLedger,\n//         userAccess: state.Login.RoleAccessUpdateData,\n//         pageField: state.CommonPageFieldReducer.pageField,\n//          LoginPartydata:state.Login.divisionDropdown\n//     }));\n//     const { data = [], PartyDetails = {} } = List\n//     const { fromdate = currentDate_ymd, todate = currentDate_ymd } = headerFilters;\n//     const [tableColumns] = DynamicColumnHook({ pageField })\n//     useEffect(() => {\n//         dispatch(SapLedger_Go_Button_API_Success([]))\n//         const page_Id = pageId.SAP_LEDGER\n//         dispatch(commonPageFieldSuccess(null));\n//         dispatch(commonPageField(page_Id))\n//     }, []);\n//     const location = { ...history.location }\n//     const hasShowloction = location.hasOwnProperty(mode.editValue)\n//     const hasShowModal = props.hasOwnProperty(mode.editValue)\n//     // userAccess useEffect\n//     useEffect(() => {\n//         let userAcc = null;\n//         let locationPath = location.pathname;\n//         if (hasShowModal) {\n//             locationPath = props.masterPath;\n//         };\n//         userAcc = userAccess.find((inx) => {\n//             return (`/${inx.ActualPagePath}` === locationPath)\n//         })\n//         if (userAcc) {\n//             setUserAccState(userAcc)\n//             _cfunc.breadcrumbReturnFunc({ dispatch, userAcc });\n//         };\n//     }, [userAccess])\n//     // const Sapcode = LoginPartydata.map((index) => ({\n//     //     Sapcode: index.SAPPartyCode,\n//     // }));\n//     debugger\n//   let partdata =  localStorage.getItem(\"roleId\")\n//   var partyDivisiondata  = JSON.parse(partdata);\n//     function goButtonHandler() {\n//         const jsonBody = JSON.stringify({\n//             FromDate: fromdate,\n//             ToDate: todate,\n//             SAPCode:partyDivisiondata.SAPPartyCode\n//         });\n//         dispatch(SapLedger_Go_Button_API(jsonBody));\n//     }\n//     function fromdateOnchange(e, date) {\n//         let newObj = { ...headerFilters }\n//         newObj.fromdate = date\n//         setHeaderFilters(newObj)\n//     }\n//     function todateOnchange(e, date) {\n//         let newObj = { ...headerFilters }\n//         newObj.todate = date\n//         setHeaderFilters(newObj)\n//     }\n//     // function MakeReceiptForAll() {\n//     //     const result = data.map((index) => {\n//     //         if (index.selectCheck === true) {\n//     //             return index.id\n//     //         }\n//     //     })\n//     //     const LoadingNumber = result.toString()\n//     //     const jsonBody = JSON.stringify({\n//     //         PartyID: _cfunc.loginPartyID(),\n//     //         CustomerID: \"\",\n//     //         InvoiceID: LoadingNumber\n//     //     });\n//     //     const body = { jsonBody }\n//     //     if (LoadingNumber === \",\") {\n//     //         customAlert({\n//     //             Type: 3,\n//     //             Message: \"Select At Least One Invoice\",\n//     //         })\n//     //     }\n//     //     else {\n//     //         dispatch(ReceiptGoButtonMaster(body))\n//     //         history.push(url.BULK_RECIPT);\n//     //     }\n//     // }\n//     if (!(userPageAccessState === '')) {\n//         return (\n//             <React.Fragment>\n//                 <MetaTags>{_cfunc.metaTagLabel(userPageAccessState)}</MetaTags>\n//                 <div className=\"page-content\" style={{ marginBottom: \"5cm\" }}>\n//                 <div className=\"px-2  c_card_filter text-black \" >\n//                     <div className=\"row\">\n//                         <div className=\" row\">\n//                             <Col sm=\"5\" className=\"\">\n//                                 <FormGroup className=\"mb- row mt-3 \" >\n//                                     <Label className=\"col-sm-5 p-2\"\n//                                         style={{ width: \"83px\" }}>From Date</Label>\n//                                     <Col sm=\"7\">\n//                                         <C_DatePicker\n//                                             name='fromdate'\n//                                             value={fromdate}\n//                                             onChange={fromdateOnchange}\n//                                         />\n//                                     </Col>\n//                                 </FormGroup>\n//                             </Col>\n//                             <Col sm=\"5\" className=\"\">\n//                                 <FormGroup className=\"mb- row mt-3 \" >\n//                                     <Label className=\"col-sm-5 p-2\"\n//                                         style={{ width: \"65px\" }}>To Date</Label>\n//                                     <Col sm=\"7\">\n//                                         <C_DatePicker\n//                                             nane='todate'\n//                                             value={todate}\n//                                             onChange={todateOnchange}\n//                                         />\n//                                     </Col>\n//                                 </FormGroup>\n//                             </Col>\n//                             <Col sm=\"2\" className=\"mt-3 \">\n//                                 <Button type=\"button\" color=\"btn btn-outline-success border-2 font-size-12 \"\n//                                     onClick={() => goButtonHandler()}\n//                                 >Go</Button>\n//                             </Col>\n//                         </div>\n//                     </div>\n//                 </div>\n//                 <ToolkitProvider\n//                             keyField=\"id\"\n//                             data={data}\n//                             columns={tableColumns}\n//                             search\n//                         >\n//                             {toolkitProps => (\n//                                 <React.Fragment>\n//                                     <div  className=\"table-responsive\" id=\"TableDiv\" >\n//                                         <BootstrapTable\n//                                             keyField={\"id\"}\n//                                             bordered={true}\n//                                             striped={false}\n//                                             // selectRow={selectAllCheck(rowSelected())}\n//                                             noDataIndication={<div className=\"text-danger text-center \">Record Not available</div>}\n//                                             classes={\"table align-middle table-nowrap table-hover\"}\n//                                             headerWrapperClasses={\"thead-light\"}\n//                                             {...toolkitProps.baseProps}\n//                                         />\n//                                         {mySearchProps(toolkitProps.searchProps)}\n//                                     </div>\n//                                 </React.Fragment>\n//                             )\n//                             }\n//                         </ToolkitProvider>\n//                     {/* <div id=\"id1\"></div>\n//                     <form noValidate>\n//                         <div className=\"px-2 c_card_filter header text-black mb-2\" >\n//                             <div className=\" row \">\n//                                 <Col sm=\"6\">\n//                                     <FormGroup className=\" row mt-2\" >\n//                                         <Label className=\"col-sm-1 p-2\"\n//                                             style={{ width: \"115px\" }}>Loading NO :</Label>\n//                                         <Col sm=\"7\">\n//                                             <Label className=\" mt-2\">{PartyDetails.LoadingSheetNo}</Label>\n//                                         </Col>\n//                                     </FormGroup>\n//                                 </Col >\n//                                 <Col sm=\"6\">\n//                                     <FormGroup className=\" row mt-2\" >\n//                                         <Label className=\"col-sm-1 p-2\"\n//                                             style={{ width: \"115px\", marginRight: \"0.4cm\" }}>Loading Date </Label>\n//                                         <Col sm=\"7\">\n//                                             <C_DatePicker\n//                                                 name='Date'\n//                                                 value={loadingDate}\n//                                                 onChange={DateOnchange}\n//                                             />\n//                                         </Col>\n//                                     </FormGroup>\n//                                 </Col >\n//                             </div>\n//                         </div>\n//                         <ToolkitProvider\n//                             keyField=\"id\"\n//                             data={InvoiceParent}\n//                             columns={tableColumns}\n//                             search\n//                         >\n//                             {toolkitProps => (\n//                                 <React.Fragment>\n//                                     <div className=\"table\">\n//                                         <BootstrapTable\n//                                             keyField={\"id\"}\n//                                             bordered={true}\n//                                             striped={false}\n//                                             selectRow={selectAllCheck(rowSelected())}\n//                                             noDataIndication={<div className=\"text-danger text-center \">Record Not available</div>}\n//                                             classes={\"table align-middle table-nowrap table-hover\"}\n//                                             headerWrapperClasses={\"thead-light\"}\n//                                             {...toolkitProps.baseProps}\n//                                         />\n//                                         {mySearchProps(toolkitProps.searchProps)}\n//                                     </div>\n//                                 </React.Fragment>\n//                             )\n//                             }\n//                         </ToolkitProvider>\n//                         {\n//                             InvoiceParent.length > 0 ?\n//                                 <FormGroup>\n//                                     <Col sm={2} className={\"row save1\"}>\n//                                         <button type=\"button\" style={{ width: \"120px\" }} onClick={MakeReceiptForAll} className=\"btn btn-primary  waves-effect waves-light\">Make Receipt</button>\n//                                     </Col>\n//                                 </FormGroup >\n//                                 : null\n//                         }\n//                     </form > */}\n//                 </div >\n//             </React.Fragment >\n//         );\n//     }\n//     else {\n//         return (\n//             <React.Fragment></React.Fragment>\n//         )\n//     }\n// };\n// export default SapLedger;\nimport React, { useEffect, useState } from \"react\";\nimport { Col, FormGroup, Label, Button, Row } from \"reactstrap\";\nimport { MetaTags } from \"react-meta-tags\";\nimport { commonPageFieldSuccess } from \"../../store/actions\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport { url, mode, pageId } from \"../../routes/index\";\nimport { LoadingSheet_GoBtn_API_Succcess } from \"../../store/Sales/LoadingSheetRedux/action\";\nimport ToolkitProvider from \"react-bootstrap-table2-toolkit\";\nimport BootstrapTable from \"react-bootstrap-table-next\";\nimport { mySearchProps } from \"../../components/Common/SearchBox/MySearch\";\nimport { makeBtnCss } from \"../../components/Common/ListActionsButtons\";\nimport { GetOpeningBalance, ReceiptGoButtonMaster, ReceiptGoButtonMaster_Success } from \"../../store/Accounting/Receipt/action\";\nimport DynamicColumnHook, { selectAllCheck } from \"../../components/Common/TableCommonFunc\";\nimport * as _cfunc from \"../../components/Common/CommonFunction\";\nimport { customAlert } from \"../../CustomAlert/ConfirmDialog\";\nimport { C_DatePicker } from \"../../CustomValidateForm\";\nimport { commonPageField } from \"../../store/actions\";\nimport { SapLedger_Go_Button_API, SapLedger_Go_Button_API_Success } from \"../../store/Report/SapLedger Redux/action\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SapLedger = props => {\n  _s();\n\n  const dispatch = useDispatch();\n  const history = useHistory();\n\n  const currentDate_ymd = _cfunc.date_ymd_func();\n\n  const [userPageAccessState, setUserAccState] = useState('');\n  const [loadingDate, setLoadingDate] = useState(currentDate_ymd);\n  const [headerFilters, setHeaderFilters] = useState('');\n  const {\n    userAccess,\n    List,\n    LoginPartydata,\n    pageField\n  } = useSelector(state => ({\n    List: state.SapLedgerReducer.goBtnSapLedger,\n    userAccess: state.Login.RoleAccessUpdateData,\n    pageField: state.CommonPageFieldReducer.pageField,\n    LoginPartydata: state.Login.divisionDropdown\n  }));\n  debugger;\n  const {\n    data = [],\n    PartyDetails = {}\n  } = List;\n  const {\n    fromdate = currentDate_ymd,\n    todate = currentDate_ymd\n  } = headerFilters;\n  const [tableColumns] = DynamicColumnHook({\n    pageField\n  });\n  useEffect(() => {\n    dispatch(SapLedger_Go_Button_API_Success([]));\n    const page_Id = pageId.SAP_LEDGER;\n    dispatch(commonPageFieldSuccess(null));\n    dispatch(commonPageField(page_Id));\n  }, []);\n  const location = { ...history.location\n  };\n  const hasShowloction = location.hasOwnProperty(mode.editValue);\n  const hasShowModal = props.hasOwnProperty(mode.editValue); // userAccess useEffect\n\n  useEffect(() => {\n    let userAcc = null;\n    let locationPath = location.pathname;\n\n    if (hasShowModal) {\n      locationPath = props.masterPath;\n    }\n\n    ;\n    userAcc = userAccess.find(inx => {\n      return `/${inx.ActualPagePath}` === locationPath;\n    });\n\n    if (userAcc) {\n      setUserAccState(userAcc);\n\n      _cfunc.breadcrumbReturnFunc({\n        dispatch,\n        userAcc\n      });\n    }\n\n    ;\n  }, [userAccess]);\n  let partdata = localStorage.getItem(\"roleId\");\n  var partyDivisiondata = JSON.parse(partdata);\n\n  function goButtonHandler() {\n    const jsonBody = JSON.stringify({\n      FromDate: fromdate,\n      ToDate: todate,\n      SAPCode: partyDivisiondata.SAPPartyCode\n    });\n    dispatch(SapLedger_Go_Button_API(jsonBody));\n  }\n\n  function fromdateOnchange(e, date) {\n    let newObj = { ...headerFilters\n    };\n    newObj.fromdate = date;\n    setHeaderFilters(newObj);\n  }\n\n  function todateOnchange(e, date) {\n    let newObj = { ...headerFilters\n    };\n    newObj.todate = date;\n    setHeaderFilters(newObj);\n  }\n\n  if (!(userPageAccessState === '')) {\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(MetaTags, {\n        children: _cfunc.metaTagLabel(userPageAccessState)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 424,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"page-content\",\n        style: {\n          marginBottom: \"5cm\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"px-2  c_card_filter text-black \",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"row\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \" row\",\n              children: [/*#__PURE__*/_jsxDEV(Col, {\n                sm: \"5\",\n                className: \"\",\n                children: /*#__PURE__*/_jsxDEV(FormGroup, {\n                  className: \"mb- row mt-3 \",\n                  children: [/*#__PURE__*/_jsxDEV(Label, {\n                    className: \"col-sm-5 p-2\",\n                    style: {\n                      width: \"83px\"\n                    },\n                    children: \"From Date\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 433,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(Col, {\n                    sm: \"7\",\n                    children: /*#__PURE__*/_jsxDEV(C_DatePicker, {\n                      name: \"fromdate\",\n                      value: fromdate,\n                      onChange: fromdateOnchange\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 436,\n                      columnNumber: 45\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 435,\n                    columnNumber: 41\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 432,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 431,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Col, {\n                sm: \"5\",\n                className: \"\",\n                children: /*#__PURE__*/_jsxDEV(FormGroup, {\n                  className: \"mb- row mt-3 \",\n                  children: [/*#__PURE__*/_jsxDEV(Label, {\n                    className: \"col-sm-5 p-2\",\n                    style: {\n                      width: \"65px\"\n                    },\n                    children: \"To Date\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 446,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(Col, {\n                    sm: \"7\",\n                    children: /*#__PURE__*/_jsxDEV(C_DatePicker, {\n                      nane: \"todate\",\n                      value: todate,\n                      onChange: todateOnchange\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 449,\n                      columnNumber: 45\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 448,\n                    columnNumber: 41\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 445,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 444,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Col, {\n                sm: \"2\",\n                className: \"mt-3 \",\n                children: /*#__PURE__*/_jsxDEV(Button, {\n                  type: \"button\",\n                  color: \"btn btn-outline-success border-2 font-size-12 \",\n                  onClick: () => goButtonHandler(),\n                  children: \"Go\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 458,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 457,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 430,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 429,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 428,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ToolkitProvider, {\n          keyField: \"id\",\n          data: data,\n          columns: tableColumns,\n          search: true,\n          children: toolkitProps => /*#__PURE__*/_jsxDEV(React.Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(Row, {\n              children: [/*#__PURE__*/_jsxDEV(Col, {\n                sm: 9,\n                children: /*#__PURE__*/_jsxDEV(Label, {\n                  className: \"col-sm-6\",\n                  style: {\n                    width: \"400px\"\n                  },\n                  children: [\"Opening Balance :\", List.OpeingBal]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 476,\n                  columnNumber: 41\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 475,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(Col, {\n                sm: 3,\n                children: /*#__PURE__*/_jsxDEV(Label, {\n                  className: \"col-sm-6\",\n                  style: {\n                    width: \"200px\"\n                  },\n                  children: [\"Closing Balance :\", List.ClosingBal]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 482,\n                  columnNumber: 41\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 480,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 474,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"table-responsive\",\n              id: \"TableDiv\",\n              children: [/*#__PURE__*/_jsxDEV(BootstrapTable, {\n                keyField: \"id\",\n                bordered: true,\n                striped: false // selectRow={selectAllCheck(rowSelected())}\n                ,\n                noDataIndication: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"text-danger text-center \",\n                  children: \"Record Not available\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 495,\n                  columnNumber: 59\n                }, this),\n                classes: \"table align-middle table-nowrap table-hover\",\n                headerWrapperClasses: \"thead-light\",\n                ...toolkitProps.baseProps\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 490,\n                columnNumber: 37\n              }, this), mySearchProps(toolkitProps.searchProps)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 489,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 473,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 466,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 426,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 423,\n      columnNumber: 13\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 519,\n      columnNumber: 13\n    }, this);\n  }\n};\n\n_s(SapLedger, \"ETsZS6/mVRdsUSIw+vhSx7bAnMM=\", false, function () {\n  return [useDispatch, useHistory, useSelector];\n});\n\n_c = SapLedger;\nexport default SapLedger;\n\nvar _c;\n\n$RefreshReg$(_c, \"SapLedger\");","map":{"version":3,"names":["React","useEffect","useState","Col","FormGroup","Label","Button","Row","MetaTags","commonPageFieldSuccess","useDispatch","useSelector","useHistory","url","mode","pageId","LoadingSheet_GoBtn_API_Succcess","ToolkitProvider","BootstrapTable","mySearchProps","makeBtnCss","GetOpeningBalance","ReceiptGoButtonMaster","ReceiptGoButtonMaster_Success","DynamicColumnHook","selectAllCheck","_cfunc","customAlert","C_DatePicker","commonPageField","SapLedger_Go_Button_API","SapLedger_Go_Button_API_Success","SapLedger","props","dispatch","history","currentDate_ymd","date_ymd_func","userPageAccessState","setUserAccState","loadingDate","setLoadingDate","headerFilters","setHeaderFilters","userAccess","List","LoginPartydata","pageField","state","SapLedgerReducer","goBtnSapLedger","Login","RoleAccessUpdateData","CommonPageFieldReducer","divisionDropdown","data","PartyDetails","fromdate","todate","tableColumns","page_Id","SAP_LEDGER","location","hasShowloction","hasOwnProperty","editValue","hasShowModal","userAcc","locationPath","pathname","masterPath","find","inx","ActualPagePath","breadcrumbReturnFunc","partdata","localStorage","getItem","partyDivisiondata","JSON","parse","goButtonHandler","jsonBody","stringify","FromDate","ToDate","SAPCode","SAPPartyCode","fromdateOnchange","e","date","newObj","todateOnchange","metaTagLabel","marginBottom","width","toolkitProps","OpeingBal","ClosingBal","baseProps","searchProps"],"sources":["D:/Rohit/Git projects/Manthan/src/Reports/SapLedgerReport/SapLedger.js"],"sourcesContent":["\r\n// import React, { useEffect, useState } from \"react\";\r\n// import {\r\n//     Col,\r\n//     FormGroup,\r\n//     Label,\r\n//     Button\r\n// } from \"reactstrap\";\r\n// import { MetaTags } from \"react-meta-tags\";\r\n// import { commonPageFieldSuccess } from \"../../store/actions\";\r\n// import { useDispatch, useSelector } from \"react-redux\";\r\n\r\n// import { useHistory } from \"react-router-dom\";\r\n// import { url, mode, pageId } from \"../../routes/index\"\r\n// import { LoadingSheet_GoBtn_API_Succcess } from \"../../store/Sales/LoadingSheetRedux/action\";\r\n// import ToolkitProvider from \"react-bootstrap-table2-toolkit\";\r\n// import BootstrapTable from \"react-bootstrap-table-next\";\r\n// import { mySearchProps } from \"../../components/Common/SearchBox/MySearch\";\r\n// import { makeBtnCss } from \"../../components/Common/ListActionsButtons\";\r\n// import { GetOpeningBalance, ReceiptGoButtonMaster, ReceiptGoButtonMaster_Success } from \"../../store/Accounting/Receipt/action\";\r\n\r\n// import DynamicColumnHook, { selectAllCheck } from \"../../components/Common/TableCommonFunc\";\r\n// import * as _cfunc from \"../../components/Common/CommonFunction\";\r\n// import { customAlert } from \"../../CustomAlert/ConfirmDialog\";\r\n// import { C_DatePicker } from \"../../CustomValidateForm\";\r\n// import { commonPageField } from \"../../store/actions\";\r\n// import { SapLedger_Go_Button_API, SapLedger_Go_Button_API_Success } from \"../../store/Report/SapLedger Redux/action\";\r\n\r\n// const SapLedger = (props) => {\r\n\r\n//     const dispatch = useDispatch();\r\n//     const history = useHistory()\r\n//     const currentDate_ymd = _cfunc.date_ymd_func();\r\n\r\n//     const [userPageAccessState, setUserAccState] = useState('');\r\n//     const [loadingDate, setLoadingDate] = useState(currentDate_ymd);\r\n//     const [headerFilters, setHeaderFilters] = useState('');\r\n\r\n//     const {\r\n//         userAccess,\r\n//         List,\r\n//         LoginPartydata,\r\n//         pageField,\r\n//     } = useSelector((state) => ({\r\n//         List: state.SapLedgerReducer.goBtnSapLedger,\r\n//         userAccess: state.Login.RoleAccessUpdateData,\r\n//         pageField: state.CommonPageFieldReducer.pageField,\r\n//          LoginPartydata:state.Login.divisionDropdown\r\n//     }));\r\n//     const { data = [], PartyDetails = {} } = List\r\n//     const { fromdate = currentDate_ymd, todate = currentDate_ymd } = headerFilters;\r\n\r\n\r\n//     const [tableColumns] = DynamicColumnHook({ pageField })\r\n\r\n//     useEffect(() => {\r\n//         dispatch(SapLedger_Go_Button_API_Success([]))\r\n//         const page_Id = pageId.SAP_LEDGER\r\n//         dispatch(commonPageFieldSuccess(null));\r\n//         dispatch(commonPageField(page_Id))\r\n//     }, []);\r\n\r\n//     const location = { ...history.location }\r\n//     const hasShowloction = location.hasOwnProperty(mode.editValue)\r\n//     const hasShowModal = props.hasOwnProperty(mode.editValue)\r\n\r\n//     // userAccess useEffect\r\n//     useEffect(() => {\r\n//         let userAcc = null;\r\n//         let locationPath = location.pathname;\r\n//         if (hasShowModal) {\r\n//             locationPath = props.masterPath;\r\n//         };\r\n//         userAcc = userAccess.find((inx) => {\r\n//             return (`/${inx.ActualPagePath}` === locationPath)\r\n//         })\r\n//         if (userAcc) {\r\n//             setUserAccState(userAcc)\r\n//             _cfunc.breadcrumbReturnFunc({ dispatch, userAcc });\r\n//         };\r\n//     }, [userAccess])\r\n\r\n//     // const Sapcode = LoginPartydata.map((index) => ({\r\n//     //     Sapcode: index.SAPPartyCode,\r\n\r\n//     // }));\r\n//     debugger\r\n//   let partdata =  localStorage.getItem(\"roleId\")\r\n//   var partyDivisiondata  = JSON.parse(partdata);\r\n\r\n//     function goButtonHandler() {\r\n\r\n//         const jsonBody = JSON.stringify({\r\n//             FromDate: fromdate,\r\n//             ToDate: todate,\r\n//             SAPCode:partyDivisiondata.SAPPartyCode\r\n//         });\r\n//         dispatch(SapLedger_Go_Button_API(jsonBody));\r\n//     }\r\n\r\n//     function fromdateOnchange(e, date) {\r\n//         let newObj = { ...headerFilters }\r\n//         newObj.fromdate = date\r\n//         setHeaderFilters(newObj)\r\n//     }\r\n\r\n//     function todateOnchange(e, date) {\r\n//         let newObj = { ...headerFilters }\r\n//         newObj.todate = date\r\n//         setHeaderFilters(newObj)\r\n//     }\r\n\r\n\r\n\r\n//     // function MakeReceiptForAll() {\r\n//     //     const result = data.map((index) => {\r\n//     //         if (index.selectCheck === true) {\r\n//     //             return index.id\r\n//     //         }\r\n//     //     })\r\n\r\n//     //     const LoadingNumber = result.toString()\r\n\r\n//     //     const jsonBody = JSON.stringify({\r\n//     //         PartyID: _cfunc.loginPartyID(),\r\n//     //         CustomerID: \"\",\r\n//     //         InvoiceID: LoadingNumber\r\n//     //     });\r\n\r\n//     //     const body = { jsonBody }\r\n\r\n//     //     if (LoadingNumber === \",\") {\r\n//     //         customAlert({\r\n//     //             Type: 3,\r\n//     //             Message: \"Select At Least One Invoice\",\r\n//     //         })\r\n//     //     }\r\n//     //     else {\r\n//     //         dispatch(ReceiptGoButtonMaster(body))\r\n//     //         history.push(url.BULK_RECIPT);\r\n//     //     }\r\n//     // }\r\n\r\n//     if (!(userPageAccessState === '')) {\r\n//         return (\r\n//             <React.Fragment>\r\n//                 <MetaTags>{_cfunc.metaTagLabel(userPageAccessState)}</MetaTags>\r\n\r\n//                 <div className=\"page-content\" style={{ marginBottom: \"5cm\" }}>\r\n\r\n//                 <div className=\"px-2  c_card_filter text-black \" >\r\n//                     <div className=\"row\">\r\n//                         <div className=\" row\">\r\n//                             <Col sm=\"5\" className=\"\">\r\n//                                 <FormGroup className=\"mb- row mt-3 \" >\r\n//                                     <Label className=\"col-sm-5 p-2\"\r\n//                                         style={{ width: \"83px\" }}>From Date</Label>\r\n//                                     <Col sm=\"7\">\r\n//                                         <C_DatePicker\r\n//                                             name='fromdate'\r\n//                                             value={fromdate}\r\n//                                             onChange={fromdateOnchange}\r\n//                                         />\r\n//                                     </Col>\r\n//                                 </FormGroup>\r\n//                             </Col>\r\n//                             <Col sm=\"5\" className=\"\">\r\n//                                 <FormGroup className=\"mb- row mt-3 \" >\r\n//                                     <Label className=\"col-sm-5 p-2\"\r\n//                                         style={{ width: \"65px\" }}>To Date</Label>\r\n//                                     <Col sm=\"7\">\r\n//                                         <C_DatePicker\r\n//                                             nane='todate'\r\n//                                             value={todate}\r\n//                                             onChange={todateOnchange}\r\n//                                         />\r\n//                                     </Col>\r\n//                                 </FormGroup>\r\n//                             </Col>\r\n//                             <Col sm=\"2\" className=\"mt-3 \">\r\n//                                 <Button type=\"button\" color=\"btn btn-outline-success border-2 font-size-12 \"\r\n//                                     onClick={() => goButtonHandler()}\r\n//                                 >Go</Button>\r\n//                             </Col>\r\n//                         </div>\r\n\r\n//                     </div>\r\n//                 </div>\r\n//                 <ToolkitProvider\r\n//                             keyField=\"id\"\r\n//                             data={data}\r\n//                             columns={tableColumns}\r\n//                             search\r\n//                         >\r\n//                             {toolkitProps => (\r\n//                                 <React.Fragment>\r\n//                                     <div  className=\"table-responsive\" id=\"TableDiv\" >\r\n//                                         <BootstrapTable\r\n//                                             keyField={\"id\"}\r\n//                                             bordered={true}\r\n//                                             striped={false}\r\n//                                             // selectRow={selectAllCheck(rowSelected())}\r\n//                                             noDataIndication={<div className=\"text-danger text-center \">Record Not available</div>}\r\n//                                             classes={\"table align-middle table-nowrap table-hover\"}\r\n//                                             headerWrapperClasses={\"thead-light\"}\r\n\r\n//                                             {...toolkitProps.baseProps}\r\n\r\n//                                         />\r\n//                                         {mySearchProps(toolkitProps.searchProps)}\r\n//                                     </div>\r\n\r\n//                                 </React.Fragment>\r\n//                             )\r\n//                             }\r\n//                         </ToolkitProvider>\r\n\r\n\r\n\r\n\r\n\r\n\r\n//                     {/* <div id=\"id1\"></div>\r\n\r\n//                     <form noValidate>\r\n//                         <div className=\"px-2 c_card_filter header text-black mb-2\" >\r\n\r\n//                             <div className=\" row \">\r\n//                                 <Col sm=\"6\">\r\n//                                     <FormGroup className=\" row mt-2\" >\r\n//                                         <Label className=\"col-sm-1 p-2\"\r\n//                                             style={{ width: \"115px\" }}>Loading NO :</Label>\r\n//                                         <Col sm=\"7\">\r\n//                                             <Label className=\" mt-2\">{PartyDetails.LoadingSheetNo}</Label>\r\n//                                         </Col>\r\n//                                     </FormGroup>\r\n//                                 </Col >\r\n\r\n//                                 <Col sm=\"6\">\r\n//                                     <FormGroup className=\" row mt-2\" >\r\n//                                         <Label className=\"col-sm-1 p-2\"\r\n//                                             style={{ width: \"115px\", marginRight: \"0.4cm\" }}>Loading Date </Label>\r\n//                                         <Col sm=\"7\">\r\n//                                             <C_DatePicker\r\n//                                                 name='Date'\r\n//                                                 value={loadingDate}\r\n//                                                 onChange={DateOnchange}\r\n//                                             />\r\n//                                         </Col>\r\n//                                     </FormGroup>\r\n//                                 </Col >\r\n//                             </div>\r\n//                         </div>\r\n\r\n//                         <ToolkitProvider\r\n//                             keyField=\"id\"\r\n//                             data={InvoiceParent}\r\n//                             columns={tableColumns}\r\n//                             search\r\n//                         >\r\n//                             {toolkitProps => (\r\n//                                 <React.Fragment>\r\n//                                     <div className=\"table\">\r\n//                                         <BootstrapTable\r\n//                                             keyField={\"id\"}\r\n//                                             bordered={true}\r\n//                                             striped={false}\r\n//                                             selectRow={selectAllCheck(rowSelected())}\r\n//                                             noDataIndication={<div className=\"text-danger text-center \">Record Not available</div>}\r\n//                                             classes={\"table align-middle table-nowrap table-hover\"}\r\n//                                             headerWrapperClasses={\"thead-light\"}\r\n\r\n//                                             {...toolkitProps.baseProps}\r\n\r\n//                                         />\r\n//                                         {mySearchProps(toolkitProps.searchProps)}\r\n//                                     </div>\r\n\r\n//                                 </React.Fragment>\r\n//                             )\r\n//                             }\r\n//                         </ToolkitProvider>\r\n\r\n//                         {\r\n//                             InvoiceParent.length > 0 ?\r\n//                                 <FormGroup>\r\n//                                     <Col sm={2} className={\"row save1\"}>\r\n//                                         <button type=\"button\" style={{ width: \"120px\" }} onClick={MakeReceiptForAll} className=\"btn btn-primary  waves-effect waves-light\">Make Receipt</button>\r\n//                                     </Col>\r\n//                                 </FormGroup >\r\n//                                 : null\r\n//                         }\r\n\r\n//                     </form > */}\r\n//                 </div >\r\n//             </React.Fragment >\r\n//         );\r\n//     }\r\n//     else {\r\n//         return (\r\n//             <React.Fragment></React.Fragment>\r\n//         )\r\n//     }\r\n// };\r\n\r\n// export default SapLedger;\r\n\r\n\r\n\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport {\r\n    Col,\r\n    FormGroup,\r\n    Label,\r\n    Button,\r\n    Row\r\n} from \"reactstrap\";\r\nimport { MetaTags } from \"react-meta-tags\";\r\nimport { commonPageFieldSuccess } from \"../../store/actions\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { url, mode, pageId } from \"../../routes/index\"\r\nimport { LoadingSheet_GoBtn_API_Succcess } from \"../../store/Sales/LoadingSheetRedux/action\";\r\nimport ToolkitProvider from \"react-bootstrap-table2-toolkit\";\r\nimport BootstrapTable from \"react-bootstrap-table-next\";\r\nimport { mySearchProps } from \"../../components/Common/SearchBox/MySearch\";\r\nimport { makeBtnCss } from \"../../components/Common/ListActionsButtons\";\r\nimport { GetOpeningBalance, ReceiptGoButtonMaster, ReceiptGoButtonMaster_Success } from \"../../store/Accounting/Receipt/action\";\r\n\r\nimport DynamicColumnHook, { selectAllCheck } from \"../../components/Common/TableCommonFunc\";\r\nimport * as _cfunc from \"../../components/Common/CommonFunction\";\r\nimport { customAlert } from \"../../CustomAlert/ConfirmDialog\";\r\nimport { C_DatePicker } from \"../../CustomValidateForm\";\r\nimport { commonPageField } from \"../../store/actions\";\r\nimport { SapLedger_Go_Button_API, SapLedger_Go_Button_API_Success } from \"../../store/Report/SapLedger Redux/action\";\r\n\r\nconst SapLedger = (props) => {\r\n\r\n    const dispatch = useDispatch();\r\n    const history = useHistory()\r\n    const currentDate_ymd = _cfunc.date_ymd_func();\r\n\r\n    const [userPageAccessState, setUserAccState] = useState('');\r\n    const [loadingDate, setLoadingDate] = useState(currentDate_ymd);\r\n    const [headerFilters, setHeaderFilters] = useState('');\r\n\r\n    const {\r\n        userAccess,\r\n        List,\r\n        LoginPartydata,\r\n        pageField,\r\n    } = useSelector((state) => ({\r\n        List: state.SapLedgerReducer.goBtnSapLedger,\r\n        userAccess: state.Login.RoleAccessUpdateData,\r\n        pageField: state.CommonPageFieldReducer.pageField,\r\n        LoginPartydata: state.Login.divisionDropdown\r\n    }));\r\n\r\n    debugger\r\n    const { data = [], PartyDetails = {} } = List\r\n    const { fromdate = currentDate_ymd, todate = currentDate_ymd } = headerFilters;\r\n\r\n\r\n    const [tableColumns] = DynamicColumnHook({ pageField })\r\n\r\n    useEffect(() => {\r\n        dispatch(SapLedger_Go_Button_API_Success([]))\r\n        const page_Id = pageId.SAP_LEDGER\r\n        dispatch(commonPageFieldSuccess(null));\r\n        dispatch(commonPageField(page_Id))\r\n    }, []);\r\n\r\n    const location = { ...history.location }\r\n    const hasShowloction = location.hasOwnProperty(mode.editValue)\r\n    const hasShowModal = props.hasOwnProperty(mode.editValue)\r\n\r\n    // userAccess useEffect\r\n    useEffect(() => {\r\n        let userAcc = null;\r\n        let locationPath = location.pathname;\r\n        if (hasShowModal) {\r\n            locationPath = props.masterPath;\r\n        };\r\n        userAcc = userAccess.find((inx) => {\r\n            return (`/${inx.ActualPagePath}` === locationPath)\r\n        })\r\n        if (userAcc) {\r\n            setUserAccState(userAcc)\r\n            _cfunc.breadcrumbReturnFunc({ dispatch, userAcc });\r\n        };\r\n    }, [userAccess])\r\n\r\n\r\n    let partdata = localStorage.getItem(\"roleId\")\r\n    var partyDivisiondata = JSON.parse(partdata);\r\n\r\n    function goButtonHandler() {\r\n\r\n        const jsonBody = JSON.stringify({\r\n            FromDate: fromdate,\r\n            ToDate: todate,\r\n            SAPCode: partyDivisiondata.SAPPartyCode\r\n        });\r\n        dispatch(SapLedger_Go_Button_API(jsonBody));\r\n    }\r\n\r\n    function fromdateOnchange(e, date) {\r\n        let newObj = { ...headerFilters }\r\n        newObj.fromdate = date\r\n        setHeaderFilters(newObj)\r\n    }\r\n\r\n    function todateOnchange(e, date) {\r\n        let newObj = { ...headerFilters }\r\n        newObj.todate = date\r\n        setHeaderFilters(newObj)\r\n    }\r\n\r\n    if (!(userPageAccessState === '')) {\r\n        return (\r\n            <React.Fragment>\r\n                <MetaTags>{_cfunc.metaTagLabel(userPageAccessState)}</MetaTags>\r\n\r\n                <div className=\"page-content\" style={{ marginBottom: \"5cm\" }}>\r\n\r\n                    <div className=\"px-2  c_card_filter text-black \" >\r\n                        <div className=\"row\">\r\n                            <div className=\" row\">\r\n                                <Col sm=\"5\" className=\"\">\r\n                                    <FormGroup className=\"mb- row mt-3 \" >\r\n                                        <Label className=\"col-sm-5 p-2\"\r\n                                            style={{ width: \"83px\" }}>From Date</Label>\r\n                                        <Col sm=\"7\">\r\n                                            <C_DatePicker\r\n                                                name='fromdate'\r\n                                                value={fromdate}\r\n                                                onChange={fromdateOnchange}\r\n                                            />\r\n                                        </Col>\r\n                                    </FormGroup>\r\n                                </Col>\r\n                                <Col sm=\"5\" className=\"\">\r\n                                    <FormGroup className=\"mb- row mt-3 \" >\r\n                                        <Label className=\"col-sm-5 p-2\"\r\n                                            style={{ width: \"65px\" }}>To Date</Label>\r\n                                        <Col sm=\"7\">\r\n                                            <C_DatePicker\r\n                                                nane='todate'\r\n                                                value={todate}\r\n                                                onChange={todateOnchange}\r\n                                            />\r\n                                        </Col>\r\n                                    </FormGroup>\r\n                                </Col>\r\n                                <Col sm=\"2\" className=\"mt-3 \">\r\n                                    <Button type=\"button\" color=\"btn btn-outline-success border-2 font-size-12 \"\r\n                                        onClick={() => goButtonHandler()}\r\n                                    >Go</Button>\r\n                                </Col>\r\n                            </div>\r\n\r\n                        </div>\r\n                    </div>\r\n                    <ToolkitProvider\r\n                        keyField=\"id\"\r\n                        data={data}\r\n                        columns={tableColumns}\r\n                        search\r\n                    >\r\n                        {toolkitProps => (\r\n                            <React.Fragment>\r\n                                <Row>\r\n                                    <Col sm={9}>\r\n                                        <Label className=\"col-sm-6\"\r\n                                            style={{ width: \"400px\" }}>Opening Balance :{List.OpeingBal}\r\n                                        </Label>\r\n                                    </Col>\r\n                                    <Col sm={3}>\r\n\r\n                                        <Label className=\"col-sm-6\"\r\n                                            style={{ width: \"200px\" }}>Closing Balance :{List.ClosingBal}\r\n                                        </Label>\r\n                                    </Col>\r\n\r\n                                </Row>\r\n\r\n                                <div className=\"table-responsive\" id=\"TableDiv\" >\r\n                                    <BootstrapTable\r\n                                        keyField={\"id\"}\r\n                                        bordered={true}\r\n                                        striped={false}\r\n                                        // selectRow={selectAllCheck(rowSelected())}\r\n                                        noDataIndication={<div className=\"text-danger text-center \">Record Not available</div>}\r\n                                        classes={\"table align-middle table-nowrap table-hover\"}\r\n                                        headerWrapperClasses={\"thead-light\"}\r\n\r\n                                        {...toolkitProps.baseProps}\r\n\r\n                                    />\r\n                                    {mySearchProps(toolkitProps.searchProps)}\r\n                                </div>\r\n                                {/* <div >Closing Balance :<Label className=\"col-sm-5\"\r\n                                    style={{ width: \"65px\" }}>{List.ClosingBal}</Label></div> */}\r\n\r\n                            </React.Fragment>\r\n                        )\r\n                        }\r\n                    </ToolkitProvider>\r\n\r\n\r\n                </div >\r\n            </React.Fragment >\r\n        );\r\n    }\r\n    else {\r\n        return (\r\n            <React.Fragment></React.Fragment>\r\n        )\r\n    }\r\n};\r\n\r\nexport default SapLedger;\r\n\r\n\r\n\r\n\r\n"],"mappings":";;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAOA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AA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"},"metadata":{},"sourceType":"module"}