{"ast":null,"code":"import { call, put, takeEvery } from \"redux-saga/effects\";\nimport { GetCustomerSuccess, getOrderTypeSuccess, getSupplierAddressSuccess, getSupplierSuccess, GetVenderSuccess } from \"./actions\";\nimport { get_OrderType_Api, Party_Master_Edit_API, VendorSupplierCustomer } from \"../../../helpers/backend_helper\";\nimport { GET_CUSTOMER, GET_ORDER_TYPE, GET_SUPPLIER, GET_SUPPLIER_ADDRESS, GET_VENDER } from \"./actionType\";\nimport { AlertState } from \"../../Utilites/CustomAlertRedux/actions\";\nimport { userParty } from \"../../../components/Common/ComponentRelatedCommonFile/listPageCommonButtons\";\n\nfunction* supplierAddressGenFunc() {\n  try {\n    const response = yield call(Party_Master_Edit_API, userParty());\n    let first = [],\n        secd = [],\n        newArr = [];\n    const arr = response.Data.PartyAddress;\n    arr.forEach((i, k) => {\n      if (i.IsDefault === true) {\n        first.push({\n          value: i.id,\n          label: i.Address\n        });\n      } else {\n        secd.push({\n          value: i.id,\n          label: i.Address\n        });\n      }\n    });\n    newArr = [...first, ...secd];\n    yield put(getSupplierAddressSuccess(newArr));\n  } catch (error) {\n    yield put(AlertState({\n      Type: 4,\n      Status: true,\n      Message: \"500 Error for Party API \"\n    }));\n  }\n} // OrderType Dropdown\n\n\nfunction* OrderType_GenFunc() {\n  try {\n    const response = yield call(get_OrderType_Api);\n    yield put(getOrderTypeSuccess(response.Data));\n  } catch (error) {\n    yield put(AlertState({\n      Type: 4,\n      Status: true,\n      Message: \"500 Error for Order Type API \"\n    }));\n  }\n}\n\n_c = OrderType_GenFunc;\n\nfunction* getSupplierGenFunc() {\n  debugger;\n\n  try {\n    const response = yield call(VendorSupplierCustomer, {\n      \"Type\": 2,\n      \"PartyID\": userParty()\n    });\n    yield put(getSupplierSuccess(response.Data));\n  } catch (error) {\n    yield put(AlertState({\n      Type: 4,\n      Status: true,\n      Message: \"500 Error Message for Supplier \"\n    }));\n  }\n}\n\nfunction* getVendorGenFunc() {\n  try {\n    const response = yield call(VendorSupplierCustomer, {\n      \"Type\": 1,\n      \"PartyID\": userParty()\n    });\n    yield put(GetVenderSuccess(response.Data));\n  } catch (error) {\n    yield put(AlertState({\n      Type: 4,\n      Status: true,\n      Message: \"500 Error Message for Vendor \"\n    }));\n  }\n}\n\nfunction* getCustomerGenFunc() {\n  debugger;\n\n  try {\n    const response = yield call(VendorSupplierCustomer, {\n      \"Type\": 3,\n      \"PartyID\": userParty()\n    });\n    yield put(GetCustomerSuccess(response.Data));\n  } catch (error) {\n    yield put(AlertState({\n      Type: 4,\n      Status: true,\n      Message: \"500 Error Message for Customer \"\n    }));\n  }\n}\n\nfunction* SupplierSaga() {\n  yield takeEvery(GET_SUPPLIER, getSupplierGenFunc);\n  yield takeEvery(GET_SUPPLIER_ADDRESS, supplierAddressGenFunc);\n  yield takeEvery(GET_ORDER_TYPE, OrderType_GenFunc);\n  yield takeEvery(GET_VENDER, getVendorGenFunc);\n  yield takeEvery(GET_CUSTOMER, getCustomerGenFunc);\n}\n\n_c2 = SupplierSaga;\nexport default SupplierSaga;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"OrderType_GenFunc\");\n$RefreshReg$(_c2, \"SupplierSaga\");","map":{"version":3,"names":["call","put","takeEvery","GetCustomerSuccess","getOrderTypeSuccess","getSupplierAddressSuccess","getSupplierSuccess","GetVenderSuccess","get_OrderType_Api","Party_Master_Edit_API","VendorSupplierCustomer","GET_CUSTOMER","GET_ORDER_TYPE","GET_SUPPLIER","GET_SUPPLIER_ADDRESS","GET_VENDER","AlertState","userParty","supplierAddressGenFunc","response","first","secd","newArr","arr","Data","PartyAddress","forEach","i","k","IsDefault","push","value","id","label","Address","error","Type","Status","Message","OrderType_GenFunc","getSupplierGenFunc","getVendorGenFunc","getCustomerGenFunc","SupplierSaga"],"sources":["D:/Rohit/Git projects/Manthan/src/store/CommonAPI/SupplierRedux/saga.js"],"sourcesContent":["import { call, put, takeEvery } from \"redux-saga/effects\";\r\nimport {\r\n  GetCustomerSuccess,\r\n  getOrderTypeSuccess,\r\n  getSupplierAddressSuccess,\r\n  getSupplierSuccess,\r\n  GetVenderSuccess,\r\n} from \"./actions\";\r\nimport {\r\n  get_OrderType_Api,\r\n  Party_Master_Edit_API,\r\n  VendorSupplierCustomer,\r\n} from \"../../../helpers/backend_helper\";\r\n\r\nimport {\r\n  GET_CUSTOMER,\r\n  GET_ORDER_TYPE,\r\n  GET_SUPPLIER,\r\n  GET_SUPPLIER_ADDRESS,\r\n  GET_VENDER,\r\n} from \"./actionType\";\r\n\r\nimport { AlertState } from \"../../Utilites/CustomAlertRedux/actions\";\r\nimport { userParty } from \"../../../components/Common/ComponentRelatedCommonFile/listPageCommonButtons\";\r\n\r\n\r\nfunction* supplierAddressGenFunc() {\r\n\r\n  try {\r\n    const response = yield call(Party_Master_Edit_API, userParty());\r\n    let first = [], secd = [], newArr = []\r\n    const arr = response.Data.PartyAddress;\r\n    arr.forEach((i, k) => {\r\n      if (i.IsDefault === true) {\r\n\r\n        first.push({\r\n          value: i.id,\r\n          label: i.Address,\r\n        })\r\n      } else {\r\n        secd.push({\r\n          value: i.id,\r\n          label: i.Address,\r\n        })\r\n      }\r\n    })\r\n    newArr = [...first, ...secd]\r\n\r\n    yield put(getSupplierAddressSuccess(newArr));\r\n  } catch (error) {\r\n    yield put(AlertState({\r\n      Type: 4,\r\n      Status: true, Message: \"500 Error for Party API \",\r\n    }));\r\n  }\r\n}\r\n\r\n// OrderType Dropdown\r\nfunction* OrderType_GenFunc() {\r\n  try {\r\n    const response = yield call(get_OrderType_Api);\r\n    yield put(getOrderTypeSuccess(response.Data));\r\n  } catch (error) {\r\n    yield put(AlertState({\r\n      Type: 4,\r\n      Status: true, Message: \"500 Error for Order Type API \",\r\n    }));\r\n  }\r\n}\r\n\r\nfunction* getSupplierGenFunc() {\r\n  debugger\r\n  try {\r\n    const response = yield call(VendorSupplierCustomer, { \"Type\": 2, \"PartyID\": userParty() });\r\n    yield put(getSupplierSuccess(response.Data));\r\n  } catch (error) {\r\n    yield put(AlertState({\r\n      Type: 4,\r\n      Status: true, Message: \"500 Error Message for Supplier \",\r\n    }));\r\n  }\r\n}\r\n\r\nfunction* getVendorGenFunc() {\r\n\r\n  try {\r\n    const response = yield call(VendorSupplierCustomer, { \"Type\": 1, \"PartyID\": userParty() });\r\n    yield put(GetVenderSuccess(response.Data));\r\n  } catch (error) {\r\n    yield put(AlertState({\r\n      Type: 4,\r\n      Status: true, Message: \"500 Error Message for Vendor \",\r\n    }));\r\n  }\r\n}\r\n\r\nfunction* getCustomerGenFunc() {\r\n  debugger\r\n  try {\r\n    const response = yield call(VendorSupplierCustomer, { \"Type\": 3, \"PartyID\": userParty() });\r\n    yield put(GetCustomerSuccess(response.Data));\r\n  } catch (error) {\r\n    yield put(AlertState({\r\n      Type: 4,\r\n      Status: true, Message: \"500 Error Message for Customer \",\r\n    }));\r\n  }\r\n}\r\nfunction* SupplierSaga() {\r\n  yield takeEvery(GET_SUPPLIER, getSupplierGenFunc);\r\n  yield takeEvery(GET_SUPPLIER_ADDRESS, supplierAddressGenFunc);\r\n  yield takeEvery(GET_ORDER_TYPE, OrderType_GenFunc);\r\n  yield takeEvery(GET_VENDER, getVendorGenFunc);\r\n  yield takeEvery(GET_CUSTOMER, getCustomerGenFunc);\r\n}\r\n\r\nexport default SupplierSaga;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}