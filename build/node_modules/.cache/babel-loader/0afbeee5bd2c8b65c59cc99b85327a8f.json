{"ast":null,"code":"import{date_dmy_func}from\"../../components/Common/CommonFunction\";import{numberWithCommas}from\"../Report_common_function\";export var columns=[\"CR.Date \",\"CR No\",\"Customer Name\",\"Item Name\",\"MRP \",\"QTY In Pcs\",\"GST %\",\"Rate Without GSTf\",\"CGST Amount\",\"SGST Amount\",\"Amount\"];export var Footercolumn=[\"\"];export var Return=[\"Return\"];export var BilledBy=[\"Billed by\"];export var BilledTo=[\"Billed by\"];export var DetailsOfTransport=[\"Billed by\"];export var Bankcolumn=[\"\",\"\",\"\"];export var Rows=function Rows(data){var _data$ClaimSummaryIte=data.ClaimSummaryItemDetails,ClaimSummaryItemDetails=_data$ClaimSummaryIte===void 0?[]:_data$ClaimSummaryIte;ClaimSummaryItemDetails.sort(function(firstItem,secondItem){return firstItem.GSTPercentage-secondItem.GSTPercentage;});var returnArr=[];var Gst=0;var totalBasicAmount=0;var totalCGst=0;var totalSGst=0;var totalAmount=0;var totalQuantity=0;var SrNO=1;var TotalGst=0;var GSTPercentage=0;// const groupedItems = ReturnItems.reduce((accumulator, currentItem) => {\n//     const { HSNCode, ItemName, MRP, Rate, Discount, CGST, SGST, Amount, DiscountAmount, BasicAmount, Quantity, UnitName, MRPValue, CGSTPercentage, SGSTPercentage, GSTPercentage, BatchCode, BatchDate, DiscountType, PrimaryUnitName } = currentItem;\n//     const key = ItemName + '_' + MRP;\n//     if (accumulator[key]) {\n//         accumulator[key].DiscountAmount += Number(DiscountAmount);\n//         accumulator[key].Quantity += Number(Quantity);\n//         accumulator[key].BasicAmount += Number(BasicAmount);\n//         accumulator[key].CGST += Number(CGST);\n//         accumulator[key].SGST += Number(SGST);\n//         accumulator[key].Amount += Number(Amount);\n//         accumulator[key].BatchCode += BatchCode;\n//         accumulator[key].BatchDate += BatchDate;\n//         accumulator[key].quantityString += ` ,  ${BatchCode} ${BatchDate} `;\n//     } else {\n//         accumulator[key] = {\n//             ItemName, HSNCode,\n//             MRPValue, DiscountType, Rate, Discount, CGST: Number(CGST), SGST: Number(SGST), Amount: Number(Amount), DiscountAmount: Number(DiscountAmount), BasicAmount: Number(BasicAmount), Quantity: Number(Quantity), UnitName, CGSTPercentage, SGSTPercentage, GSTPercentage, BatchDate, BatchCode: BatchCode, BatchDate: BatchDate, quantityString: `  ${BatchCode}  ${BatchDate}`, PrimaryUnitName\n//         };\n//     }\n//     return accumulator;\n// }, {});\nClaimSummaryItemDetails.forEach(function(element,key){var tableitemRow=[\"\".concat(date_dmy_func(element.ReturnDate)),\"\".concat(element.FullReturnNumber),\"\".concat(element.CustomerName),\"\".concat(element.ItemName),\"\".concat(numberWithCommas(Number(element.MRP).toFixed(2))),\"\".concat(numberWithCommas(Number(element.Quantity).toFixed(2))),\"\".concat(numberWithCommas(Number(element.GST).toFixed(2)),\"%\"),\"\".concat(numberWithCommas(Number(element.Rate).toFixed(2))),\"\".concat(numberWithCommas(Number(element.CGST).toFixed(2))),\"\".concat(numberWithCommas(Number(element.SGST).toFixed(2))),\"\".concat(numberWithCommas(Number(element.Amount).toFixed(2)))];function totalLots(){totalQuantity=Number(totalQuantity)+Number(element.Quantity);totalCGst=Number(totalCGst)+Number(element.CGST);totalSGst=Number(totalSGst)+Number(element.SGST);totalAmount=Number(totalAmount)+Number(element.Amount);TotalGst=totalCGst+totalSGst;GSTPercentage=Number(element.GST);var cgst=data[\"tableTot\"].TotalCGst;return{TotalCGst:Number(totalCGst)+Number(cgst)};};function totalrow(){return[\"Total\",\"GST \".concat(Number(GSTPercentage),\"% Total \"),\"\",\"\",\"\",\"\",\"\",\"\",\"\".concat(numberWithCommas(Number(totalCGst).toFixed(2))),\"\".concat(numberWithCommas(Number(totalSGst).toFixed(2))),\"\".concat(numberWithCommas(Number(totalAmount).toFixed(2)))];};var BatchRow=[\"Batch:  \".concat(element.quantityString,\" \"),\"Batch\",\" \",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"];if(Gst===0){Gst=element.GST;};var aa={TotalCGst:0,totalSGst:0};if(data[\"tableTot\"]===undefined){data[\"tableTot\"]=aa;}if(Gst===element.GST){data[\"tableTot\"]=totalLots();returnArr.push(tableitemRow);}else{returnArr.push(totalrow());returnArr.push(tableitemRow);totalBasicAmount=0;totalCGst=0;totalSGst=0;totalAmount=0;totalQuantity=0;data[\"tableTot\"]=totalLots();Gst=element.GST;}if(key===ClaimSummaryItemDetails.length-1){returnArr.push(totalrow());}});return returnArr;};export var BilledByRow=function BilledByRow(data){var BilledByArray=[[\"\".concat(data.PartyDetails.PartyName)],[\"\".concat(data.PartyDetails.Address)],[\"MobileNo:\".concat(data.PartyDetails.MobileNo)]];return BilledByArray;};export var BilledToRow=function BilledToRow(data){var BilledToArray=[[\"Expiry From Retailer Claim summary\"],[\"\".concat(data.PartyDetails.GSTIN)],[\"\".concat(data.PartyDetails.FSSAINo)]];return BilledToArray;};export var DetailsOfTransportRow=function DetailsOfTransportRow(data){var DetailsOfTransportArray=[[\"Claim No: {}\"],[\"Period :\"]];return DetailsOfTransportArray;};export var ReturnReason=function ReturnReason(data){var ReturnReasonArray=[[\"Return Reason :\".concat(data.ReturnReason===null?\"\":data.ReturnReason)]];return ReturnReasonArray;};","map":{"version":3,"names":["date_dmy_func","numberWithCommas","columns","Footercolumn","Return","BilledBy","BilledTo","DetailsOfTransport","Bankcolumn","Rows","data","ClaimSummaryItemDetails","sort","firstItem","secondItem","GSTPercentage","returnArr","Gst","totalBasicAmount","totalCGst","totalSGst","totalAmount","totalQuantity","SrNO","TotalGst","forEach","element","key","tableitemRow","ReturnDate","FullReturnNumber","CustomerName","ItemName","Number","MRP","toFixed","Quantity","GST","Rate","CGST","SGST","Amount","totalLots","cgst","TotalCGst","totalrow","BatchRow","quantityString","aa","undefined","push","length","BilledByRow","BilledByArray","PartyDetails","PartyName","Address","MobileNo","BilledToRow","BilledToArray","GSTIN","FSSAINo","DetailsOfTransportRow","DetailsOfTransportArray","ReturnReason","ReturnReasonArray"],"sources":["D:/Rohit/Git projects/Manthan/src/Reports/CustomerWiseReturnReport/TableData.js"],"sourcesContent":["import { date_dmy_func } from \"../../components/Common/CommonFunction\";\r\nimport { numberWithCommas } from \"../Report_common_function\";\r\n\r\n\r\nexport const columns = [\r\n    \"CR.Date \",\r\n    \"CR No\",\r\n    \"Customer Name\",\r\n    \"Item Name\",\r\n    \"MRP \",\r\n    \"QTY In Pcs\",\r\n    \"GST %\",\r\n    \"Rate Without GSTf\",\r\n    \"CGST Amount\",\r\n    \"SGST Amount\",\r\n    \"Amount\",\r\n];\r\n\r\n\r\n\r\n\r\nexport const Footercolumn = [\r\n    \"\",\r\n]\r\nexport const Return = [\r\n    \"Return\",\r\n]\r\nexport const BilledBy = [\r\n    \"Billed by\",\r\n]\r\nexport const BilledTo = [\r\n    \"Billed by\",\r\n]\r\nexport const DetailsOfTransport = [\r\n    \"Billed by\",\r\n]\r\n\r\nexport const Bankcolumn = [\r\n    \"\",\r\n    \"\",\r\n    \"\",\r\n]\r\n\r\nexport const Rows = (data) => {\r\n\r\n    const { ClaimSummaryItemDetails = [] } = data\r\n    ClaimSummaryItemDetails.sort((firstItem, secondItem) => firstItem.GSTPercentage - secondItem.GSTPercentage);\r\n    const returnArr = [];\r\n    let Gst = 0\r\n    let totalBasicAmount = 0\r\n    let totalCGst = 0\r\n    let totalSGst = 0\r\n    let totalAmount = 0\r\n    let totalQuantity = 0\r\n    let SrNO = 1\r\n    let TotalGst = 0\r\n    let GSTPercentage = 0\r\n\r\n    // const groupedItems = ReturnItems.reduce((accumulator, currentItem) => {\r\n\r\n    //     const { HSNCode, ItemName, MRP, Rate, Discount, CGST, SGST, Amount, DiscountAmount, BasicAmount, Quantity, UnitName, MRPValue, CGSTPercentage, SGSTPercentage, GSTPercentage, BatchCode, BatchDate, DiscountType, PrimaryUnitName } = currentItem;\r\n    //     const key = ItemName + '_' + MRP;\r\n    //     if (accumulator[key]) {\r\n    //         accumulator[key].DiscountAmount += Number(DiscountAmount);\r\n    //         accumulator[key].Quantity += Number(Quantity);\r\n    //         accumulator[key].BasicAmount += Number(BasicAmount);\r\n    //         accumulator[key].CGST += Number(CGST);\r\n    //         accumulator[key].SGST += Number(SGST);\r\n    //         accumulator[key].Amount += Number(Amount);\r\n    //         accumulator[key].BatchCode += BatchCode;\r\n    //         accumulator[key].BatchDate += BatchDate;\r\n    //         accumulator[key].quantityString += ` ,  ${BatchCode} ${BatchDate} `;\r\n    //     } else {\r\n    //         accumulator[key] = {\r\n    //             ItemName, HSNCode,\r\n    //             MRPValue, DiscountType, Rate, Discount, CGST: Number(CGST), SGST: Number(SGST), Amount: Number(Amount), DiscountAmount: Number(DiscountAmount), BasicAmount: Number(BasicAmount), Quantity: Number(Quantity), UnitName, CGSTPercentage, SGSTPercentage, GSTPercentage, BatchDate, BatchCode: BatchCode, BatchDate: BatchDate, quantityString: `  ${BatchCode}  ${BatchDate}`, PrimaryUnitName\r\n    //         };\r\n    //     }\r\n    //     return accumulator;\r\n    // }, {});\r\n\r\n    ClaimSummaryItemDetails.forEach((element, key) => {\r\n\r\n        const tableitemRow = [\r\n            `${date_dmy_func(element.ReturnDate)}`,\r\n            `${(element.FullReturnNumber)}`,\r\n            `${(element.CustomerName)}`,\r\n            `${(element.ItemName)}`,\r\n            `${numberWithCommas(Number(element.MRP).toFixed(2))}`,\r\n            `${numberWithCommas(Number(element.Quantity).toFixed(2))}`,\r\n            `${numberWithCommas(Number(element.GST).toFixed(2))}%`,\r\n            `${numberWithCommas(Number(element.Rate).toFixed(2))}`,\r\n            `${numberWithCommas(Number(element.CGST).toFixed(2))}`,\r\n            `${numberWithCommas(Number(element.SGST).toFixed(2))}`,\r\n            `${numberWithCommas(Number(element.Amount).toFixed(2))}`,\r\n        ];\r\n\r\n        function totalLots() {\r\n            totalQuantity = Number(totalQuantity) + Number(element.Quantity)\r\n            totalCGst = Number(totalCGst) + Number(element.CGST)\r\n            totalSGst = Number(totalSGst) + Number(element.SGST)\r\n            totalAmount = Number(totalAmount) + Number(element.Amount)\r\n            TotalGst = totalCGst + totalSGst;\r\n            GSTPercentage = Number(element.GST)\r\n            let cgst = data[\"tableTot\"].TotalCGst\r\n            return ({ TotalCGst: Number(totalCGst) + Number(cgst) })\r\n\r\n        };\r\n\r\n        function totalrow() {\r\n\r\n            return [\r\n                `Total`,\r\n                `GST ${(Number(GSTPercentage))}% Total `,\r\n                ``,\r\n                ``,\r\n                ``,\r\n                ``,\r\n                ``,\r\n                ``,\r\n                `${numberWithCommas(Number(totalCGst).toFixed(2))}`,\r\n                `${numberWithCommas(Number(totalSGst).toFixed(2))}`,\r\n                `${numberWithCommas(Number(totalAmount).toFixed(2))}`,\r\n\r\n            ];\r\n        };\r\n        const BatchRow = [\r\n            `Batch:  ${element.quantityString} `,\r\n            `Batch`,\r\n            \" \",\r\n            ``,\r\n            \"\",\r\n            \"\",\r\n            \"\",\r\n            \"\",\r\n            ``,\r\n            \"\",\r\n            ``,\r\n            \"\",\r\n            ``,\r\n        ]\r\n\r\n        if (Gst === 0) { Gst = element.GST };\r\n        let aa = { TotalCGst: 0, totalSGst: 0 }\r\n        if (data[\"tableTot\"] === undefined) { data[\"tableTot\"] = aa }\r\n\r\n        if ((Gst === element.GST)) {\r\n            data[\"tableTot\"] = totalLots()\r\n            returnArr.push(tableitemRow)\r\n\r\n        }\r\n\r\n\r\n        else {\r\n            returnArr.push(totalrow());\r\n            returnArr.push(tableitemRow);\r\n            totalBasicAmount = 0\r\n            totalCGst = 0\r\n            totalSGst = 0\r\n            totalAmount = 0\r\n            totalQuantity = 0\r\n\r\n            data[\"tableTot\"] = totalLots()\r\n            Gst = element.GST;\r\n        }\r\n        if (key === ClaimSummaryItemDetails.length - 1) {\r\n            returnArr.push(totalrow());\r\n        }\r\n    })\r\n    return returnArr;\r\n}\r\n\r\n\r\nexport const BilledByRow = (data) => {\r\n\r\n    var BilledByArray = [\r\n        [`${data.PartyDetails.PartyName}`],\r\n        [`${data.PartyDetails.Address}`],\r\n        [`MobileNo:${data.PartyDetails.MobileNo}`],\r\n    ]\r\n    return BilledByArray;\r\n}\r\nexport const BilledToRow = (data) => {\r\n\r\n    var BilledToArray = [\r\n\r\n        [`Expiry From Retailer Claim summary`],\r\n        [`${data.PartyDetails.GSTIN}`],\r\n        [`${data.PartyDetails.FSSAINo}`],\r\n\r\n    ]\r\n\r\n    return BilledToArray;\r\n}\r\nexport const DetailsOfTransportRow = (data) => {\r\n\r\n    var DetailsOfTransportArray = [\r\n\r\n        [`Claim No: {}`],\r\n        [`Period :`],\r\n\r\n    ]\r\n\r\n    return DetailsOfTransportArray;\r\n}\r\n\r\n\r\nexport const ReturnReason = (data) => {\r\n\r\n    var ReturnReasonArray = [\r\n        [`Return Reason :${data.ReturnReason === null ? \"\" : data.ReturnReason}`],\r\n    ]\r\n\r\n    return ReturnReasonArray;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}