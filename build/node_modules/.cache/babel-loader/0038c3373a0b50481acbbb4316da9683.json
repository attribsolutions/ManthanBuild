{"ast":null,"code":"var _jsxFileName = \"D:\\\\Rohit\\\\Git projects\\\\Manthan\\\\src\\\\pages\\\\Accounting\\\\Receipt\\\\BulkReceipt.js\",\n    _s = $RefreshSig$();\n\n// import React, { useEffect, useState } from \"react\";\n// import {\n//     Col,\n//     FormGroup,\n//     Input,\n//     Label,\n//     Row,\n// } from \"reactstrap\";\n// import { MetaTags } from \"react-meta-tags\";\n// import Flatpickr from \"react-flatpickr\";\n// import {\n//     BreadcrumbShowCountlabel,\n//     commonPageFieldSuccess,\n// } from \"../../../store/actions\";\n// import { useDispatch, useSelector } from \"react-redux\";\n// import { commonPageField } from \"../../../store/actions\";\n// import { useHistory } from \"react-router-dom\";\n// import {\n//     initialFiledFunc,\n// } from \"../../../components/Common/validationFunction\";\n// import {\n//     SaveButton,\n// } from \"../../../components/Common/CommonButton\";\n// import {\n//     breadcrumbReturnFunc,\n//     currentDate,\n//     groupBy,\n// } from \"../../../components/Common/CommonFunction\";\n// import * as mode from \"../../../routes/PageMode\";\n// import * as pageId from \"../../../routes/allPageID\";\n// import * as url from \"../../../routes/route_url\";\n// import { CustomAlert } from \"../../../CustomAlert/ConfirmDialog\";\n// import \"./bulk.scss\";\n// import demoData from \"./bulkRecipt\";\n// import CustomTable2 from \"../../../CustomTable2/Table\";\n// import { bulkSearch } from \"../../Sale/Invoice/invoiceCaculations\";\n// const BulkRecipt = (props) => {\n//     const dispatch = useDispatch();\n//     const history = useHistory();\n//     const subPageMode = history.location.pathname;\n//     const saveBtnid = `saveBtn${subPageMode}`;\n//     const location = { ...history.location };\n//     const hasShowloction = location.hasOwnProperty(\"editValue\");\n//     const hasShowModal = props.hasOwnProperty(\"editValue\");\n//     const fileds = {\n//         // id: \"\",\n//         InvoiceDate: currentDate,\n//         Customer: \"\",\n//     };\n//     const [state, setState] = useState(() => initialFiledFunc(fileds));\n//     const [modalCss, setModalCss] = useState(false);\n//     const [pageMode, setPageMode] = useState(mode.defaultsave);\n//     const [userPageAccessState, setUserAccState] = useState(\"\");\n//     const {\n//         pageField,\n//         userAccess,\n//     } = useSelector((state) => ({\n//         userAccess: state.Login.RoleAccessUpdateData,\n//         pageField: state.CommonPageFieldReducer.pageField,\n//     }));\n//     useEffect(() => {\n//         dispatch(commonPageFieldSuccess(null));\n//         dispatch(commonPageField(pageId.BULK_RECIPT));\n//     }, []);\n//     // userAccess useEffect\n//     useEffect(() => {\n//         let userAcc = null;\n//         let locationPath = location.pathname;\n//         if (hasShowModal) {\n//             locationPath = props.masterPath;\n//         }\n//         userAcc = userAccess.find((inx) => {\n//             return `/${inx.ActualPagePath}` === locationPath;\n//         });\n//         if (userAcc) {\n//             setUserAccState(userAcc);\n//             breadcrumbReturnFunc({ dispatch, userAcc });\n//         }\n//     }, [userAccess]);\n//     useEffect(() => {\n//         totalAmtCalculateFunc(demoData)\n//     }, [demoData])\n//     const pagesListColumns = [\n//         {\n//             dataField: \"PartyName\",\n//             text: \"party\",\n//             hidden: true,\n//         },\n//         {\n//             //***************ItemName********************************************************************* */\n//             text: \"Receipt Date\",\n//             dataField: \"ReceiptDate\",\n//             classes: (cell, row) =>\n//                 row.header === true ? \"multiinvoice\" : \"invoice-item-row\",\n//             attrs: (cell, row, rowIndex, colIndex) =>\n//                 row.header === true ? { colSpan: \"6\" } : {},\n//             formatter: (cellContent, index1) => {\n//                 if (index1.header) {\n//                     return (\n//                         <div className=\"_heder\">\n//                             <div className=\"div-1\">\n//                                 <div>\n//                                     <Label className=\"text-primary\">{index1.PartyName}</Label>\n//                                 </div>\n//                             </div>\n//                             <div className=\"div-2\">\n//                                 <div>\n//                                     <Label>Amount Paid :</Label>\n//                                 </div>\n//                                 <div>\n//                                     <Label id={`paidAmt-${index1.id}-${index1.Party}`}>{index1.AmountPaid}</Label>\n//                                 </div>\n//                             </div>\n//                             <div className=\"div-2\">\n//                                 <div>\n//                                     <Label>Opening Balance :</Label>\n//                                 </div>\n//                                 <div>\n//                                     <Label>{index1.OpBalance}</Label>\n//                                 </div>\n//                             </div>\n//                         </div>\n//                     );\n//                 }\n//                 return (\n//                     <>\n//                         <samp id={`ItemName${index1.id}-${index1.ReceiptDate}`}>\n//                             {index1.ReceiptDate}\n//                         </samp>\n//                     </>\n//                 );\n//             },\n//         },\n//         {\n//             //***************BillNo********************************************************************* */\n//             text: \"Bill No\",\n//             dataField: \"BillNo\",\n//             style: (cell, row, rowIndex, colIndex) => {\n//                 return row.header === true ? { display: \"none\" } : {}; //make sure other things are not displayed\n//             },\n//         },\n//         {\n//             //***************Bill Amount********************************************************************* */\n//             text: \"Bill Amount\",\n//             dataField: \"BillAmount\",\n//             style: (cell, row, rowIndex, colIndex) => {\n//                 return row.header === true ? { display: \"none\" } : {}; //make sure other things are not displayed\n//             },\n//         },\n//         {\n//             //***************Bill Amount********************************************************************* */\n//             text: \"Paid\",\n//             dataField: \"Paid\",\n//             style: (cell, row, rowIndex, colIndex) => {\n//                 return row.header === true ? { display: \"none\" } : {}; //make sure other things are not displayed\n//             },\n//         },\n//         {\n//             //***************Bill Amount********************************************************************* */\n//             text: \"Bal Amt\",\n//             dataField: \"BalAmt\",\n//             style: (cell, row, rowIndex, colIndex) => {\n//                 return row.header === true ? { display: \"none\" } : {}; //make sure other things are not displayed\n//             },\n//             formatter: (cellContent, index1) => {\n//                 return <>\n//                     <Input value={cellContent} disabled={true}></Input></>\n//             }\n//         },\n//         {\n//             //***************Bill Amount********************************************************************* */\n//             text: \"Calculate\",\n//             dataField: \"Calculate\",\n//             style: (cell, row, rowIndex, colIndex) => {\n//                 return row.header === true ? { display: \"none\" } : {}; //make sure other things are not displayed\n//             },\n//             formatter: (cell, row, r, c, data = []) => {\n//                 return <>\n//                     <Input defaultValue={row.Calculate} onChange={(e) => { calculateOnChange(e, row, data) }}></Input>\n//                 </>\n//             }\n//         }\n//     ];\n//     function calculateOnChange(e, row, data = []) {\n//         row.Calculate = e.target.value\n//         const grouped = groupBy(data, p => p.Party)\n//         const collection = grouped.get(row.Party)\n//         let addition = 0\n//         collection.forEach(index1 => {\n//             addition = addition + Number(index1.Calculate)\n//         })\n//         totalAmtCalculateFunc(data, addition, row)\n//     }\n//     function totalAmtCalculateFunc(data = [], addition = 0, row = '') {\n//         let totalAmt = 0\n//         data.forEach(index1 => {\n//             if (!(index1.header === true)) {\n//                 totalAmt = Number(index1.Calculate) + totalAmt\n//             }\n//             if (row.Party === index1.Party && index1.header === true) {\n//                 index1.AmountPaid = addition.toFixed(3)\n//                 document.getElementById(`paidAmt-${index1.id}-${index1.Party}`).innerText = index1.AmountPaid\n//             }\n//         })\n//         dispatch(BreadcrumbShowCountlabel(`ToTal Amount :${totalAmt}`))\n//     }\n//     function SaveHandler() {\n//     }\n//     if (!(userPageAccessState === \"\")) {\n//         return (\n//             <React.Fragment>\n//                 <MetaTags>\n//                     <title>{userAccess.PageHeading}| FoodERP-React FrontEnd</title>\n//                 </MetaTags>\n//                 <div className=\"page-content\">\n//                     <form noValidate>\n//                         <Col className=\"px-2 mb-1 c_card_filter header text-black\" sm={12}>\n//                             <Row>\n//                                 <Col className=\" mt-1 row  \" sm={11}>\n//                                     <Col sm=\"3\">\n//                                         <FormGroup className=\"row mt-2 mb-3  \">\n//                                             <Label className=\"mt-1\" style={{ width: \"100px\" }}>\n//                                                 {\"Date\"}\n//                                             </Label>\n//                                             <Col sm=\"7\">\n//                                                 <Flatpickr\n//                                                     name=\"InvoiceDate\"\n//                                                     // value={values.InvoiceDate}\n//                                                     className=\"form-control d-block bg-white text-dark\"\n//                                                     id=\"myInput11\"\n//                                                     // disabled={\n//                                                     //     OrderItemDetails.length > 0 || pageMode === \"edit\"\n//                                                     //         ? true\n//                                                     //         : false\n//                                                     // }\n//                                                     options={{\n//                                                         dateFormat: \"Y-m-d\",\n//                                                     }}\n//                                                 // onChange={InvoiceDateOnchange}\n//                                                 />\n//                                             </Col>\n//                                         </FormGroup>\n//                                     </Col>\n//                                     <Col sm=\"6\">\n//                                         {/* <FormGroup className=\"row mt-2 mb-3 \">\n//                                             <Label className=\"mt-2\" style={{ width: \"100px\" }}>\n//                                                 {\" \"}\n//                                                 {fieldLabel.Customer}{\" \"}\n//                                             </Label>\n//                                             <Col sm={7}>\n//                                                 <Select\n//                                                     name=\"Customer\"\n//                                                     value={values.Customer}\n//                                                     isSearchable={true}\n//                                                     isDisabled={\n//                                                         OrderItemDetails.length > 0 ? true : false\n//                                                     }\n//                                                     id={\"customerselect\"}\n//                                                     className=\"react-dropdown\"\n//                                                     classNamePrefix=\"dropdown\"\n//                                                     options={CustomerDropdown_Options}\n//                                                     onChange={CustomerOnchange}\n//                                                 />\n//                                                 {isError.Customer.length > 0 && (\n//                                                     <span className=\"text-danger f-8\">\n//                                                         <small>{isError.Customer}</small>\n//                                                     </span>\n//                                                 )}\n//                                             </Col>\n//                                         </FormGroup> */}\n//                                     </Col>\n//                                 </Col>\n//                                 {/* <Col sm={1} className=\"mt-3\">\n//                       {pageMode === mode.defaultsave ? (\n//                         OrderItemDetails.length === 0 ? (\n//                           <Go_Button onClick={(e) => goButtonHandler()} />\n//                         ) : (\n//                           <Change_Button\n//                             onClick={(e) =>\n//                               dispatch(GoButtonForinvoiceAddSuccess([]))\n//                             }\n//                           />\n//                         )\n//                       ) : null}\n//                     </Col> */}\n//                                 <Col></Col>\n//                             </Row>\n//                         </Col>\n//                         <CustomTable2\n//                             data={demoData}\n//                             columns={pagesListColumns}\n//                             customSearch={bulkSearch}\n//                             classes={\" table table-responsive  table-bordered table-hover\"}\n//                             noDataIndication={\n//                                 <div className=\"text-danger text-center \">\n//                                     Items Not available\n//                                 </div>\n//                             }\n//                         >\n//                         </CustomTable2>\n//                         {demoData.length > 0 && (\n//                             <div className={\"invoice-savebtn\"}>\n//                                 <div className=\"div-1\">\n//                                     <SaveButton\n//                                         pageMode={pageMode}\n//                                         onClick={SaveHandler}\n//                                         id={saveBtnid}\n//                                         userAcc={userPageAccessState}\n//                                         module={userAccess.PageHeading}\n//                                     />\n//                                 </div>\n//                             </div>\n//                         )}\n//                     </form>\n//                 </div>\n//             </React.Fragment>\n//         );\n//     } else {\n//         return <React.Fragment></React.Fragment>;\n//     }\n// }\n// export default BulkRecipt\nimport React, { useEffect, useState } from \"react\";\nimport { Col, FormGroup, Input, Label, Row } from \"reactstrap\";\nimport Flatpickr from \"react-flatpickr\";\nimport { MetaTags } from \"react-meta-tags\";\nimport { AlertState, BreadcrumbShowCountlabel, commonPageField, commonPageFieldSuccess } from \"../../../store/actions\";\nimport { useHistory } from \"react-router-dom\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Select from \"react-select\";\nimport { comAddPageFieldFunc, formValid, initialFiledFunc, onChangeSelect, onChangeText, resetFunction } from \"../../../components/Common/validationFunction\";\nimport { SaveButton } from \"../../../components/Common/CommonButton\";\nimport { breadcrumbReturnFunc, btnIsDissablefunc, currentDate, loginCompanyID, loginPartyID, loginUserID } from \"../../../components/Common/CommonFunction\";\nimport * as url from \"../../../routes/route_url\";\nimport * as pageId from \"../../../routes/allPageID\";\nimport * as mode from \"../../../routes/PageMode\";\nimport paginationFactory, { PaginationListStandalone, PaginationProvider } from \"react-bootstrap-table2-paginator\";\nimport ToolkitProvider from \"react-bootstrap-table2-toolkit\";\nimport BootstrapTable from \"react-bootstrap-table-next\";\nimport { countlabelFunc } from \"../../../components/Common/CommonPurchaseList\";\nimport { mySearchProps } from \"../../../components/Common/SearchBox/MySearch\";\nimport { Retailer_List } from \"../../../store/CommonAPI/SupplierRedux/actions\";\nimport { BankListAPI, GetOpeningBalance, GetOpeningBalance_Success, ReceiptGoButtonMaster, ReceiptGoButtonMaster_Success, ReceiptTypeAPI, saveReceiptMaster, saveReceiptMaster_Success } from \"../../../store/Accounting/Receipt/action\";\nimport { postSelect_Field_for_dropdown } from \"../../../store/Administrator/PartyMasterBulkUpdateRedux/actions\";\nimport { setISODay } from \"date-fns\";\nimport { CustomAlert } from \"../../../CustomAlert/ConfirmDialog\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst BulkRecipt = props => {\n  _s();\n\n  const history = useHistory();\n  const dispatch = useDispatch();\n  const fileds = {\n    CurrentDate: currentDate\n  };\n  const [state, setState] = useState(() => initialFiledFunc(fileds));\n  const [modalCss, setModalCss] = useState(false);\n  const [ID, setID] = useState(\"\");\n  const [pageMode, setPageMode] = useState(mode.defaultsave);\n  const [userPageAccessState, setUserAccState] = useState(123);\n  const [editCreatedBy, seteditCreatedBy] = useState(\"\"); //Access redux store Data /  'save_ModuleSuccess' action data\n\n  const {\n    postMsg,\n    ReceiptGoButton,\n    pageField,\n    userAccess\n  } = useSelector(state => ({\n    postMsg: state.ReceiptReducer.postMsg,\n    ReceiptGoButton: state.ReceiptReducer.ReceiptGoButton,\n    userAccess: state.Login.RoleAccessUpdateData,\n    pageField: state.CommonPageFieldReducer.pageField\n  }));\n  const values = { ...state.values\n  };\n  const {\n    isError\n  } = state;\n  const {\n    fieldLabel\n  } = state;\n  const location = { ...history.location\n  };\n  const page_Mode = location.pageMode;\n  const hasShowloction = location.hasOwnProperty(mode.editValue);\n  const hasShowModal = props.hasOwnProperty(mode.editValue);\n  const {\n    Data = []\n  } = ReceiptGoButton;\n  useEffect(() => {\n    const page_Id = pageId.RECEIPTS;\n    dispatch(commonPageFieldSuccess(null));\n    dispatch(commonPageField(page_Id));\n    dispatch(BankListAPI());\n  }, []);\n  useEffect(() => {\n    dispatch(BreadcrumbShowCountlabel(`BulkReceipt Count :${Data.length}`));\n  }, [ReceiptGoButton]);\n  useEffect(() => {\n    if (pageField) {\n      const fieldArr = pageField.PageFieldMaster;\n      comAddPageFieldFunc({\n        state,\n        setState,\n        fieldArr\n      });\n    }\n  }, [pageField]);\n  useEffect(async () => {\n    if (postMsg.Status === true && postMsg.StatusCode === 200) {\n      dispatch(saveReceiptMaster_Success({\n        Status: false\n      }));\n      dispatch(ReceiptGoButtonMaster_Success([]));\n      setState(() => resetFunction(fileds, state)); //Clear form values\n\n      if (pageMode === \"other\") {\n        CustomAlert({\n          Type: 1,\n          Message: postMsg.Message\n        });\n      } else {\n        const promise = await CustomAlert({\n          Type: 1,\n          Message: postMsg.Message\n        });\n\n        if (promise) {\n          history.push({\n            pathname: url.LOADING_SHEET_LIST\n          });\n        }\n      }\n    } else if (postMsg.Status === true) {\n      dispatch(saveReceiptMaster_Success({\n        Status: false\n      }));\n      CustomAlert({\n        Type: 4,\n        Message: JSON.stringify(postMessage.Message)\n      });\n    }\n  }, [postMsg]);\n  useEffect(() => {\n    let userAcc = null;\n    let locationPath = location.pathname;\n\n    if (hasShowModal) {\n      locationPath = props.masterPath;\n    }\n\n    ;\n    userAcc = userAccess.find(inx => {\n      return `/${inx.ActualPagePath}` === locationPath;\n    });\n\n    if (userAcc) {\n      setUserAccState(userAcc);\n      breadcrumbReturnFunc({\n        dispatch,\n        userAcc\n      });\n    }\n\n    ;\n  }, [userAccess]);\n  const pagesListColumns = [{\n    text: \"Party\",\n    dataField: \"CustomerName\"\n  }, {\n    text: \"Invoice Date\",\n    dataField: \"InvoiceDate\"\n  }, {\n    text: \"Bill No\",\n    dataField: \"FullInvoiceNumber\"\n  }, {\n    text: \"Bill Amount\",\n    dataField: \"GrandTotal\"\n  }, {\n    text: \"Paid\",\n    dataField: \"PaidAmount\"\n  }, {\n    text: \"Bal Amt\",\n    dataField: \"BalanceAmount\"\n  }, {\n    text: \"Calculate\",\n    dataField: \"\",\n    formatter: (cellContent, row, key) => {\n      return /*#__PURE__*/_jsxDEV(\"span\", {\n        style: {\n          justifyContent: 'center'\n        },\n        children: /*#__PURE__*/_jsxDEV(Input, {\n          id: \"\",\n          disabled: true,\n          defaultValue: row.BalanceAmount,\n          className: \"col col-sm\" // onChange={e => { CalculateOnchange(e, row, key) }}\n\n        }, row.Invoice, false, {\n          fileName: _jsxFileName,\n          lineNumber: 544,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 543,\n        columnNumber: 25\n      }, this);\n    }\n  }];\n  const ReceiptInvoices1 = Data.map(index => ({\n    Invoice: index.Invoice,\n    GrandTotal: index.GrandTotal,\n    PaidAmount: index.BalanceAmount\n  }));\n  const FilterReceiptInvoices = ReceiptInvoices1.filter(index => {\n    return index.PaidAmount > 0;\n  });\n\n  const SaveHandler = event => {\n    const arr1 = [];\n    event.preventDefault();\n    const btnId = event.target.id;\n\n    try {\n      // if (formValid(state)) {\n      btnIsDissablefunc({\n        btnId,\n        state: true\n      });\n      Data.forEach(i => {\n        const arr = {\n          ReceiptDate: i.InvoiceDate,\n          Description: \"\",\n          AmountPaid: i.PaidAmount,\n          BalanceAmount: i.BalanceAmount,\n          OpeningBalanceAdjusted: \"\",\n          DocumentNo: \"\",\n          AdvancedAmountAjusted: \"\",\n          Customer: i.Customer,\n          ChequeDate: \"\",\n          Party: loginPartyID(),\n          ReceiptMode: 31,\n          ReceiptType: 29,\n          CreatedBy: loginUserID(),\n          UpdatedBy: loginUserID(),\n          ReceiptInvoices: FilterReceiptInvoices,\n          PaymentReceipt: []\n        }; // const arr = {\n        //     Customer: i.CustomerName,\n        //     ReceiptDate: i.InvoiceDate,\n        //     BillNo: i.FullInvoiceNumber,\n        //     BalanceAmount: \"\",\n        //     Grandtotal: i.Grandtotal,\n        //     // DocumentNo: i.ChequeNo,\n        //     // AdvancedAmountAjusted: \"\",\n        //     // Bank: i.BankName.value,\n        //     // // ChequeDate: i.ReceiptModeName.label === \"Cheque\" ? i.ChequeDate : \"\",\n        //     // DepositorBank: i.DepositorBankName.value,\n        //     Party: loginPartyID(),\n        //     // ReceiptMode: i.ReceiptModeName.value,\n        //     CreatedBy: loginUserID(),\n        //     UpdatedBy: loginUserID(),\n        //     // \"ReceiptInvoices\": FilterReceiptInvoices,\n        //     // \"PaymentReceipt\": page_Mode === mode.modeSTPsave ? PaymentReceipt : []\n        // }\n\n        arr1.push(arr);\n      });\n      debugger;\n      const jsonBody = JSON.stringify({\n        BulkData: arr1\n      });\n\n      if (pageMode === mode.edit) {// dispatch(updatePartyMasterBulkID({ jsonBody, updateId: values.id, btnId }));\n      } else {\n        dispatch(saveReceiptMaster({\n          jsonBody,\n          btnId\n        }));\n      } // }\n\n    } catch (e) {\n      btnIsDissablefunc({\n        btnId,\n        state: false\n      });\n    }\n  }; // const saveHandeller = async (event) => {\n  //     const arr1 = []\n  //     event.preventDefault();\n  //     const btnId = event.target.id;\n  //     try {\n  //         btnIsDissablefunc({ btnId, state: true })\n  //         Data.forEach(i => {\n  //             \n  //             const arr = {\n  //                 Customer: i.CustomerName,\n  //                 ReceiptDate: i.InvoiceDate,\n  //                 BillNo: i.FullInvoiceNumber,\n  //                 BalanceAmount: \"\",\n  //                 Grandtotal: i.Grandtotal,\n  //                 DocumentNo: i.ChequeNo,\n  //                 AdvancedAmountAjusted: \"\",\n  //                 Bank: i.BankName.value,\n  //                 // ChequeDate: i.ReceiptModeName.label === \"Cheque\" ? i.ChequeDate : \"\",\n  //                 DepositorBank: i.DepositorBankName.value,\n  //                 Party: loginPartyID(),\n  //                 ReceiptMode: i.ReceiptModeName.value,\n  //                 CreatedBy: loginUserID(),\n  //                 UpdatedBy: loginUserID(),\n  //                 // \"ReceiptInvoices\": FilterReceiptInvoices,\n  //                 // \"PaymentReceipt\": page_Mode === mode.modeSTPsave ? PaymentReceipt : []\n  //             }\n  //             arr1.push(arr)\n  //         })\n  //         const jsonBody = JSON.stringify({\n  //             BulkData: arr1\n  //         })\n  //         if (pageMode === mode.edit) {\n  //             // dispatch(updateCategoryID({ jsonBody, updateId: values.id, btnId }));\n  //         }\n  //         else {\n  //             dispatch(saveReceiptMaster({ jsonBody, btnId }));\n  //         }\n  //     } catch (e) { btnIsDissablefunc({ btnId, state: false }) }\n  // };\n  // IsEditMode_Css is use of module Edit_mode (reduce page-content marging)\n\n\n  var IsEditMode_Css = '';\n\n  if (modalCss || pageMode === mode.dropdownAdd) {\n    IsEditMode_Css = \"-5.5%\";\n  }\n\n  ;\n\n  if (!(userPageAccessState === '')) {\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(MetaTags, {\n        children: [\" \", /*#__PURE__*/_jsxDEV(\"title\", {\n          children: [userAccess.PageHeading, \"| FoodERP-React FrontEnd\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 694,\n          columnNumber: 28\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 694,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"page-content\",\n        style: {\n          marginBottom: \"5cm\"\n        },\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          noValidate: true,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"px-2 c_card_filter header text-black mb-2\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \" row \",\n              children: [/*#__PURE__*/_jsxDEV(Col, {\n                sm: \"6\",\n                children: /*#__PURE__*/_jsxDEV(FormGroup, {\n                  className: \" row mt-2\",\n                  children: [/*#__PURE__*/_jsxDEV(Label, {\n                    className: \"col-sm-1 p-2\",\n                    style: {\n                      width: \"115px\",\n                      marginRight: \"0.4cm\"\n                    },\n                    children: \"Receipt Date\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 703,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(Col, {\n                    sm: \"7\",\n                    children: /*#__PURE__*/_jsxDEV(Flatpickr, {\n                      name: \"Date\",\n                      value: values.CurrentDate,\n                      disabled: true,\n                      className: \"form-control d-block p-2 bg-white text-dark\",\n                      options: {\n                        altInput: true,\n                        altFormat: \"d-m-Y\",\n                        dateFormat: \"Y-m-d\"\n                      }\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 706,\n                      columnNumber: 45\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 705,\n                    columnNumber: 41\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 702,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 701,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Col, {\n                sm: \"3\",\n                className: \"\",\n                children: /*#__PURE__*/_jsxDEV(FormGroup, {\n                  className: \" row mt-2 \",\n                  children: [/*#__PURE__*/_jsxDEV(Label, {\n                    className: \"col-sm-1 p-2\",\n                    style: {\n                      width: \"120px\"\n                    },\n                    children: \"Recepiet Mode :\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 722,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(Col, {\n                    sm: \"3\",\n                    children: /*#__PURE__*/_jsxDEV(Label, {\n                      className: \" mt-2\",\n                      children: \"Cash\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 725,\n                      columnNumber: 45\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 724,\n                    columnNumber: 41\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 721,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 720,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 700,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 699,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(ToolkitProvider, {\n            keyField: \"id\",\n            data: Data,\n            columns: pagesListColumns,\n            search: true,\n            children: toolkitProps => /*#__PURE__*/_jsxDEV(React.Fragment, {\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"table\",\n                children: [/*#__PURE__*/_jsxDEV(BootstrapTable, {\n                  keyField: \"id\",\n                  bordered: true,\n                  striped: false,\n                  noDataIndication: /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"text-danger text-center \",\n                    children: \"Record Not available\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 748,\n                    columnNumber: 63\n                  }, this),\n                  classes: \"table align-middle table-nowrap table-hover\",\n                  headerWrapperClasses: \"thead-light\",\n                  ...toolkitProps.baseProps\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 744,\n                  columnNumber: 41\n                }, this), mySearchProps(toolkitProps.searchProps)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 743,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 742,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 733,\n            columnNumber: 25\n          }, this), Data.length > 0 ? /*#__PURE__*/_jsxDEV(FormGroup, {\n            children: /*#__PURE__*/_jsxDEV(Col, {\n              sm: 2,\n              style: {\n                marginLeft: \"-40px\"\n              },\n              className: \"row save1\",\n              children: /*#__PURE__*/_jsxDEV(SaveButton, {\n                pageMode: pageMode,\n                onClick: SaveHandler,\n                userAcc: userPageAccessState,\n                editCreatedBy: editCreatedBy,\n                module: \"Receipts\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 767,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 766,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 765,\n            columnNumber: 29\n          }, this) : null]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 698,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 696,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 693,\n      columnNumber: 13\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 786,\n      columnNumber: 13\n    }, this);\n  }\n};\n\n_s(BulkRecipt, \"iXBSwEdASDSIRZ+GvXvqfa+vCJ8=\", false, function () {\n  return [useHistory, useDispatch, useSelector];\n});\n\n_c = BulkRecipt;\nexport default BulkRecipt;\n\nvar _c;\n\n$RefreshReg$(_c, \"BulkRecipt\");","map":{"version":3,"names":["React","useEffect","useState","Col","FormGroup","Input","Label","Row","Flatpickr","MetaTags","AlertState","BreadcrumbShowCountlabel","commonPageField","commonPageFieldSuccess","useHistory","useDispatch","useSelector","Select","comAddPageFieldFunc","formValid","initialFiledFunc","onChangeSelect","onChangeText","resetFunction","SaveButton","breadcrumbReturnFunc","btnIsDissablefunc","currentDate","loginCompanyID","loginPartyID","loginUserID","url","pageId","mode","paginationFactory","PaginationListStandalone","PaginationProvider","ToolkitProvider","BootstrapTable","countlabelFunc","mySearchProps","Retailer_List","BankListAPI","GetOpeningBalance","GetOpeningBalance_Success","ReceiptGoButtonMaster","ReceiptGoButtonMaster_Success","ReceiptTypeAPI","saveReceiptMaster","saveReceiptMaster_Success","postSelect_Field_for_dropdown","setISODay","CustomAlert","BulkRecipt","props","history","dispatch","fileds","CurrentDate","state","setState","modalCss","setModalCss","ID","setID","pageMode","setPageMode","defaultsave","userPageAccessState","setUserAccState","editCreatedBy","seteditCreatedBy","postMsg","ReceiptGoButton","pageField","userAccess","ReceiptReducer","Login","RoleAccessUpdateData","CommonPageFieldReducer","values","isError","fieldLabel","location","page_Mode","hasShowloction","hasOwnProperty","editValue","hasShowModal","Data","page_Id","RECEIPTS","length","fieldArr","PageFieldMaster","Status","StatusCode","Type","Message","promise","push","pathname","LOADING_SHEET_LIST","JSON","stringify","postMessage","userAcc","locationPath","masterPath","find","inx","ActualPagePath","pagesListColumns","text","dataField","formatter","cellContent","row","key","justifyContent","BalanceAmount","Invoice","ReceiptInvoices1","map","index","GrandTotal","PaidAmount","FilterReceiptInvoices","filter","SaveHandler","event","arr1","preventDefault","btnId","target","id","forEach","i","arr","ReceiptDate","InvoiceDate","Description","AmountPaid","OpeningBalanceAdjusted","DocumentNo","AdvancedAmountAjusted","Customer","ChequeDate","Party","ReceiptMode","ReceiptType","CreatedBy","UpdatedBy","ReceiptInvoices","PaymentReceipt","jsonBody","BulkData","edit","e","IsEditMode_Css","dropdownAdd","PageHeading","marginBottom","width","marginRight","altInput","altFormat","dateFormat","toolkitProps","baseProps","searchProps","marginLeft"],"sources":["D:/Rohit/Git projects/Manthan/src/pages/Accounting/Receipt/BulkReceipt.js"],"sourcesContent":["// import React, { useEffect, useState } from \"react\";\r\n// import {\r\n//     Col,\r\n//     FormGroup,\r\n//     Input,\r\n//     Label,\r\n//     Row,\r\n// } from \"reactstrap\";\r\n// import { MetaTags } from \"react-meta-tags\";\r\n// import Flatpickr from \"react-flatpickr\";\r\n// import {\r\n//     BreadcrumbShowCountlabel,\r\n//     commonPageFieldSuccess,\r\n// } from \"../../../store/actions\";\r\n// import { useDispatch, useSelector } from \"react-redux\";\r\n// import { commonPageField } from \"../../../store/actions\";\r\n// import { useHistory } from \"react-router-dom\";\r\n// import {\r\n//     initialFiledFunc,\r\n// } from \"../../../components/Common/validationFunction\";\r\n\r\n// import {\r\n//     SaveButton,\r\n// } from \"../../../components/Common/CommonButton\";\r\n// import {\r\n//     breadcrumbReturnFunc,\r\n//     currentDate,\r\n//     groupBy,\r\n// } from \"../../../components/Common/CommonFunction\";\r\n\r\n// import * as mode from \"../../../routes/PageMode\";\r\n// import * as pageId from \"../../../routes/allPageID\";\r\n// import * as url from \"../../../routes/route_url\";\r\n// import { CustomAlert } from \"../../../CustomAlert/ConfirmDialog\";\r\n// import \"./bulk.scss\";\r\n// import demoData from \"./bulkRecipt\";\r\n// import CustomTable2 from \"../../../CustomTable2/Table\";\r\n// import { bulkSearch } from \"../../Sale/Invoice/invoiceCaculations\";\r\n\r\n// const BulkRecipt = (props) => {\r\n\r\n//     const dispatch = useDispatch();\r\n//     const history = useHistory();\r\n//     const subPageMode = history.location.pathname;\r\n\r\n//     const saveBtnid = `saveBtn${subPageMode}`;\r\n\r\n//     const location = { ...history.location };\r\n//     const hasShowloction = location.hasOwnProperty(\"editValue\");\r\n//     const hasShowModal = props.hasOwnProperty(\"editValue\");\r\n\r\n//     const fileds = {\r\n//         // id: \"\",\r\n//         InvoiceDate: currentDate,\r\n//         Customer: \"\",\r\n//     };\r\n\r\n//     const [state, setState] = useState(() => initialFiledFunc(fileds));\r\n\r\n//     const [modalCss, setModalCss] = useState(false);\r\n//     const [pageMode, setPageMode] = useState(mode.defaultsave);\r\n//     const [userPageAccessState, setUserAccState] = useState(\"\");\r\n\r\n//     const {\r\n//         pageField,\r\n//         userAccess,\r\n//     } = useSelector((state) => ({\r\n//         userAccess: state.Login.RoleAccessUpdateData,\r\n//         pageField: state.CommonPageFieldReducer.pageField,\r\n//     }));\r\n//     useEffect(() => {\r\n//         dispatch(commonPageFieldSuccess(null));\r\n//         dispatch(commonPageField(pageId.BULK_RECIPT));\r\n//     }, []);\r\n\r\n\r\n\r\n//     // userAccess useEffect\r\n//     useEffect(() => {\r\n//         let userAcc = null;\r\n//         let locationPath = location.pathname;\r\n\r\n//         if (hasShowModal) {\r\n//             locationPath = props.masterPath;\r\n//         }\r\n//         userAcc = userAccess.find((inx) => {\r\n//             return `/${inx.ActualPagePath}` === locationPath;\r\n//         });\r\n\r\n//         if (userAcc) {\r\n//             setUserAccState(userAcc);\r\n//             breadcrumbReturnFunc({ dispatch, userAcc });\r\n//         }\r\n//     }, [userAccess]);\r\n\r\n//     useEffect(() => {\r\n//         totalAmtCalculateFunc(demoData)\r\n//     }, [demoData])\r\n\r\n//     const pagesListColumns = [\r\n//         {\r\n//             dataField: \"PartyName\",\r\n//             text: \"party\",\r\n//             hidden: true,\r\n//         },\r\n\r\n//         {\r\n//             //***************ItemName********************************************************************* */\r\n//             text: \"Receipt Date\",\r\n//             dataField: \"ReceiptDate\",\r\n//             classes: (cell, row) =>\r\n//                 row.header === true ? \"multiinvoice\" : \"invoice-item-row\",\r\n//             attrs: (cell, row, rowIndex, colIndex) =>\r\n//                 row.header === true ? { colSpan: \"6\" } : {},\r\n//             formatter: (cellContent, index1) => {\r\n//                 if (index1.header) {\r\n//                     return (\r\n//                         <div className=\"_heder\">\r\n//                             <div className=\"div-1\">\r\n//                                 <div>\r\n//                                     <Label className=\"text-primary\">{index1.PartyName}</Label>\r\n//                                 </div>\r\n//                             </div>\r\n//                             <div className=\"div-2\">\r\n//                                 <div>\r\n//                                     <Label>Amount Paid :</Label>\r\n//                                 </div>\r\n//                                 <div>\r\n//                                     <Label id={`paidAmt-${index1.id}-${index1.Party}`}>{index1.AmountPaid}</Label>\r\n//                                 </div>\r\n//                             </div>\r\n\r\n//                             <div className=\"div-2\">\r\n//                                 <div>\r\n//                                     <Label>Opening Balance :</Label>\r\n//                                 </div>\r\n//                                 <div>\r\n//                                     <Label>{index1.OpBalance}</Label>\r\n//                                 </div>\r\n//                             </div>\r\n//                         </div>\r\n//                     );\r\n//                 }\r\n//                 return (\r\n//                     <>\r\n//                         <samp id={`ItemName${index1.id}-${index1.ReceiptDate}`}>\r\n//                             {index1.ReceiptDate}\r\n//                         </samp>\r\n//                     </>\r\n//                 );\r\n//             },\r\n//         },\r\n\r\n//         {\r\n//             //***************BillNo********************************************************************* */\r\n//             text: \"Bill No\",\r\n//             dataField: \"BillNo\",\r\n//             style: (cell, row, rowIndex, colIndex) => {\r\n//                 return row.header === true ? { display: \"none\" } : {}; //make sure other things are not displayed\r\n//             },\r\n\r\n//         },\r\n//         {\r\n//             //***************Bill Amount********************************************************************* */\r\n//             text: \"Bill Amount\",\r\n//             dataField: \"BillAmount\",\r\n//             style: (cell, row, rowIndex, colIndex) => {\r\n//                 return row.header === true ? { display: \"none\" } : {}; //make sure other things are not displayed\r\n//             },\r\n\r\n//         },\r\n//         {\r\n//             //***************Bill Amount********************************************************************* */\r\n//             text: \"Paid\",\r\n//             dataField: \"Paid\",\r\n//             style: (cell, row, rowIndex, colIndex) => {\r\n//                 return row.header === true ? { display: \"none\" } : {}; //make sure other things are not displayed\r\n//             },\r\n//         },\r\n//         {\r\n//             //***************Bill Amount********************************************************************* */\r\n//             text: \"Bal Amt\",\r\n//             dataField: \"BalAmt\",\r\n//             style: (cell, row, rowIndex, colIndex) => {\r\n//                 return row.header === true ? { display: \"none\" } : {}; //make sure other things are not displayed\r\n//             },\r\n//             formatter: (cellContent, index1) => {\r\n//                 return <>\r\n//                     <Input value={cellContent} disabled={true}></Input></>\r\n//             }\r\n//         },\r\n//         {\r\n//             //***************Bill Amount********************************************************************* */\r\n//             text: \"Calculate\",\r\n//             dataField: \"Calculate\",\r\n//             style: (cell, row, rowIndex, colIndex) => {\r\n//                 return row.header === true ? { display: \"none\" } : {}; //make sure other things are not displayed\r\n//             },\r\n//             formatter: (cell, row, r, c, data = []) => {\r\n//                 return <>\r\n//                     <Input defaultValue={row.Calculate} onChange={(e) => { calculateOnChange(e, row, data) }}></Input>\r\n//                 </>\r\n//             }\r\n//         }\r\n\r\n\r\n//     ];\r\n\r\n//     function calculateOnChange(e, row, data = []) {\r\n\r\n//         row.Calculate = e.target.value\r\n//         const grouped = groupBy(data, p => p.Party)\r\n//         const collection = grouped.get(row.Party)\r\n//         let addition = 0\r\n//         collection.forEach(index1 => {\r\n//             addition = addition + Number(index1.Calculate)\r\n//         })\r\n//         totalAmtCalculateFunc(data, addition, row)\r\n\r\n//     }\r\n//     function totalAmtCalculateFunc(data = [], addition = 0, row = '') {\r\n//         let totalAmt = 0\r\n//         data.forEach(index1 => {\r\n//             if (!(index1.header === true)) {\r\n//                 totalAmt = Number(index1.Calculate) + totalAmt\r\n//             }\r\n//             if (row.Party === index1.Party && index1.header === true) {\r\n//                 index1.AmountPaid = addition.toFixed(3)\r\n//                 document.getElementById(`paidAmt-${index1.id}-${index1.Party}`).innerText = index1.AmountPaid\r\n//             }\r\n//         })\r\n//         dispatch(BreadcrumbShowCountlabel(`ToTal Amount :${totalAmt}`))\r\n//     }\r\n//     function SaveHandler() {\r\n\r\n//     }\r\n\r\n//     if (!(userPageAccessState === \"\")) {\r\n//         return (\r\n//             <React.Fragment>\r\n//                 <MetaTags>\r\n//                     <title>{userAccess.PageHeading}| FoodERP-React FrontEnd</title>\r\n//                 </MetaTags>\r\n\r\n//                 <div className=\"page-content\">\r\n//                     <form noValidate>\r\n//                         <Col className=\"px-2 mb-1 c_card_filter header text-black\" sm={12}>\r\n//                             <Row>\r\n//                                 <Col className=\" mt-1 row  \" sm={11}>\r\n//                                     <Col sm=\"3\">\r\n//                                         <FormGroup className=\"row mt-2 mb-3  \">\r\n//                                             <Label className=\"mt-1\" style={{ width: \"100px\" }}>\r\n//                                                 {\"Date\"}\r\n//                                             </Label>\r\n//                                             <Col sm=\"7\">\r\n//                                                 <Flatpickr\r\n//                                                     name=\"InvoiceDate\"\r\n//                                                     // value={values.InvoiceDate}\r\n//                                                     className=\"form-control d-block bg-white text-dark\"\r\n//                                                     id=\"myInput11\"\r\n//                                                     // disabled={\r\n//                                                     //     OrderItemDetails.length > 0 || pageMode === \"edit\"\r\n//                                                     //         ? true\r\n//                                                     //         : false\r\n//                                                     // }\r\n//                                                     options={{\r\n//                                                         dateFormat: \"Y-m-d\",\r\n//                                                     }}\r\n//                                                 // onChange={InvoiceDateOnchange}\r\n//                                                 />\r\n//                                             </Col>\r\n//                                         </FormGroup>\r\n//                                     </Col>\r\n\r\n//                                     <Col sm=\"6\">\r\n//                                         {/* <FormGroup className=\"row mt-2 mb-3 \">\r\n//                                             <Label className=\"mt-2\" style={{ width: \"100px\" }}>\r\n//                                                 {\" \"}\r\n//                                                 {fieldLabel.Customer}{\" \"}\r\n//                                             </Label>\r\n//                                             <Col sm={7}>\r\n//                                                 <Select\r\n//                                                     name=\"Customer\"\r\n//                                                     value={values.Customer}\r\n//                                                     isSearchable={true}\r\n//                                                     isDisabled={\r\n//                                                         OrderItemDetails.length > 0 ? true : false\r\n//                                                     }\r\n//                                                     id={\"customerselect\"}\r\n//                                                     className=\"react-dropdown\"\r\n//                                                     classNamePrefix=\"dropdown\"\r\n//                                                     options={CustomerDropdown_Options}\r\n//                                                     onChange={CustomerOnchange}\r\n//                                                 />\r\n//                                                 {isError.Customer.length > 0 && (\r\n//                                                     <span className=\"text-danger f-8\">\r\n//                                                         <small>{isError.Customer}</small>\r\n//                                                     </span>\r\n//                                                 )}\r\n//                                             </Col>\r\n//                                         </FormGroup> */}\r\n//                                     </Col>\r\n//                                 </Col>\r\n\r\n//                                 {/* <Col sm={1} className=\"mt-3\">\r\n//                       {pageMode === mode.defaultsave ? (\r\n//                         OrderItemDetails.length === 0 ? (\r\n//                           <Go_Button onClick={(e) => goButtonHandler()} />\r\n//                         ) : (\r\n//                           <Change_Button\r\n//                             onClick={(e) =>\r\n//                               dispatch(GoButtonForinvoiceAddSuccess([]))\r\n//                             }\r\n//                           />\r\n//                         )\r\n//                       ) : null}\r\n//                     </Col> */}\r\n//                                 <Col></Col>\r\n//                             </Row>\r\n//                         </Col>\r\n//                         <CustomTable2\r\n//                             data={demoData}\r\n//                             columns={pagesListColumns}\r\n//                             customSearch={bulkSearch}\r\n//                             classes={\" table table-responsive  table-bordered table-hover\"}\r\n//                             noDataIndication={\r\n//                                 <div className=\"text-danger text-center \">\r\n//                                     Items Not available\r\n//                                 </div>\r\n//                             }\r\n//                         >\r\n//                         </CustomTable2>\r\n\r\n\r\n//                         {demoData.length > 0 && (\r\n//                             <div className={\"invoice-savebtn\"}>\r\n//                                 <div className=\"div-1\">\r\n//                                     <SaveButton\r\n//                                         pageMode={pageMode}\r\n//                                         onClick={SaveHandler}\r\n//                                         id={saveBtnid}\r\n//                                         userAcc={userPageAccessState}\r\n//                                         module={userAccess.PageHeading}\r\n//                                     />\r\n//                                 </div>\r\n//                             </div>\r\n//                         )}\r\n//                     </form>\r\n//                 </div>\r\n//             </React.Fragment>\r\n//         );\r\n//     } else {\r\n//         return <React.Fragment></React.Fragment>;\r\n//     }\r\n// }\r\n// export default BulkRecipt\r\n\r\n\r\n\r\nimport React, { useEffect, useState, } from \"react\";\r\nimport {\r\n    Col,\r\n    FormGroup,\r\n    Input,\r\n    Label,\r\n    Row,\r\n} from \"reactstrap\";\r\nimport Flatpickr from \"react-flatpickr\"\r\nimport { MetaTags } from \"react-meta-tags\";\r\nimport { AlertState, BreadcrumbShowCountlabel, commonPageField, commonPageFieldSuccess } from \"../../../store/actions\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport Select from \"react-select\";\r\nimport {\r\n    comAddPageFieldFunc,\r\n    formValid,\r\n    initialFiledFunc,\r\n    onChangeSelect,\r\n    onChangeText,\r\n    resetFunction,\r\n} from \"../../../components/Common/validationFunction\";\r\nimport { SaveButton } from \"../../../components/Common/CommonButton\";\r\nimport { breadcrumbReturnFunc, btnIsDissablefunc, currentDate, loginCompanyID, loginPartyID, loginUserID, } from \"../../../components/Common/CommonFunction\";\r\nimport * as url from \"../../../routes/route_url\";\r\nimport * as pageId from \"../../../routes/allPageID\"\r\nimport * as mode from \"../../../routes/PageMode\"\r\nimport paginationFactory, { PaginationListStandalone, PaginationProvider } from \"react-bootstrap-table2-paginator\";\r\nimport ToolkitProvider from \"react-bootstrap-table2-toolkit\";\r\nimport BootstrapTable from \"react-bootstrap-table-next\";\r\nimport { countlabelFunc } from \"../../../components/Common/CommonPurchaseList\";\r\nimport { mySearchProps } from \"../../../components/Common/SearchBox/MySearch\";\r\nimport { Retailer_List } from \"../../../store/CommonAPI/SupplierRedux/actions\";\r\nimport { BankListAPI, GetOpeningBalance, GetOpeningBalance_Success, ReceiptGoButtonMaster, ReceiptGoButtonMaster_Success, ReceiptTypeAPI, saveReceiptMaster, saveReceiptMaster_Success } from \"../../../store/Accounting/Receipt/action\";\r\nimport { postSelect_Field_for_dropdown } from \"../../../store/Administrator/PartyMasterBulkUpdateRedux/actions\";\r\nimport { setISODay } from \"date-fns\";\r\nimport { CustomAlert } from \"../../../CustomAlert/ConfirmDialog\";\r\n\r\nconst BulkRecipt = (props) => {\r\n\r\n    const history = useHistory()\r\n    const dispatch = useDispatch();\r\n\r\n    const fileds = {\r\n        CurrentDate: currentDate,\r\n    }\r\n    const [state, setState] = useState(() => initialFiledFunc(fileds))\r\n    const [modalCss, setModalCss] = useState(false);\r\n    const [ID, setID] = useState(\"\");\r\n    const [pageMode, setPageMode] = useState(mode.defaultsave);\r\n    const [userPageAccessState, setUserAccState] = useState(123);\r\n    const [editCreatedBy, seteditCreatedBy] = useState(\"\");\r\n\r\n    //Access redux store Data /  'save_ModuleSuccess' action data\r\n    const {\r\n        postMsg,\r\n        ReceiptGoButton,\r\n        pageField,\r\n        userAccess } = useSelector((state) => ({\r\n            postMsg: state.ReceiptReducer.postMsg,\r\n            ReceiptGoButton: state.ReceiptReducer.ReceiptGoButton,\r\n            userAccess: state.Login.RoleAccessUpdateData,\r\n            pageField: state.CommonPageFieldReducer.pageField\r\n        }));\r\n\r\n    const values = { ...state.values }\r\n    const { isError } = state;\r\n    const { fieldLabel } = state;\r\n\r\n    const location = { ...history.location }\r\n    const page_Mode = location.pageMode\r\n    const hasShowloction = location.hasOwnProperty(mode.editValue)\r\n    const hasShowModal = props.hasOwnProperty(mode.editValue)\r\n\r\n    const { Data = [] } = ReceiptGoButton\r\n\r\n    useEffect(() => {\r\n        const page_Id = pageId.RECEIPTS\r\n        dispatch(commonPageFieldSuccess(null));\r\n        dispatch(commonPageField(page_Id))\r\n        dispatch(BankListAPI())\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        dispatch(BreadcrumbShowCountlabel(`BulkReceipt Count :${Data.length}`))\r\n    }, [ReceiptGoButton]);\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        if (pageField) {\r\n            const fieldArr = pageField.PageFieldMaster\r\n            comAddPageFieldFunc({ state, setState, fieldArr })\r\n        }\r\n    }, [pageField])\r\n\r\n\r\n    useEffect(async () => {\r\n\r\n        if ((postMsg.Status === true) && (postMsg.StatusCode === 200)) {\r\n            dispatch(saveReceiptMaster_Success({ Status: false }))\r\n            dispatch(ReceiptGoButtonMaster_Success([]))\r\n            setState(() => resetFunction(fileds, state))//Clear form values\r\n            \r\n\r\n            if (pageMode === \"other\") {\r\n                CustomAlert({\r\n                    Type: 1,\r\n                    Message: postMsg.Message,\r\n                })\r\n            }\r\n            else {\r\n                const promise = await CustomAlert({\r\n                    Type: 1,\r\n                    Message: postMsg.Message,\r\n                })\r\n                if (promise) {\r\n                    history.push({\r\n                        pathname: url.LOADING_SHEET_LIST,\r\n                    })\r\n                }\r\n            }\r\n        }\r\n        else if (postMsg.Status === true) {\r\n            dispatch(saveReceiptMaster_Success({ Status: false }))\r\n            CustomAlert({\r\n                Type: 4,\r\n                Message: JSON.stringify(postMessage.Message),\r\n            })\r\n        }\r\n    }, [postMsg])\r\n\r\n\r\n    useEffect(() => {\r\n        let userAcc = null;\r\n        let locationPath = location.pathname;\r\n\r\n        if (hasShowModal) {\r\n            locationPath = props.masterPath;\r\n        };\r\n\r\n        userAcc = userAccess.find((inx) => {\r\n            return (`/${inx.ActualPagePath}` === locationPath)\r\n        })\r\n\r\n        if (userAcc) {\r\n            setUserAccState(userAcc)\r\n            breadcrumbReturnFunc({ dispatch, userAcc });\r\n        };\r\n    }, [userAccess])\r\n\r\n\r\n    const pagesListColumns = [\r\n        {\r\n            text: \"Party\",\r\n            dataField: \"CustomerName\",\r\n        },\r\n        {\r\n            text: \"Invoice Date\",\r\n            dataField: \"InvoiceDate\",\r\n        },\r\n        {\r\n            text: \"Bill No\",\r\n            dataField: \"FullInvoiceNumber\",\r\n        },\r\n        {\r\n            text: \"Bill Amount\",\r\n            dataField: \"GrandTotal\",\r\n        },\r\n        {\r\n            text: \"Paid\",\r\n            dataField: \"PaidAmount\",\r\n        },\r\n        {\r\n            text: \"Bal Amt\",\r\n            dataField: \"BalanceAmount\",\r\n        },\r\n        {\r\n            text: \"Calculate\",\r\n            dataField: \"\",\r\n\r\n            formatter: (cellContent, row, key) => {\r\n\r\n                return (<span style={{ justifyContent: 'center' }}>\r\n                    <Input\r\n                        id=\"\"\r\n                        key={row.Invoice}\r\n                        disabled={true}\r\n                        defaultValue={row.BalanceAmount}\r\n                        className=\"col col-sm\"\r\n                    // onChange={e => { CalculateOnchange(e, row, key) }}\r\n                    />\r\n                </span>)\r\n            }\r\n        }\r\n\r\n    ];\r\n\r\n\r\n\r\n    const ReceiptInvoices1 = Data.map((index) => ({\r\n        Invoice: index.Invoice,\r\n        GrandTotal: index.GrandTotal,\r\n        PaidAmount: index.BalanceAmount,\r\n    }))\r\n\r\n    const FilterReceiptInvoices = ReceiptInvoices1.filter((index) => {\r\n        return index.PaidAmount > 0\r\n    })\r\n\r\n    const SaveHandler = (event) => {\r\n\r\n        const arr1 = []\r\n        event.preventDefault();\r\n        const btnId = event.target.id\r\n        try {\r\n            // if (formValid(state)) {\r\n            btnIsDissablefunc({ btnId, state: true })\r\n\r\n            Data.forEach(i => {\r\n                const arr =\r\n                {\r\n                    ReceiptDate: i.InvoiceDate,\r\n                    Description: \"\",\r\n                    AmountPaid: i.PaidAmount,\r\n                    BalanceAmount: i.BalanceAmount,\r\n                    OpeningBalanceAdjusted: \"\",\r\n                    DocumentNo: \"\",\r\n                    AdvancedAmountAjusted: \"\",\r\n                    Customer: i.Customer,\r\n                    ChequeDate: \"\",\r\n                    Party: loginPartyID(),\r\n                    ReceiptMode: 31,\r\n                    ReceiptType: 29,\r\n                    CreatedBy: loginUserID(),\r\n                    UpdatedBy: loginUserID(),\r\n                    ReceiptInvoices: FilterReceiptInvoices,\r\n                    PaymentReceipt: []\r\n                }\r\n\r\n                // const arr = {\r\n                //     Customer: i.CustomerName,\r\n                //     ReceiptDate: i.InvoiceDate,\r\n                //     BillNo: i.FullInvoiceNumber,\r\n                //     BalanceAmount: \"\",\r\n                //     Grandtotal: i.Grandtotal,\r\n                //     // DocumentNo: i.ChequeNo,\r\n                //     // AdvancedAmountAjusted: \"\",\r\n                //     // Bank: i.BankName.value,\r\n                //     // // ChequeDate: i.ReceiptModeName.label === \"Cheque\" ? i.ChequeDate : \"\",\r\n                //     // DepositorBank: i.DepositorBankName.value,\r\n                //     Party: loginPartyID(),\r\n                //     // ReceiptMode: i.ReceiptModeName.value,\r\n                //     CreatedBy: loginUserID(),\r\n                //     UpdatedBy: loginUserID(),\r\n                //     // \"ReceiptInvoices\": FilterReceiptInvoices,\r\n                //     // \"PaymentReceipt\": page_Mode === mode.modeSTPsave ? PaymentReceipt : []\r\n                // }\r\n                arr1.push(arr)\r\n            })\r\n            debugger\r\n            const jsonBody = JSON.stringify({\r\n                BulkData: arr1\r\n            })\r\n\r\n            if (pageMode === mode.edit) {\r\n                // dispatch(updatePartyMasterBulkID({ jsonBody, updateId: values.id, btnId }));\r\n            }\r\n            else {\r\n\r\n                dispatch(saveReceiptMaster({ jsonBody, btnId }));\r\n\r\n            }\r\n            // }\r\n        } catch (e) { btnIsDissablefunc({ btnId, state: false }) }\r\n    };\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    // const saveHandeller = async (event) => {\r\n    //     const arr1 = []\r\n\r\n    //     event.preventDefault();\r\n    //     const btnId = event.target.id;\r\n    //     try {\r\n    //         btnIsDissablefunc({ btnId, state: true })\r\n    //         Data.forEach(i => {\r\n    //             \r\n    //             const arr = {\r\n    //                 Customer: i.CustomerName,\r\n    //                 ReceiptDate: i.InvoiceDate,\r\n    //                 BillNo: i.FullInvoiceNumber,\r\n    //                 BalanceAmount: \"\",\r\n    //                 Grandtotal: i.Grandtotal,\r\n    //                 DocumentNo: i.ChequeNo,\r\n    //                 AdvancedAmountAjusted: \"\",\r\n    //                 Bank: i.BankName.value,\r\n    //                 // ChequeDate: i.ReceiptModeName.label === \"Cheque\" ? i.ChequeDate : \"\",\r\n    //                 DepositorBank: i.DepositorBankName.value,\r\n    //                 Party: loginPartyID(),\r\n    //                 ReceiptMode: i.ReceiptModeName.value,\r\n    //                 CreatedBy: loginUserID(),\r\n    //                 UpdatedBy: loginUserID(),\r\n    //                 // \"ReceiptInvoices\": FilterReceiptInvoices,\r\n    //                 // \"PaymentReceipt\": page_Mode === mode.modeSTPsave ? PaymentReceipt : []\r\n    //             }\r\n    //             arr1.push(arr)\r\n    //         })\r\n    //         const jsonBody = JSON.stringify({\r\n    //             BulkData: arr1\r\n    //         })\r\n\r\n    //         if (pageMode === mode.edit) {\r\n    //             // dispatch(updateCategoryID({ jsonBody, updateId: values.id, btnId }));\r\n    //         }\r\n    //         else {\r\n    //             dispatch(saveReceiptMaster({ jsonBody, btnId }));\r\n    //         }\r\n\r\n    //     } catch (e) { btnIsDissablefunc({ btnId, state: false }) }\r\n    // };\r\n    // IsEditMode_Css is use of module Edit_mode (reduce page-content marging)\r\n    var IsEditMode_Css = ''\r\n    if ((modalCss) || (pageMode === mode.dropdownAdd)) { IsEditMode_Css = \"-5.5%\" };\r\n\r\n    if (!(userPageAccessState === '')) {\r\n        return (\r\n            <React.Fragment>\r\n                <MetaTags> <title>{userAccess.PageHeading}| FoodERP-React FrontEnd</title></MetaTags>\r\n\r\n                <div className=\"page-content\" style={{ marginBottom: \"5cm\" }}>\r\n\r\n                    <form noValidate>\r\n                        <div className=\"px-2 c_card_filter header text-black mb-2\" >\r\n                            <div className=\" row \">\r\n                                <Col sm=\"6\">\r\n                                    <FormGroup className=\" row mt-2\" >\r\n                                        <Label className=\"col-sm-1 p-2\"\r\n                                            style={{ width: \"115px\", marginRight: \"0.4cm\" }}>Receipt Date</Label>\r\n                                        <Col sm=\"7\">\r\n                                            <Flatpickr\r\n                                                name='Date'\r\n                                                value={values.CurrentDate}\r\n                                                disabled={true}\r\n                                                className=\"form-control d-block p-2 bg-white text-dark\"\r\n                                                options={{\r\n                                                    altInput: true,\r\n                                                    altFormat: \"d-m-Y\",\r\n                                                    dateFormat: \"Y-m-d\",\r\n                                                }}\r\n                                            />\r\n                                        </Col>\r\n                                    </FormGroup>\r\n                                </Col >\r\n                                <Col sm=\"3\" className=\"\">\r\n                                    <FormGroup className=\" row mt-2 \" >\r\n                                        <Label className=\"col-sm-1 p-2\"\r\n                                            style={{ width: \"120px\" }}>Recepiet Mode :</Label>\r\n                                        <Col sm=\"3\">\r\n                                            <Label className=\" mt-2\">Cash</Label>\r\n                                        </Col>\r\n                                    </FormGroup>\r\n                                </Col>\r\n                            </div>\r\n                        </div>\r\n\r\n\r\n                        <ToolkitProvider\r\n\r\n                            keyField=\"id\"\r\n                            data={Data}\r\n                            columns={pagesListColumns}\r\n\r\n                            search\r\n                        >\r\n                            {toolkitProps => (\r\n                                <React.Fragment>\r\n                                    <div className=\"table\">\r\n                                        <BootstrapTable\r\n                                            keyField={\"id\"}\r\n                                            bordered={true}\r\n                                            striped={false}\r\n                                            noDataIndication={<div className=\"text-danger text-center \">Record Not available</div>}\r\n                                            classes={\"table align-middle table-nowrap table-hover\"}\r\n                                            headerWrapperClasses={\"thead-light\"}\r\n\r\n                                            {...toolkitProps.baseProps}\r\n\r\n                                        />\r\n\r\n                                        {mySearchProps(toolkitProps.searchProps)}\r\n                                    </div>\r\n\r\n                                </React.Fragment>\r\n                            )\r\n                            }\r\n                        </ToolkitProvider>\r\n\r\n                        {Data.length > 0 ?\r\n                            <FormGroup>\r\n                                <Col sm={2} style={{ marginLeft: \"-40px\" }} className={\"row save1\"}>\r\n                                    <SaveButton pageMode={pageMode}\r\n                                        onClick={SaveHandler}\r\n                                        userAcc={userPageAccessState}\r\n                                        editCreatedBy={editCreatedBy}\r\n                                        module={\"Receipts\"}\r\n                                    />\r\n\r\n                                </Col>\r\n                            </FormGroup >\r\n                            : null\r\n                        }\r\n\r\n                    </form >\r\n                </div >\r\n            </React.Fragment >\r\n        );\r\n    }\r\n    else {\r\n        return (\r\n            <React.Fragment></React.Fragment>\r\n        )\r\n    }\r\n};\r\n\r\nexport default BulkRecipt\r\n\r\n"],"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"},"metadata":{},"sourceType":"module"}