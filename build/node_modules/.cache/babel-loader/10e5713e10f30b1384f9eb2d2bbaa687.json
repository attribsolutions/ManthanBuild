{"ast":null,"code":"import { invoice } from \"../ReportIndex\";\nexport const columns = [\"SR\", \"HSN Item Name\", \"Quantity (UOM)\", \"MRP\", \"Rate\", \"Discount\", \"Discount Amount \", \"Taxable Amount\", \"          CGST           %        Amount\", \"CGST Amount\", \"          SGST           %        Amount\", \"SGST Amount\", \"Amount\"];\nexport const Footercolumn = [\"\"];\nexport const BilledBy = [\"Billed by\"];\nexport const BilledTo = [\"Billed by\"];\nexport const DetailsOfTransport = [\"Billed by\"];\nexport const Rows = data => {\n  const {\n    InvoiceItems = []\n  } = data;\n  InvoiceItems.sort((firstItem, secondItem) => firstItem.GSTPercentage - secondItem.GSTPercentage);\n  const returnArr = [];\n  let Gst = 0;\n  let totalBasicAmount = 0;\n  let totalCGst = 0;\n  let totalSGst = 0;\n  let totalAmount = 0;\n  let totalQuantity = 0;\n  let SrNO = 1;\n  let TotalGst = 0;\n  let GSTPercentage = 0;\n  const groupedItems = InvoiceItems.reduce((accumulator, currentItem) => {\n    const {\n      HSNCode,\n      ItemName,\n      MRP,\n      Rate,\n      Discount,\n      CGST,\n      SGST,\n      Amount,\n      DiscountAmount,\n      BasicAmount,\n      Quantity,\n      UnitName,\n      MRPValue,\n      CGSTPercentage,\n      SGSTPercentage,\n      GSTPercentage,\n      BatchCode,\n      BatchDate,\n      DiscountType\n    } = currentItem;\n    const key = ItemName + '_' + MRP;\n\n    if (accumulator[key]) {\n      accumulator[key].DiscountAmount += Number(DiscountAmount);\n      accumulator[key].Quantity += parseInt(Quantity);\n      accumulator[key].BasicAmount += Number(BasicAmount);\n      accumulator[key].CGST += Number(CGST);\n      accumulator[key].SGST += Number(SGST);\n      accumulator[key].Amount += parseInt(Amount);\n      accumulator[key].BatchCode += BatchCode;\n      accumulator[key].BatchDate += BatchDate;\n      accumulator[key].quantityString += ` ,  ${BatchCode} ${BatchDate} `;\n    } else {\n      accumulator[key] = {\n        ItemName,\n        HSNCode,\n        MRPValue,\n        DiscountType,\n        Rate,\n        Discount,\n        CGST: Number(CGST),\n        SGST: Number(SGST),\n        Amount: Number(Amount),\n        DiscountAmount: Number(DiscountAmount),\n        BasicAmount: Number(BasicAmount),\n        Quantity: parseInt(Quantity),\n        UnitName,\n        CGSTPercentage,\n        SGSTPercentage,\n        GSTPercentage,\n        BatchDate,\n        BatchCode: BatchCode,\n        BatchDate: BatchDate,\n        quantityString: `  ${BatchCode}  ${BatchDate}`\n      };\n    }\n\n    return accumulator;\n  }, {});\n  Object.values(groupedItems).forEach((element, key) => {\n    let HSNcodes = \"\";\n\n    if (data.SettingData.HSNCodeDigit.Value === \"1\") {\n      HSNcodes = element.HSNCode.slice(0, 4);\n    }\n\n    if (data.SettingData.HSNCodeDigit.Value === \"2\") {\n      HSNcodes = element.HSNCode.slice(0, 6);\n    }\n\n    if (data.SettingData.HSNCodeDigit.Value === \"3\") {\n      HSNcodes = element.HSNCode.slice(0, 8);\n    }\n\n    const tableitemRow = [SrNO++, `${HSNcodes} ${element.ItemName}`, `${Number(element.Quantity).toFixed(2)}${element.UnitName}`, element.MRPValue, element.Rate, `${element.Discount} ${element.DiscountType === \"1\" ? \"Rs\" : \"%\"}`, `${Number(element.DiscountAmount).toFixed(2)}`, element.BasicAmount, `${Number(element.CGSTPercentage).toFixed(1)}%`, element.CGST, `${Number(element.SGSTPercentage).toFixed(1)}%`, element.SGST, element.Amount];\n\n    function totalLots() {\n      totalQuantity = Number(totalQuantity) + Number(element.Quantity);\n      totalCGst = Number(totalCGst) + Number(element.CGST);\n      totalSGst = Number(totalSGst) + Number(element.SGST);\n      totalAmount = Number(totalAmount) + Number(element.Amount);\n      totalBasicAmount = Number(totalBasicAmount) + Number(element.BasicAmount);\n      TotalGst = totalCGst + totalSGst;\n      GSTPercentage = Number(element.CGSTPercentage) + Number(element.SGSTPercentage);\n      let cgst = data[\"tableTot\"].TotalCGst;\n      return {\n        TotalCGst: parseInt(totalCGst) + parseInt(cgst)\n      };\n    }\n\n    ;\n\n    function totalrow() {\n      return [\"\", ` GST ${parseFloat(GSTPercentage)}%  Total:${parseFloat(TotalGst).toFixed(2)} `, \" \", ``, \"\", \"\", ``, `${parseFloat(totalBasicAmount).toFixed(2)}`, `${parseFloat(totalCGst).toFixed(2)}`, \"isaddition\", `${parseFloat(totalSGst).toFixed(2)}`, \"\", `${parseFloat(totalAmount).toFixed(2)}`];\n    }\n\n    ;\n    const BatchRow = [`Batch:  ${element.quantityString} `, `Batch`, \" \", ``, \"\", \"\", \"\", \"\", ``, \"\", ``, \"\", ``];\n\n    if (Gst === 0) {\n      Gst = element.GSTPercentage;\n    }\n\n    ;\n    let aa = {\n      TotalCGst: 0,\n      totalSGst: 0\n    };\n\n    if (data[\"tableTot\"] === undefined) {\n      data[\"tableTot\"] = aa;\n    }\n\n    if (Gst === element.GSTPercentage) {\n      data[\"tableTot\"] = totalLots();\n      returnArr.push(tableitemRow);\n\n      if (data.SettingData.ShowBatchNoOnInvoicePrint.Value === \"1\") {\n        returnArr.push(BatchRow);\n      }\n    } else {\n      returnArr.push(totalrow());\n      returnArr.push(tableitemRow);\n      totalBasicAmount = 0;\n      totalCGst = 0;\n      totalSGst = 0;\n      totalAmount = 0;\n      totalQuantity = 0;\n      data[\"tableTot\"] = totalLots();\n      Gst = element.GSTPercentage;\n    }\n\n    if (key === Object.keys(groupedItems).length - 1) {\n      returnArr.push(totalrow());\n    }\n  });\n  return returnArr;\n};\n_c = Rows;\nexport const BilledByRow = data => {\n  var BilledByArray = [[`${data.PartyName}`], [`${data.PartyAddress}`], [`${data.PartyState}`], [`GSTIN:${data.PartyGSTIN}`], [`FSSAINo:${data.PartyFSSAINo}`]];\n  return BilledByArray;\n};\n_c2 = BilledByRow;\nexport const BilledToRow = data => {\n  var BilledToArray = [[`${data.CustomerName}`], [`${data.CustomerAddress}`], [`${data.CustomerState}`], [`GSTIN:${data.CustomerGSTIN}`], [`FSSAINo:${data.CustomerFSSAINo}`]];\n  return BilledToArray;\n};\n_c3 = BilledToRow;\nexport const DetailsOfTransportRow = data => {\n  let result = data.InvoicesReferences.map(a => a.FullOrderNumber);\n  const PONumber = result.toString();\n  var DetailsOfTransportArray = [[data.ReportType === invoice ? ` PO Number:${PONumber}` : data.DriverName === null ? \"Driver Name:\" : `Driver Name :${data.DriverName}`], [`vehical No :${data.VehicleNo === null ? \"\" : data.VehicleNo}`], [`E-way Bill :`], [`IRN NO :`]];\n  return DetailsOfTransportArray;\n}; // export const ReportHederRows = (data) => {\n//     var reportArray = [\n//         [, ,data.ReportType===invoice?`Purches Order No: 1`:'Driver Name : Sameer'],\n//         [`${data.PartyName}`, `${data.CustomerName}`,data.ReportType===invoice?`Driver Name : Sameer`:`vehical No :MH34566` ,],\n//         [`maharashtra`, `karnatak`,data.ReportType===invoice?`vehical No :MH34566`:`E-way Bill :24654364633` ],\n//         [`FSSAI :f23dfxxxxxwe55`, `FSSAI :ui3dfxxxxxwe55`, data.ReportType===invoice?`E-way Bill :24654364633`:`INR NO :${data.FullInvoiceNumber}`, ],\n//         [,,  data.ReportType===invoice?`INR NO :${data.FullInvoiceNumber}`:null]\n//     ]\n//     return reportArray;\n// }\n\n_c4 = DetailsOfTransportRow;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"Rows\");\n$RefreshReg$(_c2, \"BilledByRow\");\n$RefreshReg$(_c3, \"BilledToRow\");\n$RefreshReg$(_c4, \"DetailsOfTransportRow\");","map":{"version":3,"names":["invoice","columns","Footercolumn","BilledBy","BilledTo","DetailsOfTransport","Rows","data","InvoiceItems","sort","firstItem","secondItem","GSTPercentage","returnArr","Gst","totalBasicAmount","totalCGst","totalSGst","totalAmount","totalQuantity","SrNO","TotalGst","groupedItems","reduce","accumulator","currentItem","HSNCode","ItemName","MRP","Rate","Discount","CGST","SGST","Amount","DiscountAmount","BasicAmount","Quantity","UnitName","MRPValue","CGSTPercentage","SGSTPercentage","BatchCode","BatchDate","DiscountType","key","Number","parseInt","quantityString","Object","values","forEach","element","HSNcodes","SettingData","HSNCodeDigit","Value","slice","tableitemRow","toFixed","totalLots","cgst","TotalCGst","totalrow","parseFloat","BatchRow","aa","undefined","push","ShowBatchNoOnInvoicePrint","keys","length","BilledByRow","BilledByArray","PartyName","PartyAddress","PartyState","PartyGSTIN","PartyFSSAINo","BilledToRow","BilledToArray","CustomerName","CustomerAddress","CustomerState","CustomerGSTIN","CustomerFSSAINo","DetailsOfTransportRow","result","InvoicesReferences","map","a","FullOrderNumber","PONumber","toString","DetailsOfTransportArray","ReportType","DriverName","VehicleNo"],"sources":["D:/Rohit/Git projects/Manthan/src/Reports/Invoice report a5/TableData.js"],"sourcesContent":["import { invoice } from \"../ReportIndex\";\r\n\r\nexport const columns =[\r\n    \"SR\",\r\n    \"HSN Item Name\",\r\n    \"Quantity (UOM)\" ,\r\n    \"MRP\",\r\n    \"Rate\",\r\n    \"Discount\",\r\n    \"Discount Amount \",\r\n    \"Taxable Amount\",\r\n    \"          CGST           %        Amount\",\r\n    \"CGST Amount\",\r\n    \"          SGST           %        Amount\",\r\n    \"SGST Amount\",\r\n   \"Amount\" ,\r\n];\r\nexport const Footercolumn = [\r\n    \"\",\r\n]\r\n\r\n\r\nexport const BilledBy = [\r\n    \"Billed by\",  \r\n]\r\nexport const BilledTo = [\r\n    \"Billed by\",\r\n]\r\nexport const DetailsOfTransport = [\r\n    \"Billed by\",\r\n]\r\n\r\nexport const Rows = (data) => {\r\n    const { InvoiceItems = [] } = data\r\n    InvoiceItems.sort((firstItem, secondItem) => firstItem.GSTPercentage - secondItem.GSTPercentage);\r\n    const returnArr = [];\r\n    let Gst = 0\r\n    let totalBasicAmount = 0\r\n    let totalCGst = 0\r\n    let totalSGst = 0\r\n    let totalAmount = 0\r\n    let totalQuantity = 0\r\n    let SrNO = 1\r\n    let TotalGst = 0\r\n    let GSTPercentage=0\r\n\r\n    const groupedItems = InvoiceItems.reduce((accumulator, currentItem) => {\r\n        \r\n        const {HSNCode, ItemName, MRP, Rate, Discount, CGST,SGST,Amount,DiscountAmount,BasicAmount, Quantity, UnitName, MRPValue, CGSTPercentage,SGSTPercentage,GSTPercentage,BatchCode,BatchDate,DiscountType} = currentItem;\r\n        const key = ItemName + '_' + MRP;\r\n        if (accumulator[key]) {\r\n            accumulator[key].DiscountAmount += Number(DiscountAmount);\r\n            accumulator[key].Quantity += parseInt(Quantity);\r\n            accumulator[key].BasicAmount += Number(BasicAmount);\r\n            accumulator[key].CGST += Number(CGST);\r\n            accumulator[key].SGST += Number(SGST);\r\n            accumulator[key].Amount += parseInt(Amount);\r\n            accumulator[key].BatchCode += BatchCode ;\r\n            accumulator[key].BatchDate += BatchDate ;\r\n            accumulator[key].quantityString += ` ,  ${BatchCode} ${BatchDate} `;\r\n\r\n        } else {\r\n            accumulator[key] = { ItemName,HSNCode,\r\n                 MRPValue, DiscountType, Rate, Discount, CGST:Number(CGST),SGST: Number(SGST),Amount:Number(Amount),DiscountAmount:Number(DiscountAmount),BasicAmount:Number(BasicAmount), Quantity:parseInt(Quantity), UnitName ,CGSTPercentage,SGSTPercentage,GSTPercentage,BatchDate,BatchCode:BatchCode,BatchDate:BatchDate,quantityString:`  ${BatchCode}  ${BatchDate}`};\r\n        }\r\n        return accumulator;\r\n    }, {});\r\n\r\n    Object.values(groupedItems).forEach((element, key) => {\r\n        let  HSNcodes =\"\"\r\nif (data.SettingData.HSNCodeDigit.Value=== \"1\") {\r\n     HSNcodes = element.HSNCode.slice(0, 4);\r\n}\r\nif (data.SettingData.HSNCodeDigit.Value=== \"2\") {\r\n     HSNcodes = element.HSNCode.slice(0, 6);\r\n}\r\nif (data.SettingData.HSNCodeDigit.Value=== \"3\") {\r\n     HSNcodes = element.HSNCode.slice(0, 8);\r\n}\r\n   \r\n        const tableitemRow = [\r\n            SrNO++,\r\n            `${HSNcodes} ${element.ItemName}` ,\r\n            `${Number(element.Quantity).toFixed(2)}${element.UnitName}`,\r\n            element.MRPValue,\r\n            element.Rate,\r\n            `${element.Discount} ${element.DiscountType=== \"1\"? \"Rs\":\"%\" }`,\r\n            `${Number(element.DiscountAmount).toFixed(2)}`,\r\n            element.BasicAmount,\r\n            `${Number(element.CGSTPercentage).toFixed(1)}%`,\r\n            element.CGST,\r\n            `${Number(element.SGSTPercentage).toFixed(1)}%`,\r\n            element.SGST,\r\n            element.Amount,\r\n        ];\r\n\r\n        function totalLots() {\r\n            totalQuantity = Number(totalQuantity) + Number(element.Quantity)\r\n            totalCGst = Number(totalCGst) + Number(element.CGST)\r\n            totalSGst = Number(totalSGst) + Number(element.SGST)\r\n            totalAmount = Number(totalAmount) + Number( element.Amount)\r\n            totalBasicAmount = Number(totalBasicAmount) + Number(element.BasicAmount)\r\n            TotalGst =totalCGst +totalSGst;\r\n            GSTPercentage = Number(element.CGSTPercentage) + Number(element.SGSTPercentage)\r\n            let cgst = data[\"tableTot\"].TotalCGst\r\n            return ({ TotalCGst: parseInt(totalCGst) + parseInt(cgst)})\r\n          \r\n        };\r\n\r\n         \r\n        function totalrow() {\r\n        \r\n            return [\r\n                \"\",\r\n                ` GST ${(parseFloat(GSTPercentage))}%  Total:${(parseFloat(TotalGst).toFixed(2))} `,\r\n                \" \",\r\n                ``,\r\n                \"\",\r\n                \"\",\r\n                ``,\r\n                `${parseFloat(totalBasicAmount).toFixed(2)}`,\r\n                `${parseFloat(totalCGst).toFixed(2)}`,\r\n                \"isaddition\",\r\n                `${parseFloat(totalSGst).toFixed(2)}`,\r\n                \"\",\r\n                `${parseFloat(totalAmount).toFixed(2)}`,\r\n            ];\r\n        };\r\n        const BatchRow =[\r\n            `Batch:  ${element.quantityString} `,\r\n            `Batch`,\r\n            \" \",\r\n            ``,\r\n            \"\",\r\n            \"\",\r\n            \"\",\r\n            \"\",\r\n            ``,\r\n            \"\",\r\n            ``,\r\n            \"\",\r\n            ``,\r\n        ]\r\n\r\n        if (Gst === 0) { Gst = element.GSTPercentage };\r\n        let aa = { TotalCGst: 0, totalSGst: 0 }\r\n        if (data[\"tableTot\"] === undefined) { data[\"tableTot\"] = aa }\r\n        if ((Gst === element.GSTPercentage)) {\r\n            data[\"tableTot\"] = totalLots()\r\n            returnArr.push(tableitemRow);\r\n            if (data.SettingData.ShowBatchNoOnInvoicePrint.Value=== \"1\") {\r\n                returnArr.push((BatchRow))\r\n            }\r\n          \r\n        }\r\n        else {\r\n            returnArr.push(totalrow());\r\n            returnArr.push(tableitemRow);\r\n            totalBasicAmount = 0\r\n            totalCGst = 0\r\n            totalSGst = 0\r\n            totalAmount = 0\r\n            totalQuantity = 0\r\n\r\n            data[\"tableTot\"] = totalLots()\r\n            Gst = element.GSTPercentage;\r\n        }\r\n        \r\n        if (key === Object.keys(groupedItems).length - 1) {\r\n          \r\n            returnArr.push(totalrow());\r\n        }\r\n    })\r\n    return returnArr;\r\n}\r\n\r\n\r\nexport const BilledByRow = (data) => {\r\n    \r\n    \r\n    var BilledByArray = [\r\n       \r\n        [`${data.PartyName}`], \r\n        [`${data.PartyAddress}`]  ,\r\n        [`${data.PartyState}`],\r\n        [`GSTIN:${data.PartyGSTIN}`],\r\n        [`FSSAINo:${data.PartyFSSAINo}`],\r\n    ]\r\n    return BilledByArray;\r\n} \r\nexport const BilledToRow = (data) => {\r\n    \r\n    \r\n    var BilledToArray = [\r\n        [`${data.CustomerName}`],\r\n        [`${data.CustomerAddress}`]  ,\r\n        [`${data.CustomerState}`],\r\n        [`GSTIN:${data.CustomerGSTIN}`,],\r\n        [`FSSAINo:${data.CustomerFSSAINo}`],\r\n    ]\r\n  \r\n    return BilledToArray;\r\n}\r\nexport const DetailsOfTransportRow = (data) => {\r\n\r\n\r\nlet result = data.InvoicesReferences.map(a => a.FullOrderNumber);\r\n    const PONumber =result.toString()\r\n    var DetailsOfTransportArray = [\r\n        [data.ReportType===invoice?` PO Number:${PONumber}`:data.DriverName ===null?\"Driver Name:\": `Driver Name :${data.DriverName}`],\r\n        [`vehical No :${data.VehicleNo === null ?\"\":data.VehicleNo}`],\r\n        [`E-way Bill :`],\r\n        [`IRN NO :`]\r\n    ]\r\n  \r\n    return DetailsOfTransportArray;\r\n}\r\n\r\n\r\n\r\n// export const ReportHederRows = (data) => {\r\n   \r\n//     var reportArray = [\r\n//         [, ,data.ReportType===invoice?`Purches Order No: 1`:'Driver Name : Sameer'],\r\n//         [`${data.PartyName}`, `${data.CustomerName}`,data.ReportType===invoice?`Driver Name : Sameer`:`vehical No :MH34566` ,],\r\n//         [`maharashtra`, `karnatak`,data.ReportType===invoice?`vehical No :MH34566`:`E-way Bill :24654364633` ],\r\n//         [`FSSAI :f23dfxxxxxwe55`, `FSSAI :ui3dfxxxxxwe55`, data.ReportType===invoice?`E-way Bill :24654364633`:`INR NO :${data.FullInvoiceNumber}`, ],\r\n//         [,,  data.ReportType===invoice?`INR NO :${data.FullInvoiceNumber}`:null]\r\n//     ]\r\n//     return reportArray;\r\n// }\r\n\r\n\r\n\r\n\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}