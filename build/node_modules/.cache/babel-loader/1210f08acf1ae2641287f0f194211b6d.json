{"ast":null,"code":"// var a = ['', 'One ', 'Two ', 'Three ', 'Four ', 'Five ', 'Six ', 'Seven ', 'Eight ', 'Nine ', 'Ten ', 'Eleven ', 'Twelve ', 'Thirteen ', 'Fourteen ', 'Fifteen ', 'Sixteen ', 'Seventeen ', 'Eighteen ', 'Nineteen '];\n// var b = ['', '', 'Twenty', 'Thirty', 'Forty', 'Fifty', 'Sixty', 'Seventy', 'Eighty', 'Ninety'];\n// export function toWords(num) {\n//   debugger\n//   if ((num = num.toString()).length > 9) return 'overflow';\n//   const n = ('000000000' + num).substr(-9).match(/^(\\d{2})(\\d{2})(\\d{2})(\\d{1})(\\d{2})$/);\n//   if (!n) return; var str = '';\n//   str += (n[1] != 0) ? (a[Number(n[1])] || b[n[1][0]] + ' ' + a[n[1][1]]) + 'Crore ' : '';\n//   str += (n[2] != 0) ? (a[Number(n[2])] || b[n[2][0]] + ' ' + a[n[2][1]]) + 'Lakh ' : '';\n//   str += (n[3] != 0) ? (a[Number(n[3])] || b[n[3][0]] + ' ' + a[n[3][1]]) + 'Thousand ' : '';\n//   str += (n[4] != 0) ? (a[Number(n[4])] || b[n[4][0]] + ' ' + a[n[4][1]]) + 'Hundred ' : '';\n//   str += (n[5] != 0) ? ((str != '') ? 'and ' : '') + (a[Number(n[5])] || b[n[5][0]] + ' ' + a[n[5][1]]) + 'only' : '';\n//   return str;\n// }\nexport function numberWithCommas(x) {\n  return x.toString().split('.')[0].length > 3 ? x.toString().substring(0, x.toString().split('.')[0].length - 3).replace(/\\B(?=(\\d{2})+(?!\\d))/g, \",\") + \",\" + x.toString().substring(x.toString().split('.')[0].length - 3) : x.toString();\n}\nexport function toWords(number) {\n  // Define word mappings\n  const units = ['', 'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'];\n  const tens = ['', '', 'Twenty', 'Thirty', 'Forty', 'Fifty', 'Sixty', 'Seventy', 'Eighty', 'Ninety'];\n  const teens = ['Ten', 'Eleven', 'Twelve', 'Thirteen', 'Fourteen', 'Fifteen', 'Sixteen', 'Seventeen', 'Eighteen', 'Nineteen']; // Function to convert a given three-digit number to words\n\n  function convertThreeDigits(num) {\n    let word = '';\n    const hundred = Math.floor(num / 100);\n    num %= 100;\n\n    if (hundred !== 0) {\n      word += units[hundred] + ' Hundred ';\n    }\n\n    if (num >= 10 && num <= 19) {\n      word += teens[num - 10] + ' ';\n    } else {\n      const ten = Math.floor(num / 10);\n      num %= 10;\n\n      if (ten !== 0) {\n        word += tens[ten] + ' ';\n      }\n\n      if (num !== 0) {\n        word += units[num] + ' ';\n      }\n    }\n\n    return word.trim();\n  } // Check if the number is zero\n\n\n  if (number === 0) {\n    return 'Zero Rupees Only';\n  } // Separate the whole and decimal parts of the number\n\n\n  let wholePart = Math.floor(number);\n  let decimalPart = Math.round((number - wholePart) * 100); // Convert the whole part to words\n\n  const crore = Math.floor(wholePart / 10000000);\n  wholePart %= 10000000;\n  const lakh = Math.floor(wholePart / 100000);\n  wholePart %= 100000;\n  const thousand = Math.floor(wholePart / 1000);\n  const remaining = wholePart % 1000;\n  let rupeesWords = '';\n\n  if (crore !== 0) {\n    rupeesWords += convertThreeDigits(crore) + ' Crore ';\n  }\n\n  if (lakh !== 0) {\n    rupeesWords += convertThreeDigits(lakh) + ' Lakh ';\n  }\n\n  if (thousand !== 0) {\n    rupeesWords += convertThreeDigits(thousand) + ' Thousand ';\n  }\n\n  if (remaining !== 0) {\n    rupeesWords += convertThreeDigits(remaining);\n  } // Construct the final representation\n\n\n  rupeesWords += ' Rupees';\n\n  if (decimalPart !== 0) {\n    rupeesWords += ' and ' + convertThreeDigits(decimalPart) + ' Paise';\n  }\n\n  rupeesWords += ' Only';\n  return rupeesWords;\n}","map":{"version":3,"names":["numberWithCommas","x","toString","split","length","substring","replace","toWords","number","units","tens","teens","convertThreeDigits","num","word","hundred","Math","floor","ten","trim","wholePart","decimalPart","round","crore","lakh","thousand","remaining","rupeesWords"],"sources":["D:/Rohit/Git projects/Manthan/src/Reports/Report_common_function.js"],"sourcesContent":["\r\n// var a = ['', 'One ', 'Two ', 'Three ', 'Four ', 'Five ', 'Six ', 'Seven ', 'Eight ', 'Nine ', 'Ten ', 'Eleven ', 'Twelve ', 'Thirteen ', 'Fourteen ', 'Fifteen ', 'Sixteen ', 'Seventeen ', 'Eighteen ', 'Nineteen '];\r\n// var b = ['', '', 'Twenty', 'Thirty', 'Forty', 'Fifty', 'Sixty', 'Seventy', 'Eighty', 'Ninety'];\r\n\r\n// export function toWords(num) {\r\n//   debugger\r\n//   if ((num = num.toString()).length > 9) return 'overflow';\r\n//   const n = ('000000000' + num).substr(-9).match(/^(\\d{2})(\\d{2})(\\d{2})(\\d{1})(\\d{2})$/);\r\n\r\n//   if (!n) return; var str = '';\r\n//   str += (n[1] != 0) ? (a[Number(n[1])] || b[n[1][0]] + ' ' + a[n[1][1]]) + 'Crore ' : '';\r\n//   str += (n[2] != 0) ? (a[Number(n[2])] || b[n[2][0]] + ' ' + a[n[2][1]]) + 'Lakh ' : '';\r\n//   str += (n[3] != 0) ? (a[Number(n[3])] || b[n[3][0]] + ' ' + a[n[3][1]]) + 'Thousand ' : '';\r\n//   str += (n[4] != 0) ? (a[Number(n[4])] || b[n[4][0]] + ' ' + a[n[4][1]]) + 'Hundred ' : '';\r\n//   str += (n[5] != 0) ? ((str != '') ? 'and ' : '') + (a[Number(n[5])] || b[n[5][0]] + ' ' + a[n[5][1]]) + 'only' : '';\r\n//   return str;\r\n// }\r\n\r\n\r\nexport function numberWithCommas(x) {\r\n  return x.toString().split('.')[0].length > 3 ? x.toString().substring(0, x.toString().split('.')[0].length - 3).replace(/\\B(?=(\\d{2})+(?!\\d))/g, \",\") + \",\" + x.toString().substring(x.toString().split('.')[0].length - 3) : x.toString();\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport function toWords(number) {\r\n  // Define word mappings\r\n  const units = ['', 'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'];\r\n  const tens = ['', '', 'Twenty', 'Thirty', 'Forty', 'Fifty', 'Sixty', 'Seventy', 'Eighty', 'Ninety'];\r\n  const teens = ['Ten', 'Eleven', 'Twelve', 'Thirteen', 'Fourteen', 'Fifteen', 'Sixteen', 'Seventeen', 'Eighteen', 'Nineteen'];\r\n\r\n  // Function to convert a given three-digit number to words\r\n  function convertThreeDigits(num) {\r\n    let word = '';\r\n    const hundred = Math.floor(num / 100);\r\n    num %= 100;\r\n    if (hundred !== 0) {\r\n      word += units[hundred] + ' Hundred ';\r\n    }\r\n    if (num >= 10 && num <= 19) {\r\n      word += teens[num - 10] + ' ';\r\n    } else {\r\n      const ten = Math.floor(num / 10);\r\n      num %= 10;\r\n      if (ten !== 0) {\r\n        word += tens[ten] + ' ';\r\n      }\r\n      if (num !== 0) {\r\n        word += units[num] + ' ';\r\n      }\r\n    }\r\n    return word.trim();\r\n  }\r\n\r\n  // Check if the number is zero\r\n  if (number === 0) {\r\n    return 'Zero Rupees Only';\r\n  }\r\n\r\n  // Separate the whole and decimal parts of the number\r\n  let wholePart = Math.floor(number);\r\n  let decimalPart = Math.round((number - wholePart) * 100);\r\n\r\n  // Convert the whole part to words\r\n  const crore = Math.floor(wholePart / 10000000);\r\n  wholePart %= 10000000;\r\n  const lakh = Math.floor(wholePart / 100000);\r\n  wholePart %= 100000;\r\n  const thousand = Math.floor(wholePart / 1000);\r\n  const remaining = wholePart % 1000;\r\n\r\n  let rupeesWords = '';\r\n\r\n  if (crore !== 0) {\r\n    rupeesWords += convertThreeDigits(crore) + ' Crore ';\r\n  }\r\n\r\n  if (lakh !== 0) {\r\n    rupeesWords += convertThreeDigits(lakh) + ' Lakh ';\r\n  }\r\n\r\n  if (thousand !== 0) {\r\n    rupeesWords += convertThreeDigits(thousand) + ' Thousand ';\r\n  }\r\n\r\n  if (remaining !== 0) {\r\n    rupeesWords += convertThreeDigits(remaining);\r\n  }\r\n\r\n  // Construct the final representation\r\n  rupeesWords += ' Rupees';\r\n\r\n  if (decimalPart !== 0) {\r\n    rupeesWords += ' and ' + convertThreeDigits(decimalPart) + ' Paise';\r\n  }\r\n\r\n  rupeesWords += ' Only';\r\n  return rupeesWords;\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}