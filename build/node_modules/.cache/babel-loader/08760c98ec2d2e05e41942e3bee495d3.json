{"ast":null,"code":"'use strict';\n\nvar isNumeric = require('fast-isnumeric');\n\nvar toLogRange = require('../../lib/to_log_range');\n/*\n * convertCoords: when converting an axis between log and linear\n * you need to alter any images on that axis to keep them\n * pointing at the same data point.\n * In v3.0 this will become obsolete (or perhaps size will still need conversion?)\n * we convert size by declaring that the maximum extent *in data units* should be\n * the same, assuming the image is anchored by its center (could remove that restriction\n * if we think it's important) even though the actual left and right values will not be\n * quite the same since the scale becomes nonlinear (and central anchor means the pixel\n * center of the image, not the data units center)\n *\n * gd: the plot div\n * ax: the axis being changed\n * newType: the type it's getting\n * doExtra: function(attr, val) from inside relayout that sets the attribute.\n *     Use this to make the changes as it's aware if any other changes in the\n *     same relayout call should override this conversion.\n */\n\n\nmodule.exports = function convertCoords(gd, ax, newType, doExtra) {\n  ax = ax || {};\n  var toLog = newType === 'log' && ax.type === 'linear';\n  var fromLog = newType === 'linear' && ax.type === 'log';\n  if (!(toLog || fromLog)) return;\n  var images = gd._fullLayout.images;\n\n  var axLetter = ax._id.charAt(0);\n\n  var image;\n  var attrPrefix;\n\n  for (var i = 0; i < images.length; i++) {\n    image = images[i];\n    attrPrefix = 'images[' + i + '].';\n\n    if (image[axLetter + 'ref'] === ax._id) {\n      var currentPos = image[axLetter];\n      var currentSize = image['size' + axLetter];\n      var newPos = null;\n      var newSize = null;\n\n      if (toLog) {\n        newPos = toLogRange(currentPos, ax.range); // this is the inverse of the conversion we do in fromLog below\n        // so that the conversion is reversible (notice the fromLog conversion\n        // is like sinh, and this one looks like arcsinh)\n\n        var dx = currentSize / Math.pow(10, newPos) / 2;\n        newSize = 2 * Math.log(dx + Math.sqrt(1 + dx * dx)) / Math.LN10;\n      } else {\n        newPos = Math.pow(10, currentPos);\n        newSize = newPos * (Math.pow(10, currentSize / 2) - Math.pow(10, -currentSize / 2));\n      } // if conversion failed, delete the value so it can get a default later on\n\n\n      if (!isNumeric(newPos)) {\n        newPos = null;\n        newSize = null;\n      } else if (!isNumeric(newSize)) newSize = null;\n\n      doExtra(attrPrefix + axLetter, newPos);\n      doExtra(attrPrefix + 'size' + axLetter, newSize);\n    }\n  }\n};","map":{"version":3,"names":["isNumeric","require","toLogRange","module","exports","convertCoords","gd","ax","newType","doExtra","toLog","type","fromLog","images","_fullLayout","axLetter","_id","charAt","image","attrPrefix","i","length","currentPos","currentSize","newPos","newSize","range","dx","Math","pow","log","sqrt","LN10"],"sources":["D:/Rohit/Git projects/Manthan/node_modules/plotly.js/src/components/images/convert_coords.js"],"sourcesContent":["'use strict';\n\nvar isNumeric = require('fast-isnumeric');\nvar toLogRange = require('../../lib/to_log_range');\n\n/*\n * convertCoords: when converting an axis between log and linear\n * you need to alter any images on that axis to keep them\n * pointing at the same data point.\n * In v3.0 this will become obsolete (or perhaps size will still need conversion?)\n * we convert size by declaring that the maximum extent *in data units* should be\n * the same, assuming the image is anchored by its center (could remove that restriction\n * if we think it's important) even though the actual left and right values will not be\n * quite the same since the scale becomes nonlinear (and central anchor means the pixel\n * center of the image, not the data units center)\n *\n * gd: the plot div\n * ax: the axis being changed\n * newType: the type it's getting\n * doExtra: function(attr, val) from inside relayout that sets the attribute.\n *     Use this to make the changes as it's aware if any other changes in the\n *     same relayout call should override this conversion.\n */\nmodule.exports = function convertCoords(gd, ax, newType, doExtra) {\n    ax = ax || {};\n\n    var toLog = (newType === 'log') && (ax.type === 'linear');\n    var fromLog = (newType === 'linear') && (ax.type === 'log');\n\n    if(!(toLog || fromLog)) return;\n\n    var images = gd._fullLayout.images;\n    var axLetter = ax._id.charAt(0);\n    var image;\n    var attrPrefix;\n\n    for(var i = 0; i < images.length; i++) {\n        image = images[i];\n        attrPrefix = 'images[' + i + '].';\n\n        if(image[axLetter + 'ref'] === ax._id) {\n            var currentPos = image[axLetter];\n            var currentSize = image['size' + axLetter];\n            var newPos = null;\n            var newSize = null;\n\n            if(toLog) {\n                newPos = toLogRange(currentPos, ax.range);\n\n                // this is the inverse of the conversion we do in fromLog below\n                // so that the conversion is reversible (notice the fromLog conversion\n                // is like sinh, and this one looks like arcsinh)\n                var dx = currentSize / Math.pow(10, newPos) / 2;\n                newSize = 2 * Math.log(dx + Math.sqrt(1 + dx * dx)) / Math.LN10;\n            } else {\n                newPos = Math.pow(10, currentPos);\n                newSize = newPos * (Math.pow(10, currentSize / 2) - Math.pow(10, -currentSize / 2));\n            }\n\n            // if conversion failed, delete the value so it can get a default later on\n            if(!isNumeric(newPos)) {\n                newPos = null;\n                newSize = null;\n            } else if(!isNumeric(newSize)) newSize = null;\n\n            doExtra(attrPrefix + axLetter, newPos);\n            doExtra(attrPrefix + 'size' + axLetter, newSize);\n        }\n    }\n};\n"],"mappings":"AAAA;;AAEA,IAAIA,SAAS,GAAGC,OAAO,CAAC,gBAAD,CAAvB;;AACA,IAAIC,UAAU,GAAGD,OAAO,CAAC,wBAAD,CAAxB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAE,MAAM,CAACC,OAAP,GAAiB,SAASC,aAAT,CAAuBC,EAAvB,EAA2BC,EAA3B,EAA+BC,OAA/B,EAAwCC,OAAxC,EAAiD;EAC9DF,EAAE,GAAGA,EAAE,IAAI,EAAX;EAEA,IAAIG,KAAK,GAAIF,OAAO,KAAK,KAAb,IAAwBD,EAAE,CAACI,IAAH,KAAY,QAAhD;EACA,IAAIC,OAAO,GAAIJ,OAAO,KAAK,QAAb,IAA2BD,EAAE,CAACI,IAAH,KAAY,KAArD;EAEA,IAAG,EAAED,KAAK,IAAIE,OAAX,CAAH,EAAwB;EAExB,IAAIC,MAAM,GAAGP,EAAE,CAACQ,WAAH,CAAeD,MAA5B;;EACA,IAAIE,QAAQ,GAAGR,EAAE,CAACS,GAAH,CAAOC,MAAP,CAAc,CAAd,CAAf;;EACA,IAAIC,KAAJ;EACA,IAAIC,UAAJ;;EAEA,KAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGP,MAAM,CAACQ,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;IACnCF,KAAK,GAAGL,MAAM,CAACO,CAAD,CAAd;IACAD,UAAU,GAAG,YAAYC,CAAZ,GAAgB,IAA7B;;IAEA,IAAGF,KAAK,CAACH,QAAQ,GAAG,KAAZ,CAAL,KAA4BR,EAAE,CAACS,GAAlC,EAAuC;MACnC,IAAIM,UAAU,GAAGJ,KAAK,CAACH,QAAD,CAAtB;MACA,IAAIQ,WAAW,GAAGL,KAAK,CAAC,SAASH,QAAV,CAAvB;MACA,IAAIS,MAAM,GAAG,IAAb;MACA,IAAIC,OAAO,GAAG,IAAd;;MAEA,IAAGf,KAAH,EAAU;QACNc,MAAM,GAAGtB,UAAU,CAACoB,UAAD,EAAaf,EAAE,CAACmB,KAAhB,CAAnB,CADM,CAGN;QACA;QACA;;QACA,IAAIC,EAAE,GAAGJ,WAAW,GAAGK,IAAI,CAACC,GAAL,CAAS,EAAT,EAAaL,MAAb,CAAd,GAAqC,CAA9C;QACAC,OAAO,GAAG,IAAIG,IAAI,CAACE,GAAL,CAASH,EAAE,GAAGC,IAAI,CAACG,IAAL,CAAU,IAAIJ,EAAE,GAAGA,EAAnB,CAAd,CAAJ,GAA4CC,IAAI,CAACI,IAA3D;MACH,CARD,MAQO;QACHR,MAAM,GAAGI,IAAI,CAACC,GAAL,CAAS,EAAT,EAAaP,UAAb,CAAT;QACAG,OAAO,GAAGD,MAAM,IAAII,IAAI,CAACC,GAAL,CAAS,EAAT,EAAaN,WAAW,GAAG,CAA3B,IAAgCK,IAAI,CAACC,GAAL,CAAS,EAAT,EAAa,CAACN,WAAD,GAAe,CAA5B,CAApC,CAAhB;MACH,CAjBkC,CAmBnC;;;MACA,IAAG,CAACvB,SAAS,CAACwB,MAAD,CAAb,EAAuB;QACnBA,MAAM,GAAG,IAAT;QACAC,OAAO,GAAG,IAAV;MACH,CAHD,MAGO,IAAG,CAACzB,SAAS,CAACyB,OAAD,CAAb,EAAwBA,OAAO,GAAG,IAAV;;MAE/BhB,OAAO,CAACU,UAAU,GAAGJ,QAAd,EAAwBS,MAAxB,CAAP;MACAf,OAAO,CAACU,UAAU,GAAG,MAAb,GAAsBJ,QAAvB,EAAiCU,OAAjC,CAAP;IACH;EACJ;AACJ,CA9CD"},"metadata":{},"sourceType":"script"}