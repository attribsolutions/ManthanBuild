{"ast":null,"code":"import { call, put, takeEvery } from \"redux-saga/effects\";\nimport { postTermAndConditionSuccess, getTermAndCondition_Success, DeleteTermsAndCondtions_Success, EditTermsAndCondtions_Success, UpdateTermsAndCondtions_Success } from \"./actions\";\nimport { Post_TermsAndCondtions_Master_API, get_TermsAndCondtionsList_API, del_TermsAndCondtions_Master_API, edit_TermsAndCondtions_Master_API, update_TermsAndCondtions_Master_API } from \"../../../helpers/backend_helper\";\nimport { SpinnerState } from \"../../Utilites/Spinner/actions\";\nimport { POST_METHOD_HANDLER_FOR_TERMSANDCONDITIONS_MASTER_API, GET_METHOD_FOR_TERMSANDCONDITIONSLIST_API, DELETE_METHOD_FOR_TERMSANDCONDITIONSLIST_API, EDIT_METHOD_FOR_TERMSANDCONDITIONSLIST_API, UPDATE_METHOD_FOR_TERMSANDCONDITIONSLIST_API } from \"./actionTypes\";\nimport { AlertState } from \"../../actions\"; // post api\n\nfunction* Post_Method_ForTermsAndCondtionsMaster_GenFun(_ref) {\n  let {\n    data\n  } = _ref;\n\n  try {\n    const response = yield call(Post_TermsAndCondtions_Master_API, data);\n    yield put(postTermAndConditionSuccess(response));\n  } catch (error) {\n    yield put(AlertState({\n      Type: 4,\n      Status: true,\n      Message: \"500 Error Message\"\n    }));\n  }\n} // Get List Page API\n\n\n_c = Post_Method_ForTermsAndCondtionsMaster_GenFun;\n\nfunction* Get_TermsAndCondtions_GenratorFunction() {\n  try {\n    const response = yield call(get_TermsAndCondtionsList_API);\n    yield put(getTermAndCondition_Success(response.Data));\n  } catch (error) {\n    yield put(AlertState({\n      Type: 4,\n      Status: true,\n      Message: \"500 Error Message\"\n    }));\n  }\n} // delete api \n\n\n_c2 = Get_TermsAndCondtions_GenratorFunction;\n\nfunction* Delete_TermsAndCondtions_GenratorFunction(_ref2) {\n  let {\n    id\n  } = _ref2;\n\n  try {\n    const response = yield call(del_TermsAndCondtions_Master_API, id);\n    yield put(DeleteTermsAndCondtions_Success(response));\n  } catch (error) {\n    yield put(AlertState({\n      Type: 4,\n      Status: true,\n      Message: \"500 Error Message\"\n    }));\n  }\n} // edit api\n\n\n_c3 = Delete_TermsAndCondtions_GenratorFunction;\n\nfunction* Edit_TermsAndCondtions_GenratorFunction(_ref3) {\n  let {\n    id,\n    pageMode\n  } = _ref3;\n\n  try {\n    const response = yield call(edit_TermsAndCondtions_Master_API, id);\n    response.pageMode = pageMode;\n    yield put(EditTermsAndCondtions_Success(response));\n  } catch (error) {\n    yield put(AlertState({\n      Type: 4,\n      Status: true,\n      Message: \"500 Error Message\"\n    }));\n  }\n} // update api\n\n\n_c4 = Edit_TermsAndCondtions_GenratorFunction;\n\nfunction* update_TermsAndCondtions_GenratorFunction(_ref4) {\n  let {\n    updateData,\n    ID\n  } = _ref4;\n\n  try {\n    const response = yield call(update_TermsAndCondtions_Master_API, updateData, ID);\n    yield put(UpdateTermsAndCondtions_Success(response));\n  } catch (error) {\n    yield put(AlertState({\n      Type: 4,\n      Status: true,\n      Message: \"500 Error Message\"\n    }));\n  }\n}\n\nfunction* TermsAndConditionsSaga() {\n  yield takeEvery(POST_METHOD_HANDLER_FOR_TERMSANDCONDITIONS_MASTER_API, Post_Method_ForTermsAndCondtionsMaster_GenFun);\n  yield takeEvery(GET_METHOD_FOR_TERMSANDCONDITIONSLIST_API, Get_TermsAndCondtions_GenratorFunction);\n  yield takeEvery(DELETE_METHOD_FOR_TERMSANDCONDITIONSLIST_API, Delete_TermsAndCondtions_GenratorFunction);\n  yield takeEvery(EDIT_METHOD_FOR_TERMSANDCONDITIONSLIST_API, Edit_TermsAndCondtions_GenratorFunction);\n  yield takeEvery(UPDATE_METHOD_FOR_TERMSANDCONDITIONSLIST_API, update_TermsAndCondtions_GenratorFunction);\n}\n\n_c5 = TermsAndConditionsSaga;\nexport default TermsAndConditionsSaga;\n\nvar _c, _c2, _c3, _c4, _c5;\n\n$RefreshReg$(_c, \"Post_Method_ForTermsAndCondtionsMaster_GenFun\");\n$RefreshReg$(_c2, \"Get_TermsAndCondtions_GenratorFunction\");\n$RefreshReg$(_c3, \"Delete_TermsAndCondtions_GenratorFunction\");\n$RefreshReg$(_c4, \"Edit_TermsAndCondtions_GenratorFunction\");\n$RefreshReg$(_c5, \"TermsAndConditionsSaga\");","map":{"version":3,"names":["call","put","takeEvery","postTermAndConditionSuccess","getTermAndCondition_Success","DeleteTermsAndCondtions_Success","EditTermsAndCondtions_Success","UpdateTermsAndCondtions_Success","Post_TermsAndCondtions_Master_API","get_TermsAndCondtionsList_API","del_TermsAndCondtions_Master_API","edit_TermsAndCondtions_Master_API","update_TermsAndCondtions_Master_API","SpinnerState","POST_METHOD_HANDLER_FOR_TERMSANDCONDITIONS_MASTER_API","GET_METHOD_FOR_TERMSANDCONDITIONSLIST_API","DELETE_METHOD_FOR_TERMSANDCONDITIONSLIST_API","EDIT_METHOD_FOR_TERMSANDCONDITIONSLIST_API","UPDATE_METHOD_FOR_TERMSANDCONDITIONSLIST_API","AlertState","Post_Method_ForTermsAndCondtionsMaster_GenFun","data","response","error","Type","Status","Message","Get_TermsAndCondtions_GenratorFunction","Data","Delete_TermsAndCondtions_GenratorFunction","id","Edit_TermsAndCondtions_GenratorFunction","pageMode","update_TermsAndCondtions_GenratorFunction","updateData","ID","TermsAndConditionsSaga"],"sources":["D:/Rohit/Git projects/Manthan/src/store/Administrator/TermsAndConditionsRedux/saga.js"],"sourcesContent":["import { call, put, takeEvery } from \"redux-saga/effects\";\r\n\r\nimport {\r\n  postTermAndConditionSuccess,\r\n  getTermAndCondition_Success,\r\n  DeleteTermsAndCondtions_Success,\r\n  EditTermsAndCondtions_Success,\r\n  UpdateTermsAndCondtions_Success\r\n} from \"./actions\";\r\n\r\nimport {\r\n  Post_TermsAndCondtions_Master_API,\r\n  get_TermsAndCondtionsList_API,\r\n  del_TermsAndCondtions_Master_API,\r\n  edit_TermsAndCondtions_Master_API,\r\n  update_TermsAndCondtions_Master_API\r\n} from \"../../../helpers/backend_helper\";\r\n\r\nimport { SpinnerState } from \"../../Utilites/Spinner/actions\";\r\n\r\nimport {\r\n  POST_METHOD_HANDLER_FOR_TERMSANDCONDITIONS_MASTER_API,\r\n  GET_METHOD_FOR_TERMSANDCONDITIONSLIST_API,\r\n  DELETE_METHOD_FOR_TERMSANDCONDITIONSLIST_API,\r\n  EDIT_METHOD_FOR_TERMSANDCONDITIONSLIST_API,\r\n  UPDATE_METHOD_FOR_TERMSANDCONDITIONSLIST_API\r\n} from \"./actionTypes\";\r\n\r\nimport { AlertState } from \"../../actions\";\r\n\r\n\r\n// post api\r\nfunction* Post_Method_ForTermsAndCondtionsMaster_GenFun({ data }) {\r\n\r\n  try {\r\n    const response = yield call(Post_TermsAndCondtions_Master_API, data);\r\n   \r\n    yield put(postTermAndConditionSuccess(response));\r\n  } catch (error) {\r\n   \r\n    yield put(AlertState({\r\n      Type: 4,\r\n      Status: true, Message: \"500 Error Message\",\r\n    }));\r\n  }\r\n}\r\n\r\n// Get List Page API\r\nfunction* Get_TermsAndCondtions_GenratorFunction() {\r\n\r\n\r\n  try {\r\n    const response = yield call(get_TermsAndCondtionsList_API);\r\n    yield put(getTermAndCondition_Success(response.Data));\r\n   \r\n  } catch (error) {\r\n   \r\n    yield put(AlertState({\r\n      Type: 4,\r\n      Status: true, Message: \"500 Error Message\",\r\n    }));\r\n  }\r\n}\r\n\r\n// delete api \r\nfunction* Delete_TermsAndCondtions_GenratorFunction({id }) {\r\n  try {\r\n  \r\n    const response = yield call(del_TermsAndCondtions_Master_API, id);\r\n   \r\n    yield put(DeleteTermsAndCondtions_Success(response))\r\n  } catch (error) {\r\n   \r\n    yield put(AlertState({\r\n      Type: 4,\r\n      Status: true, Message: \"500 Error Message\",\r\n    }));\r\n  }\r\n}\r\n\r\n// edit api\r\nfunction* Edit_TermsAndCondtions_GenratorFunction({ id,pageMode }) {\r\n  \r\n  try {\r\n    const response = yield call(edit_TermsAndCondtions_Master_API, id);\r\n    response.pageMode=pageMode\r\n    yield put(EditTermsAndCondtions_Success(response));\r\n    \r\n  } catch (error) {\r\n    yield put(AlertState({\r\n      Type: 4,\r\n      Status: true, Message: \"500 Error Message\",\r\n    }));\r\n  }\r\n}\r\n\r\n// update api\r\nfunction* update_TermsAndCondtions_GenratorFunction({ updateData, ID }) {\r\n  \r\n  try {\r\n  \r\n    const response = yield call(update_TermsAndCondtions_Master_API, updateData, ID);\r\n   \r\n    yield put(UpdateTermsAndCondtions_Success(response))\r\n  }\r\n  catch (error) {\r\n   \r\n    yield put(AlertState({\r\n      Type: 4,\r\n      Status: true, Message: \"500 Error Message\",\r\n    }));\r\n  }\r\n}\r\n\r\n\r\nfunction* TermsAndConditionsSaga() {\r\n  yield takeEvery(POST_METHOD_HANDLER_FOR_TERMSANDCONDITIONS_MASTER_API, Post_Method_ForTermsAndCondtionsMaster_GenFun)\r\n  yield takeEvery(GET_METHOD_FOR_TERMSANDCONDITIONSLIST_API, Get_TermsAndCondtions_GenratorFunction)\r\n  yield takeEvery(DELETE_METHOD_FOR_TERMSANDCONDITIONSLIST_API, Delete_TermsAndCondtions_GenratorFunction)\r\n  yield takeEvery(EDIT_METHOD_FOR_TERMSANDCONDITIONSLIST_API, Edit_TermsAndCondtions_GenratorFunction)\r\n  yield takeEvery(UPDATE_METHOD_FOR_TERMSANDCONDITIONSLIST_API, update_TermsAndCondtions_GenratorFunction)\r\n}\r\n\r\nexport default TermsAndConditionsSaga;"],"mappings":"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"},"metadata":{},"sourceType":"module"}