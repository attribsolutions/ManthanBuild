[{"D:\\Rohit\\Git projects\\Manthan\\src\\index.js":"1","D:\\Rohit\\Git projects\\Manthan\\src\\i18n.js":"2","D:\\Rohit\\Git projects\\Manthan\\src\\App.js":"3","D:\\Rohit\\Git projects\\Manthan\\src\\store\\index.js":"4","D:\\Rohit\\Git projects\\Manthan\\src\\routes\\allRoutes.js":"5","D:\\Rohit\\Git projects\\Manthan\\src\\routes\\middleware\\Authmiddleware.js":"6","D:\\Rohit\\Git projects\\Manthan\\src\\components\\NonAuthLayout.js":"7","D:\\Rohit\\Git projects\\Manthan\\src\\components\\HorizontalLayout\\index.js":"8","D:\\Rohit\\Git projects\\Manthan\\src\\components\\VerticalLayout\\index.js":"9","D:\\Rohit\\Git projects\\Manthan\\src\\store\\reducers.js":"10","D:\\Rohit\\Git projects\\Manthan\\src\\store\\sagas.js":"11","D:\\Rohit\\Git projects\\Manthan\\src\\routes\\route_url.js":"12","D:\\Rohit\\Git projects\\Manthan\\src\\components\\VerticalLayout\\Footer.js":"13","D:\\Rohit\\Git projects\\Manthan\\src\\components\\VerticalLayout\\Sidebar.js":"14","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Authentication\\EnterOTP.js":"15","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Authentication\\Login.js":"16","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Authentication\\Logout.js":"17","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Authentication\\SendOTP.js":"18","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Authentication\\ForgetPassword.js":"19","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Authentication\\SelectDivisionPage.js":"20","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Utility\\Error404.js":"21","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Authentication\\ResetPassword.js":"22","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\ModulesPages\\Modules.js":"23","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Utility\\Error500.js":"24","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\ModulesPages\\ModulesList.js":"25","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\CompanyPages\\CompanyList.js":"26","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\RoleMasterPages\\RoleList.js":"27","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\CompanyPages\\CompanyModule.js":"28","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\Page-Pages\\PageList.js":"29","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\UserRegistrationPages\\UserRegistration.js":"30","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\Page-Pages\\PageMaster.js":"31","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\UserRegistrationPages\\UserList.js":"32","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\EmployeePages\\EmployeeList.js":"33","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\EmployeePages\\EmployeeMaster.js":"34","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\ItemPages\\ItemMaster\\itemIndex.js":"35","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\SearchBox\\SerachBox3.js":"36","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\SearchBox\\SearchBoxSecond.js":"37","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\RoleMasterPages\\RoleMaster.js":"38","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\RoleAccessPages\\RoleAccessCopyFunctionality.js":"39","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\EmployeeTypes\\EmployeeTypeList.js":"40","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\RoleAccessPages\\RoleAccessAdd.js":"41","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\PartyTypes\\PartyType.js":"42","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\RoleAccessPages\\RoleAccessListPage.js":"43","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\PartyTypes\\PartyTypeList.js":"44","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\ItemPages\\ItemList.js":"45","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\EmployeeTypes\\EmployeeTypesMaster.js":"46","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\CategoryTypePages\\CategoryTypeList.js":"47","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\CategoryTypePages\\CategoryTypeMaster.js":"48","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\CategoryPages\\CategoryMaster.js":"49","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\CategoryPages\\CategoryList.js":"50","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\VehiclePages\\VehicleList.js":"51","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\VehiclePages\\VehicleMaster.js":"52","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\PriceList\\PriceList.js":"53","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\DriverPage\\DriverList.js":"54","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\CompanyGroupPages\\CompanyGroupList.js":"55","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\DriverPage\\DriverMaster.js":"56","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\CompanyGroupPages\\CompanyGroupMaster.js":"57","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\MRPMaster\\MRPMaster.js":"58","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\PriceList\\PriceMaster.js":"59","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\MRPMaster\\MRPList.js":"60","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\GroupTypePage\\GroupTypeMaster.js":"61","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\MarginMaster\\MarginList.js":"62","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\MarginMaster\\MarginMaster.js":"63","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\GroupPage\\GroupList.js":"64","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\GroupTypePage\\GroupTypeList.js":"65","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\GroupPage\\GroupMaster.js":"66","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\PartySubPartyPages\\partysubPartyList.js":"67","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\GSTPages\\GSTList.js":"68","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\PartyItemPage\\PartyItems.js":"69","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\PartySubPartyPages\\PartySubParty.js":"70","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\GSTPages\\GSTMaster.js":"71","D:\\Rohit\\Git projects\\Manthan\\src\\components\\VerticalLayout\\Header.js":"72","D:\\Rohit\\Git projects\\Manthan\\src\\store\\actions.js":"73","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Purchase\\Order\\Order.js":"74","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Purchase\\Order\\OrderList.js":"75","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\PartyItemsRedux\\saga.js":"76","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\PartyItemsRedux\\reducer.js":"77","D:\\Rohit\\Git projects\\Manthan\\src\\store\\CommonAPI\\SupplierRedux\\saga.js":"78","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\PartySubPartyRedux\\saga.js":"79","D:\\Rohit\\Git projects\\Manthan\\src\\components\\VerticalLayout\\SidebarContent.js":"80","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\PartySubPartyRedux\\action.js":"81","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\PartyItemsRedux\\action.js":"82","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\CategoryTypeRedux\\actions.js":"83","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\ItemsRedux\\action.js":"84","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\GroupRedux\\action.js":"85","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\ModulesRedux\\actions.js":"86","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\RoleAccessRedux\\actions.js":"87","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\UserRegistrationRedux\\actions.js":"88","D:\\Rohit\\Git projects\\Manthan\\src\\components\\CommonForBoth\\RightSidebar.js":"89","D:\\Rohit\\Git projects\\Manthan\\src\\store\\layout\\actions.js":"90","D:\\Rohit\\Git projects\\Manthan\\src\\components\\CommonForBoth\\Menus\\LightDark.js":"91","D:\\Rohit\\Git projects\\Manthan\\src\\components\\CommonForBoth\\TopbarDropdown\\ProfileMenu.js":"92","D:\\Rohit\\Git projects\\Manthan\\src\\components\\CommonForBoth\\TopbarDropdown\\NotificationDropdown.js":"93","D:\\Rohit\\Git projects\\Manthan\\src\\components\\CommonForBoth\\TopbarDropdown\\LanguageDropdown.js":"94","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\GSTRedux\\action.js":"95","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Purchase\\OrderPageRedux\\actions.js":"96","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Utilites\\Breadcrumb\\actions.js":"97","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Utilites\\PageFiled\\actions.js":"98","D:\\Rohit\\Git projects\\Manthan\\src\\store\\auth\\forgetpwd\\actions.js":"99","D:\\Rohit\\Git projects\\Manthan\\src\\store\\auth\\login\\actions.js":"100","D:\\Rohit\\Git projects\\Manthan\\src\\store\\auth\\profile\\actions.js":"101","D:\\Rohit\\Git projects\\Manthan\\src\\store\\auth\\register\\actions.js":"102","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\PartyItemsRedux\\actionType.js":"103","D:\\Rohit\\Git projects\\Manthan\\src\\helpers\\backend_helper.js":"104","D:\\Rohit\\Git projects\\Manthan\\src\\store\\CommonAPI\\SupplierRedux\\actionType.js":"105","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\PartySubPartyRedux\\actionType.js":"106","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\GroupRedux\\actionType.js":"107","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\UserRegistrationRedux\\actionType.js":"108","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\CategoryTypeRedux\\actionTypes.js":"109","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\ItemsRedux\\actionType.js":"110","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\ModulesRedux\\actionType.js":"111","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\RoleAccessRedux\\actionType.js":"112","D:\\Rohit\\Git projects\\Manthan\\src\\store\\layout\\actionTypes.js":"113","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\GSTRedux\\actionType.js":"114","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Purchase\\OrderPageRedux\\actionType.js":"115","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Utilites\\Breadcrumb\\actionType.js":"116","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Utilites\\PageFiled\\actionType.js":"117","D:\\Rohit\\Git projects\\Manthan\\src\\store\\auth\\forgetpwd\\actionTypes.js":"118","D:\\Rohit\\Git projects\\Manthan\\src\\store\\auth\\login\\actionTypes.js":"119","D:\\Rohit\\Git projects\\Manthan\\src\\store\\auth\\profile\\actionTypes.js":"120","D:\\Rohit\\Git projects\\Manthan\\src\\store\\auth\\register\\actionTypes.js":"121","D:\\Rohit\\Git projects\\Manthan\\src\\store\\CommonAPI\\SupplierRedux\\actions.js":"122","D:\\Rohit\\Git projects\\Manthan\\src\\common\\languages.js":"123","D:\\Rohit\\Git projects\\Manthan\\src\\constants\\layout.js":"124","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Purchase\\Order\\OrderPageCalulation.js":"125","D:\\Rohit\\Git projects\\Manthan\\src\\helpers\\url_helper.js":"126","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\GroupTypeRedux\\action.js":"127","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\MarginMasterRedux\\action.js":"128","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\MRPMasterRedux\\action.js":"129","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\PartyRedux\\action.js":"130","D:\\Rohit\\Git projects\\Manthan\\src\\helpers\\api_helper.js":"131","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\GroupTypeRedux\\actionType.js":"132","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\MarginMasterRedux\\actionType.js":"133","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\MRPMasterRedux\\actionTypes.js":"134","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\PartyRedux\\actionTypes.js":"135","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\CompanyGroupRedux\\action.js":"136","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\PriceList\\action.js":"137","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\CompanyGroupRedux\\actionType.js":"138","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\CategoryRedux\\action.js":"139","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\DriverRedux\\action.js":"140","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\VehicleRedux\\action.js":"141","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\EmployeeTypeRedux\\action.js":"142","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\PriceList\\actionType.js":"143","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\CategoryRedux\\actionTypes.js":"144","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\DriverRedux\\actionType.js":"145","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\VehicleRedux\\actionType.js":"146","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\PartyTypeRedux\\action.js":"147","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\RoleMasterRedux\\action.js":"148","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\ItemPages\\ItemMaster\\MarginTab\\index.js":"149","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\CompanyRedux\\actions.js":"150","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Authentication\\CarouselPage.js":"151","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\GSTRedux\\saga.js":"152","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\GroupRedux\\saga.js":"153","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\MarginMasterRedux\\saga.js":"154","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\GroupTypeRedux\\saga.js":"155","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\MRPMasterRedux\\saga.js":"156","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\PriceList\\saga.js":"157","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\CompanyGroupRedux\\saga.js":"158","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\VehicleRedux\\saga.js":"159","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\DriverRedux\\saga.js":"160","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\CategoryRedux\\saga.js":"161","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\CategoryTypeRedux\\saga.js":"162","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\PartyTypeRedux\\saga.js":"163","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\EmployeeTypeRedux\\saga.js":"164","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\RoleAccessRedux\\saga.js":"165","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\PartyRedux\\saga.js":"166","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\ItemsRedux\\saga.js":"167","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\RoleMasterRedux\\saga.js":"168","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\EmployeeTypeRedux\\actionTypes.js":"169","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\UserRegistrationRedux\\saga.js":"170","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Purchase\\OrderPageRedux\\saga.js":"171","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\CompanyRedux\\saga.js":"172","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Utilites\\PageFiled\\saga.js":"173","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\ModulesRedux\\saga.js":"174","D:\\Rohit\\Git projects\\Manthan\\src\\store\\auth\\profile\\saga.js":"175","D:\\Rohit\\Git projects\\Manthan\\src\\store\\layout\\saga.js":"176","D:\\Rohit\\Git projects\\Manthan\\src\\store\\auth\\forgetpwd\\saga.js":"177","D:\\Rohit\\Git projects\\Manthan\\src\\store\\auth\\login\\saga.js":"178","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\GSTRedux\\reducer.js":"179","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\PartySubPartyRedux\\reducer.js":"180","D:\\Rohit\\Git projects\\Manthan\\src\\store\\auth\\register\\saga.js":"181","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\GroupRedux\\reducer.js":"182","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\GroupTypeRedux\\reducer.js":"183","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\MarginMasterRedux\\reducer.js":"184","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\PriceList\\reducer.js":"185","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\MRPMasterRedux\\reducer.js":"186","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\CompanyGroupRedux\\reducer.js":"187","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\DriverRedux\\reducer.js":"188","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\VehicleRedux\\reducer.js":"189","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\CategoryRedux\\reducer.js":"190","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\CategoryTypeRedux\\reducer.js":"191","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\PartyTypeRedux\\reducer.js":"192","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\EmployeeTypeRedux\\reducer.js":"193","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\RoleAccessRedux\\reducer.js":"194","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\ItemPages\\ItemMaster\\Division_Tab\\index.js":"195","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\ItemPages\\ItemMaster\\Category_Tab\\index.js":"196","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\ItemPages\\ItemMaster\\Group_Tab\\index.js":"197","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\ItemPages\\ItemMaster\\GST_Tab\\index.js":"198","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\ItemPages\\ItemMaster\\MRP_Tab\\index.js":"199","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\PartyTypeRedux\\actionTypes.js":"200","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\RoleMasterRedux\\actionTypes.js":"201","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\ItemPages\\ItemMaster\\MarginTab\\Table.js":"202","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\CompanyRedux\\actionType.js":"203","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\PartyRedux\\reducer.js":"204","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\RoleMasterRedux\\reducer.js":"205","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\ItemsRedux\\reducer.js":"206","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\UserRegistrationRedux\\reducer.js":"207","D:\\Rohit\\Git projects\\Manthan\\src\\store\\CommonAPI\\SupplierRedux\\reducer.js":"208","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\CompanyRedux\\reducer.js":"209","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Purchase\\OrderPageRedux\\reducer.js":"210","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\ModulesRedux\\reducer.js":"211","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Utilites\\PageFiled\\reducer.js":"212","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Utilites\\Breadcrumb\\reducer.js":"213","D:\\Rohit\\Git projects\\Manthan\\src\\store\\auth\\profile\\reducer.js":"214","D:\\Rohit\\Git projects\\Manthan\\src\\store\\auth\\forgetpwd\\reducer.js":"215","D:\\Rohit\\Git projects\\Manthan\\src\\store\\auth\\register\\reducer.js":"216","D:\\Rohit\\Git projects\\Manthan\\src\\store\\auth\\login\\reducer.js":"217","D:\\Rohit\\Git projects\\Manthan\\src\\store\\layout\\reducer.js":"218","D:\\Rohit\\Git projects\\Manthan\\src\\helpers\\firebase_helper.js":"219","D:\\Rohit\\Git projects\\Manthan\\src\\components\\HorizontalLayout\\Footer.js":"220","D:\\Rohit\\Git projects\\Manthan\\src\\components\\HorizontalLayout\\Header.js":"221","D:\\Rohit\\Git projects\\Manthan\\src\\components\\HorizontalLayout\\Navbar.js":"222","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\ItemPages\\ItemMaster\\Division_Tab\\Table.js":"223","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\ItemPages\\ItemMaster\\Category_Tab\\Table.js":"224","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\ItemPages\\ItemMaster\\Group_Tab\\Table.js":"225","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\ItemPages\\ItemMaster\\GST_Tab\\Table.js":"226","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\ItemPages\\ItemMaster\\MRP_Tab\\Table.js":"227","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\SubGroupPages\\SubGroupList.js":"228","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\SubGroupPages\\SubGroupMaster.js":"229","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\SubGroupsRedux\\action.js":"230","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\SubGroupsRedux\\actionType.js":"231","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\SubGroupsRedux\\saga.js":"232","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\SubGroupsRedux\\reducer.js":"233","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\ItemPages\\ItemMaster\\Image_Tab\\Index.js":"234","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\ItemPages\\ItemMaster\\UnitConversion_Tab\\Index.js":"235","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\TermsAndConditionsRedux\\reducer.js":"236","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\TermsAndConditions\\TermsAndConditionsList.js":"237","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\TermsAndConditionsRedux\\saga.js":"238","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\TermsAndConditions\\TermsAndConditionsMaster.js":"239","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\TermsAndConditionsRedux\\actions.js":"240","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Purchase\\Order\\OrderPageTermsTable.js":"241","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\TermsAndConditionsRedux\\actionTypes.js":"242","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Utilites\\PdfReport\\saga.js":"243","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Utilites\\PdfReport\\reducer.js":"244","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Utilites\\PdfReport\\actions.js":"245","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Utilites\\PdfReport\\actionType.js":"246","D:\\Rohit\\Git projects\\Manthan\\src\\Reports\\ReportIndex.js":"247","D:\\Rohit\\Git projects\\Manthan\\src\\Reports\\InvioceReport\\Page.js":"248","D:\\Rohit\\Git projects\\Manthan\\src\\Reports\\InvioceReport\\ReportStyle.js":"249","D:\\Rohit\\Git projects\\Manthan\\src\\Reports\\OrderReport\\Page.js":"250","D:\\Rohit\\Git projects\\Manthan\\src\\Reports\\InvioceReport\\TableData.js":"251","D:\\Rohit\\Git projects\\Manthan\\src\\Reports\\OrderReport\\ReportStyle.js":"252","D:\\Rohit\\Git projects\\Manthan\\src\\Reports\\OrderReport\\TableData.js":"253","D:\\Rohit\\Git projects\\Manthan\\src\\routes\\allPageID.js":"254","D:\\Rohit\\Git projects\\Manthan\\src\\routes\\urlRalations.js":"255","D:\\Rohit\\Git projects\\Manthan\\src\\routes\\PageMode.js":"256","D:\\Rohit\\Git projects\\Manthan\\src\\components\\Common\\BreadcrumbNew.js":"257","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\GeneralRedux\\saga.js":"258","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\GeneralRedux\\reducer.js":"259","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\GeneralPage\\GeneralList.js":"260","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\GeneralPage\\GeneralMaster.js":"261","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\GeneralRedux\\actionType.js":"262","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\GeneralRedux\\action.js":"263","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Sale\\Invoice\\Invoice.js":"264","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\Page-Pages\\PageFieldMaster\\index.js":"265","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Sales\\Invoice\\reducer.js":"266","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Sales\\Invoice\\action.js":"267","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Sales\\Invoice\\saga.js":"268","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Sales\\Invoice\\actionType.js":"269","D:\\Rohit\\Git projects\\Manthan\\src\\components\\Common\\C-Varialbes.js":"270","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Sale\\Invoice\\InvoiceList.js":"271","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Inter Branch\\Inward\\Inward.js":"272","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Inter Branch\\InwardRedux\\saga.js":"273","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Inter Branch\\Inward\\InwardList.js":"274","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Inter Branch\\InwardRedux\\reducer.js":"275","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Inter Branch\\InwardRedux\\action.js":"276","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Inter Branch\\InwardRedux\\actionType.js":"277","D:\\Rohit\\Git projects\\Manthan\\src\\Reports\\InvioceReport\\DemoData.js":"278","D:\\Rohit\\Git projects\\Manthan\\src\\Reports\\StockReport\\Page.js":"279","D:\\Rohit\\Git projects\\Manthan\\src\\Reports\\StockReport\\ReportStyle.js":"280","D:\\Rohit\\Git projects\\Manthan\\src\\Reports\\StockReport\\DemoData.js":"281","D:\\Rohit\\Git projects\\Manthan\\src\\Reports\\StockReport\\TableData.js":"282","D:\\Rohit\\Git projects\\Manthan\\src\\CustomAlert\\ConfirmDialog.js":"283","D:\\Rohit\\Git projects\\Manthan\\src\\CustomAlert\\ConfirmContextProvider.js":"284","D:\\Rohit\\Git projects\\Manthan\\src\\CustomAlert\\reducer.js":"285","D:\\Rohit\\Git projects\\Manthan\\src\\CustomAlert\\useConfirm.js":"286","D:\\Rohit\\Git projects\\Manthan\\src\\CustomAlert\\ConfirmContext.js":"287","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Inventory\\ChallanRedux\\reducer.js":"288","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Inventory\\ChallanRedux\\saga.js":"289","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Inventory\\ChallanRedux\\actions.js":"290","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Inventory\\ChallanRedux\\actionType.js":"291","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Production\\ProductionReissueRedux\\reducer.js":"292","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Production\\ProductionReissueRedux\\saga.js":"293","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Production\\ProductionReissueRedux\\actionType.js":"294","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Production\\ProductionReissueRedux\\actions.js":"295","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Production\\Material_Issue\\Material_Issue_List.js":"296","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Production\\Production\\ProductionMaster.js":"297","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Production\\ProductionRe-Issue\\PrductionReIssueAdd.js":"298","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Production\\Material_Issue\\Material_IssueMaster.js":"299","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Production\\WorkOrder\\WorkOrderList.js":"300","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Production\\WorkOrder\\WorkOrder.js":"301","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Production\\Production\\ProductionList.js":"302","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Production\\BOM\\BOMList\\BOMList.js":"303","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Production\\ProductionRe-Issue\\ProductionReIssueList.js":"304","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Inventory\\GRN\\GRNList.js":"305","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Inventory\\Challan\\ChallanList.js":"306","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Inventory\\GRN\\GRNAdd.js":"307","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Production\\BOM\\BOMMaster\\BOMIndex.js":"308","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Production\\BOMRedux\\saga.js":"309","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Production\\WorkOrder\\saga.js":"310","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Production\\Matrial_Issue\\saga.js":"311","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Production\\ProductionRedux\\saga.js":"312","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Inventory\\Challan\\Challan.js":"313","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Inventory\\GRNRedux\\saga.js":"314","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Inventory\\GRNRedux\\reducer.js":"315","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Production\\ProductionRedux\\reducer.js":"316","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Production\\WorkOrder\\reducer.js":"317","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Production\\Matrial_Issue\\reducer.js":"318","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Production\\BOMRedux\\reducer.js":"319","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Production\\BOMRedux\\action.js":"320","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Inventory\\GRNRedux\\actions.js":"321","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Production\\BOMRedux\\actionTypes.js":"322","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Production\\BOM\\BOMMaster\\ItemQuantityTab\\index.js":"323","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Production\\WorkOrder\\action.js":"324","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Production\\ProductionRedux\\actions.js":"325","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Production\\Matrial_Issue\\action.js":"326","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Production\\WorkOrder\\actionTypes.js":"327","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Production\\ProductionRedux\\actionType.js":"328","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Production\\Matrial_Issue\\actionType.js":"329","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Inventory\\GRNRedux\\actionType.js":"330","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Production\\BOM\\BOMMaster\\ItemQuantityTab\\Table.js":"331","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\RoutesRedux\\reducer.js":"332","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\RoutesRedux\\saga.js":"333","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\RoutesPages\\RoutesList.js":"334","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\RoutesPages\\RoutesMaster.js":"335","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\RoutesRedux\\actionTypes.js":"336","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\RoutesRedux\\actions.js":"337","D:\\Rohit\\Git projects\\Manthan\\src\\Reports\\Van Loading Party Wise InvoiceList\\Page.js":"338","D:\\Rohit\\Git projects\\Manthan\\src\\Reports\\Van Loading Party Wise InvoiceList\\ReportStyle.js":"339","D:\\Rohit\\Git projects\\Manthan\\src\\Reports\\Van Loading Party Wise InvoiceList\\DemoData.js":"340","D:\\Rohit\\Git projects\\Manthan\\src\\Reports\\Van Loading Party Wise InvoiceList\\TableData.js":"341","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\SalesManRedux\\reducer.js":"342","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\SalesManPages\\SalesManMaster.js":"343","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\SalesManPages\\SalesManList.js":"344","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\SalesManRedux\\saga.js":"345","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\SalesManRedux\\actionTypes.js":"346","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\SalesManRedux\\actions.js":"347","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\CreditLimitRedux\\saga.js":"348","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\CreditLimitRedux\\reducer.js":"349","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\CreditPages\\CreditLimitList.js":"350","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\CreditPages\\CreditLimitMaster.js":"351","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\CreditLimitRedux\\actions.js":"352","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\CreditLimitRedux\\actionTypes.js":"353","D:\\Rohit\\Git projects\\Manthan\\src\\Reports\\Invoice report a5\\Page.js":"354","D:\\Rohit\\Git projects\\Manthan\\src\\Reports\\Invoice report a5\\ReportStyle.js":"355","D:\\Rohit\\Git projects\\Manthan\\src\\Reports\\Invoice report a5\\DemoData.js":"356","D:\\Rohit\\Git projects\\Manthan\\src\\Reports\\Invoice report a5\\TableData.js":"357","D:\\Rohit\\Git projects\\Manthan\\src\\Reports\\AllReportPage.js":"358","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Utilites\\PdfReport\\DemoData.js":"359","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\RouteUpdateRedux\\reducer.js":"360","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\RouteUpdateRedux\\saga.js":"361","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\RouteUpdate\\RouteUpdate.js":"362","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\RouteUpdateRedux\\actionType.js":"363","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\RouteUpdateRedux\\action.js":"364","D:\\Rohit\\Git projects\\Manthan\\src\\Reports\\Report_common_function.js":"365","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\EmployeeRedux\\saga.js":"366","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\EmployeeRedux\\reducer.js":"367","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\EmployeeRedux\\action.js":"368","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\EmployeeRedux\\actionTypes.js":"369","D:\\Rohit\\Git projects\\Manthan\\src\\components\\Common\\CommonFunction.js":"370","D:\\Rohit\\Git projects\\Manthan\\src\\components\\Common\\C_Report.js":"371","D:\\Rohit\\Git projects\\Manthan\\src\\components\\Common\\CommonMasterListPage.js":"372","D:\\Rohit\\Git projects\\Manthan\\src\\components\\Common\\validationFunction.js":"373","D:\\Rohit\\Git projects\\Manthan\\src\\components\\Common\\CommonButton.js":"374","D:\\Rohit\\Git projects\\Manthan\\src\\components\\Common\\CommonPurchaseList.js":"375","D:\\Rohit\\Git projects\\Manthan\\src\\components\\Common\\SearchBox\\MySearch.js":"376","D:\\Rohit\\Git projects\\Manthan\\src\\components\\Common\\SearchBox\\index.js":"377","D:\\Rohit\\Git projects\\Manthan\\src\\components\\Common\\ListActionsButtons.js":"378","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Sales\\LoadingSheetRedux\\reducer.js":"379","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Sales\\LoadingSheetRedux\\saga.js":"380","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Sales\\LoadingSheetRedux\\action.js":"381","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Sales\\LoadingSheetRedux\\actionType.js":"382","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\PartyMasterBulkUpdateRedux\\saga.js":"383","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\PartyMasterBulkPages\\PartyMasterBulkUpdate.js":"384","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\PartyMasterBulkUpdateRedux\\reducer.js":"385","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\PartyMasterBulkUpdateRedux\\actions.js":"386","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\PartyMasterBulkUpdateRedux\\actionTypes.js":"387","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Inventory\\GRN\\GRNAdd_3.js":"388","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Sale\\Invoice\\invoiceCaculations.js":"389","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\ManagementPartiesRedux\\saga.js":"390","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\ManagementPartiesRedux\\reducer.js":"391","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\ManagementParties\\ManagementEmpParties.js":"392","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\ManagementPartiesRedux\\action.js":"393","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\ManagementPartiesRedux\\actionType.js":"394","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Accounting\\Receipt\\Receipts.js":"395","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Accounting\\Receipt\\saga.js":"396","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Accounting\\Receipt\\action.js":"397","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Accounting\\Receipt\\reducer.js":"398","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Accounting\\Receipt\\actionType.js":"399","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Accounting\\Receipt\\ReceiptList.js":"400","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Accounting\\Payment\\PaymentEntry.js":"401","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Accounting\\Payment\\PaymentEntryList.js":"402","D:\\Rohit\\Git projects\\Manthan\\src\\Reports\\Receipts\\Page.js":"403","D:\\Rohit\\Git projects\\Manthan\\src\\Reports\\Receipts\\ReportStyle.js":"404","D:\\Rohit\\Git projects\\Manthan\\src\\Reports\\Receipts\\DemoData.js":"405","D:\\Rohit\\Git projects\\Manthan\\src\\Reports\\Receipts\\TableData.js":"406","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Accounting\\BankRedux\\reducer.js":"407","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Accounting\\BankRedux\\saga.js":"408","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Accounting\\Bank\\BankMaster.js":"409","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Accounting\\Bank\\BankList.js":"410","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Accounting\\BankRedux\\action.js":"411","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Accounting\\BankRedux\\actionType.js":"412","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Accounting\\BankAssignRedux\\reducer.js":"413","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Accounting\\BankAssignRedux\\saga.js":"414","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Accounting\\BankAssign\\BankAssign.js":"415","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Accounting\\BankAssignRedux\\action.js":"416","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Accounting\\BankAssignRedux\\actionType.js":"417","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Accounting\\Receipt\\BulkReceipt.js":"418","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Sales\\SalesReturnRedux\\reducer.js":"419","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Sales\\SalesReturnRedux\\saga.js":"420","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Sales\\SalesReturnRedux\\actionType.js":"421","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Sales\\SalesReturnRedux\\action.js":"422","D:\\Rohit\\Git projects\\Manthan\\src\\CustomValidateForm\\CInput.js":"423","D:\\Rohit\\Git projects\\Manthan\\src\\CustomValidateForm\\RegexPattern.js":"424","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Accounting\\CreditDebitNote\\CreditList.js":"425","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\ImportFieldAddRedux\\reducer.js":"426","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\ImportFieldAddRedux\\saga.js":"427","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\ImportFieldAddRedux\\actionType.js":"428","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\ImportFieldAddRedux\\action.js":"429","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\ImportMaster\\FieldAdd\\ImportFieldAddList.js":"430","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\ImportMaster\\FieldAdd\\ImportFieldAdd.js":"431","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Accounting\\CreditRedux\\saga.js":"432","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Accounting\\CreditRedux\\reducer.js":"433","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Accounting\\CreditRedux\\action.js":"434","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Accounting\\CreditRedux\\actionType.js":"435","D:\\Rohit\\Git projects\\Manthan\\src\\Reports\\CRDRNote Report\\Page.js":"436","D:\\Rohit\\Git projects\\Manthan\\src\\Reports\\CRDRNote Report\\ReportStyle.js":"437","D:\\Rohit\\Git projects\\Manthan\\src\\Reports\\CRDRNote Report\\DemoData.js":"438","D:\\Rohit\\Git projects\\Manthan\\src\\Reports\\CRDRNote Report\\TableData.js":"439","D:\\Rohit\\Git projects\\Manthan\\src\\components\\Common\\TableCommonFunc.js":"440","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\EmployeePages\\Drodown.js":"441","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Accounting\\Debit\\Debit.js":"442","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\PartyMaster\\PartyList.js":"443","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\PartyMaster\\MasterAdd\\FirstTab\\index.js":"444","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\PartyMaster\\MasterAdd\\PrefixTab\\PrefixTab.js":"445","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\PartyMaster\\MasterAdd\\AddressDetailsTab\\index.js":"446","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\PartyMaster\\MasterAdd\\AddressDetailsTab\\Table.js":"447","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\PartyMaster\\MasterAdd\\FirstTab\\PriceDropOptions.js":"448","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\PartyMaster\\MasterAdd\\PartyIndex.js":"449","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Dashboard\\Dashboard_1_Redux\\saga.js":"450","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Dashboard\\Dashboard_1_Redux\\reducer.js":"451","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Dashboard\\Dashboard_1_Redux\\action.js":"452","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Dashboard\\Dashboard_1_Redux\\actionType.js":"453","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Dashboard\\index.js":"454","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Dashboard\\Dashboard_1\\Dashboard_1.js":"455","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Dashboard\\Dashboard_1\\PaymentEntryList.js":"456","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Dashboard\\Options.js":"457","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Dashboard\\WidgetsData.js":"458","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Dashboard\\Dashboard_1\\GRNList.js":"459","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\ImportExportFieldMapRedux\\saga.js":"460","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\ImportExportFieldMapRedux\\reducer.js":"461","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\ImportExportFieldMapRedux\\action.js":"462","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\ImportExportFieldMapRedux\\actionType.js":"463","D:\\Rohit\\Git projects\\Manthan\\src\\helpers\\sapApi.js":"464","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Dashboard\\Dashboard_1\\SalesReturnListForDashboard.js":"465","D:\\Rohit\\Git projects\\Manthan\\src\\CustomValidateForm\\index.js":"466","D:\\Rohit\\Git projects\\Manthan\\src\\CustomValidateForm\\C_DatePicker.js":"467","D:\\Rohit\\Git projects\\Manthan\\src\\routes\\index.js":"468","D:\\Rohit\\Git projects\\Manthan\\src\\components\\Common\\CommonUseEffect.js":"469","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Purchase\\Order\\orderApproval.js":"470","D:\\Rohit\\Git projects\\Manthan\\src\\Reports\\OrderReport\\demo.js":"471","D:\\Rohit\\Git projects\\Manthan\\src\\store\\auth\\sessionAlive\\saga.js":"472","D:\\Rohit\\Git projects\\Manthan\\src\\store\\auth\\sessionAlive\\actions.js":"473","D:\\Rohit\\Git projects\\Manthan\\src\\store\\auth\\sessionAlive\\actionTypes.js":"474","D:\\Rohit\\Git projects\\Manthan\\src\\store\\auth\\changepassword\\action.js":"475","D:\\Rohit\\Git projects\\Manthan\\src\\store\\auth\\changepassword\\actionType.js":"476","D:\\Rohit\\Git projects\\Manthan\\src\\store\\auth\\changepassword\\saga.js":"477","D:\\Rohit\\Git projects\\Manthan\\src\\store\\auth\\changepassword\\reducer.js":"478","D:\\Rohit\\Git projects\\Manthan\\src\\Reports\\SapLedgerReport\\SapLedger.js":"479","D:\\Rohit\\Git projects\\Manthan\\src\\helpers\\other_domain_api.js":"480","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Report\\SapLedger Redux\\saga.js":"481","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Report\\SapLedger Redux\\reducer.js":"482","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Report\\SapLedger Redux\\action.js":"483","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Report\\SapLedger Redux\\actionType.js":"484","D:\\Rohit\\Git projects\\Manthan\\src\\Reports\\ProductMarginReport\\ProductMarginReport.js":"485","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\CityRedux\\saga.js":"486","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\CityRedux\\reducer.js":"487","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\CityPages\\CityMaster.js":"488","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\CityRedux\\actionType.js":"489","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\CityRedux\\action.js":"490","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\ImportMaster\\RetailerExcelUpload\\Index.js":"491","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\ImportMaster\\InvoiceExcelUpload\\Index.js":"492","D:\\Rohit\\Git projects\\Manthan\\src\\components\\Common\\PartyDropdown.js":"493","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\ImportMaster\\RetailerExcelUpload\\readFile.js":"494","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\ImportMaster\\InvoiceExcelUpload\\readFile.js":"495","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\ImportExcelPartyMapRedux\\saga.js":"496","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\ImportExcelPartyMapRedux\\reducer.js":"497","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\ImportMaster\\ImportExcelFieldMap\\Index.js":"498","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\ImportMaster\\ImportExcelPartyMap\\Index.js":"499","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\ImportExcelPartyMapRedux\\action.js":"500","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\ImportExcelPartyMapRedux\\actionType.js":"501","D:\\Rohit\\Git projects\\Manthan\\src\\components\\Common\\PartyDropdownComp\\PartyDropdownList.js":"502","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\ImportMaster\\ExcelUpload\\readFile.js":"503","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\ImportMaster\\RetailerExcelUpload\\AllHndlerFunc.js":"504","D:\\Rohit\\Git projects\\Manthan\\src\\components\\Common\\PartyDropdownComp\\PartyDropdown.js":"505","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\ImportMaster\\ExcelUpload\\UploadExcel.js":"506","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\CityPages\\CityList.js":"507","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Report\\OrderSummaryRedux\\reducer.js":"508","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Report\\OrderSummaryRedux\\saga.js":"509","D:\\Rohit\\Git projects\\Manthan\\src\\Reports\\OrderSummaryReport\\OrderSummary.js":"510","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Report\\OrderSummaryRedux\\actionType.js":"511","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Report\\OrderSummaryRedux\\action.js":"512","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\ItemPages\\ItemMaster\\Weightage_Tab\\index.js":"513","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\InvoiceConfiguration\\InvoiceConfiguration.js":"514","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\PartySetting\\action.js":"515","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\PartySetting\\reducer.js":"516","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\PartySetting\\saga.js":"517","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\PartySetting\\actionType.js":"518","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Inventory\\StockEntry\\StockEntry.js":"519","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Inventory\\StockEntryRedux\\saga.js":"520","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Inventory\\StockEntryRedux\\action.js":"521","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Inventory\\StockEntryRedux\\reducer.js":"522","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Inventory\\StockEntryRedux\\actionType.js":"523","D:\\Rohit\\Git projects\\Manthan\\src\\Reports\\PratyLedger\\Page.js":"524","D:\\Rohit\\Git projects\\Manthan\\src\\Reports\\PratyLedger\\DemoData.js":"525","D:\\Rohit\\Git projects\\Manthan\\src\\Reports\\PratyLedger\\ReportStyle.js":"526","D:\\Rohit\\Git projects\\Manthan\\src\\Reports\\PratyLedger\\TableData.js":"527","D:\\Rohit\\Git projects\\Manthan\\src\\Reports\\PratyLedger\\Partyledger.js":"528","D:\\Rohit\\Git projects\\Manthan\\src\\Reports\\StockReport\\StockReport.js":"529","D:\\Rohit\\Git projects\\Manthan\\src\\CustomValidateForm\\C_Select.js":"530","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Purchase\\Order\\OrderView.js":"531","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Report\\StockReport\\reducer.js":"532","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Report\\StockReport\\saga.js":"533","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Report\\StockReport\\action.js":"534","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Report\\StockReport\\actionType.js":"535","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Sale\\SalesReturn\\SalesReturnList.js":"536","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Sale\\SalesReturn\\SalesReturn.js":"537","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Sale\\LoadingSheet\\LoadingSheetUpdate.js":"538","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Sale\\LoadingSheet\\LoadingSheet.js":"539","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Sale\\LoadingSheet\\LoadingSheetList.js":"540","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Sale\\SalesReturn\\SalesCalculation.js":"541","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Sale\\SalesReturn\\SalesReturnConfirm.js":"542","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\Discount\\DiscountMaster.js":"543","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\PageMasterRedux\\saga.js":"544","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\PageMasterRedux\\reducer.js":"545","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\PageMasterRedux\\actions.js":"546","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\PageMasterRedux\\actionType.js":"547","D:\\Rohit\\Git projects\\Manthan\\src\\Reports\\GenericSaleReport\\GenericSaleReport.js":"548","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\DiscountRedux\\saga.js":"549","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\DiscountRedux\\reducer.js":"550","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\DiscountRedux\\actions.js":"551","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\DiscountRedux\\actionType.js":"552","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Report\\GenericSaleRedux\\reducer.js":"553","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Report\\GenericSaleRedux\\saga.js":"554","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Report\\GenericSaleRedux\\action.js":"555","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Report\\GenericSaleRedux\\actionType.js":"556","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Report\\RetailerDataRedux\\saga.js":"557","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Report\\RetailerDataRedux\\reducer.js":"558","D:\\Rohit\\Git projects\\Manthan\\src\\Reports\\RetailerDataReport\\RetailerDataReport.js":"559","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Report\\RetailerDataRedux\\actionType.js":"560","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Report\\RetailerDataRedux\\action.js":"561","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\Discount\\DiscountList.js":"562","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Purchase\\Return\\PurchaseReturnMode3.js":"563","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Purchase\\Return\\PurchaseReturn.js":"564","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Purchase\\Return\\PurchaseReturnCalculation.js":"565","D:\\Rohit\\Git projects\\Manthan\\src\\Reports\\StockReport\\StockReport_1.js":"566","D:\\Rohit\\Git projects\\Manthan\\src\\Reports\\PurchaseReturnReport\\Page.js":"567","D:\\Rohit\\Git projects\\Manthan\\src\\Reports\\PurchaseReturnReport\\ReportStyle.js":"568","D:\\Rohit\\Git projects\\Manthan\\src\\Reports\\PurchaseReturnReport\\TableData.js":"569","D:\\Rohit\\Git projects\\Manthan\\src\\components\\Common\\AfterLoginApiFunc.js":"570","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Utilites\\PartyDrodown\\saga.js":"571","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Utilites\\PartyDrodown\\reducer.js":"572","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Utilites\\PartyDrodown\\actionType.js":"573","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Utilites\\PartyDrodown\\action.js":"574","D:\\Rohit\\Git projects\\Manthan\\src\\Reports\\ClaimReportSummary\\ClaimReport.js":"575","D:\\Rohit\\Git projects\\Manthan\\src\\Reports\\ClaimReportSummary\\Page.js":"576","D:\\Rohit\\Git projects\\Manthan\\src\\Reports\\CustomerWiseReturnReport\\Page.js":"577","D:\\Rohit\\Git projects\\Manthan\\src\\Reports\\CompanyWiseBugetReport\\Page.js":"578","D:\\Rohit\\Git projects\\Manthan\\src\\CustomTable2\\index.js":"579","D:\\Rohit\\Git projects\\Manthan\\src\\Reports\\CustomerWiseReturnReport\\ReportStyle.js":"580","D:\\Rohit\\Git projects\\Manthan\\src\\Reports\\ClaimReportSummary\\DemoData.js":"581","D:\\Rohit\\Git projects\\Manthan\\src\\Reports\\ClaimReportSummary\\ReportStyle.js":"582","D:\\Rohit\\Git projects\\Manthan\\src\\Reports\\CustomerWiseReturnReport\\DemoData.js":"583","D:\\Rohit\\Git projects\\Manthan\\src\\Reports\\CompanyWiseBugetReport\\DemoData.js":"584","D:\\Rohit\\Git projects\\Manthan\\src\\Reports\\CompanyWiseBugetReport\\ReportStyle.js":"585","D:\\Rohit\\Git projects\\Manthan\\src\\Reports\\CustomerWiseReturnReport\\TableData.js":"586","D:\\Rohit\\Git projects\\Manthan\\src\\Reports\\CompanyWiseBugetReport\\TableData.js":"587","D:\\Rohit\\Git projects\\Manthan\\src\\Reports\\ClaimReportSummary\\TableData.js":"588","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Report\\ClaimSummary\\saga.js":"589","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Report\\ClaimSummary\\action.js":"590","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Report\\ClaimSummary\\actionType.js":"591","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Report\\ClaimSummary\\reducer.js":"592","D:\\Rohit\\Git projects\\Manthan\\src\\Reports\\PurchaseGSTReport\\PurchaseGSTReport.js.js":"593","D:\\Rohit\\Git projects\\Manthan\\src\\Reports\\DamageStockReport\\index.js":"594","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Report\\DamageStockReportRedux\\saga.js":"595","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Report\\PurchaseGSTRedux\\saga.js":"596","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Report\\InvoiceDataExportRedux\\saga.js":"597","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Report\\InvoiceDataExportRedux\\action.js":"598","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Report\\InvoiceDataExportRedux\\actionType.js":"599","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Report\\PurchaseGSTRedux\\action.js":"600","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Report\\PurchaseGSTRedux\\actionType.js":"601","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Report\\DamageStockReportRedux\\action.js":"602","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Report\\DamageStockReportRedux\\actionType.js":"603","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Report\\DamageStockReportRedux\\reducer.js":"604","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Report\\InvoiceDataExportRedux\\reducer.js":"605","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Report\\PurchaseGSTRedux\\reducer.js":"606","D:\\Rohit\\Git projects\\Manthan\\src\\Reports\\InvoiceDataExport\\InvoiceDataExport.js.js":"607","D:\\Rohit\\Git projects\\Manthan\\src\\Reports\\DeleteInvoiceDataExport\\index.js":"608","D:\\Rohit\\Git projects\\Manthan\\src\\CustomTable2\\TableWrapper.js":"609","D:\\Rohit\\Git projects\\Manthan\\src\\Reports\\GSTR1Report\\GSTR1Report.js":"610","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Report\\GSTR1ReportRedux\\saga.js":"611","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Report\\GSTR1ReportRedux\\action.js":"612","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Report\\GSTR1ReportRedux\\actionType.js":"613","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Report\\GSTR1ReportRedux\\reducer.js":"614","D:\\Rohit\\Git projects\\Manthan\\src\\Reports\\ReturnReport\\ReturnReport.js":"615","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Report\\ReturnReportRedux\\saga.js":"616","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Report\\ReturnReportRedux\\action.js":"617","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Report\\ReturnReportRedux\\actionType.js":"618","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Report\\ReturnReportRedux\\reducer.js":"619","D:\\Rohit\\Git projects\\Manthan\\src\\CustomTable2\\TablePagination.js":"620","D:\\Rohit\\Git projects\\Manthan\\src\\helpers\\axios_Config.js":"621","D:\\Rohit\\Git projects\\Manthan\\src\\Reports\\ReportComponent.js":"622","D:\\Rohit\\Git projects\\Manthan\\src\\Reports\\ItemRegisterReport\\ItemRegisterReport.js":"623","D:\\Rohit\\Git projects\\Manthan\\src\\Reports\\ItemRegisterReport\\Page.js":"624","D:\\Rohit\\Git projects\\Manthan\\src\\Reports\\ItemRegisterReport\\ReportStyle.js":"625","D:\\Rohit\\Git projects\\Manthan\\src\\Reports\\ItemRegisterReport\\DemoData.js":"626","D:\\Rohit\\Git projects\\Manthan\\src\\Reports\\ItemRegisterReport\\TableData.js":"627","D:\\Rohit\\Git projects\\Manthan\\src\\Reports\\ItemSaleReport\\index.js":"628","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Report\\ItemSaleReport\\reducer.js":"629","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Report\\ItemSaleReport\\action.js":"630","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Report\\ItemSaleReport\\actionType.js":"631","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Report\\ItemSaleReport\\saga.js":"632","D:\\Rohit\\Git projects\\Manthan\\src\\Reports\\ClaimReportSummary\\ClaimSummaryMaster.js":"633","D:\\Rohit\\Git projects\\Manthan\\src\\Reports\\ClaimReportSummary\\ClaimSummaryList.js":"634","D:\\Rohit\\Git projects\\Manthan\\src\\Reports\\ItemSaleReport\\hardcodeDetails.js":"635","D:\\Rohit\\Git projects\\Manthan\\src\\Reports\\ItemSaleReport\\showTable.js":"636","D:\\Rohit\\Git projects\\Manthan\\src\\routes\\middleware\\SessionContext.js":"637","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Accounting\\CreditDebitNote\\GoodsCreditNote.js":"638","D:\\Rohit\\Git projects\\Manthan\\src\\components\\Common\\NewCommonPartyDropdown.js":"639","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\PartyItemPage\\ChannelViewDetails.js":"640","D:\\Rohit\\Git projects\\Manthan\\src\\components\\Common\\CommonImageComponent.js":"641","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Inventory\\StockAdjustment\\index.js":"642","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\ActivityLog\\TransactionLog.js":"643","D:\\Rohit\\Git projects\\Manthan\\src\\CustomValidateForm\\C_TimePicker.js":"644","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Inventory\\StockAdjustmentRedux\\saga.js":"645","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Inventory\\StockAdjustmentRedux\\action.js":"646","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Inventory\\StockAdjustmentRedux\\actionType.js":"647","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Inventory\\StockAdjustmentRedux\\reducer.js":"648","D:\\Rohit\\Git projects\\Manthan\\src\\Reports\\ItemSaleReport\\HeaderSection.js":"649","D:\\Rohit\\Git projects\\Manthan\\src\\Reports\\ItemSaleReport\\ContextDataProvider.js":"650","D:\\Rohit\\Git projects\\Manthan\\src\\Reports\\ItemSaleReport\\SortAndExcelDownloadFunc.js":"651","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Accounting\\Claim Tracking Entry\\ClaimTrackingEntryList.js":"652","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Accounting\\Claim Tracking Entry\\ClaimTrackingEntry.js":"653","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Accounting\\ClaimTrackingEntryRedux\\reducer.js":"654","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Accounting\\Claim Tracking Entry\\ClaimRelatedData.js":"655","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Accounting\\ClaimTrackingEntryRedux\\actionType.js":"656","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Accounting\\ClaimTrackingEntryRedux\\action.js":"657","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Accounting\\ClaimTrackingEntryRedux\\saga.js":"658"},{"size":761,"mtime":1692423562283,"results":"659","hashOfConfig":"660"},{"size":1284,"mtime":1668418803093,"results":"661","hashOfConfig":"660"},{"size":2304,"mtime":1693565931580,"results":"662","hashOfConfig":"660"},{"size":467,"mtime":1681197042523,"results":"663","hashOfConfig":"660"},{"size":23958,"mtime":1695211998909,"results":"664","hashOfConfig":"660"},{"size":1792,"mtime":1693565931685,"results":"665","hashOfConfig":"660"},{"size":361,"mtime":1668418803087,"results":"666","hashOfConfig":"660"},{"size":4215,"mtime":1684922217076,"results":"667","hashOfConfig":"660"},{"size":3660,"mtime":1693565931654,"results":"668","hashOfConfig":"660"},{"size":8229,"mtime":1695211998916,"results":"669","hashOfConfig":"660"},{"size":8030,"mtime":1695211998917,"results":"670","hashOfConfig":"660"},{"size":9568,"mtime":1695211998911,"results":"671","hashOfConfig":"660"},{"size":701,"mtime":1694153531580,"results":"672","hashOfConfig":"660"},{"size":790,"mtime":1691486132228,"results":"673","hashOfConfig":"660"},{"size":3558,"mtime":1684999012509,"results":"674","hashOfConfig":"660"},{"size":8877,"mtime":1694436513987,"results":"675","hashOfConfig":"660"},{"size":756,"mtime":1694436513987,"results":"676","hashOfConfig":"660"},{"size":3361,"mtime":1684999012545,"results":"677","hashOfConfig":"660"},{"size":14226,"mtime":1692253907310,"results":"678","hashOfConfig":"660"},{"size":4962,"mtime":1690535840187,"results":"679","hashOfConfig":"660"},{"size":1432,"mtime":1668418803126,"results":"680","hashOfConfig":"660"},{"size":5432,"mtime":1686914771696,"results":"681","hashOfConfig":"660"},{"size":18391,"mtime":1688987008138,"results":"682","hashOfConfig":"660"},{"size":1621,"mtime":1668421152633,"results":"683","hashOfConfig":"660"},{"size":2510,"mtime":1689857294976,"results":"684","hashOfConfig":"660"},{"size":2690,"mtime":1689934200208,"results":"685","hashOfConfig":"660"},{"size":2256,"mtime":1690627373166,"results":"686","hashOfConfig":"660"},{"size":19023,"mtime":1688987008136,"results":"687","hashOfConfig":"660"},{"size":2281,"mtime":1689857294976,"results":"688","hashOfConfig":"660"},{"size":25028,"mtime":1688987008146,"results":"689","hashOfConfig":"660"},{"size":40775,"mtime":1694586572919,"results":"690","hashOfConfig":"660"},{"size":2720,"mtime":1689857294986,"results":"691","hashOfConfig":"660"},{"size":2519,"mtime":1689942375609,"results":"692","hashOfConfig":"660"},{"size":29831,"mtime":1692166097164,"results":"693","hashOfConfig":"660"},{"size":71730,"mtime":1691734055214,"results":"694","hashOfConfig":"660"},{"size":3747,"mtime":1680246108703,"results":"695","hashOfConfig":"660"},{"size":11653,"mtime":1680246108697,"results":"696","hashOfConfig":"660"},{"size":18831,"mtime":1688987008142,"results":"697","hashOfConfig":"660"},{"size":10395,"mtime":1686740985443,"results":"698","hashOfConfig":"660"},{"size":2663,"mtime":1689942375616,"results":"699","hashOfConfig":"660"},{"size":30207,"mtime":1694521350398,"results":"700","hashOfConfig":"660"},{"size":26283,"mtime":1688977280276,"results":"701","hashOfConfig":"660"},{"size":6220,"mtime":1690627373165,"results":"702","hashOfConfig":"660"},{"size":2536,"mtime":1689942375669,"results":"703","hashOfConfig":"660"},{"size":2415,"mtime":1689857294974,"results":"704","hashOfConfig":"660"},{"size":15780,"mtime":1688977280087,"results":"705","hashOfConfig":"660"},{"size":2628,"mtime":1689934200208,"results":"706","hashOfConfig":"660"},{"size":12697,"mtime":1688985472484,"results":"707","hashOfConfig":"660"},{"size":15156,"mtime":1688985527556,"results":"708","hashOfConfig":"660"},{"size":2530,"mtime":1689942375594,"results":"709","hashOfConfig":"660"},{"size":3722,"mtime":1694757737583,"results":"710","hashOfConfig":"660"},{"size":17932,"mtime":1694757737592,"results":"711","hashOfConfig":"660"},{"size":2596,"mtime":1694084108757,"results":"712","hashOfConfig":"660"},{"size":3543,"mtime":1694757737508,"results":"713","hashOfConfig":"660"},{"size":2650,"mtime":1689942375601,"results":"714","hashOfConfig":"660"},{"size":15953,"mtime":1694757737515,"results":"715","hashOfConfig":"660"},{"size":14478,"mtime":1688987008135,"results":"716","hashOfConfig":"660"},{"size":26608,"mtime":1691822797399,"results":"717","hashOfConfig":"660"},{"size":32942,"mtime":1686293169689,"results":"718","hashOfConfig":"660"},{"size":4457,"mtime":1692253907272,"results":"719","hashOfConfig":"660"},{"size":16074,"mtime":1688977280117,"results":"720","hashOfConfig":"660"},{"size":5098,"mtime":1692253907288,"results":"721","hashOfConfig":"660"},{"size":25612,"mtime":1692706250581,"results":"722","hashOfConfig":"660"},{"size":2368,"mtime":1689942375628,"results":"723","hashOfConfig":"660"},{"size":2494,"mtime":1689942375637,"results":"724","hashOfConfig":"660"},{"size":15232,"mtime":1688977280110,"results":"725","hashOfConfig":"660"},{"size":2168,"mtime":1689857294978,"results":"726","hashOfConfig":"660"},{"size":4842,"mtime":1692253907240,"results":"727","hashOfConfig":"660"},{"size":20523,"mtime":1694757737536,"results":"728","hashOfConfig":"660"},{"size":34068,"mtime":1690627373159,"results":"729","hashOfConfig":"660"},{"size":21476,"mtime":1691822797394,"results":"730","hashOfConfig":"660"},{"size":7593,"mtime":1694153531592,"results":"731","hashOfConfig":"660"},{"size":1616,"mtime":1690201965343,"results":"732","hashOfConfig":"660"},{"size":85036,"mtime":1694864069838,"results":"733","hashOfConfig":"660"},{"size":28072,"mtime":1694757737684,"results":"734","hashOfConfig":"660"},{"size":3319,"mtime":1694436513990,"results":"735","hashOfConfig":"660"},{"size":2051,"mtime":1694436513989,"results":"736","hashOfConfig":"660"},{"size":7116,"mtime":1692969107110,"results":"737","hashOfConfig":"660"},{"size":4289,"mtime":1688794802390,"results":"738","hashOfConfig":"660"},{"size":7131,"mtime":1695026629749,"results":"739","hashOfConfig":"660"},{"size":2787,"mtime":1680246109203,"results":"740","hashOfConfig":"660"},{"size":1657,"mtime":1694436513988,"results":"741","hashOfConfig":"660"},{"size":1804,"mtime":1686720296645,"results":"742","hashOfConfig":"660"},{"size":4953,"mtime":1686720296645,"results":"743","hashOfConfig":"660"},{"size":1636,"mtime":1686724155942,"results":"744","hashOfConfig":"660"},{"size":2072,"mtime":1689857294997,"results":"745","hashOfConfig":"660"},{"size":3482,"mtime":1693212962435,"results":"746","hashOfConfig":"660"},{"size":2197,"mtime":1686724156067,"results":"747","hashOfConfig":"660"},{"size":15571,"mtime":1668418803084,"results":"748","hashOfConfig":"660"},{"size":1504,"mtime":1668576286362,"results":"749","hashOfConfig":"660"},{"size":1085,"mtime":1668418803083,"results":"750","hashOfConfig":"660"},{"size":12616,"mtime":1694586572915,"results":"751","hashOfConfig":"660"},{"size":6190,"mtime":1684922217057,"results":"752","hashOfConfig":"660"},{"size":2080,"mtime":1668418803084,"results":"753","hashOfConfig":"660"},{"size":1626,"mtime":1686724155909,"results":"754","hashOfConfig":"660"},{"size":3397,"mtime":1689941585377,"results":"755","hashOfConfig":"660"},{"size":1426,"mtime":1691730072350,"results":"756","hashOfConfig":"660"},{"size":580,"mtime":1668576286355,"results":"757","hashOfConfig":"660"},{"size":1203,"mtime":1680246109395,"results":"758","hashOfConfig":"660"},{"size":3079,"mtime":1693565931748,"results":"759","hashOfConfig":"660"},{"size":522,"mtime":1668576286359,"results":"760","hashOfConfig":"660"},{"size":465,"mtime":1668576286361,"results":"761","hashOfConfig":"660"},{"size":694,"mtime":1694436513989,"results":"762","hashOfConfig":"660"},{"size":50960,"mtime":1695280121766,"results":"763","hashOfConfig":"660"},{"size":1210,"mtime":1689941585341,"results":"764","hashOfConfig":"660"},{"size":1060,"mtime":1680246109203,"results":"765","hashOfConfig":"660"},{"size":940,"mtime":1686724155948,"results":"766","hashOfConfig":"660"},{"size":1070,"mtime":1686724156067,"results":"767","hashOfConfig":"660"},{"size":822,"mtime":1686720296645,"results":"768","hashOfConfig":"660"},{"size":2766,"mtime":1686720296645,"results":"769","hashOfConfig":"660"},{"size":1005,"mtime":1689857294995,"results":"770","hashOfConfig":"660"},{"size":1770,"mtime":1693212962428,"results":"771","hashOfConfig":"660"},{"size":726,"mtime":1668576286362,"results":"772","hashOfConfig":"660"},{"size":728,"mtime":1686724155909,"results":"773","hashOfConfig":"660"},{"size":2114,"mtime":1688727174071,"results":"774","hashOfConfig":"660"},{"size":661,"mtime":1691730072350,"results":"775","hashOfConfig":"660"},{"size":268,"mtime":1668576286355,"results":"776","hashOfConfig":"660"},{"size":556,"mtime":1680246109380,"results":"777","hashOfConfig":"660"},{"size":1299,"mtime":1689079709407,"results":"778","hashOfConfig":"660"},{"size":195,"mtime":1668576286359,"results":"779","hashOfConfig":"660"},{"size":175,"mtime":1668576286360,"results":"780","hashOfConfig":"660"},{"size":3162,"mtime":1690627373201,"results":"781","hashOfConfig":"660"},{"size":611,"mtime":1668418803080,"results":"782","hashOfConfig":"660"},{"size":714,"mtime":1668418803091,"results":"783","hashOfConfig":"660"},{"size":2462,"mtime":1692447664202,"results":"784","hashOfConfig":"660"},{"size":17645,"mtime":1695211998902,"results":"785","hashOfConfig":"660"},{"size":1751,"mtime":1686724155956,"results":"786","hashOfConfig":"660"},{"size":1714,"mtime":1686724156009,"results":"787","hashOfConfig":"660"},{"size":1614,"mtime":1686724155990,"results":"788","hashOfConfig":"660"},{"size":3412,"mtime":1692166097195,"results":"789","hashOfConfig":"660"},{"size":2833,"mtime":1694695299105,"results":"790","hashOfConfig":"660"},{"size":772,"mtime":1686724155956,"results":"791","hashOfConfig":"660"},{"size":903,"mtime":1686724156015,"results":"792","hashOfConfig":"660"},{"size":814,"mtime":1686724155996,"results":"793","hashOfConfig":"660"},{"size":1631,"mtime":1686895458007,"results":"794","hashOfConfig":"660"},{"size":1778,"mtime":1686720296645,"results":"795","hashOfConfig":"660"},{"size":2055,"mtime":1689857295000,"results":"796","hashOfConfig":"660"},{"size":830,"mtime":1686720296645,"results":"797","hashOfConfig":"660"},{"size":1656,"mtime":1686720296643,"results":"798","hashOfConfig":"660"},{"size":1641,"mtime":1686737821936,"results":"799","hashOfConfig":"660"},{"size":2011,"mtime":1686737822025,"results":"800","hashOfConfig":"660"},{"size":1829,"mtime":1686720296645,"results":"801","hashOfConfig":"660"},{"size":972,"mtime":1689857295000,"results":"802","hashOfConfig":"660"},{"size":720,"mtime":1686720296644,"results":"803","hashOfConfig":"660"},{"size":738,"mtime":1686737821943,"results":"804","hashOfConfig":"660"},{"size":876,"mtime":1686737822033,"results":"805","hashOfConfig":"660"},{"size":1337,"mtime":1686724156020,"results":"806","hashOfConfig":"660"},{"size":1640,"mtime":1686725893270,"results":"807","hashOfConfig":"660"},{"size":7501,"mtime":1691822797397,"results":"808","hashOfConfig":"660"},{"size":2126,"mtime":1686720296645,"results":"809","hashOfConfig":"660"},{"size":4169,"mtime":1684999012503,"results":"810","hashOfConfig":"660"},{"size":2530,"mtime":1695037169991,"results":"811","hashOfConfig":"660"},{"size":2349,"mtime":1688794802380,"results":"812","hashOfConfig":"660"},{"size":2952,"mtime":1695037170008,"results":"813","hashOfConfig":"660"},{"size":2434,"mtime":1688794802381,"results":"814","hashOfConfig":"660"},{"size":2532,"mtime":1695037170000,"results":"815","hashOfConfig":"660"},{"size":2993,"mtime":1689857295002,"results":"816","hashOfConfig":"660"},{"size":2557,"mtime":1688794802376,"results":"817","hashOfConfig":"660"},{"size":2952,"mtime":1690022347172,"results":"818","hashOfConfig":"660"},{"size":2753,"mtime":1690022347131,"results":"819","hashOfConfig":"660"},{"size":2455,"mtime":1688794802374,"results":"820","hashOfConfig":"660"},{"size":2701,"mtime":1688794802375,"results":"821","hashOfConfig":"660"},{"size":2492,"mtime":1690022347163,"results":"822","hashOfConfig":"660"},{"size":2822,"mtime":1690022347135,"results":"823","hashOfConfig":"660"},{"size":8079,"mtime":1693212962448,"results":"824","hashOfConfig":"660"},{"size":6011,"mtime":1692166097195,"results":"825","hashOfConfig":"660"},{"size":6623,"mtime":1690183950045,"results":"826","hashOfConfig":"660"},{"size":2530,"mtime":1690022347167,"results":"827","hashOfConfig":"660"},{"size":826,"mtime":1686720296645,"results":"828","hashOfConfig":"660"},{"size":3920,"mtime":1688794802397,"results":"829","hashOfConfig":"660"},{"size":10379,"mtime":1695037170025,"results":"830","hashOfConfig":"660"},{"size":2662,"mtime":1690022347126,"results":"831","hashOfConfig":"660"},{"size":1206,"mtime":1692423562315,"results":"832","hashOfConfig":"660"},{"size":2154,"mtime":1689857294998,"results":"833","hashOfConfig":"660"},{"size":1488,"mtime":1688794802415,"results":"834","hashOfConfig":"660"},{"size":5689,"mtime":1688794802417,"results":"835","hashOfConfig":"660"},{"size":1882,"mtime":1688794802413,"results":"836","hashOfConfig":"660"},{"size":5873,"mtime":1693565931748,"results":"837","hashOfConfig":"660"},{"size":1975,"mtime":1688990725643,"results":"838","hashOfConfig":"660"},{"size":1974,"mtime":1686573741066,"results":"839","hashOfConfig":"660"},{"size":1530,"mtime":1688794802416,"results":"840","hashOfConfig":"660"},{"size":2325,"mtime":1689942375739,"results":"841","hashOfConfig":"660"},{"size":2313,"mtime":1689942375746,"results":"842","hashOfConfig":"660"},{"size":2506,"mtime":1688986062630,"results":"843","hashOfConfig":"660"},{"size":2326,"mtime":1689934210725,"results":"844","hashOfConfig":"660"},{"size":2383,"mtime":1687523156608,"results":"845","hashOfConfig":"660"},{"size":2422,"mtime":1689942375730,"results":"846","hashOfConfig":"660"},{"size":2282,"mtime":1687773206827,"results":"847","hashOfConfig":"660"},{"size":2433,"mtime":1689934200218,"results":"848","hashOfConfig":"660"},{"size":2354,"mtime":1689942375719,"results":"849","hashOfConfig":"660"},{"size":2460,"mtime":1689934200213,"results":"850","hashOfConfig":"660"},{"size":2130,"mtime":1689942375759,"results":"851","hashOfConfig":"660"},{"size":2451,"mtime":1689942375739,"results":"852","hashOfConfig":"660"},{"size":3037,"mtime":1693212962441,"results":"853","hashOfConfig":"660"},{"size":3781,"mtime":1668576286252,"results":"854","hashOfConfig":"855"},{"size":5507,"mtime":1668576286251,"results":"856","hashOfConfig":"855"},{"size":8739,"mtime":1689149864925,"results":"857","hashOfConfig":"660"},{"size":5232,"mtime":1691822797395,"results":"858","hashOfConfig":"660"},{"size":6134,"mtime":1691822797396,"results":"859","hashOfConfig":"660"},{"size":752,"mtime":1686724156020,"results":"860","hashOfConfig":"660"},{"size":787,"mtime":1686725893270,"results":"861","hashOfConfig":"660"},{"size":3802,"mtime":1688977280184,"results":"862","hashOfConfig":"660"},{"size":1085,"mtime":1686720296645,"results":"863","hashOfConfig":"660"},{"size":4404,"mtime":1689942375753,"results":"864","hashOfConfig":"660"},{"size":2308,"mtime":1688645665327,"results":"865","hashOfConfig":"660"},{"size":6914,"mtime":1689149864944,"results":"866","hashOfConfig":"660"},{"size":2788,"mtime":1688985945614,"results":"867","hashOfConfig":"660"},{"size":4200,"mtime":1689941585361,"results":"868","hashOfConfig":"660"},{"size":2496,"mtime":1689934200214,"results":"869","hashOfConfig":"660"},{"size":4922,"mtime":1689941585383,"results":"870","hashOfConfig":"660"},{"size":2837,"mtime":1689857294997,"results":"871","hashOfConfig":"660"},{"size":595,"mtime":1681992887972,"results":"872","hashOfConfig":"660"},{"size":1902,"mtime":1691822797415,"results":"873","hashOfConfig":"660"},{"size":677,"mtime":1668576286360,"results":"874","hashOfConfig":"660"},{"size":1407,"mtime":1692004887927,"results":"875","hashOfConfig":"660"},{"size":905,"mtime":1681885935236,"results":"876","hashOfConfig":"660"},{"size":3114,"mtime":1689079709436,"results":"877","hashOfConfig":"660"},{"size":2344,"mtime":1668576286362,"results":"878","hashOfConfig":"660"},{"size":4967,"mtime":1677246092471,"results":"879","hashOfConfig":"660"},{"size":749,"mtime":1684922217062,"results":"880","hashOfConfig":"660"},{"size":9235,"mtime":1685001605067,"results":"881","hashOfConfig":"660"},{"size":26174,"mtime":1668418803086,"results":"882","hashOfConfig":"660"},{"size":1552,"mtime":1668576286252,"results":"883","hashOfConfig":"855"},{"size":1648,"mtime":1668576286251,"results":"884","hashOfConfig":"855"},{"size":1722,"mtime":1668418803106,"results":"885","hashOfConfig":"660"},{"size":3149,"mtime":1688977280151,"results":"886","hashOfConfig":"660"},{"size":3539,"mtime":1688977280177,"results":"887","hashOfConfig":"660"},{"size":2449,"mtime":1689934200210,"results":"888","hashOfConfig":"660"},{"size":16678,"mtime":1688987008144,"results":"889","hashOfConfig":"660"},{"size":1718,"mtime":1686724156045,"results":"890","hashOfConfig":"660"},{"size":906,"mtime":1686724156055,"results":"891","hashOfConfig":"660"},{"size":2567,"mtime":1688794802395,"results":"892","hashOfConfig":"660"},{"size":2368,"mtime":1689934200215,"results":"893","hashOfConfig":"660"},{"size":6959,"mtime":1688977280168,"results":"894","hashOfConfig":"660"},{"size":10740,"mtime":1686642443020,"results":"895","hashOfConfig":"660"},{"size":3306,"mtime":1689941585333,"results":"896","hashOfConfig":"660"},{"size":2741,"mtime":1689934200210,"results":"897","hashOfConfig":"660"},{"size":3091,"mtime":1688794802396,"results":"898","hashOfConfig":"660"},{"size":14758,"mtime":1688987008145,"results":"899","hashOfConfig":"660"},{"size":2427,"mtime":1688472446053,"results":"900","hashOfConfig":"660"},{"size":3811,"mtime":1684565323460,"results":"901","hashOfConfig":"660"},{"size":1256,"mtime":1688472446044,"results":"902","hashOfConfig":"660"},{"size":1927,"mtime":1694668381124,"results":"903","hashOfConfig":"660"},{"size":1022,"mtime":1693544041588,"results":"904","hashOfConfig":"660"},{"size":668,"mtime":1689570009281,"results":"905","hashOfConfig":"660"},{"size":466,"mtime":1687582121577,"results":"906","hashOfConfig":"660"},{"size":2585,"mtime":1692875293587,"results":"907","hashOfConfig":"660"},{"size":3253,"mtime":1694668380405,"results":"908","hashOfConfig":"660"},{"size":31025,"mtime":1694668380412,"results":"909","hashOfConfig":"660"},{"size":1259,"mtime":1693638767685,"results":"910","hashOfConfig":"660"},{"size":17004,"mtime":1694501749996,"results":"911","hashOfConfig":"660"},{"size":27056,"mtime":1692863832395,"results":"912","hashOfConfig":"660"},{"size":8637,"mtime":1693212962349,"results":"913","hashOfConfig":"660"},{"size":6958,"mtime":1695211998909,"results":"914","hashOfConfig":"660"},{"size":8663,"mtime":1695211998912,"results":"915","hashOfConfig":"660"},{"size":1062,"mtime":1693460020440,"results":"916","hashOfConfig":"660"},{"size":18350,"mtime":1691822797381,"results":"917","hashOfConfig":"660"},{"size":3248,"mtime":1688794802380,"results":"918","hashOfConfig":"660"},{"size":2955,"mtime":1688645665255,"results":"919","hashOfConfig":"660"},{"size":3066,"mtime":1689923166001,"results":"920","hashOfConfig":"660"},{"size":16506,"mtime":1688985527561,"results":"921","hashOfConfig":"660"},{"size":874,"mtime":1675059100692,"results":"922","hashOfConfig":"660"},{"size":2370,"mtime":1678793839498,"results":"923","hashOfConfig":"660"},{"size":41701,"mtime":1694692389539,"results":"924","hashOfConfig":"660"},{"size":18761,"mtime":1694521350394,"results":"925","hashOfConfig":"660"},{"size":6630,"mtime":1693802318379,"results":"926","hashOfConfig":"660"},{"size":4248,"mtime":1693460020452,"results":"927","hashOfConfig":"660"},{"size":12932,"mtime":1695280121795,"results":"928","hashOfConfig":"660"},{"size":2169,"mtime":1693460020463,"results":"929","hashOfConfig":"660"},{"size":77,"mtime":1680246108366,"results":"930","hashOfConfig":"660"},{"size":22484,"mtime":1694757737699,"results":"931","hashOfConfig":"660"},{"size":12498,"mtime":1694586572923,"results":"932","hashOfConfig":"660"},{"size":2190,"mtime":1688994097991,"results":"933","hashOfConfig":"660"},{"size":7577,"mtime":1692253907318,"results":"934","hashOfConfig":"660"},{"size":1429,"mtime":1684394006762,"results":"935","hashOfConfig":"660"},{"size":1209,"mtime":1678793839514,"results":"936","hashOfConfig":"660"},{"size":548,"mtime":1684574237326,"results":"937","hashOfConfig":"660"},{"size":24168,"mtime":1687173625230,"results":"938","hashOfConfig":"855"},{"size":1288,"mtime":1693890195107,"results":"939","hashOfConfig":"660"},{"size":6468,"mtime":1691131764290,"results":"940","hashOfConfig":"660"},{"size":589,"mtime":1690204807903,"results":"941","hashOfConfig":"855"},{"size":3692,"mtime":1690373154393,"results":"942","hashOfConfig":"660"},{"size":16870,"mtime":1688537531873,"results":"943","hashOfConfig":"660"},{"size":464,"mtime":1675848244131,"results":"944","hashOfConfig":"660"},{"size":1384,"mtime":1681197042020,"results":"945","hashOfConfig":"660"},{"size":930,"mtime":1675848244132,"results":"946","hashOfConfig":"660"},{"size":109,"mtime":1675848244131,"results":"947","hashOfConfig":"660"},{"size":1971,"mtime":1689942375774,"results":"948","hashOfConfig":"660"},{"size":3359,"mtime":1688794802402,"results":"949","hashOfConfig":"660"},{"size":1808,"mtime":1684574237336,"results":"950","hashOfConfig":"660"},{"size":1218,"mtime":1684574237331,"results":"951","hashOfConfig":"660"},{"size":1794,"mtime":1684574237348,"results":"952","hashOfConfig":"660"},{"size":4496,"mtime":1688994097992,"results":"953","hashOfConfig":"660"},{"size":1512,"mtime":1677560528521,"results":"954","hashOfConfig":"660"},{"size":2395,"mtime":1677560528523,"results":"955","hashOfConfig":"660"},{"size":6894,"mtime":1692253907340,"results":"956","hashOfConfig":"660"},{"size":24040,"mtime":1694586572926,"results":"957","hashOfConfig":"660"},{"size":31134,"mtime":1694586572928,"results":"958","hashOfConfig":"660"},{"size":32922,"mtime":1694586572924,"results":"959","hashOfConfig":"660"},{"size":7204,"mtime":1692253907354,"results":"960","hashOfConfig":"660"},{"size":33182,"mtime":1694586572929,"results":"961","hashOfConfig":"660"},{"size":8412,"mtime":1692253907347,"results":"962","hashOfConfig":"660"},{"size":6497,"mtime":1692253907332,"results":"963","hashOfConfig":"660"},{"size":7200,"mtime":1689597911401,"results":"964","hashOfConfig":"660"},{"size":10264,"mtime":1694757737600,"results":"965","hashOfConfig":"660"},{"size":9050,"mtime":1689942375699,"results":"966","hashOfConfig":"660"},{"size":36747,"mtime":1693294375831,"results":"967","hashOfConfig":"660"},{"size":23756,"mtime":1688985527581,"results":"968","hashOfConfig":"660"},{"size":3264,"mtime":1688994097991,"results":"969","hashOfConfig":"660"},{"size":3910,"mtime":1688994097993,"results":"970","hashOfConfig":"660"},{"size":4703,"mtime":1688794802405,"results":"971","hashOfConfig":"660"},{"size":3968,"mtime":1688794802405,"results":"972","hashOfConfig":"660"},{"size":27459,"mtime":1688987008147,"results":"973","hashOfConfig":"660"},{"size":5227,"mtime":1695037170017,"results":"974","hashOfConfig":"660"},{"size":3051,"mtime":1691822797413,"results":"975","hashOfConfig":"660"},{"size":1806,"mtime":1684575410058,"results":"976","hashOfConfig":"660"},{"size":1703,"mtime":1684574237358,"results":"977","hashOfConfig":"660"},{"size":1544,"mtime":1684576213683,"results":"978","hashOfConfig":"660"},{"size":1925,"mtime":1684394006764,"results":"979","hashOfConfig":"660"},{"size":1807,"mtime":1678793839534,"results":"980","hashOfConfig":"660"},{"size":2175,"mtime":1691822797412,"results":"981","hashOfConfig":"660"},{"size":840,"mtime":1678793839534,"results":"982","hashOfConfig":"660"},{"size":6720,"mtime":1688985472494,"results":"983","hashOfConfig":"660"},{"size":2915,"mtime":1684574237354,"results":"984","hashOfConfig":"660"},{"size":2945,"mtime":1684575410049,"results":"985","hashOfConfig":"660"},{"size":2178,"mtime":1684575410022,"results":"986","hashOfConfig":"660"},{"size":1046,"mtime":1684574237355,"results":"987","hashOfConfig":"660"},{"size":1420,"mtime":1684575410043,"results":"988","hashOfConfig":"660"},{"size":860,"mtime":1684575410028,"results":"989","hashOfConfig":"660"},{"size":1296,"mtime":1691822797411,"results":"990","hashOfConfig":"660"},{"size":2987,"mtime":1677560528480,"results":"991","hashOfConfig":"660"},{"size":2305,"mtime":1689941584888,"results":"992","hashOfConfig":"660"},{"size":2520,"mtime":1690349956084,"results":"993","hashOfConfig":"660"},{"size":3892,"mtime":1694757737556,"results":"994","hashOfConfig":"660"},{"size":26993,"mtime":1694757737563,"results":"995","hashOfConfig":"660"},{"size":686,"mtime":1686737821996,"results":"996","hashOfConfig":"660"},{"size":1433,"mtime":1686737822002,"results":"997","hashOfConfig":"660"},{"size":1333,"mtime":1691141529984,"results":"998","hashOfConfig":"660"},{"size":9919,"mtime":1691141529984,"results":"999","hashOfConfig":"660"},{"size":11708,"mtime":1686390985602,"results":"1000","hashOfConfig":"660"},{"size":4261,"mtime":1691141530000,"results":"1001","hashOfConfig":"660"},{"size":2288,"mtime":1689942375766,"results":"1002","hashOfConfig":"660"},{"size":20252,"mtime":1694757737577,"results":"1003","hashOfConfig":"660"},{"size":4392,"mtime":1694757737570,"results":"1004","hashOfConfig":"660"},{"size":2645,"mtime":1692447664202,"results":"1005","hashOfConfig":"660"},{"size":724,"mtime":1686740096730,"results":"1006","hashOfConfig":"660"},{"size":1492,"mtime":1686740096735,"results":"1007","hashOfConfig":"660"},{"size":1220,"mtime":1688794802378,"results":"1008","hashOfConfig":"660"},{"size":1253,"mtime":1687523156586,"results":"1009","hashOfConfig":"660"},{"size":0,"mtime":1678081807924,"results":"1010","hashOfConfig":"855"},{"size":17572,"mtime":1684495276736,"results":"1011","hashOfConfig":"855"},{"size":652,"mtime":1678710203066,"results":"1012","hashOfConfig":"660"},{"size":322,"mtime":1678271916356,"results":"1013","hashOfConfig":"660"},{"size":5614,"mtime":1694434793441,"results":"1014","hashOfConfig":"660"},{"size":29574,"mtime":1694436269115,"results":"1015","hashOfConfig":"660"},{"size":10911,"mtime":1687173625255,"results":"1016","hashOfConfig":"660"},{"size":18095,"mtime":1694436269126,"results":"1017","hashOfConfig":"660"},{"size":4205,"mtime":1689750330775,"results":"1018","hashOfConfig":"660"},{"size":202313,"mtime":1678969741519,"results":"1019","hashOfConfig":"855"},{"size":1307,"mtime":1689857295007,"results":"1020","hashOfConfig":"660"},{"size":1281,"mtime":1690022347167,"results":"1021","hashOfConfig":"660"},{"size":11499,"mtime":1692253907303,"results":"1022","hashOfConfig":"660"},{"size":322,"mtime":1689857295006,"results":"1023","hashOfConfig":"660"},{"size":765,"mtime":1689857295006,"results":"1024","hashOfConfig":"660"},{"size":5635,"mtime":1692250724957,"results":"1025","hashOfConfig":"660"},{"size":4031,"mtime":1690022347133,"results":"1026","hashOfConfig":"660"},{"size":3674,"mtime":1691151473255,"results":"1027","hashOfConfig":"660"},{"size":2788,"mtime":1686720296645,"results":"1028","hashOfConfig":"660"},{"size":1541,"mtime":1686720296645,"results":"1029","hashOfConfig":"660"},{"size":18730,"mtime":1695037169962,"results":"1030","hashOfConfig":"660"},{"size":721,"mtime":1692334045306,"results":"1031","hashOfConfig":"660"},{"size":5983,"mtime":1692706250566,"results":"1032","hashOfConfig":"660"},{"size":7953,"mtime":1695211998899,"results":"1033","hashOfConfig":"660"},{"size":8173,"mtime":1694757737445,"results":"1034","hashOfConfig":"660"},{"size":28094,"mtime":1694493417441,"results":"1035","hashOfConfig":"660"},{"size":1986,"mtime":1691410483053,"results":"1036","hashOfConfig":"660"},{"size":4089,"mtime":1691410483060,"results":"1037","hashOfConfig":"660"},{"size":28895,"mtime":1694672304575,"results":"1038","hashOfConfig":"660"},{"size":3099,"mtime":1689312126296,"results":"1039","hashOfConfig":"660"},{"size":3769,"mtime":1695037170045,"results":"1040","hashOfConfig":"660"},{"size":2052,"mtime":1688722606805,"results":"1041","hashOfConfig":"660"},{"size":966,"mtime":1688561729622,"results":"1042","hashOfConfig":"660"},{"size":2857,"mtime":1690546997109,"results":"1043","hashOfConfig":"660"},{"size":31143,"mtime":1692253907295,"results":"1044","hashOfConfig":"660"},{"size":2165,"mtime":1687523156610,"results":"1045","hashOfConfig":"660"},{"size":2080,"mtime":1686737821977,"results":"1046","hashOfConfig":"660"},{"size":938,"mtime":1686737821969,"results":"1047","hashOfConfig":"660"},{"size":23310,"mtime":1694692389532,"results":"1048","hashOfConfig":"660"},{"size":10526,"mtime":1693565931685,"results":"1049","hashOfConfig":"660"},{"size":1792,"mtime":1690349956076,"results":"1050","hashOfConfig":"660"},{"size":2041,"mtime":1690181061108,"results":"1051","hashOfConfig":"660"},{"size":13244,"mtime":1693991328738,"results":"1052","hashOfConfig":"660"},{"size":1233,"mtime":1690181061089,"results":"1053","hashOfConfig":"660"},{"size":542,"mtime":1690183950056,"results":"1054","hashOfConfig":"660"},{"size":42129,"mtime":1694757737488,"results":"1055","hashOfConfig":"660"},{"size":4480,"mtime":1695037169980,"results":"1056","hashOfConfig":"660"},{"size":2729,"mtime":1688645665199,"results":"1057","hashOfConfig":"660"},{"size":3107,"mtime":1688722606790,"results":"1058","hashOfConfig":"660"},{"size":1136,"mtime":1688472446003,"results":"1059","hashOfConfig":"660"},{"size":11117,"mtime":1694436269130,"results":"1060","hashOfConfig":"660"},{"size":27668,"mtime":1694757737474,"results":"1061","hashOfConfig":"660"},{"size":14225,"mtime":1694757737481,"results":"1062","hashOfConfig":"660"},{"size":781,"mtime":1688969864954,"results":"1063","hashOfConfig":"660"},{"size":6114,"mtime":1689224402444,"results":"1064","hashOfConfig":"660"},{"size":587,"mtime":1688969864953,"results":"1065","hashOfConfig":"660"},{"size":805,"mtime":1689224402451,"results":"1066","hashOfConfig":"660"},{"size":2020,"mtime":1688645665188,"results":"1067","hashOfConfig":"660"},{"size":2364,"mtime":1688794802373,"results":"1068","hashOfConfig":"660"},{"size":12045,"mtime":1688985527553,"results":"1069","hashOfConfig":"660"},{"size":2545,"mtime":1688645665069,"results":"1070","hashOfConfig":"660"},{"size":1540,"mtime":1683960072984,"results":"1071","hashOfConfig":"660"},{"size":542,"mtime":1683698792747,"results":"1072","hashOfConfig":"660"},{"size":1676,"mtime":1690201965315,"results":"1073","hashOfConfig":"660"},{"size":2232,"mtime":1690022347124,"results":"1074","hashOfConfig":"660"},{"size":18083,"mtime":1692253907183,"results":"1075","hashOfConfig":"660"},{"size":1349,"mtime":1686918165275,"results":"1076","hashOfConfig":"660"},{"size":606,"mtime":1686918165285,"results":"1077","hashOfConfig":"660"},{"size":11345,"mtime":1694434793511,"results":"1078","hashOfConfig":"660"},{"size":4484,"mtime":1690366865351,"results":"1079","hashOfConfig":"660"},{"size":4985,"mtime":1695037170053,"results":"1080","hashOfConfig":"660"},{"size":1330,"mtime":1689312126317,"results":"1081","hashOfConfig":"660"},{"size":2710,"mtime":1689312126296,"results":"1082","hashOfConfig":"660"},{"size":639,"mtime":1690201965129,"results":"1083","hashOfConfig":"660"},{"size":378,"mtime":1694171094488,"results":"1084","hashOfConfig":"660"},{"size":16893,"mtime":1694757737466,"results":"1085","hashOfConfig":"660"},{"size":2599,"mtime":1688645665299,"results":"1086","hashOfConfig":"660"},{"size":2912,"mtime":1690349956068,"results":"1087","hashOfConfig":"660"},{"size":917,"mtime":1688645665290,"results":"1088","hashOfConfig":"660"},{"size":2095,"mtime":1688645665282,"results":"1089","hashOfConfig":"660"},{"size":2693,"mtime":1690349956027,"results":"1090","hashOfConfig":"660"},{"size":21070,"mtime":1688992669417,"results":"1091","hashOfConfig":"660"},{"size":5256,"mtime":1694084159417,"results":"1092","hashOfConfig":"660"},{"size":3428,"mtime":1694072335744,"results":"1093","hashOfConfig":"660"},{"size":3116,"mtime":1694072335730,"results":"1094","hashOfConfig":"660"},{"size":1642,"mtime":1694072335737,"results":"1095","hashOfConfig":"660"},{"size":3602,"mtime":1694586624819,"results":"1096","hashOfConfig":"660"},{"size":31712,"mtime":1694846752158,"results":"1097","hashOfConfig":"660"},{"size":10911,"mtime":1693890195048,"results":"1098","hashOfConfig":"660"},{"size":18301,"mtime":1694846752159,"results":"1099","hashOfConfig":"660"},{"size":7641,"mtime":1694521350392,"results":"1100","hashOfConfig":"660"},{"size":2684,"mtime":1683969660089,"results":"1101","hashOfConfig":"660"},{"size":26275,"mtime":1694595571966,"results":"1102","hashOfConfig":"660"},{"size":6239,"mtime":1694862992251,"results":"1103","hashOfConfig":"660"},{"size":36360,"mtime":1694586572922,"results":"1104","hashOfConfig":"660"},{"size":12420,"mtime":1690364939281,"results":"1105","hashOfConfig":"660"},{"size":12138,"mtime":1691995099055,"results":"1106","hashOfConfig":"660"},{"size":5499,"mtime":1692706250583,"results":"1107","hashOfConfig":"660"},{"size":7340,"mtime":1683355258202,"results":"1108","hashOfConfig":"660"},{"size":26509,"mtime":1694863001681,"results":"1109","hashOfConfig":"660"},{"size":701,"mtime":1688794802399,"results":"1110","hashOfConfig":"660"},{"size":449,"mtime":1683355258455,"results":"1111","hashOfConfig":"660"},{"size":291,"mtime":1683355258454,"results":"1112","hashOfConfig":"660"},{"size":138,"mtime":1683355258454,"results":"1113","hashOfConfig":"660"},{"size":1234,"mtime":1684922217131,"results":"1114","hashOfConfig":"660"},{"size":10000,"mtime":1694436269132,"results":"1115","hashOfConfig":"660"},{"size":3112,"mtime":1694436269135,"results":"1116","hashOfConfig":"660"},{"size":848,"mtime":1683356255438,"results":"1117","hashOfConfig":"855"},{"size":866,"mtime":1683356255438,"results":"1118","hashOfConfig":"855"},{"size":6577,"mtime":1694436269133,"results":"1119","hashOfConfig":"660"},{"size":1424,"mtime":1690281865553,"results":"1120","hashOfConfig":"660"},{"size":1227,"mtime":1690281865545,"results":"1121","hashOfConfig":"660"},{"size":851,"mtime":1690281865530,"results":"1122","hashOfConfig":"660"},{"size":564,"mtime":1690281865535,"results":"1123","hashOfConfig":"660"},{"size":1687,"mtime":1684137215428,"results":"1124","hashOfConfig":"855"},{"size":2953,"mtime":1694436269137,"results":"1125","hashOfConfig":"660"},{"size":143,"mtime":1694676306736,"results":"1126","hashOfConfig":"660"},{"size":851,"mtime":1691660598256,"results":"1127","hashOfConfig":"660"},{"size":140,"mtime":1684488765172,"results":"1128","hashOfConfig":"660"},{"size":9934,"mtime":1693640818717,"results":"1129","hashOfConfig":"660"},{"size":3176,"mtime":1687439523729,"results":"1130","hashOfConfig":"660"},{"size":25176,"mtime":1687177823142,"results":"1131","hashOfConfig":"660"},{"size":704,"mtime":1688794802416,"results":"1132","hashOfConfig":"660"},{"size":189,"mtime":1685102783258,"results":"1133","hashOfConfig":"660"},{"size":64,"mtime":1685102783257,"results":"1134","hashOfConfig":"660"},{"size":324,"mtime":1685339139168,"results":"1135","hashOfConfig":"660"},{"size":115,"mtime":1685339139193,"results":"1136","hashOfConfig":"660"},{"size":659,"mtime":1688794802413,"results":"1137","hashOfConfig":"660"},{"size":584,"mtime":1686135963167,"results":"1138","hashOfConfig":"660"},{"size":13918,"mtime":1694757737437,"results":"1139","hashOfConfig":"660"},{"size":1328,"mtime":1694579470092,"results":"1140","hashOfConfig":"660"},{"size":3182,"mtime":1692781908027,"results":"1141","hashOfConfig":"660"},{"size":1209,"mtime":1692696812351,"results":"1142","hashOfConfig":"660"},{"size":832,"mtime":1689597884729,"results":"1143","hashOfConfig":"660"},{"size":372,"mtime":1689597884746,"results":"1144","hashOfConfig":"660"},{"size":4055,"mtime":1692781907976,"results":"1145","hashOfConfig":"660"},{"size":1108,"mtime":1688794802376,"results":"1146","hashOfConfig":"660"},{"size":1362,"mtime":1688472446012,"results":"1147","hashOfConfig":"660"},{"size":16511,"mtime":1688987008134,"results":"1148","hashOfConfig":"660"},{"size":296,"mtime":1687413480006,"results":"1149","hashOfConfig":"660"},{"size":687,"mtime":1687413479993,"results":"1150","hashOfConfig":"660"},{"size":22832,"mtime":1690637965986,"results":"1151","hashOfConfig":"660"},{"size":24475,"mtime":1694757737523,"results":"1152","hashOfConfig":"660"},{"size":5493,"mtime":1694757737459,"results":"1153","hashOfConfig":"660"},{"size":3154,"mtime":1686029317042,"results":"1154","hashOfConfig":"855"},{"size":3150,"mtime":1686029317042,"results":"1155","hashOfConfig":"660"},{"size":3968,"mtime":1686740096724,"results":"1156","hashOfConfig":"660"},{"size":2517,"mtime":1690281865517,"results":"1157","hashOfConfig":"660"},{"size":13150,"mtime":1694757737516,"results":"1158","hashOfConfig":"660"},{"size":16750,"mtime":1692253907255,"results":"1159","hashOfConfig":"660"},{"size":1655,"mtime":1686740096713,"results":"1160","hashOfConfig":"660"},{"size":940,"mtime":1686740096718,"results":"1161","hashOfConfig":"660"},{"size":2631,"mtime":1686052031174,"results":"1162","hashOfConfig":"855"},{"size":5249,"mtime":1686052031204,"results":"1163","hashOfConfig":"855"},{"size":7441,"mtime":1689746945086,"results":"1164","hashOfConfig":"660"},{"size":3979,"mtime":1686293169616,"results":"1165","hashOfConfig":"855"},{"size":22260,"mtime":1686124315032,"results":"1166","hashOfConfig":"855"},{"size":7103,"mtime":1690627373142,"results":"1167","hashOfConfig":"660"},{"size":916,"mtime":1691560279009,"results":"1168","hashOfConfig":"660"},{"size":802,"mtime":1691560279025,"results":"1169","hashOfConfig":"660"},{"size":20113,"mtime":1694174130526,"results":"1170","hashOfConfig":"660"},{"size":230,"mtime":1691560279009,"results":"1171","hashOfConfig":"660"},{"size":497,"mtime":1691560279006,"results":"1172","hashOfConfig":"660"},{"size":4268,"mtime":1687178421536,"results":"1173","hashOfConfig":"660"},{"size":32296,"mtime":1694595571968,"results":"1174","hashOfConfig":"660"},{"size":862,"mtime":1687944250915,"results":"1175","hashOfConfig":"660"},{"size":1213,"mtime":1687591538942,"results":"1176","hashOfConfig":"660"},{"size":1761,"mtime":1688794802390,"results":"1177","hashOfConfig":"660"},{"size":400,"mtime":1687587224535,"results":"1178","hashOfConfig":"660"},{"size":25876,"mtime":1694846752165,"results":"1179","hashOfConfig":"660"},{"size":658,"mtime":1688794802403,"results":"1180","hashOfConfig":"660"},{"size":449,"mtime":1687604013530,"results":"1181","hashOfConfig":"660"},{"size":944,"mtime":1687604013539,"results":"1182","hashOfConfig":"660"},{"size":212,"mtime":1687604013536,"results":"1183","hashOfConfig":"660"},{"size":1074,"mtime":1693890195106,"results":"1184","hashOfConfig":"660"},{"size":23828,"mtime":1688552637788,"results":"1185","hashOfConfig":"660"},{"size":9881,"mtime":1694072335694,"results":"1186","hashOfConfig":"660"},{"size":7178,"mtime":1689766456418,"results":"1187","hashOfConfig":"660"},{"size":9287,"mtime":1694770070543,"results":"1188","hashOfConfig":"660"},{"size":12621,"mtime":1692857130570,"results":"1189","hashOfConfig":"660"},{"size":3589,"mtime":1688991106768,"results":"1190","hashOfConfig":"660"},{"size":3689,"mtime":1688811092943,"results":"1191","hashOfConfig":"660"},{"size":2095,"mtime":1690201965321,"results":"1192","hashOfConfig":"660"},{"size":1582,"mtime":1692353565250,"results":"1193","hashOfConfig":"660"},{"size":1303,"mtime":1690201965317,"results":"1194","hashOfConfig":"660"},{"size":617,"mtime":1690201965319,"results":"1195","hashOfConfig":"660"},{"size":14928,"mtime":1694757737736,"results":"1196","hashOfConfig":"660"},{"size":55750,"mtime":1694757737728,"results":"1197","hashOfConfig":"660"},{"size":12701,"mtime":1694493417453,"results":"1198","hashOfConfig":"660"},{"size":24396,"mtime":1694757737707,"results":"1199","hashOfConfig":"660"},{"size":9153,"mtime":1694757737714,"results":"1200","hashOfConfig":"660"},{"size":2977,"mtime":1691486132244,"results":"1201","hashOfConfig":"660"},{"size":14156,"mtime":1693991328757,"results":"1202","hashOfConfig":"660"},{"size":35536,"mtime":1694757737502,"results":"1203","hashOfConfig":"660"},{"size":5865,"mtime":1693991328798,"results":"1204","hashOfConfig":"660"},{"size":3936,"mtime":1693991328791,"results":"1205","hashOfConfig":"660"},{"size":3485,"mtime":1693991328769,"results":"1206","hashOfConfig":"660"},{"size":1744,"mtime":1693991328769,"results":"1207","hashOfConfig":"660"},{"size":12449,"mtime":1692857130507,"results":"1208","hashOfConfig":"660"},{"size":4127,"mtime":1694513313754,"results":"1209","hashOfConfig":"660"},{"size":3574,"mtime":1691410483113,"results":"1210","hashOfConfig":"660"},{"size":2856,"mtime":1694513313747,"results":"1211","hashOfConfig":"660"},{"size":1370,"mtime":1690022347127,"results":"1212","hashOfConfig":"660"},{"size":494,"mtime":1692857130570,"results":"1213","hashOfConfig":"660"},{"size":1153,"mtime":1692857130581,"results":"1214","hashOfConfig":"660"},{"size":418,"mtime":1691410483114,"results":"1215","hashOfConfig":"660"},{"size":174,"mtime":1691410483114,"results":"1216","hashOfConfig":"660"},{"size":671,"mtime":1692253907443,"results":"1217","hashOfConfig":"660"},{"size":895,"mtime":1692253907437,"results":"1218","hashOfConfig":"660"},{"size":5759,"mtime":1692857130553,"results":"1219","hashOfConfig":"660"},{"size":230,"mtime":1692253907431,"results":"1220","hashOfConfig":"660"},{"size":494,"mtime":1692253907425,"results":"1221","hashOfConfig":"660"},{"size":7294,"mtime":1694757737495,"results":"1222","hashOfConfig":"660"},{"size":23191,"mtime":1694523926189,"results":"1223","hashOfConfig":"660"},{"size":61663,"mtime":1694757737692,"results":"1224","hashOfConfig":"660"},{"size":6941,"mtime":1694586572930,"results":"1225","hashOfConfig":"660"},{"size":13228,"mtime":1692857130570,"results":"1226","hashOfConfig":"660"},{"size":1505,"mtime":1691141529953,"results":"1227","hashOfConfig":"660"},{"size":22352,"mtime":1693212962356,"results":"1228","hashOfConfig":"660"},{"size":7178,"mtime":1692781907987,"results":"1229","hashOfConfig":"660"},{"size":1363,"mtime":1694434793467,"results":"1230","hashOfConfig":"660"},{"size":750,"mtime":1690535840324,"results":"1231","hashOfConfig":"660"},{"size":1059,"mtime":1694434793561,"results":"1232","hashOfConfig":"660"},{"size":322,"mtime":1694434793555,"results":"1233","hashOfConfig":"660"},{"size":664,"mtime":1694434793549,"results":"1234","hashOfConfig":"660"},{"size":20594,"mtime":1693212962314,"results":"1235","hashOfConfig":"660"},{"size":1116,"mtime":1693653540582,"results":"1236","hashOfConfig":"660"},{"size":1161,"mtime":1693802318363,"results":"1237","hashOfConfig":"660"},{"size":1201,"mtime":1693653540598,"results":"1238","hashOfConfig":"660"},{"size":4167,"mtime":1693212962307,"results":"1239","hashOfConfig":"660"},{"size":11960,"mtime":1693653540615,"results":"1240","hashOfConfig":"660"},{"size":1103,"mtime":1690627373089,"results":"1241","hashOfConfig":"660"},{"size":13021,"mtime":1693638767672,"results":"1242","hashOfConfig":"660"},{"size":1103,"mtime":1690627373095,"results":"1243","hashOfConfig":"660"},{"size":7620,"mtime":1692615525882,"results":"1244","hashOfConfig":"660"},{"size":10908,"mtime":1693653540598,"results":"1245","hashOfConfig":"660"},{"size":5053,"mtime":1693653540631,"results":"1246","hashOfConfig":"660"},{"size":6179,"mtime":1694084108723,"results":"1247","hashOfConfig":"660"},{"size":5157,"mtime":1693638767685,"results":"1248","hashOfConfig":"660"},{"size":2957,"mtime":1693890195115,"results":"1249","hashOfConfig":"660"},{"size":1130,"mtime":1692863832422,"results":"1250","hashOfConfig":"660"},{"size":518,"mtime":1692863832428,"results":"1251","hashOfConfig":"660"},{"size":1940,"mtime":1692863832434,"results":"1252","hashOfConfig":"660"},{"size":14548,"mtime":1692857130534,"results":"1253","hashOfConfig":"660"},{"size":10616,"mtime":1692857130487,"results":"1254","hashOfConfig":"660"},{"size":743,"mtime":1692353565244,"results":"1255","hashOfConfig":"660"},{"size":4093,"mtime":1691141945565,"results":"1256","hashOfConfig":"660"},{"size":2421,"mtime":1693891711658,"results":"1257","hashOfConfig":"660"},{"size":988,"mtime":1691560278970,"results":"1258","hashOfConfig":"660"},{"size":474,"mtime":1691560278977,"results":"1259","hashOfConfig":"660"},{"size":560,"mtime":1691131764527,"results":"1260","hashOfConfig":"660"},{"size":274,"mtime":1691131764528,"results":"1261","hashOfConfig":"660"},{"size":642,"mtime":1691131764502,"results":"1262","hashOfConfig":"660"},{"size":282,"mtime":1691131764502,"results":"1263","hashOfConfig":"660"},{"size":985,"mtime":1691131764503,"results":"1264","hashOfConfig":"660"},{"size":1745,"mtime":1693316117092,"results":"1265","hashOfConfig":"660"},{"size":1115,"mtime":1691131764528,"results":"1266","hashOfConfig":"660"},{"size":12753,"mtime":1694153531545,"results":"1267","hashOfConfig":"660"},{"size":13050,"mtime":1692857130507,"results":"1268","hashOfConfig":"660"},{"size":1238,"mtime":1692186489975,"results":"1269","hashOfConfig":"660"},{"size":8592,"mtime":1692447664109,"results":"1270","hashOfConfig":"660"},{"size":1096,"mtime":1691995099079,"results":"1271","hashOfConfig":"660"},{"size":809,"mtime":1691995099068,"results":"1272","hashOfConfig":"660"},{"size":356,"mtime":1691995099079,"results":"1273","hashOfConfig":"660"},{"size":1376,"mtime":1691995099079,"results":"1274","hashOfConfig":"660"},{"size":12224,"mtime":1693212962363,"results":"1275","hashOfConfig":"660"},{"size":880,"mtime":1692781908020,"results":"1276","hashOfConfig":"660"},{"size":473,"mtime":1692166097210,"results":"1277","hashOfConfig":"660"},{"size":210,"mtime":1692166097210,"results":"1278","hashOfConfig":"660"},{"size":877,"mtime":1692166097229,"results":"1279","hashOfConfig":"660"},{"size":2381,"mtime":1692423562144,"results":"1280","hashOfConfig":"660"},{"size":5011,"mtime":1695214366268,"results":"1281","hashOfConfig":"660"},{"size":4428,"mtime":1694153531561,"results":"1282","hashOfConfig":"660"},{"size":11411,"mtime":1694757737421,"results":"1283","hashOfConfig":"660"},{"size":1037,"mtime":1693890195093,"results":"1284","hashOfConfig":"660"},{"size":11776,"mtime":1693565931627,"results":"1285","hashOfConfig":"660"},{"size":54832,"mtime":1692875293562,"results":"1286","hashOfConfig":"660"},{"size":6702,"mtime":1693544041419,"results":"1287","hashOfConfig":"660"},{"size":387,"mtime":1694695299103,"results":"1288","hashOfConfig":"660"},{"size":1981,"mtime":1693212962463,"results":"1289","hashOfConfig":"660"},{"size":1354,"mtime":1693212962453,"results":"1290","hashOfConfig":"660"},{"size":574,"mtime":1693212962463,"results":"1291","hashOfConfig":"660"},{"size":1811,"mtime":1693294375859,"results":"1292","hashOfConfig":"660"},{"size":14941,"mtime":1693899195422,"results":"1293","hashOfConfig":"660"},{"size":9402,"mtime":1693566239907,"results":"1294","hashOfConfig":"660"},{"size":2360,"mtime":1694695299101,"results":"1295","hashOfConfig":"660"},{"size":2579,"mtime":1694695299105,"results":"1296","hashOfConfig":"660"},{"size":4842,"mtime":1693565931701,"results":"1297","hashOfConfig":"660"},{"size":44132,"mtime":1694603338450,"results":"1298","hashOfConfig":"660"},{"size":4704,"mtime":1694757737453,"results":"1299","hashOfConfig":"660"},{"size":2664,"mtime":1694436513983,"results":"1300","hashOfConfig":"660"},{"size":3606,"mtime":1694501749996,"results":"1301","hashOfConfig":"660"},{"size":18837,"mtime":1694863001683,"results":"1302","hashOfConfig":"660"},{"size":16030,"mtime":1695037169971,"results":"1303","hashOfConfig":"660"},{"size":912,"mtime":1695037169950,"results":"1304","hashOfConfig":"660"},{"size":773,"mtime":1694695299120,"results":"1305","hashOfConfig":"660"},{"size":526,"mtime":1694695299118,"results":"1306","hashOfConfig":"660"},{"size":258,"mtime":1694695299118,"results":"1307","hashOfConfig":"660"},{"size":971,"mtime":1694695299120,"results":"1308","hashOfConfig":"660"},{"size":38022,"mtime":1694846752160,"results":"1309","hashOfConfig":"660"},{"size":4332,"mtime":1694695299087,"results":"1310","hashOfConfig":"660"},{"size":13238,"mtime":1694695299099,"results":"1311","hashOfConfig":"660"},{"size":5566,"mtime":1695280121780,"results":"1312","hashOfConfig":"660"},{"size":40808,"mtime":1695280121774,"results":"1313","hashOfConfig":"660"},{"size":2947,"mtime":1695280121795,"results":"1314","hashOfConfig":"660"},{"size":2856,"mtime":1695211998905,"results":"1315","hashOfConfig":"660"},{"size":954,"mtime":1695280121785,"results":"1316","hashOfConfig":"660"},{"size":2103,"mtime":1695280121785,"results":"1317","hashOfConfig":"660"},{"size":2522,"mtime":1695280121795,"results":"1318","hashOfConfig":"660"},{"filePath":"1319","messages":"1320","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"r4ce1v",{"filePath":"1321","messages":"1322","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1323","messages":"1324","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1325","messages":"1326","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1327","messages":"1328","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1329"},{"filePath":"1330","messages":"1331","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1332"},{"filePath":"1333","messages":"1334","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1335","messages":"1336","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1337"},{"filePath":"1338","messages":"1339","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1340","messages":"1341","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1342","messages":"1343","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1344","messages":"1345","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1346","messages":"1347","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1348","messages":"1349","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1350","messages":"1351","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1352","messages":"1353","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1354"},{"filePath":"1355","messages":"1356","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1357"},{"filePath":"1358","messages":"1359","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1360","messages":"1361","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1362"},{"filePath":"1363","messages":"1364","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1365"},{"filePath":"1366","messages":"1367","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1368","messages":"1369","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1370","messages":"1371","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1372"},{"filePath":"1373","messages":"1374","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1375","messages":"1376","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1377"},{"filePath":"1378","messages":"1379","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1380"},{"filePath":"1381","messages":"1382","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1383"},{"filePath":"1384","messages":"1385","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1386"},{"filePath":"1387","messages":"1388","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1389"},{"filePath":"1390","messages":"1391","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1392"},{"filePath":"1393","messages":"1394","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1395"},{"filePath":"1396","messages":"1397","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1398"},{"filePath":"1399","messages":"1400","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1401"},{"filePath":"1402","messages":"1403","errorCount":0,"fatalErrorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1404"},{"filePath":"1405","messages":"1406","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1407"},{"filePath":"1408","messages":"1409","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1410","messages":"1411","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1412"},{"filePath":"1413","messages":"1414","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1415"},{"filePath":"1416","messages":"1417","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1418"},{"filePath":"1419","messages":"1420","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1421"},{"filePath":"1422","messages":"1423","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1424"},{"filePath":"1425","messages":"1426","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1427"},{"filePath":"1428","messages":"1429","errorCount":0,"fatalErrorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1430"},{"filePath":"1431","messages":"1432","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1433"},{"filePath":"1434","messages":"1435","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1436"},{"filePath":"1437","messages":"1438","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1439"},{"filePath":"1440","messages":"1441","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1442"},{"filePath":"1443","messages":"1444","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1445"},{"filePath":"1446","messages":"1447","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1448"},{"filePath":"1449","messages":"1450","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1451"},{"filePath":"1452","messages":"1453","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1454"},{"filePath":"1455","messages":"1456","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1457"},{"filePath":"1458","messages":"1459","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1460"},{"filePath":"1461","messages":"1462","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1463"},{"filePath":"1464","messages":"1465","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1466"},{"filePath":"1467","messages":"1468","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1469"},{"filePath":"1470","messages":"1471","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1472"},{"filePath":"1473","messages":"1474","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1475"},{"filePath":"1476","messages":"1477","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1478"},{"filePath":"1479","messages":"1480","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1481"},{"filePath":"1482","messages":"1483","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1484"},{"filePath":"1485","messages":"1486","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1487"},{"filePath":"1488","messages":"1489","errorCount":0,"fatalErrorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1490"},{"filePath":"1491","messages":"1492","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1493"},{"filePath":"1494","messages":"1495","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1496"},{"filePath":"1497","messages":"1498","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1499"},{"filePath":"1500","messages":"1501","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1502"},{"filePath":"1503","messages":"1504","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1505"},{"filePath":"1506","messages":"1507","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1508"},{"filePath":"1509","messages":"1510","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1511"},{"filePath":"1512","messages":"1513","errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1514"},{"filePath":"1515","messages":"1516","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1517"},{"filePath":"1518","messages":"1519","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1520","messages":"1521","errorCount":0,"fatalErrorCount":0,"warningCount":28,"fixableErrorCount":0,"fixableWarningCount":2,"source":"1522"},{"filePath":"1523","messages":"1524","errorCount":0,"fatalErrorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1525"},{"filePath":"1526","messages":"1527","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1528","messages":"1529","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1530","messages":"1531","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1532","messages":"1533","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1534","messages":"1535","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1536"},{"filePath":"1537","messages":"1538","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1539","messages":"1540","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1541","messages":"1542","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1543","messages":"1544","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1545","messages":"1546","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1547","messages":"1548","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1549","messages":"1550","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1551"},{"filePath":"1552","messages":"1553","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1554","messages":"1555","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1556","messages":"1557","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1558","messages":"1559","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1560","messages":"1561","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1562"},{"filePath":"1563","messages":"1564","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1565"},{"filePath":"1566","messages":"1567","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1568","messages":"1569","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1570","messages":"1571","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1572","messages":"1573","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1574"},{"filePath":"1575","messages":"1576","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1577","messages":"1578","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1579","messages":"1580","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1581","messages":"1582","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1583","messages":"1584","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1585","messages":"1586","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1587","messages":"1588","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1589","messages":"1590","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1591","messages":"1592","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1593","messages":"1594","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1595","messages":"1596","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1597","messages":"1598","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1599","messages":"1600","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1601","messages":"1602","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1603","messages":"1604","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1605","messages":"1606","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1607","messages":"1608","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1609","messages":"1610","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1611","messages":"1612","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1613","messages":"1614","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1615","messages":"1616","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1617","messages":"1618","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1619","messages":"1620","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1621","messages":"1622","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1623","messages":"1624","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1625","messages":"1626","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1627","messages":"1628","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1629","messages":"1630","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1631","messages":"1632","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1633","messages":"1634","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1635","messages":"1636","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1637","messages":"1638","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1639","messages":"1640","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1641","messages":"1642","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1643","messages":"1644","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1645","messages":"1646","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1647","messages":"1648","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1649","messages":"1650","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1651","messages":"1652","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1653","messages":"1654","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1655","messages":"1656","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1657","messages":"1658","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1659","messages":"1660","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1661","messages":"1662","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1663","messages":"1664","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1665","messages":"1666","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1667","messages":"1668","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1669","messages":"1670","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1671","messages":"1672","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1673","messages":"1674","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1675","messages":"1676","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1677","messages":"1678","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1679"},{"filePath":"1680","messages":"1681","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1682","messages":"1683","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1684"},{"filePath":"1685","messages":"1686","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1687"},{"filePath":"1688","messages":"1689","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1690","messages":"1691","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1692"},{"filePath":"1693","messages":"1694","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1695","messages":"1696","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1697"},{"filePath":"1698","messages":"1699","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1700"},{"filePath":"1701","messages":"1702","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1703","messages":"1704","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1705","messages":"1706","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1707","messages":"1708","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1709","messages":"1710","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1711","messages":"1712","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1713"},{"filePath":"1714","messages":"1715","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1716"},{"filePath":"1717","messages":"1718","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1719"},{"filePath":"1720","messages":"1721","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1722","messages":"1723","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1724","messages":"1725","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1726","messages":"1727","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1728","messages":"1729","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1730"},{"filePath":"1731","messages":"1732","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1733","messages":"1734","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1735","messages":"1736","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1737"},{"filePath":"1738","messages":"1739","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1740","messages":"1741","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1742","messages":"1743","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1744","messages":"1745","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1746","messages":"1747","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1748"},{"filePath":"1749","messages":"1750","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1751","messages":"1752","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1753","messages":"1754","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1755","messages":"1756","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1757","messages":"1758","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1759","messages":"1760","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1761","messages":"1762","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1763"},{"filePath":"1764","messages":"1765","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1766","messages":"1767","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1768","messages":"1769","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1770","messages":"1771","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1772","messages":"1773","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1774","messages":"1775","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1776","messages":"1777","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1778","messages":"1779","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1780","messages":"1781","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1782","messages":"1783","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"14qr79n",{"filePath":"1784","messages":"1785","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"1786","messages":"1787","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1788"},{"filePath":"1789","messages":"1790","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1791"},{"filePath":"1792","messages":"1793","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1794"},{"filePath":"1795","messages":"1796","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1797","messages":"1798","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1799","messages":"1800","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1801"},{"filePath":"1802","messages":"1803","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1804","messages":"1805","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1806","messages":"1807","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1808","messages":"1809","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1810"},{"filePath":"1811","messages":"1812","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1813","messages":"1814","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1815","messages":"1816","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1817","messages":"1818","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1819","messages":"1820","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1821","messages":"1822","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1823","messages":"1824","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1825","messages":"1826","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1827","messages":"1828","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1829","messages":"1830","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1831","messages":"1832","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1833"},{"filePath":"1834","messages":"1835","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1836","messages":"1837","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1838","messages":"1839","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1840","messages":"1841","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1842"},{"filePath":"1843","messages":"1844","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1845","messages":"1846","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"1847","messages":"1848","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"1849","messages":"1850","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1851","messages":"1852","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1853"},{"filePath":"1854","messages":"1855","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1856"},{"filePath":"1857","messages":"1858","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1859"},{"filePath":"1860","messages":"1861","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1862"},{"filePath":"1863","messages":"1864","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1865","messages":"1866","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1867","messages":"1868","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1869"},{"filePath":"1870","messages":"1871","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1872","messages":"1873","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1874"},{"filePath":"1875","messages":"1876","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1877","messages":"1878","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1879","messages":"1880","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1881"},{"filePath":"1882","messages":"1883","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1884"},{"filePath":"1885","messages":"1886","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1887"},{"filePath":"1888","messages":"1889","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1890","messages":"1891","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1892"},{"filePath":"1893","messages":"1894","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1895","messages":"1896","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1897"},{"filePath":"1898","messages":"1899","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1900","messages":"1901","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1902","messages":"1903","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1904","messages":"1905","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1906","messages":"1907","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1908"},{"filePath":"1909","messages":"1910","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1911"},{"filePath":"1912","messages":"1913","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1914"},{"filePath":"1915","messages":"1916","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1917"},{"filePath":"1918","messages":"1919","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1920"},{"filePath":"1921","messages":"1922","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1923","messages":"1924","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1925","messages":"1926","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1927","messages":"1928","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1929","messages":"1930","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1931"},{"filePath":"1932","messages":"1933","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1934","messages":"1935","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1936","messages":"1937","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1938"},{"filePath":"1939","messages":"1940","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1941"},{"filePath":"1942","messages":"1943","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1944","messages":"1945","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1946","messages":"1947","errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1948"},{"filePath":"1949","messages":"1950","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1951"},{"filePath":"1952","messages":"1953","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1954","messages":"1955","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1956","messages":"1957","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"1958","messages":"1959","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1960","messages":"1961","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1962","messages":"1963","errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1964"},{"filePath":"1965","messages":"1966","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1967"},{"filePath":"1968","messages":"1969","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1970","messages":"1971","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1972"},{"filePath":"1973","messages":"1974","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1975","messages":"1976","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1977","messages":"1978","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1979","messages":"1980","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1981","messages":"1982","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1983","messages":"1984","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1985","messages":"1986","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1987","messages":"1988","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1989"},{"filePath":"1990","messages":"1991","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1992","messages":"1993","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1994","messages":"1995","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1996","messages":"1997","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1998","messages":"1999","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2000","messages":"2001","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2002","messages":"2003","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2004","messages":"2005","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2006","messages":"2007","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2008","messages":"2009","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2010","messages":"2011","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2012","messages":"2013","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2014","messages":"2015","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2016","messages":"2017","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2018"},{"filePath":"2019","messages":"2020","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2021"},{"filePath":"2022","messages":"2023","errorCount":0,"fatalErrorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2024"},{"filePath":"2025","messages":"2026","errorCount":0,"fatalErrorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2027"},{"filePath":"2028","messages":"2029","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2030"},{"filePath":"2031","messages":"2032","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2033"},{"filePath":"2034","messages":"2035","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2036"},{"filePath":"2037","messages":"2038","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2039"},{"filePath":"2040","messages":"2041","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2042"},{"filePath":"2043","messages":"2044","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2045"},{"filePath":"2046","messages":"2047","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2048"},{"filePath":"2049","messages":"2050","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2051"},{"filePath":"2052","messages":"2053","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2054"},{"filePath":"2055","messages":"2056","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2057","messages":"2058","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2059","messages":"2060","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2061","messages":"2062","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2063","messages":"2064","errorCount":0,"fatalErrorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2065"},{"filePath":"2066","messages":"2067","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2068"},{"filePath":"2069","messages":"2070","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2071","messages":"2072","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2073","messages":"2074","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2075","messages":"2076","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2077","messages":"2078","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2079","messages":"2080","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2081","messages":"2082","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2083","messages":"2084","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2085","messages":"2086","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2087"},{"filePath":"2088","messages":"2089","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2090","messages":"2091","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2092","messages":"2093","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2094","messages":"2095","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2096","messages":"2097","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2098","messages":"2099","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2100","messages":"2101","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2102","messages":"2103","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2104"},{"filePath":"2105","messages":"2106","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2107"},{"filePath":"2108","messages":"2109","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2110","messages":"2111","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2112"},{"filePath":"2113","messages":"2114","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2115"},{"filePath":"2116","messages":"2117","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2118","messages":"2119","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2120","messages":"2121","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2122"},{"filePath":"2123","messages":"2124","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2125"},{"filePath":"2126","messages":"2127","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2128","messages":"2129","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2130"},{"filePath":"2131","messages":"2132","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2133","messages":"2134","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2135"},{"filePath":"2136","messages":"2137","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2138"},{"filePath":"2139","messages":"2140","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2141"},{"filePath":"2142","messages":"2143","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2144","messages":"2145","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2146","messages":"2147","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2148","messages":"2149","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2150","messages":"2151","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2152"},{"filePath":"2153","messages":"2154","errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2155","usedDeprecatedRules":"2156"},{"filePath":"2157","messages":"2158","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2159","messages":"2160","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2161","messages":"2162","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2163"},{"filePath":"2164","messages":"2165","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2166"},{"filePath":"2167","messages":"2168","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2169","messages":"2170","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2171"},{"filePath":"2172","messages":"2173","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2174"},{"filePath":"2175","messages":"2176","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"2177","messages":"2178","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2179","messages":"2180","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2181","messages":"2182","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2183"},{"filePath":"2184","messages":"2185","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2186","messages":"2187","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2188","messages":"2189","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2190","messages":"2191","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2192","messages":"2193","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2194","messages":"2195","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2196","messages":"2197","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2198","messages":"2199","errorCount":0,"fatalErrorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2200"},{"filePath":"2201","messages":"2202","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2203"},{"filePath":"2204","messages":"2205","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2206"},{"filePath":"2207","messages":"2208","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2209"},{"filePath":"2210","messages":"2211","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2212"},{"filePath":"2213","messages":"2214","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2215"},{"filePath":"2216","messages":"2217","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2218"},{"filePath":"2219","messages":"2220","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2221"},{"filePath":"2222","messages":"2223","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2224","messages":"2225","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2226"},{"filePath":"2227","messages":"2228","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2229"},{"filePath":"2230","messages":"2231","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2232","messages":"2233","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2234","messages":"2235","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2236"},{"filePath":"2237","messages":"2238","errorCount":0,"fatalErrorCount":0,"warningCount":23,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2239"},{"filePath":"2240","messages":"2241","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2242","messages":"2243","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2244","messages":"2245","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2246","messages":"2247","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2248"},{"filePath":"2249","messages":"2250","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2251","messages":"2252","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2253"},{"filePath":"2254","messages":"2255","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2256","messages":"2257","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2258"},{"filePath":"2259","messages":"2260","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2261","messages":"2262","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2263","messages":"2264","errorCount":0,"fatalErrorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2265"},{"filePath":"2266","messages":"2267","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2268","messages":"2269","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2270","messages":"2271","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2272"},{"filePath":"2273","messages":"2274","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2275","messages":"2276","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2277"},{"filePath":"2278","messages":"2279","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2280"},{"filePath":"2281","messages":"2282","errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2283"},{"filePath":"2284","messages":"2285","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2286"},{"filePath":"2287","messages":"2288","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2289"},{"filePath":"2290","messages":"2291","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2292","messages":"2293","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2294"},{"filePath":"2295","messages":"2296","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2297","messages":"2298","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2299","messages":"2300","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2301"},{"filePath":"2302","messages":"2303","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2304"},{"filePath":"2305","messages":"2306","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2307","messages":"2308","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2309","messages":"2310","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2311","messages":"2312","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2313","messages":"2314","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2315"},{"filePath":"2316","messages":"2317","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2318","messages":"2319","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2320","messages":"2321","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2322"},{"filePath":"2323","messages":"2324","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2325","messages":"2326","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2327"},{"filePath":"2328","messages":"2329","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2330","messages":"2331","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2332","messages":"2333","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2334","messages":"2335","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2336","messages":"2337","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2338"},{"filePath":"2339","messages":"2340","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2341","messages":"2342","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2343","messages":"2344","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2345","messages":"2346","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2347","messages":"2348","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2349"},{"filePath":"2350","messages":"2351","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2352"},{"filePath":"2353","messages":"2354","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2355","messages":"2356","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2357","messages":"2358","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2359","messages":"2360","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2361","messages":"2362","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2363"},{"filePath":"2364","messages":"2365","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2366"},{"filePath":"2367","messages":"2368","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2369","messages":"2370","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2371"},{"filePath":"2372","messages":"2373","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2374"},{"filePath":"2375","messages":"2376","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2377","messages":"2378","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2379"},{"filePath":"2380","messages":"2381","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2382"},{"filePath":"2383","messages":"2384","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2385"},{"filePath":"2386","messages":"2387","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2388"},{"filePath":"2389","messages":"2390","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2391"},{"filePath":"2392","messages":"2393","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2394"},{"filePath":"2395","messages":"2396","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2397"},{"filePath":"2398","messages":"2399","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2400"},{"filePath":"2401","messages":"2402","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2403","messages":"2404","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2405","messages":"2406","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2407","messages":"2408","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2409","messages":"2410","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2411"},{"filePath":"2412","messages":"2413","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2414"},{"filePath":"2415","messages":"2416","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2417"},{"filePath":"2418","messages":"2419","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2420","messages":"2421","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2422","messages":"2423","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2424"},{"filePath":"2425","messages":"2426","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2427","messages":"2428","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2429","messages":"2430","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2431","messages":"2432","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2433","messages":"2434","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2435"},{"filePath":"2436","messages":"2437","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2438"},{"filePath":"2439","messages":"2440","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2441","messages":"2442","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2443","messages":"2444","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2445","messages":"2446","errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2447"},{"filePath":"2448","messages":"2449","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2450"},{"filePath":"2451","messages":"2452","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2453","messages":"2454","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2455","messages":"2456","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2457","messages":"2458","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2459","messages":"2460","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2461","messages":"2462","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2463","messages":"2464","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2465","messages":"2466","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2467","messages":"2468","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2469"},{"filePath":"2470","messages":"2471","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2472","messages":"2473","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2474","messages":"2475","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2476","messages":"2477","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2478","messages":"2479","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2480","messages":"2481","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2482"},{"filePath":"2483","messages":"2484","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2485","messages":"2486","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2487","messages":"2488","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2489"},{"filePath":"2490","messages":"2491","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2492","messages":"2493","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2494","messages":"2495","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2496"},{"filePath":"2497","messages":"2498","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2499"},{"filePath":"2500","messages":"2501","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2502"},{"filePath":"2503","messages":"2504","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2505","messages":"2506","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2507","messages":"2508","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2509"},{"filePath":"2510","messages":"2511","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2512","messages":"2513","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2514"},{"filePath":"2515","messages":"2516","errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2517"},{"filePath":"2518","messages":"2519","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2520","messages":"2521","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2522","messages":"2523","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2524","usedDeprecatedRules":"2525"},{"filePath":"2526","messages":"2527","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2525"},{"filePath":"2528","messages":"2529","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2530"},{"filePath":"2531","messages":"2532","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2533","usedDeprecatedRules":"2525"},{"filePath":"2534","messages":"2535","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2536","usedDeprecatedRules":"2525"},{"filePath":"2537","messages":"2538","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2539"},{"filePath":"2540","messages":"2541","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2542","messages":"2543","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2544","messages":"2545","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2546"},{"filePath":"2547","messages":"2548","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2549","messages":"2550","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2551","messages":"2552","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2553"},{"filePath":"2554","messages":"2555","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2556"},{"filePath":"2557","messages":"2558","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2559","messages":"2560","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2561","messages":"2562","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2563"},{"filePath":"2564","messages":"2565","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2566","messages":"2567","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2568"},{"filePath":"2569","messages":"2570","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2571","messages":"2572","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2573","messages":"2574","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2575","messages":"2576","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2577","messages":"2578","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2579"},{"filePath":"2580","messages":"2581","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2582","messages":"2583","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2584","messages":"2585","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2586"},{"filePath":"2587","messages":"2588","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2589"},{"filePath":"2590","messages":"2591","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2592"},{"filePath":"2593","messages":"2594","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2595","messages":"2596","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2597","messages":"2598","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2599","messages":"2600","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2601","messages":"2602","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2603","messages":"2604","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2605","messages":"2606","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2607"},{"filePath":"2608","messages":"2609","errorCount":0,"fatalErrorCount":0,"warningCount":24,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2610"},{"filePath":"2611","messages":"2612","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2613"},{"filePath":"2614","messages":"2615","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2616"},{"filePath":"2617","messages":"2618","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2619"},{"filePath":"2620","messages":"2621","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2622","messages":"2623","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2624"},{"filePath":"2625","messages":"2626","errorCount":0,"fatalErrorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2627"},{"filePath":"2628","messages":"2629","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2630"},{"filePath":"2631","messages":"2632","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2633","messages":"2634","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2635","messages":"2636","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2637","messages":"2638","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2639"},{"filePath":"2640","messages":"2641","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2642"},{"filePath":"2643","messages":"2644","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2645","messages":"2646","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2647","messages":"2648","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2649","messages":"2650","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2651","messages":"2652","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2653","messages":"2654","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2655"},{"filePath":"2656","messages":"2657","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2658","messages":"2659","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2660","messages":"2661","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2662","messages":"2663","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2664"},{"filePath":"2665","messages":"2666","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2667","messages":"2668","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2669","messages":"2670","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2671"},{"filePath":"2672","messages":"2673","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2674"},{"filePath":"2675","messages":"2676","errorCount":0,"fatalErrorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2677"},{"filePath":"2678","messages":"2679","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2680","messages":"2681","errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2682"},{"filePath":"2683","messages":"2684","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2685"},{"filePath":"2686","messages":"2687","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2688"},{"filePath":"2689","messages":"2690","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2691"},{"filePath":"2692","messages":"2693","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2694","messages":"2695","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2696","messages":"2697","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2698"},{"filePath":"2699","messages":"2700","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2701","messages":"2702","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2703","messages":"2704","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2705"},{"filePath":"2706","messages":"2707","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2708"},{"filePath":"2709","messages":"2710","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2711"},{"filePath":"2712","messages":"2713","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2714"},{"filePath":"2715","messages":"2716","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2717"},{"filePath":"2718","messages":"2719","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2720"},{"filePath":"2721","messages":"2722","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2723","messages":"2724","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2725"},{"filePath":"2726","messages":"2727","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2728","messages":"2729","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2730","messages":"2731","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2732"},{"filePath":"2733","messages":"2734","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2735"},{"filePath":"2736","messages":"2737","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2738","messages":"2739","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2740"},{"filePath":"2741","messages":"2742","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2743"},{"filePath":"2744","messages":"2745","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2746","messages":"2747","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2748","messages":"2749","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2750"},{"filePath":"2751","messages":"2752","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2753"},{"filePath":"2754","messages":"2755","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2756"},{"filePath":"2757","messages":"2758","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2759","messages":"2760","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2761"},{"filePath":"2762","messages":"2763","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2764","messages":"2765","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2766","messages":"2767","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2768","messages":"2769","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2770","messages":"2771","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2772","messages":"2773","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2774","messages":"2775","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2776","messages":"2777","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2778","messages":"2779","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2780","messages":"2781","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2782","messages":"2783","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2784"},{"filePath":"2785","messages":"2786","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2787"},{"filePath":"2788","messages":"2789","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2790","messages":"2791","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2792"},{"filePath":"2793","messages":"2794","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2795"},{"filePath":"2796","messages":"2797","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2798","messages":"2799","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2800","messages":"2801","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2802","messages":"2803","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2804"},{"filePath":"2805","messages":"2806","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2807"},{"filePath":"2808","messages":"2809","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2810","messages":"2811","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2812","messages":"2813","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2814","messages":"2815","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2816","messages":"2817","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2818","messages":"2819","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2820"},{"filePath":"2821","messages":"2822","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2823"},{"filePath":"2824","messages":"2825","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2826"},{"filePath":"2827","messages":"2828","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2829"},{"filePath":"2830","messages":"2831","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2832","messages":"2833","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2834","messages":"2835","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2836","messages":"2837","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2838","messages":"2839","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2840","messages":"2841","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2842","messages":"2843","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2844","messages":"2845","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2846"},{"filePath":"2847","messages":"2848","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2849"},{"filePath":"2850","messages":"2851","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2852","messages":"2853","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2854","messages":"2855","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2856"},{"filePath":"2857","messages":"2858","errorCount":0,"fatalErrorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2859"},{"filePath":"2860","messages":"2861","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2862"},{"filePath":"2863","messages":"2864","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2865"},{"filePath":"2866","messages":"2867","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2868"},{"filePath":"2869","messages":"2870","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2871"},{"filePath":"2872","messages":"2873","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2874"},{"filePath":"2875","messages":"2876","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2877","messages":"2878","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2879","messages":"2880","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2881","messages":"2882","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2883","messages":"2884","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2885","messages":"2886","errorCount":0,"fatalErrorCount":0,"warningCount":24,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2887"},{"filePath":"2888","messages":"2889","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2890","messages":"2891","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2892","messages":"2893","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"2894","messages":"2895","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"2896","messages":"2897","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2898","messages":"2899","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2900"},{"filePath":"2901","messages":"2902","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2903","messages":"2904","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2905","messages":"2906","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\Rohit\\Git projects\\Manthan\\src\\index.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\i18n.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\App.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\index.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\routes\\allRoutes.js",["2907"],"import React from \"react\"\r\nimport * as path from \"./route_url\";\r\nimport { Redirect } from \"react-router-dom\"\r\n\r\n//Dashboard\r\nimport Dashboard from \"../pages/Dashboard/index\";\r\n\r\n// Authentication related pages\r\nimport Login from \"../pages/Authentication/Login\"\r\nimport Logout from \"../pages/Authentication/Logout\"\r\nimport ForgetPwd from \"../pages/Authentication/ForgetPassword\"\r\n\r\n//Import  Administrator \r\nimport Modules from \"../pages/Adminisrator/ModulesPages/Modules\";\r\nimport ModulesList from \"../pages/Adminisrator/ModulesPages/ModulesList\";\r\nimport CompanyModule from \"../pages/Adminisrator/CompanyPages/CompanyModule\";\r\nimport CompanyList from \"../pages/Adminisrator/CompanyPages/CompanyList\";\r\n\r\nimport PageList from \"../pages/Adminisrator/Page-Pages/PageList\";\r\nimport PageMaster from \"../pages/Adminisrator/Page-Pages/PageMaster\";\r\n\r\nimport AddUser from \"../pages/Adminisrator/UserRegistrationPages/UserRegistration\";\r\nimport UserList from \"../pages/Adminisrator/UserRegistrationPages/UserList\";\r\nimport AddEmployee from \"../pages/Adminisrator/EmployeePages/EmployeeMaster\";\r\nimport Employee_List from \"../pages/Adminisrator/EmployeePages/EmployeeList\";\r\nimport RoleMaster from \"../pages/Adminisrator/RoleMasterPages/RoleMaster\";\r\nimport RoleList from \"../pages/Adminisrator/RoleMasterPages/RoleList\"\r\nimport Error404 from \"../pages/Utility/Error404\";\r\nimport Error500 from \"../pages/Utility/Error500\";\r\nimport ItemsList from \"../pages/Adminisrator/ItemPages/ItemList\";\r\nimport ItemsMaster from \"../pages/Adminisrator/ItemPages/ItemMaster/itemIndex\"\r\n\r\nimport SearchBoxSecond from \"../pages/Adminisrator/SearchBox/SearchBoxSecond\";\r\nimport SerachBox3 from \"../pages/Adminisrator/SearchBox/SerachBox3\";\r\nimport PartyList from \"../pages/Adminisrator/PartyMaster/PartyList\";\r\nimport PartyMaster from \"../pages/Adminisrator/PartyMaster/MasterAdd/PartyIndex\";\r\n\r\nimport ResetPassword from \"../pages/Authentication/ResetPassword\";\r\nimport SendOTP from \"../pages/Authentication/SendOTP\";\r\nimport EnterOTP from \"../pages/Authentication/EnterOTP\";\r\nimport RoleAccessListPage from \"../pages/Adminisrator/RoleAccessPages/RoleAccessListPage\";\r\nimport EmployeeTypesMaster from \"../pages/Adminisrator/EmployeeTypes/EmployeeTypesMaster\";\r\nimport RoleAccessAdd from \"../pages/Adminisrator/RoleAccessPages/RoleAccessAdd\";\r\nimport EmployeeTypeList from \"../pages/Adminisrator/EmployeeTypes/EmployeeTypeList\";\r\nimport PartyType from \"../pages/Adminisrator/PartyTypes/PartyType\";\r\nimport PartyTypeList from \"../pages/Adminisrator/PartyTypes/PartyTypeList\";\r\nimport SelectDivisionPage from \"../pages/Authentication/SelectDivisionPage\";\r\nimport RoleAccessCopyFunctionality from \"../pages/Adminisrator/RoleAccessPages/RoleAccessCopyFunctionality\";\r\nimport CategoryTypeMaster from \"../pages/Adminisrator/CategoryTypePages/CategoryTypeMaster\";\r\nimport CategoryTypeList from \"../pages/Adminisrator/CategoryTypePages/CategoryTypeList\";\r\nimport CategoryList from \"../pages/Adminisrator/CategoryPages/CategoryList\";\r\nimport CategoryMaster from \"../pages/Adminisrator/CategoryPages/CategoryMaster\";\r\nimport VehicleMaster from \"../pages/Adminisrator/VehiclePages/VehicleMaster\";\r\nimport VehicleList from \"../pages/Adminisrator/VehiclePages/VehicleList\";\r\nimport DriverMaster from \"../pages/Adminisrator/DriverPage/DriverMaster\";\r\nimport DriverList from \"../pages/Adminisrator/DriverPage/DriverList\";\r\nimport CompanyGroupMaster from \"../pages/Adminisrator/CompanyGroupPages/CompanyGroupMaster\";\r\nimport CompanyGroupList from \"../pages/Adminisrator/CompanyGroupPages/CompanyGroupList\";\r\n\r\nimport PriceMaster from \"../pages/Adminisrator/PriceList/PriceMaster\";\r\nimport PriceList from \"../pages/Adminisrator/PriceList/PriceList\";\r\n\r\nimport MRPMaster from \"../pages/Adminisrator/MRPMaster/MRPMaster\";\r\nimport MarginMaster from \"../pages/Adminisrator/MarginMaster/MarginMaster\";\r\n\r\nimport MRPList from \"../pages/Adminisrator/MRPMaster/MRPList\";\r\nimport MarginList from \"../pages/Adminisrator/MarginMaster/MarginList\";\r\n\r\nimport GroupMaster from \"../pages/Adminisrator/GroupPage/GroupMaster\"\r\nimport GroupList from \"../pages/Adminisrator/GroupPage/GroupList\";\r\nimport GroupTypeList from \"../pages/Adminisrator/GroupTypePage/GroupTypeList\";\r\n\r\nimport GroupTypeMaster from \"../pages/Adminisrator/GroupTypePage/GroupTypeMaster\";\r\nimport PartySubParty from \"../pages/Adminisrator/PartySubPartyPages/PartySubParty\";\r\nimport PartySubPartyList from \"../pages/Adminisrator/PartySubPartyPages/partysubPartyList\";\r\n\r\nimport GSTMaster from \"../pages/Adminisrator/GSTPages/GSTMaster\";\r\nimport GSTList from \"../pages/Adminisrator/GSTPages/GSTList\";\r\n\r\nimport TermsAndConditionsMaster from \"../pages/Adminisrator/TermsAndConditions/TermsAndConditionsMaster\";\r\nimport TermsAndConditionsList from \"../pages/Adminisrator/TermsAndConditions/TermsAndConditionsList\";\r\n\r\nimport Order from \"../pages/Purchase/Order/Order\"\r\nimport OrderList from \"../pages/Purchase/Order/OrderList\"\r\n\r\nimport PartyItems from \"../pages/Adminisrator/PartyItemPage/PartyItems\";\r\n\r\nimport GeneralMaster from \"../pages/Adminisrator/GeneralPage/GeneralMaster\";\r\nimport GeneralList from \"../pages/Adminisrator/GeneralPage/GeneralList\";\r\n\r\nimport GRNList from \"../pages/Inventory/GRN/GRNList\";\r\nimport GRNAdd from \"../pages/Inventory/GRN/GRNAdd\";\r\nimport GRNAdd3 from \"../pages/Inventory/GRN/GRNAdd_3\";\r\n\r\nimport SubGroupMaster from \"../pages/Adminisrator/SubGroupPages/SubGroupMaster\";\r\nimport SubGroupList from \"../pages/Adminisrator/SubGroupPages/SubGroupList\";\r\n\r\nimport BOMMaster from \"../pages/Production/BOM/BOMMaster/BOMIndex\";\r\nimport BOMList from \"../pages/Production/BOM/BOMList/BOMList\";\r\n\r\nimport WorkOrder from \"../pages/Production/WorkOrder/WorkOrder\";\r\nimport WorkOrderList from \"../pages/Production/WorkOrder/WorkOrderList\";\r\n\r\nimport MaterialIssueMaster from \"../pages/Production/Material_Issue/Material_IssueMaster\";\r\nimport MaterialIssueList from \"../pages/Production/Material_Issue/Material_Issue_List\";\r\n\r\nimport ProductionMaster from \"../pages/Production/Production/ProductionMaster\";\r\nimport ProductionList from \"../pages/Production/Production/ProductionList\";\r\n\r\nimport ProductionReIssueAdd from \"../pages/Production/ProductionRe-Issue/PrductionReIssueAdd\";\r\nimport ProductionReIssueList from \"../pages/Production/ProductionRe-Issue/ProductionReIssueList\";\r\n\r\nimport Invoice from \"../pages/Sale/Invoice/Invoice\";\r\nimport InvoiceList from \"../pages/Sale/Invoice/InvoiceList\";\r\n\r\nimport Inward from \"../pages/Inter Branch/Inward/Inward\";\r\nimport InwardList from \"../pages/Inter Branch/Inward/InwardList\";\r\nimport ChallanList from \"../pages/Inventory/Challan/ChallanList\";\r\nimport Challan from \"../pages/Inventory/Challan/Challan\";\r\n\r\nimport RoutesMaster from \"../pages/Adminisrator/RoutesPages/RoutesMaster\";\r\nimport RoutesList from \"../pages/Adminisrator/RoutesPages/RoutesList\";\r\n\r\nimport SalesManMaster from \"../pages/Adminisrator/SalesManPages/SalesManMaster\";\r\nimport SalesManList from \"../pages/Adminisrator/SalesManPages/SalesManList\";\r\nimport LoadingSheet from \"../pages/Sale/LoadingSheet/LoadingSheet\";\r\nimport LoadingSheetList from \"../pages/Sale/LoadingSheet/LoadingSheetList\";\r\n\r\nimport Report from \"../Reports/AllReportPage\";\r\nimport RouteUpdate from \"../pages/Adminisrator/RouteUpdate/RouteUpdate\";\r\nimport PartyMasterBulkUpdate from \"../pages/Adminisrator/PartyMasterBulkPages/PartyMasterBulkUpdate\";\r\nimport ManagementEmpParties from \"../pages/Adminisrator/ManagementParties/ManagementEmpParties\";\r\nimport Receipts from \"../pages/Accounting/Receipt/Receipts\";\r\nimport ReceiptList from \"../pages/Accounting/Receipt/ReceiptList\";\r\nimport BankMaster from \"../pages/Accounting/Bank/BankMaster\";\r\nimport BankList from \"../pages/Accounting/Bank/BankList\";\r\nimport PaymentEntry from \"../pages/Accounting/Payment/PaymentEntry\";\r\nimport PaymentEntryList from \"../pages/Accounting/Payment/PaymentEntryList\";\r\nimport BulkRecipt from \"../pages/Accounting/Receipt/BulkReceipt\";\r\nimport BankAssign from \"../pages/Accounting/BankAssign/BankAssign\";\r\nimport LoadingSheetUpdate from \"../pages/Sale/LoadingSheet/LoadingSheetUpdate\";\r\nimport SalesReturn from \"../pages/Sale/SalesReturn/SalesReturn\";\r\nimport GoodsCreditNote from \"../pages/Accounting/CreditDebitNote/GoodsCreditNote\";\r\nimport DebitNoteMaster from \"../pages/Accounting/Debit/Debit\";\r\nimport CreditList from \"../pages/Accounting/CreditDebitNote/CreditList\";\r\n\r\nimport ImportFieldAdd from \"../pages/Adminisrator/ImportMaster/FieldAdd/ImportFieldAdd\";\r\nimport ImportFieldAddList from \"../pages/Adminisrator/ImportMaster/FieldAdd/ImportFieldAddList\";\r\nimport ImportExcelFieldMap from \"../pages/Adminisrator/ImportMaster/ImportExcelFieldMap/Index\";\r\nimport InvoiceExcelUpload from \"../pages/Adminisrator/ImportMaster/InvoiceExcelUpload/Index\";\r\nimport RetailerExcelUpload from \"../pages/Adminisrator/ImportMaster/RetailerExcelUpload/Index\";\r\n\r\nimport SalesReturnList from \"../pages/Sale/SalesReturn/SalesReturnList\";\r\nimport ImportExcelPartyMap from \"../pages/Adminisrator/ImportMaster/ImportExcelPartyMap/Index\";\r\nimport Debit from \"../pages/Accounting/Debit/Debit\";\r\nimport Dashboard_1 from \"../pages/Dashboard/Dashboard_1/Dashboard_1\"\r\nimport SapLedger from \"../Reports/SapLedgerReport/SapLedger\";\r\nimport ProductMarginReport from \"../Reports/ProductMarginReport/ProductMarginReport\";\r\nimport CityMaster from \"../pages/Adminisrator/CityPages/CityMaster\";\r\nimport CityList from \"../pages/Adminisrator/CityPages/CityList\";\r\nimport OrderSummary from \"../Reports/OrderSummaryReport/OrderSummary\";\r\nimport InvoiceConfiguration from \"../pages/Adminisrator/InvoiceConfiguration/InvoiceConfiguration\";\r\nimport StockEntry from \"../pages/Inventory/StockEntry/StockEntry\";\r\nimport PartyLedger from \"../Reports/PratyLedger/Partyledger\";\r\nimport StockReport from \"../Reports/StockReport/StockReport\";\r\nimport PurchaseReturnMode3 from \"../pages/Purchase/Return/PurchaseReturnMode3\";\r\nimport DiscountMaster from \"../pages/Adminisrator/Discount/DiscountMaster\";\r\nimport GenericSaleReport from \"../Reports/GenericSaleReport/GenericSaleReport\";\r\nimport RetailerDataReport from \"../Reports/RetailerDataReport/RetailerDataReport\";\r\nimport DiscountList from \"../pages/Adminisrator/Discount/DiscountList\";\r\nimport PurchaseReturn from \"../pages/Purchase/Return/PurchaseReturn\";\r\nimport StockReport_1 from \"../Reports/StockReport/StockReport_1\";\r\nimport ClaimSummary from \"../Reports/ClaimReportSummary/ClaimReport\";\r\nimport InvoiceDataExport from \"../Reports/InvoiceDataExport/InvoiceDataExport.js\";\r\nimport PurchaseGSTReport from \"../Reports/PurchaseGSTReport/PurchaseGSTReport.js\";\r\nimport DamageStockReport from \"../Reports/DamageStockReport\";\r\nimport DeleteInvoiceDataExport from \"../Reports/DeleteInvoiceDataExport\";\r\nimport GSTR1Report from \"../Reports/GSTR1Report/GSTR1Report\";\r\nimport ReturnReport from \"../Reports/ReturnReport/ReturnReport\";\r\n\r\nimport ItemSaleReport from \"../Reports/ItemSaleReport\";\r\n\r\nimport ItemRegisterReport from \"../Reports/ItemRegisterReport/ItemRegisterReport\";\r\nimport ClaimSummaryList from \"../Reports/ClaimReportSummary/ClaimSummaryList\";\r\nimport ClaimSummaryMaster from \"../Reports/ClaimReportSummary/ClaimSummaryMaster\";\r\n\r\nimport TransactionLog from \"../pages/ActivityLog/TransactionLog\";\r\n\r\nimport StockAdjustment from \"../pages/Inventory/StockAdjustment\";\r\nimport ClaimTrackingEntry from \"../pages/Accounting/Claim Tracking Entry/ClaimTrackingEntry\";\r\nimport ClaimTrackingEntryList from \"../pages/Accounting/Claim Tracking Entry/ClaimTrackingEntryList\";\r\n\r\n\r\n\r\nconst userRoutes = [\r\n  // *************************** DashBord *******************************//\r\n\r\n\r\n  { path: path.DASHBORD_1, component: Dashboard_1 },\r\n  { path: path.DASHBORD_2, component: Dashboard_1 },\r\n\r\n  // *************************** Administration *******************************//\r\n  { path: path.MODULE, component: Modules },\r\n  { path: path.MODULE_lIST, component: ModulesList },\r\n\r\n  { path: path.COMPANY, component: CompanyModule },\r\n  { path: path.COMPANY_lIST, component: CompanyList },\r\n\r\n  { path: path.PAGE_lIST, component: PageList },\r\n  { path: path.PAGE, component: PageMaster },\r\n\r\n  { path: path.USER, component: AddUser },\r\n  { path: path.USER_lIST, component: UserList },\r\n\r\n  { path: path.ROLEACCESS, component: RoleAccessAdd },\r\n  { path: path.ROLEACCESS_lIST, component: RoleAccessListPage },\r\n  { path: path.COPY_ROLEACCESS, component: RoleAccessCopyFunctionality },\r\n\r\n  { path: path.ROLE, component: RoleMaster },\r\n  { path: path.ROLE_lIST, component: RoleList },\r\n\r\n  { path: path.COMPANYGROUP, component: CompanyGroupMaster },\r\n  { path: path.COMPANYGROUP_lIST, component: CompanyGroupList },\r\n\r\n  // ******************************* Master Module ******************************//\r\n\r\n  { path: path.EMPLOYEE, component: AddEmployee },\r\n  { path: path.EMPLOYEE_lIST, component: Employee_List },\r\n\r\n  { path: path.ITEM, component: ItemsMaster },\r\n  { path: path.ITEM_lIST, component: ItemsList },\r\n\r\n  { path: path.PARTY_lIST, component: PartyList },\r\n  { path: path.PARTY, component: PartyMaster },\r\n\r\n  { path: path.RETAILER_LIST, component: PartyList },\r\n  { path: path.RETAILER_MASTER, component: PartyMaster },\r\n\r\n  { path: path.NON_RETAILER_PARTY_lIST, component: PartyList },\r\n  { path: path.NON_RETAILER_PARTY, component: PartyMaster },\r\n\r\n  { path: path.PARTY_SELF_EDIT, component: PartyMaster },\r\n\r\n  { path: path.EMPLOYEETYPE, component: EmployeeTypesMaster },\r\n  { path: path.EMPLOYEETYPE_lIST, component: EmployeeTypeList },\r\n\r\n  { path: path.PARTYTYPE, component: PartyType },\r\n  { path: path.PARTYTYPE_lIST, component: PartyTypeList },\r\n\r\n  { path: path.CATEGORYTYPE, component: CategoryTypeMaster },\r\n  { path: path.CATEGORYTYPE_lIST, component: CategoryTypeList },\r\n\r\n  { path: path.CATEGORY, component: CategoryMaster },\r\n  { path: path.CATEGORY_lIST, component: CategoryList },\r\n\r\n  { path: path.VEHICLE, component: VehicleMaster },\r\n  { path: path.VEHICLE_lIST, component: VehicleList },\r\n\r\n  { path: path.DRIVER, component: DriverMaster },\r\n  { path: path.DRIVER_lIST, component: DriverList },\r\n\r\n  { path: path.GROUPTYPE, component: GroupTypeMaster },\r\n  { path: path.GROUPTYPE_lIST, component: GroupTypeList },\r\n\r\n  { path: path.PARTY_SUB_PARTY, component: PartySubParty },\r\n  { path: path.PARTY_SUB_PARTY_lIST, component: PartySubPartyList },\r\n\r\n  { path: path.TERMS_AND_CONDITION, component: TermsAndConditionsMaster },\r\n  { path: path.TERMS_AND_CONDITION_LIST, component: TermsAndConditionsList },\r\n\r\n  { path: path.PRICE_lIST, component: PriceList },\r\n  { path: path.PRICE, component: PriceMaster },\r\n\r\n  { path: path.MRP, component: MRPMaster },\r\n  { path: path.MRP_lIST, component: MRPList },\r\n\r\n  { path: path.MARGIN, component: MarginMaster },\r\n  { path: path.MARGIN_lIST, component: MarginList },\r\n\r\n  { path: path.GROUP, component: GroupMaster },\r\n  { path: path.GROUP_lIST, component: GroupList },\r\n\r\n  { path: path.GST, component: GSTMaster },\r\n  { path: path.GST_LIST, component: GSTList },\r\n\r\n  { path: path.PARTY_SUB_PARTY, component: PartySubParty },\r\n  { path: path.PARTY_SUB_PARTY_lIST, component: PartySubPartyList },\r\n\r\n  { path: path.PARTYITEM, component: PartyItems },\r\n  { path: path.CHANNEL_ITEM, component: PartyItems },\r\n\r\n\r\n  { path: path.SUBGROUP, component: SubGroupMaster },\r\n  { path: path.SUBGROUP_LIST, component: SubGroupList },\r\n\r\n  { path: path.GENERAL, component: GeneralMaster },\r\n  { path: path.GENERAL_LIST, component: GeneralList },\r\n\r\n  { path: path.ROUTES, component: RoutesMaster },\r\n  { path: path.ROUTES_LIST, component: RoutesList },\r\n\r\n  { path: path.SALESMAN, component: SalesManMaster },\r\n  { path: path.SALESMAN_LIST, component: SalesManList },\r\n\r\n  { path: path.CITY, component: CityMaster },\r\n  { path: path.CITY_LIST, component: CityList },\r\n\r\n  { path: path.INVOICE_EXCEL_UPLOAD, component: InvoiceExcelUpload },\r\n  { path: path.RETAILER_EXCEL_UPLOAD, component: RetailerExcelUpload },\r\n\r\n  { path: path.IMPORT_EXCEL_FIELD_MAP, component: ImportExcelFieldMap },\r\n  { path: path.IMPORT_FIELD_ADD, component: ImportFieldAdd },\r\n  { path: path.IMPORT_FIELD_ADD_LIST, component: ImportFieldAddList },\r\n\r\n  { path: path.IMPORT_EXCEL_PARTY_MAP, component: ImportExcelPartyMap },\r\n\r\n  { path: path.ROUTE_UPDATE, component: RouteUpdate },\r\n\r\n  { path: path.PARTY_MASTER_BULK_UPDATE, component: PartyMasterBulkUpdate },\r\n\r\n  { path: path.MANAGEMENT_PARTIES, component: ManagementEmpParties },\r\n\r\n  { path: path.BANK, component: BankMaster },\r\n  { path: path.BANK_LIST, component: BankList },\r\n\r\n  { path: path.INVOICE_CONFIGURATION, component: InvoiceConfiguration },\r\n\r\n  { path: path.DISCOUNT_MASTER, component: DiscountMaster },\r\n  { path: path.DISCOUNT_LIST, component: DiscountList },\r\n\r\n  //******************************* Inventory Module ************************************//\r\n  { path: path.CHALLAN_LIST, component: ChallanList },\r\n  { path: path.CHALLAN, component: Challan },\r\n\r\n  { path: path.GRN_LIST_1, component: GRNList },\r\n  { path: path.GRN_ADD_1, component: GRNAdd },\r\n  { path: path.GRN_STP_1, component: OrderList },\r\n\r\n  { path: path.GRN_LIST_3, component: GRNList },\r\n  { path: path.GRN_ADD_3, component: GRNAdd3 },\r\n  { path: path.GRN_STP_3, component: OrderList },\r\n\r\n  { path: path.STOCK_ENTRY, component: StockEntry },\r\n\r\n  { path: path.STOCK_ADJUSTMENT, component: StockAdjustment },\r\n\r\n  { path: path.STOCK_ADJUSTMENT_MODE_2, component: StockAdjustment },\r\n\r\n  //******************************* Purchase Module ************************************//\r\n\r\n  { path: path.ORDER_1, component: Order },\r\n  { path: path.ORDER_LIST_1, component: OrderList },\r\n\r\n  { path: path.ORDER_2, component: Order },\r\n  { path: path.ORDER_LIST_2, component: OrderList },\r\n\r\n  { path: path.ORDER_4, component: Order },\r\n  { path: path.ORDER_LIST_4, component: OrderList },\r\n\r\n  { path: path.PURCHASE_RETURN, component: PurchaseReturn },\r\n  { path: path.PURCHASE_RETURN_LIST, component: SalesReturnList },\r\n  { path: path.PURCHASE_RETURN_MODE_3, component: PurchaseReturnMode3 },\r\n\r\n  //******************************* PRODUCTION  Module ************************************//\r\n  { path: path.BIllOf_MATERIALS, component: BOMMaster },\r\n  { path: path.BIllOf_MATERIALS_LIST, component: BOMList },\r\n\r\n  { path: path.WORK_ORDER, component: WorkOrder },\r\n  { path: path.WORK_ORDER_LIST, component: WorkOrderList },\r\n\r\n  { path: path.MATERIAL_ISSUE, component: MaterialIssueMaster },\r\n  { path: path.MATERIAL_ISSUE_LIST, component: MaterialIssueList },\r\n  { path: path.MATERIAL_ISSUE_STP, component: WorkOrderList },\r\n\r\n  { path: path.PRODUCTION_MASTER, component: ProductionMaster },\r\n  { path: path.PRODUCTION_LIST, component: ProductionList },\r\n  { path: path.PRODUCTION_STP, component: MaterialIssueList },\r\n\r\n  { path: path.PRODUCTION_REISSUE, component: ProductionReIssueAdd },\r\n  { path: path.PRODUCTION_REISSUE_LIST, component: ProductionReIssueList },\r\n  { path: path.PRODUCTION_REISSUE_STP, component: ProductionList },\r\n\r\n  //******************************* Sale Module ************************************//\r\n\r\n  { path: path.INVOICE_1, component: Invoice },\r\n  { path: path.INVOICE_LIST_1, component: InvoiceList },\r\n\r\n  { path: path.LOADING_SHEET, component: LoadingSheet },\r\n  { path: path.LOADING_SHEET_LIST, component: LoadingSheetList },\r\n  { path: path.LOADING_SHEET_LIST_UPDATE, component: LoadingSheetUpdate },\r\n\r\n  { path: path.SALES_RETURN, component: SalesReturn },\r\n  { path: path.SALES_RETURN_LIST, component: SalesReturnList },\r\n\r\n  //************************************** Inter Branch ********************************//\r\n  { path: path.IB_ORDER, component: Order },\r\n  { path: path.IB_ORDER_PO_LIST, component: OrderList },\r\n  { path: path.IB_ORDER_SO_LIST, component: OrderList },\r\n\r\n  { path: path.INWARD, component: Inward },\r\n  { path: path.INWARD_LIST, component: InwardList },\r\n  { path: path.IB_INWARD_STP, component: InvoiceList },\r\n\r\n  { path: path.IB_INVOICE_LIST, component: InvoiceList },\r\n  { path: path.IB_GRN_LIST, component: InvoiceList },\r\n  { path: path.IB_INVOICE, component: Invoice },\r\n  { path: path.IB_INVOICE_STP, component: OrderList },\r\n\r\n  //********************************Accounting ***********************************//\r\n  { path: path.RECEIPTS, component: Receipts },\r\n  { path: path.RECEIPTS_LIST, component: ReceiptList },\r\n\r\n  { path: path.RECEIPTS_LIST_2, component: PaymentEntryList },\r\n\r\n  { path: path.BULK_RECIPT, component: BulkRecipt },\r\n\r\n  { path: path.BANK_ASSIGN, component: BankAssign },\r\n\r\n  { path: path.PAYMENT_ENTRY, component: PaymentEntry },\r\n  { path: path.PAYMENT_ENTRY_LIST, component: PaymentEntryList },\r\n\r\n  // |||||||||||||||||||||||||||||||||||||||||||||||||||\r\n\r\n  { path: path.CREDIT_LIST, component: CreditList },\r\n  { path: path.CREDIT_NOTE, component: DebitNoteMaster },\r\n\r\n  { path: path.DEBIT_LIST, component: CreditList },\r\n  { path: path.DEBIT_NOTE, component: DebitNoteMaster },\r\n\r\n\r\n  { path: path.GOODS_CREDIT_LIST, component: CreditList },\r\n  { path: path.GOODS_CREDIT_NOTE, component: GoodsCreditNote },\r\n\r\n  { path: path.GOODS_DEBIT_LIST, component: CreditList },\r\n  { path: path.GOODS_DEBIT_NOTE, component: GoodsCreditNote },\r\n\r\n  { path: path.CLAIM_TRACKING_ENTRY, component: ClaimTrackingEntry },\r\n  { path: path.CLAIM_TRACKING_ENTRY_LIST, component: ClaimTrackingEntryList },\r\n  // |||||||||||||||||||||||||||||||||||||||||||||||||||\r\n\r\n  //**************************** Reports ***********************************//\r\n\r\n  { path: path.SAP_LEDGER, component: SapLedger },\r\n\r\n  { path: path.PARTY_LEDGER, component: PartyLedger },\r\n\r\n  { path: path.STOCK_REPORT, component: StockReport },\r\n\r\n  { path: path.STOCK_REPORT_1, component: StockReport_1 },\r\n\r\n  { path: path.GENERIC_SALE_REPORT, component: GenericSaleReport },\r\n\r\n  { path: path.RETAILER_DATA_REPORT, component: RetailerDataReport },\r\n\r\n  { path: path.ORDER_SUMMARY_REPORT, component: OrderSummary },\r\n\r\n  { path: path.CLAIM_SUMMARY_REPORT, component: ClaimSummary },\r\n\r\n  { path: path.PURCHASE_GST_REPORT, component: PurchaseGSTReport },\r\n\r\n  { path: path.INVOICE_DATA_EXPORT, component: InvoiceDataExport },\r\n\r\n  { path: path.PURCHASE_DATA_EXPORT, component: InvoiceDataExport },\r\n\r\n  { path: path.DELETE_INVOICE_DATA_EXPORT, component: DeleteInvoiceDataExport },\r\n\r\n  { path: path.REPORT, component: Report },\r\n\r\n  { path: path.PRODUCT_MARGIN_REPORT, component: ProductMarginReport },\r\n\r\n  { path: path.DAMAGE_STOCK_REPORT, component: DamageStockReport },\r\n\r\n  { path: path.GST_R1_REPORT, component: GSTR1Report },\r\n\r\n  { path: path.RETURN_REPORT, component: ReturnReport },\r\n\r\n\r\n\r\n  { path: path.CLAIM_SUMMARY_MASTER, component: ClaimSummaryMaster },\r\n  { path: path.CLAIM_SUMMARY_lIST, component: ClaimSummaryList },\r\n\r\n\r\n  { path: path.ITEM_SALE_REPORT, component: ItemSaleReport },\r\n\r\n  { path: path.ITEM_REGISTER_REPORT, component: ItemRegisterReport },\r\n\r\n\r\n  // ************************************ Utility **************************************//\r\n\r\n  { path: path.SEARCH_BOX2, component: SearchBoxSecond },\r\n  { path: path.SEARCH_BOX3, component: SerachBox3 },\r\n  { path: path.TRANSACTION_LOG, component: TransactionLog },\r\n\r\n  { path: \"/dashboard\", component: Dashboard },\r\n\r\n  { path: \"/\", exact: true, component: () => <Redirect to=\"/login\" /> },\r\n  // { component:() => <Redirect to=\"/login\" /> },\r\n  { path: \"/auth-404\", component: Error404 },\r\n  { path: \"/auth-500\", component: Error500 },\r\n\r\n]\r\n\r\nconst authRoutes = [\r\n  //authencation page\r\n  { path: \"/division\", component: SelectDivisionPage },\r\n  { path: \"/logout\", component: Logout },\r\n  { path: \"/login\", component: Login },\r\n  { path: \"/forgot-password\", component: ForgetPwd },\r\n  { path: \"/ResetPassword\", component: ResetPassword },\r\n  { path: \"/SendOTP\", component: SendOTP },\r\n  { path: \"/EnterOTP\", component: EnterOTP },\r\n  { path: \"/pages-404\", component: Error404 },\r\n  // { component:() => <Redirect to=\"/login\" /> },\r\n  { path: \"/pages-500\", component: Error500 },\r\n]\r\n\r\nexport { userRoutes, authRoutes }\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\routes\\middleware\\Authmiddleware.js",["2908","2909"],"import React from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport { Route, Redirect } from \"react-router-dom\"\r\n\r\nimport { sessionAliveNewToken } from \"../../store/auth/sessionAlive/actions\"\r\nimport { useSession } from \"./SessionContext\"\r\n\r\nlet intervalId\r\n\r\nconst Authmiddleware = ({\r\n  component: Component,\r\n  layout: Layout,\r\n  isAuthProtected,\r\n  ...rest\r\n}) => {\r\n  const { session } = useSession();\r\n\r\n\r\n  return (\r\n    <>\r\n      <Route\r\n        {...rest}\r\n        render={props => {\r\n          if (isAuthProtected) {\r\n            if (!session.active || !localStorage.getItem(\"token\")) {\r\n              return (\r\n                <Redirect\r\n                  to={{ pathname: \"/login\", state: { from: props.location } }} />\r\n              )\r\n            }\r\n          }\r\n          return (\r\n            <Layout>\r\n              <Component {...props} />\r\n            </Layout>\r\n          )\r\n        }}\r\n      /></>\r\n  )\r\n}\r\n\r\nAuthmiddleware.propTypes = {\r\n  isAuthProtected: PropTypes.bool,\r\n  component: PropTypes.any,\r\n  location: PropTypes.object,\r\n  layout: PropTypes.any,\r\n  userPageAccess: PropTypes.any,\r\n  history: PropTypes.object,\r\n}\r\n\r\nexport default Authmiddleware;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst updateTokan = (dispatch) => {\r\n  let istoken = localStorage.getItem(\"refreshToken\")\r\n  if (istoken) {\r\n    //console.log(\" keepSessionAlive  api call\", new Date()) //##########################\r\n\r\n    let jsonBody = { \"refresh\": `${istoken}` }\r\n    dispatch(sessionAliveNewToken(jsonBody))\r\n  }\r\n}\r\n\r\nconst keepSessionAlive = (dispatch) => {\r\n  //console.log(\" keepSessionAlive\", new Date()) //##########################\r\n\r\n  sessionStorage.setItem('keepSessionAlive', new Date())\r\n  intervalId = setInterval(() => { updateTokan(dispatch) }, 28 * 60 * 1000)\r\n};\r\n\r\n\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\components\\NonAuthLayout.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\components\\HorizontalLayout\\index.js",["2910"],"import React, { useEffect, useState } from 'react';\r\nimport { withRouter } from \"react-router-dom\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\n\r\n//actions\r\nimport {\r\n  changeLayout,\r\n  changeTopbarTheme,\r\n  changeLayoutWidth,\r\n  changelayoutMode,\r\n  changeLayoutPosition\r\n} from \"../../store/actions\";\r\n\r\n//redux\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\n\r\n//components\r\nimport Navbar from \"./Navbar\";\r\nimport Header from \"./Header\";\r\nimport Footer from \"./Footer\";\r\n\r\nconst Layout = (props) => {\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const {\r\n    topbarTheme, layoutWidth, isPreloader, layoutPosition, layoutMode,\r\n  } = useSelector(state => ({\r\n    topbarTheme: state.Layout.topbarTheme,\r\n    layoutWidth: state.Layout.layoutWidth,\r\n    isPreloader: state.Layout.isPreloader,\r\n    layoutPosition: state.Layout.layoutPosition,\r\n    layoutMode: state.Layout.layoutMode,\r\n    \r\n  }));\r\n\r\n \r\n\r\n  /*\r\n  document title\r\n  */\r\n  useEffect(() => {\r\n    const title = props.location.pathname;\r\n    let currentage = title.charAt(1).toUpperCase() + title.slice(2);\r\n\r\n    document.title =\r\n      currentage + \" | FoodERP 2.0 - React Admin & Dashboard Template\";\r\n  }, [props.location.pathname]);\r\n\r\n  useEffect(() => {\r\n    window.scrollTo(0, 0);\r\n  }, []);\r\n\r\n  /*\r\n  layout settings\r\n  */\r\n  useEffect(() => {\r\n    dispatch(changeLayout(\"horizontal\"));\r\n  }, [dispatch]);\r\n\r\n  useEffect(() => {\r\n    if (isPreloader === true) {\r\n      document.getElementById(\"preloader\").style.display = \"block\";\r\n      document.getElementById(\"status\").style.display = \"block\";\r\n\r\n      setTimeout(function () {\r\n        document.getElementById(\"preloader\").style.display = \"none\";\r\n        document.getElementById(\"status\").style.display = \"none\";\r\n      }, 2500);\r\n    } else {\r\n      document.getElementById(\"preloader\").style.display = \"none\";\r\n      document.getElementById(\"status\").style.display = \"none\";\r\n    }\r\n  }, [isPreloader]);\r\n\r\n  useEffect(() => {\r\n    if (topbarTheme) {\r\n      dispatch(changeTopbarTheme(topbarTheme));\r\n    }\r\n  }, [dispatch, topbarTheme]);\r\n\r\n  useEffect(() => {\r\n    if (layoutPosition) {\r\n      dispatch(changeLayoutPosition(layoutPosition));\r\n    }\r\n  }, [dispatch, layoutPosition]);\r\n\r\n  useEffect(() => {\r\n    if (layoutWidth) {\r\n      dispatch(changeLayoutWidth(layoutWidth));\r\n    }\r\n  }, [dispatch, layoutWidth]);\r\n\r\n  useEffect(() => {\r\n    if (layoutMode) {\r\n      dispatch(changelayoutMode(layoutMode, layoutType));\r\n    }\r\n  }, [layoutMode, dispatch]);\r\n\r\n  const [isMenuOpened, setIsMenuOpened] = useState(false);\r\n  const openMenu = () => {\r\n    setIsMenuOpened(!isMenuOpened);\r\n  };\r\n\r\n  /*\r\ncall dark/light mode\r\n*/\r\n  const { changelayoutMode, layoutType } = props;\r\n  const onChangeLayoutMode = (value) => {\r\n    if (changelayoutMode) {\r\n      changelayoutMode(value, layoutType);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div id=\"preloader\">\r\n        <div id=\"status\">\r\n          <div className=\"spinner-chase\">\r\n            <div className=\"chase-dot\" />\r\n            <div className=\"chase-dot\" />\r\n            <div className=\"chase-dot\" />\r\n            <div className=\"chase-dot\" />\r\n            <div className=\"chase-dot\" />\r\n            <div className=\"chase-dot\" />\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div id=\"layout-wrapper\">\r\n        <Header\r\n          theme={topbarTheme}\r\n          isMenuOpened={isMenuOpened}\r\n          openLeftMenuCallBack={openMenu}\r\n          onChangeLayoutMode={onChangeLayoutMode}\r\n        />\r\n        <Navbar menuOpen={isMenuOpened} />\r\n        <div className=\"main-content\">{props.children}</div>\r\n        <Footer />\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nLayout.propTypes = {\r\n  changeLayout: PropTypes.func,\r\n  changeLayoutWidth: PropTypes.func,\r\n  changeTopbarTheme: PropTypes.func,\r\n  children: PropTypes.object,\r\n  isPreloader: PropTypes.any,\r\n  layoutWidth: PropTypes.any,\r\n  location: PropTypes.object,\r\n  showRightSidebar: PropTypes.any,\r\n  topbarTheme: PropTypes.any\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return { ...state.Layout };\r\n};\r\n\r\nexport default connect(mapStateToProps, {\r\n  changelayoutMode,\r\n})(withRouter(Layout));\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\components\\VerticalLayout\\index.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\reducers.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\sagas.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\routes\\route_url.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\components\\VerticalLayout\\Footer.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\components\\VerticalLayout\\Sidebar.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Authentication\\EnterOTP.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Authentication\\Login.js",["2911","2912","2913","2914","2915"],"import PropTypes from \"prop-types\"\r\nimport MetaTags from \"react-meta-tags\"\r\nimport React, { useEffect, useState } from \"react\"\r\nimport { Row, Col, Alert, Container, Input } from \"reactstrap\"\r\nimport { useSelector, useDispatch } from \"react-redux\"\r\nimport { withRouter, Link, useHistory } from \"react-router-dom\"\r\nimport {\r\n  divisionDropdownSelectSuccess,\r\n  getUserDetailsAction,\r\n  loginError_Action,\r\n  loginSuccessAction,\r\n  loginUser,\r\n  resetRoleAccessAction,\r\n} from \"../../store/actions\"\r\nimport logo from \"../../assets/images/cbm_logo.png\"\r\nimport CarouselPage from \"./CarouselPage\"\r\nimport { useLayoutEffect } from \"react\"\r\nimport { afterloginOneTimeAPI } from \"../../components/Common/AfterLoginApiFunc\"\r\nimport { useSession } from \"../../routes/middleware/SessionContext\"\r\n\r\nconst Login = props => {\r\n\r\n  const dispatch = useDispatch()\r\n  const history = useHistory()\r\n\r\n  const [currentUserName, setcurrentUserName] = useState(\"\");\r\n  const [Password, setPassword] = useState(\"\");\r\n\r\n\r\n  const { loginError, loginSuccess, divisionDropdown_redux = [], userAccess, loading } = useSelector(state => ({\r\n    loading: state.Login.loading,\r\n    loginError: state.Login.loginError,\r\n    loginSuccess: state.Login.loginSuccess,\r\n    divisionDropdown_redux: state.Login.divisionDropdown,\r\n    userAccess: state.Login.RoleAccessUpdateData,\r\n  }))\r\n  const { session, updateSessionActivity } = useSession();\r\n\r\n  useLayoutEffect(() => {\r\n\r\n    dispatch(resetRoleAccessAction())\r\n    dispatch(divisionDropdownSelectSuccess([]))\r\n  }, []);\r\n\r\n  useLayoutEffect(() => {\r\n    try {\r\n      let forceReload = sessionStorage.getItem(\"foreceReload\");\r\n      if (forceReload === \"true\") {\r\n        sessionStorage.setItem(\"foreceReload\", false)\r\n        window.location.reload(true);\r\n      }\r\n      if ((session.active === true && (localStorage.getItem(\"token\")) && (localStorage.getItem(\"roleId\")))) {\r\n        history.push({ pathname: \"/Dashboard\" })\r\n        return\r\n      }\r\n      document.getElementById(\"UserName\").focus();\r\n    } catch (e) { }\r\n  }, [])\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    try {\r\n      if ((loginSuccess.Status === true) && (loginSuccess.StatusCode === 200)) {\r\n        updateSessionActivity({ active: true });\r\n\r\n        localStorage.setItem(\"token\", (loginSuccess.token))\r\n        localStorage.setItem(\"refreshToken\", (loginSuccess.refreshtoken))\r\n        localStorage.setItem(\"userId\", (loginSuccess.UserID))\r\n        sessionStorage.setItem(\"foreceReload\", true)\r\n        dispatch(loginSuccessAction({ Status: false }))\r\n        dispatch(getUserDetailsAction(loginSuccess.UserID))\r\n      }\r\n    } catch (e) { }\r\n  }, [loginSuccess])\r\n\r\n  useEffect(() => {\r\n\r\n    if (divisionDropdown_redux.length === 1) {\r\n      let user = divisionDropdown_redux[0];\r\n      if (user.Party_id === null) {\r\n        user.Party_id = 0;\r\n      }\r\n\r\n      if (session.active === true && (localStorage.getItem(\"token\"))) {\r\n        //api call roleAceessAction Api,partysetting Api , Party Dropdown Api and set localstorage roleId ;\r\n        afterloginOneTimeAPI(user, dispatch);// all common function\r\n      }\r\n    }\r\n    else if (divisionDropdown_redux.length > 1) {\r\n      history.push(\"/division\");\r\n    }\r\n  }, [divisionDropdown_redux]);\r\n\r\n  useEffect(() => {\r\n\r\n    let dashboardFound = userAccess.find((i) => i.ModuleName === \"Dashboard\");\r\n    if (divisionDropdown_redux.length === 1 && userAccess.length > 1) {\r\n      if (dashboardFound) {\r\n        history.push(`/${dashboardFound.ActualPagePath}`);\r\n      } else {\r\n        history.push(\"/Dashboard\");\r\n      }\r\n    }\r\n\r\n  }, [userAccess]);\r\n\r\n  const currentUserOnchange = (e) => {\r\n    setcurrentUserName(e.target.value)\r\n    dispatch(loginError_Action(null))\r\n  }\r\n\r\n  const PasswordOnchange = (e) => {\r\n    setPassword(e.target.value)\r\n    dispatch(loginError_Action(null))\r\n  }\r\n\r\n  const SaveHandler = async (event) => {\r\n\r\n    event.preventDefault();\r\n    const values = {\r\n      UserName: currentUserName,\r\n      Password: Password\r\n    }\r\n    dispatch(loginUser(values, props.history))\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <MetaTags>\r\n        <title>Login | FoodERP 2.0</title>\r\n      </MetaTags>\r\n      <div className=\"auth-page\">\r\n        <Container fluid className=\"p-0\">\r\n          <Row className=\"g-0\">\r\n            <Col lg={4} md={5} className=\"col-xxl-3\">\r\n              <div className=\"auth-full-page-content d-flex p-sm-5 p-4\">\r\n                <div className=\"w-100\">\r\n                  <div className=\"d-flex flex-column h-100\">\r\n                    <div className=\"mb-4 md-5 text-center\">\r\n                      <Link to=\"/dashboard\" className=\"d-block auth-logo\">\r\n                        <span className=\"logo-txt\">FoodERP 2.0</span>\r\n                      </Link>\r\n                      <img src={logo} alt=\"\" height=\"90\" />\r\n\r\n                    </div>\r\n                    <div className=\"auth-content my-auto\">\r\n                      <div className=\"text-center\">\r\n                        <h5 className=\"mb-0\">Welcome !</h5>\r\n                        <p className=\"text-muted mt-2\">Sign in to Continue FoodERP 2.0</p>\r\n                      </div>\r\n                      {loginError ? (\r\n                        <Alert color=\"danger\" style={{ marginTop: \"13px\" }}>\r\n                          {loginError}\r\n                        </Alert>\r\n                      ) : null}\r\n                      <form >\r\n                        <div className=\"mb-3\">\r\n                          <div className=\"d-flex align-items-start\">\r\n                            <div className=\"flex-grow-1\">\r\n                              <label className=\"form-label\">User Name</label>\r\n                            </div>\r\n                          </div>\r\n\r\n                          <div className=\"mb-3\">\r\n                            <Input\r\n                              name=\"UserName\"\r\n                              type=\"text\"\r\n                              value={currentUserName}\r\n                              autoComplete=\"off\"\r\n                              autoFocus={false}\r\n                              required\r\n                              onChange={currentUserOnchange}\r\n                              placeholder=\"Enter User Name\"\r\n                            />\r\n                          </div>\r\n                        </div>\r\n\r\n                        <div className=\"mb-3\">\r\n                          <div className=\"d-flex align-items-start\">\r\n                            <div className=\"flex-grow-1\">\r\n                              <label className=\"form-label\">Password</label>\r\n                            </div>\r\n                          </div>\r\n\r\n                          <div className=\"mb-3\">\r\n                            <Input\r\n                              name=\"Password\"\r\n                              defaultValue={Password}\r\n                              autoComplete=\"off\"\r\n                              autoFocus={false}\r\n                              onChange={PasswordOnchange}\r\n                              type=\"password\"\r\n                              className=\"form-control\"\r\n                              required\r\n                              placeholder=\"Enter Password\"\r\n                            />\r\n                          </div>\r\n                        </div>\r\n                        <div className=\"row mb-4\">\r\n\r\n                          <Link to=\"/forgot-password\" className=\"fw-semibold\">Forgot password?</Link>\r\n\r\n                        </div>\r\n                        <div className=\"mb-3\">\r\n                          {loading ?\r\n                            <button className=\"btn btn-primary w-100 waves-effect waves-light\" autoFocus type=\"button\">\r\n                              <div className=\"dot-pulse\"> <span> Login</span> &nbsp;\r\n                                <div className=\"bounce1\" style={{ background: \"white\" }}></div>\r\n                                <div className=\"bounce2\" style={{ background: \"white\" }}></div>\r\n                                <div className=\"bounce3\" style={{ background: \"white\" }}></div>\r\n                              </div> </button>\r\n                            : <button className=\"btn btn-primary w-100 waves-effect waves-light\" autoFocus type=\"submit\" id=\"loginbtn\" onClick={SaveHandler} >Login</button>}\r\n\r\n                        </div>\r\n                      </form>\r\n                    </div>\r\n                    <div className=\"mt-4 mt-md-5 text-center\">\r\n                      <p className=\"mb-0\">© {new Date().getFullYear()}.Developed by Attrib Solution</p>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </Col>\r\n            <CarouselPage />\r\n          </Row>\r\n        </Container>\r\n      </div>\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nexport default withRouter(Login)\r\n\r\nLogin.propTypes = {\r\n  history: PropTypes.object,\r\n}","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Authentication\\Logout.js",["2916"],"import PropTypes from \"prop-types\"\r\nimport React, { useEffect } from \"react\"\r\nimport { withRouter } from \"react-router-dom\"\r\n\r\nimport { logoutReset, logoutUser } from \"../../store/actions\"\r\n\r\n//redux\r\nimport { useDispatch } from \"react-redux\"\r\nimport { useSession } from \"../../routes/middleware/SessionContext\"\r\n\r\nconst Logout = props => {\r\n  const dispatch = useDispatch()\r\n  const { updateSessionActivity } = useSession();\r\n  useEffect(() => {\r\n\r\n    updateSessionActivity({\r\n      session: false,\r\n    })\r\n    localStorage.clear()\r\n    dispatch(logoutUser(props.history))\r\n    dispatch(logoutReset())\r\n  }, [dispatch, props.history])\r\n\r\n\r\n  return <></>\r\n}\r\n\r\nLogout.propTypes = {\r\n  history: PropTypes.object,\r\n}\r\n\r\nexport default withRouter(Logout)\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Authentication\\SendOTP.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Authentication\\ForgetPassword.js",["2917","2918","2919","2920","2921","2922"],"import PropTypes from \"prop-types\"\r\nimport MetaTags from \"react-meta-tags\"\r\nimport React, { useEffect, useState } from \"react\"\r\nimport { Row, Col, Alert, Container, Button } from \"reactstrap\"\r\n\r\n//redux\r\nimport { useSelector, useDispatch } from \"react-redux\"\r\n\r\nimport { withRouter, Link, useHistory } from \"react-router-dom\"\r\n\r\n// availity-reactstrap-validation\r\nimport { AvForm, AvField, AvInput } from \"availity-reactstrap-validation\"\r\n\r\n// action\r\nimport {\r\n  changePasswordForForgetPassword,\r\n  changePasswordForForgetPasswordError,\r\n  changePasswordForForgetPasswordSuccess,\r\n  userForgetPassword_sendOTP,\r\n  userForgetPassword_sendOTP_Error,\r\n  userForgetPassword_sendOTP_Success\r\n} from \"../../store/actions\"\r\n\r\n// import images\r\nimport logo from \"../../assets/images/foodERP_logo.png\"\r\nimport CarouselPage from \"./CarouselPage\"\r\nimport resetImage from \"../../assets/images/resetpassword.png\"\r\n\r\nconst ForgetPasswordPage = props => {\r\n  const dispatch = useDispatch();\r\n  // const history = useHistory();\r\n  const [paswErr, setPaswErr] = useState(false)\r\n  const {\r\n    sendOTPSuccessMsg_redux,\r\n    sendOtpMegError_reducx,\r\n    sendPasswordError_reducx,\r\n    sendPasswordMsg_reducx, Loading } = useSelector(state => ({\r\n      sendOTPSuccessMsg_redux: state.ForgetPassword.sendOTPSuccessMsg,\r\n      sendOtpMegError_reducx: state.ForgetPassword.sendOtpMegError,\r\n      sendPasswordMsg_reducx: state.ForgetPassword.sendPasswordMsg,\r\n      sendPasswordError_reducx: state.ForgetPassword.sendPasswordError,\r\n      Loading: state.ForgetPassword.Loading,\r\n\r\n\r\n\r\n    }))\r\n  const [sendPasswordMsg, setSendPasswordMsg] = useState(null)\r\n  const [sendPasswordError, setSendPasswordError] = useState(null)\r\n\r\n  const [sendOtpMegError, setSendOtpMegError] = useState(null)\r\n  const [sendOTPSuccessMsg, setSendOTPSuccessMsg] = useState(null)\r\n  const [setpawShowUI, setSetpawShowUI] = useState(false)\r\n\r\n  const [password, setPassword] = useState('');\r\n  const [confirmPassword, setConfirmPassword] = useState('');\r\n  const [passwordMatched, setPasswordMatched] = useState(true);\r\n\r\n\r\n  useEffect(() => {\r\n\r\n    if (sendPasswordMsg_reducx) {\r\n      setSendPasswordMsg(sendPasswordMsg_reducx)\r\n      setSendPasswordError(null)\r\n\r\n\r\n      dispatch(changePasswordForForgetPasswordSuccess(null))\r\n      // dispatch(changePasswordForForgetPasswordError(null))\r\n\r\n    }\r\n    if (sendPasswordError_reducx) {\r\n      setSendPasswordError(sendPasswordError_reducx)\r\n      dispatch(changePasswordForForgetPasswordError(null))\r\n      setSendPasswordMsg(null)\r\n      setSendOTPSuccessMsg(null)\r\n\r\n    }\r\n  }, [sendPasswordMsg_reducx, sendPasswordError_reducx])\r\n\r\n  useEffect(() => {\r\n\r\n    if (sendOTPSuccessMsg_redux) {\r\n      setSendOTPSuccessMsg(sendOTPSuccessMsg_redux)\r\n      setSendOtpMegError(null)\r\n      setSetpawShowUI(true)\r\n      dispatch(userForgetPassword_sendOTP_Success(null))\r\n\r\n    }\r\n    if (sendOtpMegError_reducx) {\r\n      setSendOtpMegError(sendOtpMegError_reducx)\r\n      dispatch(userForgetPassword_sendOTP_Error(null))\r\n\r\n    }\r\n\r\n  }, [sendOTPSuccessMsg_redux, sendOtpMegError_reducx])\r\n\r\n  function handleValidSubmit(event, values) {\r\n\r\n    event.preventDefault();\r\n    var jsonBody = JSON.stringify({\r\n      Email: values.email,\r\n      Phone: \"\"\r\n    })\r\n    dispatch(userForgetPassword_sendOTP(jsonBody))\r\n  }\r\n\r\n  function handleValidSubmit1(event, values) {\r\n\r\n    event.preventDefault();\r\n    var paswd = values.password1\r\n    var pawdcn = values.passwordcon\r\n\r\n    if (!(paswd === pawdcn)) {\r\n      // setPaswErr(\"form-control is-invalid mb-2\")\r\n      setPaswErr(true)\r\n      return\r\n    }\r\n    else {\r\n      // setPaswErr(\"form-control is-valid mb-2\")\r\n      setPaswErr(false)\r\n\r\n      var jsonBody = JSON.stringify({\r\n        LoginName: values.LoginName,\r\n        OTP: values.OTP,\r\n        newpassword: values.passwordcon\r\n      })\r\n      dispatch(changePasswordForForgetPassword(jsonBody))\r\n      // return\r\n    }\r\n  }\r\n\r\n\r\n  const handlePasswordChange = (e) => {\r\n    setPassword(e.target.value);\r\n    setConfirmPassword(''); // Clear Confirm Password field\r\n    // setPasswordMatched(true); // Reset to true when Password changes\r\n  };\r\n\r\n  const handleConfirmPasswordChange = (e) => {\r\n    setConfirmPassword(e.target.value);\r\n    setPasswordMatched(e.target.value === password);\r\n  };\r\n  return (\r\n    <React.Fragment>\r\n      <MetaTags>\r\n        <title>\r\n          Forget Password | FoodERP - React Admin & FoodERP Template\r\n        </title>\r\n      </MetaTags>\r\n      <div className=\"auth-page\">\r\n        <Container fluid className=\"p-0\">\r\n          <Row className=\"g-0\">\r\n            <Col lg={4} md={5} className=\"col-xxl-3\">\r\n              <div className=\"auth-full-page-content d-flex p-sm-5 p-4\">\r\n                <div className=\"w-100\">\r\n                  <div className=\"d-flex flex-column h-100\">\r\n                    <div className=\"mb-4 mb-md-5 text-center\">\r\n                      <Link to=\"/dashboard\" className=\"d-block auth-logo\">\r\n                        <img src={logo} alt=\"\" height=\"28\" /> <span className=\"logo-txt\">FoodERP</span>\r\n                      </Link>\r\n                    </div>\r\n                    {\r\n                      !sendPasswordMsg ?\r\n                        <div className=\"auth-content my-auto text-center\">\r\n                          <img src={resetImage} alt=\"\" height=\"100\" />\r\n                          <div className=\"text-center\">\r\n                            <h5 className=\"mb-0\">  Reset Password</h5>\r\n                          </div>\r\n\r\n                          {sendOtpMegError || sendPasswordError ? (\r\n                            <Alert color=\"danger\" style={{ marginTop: \"13px\" }}>\r\n                              {sendOtpMegError}{sendPasswordError}\r\n                            </Alert>\r\n                          ) : null}\r\n                          {sendOTPSuccessMsg ? (\r\n                            <Alert color=\"success\" style={{ marginTop: \"13px\" }}>\r\n                              {sendOTPSuccessMsg}\r\n                            </Alert>\r\n                          ) : null}\r\n\r\n                          {((setpawShowUI))\r\n                            ?\r\n                            <AvForm className=\"custom-form mt-4\"\r\n                              onValidSubmit={(e, v) => handleValidSubmit1(e, v)}\r\n                            >\r\n                              <div className=\"mb-3\">\r\n                                <label>LoginName</label>\r\n                                <AvInput\r\n                                  name=\"LoginName\"\r\n                                  className=\"form-control mb-2\"\r\n                                  // dissabled={true}\r\n                                  // autoComplete=\"new-email\"\r\n                                  placeholder=\"LoginName\"\r\n                                  type=\"text\"\r\n                                  autoComplete=\"off\"\r\n                                  required\r\n                                />\r\n\r\n                                <label>Enter OTP</label>\r\n                                <AvInput\r\n                                  name=\"OTP\"\r\n                                  className=\"form-control mb-2\"\r\n                                  // dissabled={true}\r\n                                  placeholder=\"Enter OTP\"\r\n                                  type=\"text\"\r\n                                  required\r\n                                />\r\n\r\n                                {/* <label>Password</label>\r\n                                <AvInput\r\n                                  name=\"password1\"\r\n                                  className={\"form-control  mb-2\"}\r\n                                  // dissabled={true}\r\n                                  invalid={paswErr}\r\n                                  autoComplete=\"new-password\"\r\n                                  placeholder=\"Enter password\"\r\n                                  type=\"password\"\r\n                                  required\r\n                                />\r\n                                {(paswErr === true)\r\n                                  ?\r\n                                  <div className=\"text-danger\"> Please Enter Correct Password</div>\r\n                                  : <></>}\r\n                                <label>confirm password</label>\r\n                                <AvInput\r\n                                  name=\"passwordcon\"\r\n                                  className={\"form-control  mb-2\"}\r\n                                  // dissabled={true}\r\n                                  autoComplete=\"new-password\"\r\n                                  invalid={paswErr}\r\n                                  placeholder=\"Enter confirm password\"\r\n                                  type=\"password\"\r\n                                  required\r\n                                />*/}\r\n                              </div>\r\n\r\n                              <div>\r\n                                <label>Password</label>\r\n                                <AvInput\r\n                                  name=\"password1\"\r\n                                  className=\"form-control mb-2\"\r\n                                  autoComplete=\"new-password\"\r\n                                  placeholder=\"Enter password\"\r\n                                  type=\"password\"\r\n                                  required\r\n                                  value={password}\r\n                                  onChange={handlePasswordChange}\r\n                                />\r\n\r\n                                <label>Confirm Password</label>\r\n                                <AvInput\r\n                                  name=\"passwordcon\"\r\n                                  className=\"form-control mb-2\"\r\n                                  autoComplete=\"new-password\"\r\n                                  placeholder=\"Enter confirm password\"\r\n                                  type=\"password\"\r\n                                  required\r\n                                  value={confirmPassword}\r\n                                  onChange={handleConfirmPasswordChange}\r\n                                />\r\n\r\n                                {passwordMatched ? (\r\n                                  password !== '' && (\r\n                                    <div className=\"text-success\">Passwords match!</div>\r\n                                  )\r\n                                ) : (\r\n                                  <div className=\"text-danger\">Passwords do not match!</div>\r\n                                )}\r\n                              </div>\r\n\r\n\r\n                              <div className=\"mb-3 mt-4\">\r\n                                <button className=\"btn btn-primary w-100 waves-effect waves-light\" type=\"submit\">change Password</button>\r\n                              </div>\r\n                            </AvForm>\r\n                            :\r\n                            <AvForm className=\"custom-form mt-4\"\r\n                              onValidSubmit={(e, v) => handleValidSubmit(e, v)}\r\n                            >\r\n\r\n                              <div className=\"mb-3\">\r\n                                <AvField\r\n                                  name=\"email\"\r\n                                  label=\"Email\"\r\n                                  className=\"form-control\"\r\n                                  dissabled={true}\r\n                                  placeholder=\"Enter email or phone no\"\r\n                                  type=\"email\"\r\n                                  required\r\n                                />\r\n                              </div>\r\n\r\n                              <div className=\"mb-3 mt-4\">\r\n                                {Loading ? <button className=\"btn btn-primary w-100 waves-effect waves-light\" type=\"submit\"> <div className=\"dot-pulse\"> <span> Reset</span>     &nbsp;\r\n                                  <div className=\"bounce1\" style={{ background: \"white\" }}></div>\r\n                                  <div className=\"bounce2\" style={{ background: \"white\" }}></div>\r\n                                  <div className=\"bounce3\" style={{ background: \"white\" }}></div>\r\n                                </div></button> : <button className=\"btn btn-primary w-100 waves-effect waves-light\" type=\"submit\">Reset</button>}\r\n                              </div>\r\n                            </AvForm>\r\n                          }\r\n\r\n                          <div className=\"mt-5 text-center\">\r\n                            <p className=\"text-muted mb-0\">Remember It ?  &nbsp\r\n                              <Link to=\"/Login\" className=\"text-primary fw-semibold\">Login</Link>\r\n                              {/* <a href=\"/login\"\r\n                          className=\"text-primary fw-semibold\"> Sign In </a> */}\r\n                            </p>\r\n                          </div>\r\n                        </div>\r\n                        :\r\n                        <div className=\"auth-content my-auto text-center\">\r\n                          <img src={resetImage} alt=\"\" height=\"100\" />\r\n                          <div className=\"text-center\">\r\n                            <h5 className=\"mb-0\">  Reset Password success</h5>\r\n                          </div>\r\n\r\n                          <Alert color=\"success\" style={{ marginTop: \"13px\" }}>\r\n                            {sendPasswordMsg}\r\n                          </Alert>\r\n\r\n                          <div className=\"mt-5 text-center\">\r\n                            <Link to=\"/Login\" className=\"text-primary fw-semibold\"><Button type=\"submit\" className=\"btn btn-success w-md\" >login Here</Button></Link>\r\n\r\n                          </div>\r\n                        </div>\r\n                    }\r\n                    <div className=\"mt-4 mt-md-5 text-center\">\r\n                      <p className=\"mb-0\">© {new Date().getFullYear()} FoodERP 2.0   . Crafted with <i className=\"mdi mdi-heart text-danger\"></i> by Themesbrand</p>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </Col>\r\n            <CarouselPage />\r\n          </Row>\r\n        </Container>\r\n      </div>\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\n\r\nexport default ForgetPasswordPage\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Authentication\\SelectDivisionPage.js",["2923","2924","2925","2926"],"import MetaTags from \"react-meta-tags\"\r\nimport React, { useState } from \"react\"\r\nimport { Row, Col, Container } from \"reactstrap\"\r\nimport { useSelector, useDispatch } from \"react-redux\"\r\nimport { Link, useHistory } from \"react-router-dom\"\r\nimport {\r\n  divisionDropdownSelectAction,\r\n  divisionDropdownSelectSuccess,\r\n  RoleAccessUpdateSuccess,\r\n  roleAceessActionSuccess\r\n} from \"../../store/actions\"\r\nimport logo from \"../../assets/images/cbm_logo.png\"\r\nimport CarouselPage from \"./CarouselPage\"\r\nimport { useLayoutEffect } from \"react\"\r\nimport { Go_Button } from \"../../components/Common/CommonButton\"\r\nimport { C_Select } from \"../../CustomValidateForm\"\r\nimport { afterloginOneTimeAPI } from \"../../components/Common/AfterLoginApiFunc\"\r\n\r\nconst SelectDivisionPage = () => {\r\n  const dispatch = useDispatch()\r\n  const history = useHistory();\r\n\r\n  const [divisionDropdowSelect, setDivisionDropdowSelect] = useState([]);\r\n\r\n  const { divisionDropdown_redux, userAccess, loading, divisionOptionLoading } = useSelector(state => ({\r\n    divisionDropdown_redux: state.Login.divisionDropdown,\r\n    userAccess: state.Login.RoleAccessUpdateData,\r\n    loading: state.Login.loading,\r\n    divisionOptionLoading: state.Login.divisionOptionLoading\r\n  }));\r\n\r\n  useLayoutEffect(() => {\r\n    if (divisionDropdown_redux.length === 0) {\r\n      localStorage.removeItem(\"roleId\");\r\n      dispatch(roleAceessActionSuccess([]))\r\n      dispatch(RoleAccessUpdateSuccess([]))\r\n      dispatch(divisionDropdownSelectAction(localStorage.getItem(\"EmployeeID\")))\r\n    }\r\n    return () => {\r\n      dispatch(divisionDropdownSelectSuccess([]))\r\n    }\r\n  }, [])\r\n\r\n  useLayoutEffect(() => {\r\n\r\n    let dashboardFound = userAccess.find((i) => {\r\n      return i.ModuleName === \"Dashboard\"\r\n    })\r\n    if ((divisionDropdown_redux.length > 1) && (userAccess.length > 1)) {\r\n      localStorage.setItem(\"isMultipleDivision\", true)\r\n      if (dashboardFound) {\r\n        history.push(`/${dashboardFound.ActualPagePath}`)\r\n      }\r\n      else {\r\n        history.push(\"/Dashboard\")\r\n      }\r\n    }\r\n  }, [userAccess])\r\n\r\n  const divisionDropdown_DropdownOption = divisionDropdown_redux.map((d, key) => ({\r\n    value: key,\r\n    label: d.PartyName,\r\n  }));\r\n\r\n  function goButtonHandller() {\r\n\r\n    if (!(divisionDropdowSelect.value === undefined)) {\r\n      divisionDropdown_redux.forEach(i => {\r\n        if (i.Party_id === null) { i.Party_id = 0 }\r\n      });\r\n      let user = divisionDropdown_redux[divisionDropdowSelect.value];\r\n      //api call roleAceessAction Api,partysetting Api , Party Dropdown Api and set localstorage roleId ;\r\n      afterloginOneTimeAPI(user, dispatch);// all common function\r\n    }\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <MetaTags>\r\n        <title>Login | FoodERP 2.0</title>\r\n      </MetaTags>\r\n      <div className=\"auth-page\">\r\n        <Container fluid className=\"p-0\">\r\n          <Row className=\"g-0\">\r\n            <Col lg={4} md={5} className=\"col-xxl-3\">\r\n              <div className=\"auth-full-page-content d-flex p-sm-5 p-4\">\r\n                <div className=\"w-100\">\r\n                  <div className=\"d-flex flex-column h-100\">\r\n                    <div className=\"mb-4 md-5 text-center\">\r\n                      <Link to=\"/dashboard\" className=\"d-block auth-logo\">\r\n                        <span className=\"logo-txt\">FoodERP 2.0</span>\r\n                      </Link>\r\n                      <img src={logo} alt=\"\" height=\"90\" />\r\n                    </div>\r\n\r\n                    <div className=\"auth-content my-auto\">\r\n\r\n                      <div className=\"text-center\">\r\n                        <h5 className=\"mb-0\">Welcome !</h5>\r\n                        <p className=\"text-muted mt-2\">Select Role to Continue FoodERP 2.0.</p>\r\n                      </div>\r\n\r\n                      <div className=\"mb-3\">\r\n                        <C_Select\r\n                          value={divisionDropdowSelect}\r\n                          options={divisionDropdown_DropdownOption}\r\n                          isLoading={divisionOptionLoading}\r\n                          onChange={(e) => {\r\n                            setDivisionDropdowSelect(e);\r\n                          }}\r\n                        />\r\n                      </div>\r\n                      <div className=\"text-center\">\r\n                        <Go_Button\r\n                          loading={loading}\r\n                          onClick={() => { goButtonHandller() }}\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"mt-4 mt-md-5 text-center\">\r\n                      <p className=\"mb-0\">© {new Date().getFullYear()}.Developed by Attrib Solution</p>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </Col>\r\n            <CarouselPage />\r\n          </Row>\r\n        </Container>\r\n      </div>\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nexport default SelectDivisionPage\r\n\r\n\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Utility\\Error404.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Authentication\\ResetPassword.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\ModulesPages\\Modules.js",["2927","2928","2929","2930","2931","2932","2933"],"import React, { useState, useEffect } from \"react\";\r\nimport {\r\n    Card,\r\n    CardBody,\r\n    Col,\r\n    Container,\r\n    Row,\r\n    Label,\r\n    CardHeader,\r\n    FormGroup,\r\n    Input,\r\n} from \"reactstrap\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n    saveModuleMaster,\r\n    updateModuleID,\r\n    saveModuleMasterSuccess,\r\n    editModuleIDSuccess,\r\n    updateModuleIDSuccess,\r\n    getModuleList,\r\n} from \"../../../store/Administrator/ModulesRedux/actions\";\r\nimport { MetaTags } from \"react-meta-tags\";\r\nimport {\r\n    commonPageField,\r\n    commonPageFieldSuccess\r\n} from \"../../../store/actions\";\r\nimport { Breadcrumb_inputName } from \"../../../store/Utilites/Breadcrumb/actions\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {\r\n    comAddPageFieldFunc,\r\n    formValid,\r\n    initialFiledFunc,\r\n    onChangeText,\r\n    resetFunction\r\n} from \"../../../components/Common/validationFunction\";\r\nimport { SaveButton } from \"../../../components/Common/CommonButton\";\r\nimport {\r\n    breadcrumbReturnFunc,\r\n    loginUserID,\r\n    btnIsDissablefunc,\r\n    metaTagLabel\r\n} from \"../../../components/Common/CommonFunction\";\r\nimport * as url from \"../../../routes/route_url\";\r\nimport * as pageId from \"../../../routes/allPageID\"\r\nimport * as mode from \"../../../routes/PageMode\"\r\nimport { customAlert } from \"../../../CustomAlert/ConfirmDialog\";\r\n\r\nconst Modules = (props) => {\r\n\r\n    const dispatch = useDispatch();\r\n    const history = useHistory()\r\n\r\n    const fileds = {\r\n        id: \"\",\r\n        Name: \"\",\r\n        DisplayIndex: \"\",\r\n        Icon: \"\",\r\n        isActive: true,\r\n    }\r\n\r\n    const [state, setState] = useState(() => initialFiledFunc(fileds))\r\n\r\n    const [modalCss, setModalCss] = useState(false);\r\n    const [pageMode, setPageMode] = useState(mode.defaultsave);\r\n    const [userPageAccessState, setUserAccState] = useState('');\r\n    const [editCreatedBy, seteditCreatedBy] = useState(\"\");\r\n\r\n    //Access redux store Data /  'save_ModuleSuccess' action data\r\n    const { postMsg,\r\n        pageField,\r\n        userAccess,\r\n        saveBtnloading,\r\n        updateMsg } = useSelector((state) => ({\r\n            saveBtnloading: state.Modules.saveBtnloading,\r\n            postMsg: state.Modules.modulesSubmitSuccesss,\r\n            updateMsg: state.Modules.updateMessage,\r\n            userAccess: state.Login.RoleAccessUpdateData,\r\n            pageField: state.CommonPageFieldReducer.pageField\r\n        }));\r\n\r\n    useEffect(() => {\r\n        const page_Id = pageId.MODULE\r\n        dispatch(commonPageFieldSuccess(null));\r\n        dispatch(commonPageField(page_Id))\r\n    }, []);\r\n\r\n    const values = { ...state.values }\r\n    const { isError } = state;\r\n    const { fieldLabel } = state;\r\n\r\n    const location = { ...history.location }\r\n    const hasShowloction = location.hasOwnProperty(mode.editValue)\r\n    const hasShowModal = props.hasOwnProperty(mode.editValue)\r\n\r\n    // userAccess useEffect\r\n    useEffect(() => {\r\n       \r\n        let userAcc = null;\r\n        let locationPath;\r\n\r\n        if (props.pageMode === mode.dropdownAdd) {\r\n            locationPath = props.masterPath;\r\n        } else {\r\n            locationPath = location.pathname;\r\n        }\r\n\r\n        if (hasShowModal) {\r\n            locationPath = props.masterPath;\r\n        };\r\n\r\n        userAcc = userAccess.find((inx) => {\r\n            return (`/${inx.ActualPagePath}` === locationPath)\r\n        })\r\n\r\n        if (userAcc) {\r\n            setUserAccState(userAcc);\r\n            if (!props.isdropdown) {\r\n                breadcrumbReturnFunc({ dispatch, userAcc });\r\n            }\r\n        };\r\n    }, [userAccess])\r\n\r\n    // This UseEffect 'SetEdit' data and 'autoFocus' while this Component load First Time.\r\n    useEffect(() => {\r\n\r\n        if ((hasShowloction || hasShowModal)) {\r\n\r\n            let hasEditVal = null\r\n            if (hasShowloction) {\r\n                setPageMode(location.pageMode)\r\n                hasEditVal = location.editValue\r\n            }\r\n            else if (hasShowModal) {\r\n                hasEditVal = props.editValue\r\n                setPageMode(props.pageMode)\r\n                setModalCss(true)\r\n            }\r\n\r\n            if (hasEditVal) {\r\n\r\n                const { id, Name, DisplayIndex, isActive, Icon } = hasEditVal\r\n                const { values, fieldLabel, hasValid, required, isError } = { ...state }\r\n\r\n                hasValid.Name.valid = true;\r\n                hasValid.DisplayIndex.valid = true;\r\n                hasValid.isActive.valid = true;\r\n                hasValid.Icon.valid = true;\r\n\r\n                values.Name = Name;\r\n                values.DisplayIndex = DisplayIndex;\r\n                values.isActive = isActive;\r\n                values.Icon = Icon;\r\n                values.id = id\r\n                setState({ values, fieldLabel, hasValid, required, isError })\r\n                dispatch(Breadcrumb_inputName(hasEditVal.Modules))\r\n                seteditCreatedBy(hasEditVal.CreatedBy)\r\n            }\r\n            dispatch(editModuleIDSuccess({ Status: false }))\r\n        }\r\n    }, [])\r\n\r\n   \r\n    useEffect(async () => {\r\n\r\n        if ((postMsg.Status === true) && (postMsg.StatusCode === 200)) {\r\n            dispatch(saveModuleMasterSuccess({ Status: false }))\r\n            dispatch(Breadcrumb_inputName(''))\r\n            setState(() => resetFunction(fileds, state))// Clear form values  \r\n            if (props.pageMode === mode.dropdownAdd) {\r\n                customAlert({\r\n                    Type: 1,\r\n                    Message: postMsg.Message,\r\n                })\r\n                \r\n                dispatch(getModuleList())\r\n\r\n                props.isOpenModal(false)\r\n            }\r\n            else if (pageMode === mode.edit) {\r\n                customAlert({\r\n                    Type: 1,\r\n                    Message: postMsg.Message,\r\n                })\r\n                history.push({ pathname: url.MODULE_lIST })\r\n            }\r\n            else {\r\n                dispatch(Breadcrumb_inputName(''))\r\n                const promise = await customAlert({\r\n                    Type: 1,\r\n                    Message: postMsg.Message,\r\n                })\r\n                if (promise) { history.push({ pathname: url.MODULE_lIST }) }\r\n            }\r\n\r\n        } else if\r\n            (postMsg.Status === true) {\r\n            customAlert({\r\n                Type: 3,\r\n                Message: JSON.stringify(postMsg.Message),\r\n            })\r\n        }\r\n    }, [postMsg])\r\n\r\n\r\n    useEffect(() => {\r\n        if (updateMsg.Status === true && updateMsg.StatusCode === 200 && !modalCss) {\r\n            setState(() => resetFunction(fileds, state)) // Clear form values \r\n            history.push({\r\n                pathname: url.MODULE_lIST,\r\n            })\r\n        } else if (updateMsg.Status === true && !modalCss) {\r\n            dispatch(updateModuleIDSuccess({ Status: false }));\r\n             customAlert({\r\n                Type: 3,\r\n                Message: JSON.stringify(updateMsg.Message),\r\n            })\r\n        }\r\n    }, [updateMsg, modalCss]);\r\n\r\n    useEffect(() => {\r\n\r\n        if (pageField) {\r\n            const fieldArr = pageField.PageFieldMaster\r\n            comAddPageFieldFunc({ state, setState, fieldArr })\r\n        }\r\n    }, [pageField])\r\n\r\n    const SaveHandler = async (event) => {\r\n        event.preventDefault();\r\n        const btnId = event.target.id\r\n        try {\r\n            if (formValid(state, setState)) {\r\n                btnIsDissablefunc({ btnId, state: true })\r\n\r\n                const jsonBody = JSON.stringify({\r\n                    Name: values.Name,\r\n                    DisplayIndex: values.DisplayIndex,\r\n                    isActive: values.isActive,\r\n                    Icon: values.Icon,\r\n                    CreatedBy: loginUserID(),\r\n                    UpdatedBy: loginUserID(),\r\n                });\r\n\r\n                if (pageMode === mode.edit) {\r\n                    dispatch(updateModuleID({ jsonBody, updateId: values.id, btnId }));\r\n                }\r\n                else {\r\n                    dispatch(saveModuleMaster({ jsonBody, btnId }));\r\n                }\r\n            }\r\n        } catch (e) { btnIsDissablefunc({ btnId, state: false }) }\r\n    };\r\n\r\n    // IsEditMode_Css is use of module Edit_mode (reduce page-content marging)\r\n    var IsEditMode_Css = ''\r\n    if ((modalCss) || (pageMode === mode.dropdownAdd)) { IsEditMode_Css = \"-5.5%\" };\r\n\r\n    if (!(userPageAccessState === '')) {\r\n        return (\r\n            <React.Fragment>\r\n                <div className=\"page-content\" style={{ marginTop: IsEditMode_Css }}>\r\n                    <MetaTags>{metaTagLabel(userPageAccessState)}</MetaTags>\r\n                    <Container fluid >\r\n\r\n                        <Card className=\"text-black\" >\r\n                            <CardHeader className=\"card-header   text-black c_card_header\" >\r\n                                <h4 className=\"card-title text-black\">{userPageAccessState.PageDescription}</h4>\r\n                                <p className=\"card-title-desc text-black\">{userPageAccessState.PageDescriptionDetails}</p>\r\n                            </CardHeader>\r\n                            <CardBody className=\" vh-10 0 text-black\" style={{ backgroundColor: \"#whitesmoke\" }} >\r\n                                <form noValidate>\r\n\r\n                                    <Row className=\"\">\r\n                                        <Col md={12}  >\r\n                                            <Card >\r\n                                                <CardBody className=\"c_card_body\">\r\n                                                    <Row>\r\n                                                        <FormGroup className=\"mb-2 col col-sm-4 \" >\r\n                                                            <Label htmlFor=\"validationCustom01\">{fieldLabel.Name} </Label>\r\n                                                            <Input\r\n                                                                name=\"Name\"\r\n                                                                id=\"txtName\"\r\n                                                                value={values.Name}\r\n                                                                type=\"text\"\r\n                                                                className={isError.Name.length > 0 ? \"is-invalid form-control\" : \"form-control\"}\r\n                                                                placeholder=\"Please Enter Name\"\r\n                                                                autoComplete='off'\r\n                                                                autoFocus={true}\r\n                                                                onChange={(event) => {\r\n                                                                    onChangeText({ event, state, setState })\r\n                                                                    dispatch(Breadcrumb_inputName(event.target.value))\r\n                                                                }}\r\n                                                            />\r\n                                                            {isError.Name.length > 0 && (\r\n                                                                <span className=\"invalid-feedback\">{isError.Name}</span>\r\n                                                            )}\r\n                                                        </FormGroup>\r\n                                                    </Row>\r\n\r\n                                                    <Row>\r\n                                                        <FormGroup className=\"mb-2 col col-sm-4 \">\r\n                                                            <Label htmlFor=\"validationCustom01\">{fieldLabel.DisplayIndex} </Label>\r\n                                                            <Input name=\"DisplayIndex\" autoComplete='off'\r\n                                                                placeholder=\"Please Enter DisplayIndex\"\r\n                                                                value={values.DisplayIndex}\r\n                                                                type=\"text\"\r\n                                                                className={isError.DisplayIndex.length > 0 ? \"is-invalid form-control\" : \"form-control\"}\r\n                                                                onChange={(event) => {\r\n                                                                    onChangeText({ event, state, setState })\r\n                                                                    dispatch(Breadcrumb_inputName(event.target.value))\r\n                                                                }}\r\n                                                            />\r\n                                                            {isError.DisplayIndex.length > 0 && (\r\n                                                                <span className=\"invalid-feedback\">{isError.DisplayIndex}</span>\r\n                                                            )}\r\n                                                        </FormGroup>\r\n                                                    </Row>\r\n\r\n                                                    <Row>\r\n                                                        <FormGroup className=\"mb-2 col col-sm-4 \" >\r\n                                                            <Label htmlFor=\"validationCustom01\">{fieldLabel.Icon} </Label>\r\n                                                            <Input name=\"Icon\"\r\n                                                                autoComplete='off'\r\n                                                                placeholder=\"Please Enter IconPath\"\r\n                                                                value={values.Icon}\r\n                                                                type=\"text\"\r\n                                                                className={isError.Icon.length > 0 ? \"is-invalid form-control\" : \"form-control\"}\r\n                                                                onChange={(event) => {\r\n                                                                    onChangeText({ event, state, setState })\r\n                                                                    dispatch(Breadcrumb_inputName(event.target.value))\r\n                                                                }}\r\n                                                            />\r\n                                                            {isError.Icon.length > 0 && (\r\n                                                                <span className=\"invalid-feedback\">{isError.Icon}</span>\r\n                                                            )}\r\n                                                        </FormGroup>\r\n                                                    </Row>\r\n\r\n                                                    <FormGroup className=\"mb-2 col col-sm-5\">\r\n                                                        <Row className=\"justify-content-md-left\">\r\n                                                            <Label htmlFor=\"horizontal-firstname-input\" className=\"col-sm-3 col-form-label\" >{fieldLabel.isActive}  </Label>\r\n                                                            <Col md={2} style={{ marginTop: '9px' }} >\r\n                                                                <div className=\"form-check form-switch form-switch-md mb-3\">\r\n                                                                    <Input type=\"checkbox\" className=\"form-check-input\"\r\n                                                                        checked={values.isActive}\r\n                                                                        name=\"isActive\"\r\n                                                                        onChange={(e) => {\r\n                                                                            setState((i) => {\r\n                                                                                const a = { ...i }\r\n                                                                                a.values.isActive = e.target.checked;\r\n                                                                                return a\r\n                                                                            })\r\n                                                                        }}\r\n                                                                    />\r\n                                                                </div>\r\n                                                            </Col>\r\n                                                        </Row>\r\n                                                    </FormGroup>\r\n\r\n                                                    <FormGroup >\r\n                                                        <Row >\r\n                                                            <Col sm={2}>\r\n                                                                <SaveButton pageMode={pageMode}\r\n                                                                    loading={saveBtnloading}\r\n                                                                    onClick={SaveHandler}\r\n                                                                    userAcc={userPageAccessState}\r\n                                                                    editCreatedBy={editCreatedBy}\r\n                                                                    module={\"Modules\"}\r\n                                                                />\r\n                                                            </Col>\r\n                                                        </Row>\r\n                                                    </FormGroup >\r\n                                                </CardBody>\r\n                                            </Card>\r\n                                        </Col>\r\n                                    </Row>\r\n                                </form>\r\n                            </CardBody>\r\n                        </Card>\r\n\r\n                    </Container>\r\n                </div>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n    else {\r\n        return (\r\n            <React.Fragment></React.Fragment>\r\n        )\r\n    }\r\n};\r\nexport default Modules\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Utility\\Error500.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\ModulesPages\\ModulesList.js",["2934","2935"],"import React, { useEffect } from \"react\"\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n    deleteModuleID,\r\n    deleteModuleIDSuccess,\r\n    editModuleID,\r\n    getModuleList,\r\n    saveModuleMasterSuccess,\r\n    updateModuleIDSuccess\r\n} from \"../../../store/actions\";\r\nimport Modules from \"./Modules\";\r\nimport { commonPageFieldList, commonPageFieldListSuccess } from \"../../../store/actions\";\r\nimport CommonListPage from \"../../../components/Common/CommonMasterListPage\";\r\nimport * as pageId from \"../../../routes/allPageID\"\r\nimport * as url from \"../../../routes/route_url\";\r\nimport { PageLoadingSpinner, Listloader } from \"../../../components/Common/CommonButton\";\r\n\r\nconst ModulesList = () => {\r\n\r\n    const dispatch = useDispatch();\r\n    const reducers = useSelector(\r\n        (state) => ({\r\n            listBtnLoading: state.Modules.listBtnLoading,\r\n            GoBtnlistloading: state.Modules.loading,\r\n            tableList: state.Modules.modulesList,\r\n            updateMsg: state.Modules.updateMessage,\r\n            editData: state.Modules.editData,\r\n            deleteMsg: state.Modules.deleteModuleIDSuccess,\r\n            postMsg: state.Modules.modulesSubmitSuccesss,\r\n            userAccess: state.Login.RoleAccessUpdateData,\r\n            pageField: state.CommonPageFieldReducer.pageFieldList\r\n        })\r\n    );\r\n\r\n    const action = {\r\n        getList: getModuleList,\r\n        editId: editModuleID,\r\n        deleteId: deleteModuleID,\r\n        updateSucc: updateModuleIDSuccess,\r\n        deleteSucc: deleteModuleIDSuccess,\r\n        postSucc: saveModuleMasterSuccess\r\n    }\r\n\r\n    //  This UseEffect => Featch Modules List data  First Rendering\r\n    useEffect(() => {\r\n        const page_Id = pageId.MODULE_lIST\r\n        dispatch(commonPageFieldListSuccess(null))\r\n        dispatch(commonPageFieldList(page_Id))\r\n        dispatch(getModuleList());\r\n    }, []);\r\n\r\n    const { pageField, GoBtnlistloading } = reducers\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <PageLoadingSpinner isLoading={(GoBtnlistloading || !pageField)} />\r\n            {\r\n                (pageField) &&\r\n                <CommonListPage\r\n                    action={action}\r\n                    reducers={reducers}\r\n                    MasterModal={Modules}\r\n                    masterPath={url.MODULE}\r\n                    ButtonMsgLable={\"Module\"}\r\n                    deleteName={\"Name\"}\r\n                />\r\n\r\n            }\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default ModulesList\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\CompanyPages\\CompanyList.js",["2936"],"import React, { useEffect } from \"react\";\r\nimport {\r\n    deleteCompany_ID,\r\n    editCompanyID,\r\n    updateCompanyIDSuccess,\r\n    deleteCompanyIDSuccess,\r\n    saveCompany_Success,\r\n    getcompanyList,\r\n    getCompanyListSuccess,\r\n} from \"../../../store/Administrator/CompanyRedux/actions\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport CompanyModule from \"./CompanyModule\";\r\nimport CommonListPage from \"../../../components/Common/CommonMasterListPage\";\r\nimport { commonPageFieldList, commonPageFieldListSuccess } from \"../../../store/actions\";\r\nimport * as pageId from \"../../../routes/allPageID\"\r\nimport * as url from \"../../../routes/route_url\";\r\nimport { PageLoadingSpinner } from \"../../../components/Common/CommonButton\";\r\n\r\n\r\nconst CompanyList = () => {\r\n\r\n    const dispatch = useDispatch();\r\n    const reducers = useSelector(\r\n        (state) => ({\r\n            listBtnLoading: state.Company.listBtnLoading,\r\n            goBtnLoading: state.Company.goBtnLoading,\r\n            tableList: state.Company.companyList,\r\n            postMsg: state.Company.postMsg,\r\n            userAccess: state.Login.RoleAccessUpdateData,\r\n            editData: state.Company.editData,\r\n            updateMsg: state.Company.updateMessage,\r\n            deleteMsg: state.Company.deleteCompanyID,\r\n            pageField: state.CommonPageFieldReducer.pageFieldList\r\n        })\r\n    );\r\n\r\n    const action = {\r\n        getList: getcompanyList,\r\n        editId: editCompanyID,\r\n        deleteId: deleteCompany_ID,\r\n        postSucc: saveCompany_Success,\r\n        updateSucc: updateCompanyIDSuccess,\r\n        deleteSucc: deleteCompanyIDSuccess\r\n    }\r\n\r\n    // Featch Modules List data  First Rendering\r\n    useEffect(() => {\r\n        const page_Id = pageId.COMPANY_lIST\r\n        dispatch(commonPageFieldListSuccess(null))\r\n        dispatch(commonPageFieldList(page_Id))\r\n        dispatch(getcompanyList());\r\n\r\n        return () => {\r\n            dispatch(getCompanyListSuccess([]));\r\n            dispatch(commonPageFieldListSuccess(null))\r\n        }\r\n    }, []);\r\n\r\n    const { pageField, goBtnLoading } = reducers;\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <PageLoadingSpinner isLoading={(goBtnLoading || !pageField)} />\r\n            {\r\n                (pageField) &&\r\n                <CommonListPage\r\n                    action={action}\r\n                    reducers={reducers}\r\n                    MasterModal={CompanyModule}\r\n                    masterPath={url.COMPANY}\r\n                    ButtonMsgLable={\"Company\"}\r\n                    deleteName={\"Name\"}\r\n                />\r\n            }\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default CompanyList;\r\n\r\n\r\n\r\n\r\n\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\RoleMasterPages\\RoleList.js",["2937"],"import React, { useEffect } from \"react\";\r\nimport {\r\n  getRole,\r\n  deleteRole,\r\n  editRoleId,\r\n  userUpdateActionSuccess,\r\n  userDeleteActionSuccess,\r\n  PostSuccess,\r\n} from \"../../../store/Administrator/RoleMasterRedux/action\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport RoleMaster from \"./RoleMaster\";\r\nimport CommonListPage from \"../../../components/Common/CommonMasterListPage\";\r\nimport { commonPageFieldList, commonPageFieldListSuccess } from \"../../../store/actions\";\r\nimport * as pageId from \"../../../routes/allPageID\"\r\nimport * as url from \"../../../routes/route_url\";\r\nimport {PageLoadingSpinner } from \"../../../components/Common/CommonButton\";\r\n\r\nconst RoleList = (props) => {\r\n\r\n  const dispatch = useDispatch();\r\n  const reducers = useSelector(\r\n    (state) => ({\r\n      listBtnLoading: state.RoleMaster_Reducer.listBtnLoading,\r\n      loading: state.RoleMaster_Reducer.loading,\r\n      tableList: state.RoleMaster_Reducer.roleList,\r\n      editData: state.RoleMaster_Reducer.editData,\r\n      updateMsg: state.RoleMaster_Reducer.updateMsg,\r\n      deleteMsg: state.RoleMaster_Reducer.deleteMsg,\r\n      postMsg: state.RoleMaster_Reducer.postMsg,\r\n      userAccess: state.Login.RoleAccessUpdateData,\r\n      pageField: state.CommonPageFieldReducer.pageFieldList\r\n    })\r\n  );\r\n\r\n  const action = {\r\n    getList: getRole,\r\n    editId: editRoleId,\r\n    deleteId: deleteRole,\r\n    postSucc: PostSuccess,\r\n    updateSucc: userUpdateActionSuccess,\r\n    deleteSucc: userDeleteActionSuccess\r\n  }\r\n\r\n  //  This UseEffect => Featch Modules List data  First Rendering\r\n  useEffect(() => {\r\n    const page_Id = pageId.ROLE_lIST\r\n    dispatch(commonPageFieldListSuccess(null))\r\n    dispatch(commonPageFieldList(page_Id))\r\n    dispatch(getRole());\r\n  }, []);\r\n\r\n  const { pageField } = reducers\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <PageLoadingSpinner isLoading={(reducers.loading || !pageField)} />\r\n      {\r\n        (pageField) &&\r\n        <CommonListPage\r\n          action={action}\r\n          reducers={reducers}\r\n          MasterModal={RoleMaster}\r\n          masterPath={url.ROLE}\r\n          ButtonMsgLable={\"Role\"}\r\n          deleteName={\"Name\"}\r\n        />\r\n      }\r\n\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nexport default RoleList;\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\CompanyPages\\CompanyModule.js",["2938","2939","2940","2941","2942","2943"],"import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Card,\r\n  CardBody,\r\n  Col,\r\n  Container,\r\n  Row,\r\n  Label,\r\n  CardHeader,\r\n  FormGroup,\r\n  Input,\r\n} from \"reactstrap\";\r\nimport Select from \"react-select\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  editCompanyIDSuccess,\r\n  saveCompany,\r\n  saveCompany_Success,\r\n  updateCompanyID,\r\n  getCompanyGroup,\r\n  updateCompanyIDSuccess\r\n} from \"../../../store/Administrator/CompanyRedux/actions\";\r\nimport { MetaTags } from \"react-meta-tags\";\r\nimport {  commonPageField, commonPageFieldSuccess } from \"../../../store/actions\";\r\nimport { Breadcrumb_inputName } from \"../../../store/Utilites/Breadcrumb/actions\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {\r\n  comAddPageFieldFunc,\r\n  formValid,\r\n  initialFiledFunc,\r\n  onChangeSelect,\r\n  onChangeText,\r\n  resetFunction,\r\n} from \"../../../components/Common/validationFunction\";\r\nimport { SaveButton } from \"../../../components/Common/CommonButton\";\r\nimport {\r\n  breadcrumbReturnFunc,\r\n  btnIsDissablefunc,\r\n  loginUserID,\r\n  metaTagLabel\r\n} from \"../../../components/Common/CommonFunction\";\r\nimport * as url from \"../../../routes/route_url\";\r\nimport * as pageId from \"../../../routes/allPageID\"\r\nimport * as mode from \"../../../routes/PageMode\"\r\nimport { customAlert } from \"../../../CustomAlert/ConfirmDialog\";\r\n\r\nconst CompanyModule = (props) => {\r\n\r\n  const dispatch = useDispatch();\r\n  const history = useHistory()\r\n\r\n  const fileds = {\r\n    id: \"\",\r\n    Name: \"\",\r\n    Address: \"\",\r\n    GSTIN: \"\",\r\n    PhoneNo: \"\",\r\n    CompanyAbbreviation: \"\",\r\n    EmailID: \"\",\r\n    CompanyGroupName: \"\",\r\n    IsSCM: false\r\n  }\r\n\r\n  const [state, setState] = useState(() => initialFiledFunc(fileds))\r\n\r\n  const [modalCss, setModalCss] = useState(false);\r\n  const [pageMode, setPageMode] = useState(mode.defaultsave);\r\n  const [userPageAccessState, setUserAccState] = useState('');\r\n  const [editCreatedBy, seteditCreatedBy] = useState(\"\");\r\n\r\n  //Access redux store Data /  'save_ModuleSuccess' action data\r\n  const { postMsg,\r\n    updateMsg,\r\n    CompanyGroup,\r\n    userAccess,\r\n    saveBtnloading,\r\n    pageField } = useSelector((state) => ({\r\n      saveBtnloading: state.Company.saveBtnloading,\r\n      postMsg: state.Company.postMsg,\r\n      updateMsg: state.Company.updateMessage,\r\n      CompanyGroup: state.Company.CompanyGroup,\r\n      userAccess: state.Login.RoleAccessUpdateData,\r\n      pageField: state.CommonPageFieldReducer.pageField\r\n    }));\r\n\r\n  useEffect(() => {\r\n    const page_Id = pageId.COMPANY\r\n    dispatch(commonPageFieldSuccess(null));\r\n    dispatch(commonPageField(page_Id))\r\n    dispatch(getCompanyGroup());\r\n  }, [dispatch]);\r\n\r\n  const values = { ...state.values }\r\n  const { isError } = state;\r\n  const { fieldLabel } = state;\r\n\r\n  const location = { ...history.location }\r\n  const hasShowloction = location.hasOwnProperty(mode.editValue)\r\n  const hasShowModal = props.hasOwnProperty(mode.editValue)\r\n\r\n  // userAccess useEffect\r\n  useEffect(() => {\r\n    let userAcc = null;\r\n    let locationPath = location.pathname;\r\n\r\n    if (hasShowModal) {\r\n      locationPath = props.masterPath;\r\n    };\r\n\r\n    userAcc = userAccess.find((inx) => {\r\n      return (`/${inx.ActualPagePath}` === locationPath)\r\n    })\r\n\r\n    if (userAcc) {\r\n      setUserAccState(userAcc);\r\n      breadcrumbReturnFunc({ dispatch, userAcc });\r\n    };\r\n  }, [userAccess])\r\n\r\n  useEffect(() => {\r\n\r\n    if ((hasShowloction || hasShowModal)) {\r\n\r\n      let hasEditVal = null\r\n      if (hasShowloction) {\r\n        setPageMode(location.pageMode)\r\n        hasEditVal = location.editValue\r\n      }\r\n      else if (hasShowModal) {\r\n        hasEditVal = props.editValue\r\n        setPageMode(props.pageMode)\r\n        setModalCss(true)\r\n      }\r\n\r\n      if (hasEditVal) {\r\n\r\n        const { id, Name, Address, GSTIN, PhoneNo, CompanyAbbreviation, EmailID, CompanyGroup, CompanyGroupName, IsSCM } = hasEditVal\r\n        const { values, fieldLabel, hasValid, required, isError } = { ...state }\r\n\r\n        hasValid.Name.valid = true;\r\n        hasValid.Address.valid = true;\r\n        hasValid.GSTIN.valid = true;\r\n        hasValid.PhoneNo.valid = true;\r\n        hasValid.CompanyAbbreviation.valid = true;\r\n        hasValid.EmailID.valid = true;\r\n        hasValid.CompanyGroupName.valid = true;\r\n        hasValid.IsSCM.valid = true;\r\n\r\n        values.id = id\r\n        values.Name = Name\r\n        values.Address = Address;\r\n        values.GSTIN = GSTIN;\r\n        values.PhoneNo = PhoneNo;\r\n        values.IsSCM = IsSCM;\r\n        values.CompanyAbbreviation = CompanyAbbreviation;\r\n        values.EmailID = EmailID;\r\n        values.CompanyGroupName = { label: CompanyGroupName, value: CompanyGroup };\r\n        setState({ values, fieldLabel, hasValid, required, isError })\r\n        dispatch(Breadcrumb_inputName(hasEditVal.Name))\r\n        seteditCreatedBy(hasEditVal.CreatedBy)\r\n      }\r\n      dispatch(editCompanyIDSuccess({ Status: false }))\r\n    }\r\n\r\n  }, []);\r\n\r\n  useEffect(async () => {\r\n\r\n    if ((postMsg.Status === true) && (postMsg.StatusCode === 200) && !(pageMode === \"dropdownAdd\")) {\r\n      dispatch(saveCompany_Success({ Status: false }))\r\n      setState(() => resetFunction(fileds, state))// Clear form values \r\n      dispatch(Breadcrumb_inputName(''))\r\n\r\n      if (pageMode === \"other\") {\r\n        customAlert({\r\n          Type: 1,\r\n          Message: postMsg.Message,\r\n      })\r\n      }\r\n      else {\r\n        let isPermission = await customAlert({\r\n          Type: 1,\r\n          Status: true,\r\n          Message: postMsg.Message,\r\n      })\r\n      if (isPermission) {\r\n          history.push({ pathname: url.COMPANY_lIST })\r\n      }\r\n      }\r\n    }\r\n    else if ((postMsg.Status === true) && !(pageMode === mode.dropdownAdd)) {\r\n      dispatch(saveCompany_Success({ Status: false }))\r\n      customAlert({\r\n        Type: 4,\r\n        Message: JSON.stringify(postMsg.Message),\r\n    })\r\n    }\r\n  }, [postMsg])\r\n\r\n  useEffect(() => {\r\n    if (updateMsg.Status === true && updateMsg.StatusCode === 200 && !modalCss) {\r\n      setState(() => resetFunction(fileds, state))// Clear form values \r\n      history.push({\r\n        pathname: url.COMPANY_lIST,\r\n      })\r\n    } else if (updateMsg.Status === true && !modalCss) {\r\n      dispatch(updateCompanyIDSuccess({ Status: false }));\r\n      customAlert({\r\n                Type: 3,\r\n                Message: JSON.stringify(updateMsg.Message),\r\n            })\r\n    }\r\n  }, [updateMsg, modalCss]);\r\n\r\n  useEffect(() => {\r\n    if (pageField) {\r\n      const fieldArr = pageField.PageFieldMaster\r\n      comAddPageFieldFunc({ state, setState, fieldArr })\r\n    }\r\n  }, [pageField])\r\n\r\n  const CompanyGroupValues = CompanyGroup.map((Data) => ({\r\n    value: Data.id,\r\n    label: Data.Name\r\n  }));\r\n\r\n  const SaveHandler = async (event) => {\r\n    event.preventDefault();\r\n    const btnId = event.target.id\r\n    try {\r\n      if (formValid(state, setState)) {\r\n        btnIsDissablefunc({ btnId, state: true })\r\n\r\n        const jsonBody = JSON.stringify({\r\n          Name: values.Name,\r\n          Address: values.Address,\r\n          GSTIN: values.GSTIN,\r\n          PhoneNo: values.PhoneNo,\r\n          CompanyAbbreviation: values.CompanyAbbreviation,\r\n          EmailID: values.EmailID,\r\n          CompanyGroup: values.CompanyGroupName.value,\r\n          IsSCM: values.IsSCM,\r\n          CreatedBy: loginUserID(),\r\n          UpdatedBy: loginUserID(),\r\n        });\r\n        if (pageMode === mode.edit) {\r\n          dispatch(updateCompanyID({ jsonBody, updateId: values.id, btnId }));\r\n        }\r\n        else {\r\n          dispatch(saveCompany({ jsonBody, btnId }));\r\n        }\r\n      }\r\n    } catch (e) { btnIsDissablefunc({ btnId, state: false }) }\r\n  };\r\n\r\n  var IsEditMode_Css = ''\r\n  if ((modalCss) || (pageMode === mode.dropdownAdd)) { IsEditMode_Css = \"-5.5%\" };\r\n\r\n  if (!(userPageAccessState === '')) {\r\n    return (\r\n      <React.Fragment>\r\n        <MetaTags>{metaTagLabel(userPageAccessState)}</MetaTags>\r\n        <div className={\"page-content\"} style={{ marginTop: IsEditMode_Css }} >\r\n\r\n          <Container fluid>\r\n            <Row>\r\n              <Col lg={12}>\r\n                <Card className=\"text-black\" >\r\n                  <CardHeader className=\"card-header   text-black c_card_header\" >\r\n                    <h4 className=\"card-title text-black\">{userPageAccessState.PageDescription}</h4>\r\n                    <p className=\"card-title-desc text-black\">{userPageAccessState.PageDescriptionDetails}</p>\r\n                  </CardHeader>\r\n\r\n                  <CardBody>\r\n                    <form noValidate>\r\n                      <Card >\r\n                        <CardBody className=\"c_card_body\">\r\n\r\n                          <Row>\r\n                            <FormGroup className=\"mb-2 col col-sm-4 \">\r\n                              <Label htmlFor=\"validationCustom01\">{fieldLabel.Name} </Label>\r\n                              <Input\r\n                                name=\"Name\"\r\n                                id=\"txtName\"\r\n                                value={values.Name}\r\n                                type=\"text\"\r\n                                className={isError.Name.length > 0 ? \"is-invalid form-control\" : \"form-control\"}\r\n                                placeholder=\"Please Enter Name\"\r\n                                autoComplete='off'\r\n                                autoFocus={true}\r\n                                onChange={(event) => {\r\n                                  onChangeText({ event, state, setState })\r\n                                  dispatch(Breadcrumb_inputName(event.target.value))\r\n                                }}\r\n                              />\r\n                              {isError.Name.length > 0 && (\r\n                                <span className=\"invalid-feedback\">{isError.Name}</span>\r\n                              )}\r\n                            </FormGroup>\r\n\r\n                            <Col md=\"1\">  </Col>\r\n                            <FormGroup className=\"mb-2 col col-sm-4 \">\r\n                              <Label htmlFor=\"validationCustom01\">{fieldLabel.Address} </Label>\r\n                              <Input\r\n                                name=\"Address\"\r\n                                value={values.Address}\r\n                                type=\"text\"\r\n                                className={isError.Address.length > 0 ? \"is-invalid form-control\" : \"form-control\"}\r\n                                placeholder=\"Please Enter Address\"\r\n                                autoComplete='off'\r\n                                onChange={(event) => onChangeText({ event, state, setState })}\r\n                              />\r\n                              {isError.Address.length > 0 && (\r\n                                <span className=\"invalid-feedback\">{isError.Address}</span>\r\n                              )}\r\n                            </FormGroup>\r\n                          </Row>\r\n\r\n                          <Row className=\"mb-1\">\r\n                            <FormGroup className=\" col col-sm-4 \">\r\n                              <Label htmlFor=\"validationCustom01\">{fieldLabel.PhoneNo} </Label>\r\n                              <Input\r\n                                name=\"PhoneNo\"\r\n                                value={values.PhoneNo}\r\n                                type=\"text\"\r\n                                className={isError.PhoneNo.length > 0 ? \"is-invalid form-control\" : \"form-control\"}\r\n                                placeholder=\"Please Enter PhoneNo\"\r\n                                autoComplete='off'\r\n                                onChange={(event) => {\r\n                                  onChangeText({ event, state, setState })\r\n                                }}\r\n                              />\r\n                              {isError.PhoneNo.length > 0 && (\r\n                                <span className=\"invalid-feedback\">{isError.PhoneNo}</span>\r\n                              )}\r\n                            </FormGroup>\r\n\r\n                            <Col md=\"1\">  </Col>\r\n                            <FormGroup className=\" col col-sm-4 \">\r\n                              <Label htmlFor=\"validationCustom01\">{fieldLabel.EmailID} </Label>\r\n                              <Input\r\n                                name=\"EmailID\"\r\n                                value={values.EmailID}\r\n                                type=\"text\"\r\n                                className={isError.EmailID.length > 0 ? \"is-invalid form-control\" : \"form-control\"}\r\n                                placeholder=\"Please Enter EmailID\"\r\n                                autoComplete='off'\r\n                                onChange={(event) => {\r\n                                  onChangeText({ event, state, setState })\r\n                                }}\r\n                              />\r\n                              {isError.EmailID.length > 0 && (\r\n                                <span className=\"invalid-feedback\">{isError.EmailID}</span>\r\n                              )}\r\n                            </FormGroup>\r\n                          </Row>\r\n\r\n                        </CardBody>\r\n                      </Card>\r\n\r\n                      <Card className=\"mt-n2\">\r\n                        <CardBody className=\"c_card_body\">\r\n\r\n                          <Row>\r\n                            <FormGroup className=\"mb-1 col col-sm-4 \">\r\n                              <Label htmlFor=\"validationCustom01\">{fieldLabel.GSTIN} </Label>\r\n                              <Input\r\n                                name=\"GSTIN\"\r\n                                value={values.GSTIN}\r\n                                type=\"text\"\r\n                                className={isError.GSTIN.length > 0 ? \"is-invalid form-control\" : \"form-control\"}\r\n                                placeholder=\"Please Enter GSTIN\"\r\n                                autoComplete='off'\r\n                                onChange={(event) => {\r\n                                  onChangeText({ event, state, setState })\r\n                                }}\r\n                              />\r\n                              {isError.GSTIN.length > 0 && (\r\n                                <span className=\"invalid-feedback\">{isError.GSTIN}</span>\r\n                              )}\r\n                            </FormGroup>\r\n\r\n                            <Col md=\"1\">  </Col>\r\n                            <FormGroup className=\"mb-2 col col-sm-4 \">\r\n                              <Label htmlFor=\"validationCustom01\">{fieldLabel.CompanyAbbreviation} </Label>\r\n                              <Input\r\n                                name=\"CompanyAbbreviation\"\r\n                                value={values.CompanyAbbreviation}\r\n                                type=\"text\"\r\n                                className={isError.CompanyAbbreviation.length > 0 ? \"is-invalid form-control\" : \"form-control\"}\r\n                                placeholder=\"Please Enter CompanyAbbreviation\"\r\n                                autoComplete='off'\r\n                                onChange={(event) => {\r\n                                  onChangeText({ event, state, setState })\r\n                                }}\r\n                              />\r\n                              {isError.CompanyAbbreviation.length > 0 && (\r\n                                <span className=\"invalid-feedback\">{isError.CompanyAbbreviation}</span>\r\n                              )}\r\n                            </FormGroup>\r\n                          </Row>\r\n\r\n                          <Row className=\" mb-3\">\r\n                            <Col md=\"4\">\r\n                              <FormGroup className=\"mb-2 \">\r\n                                <Label htmlFor=\"validationCustom01\"> {fieldLabel.CompanyGroupName} </Label>\r\n                                <Select\r\n                                  name=\"CompanyGroupName\"\r\n                                  value={values.CompanyGroupName}\r\n                                  className=\"react-dropdown\"\r\n                                  classNamePrefix=\"dropdown\"\r\n                                  options={CompanyGroupValues}\r\n                                  onChange={(hasSelect, evn) => onChangeSelect({ hasSelect, evn, state, setState })}\r\n                                />\r\n                                {isError.CompanyGroupName.length > 0 && (\r\n                                  <span className=\"text-danger f-8\"><small>{isError.CompanyGroupName}</small></span>\r\n                                )}\r\n                              </FormGroup>\r\n                            </Col>\r\n\r\n                            <Col md=\"1\">  </Col>\r\n                            <FormGroup className=\"mb-2 col col-sm-3 mt-4\">\r\n                              <Row className=\"justify-content-md-left\">\r\n                                <Label className=\"col-sm-4 col-form-label\" >{fieldLabel.IsSCM}</Label>\r\n                                <Col md={1} style={{ marginTop: '9px', }} >\r\n\r\n                                  <div className=\"form-check form-switch form-switch-md mb-3\" >\r\n                                    <Input type=\"checkbox\" className=\"form-check-input\"\r\n                                      checked={values.IsSCM}\r\n                                      name=\"IsSCM\"\r\n                                      onChange={(e) => {\r\n                                        setState((i) => {\r\n                                          const a = { ...i }\r\n                                          a.values.IsSCM = e.target.checked;\r\n                                          return a\r\n                                        })\r\n                                      }}\r\n                                    />\r\n                                  </div>\r\n                                </Col>\r\n                              </Row>\r\n                            </FormGroup>\r\n                          </Row>\r\n\r\n                          <FormGroup className=\"mt-2\">\r\n                            <Row >\r\n                              <Col sm={2}>\r\n                                <SaveButton\r\n                                  loading={saveBtnloading}\r\n                                  onClick={SaveHandler}\r\n                                  pageMode={pageMode}\r\n                                  userAcc={userPageAccessState}\r\n                                  editCreatedBy={editCreatedBy}\r\n                                  module={\"Company\"}\r\n                                />\r\n                              </Col>\r\n                            </Row>\r\n                          </FormGroup >\r\n                        </CardBody>\r\n                      </Card>\r\n                    </form>\r\n                  </CardBody>\r\n                </Card>\r\n              </Col >\r\n            </Row >\r\n          </Container >\r\n        </div >\r\n      </React.Fragment >\r\n    );\r\n  }\r\n  else {\r\n    return (\r\n      <React.Fragment></React.Fragment>\r\n    )\r\n  }\r\n};\r\nexport default CompanyModule;\r\n\r\n\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\Page-Pages\\PageList.js",["2944"],"import React, { useEffect, } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  delete_PageListID_Action,\r\n  delete_PageListID_Success,\r\n  edit_PageListID_Action,\r\n  Get_pageListAction,\r\n  save_PageMaster_Success,\r\n  update_PageListId_Success,\r\n} from \"../../../store/Administrator/PageMasterRedux/actions\";\r\nimport HPageMaster from \"./PageMaster\";\r\nimport { commonPageFieldList, commonPageFieldListSuccess, } from \"../../../store/actions\";\r\nimport CommonListPage from \"../../../components/Common/CommonMasterListPage\";\r\nimport { PAGE } from \"../../../routes/route_url\";\r\nimport * as pageId from \"../../../routes/allPageID\"\r\nimport { PageLoadingSpinner } from \"../../../components/Common/CommonButton\"\r\n\r\nexport default function PageList() {\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const reducers = useSelector(\r\n    (state) => ({\r\n      loading: state.H_Pages.loading,\r\n      listBtnLoading: state.H_Pages.listBtnLoading,\r\n      tableList: state.H_Pages.HPagesListData,\r\n      editData: state.H_Pages.editData,\r\n      updateMsg: state.H_Pages.updateMessage,\r\n      deleteMsg: state.H_Pages.deleteModuleID,\r\n      postMsg: state.H_Pages.saveMessage,\r\n      userAccess: state.Login.RoleAccessUpdateData,\r\n      pageField: state.CommonPageFieldReducer.pageFieldList\r\n    })\r\n  );\r\n\r\n  const action = {\r\n    getList: Get_pageListAction,\r\n    editId: edit_PageListID_Action,\r\n    deleteId: delete_PageListID_Action,\r\n    postSucc: save_PageMaster_Success,\r\n    updateSucc: update_PageListId_Success,\r\n    deleteSucc: delete_PageListID_Success\r\n  }\r\n\r\n  // Featch Modules List data  First Rendering\r\n  useEffect(() => {\r\n    const page_Id = pageId.PAGE_lIST\r\n    dispatch(commonPageFieldListSuccess(null))\r\n    dispatch(commonPageFieldList(page_Id))\r\n    dispatch(Get_pageListAction());\r\n  }, []);\r\n\r\n  const { pageField, loading } = reducers;\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <PageLoadingSpinner isLoading={(loading || !pageField)} />\r\n      {\r\n\r\n        (pageField) &&\r\n        <CommonListPage\r\n          action={action}\r\n          reducers={reducers}\r\n          MasterModal={HPageMaster}\r\n          masterPath={PAGE}\r\n          ButtonMsgLable={\"Page\"}\r\n          deleteName={\"Name\"}\r\n        />\r\n\r\n      }\r\n\r\n    </React.Fragment>\r\n  )\r\n}","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\UserRegistrationPages\\UserRegistration.js",["2945","2946","2947","2948","2949","2950","2951","2952","2953"],"import React, { useState, useEffect } from \"react\";\r\nimport Select from \"react-select\";\r\nimport {\r\n  Card,\r\n  CardBody,\r\n  Col,\r\n  Container,\r\n  Row,\r\n  CardHeader,\r\n  Label,\r\n  FormGroup,\r\n  Input\r\n} from \"reactstrap\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  saveUserMasterAction,\r\n  userUpdateAction,\r\n  saveUserMasterActionSuccess,\r\n  GetUserPartiesForUserMastePage,\r\n  getEmployeeForUseRegistration,\r\n  userEditActionSuccess\r\n}\r\n  from \"../../../store/Administrator/UserRegistrationRedux/actions\";\r\nimport { Tbody, Thead } from \"react-super-responsive-table\";\r\nimport { Breadcrumb_inputName } from \"../../../store/Utilites/Breadcrumb/actions\";\r\nimport { MetaTags } from \"react-meta-tags\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { breadcrumbReturnFunc, btnIsDissablefunc, loginUserID, metaTagLabel } from \"../../../components/Common/CommonFunction\";\r\nimport * as mode from \"../../../routes/PageMode\"\r\nimport * as pageId from \"../../../routes/allPageID\"\r\nimport { SaveButton } from \"../../../components/Common/CommonButton\";\r\nimport { getRole } from \"../../../store/Administrator/RoleMasterRedux/action\";\r\nimport { customAlert } from \"../../../CustomAlert/ConfirmDialog\";\r\nimport { comAddPageFieldFunc, initialFiledFunc, onChangeSelect, onChangeText } from \"../../../components/Common/validationFunction\";\r\nimport { commonPageField, commonPageFieldSuccess } from \"../../../store/actions\";\r\nimport AddMaster from \"../EmployeePages/Drodown\";\r\nimport * as url from \"../../../routes/route_url\";\r\nimport AddEmployee from \"../EmployeePages/EmployeeMaster\";\r\n\r\nconst AddUser = (props) => {\r\n\r\n  // const formRef = useRef(null);\r\n  const dispatch = useDispatch();\r\n  const history = useHistory()\r\n\r\n  const fileds = {\r\n    id: \"\",\r\n    Name: \"\",\r\n    LoginName: '',\r\n    Password: '',\r\n    EmployeeName: '',\r\n    isActive: true,\r\n    isLoginUsingEmail: false,\r\n    isLoginUsingMobile: false,\r\n    isSendOTP: false,\r\n  }\r\n\r\n  const [state, setState] = useState(() => initialFiledFunc(fileds))\r\n  const [employeeMaster_AddAccess, setEmployeeMaster_AddAccess] = useState(false)\r\n\r\n  //SetState  Edit data Geting From Modules List component\r\n  const [modalCss, setModalCss] = useState(false);\r\n  const [pageMode, setPageMode] = useState(mode.defaultsave);\r\n  const [userPageAccessState, setUserAccState] = useState('');\r\n  const [editCreatedBy, seteditCreatedBy] = useState(\"\");\r\n\r\n\r\n  // M_Roles DropDown\r\n\r\n  const [password, setPassword] = useState('');\r\n  const [cPassword, setCPassword] = useState('');\r\n  const [showErrorMessage, setShowErrorMessage] = useState(false);\r\n  const [cPasswordClass, setCPasswordClass] = useState('form-control');\r\n  const [isCPassword, setisCPassword] = useState(false);\r\n\r\n  const handleCPassword = (event) => {\r\n    onChangeText({ event, state, setState });\r\n    setCPassword(event.target.value);\r\n    setisCPassword(true);\r\n  }\r\n\r\n  const {\r\n    postMsg,\r\n    employeelistForDropdown,\r\n    Roles=[],\r\n    employePartyWiseRoleState,\r\n    userAccess,\r\n    pageField,\r\n    saveBtnloading,\r\n  } = useSelector((state) => ({\r\n    saveBtnloading: state.User_Registration_Reducer.saveBtnloading,\r\n    postMsg:state.User_Registration_Reducer.postMsg,\r\n    employePartyWiseRoleState: state.User_Registration_Reducer.userPartiesForUserMaster,\r\n    employeelistForDropdown: state.User_Registration_Reducer.employeelistForDropdown,\r\n    Roles: state.RoleMaster_Reducer.roleList,\r\n    userAccess: state.Login.RoleAccessUpdateData,\r\n    pageField: state.CommonPageFieldReducer.pageField\r\n  }));\r\n\r\n  const values = { ...state.values }\r\n  const { isError } = state;\r\n  const { fieldLabel } = state;\r\n\r\n  const location = { ...history.location }\r\n  const hasShowloction = location.hasOwnProperty(mode.editValue)\r\n  const hasShowModal = props.hasOwnProperty(mode.editValue)\r\n\r\n  useEffect(() => {\r\n\r\n    dispatch(commonPageFieldSuccess(null));\r\n    dispatch(commonPageField(pageId.USER))\r\n    dispatch(getEmployeeForUseRegistration());\r\n    dispatch(getRole());\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (isCPassword) {\r\n      if (password === cPassword) {\r\n        setShowErrorMessage(false);\r\n        setCPasswordClass('form-control is-valid')\r\n      } else {\r\n        setShowErrorMessage(true)\r\n        setCPasswordClass('form-control is-invalid')\r\n      }\r\n    }\r\n  }, [cPassword])\r\n\r\n  // userAccess useEffect\r\n\r\n  useEffect(() => {\r\n\r\n    let userAcc = null;\r\n    let locationPath;\r\n\r\n    if (props.pageMode === mode.dropdownAdd) {\r\n      locationPath = props.masterPath;\r\n    } else {\r\n      locationPath = location.pathname;\r\n    }\r\n\r\n    if (hasShowModal) {\r\n      locationPath = props.masterPath;\r\n    };\r\n\r\n    userAcc = userAccess.find((index) => {\r\n      if (index.id === pageId.EMPLOYEE) {\r\n        setEmployeeMaster_AddAccess(true)\r\n      }\r\n      return (`/${index.ActualPagePath}` === locationPath)\r\n    })\r\n\r\n    if (userAcc) {\r\n      setUserAccState(userAcc);\r\n      if (!props.isdropdown) {\r\n        breadcrumbReturnFunc({ dispatch, userAcc });\r\n      }\r\n    };\r\n  }, [userAccess])\r\n\r\n  useEffect(() => {\r\n\r\n    if (pageField) {\r\n      const fieldArr = pageField.PageFieldMaster\r\n      comAddPageFieldFunc({ state, setState, fieldArr })\r\n    }\r\n  }, [pageField])\r\n\r\n  // This UseEffect 'SetEdit' data and 'autoFocus' while this Component load First Time.\r\n  useEffect(() => {\r\n\r\n    if ((hasShowloction || hasShowModal)) {\r\n\r\n      let hasEditVal = null\r\n      if (hasShowloction) {\r\n        setPageMode(location.pageMode)\r\n        hasEditVal = location.editValue\r\n\r\n      }\r\n      else if (hasShowModal) {\r\n        hasEditVal = props.editValue\r\n        setPageMode(props.pageMode)\r\n        setModalCss(true)\r\n      }\r\n\r\n      if (hasEditVal) {\r\n        const { id, LoginName, AdminPassword, CreatedBy, EmployeeName, Employee, UserRole,\r\n          isLoginUsingMobile, isActive, isSendOTP, isLoginUsingEmail\r\n        } = hasEditVal\r\n        const { values, hasValid, } = { ...state }\r\n\r\n        values.id = id;\r\n        values.LoginName = LoginName;\r\n        values.Password = AdminPassword;\r\n        values.EmployeeName = { label: EmployeeName, value: Employee };\r\n        values.isActive = isActive;\r\n        values.isLoginUsingEmail = isLoginUsingEmail;\r\n        values.isLoginUsingMobile = isLoginUsingMobile;\r\n        values.isSendOTP = isSendOTP;\r\n\r\n        hasValid.id.valid = true;\r\n        hasValid.LoginName.valid = true;\r\n        hasValid.Password.valid = true;\r\n        hasValid.EmployeeName.valid = true;\r\n        hasValid.isActive.valid = true;\r\n        hasValid.isLoginUsingEmail.valid = true;\r\n        hasValid.isLoginUsingMobile.valid = true;\r\n        hasValid.isSendOTP.valid = true;\r\n\r\n        dispatch(Breadcrumb_inputName(LoginName))\r\n        dispatch(GetUserPartiesForUserMastePage({ id: Employee, editRole: UserRole }))\r\n\r\n        seteditCreatedBy(CreatedBy)\r\n\r\n        dispatch(userEditActionSuccess({ Status: false }))\r\n      }\r\n    }\r\n  }, [])\r\n\r\n  useEffect(async () => {\r\n\r\n    if ((postMsg.Status === true) && (postMsg.StatusCode === 200) && !(pageMode === mode.dropdownAdd)) {\r\n      dispatch(saveUserMasterActionSuccess({ Status: false }))\r\n\r\n      if (pageMode === mode.dropdownAdd) {\r\n        customAlert({\r\n          Type: 1,\r\n          Message: postMsg.Message,\r\n      })\r\n      }\r\n      else {\r\n        let isPermission = await customAlert({\r\n          Type: 1,\r\n          Status: true,\r\n          Message: postMsg.Message,\r\n      })\r\n      if (isPermission) {\r\n          history.push({ pathname: url.USER_lIST })\r\n      }\r\n      }\r\n    }\r\n\r\n    else if ((postMsg.Status === true) && !(pageMode === mode.dropdownAdd)) {\r\n      dispatch(saveUserMasterActionSuccess({ Status: false }))\r\n      customAlert({\r\n        Type: 4,\r\n         Message: JSON.stringify(postMsg.Message),\r\n    })\r\n    }\r\n  }, [postMsg.Status])\r\n\r\n  const EmployeeOptions = employeelistForDropdown.map((Data) => ({\r\n    value: Data.id,\r\n    label: Data.Name\r\n  }));\r\n\r\n  const RolesValues = Roles.map((Data) => ({\r\n    value: Data.id,\r\n    label: Data.Name\r\n  }));\r\n  \r\n  function handllerEmployeeID(e) {\r\n    dispatch(GetUserPartiesForUserMastePage({ id: e.value }))\r\n  }\r\n\r\n  /// Role dopdown\r\n  function RoleDropDown_select_handler(event, pty, key) {\r\n    employePartyWiseRoleState.forEach((index, key1) => {\r\n      if (key === key1) {\r\n        index.PartyRoles = event\r\n      }\r\n    })\r\n  };\r\n\r\n  const saveHandler = (event) => {\r\n    event.preventDefault();\r\n    const btnId = event.target.id;\r\n    btnIsDissablefunc({ btnId: btnId, state: true })\r\n    try {\r\n\r\n      const userRoleArr = []\r\n      employePartyWiseRoleState.map(i1 => {\r\n\r\n        i1.PartyRoles.map(i2 => {\r\n          userRoleArr.push({\r\n            Party: i1.Party,\r\n            Role: i2.value\r\n          })\r\n        })\r\n      })\r\n      if (userRoleArr.length <= 0) {\r\n        customAlert({\r\n          Type: 4,\r\n          Message: \"At Least One Role  Add in the Table\",\r\n        })\r\n        return btnIsDissablefunc({ btnId: btnId, state: false })\r\n      }\r\n      const jsonBody = JSON.stringify({\r\n        LoginName: values.LoginName,\r\n        password: values.Password,\r\n        AdminPassword: values.Password,\r\n        Employee: values.EmployeeName.value,\r\n        isActive: values.isActive,\r\n        isSendOTP: values.isSendOTP,\r\n        isLoginUsingMobile: values.isLoginUsingMobile,\r\n        isLoginUsingEmail: values.isLoginUsingEmail,\r\n        CreatedBy: loginUserID(),\r\n        UpdatedBy: loginUserID(),\r\n        UserRole: userRoleArr\r\n      })\r\n\r\n      if (pageMode === mode.edit) {\r\n        dispatch(userUpdateAction({ jsonBody, updateId: values.id, btnId }));\r\n      }\r\n      else {\r\n        dispatch(saveUserMasterAction({ jsonBody, btnId }));\r\n      }\r\n    } catch (error) { btnIsDissablefunc({ btnId: btnId, state: false }) }\r\n  }\r\n\r\n  const PartyWiseRoleTable = () => {\r\n\r\n    if (values.EmployeeName === '') {\r\n      return null\r\n    }\r\n    if (!(employePartyWiseRoleState.length === 0)) {\r\n      if ((employePartyWiseRoleState[0].Party > 0)) {\r\n        return (\r\n          <div className=\"col col-6\" style={{ marginTop: '28px' }}>\r\n            <table className=\"table table-bordered \">\r\n              <Thead >\r\n                <tr>\r\n                  <th>Party Name</th>\r\n                  <th>RoleName</th>\r\n                </tr>\r\n              </Thead>\r\n              <Tbody  >\r\n                {employePartyWiseRoleState.map((index, key) => (\r\n                  <tr key={index.Role}>\r\n                    <td className=\"col-sm-6\">\r\n                      {index.PartyName}\r\n                    </td>\r\n                    <td>\r\n                      <FormGroup className=\"\" >\r\n                        <Select\r\n                          defaultValue={index.PartyRoles}\r\n                          options={RolesValues}\r\n                          isMulti={true}\r\n                          className=\"basic-multi-select\"\r\n                          onChange={(event) => { RoleDropDown_select_handler(event, index, key) }}\r\n                          classNamePrefix=\"select2-selection\"\r\n                        />\r\n                      </FormGroup>\r\n                    </td>\r\n                  </tr>\r\n                ))}\r\n              </Tbody>\r\n            </table>\r\n          </div>\r\n        )\r\n      }\r\n      else {\r\n        return <div className=\"col-lg-3 col-md-6\">\r\n          <div className=\"mb-3\">\r\n            <Label className=\"form-label font-size-13 \">Role name</Label>\r\n            <Select\r\n              defaultValue={employePartyWiseRoleState[0].PartyRoles}\r\n              options={RolesValues}\r\n              isMulti={true}\r\n              className=\"basic-multi-select\"\r\n              onChange={(event) => { RoleDropDown_select_handler(event, employePartyWiseRoleState[0], 0) }}\r\n              classNamePrefix=\"select2-selection\"\r\n            />\r\n          </div>\r\n        </div>\r\n      }\r\n    }\r\n    return null\r\n  }\r\n\r\n  // IsEditMode_Css is use of module Edit_mode (reduce page-content marging)\r\n  var IsEditMode_Css = ''\r\n  if (modalCss || (pageMode === mode.dropdownAdd)) { IsEditMode_Css = \"-5.5%\" };\r\n\r\n  if (!(userPageAccessState === '')) {\r\n    return (\r\n      <React.Fragment>\r\n        <MetaTags>{metaTagLabel(userPageAccessState)}</MetaTags>\r\n        {/* <BreadcrumbNew userAccess={userAccess} pageId={pageId.USER} /> */}\r\n\r\n        <div className=\"page-content\" style={{ marginTop: IsEditMode_Css }}>\r\n          <Container fluid>\r\n            <div >\r\n              <Row>\r\n                <Col lg={12}>\r\n                  <Card className=\"text-black\" >\r\n                    <CardHeader className=\"card-header   text-black c_card_header\" >\r\n                      <h4 className=\"card-title text-black\">{userPageAccessState.PageDescription}</h4>\r\n                      <p className=\"card-title-desc text-black\">{userPageAccessState.PageDescriptionDetails}</p>\r\n                    </CardHeader>\r\n                    <CardBody className=\"text-black\">\r\n                      <form>\r\n                        <Card className=\" text-black\">\r\n                          <CardBody className=\"c_card_body\">\r\n                            <Row>\r\n\r\n                              <FormGroup className=\"mb-2 col col-sm-4 \">\r\n                                <Label htmlFor=\"validationCustom01\"> {fieldLabel.EmployeeName} </Label>\r\n                                <Col sm={12}>\r\n                                  <Select\r\n                                    id=\"EmployeeName \"\r\n                                    name=\"EmployeeName\"\r\n                                    isDisabled={pageMode === mode.edit ? true : false}\r\n                                    value={values.EmployeeName}\r\n                                    options={EmployeeOptions}\r\n                                    autoFocus={true}\r\n                                    onChange={(hasSelect, evn) => {\r\n                                      handllerEmployeeID(hasSelect)\r\n                                      onChangeSelect({ hasSelect, evn, state, setState, })\r\n                                    }}\r\n                                  />\r\n                                  {isError.EmployeeName.length > 0 && (\r\n                                    <span className=\"invalid-feedback\">{isError.EmployeeName}</span>\r\n                                  )}\r\n                                </Col>\r\n                              </FormGroup>\r\n\r\n                              {\r\n                                (employeeMaster_AddAccess) && <Col md=\"1\" className=\" mt-3\">\r\n                                  <AddMaster\r\n                                    masterModal={AddEmployee}\r\n                                    masterPath={url.EMPLOYEE}\r\n                                  />\r\n                                </Col>\r\n                              }\r\n\r\n                            </Row>\r\n\r\n                            <Row>\r\n                              <FormGroup className=\"mb-2 col col-sm-4 \">\r\n                                <Label htmlFor=\"validationCustom01\">{fieldLabel.LoginName}</Label>\r\n                                <Input\r\n                                  name=\"LoginName\"\r\n                                  id=\"txtName\"\r\n                                  type=\"text\"\r\n                                  placeholder=\"Please Enter Login Name\"\r\n                                  value={values.LoginName}\r\n                                  disabled={pageMode === mode.edit ? true : false}\r\n                                  autoComplete='off'\r\n                                  onChange={(event) => {\r\n                                    onChangeText({ event, state, setState });\r\n                                    dispatch(Breadcrumb_inputName(event.target.value))\r\n                                  }}\r\n                                />\r\n                                {isError.LoginName.length > 0 && (\r\n                                  <span className=\"text-danger f-8\"><small>{isError.LoginName}</small></span>\r\n                                )}\r\n                              </FormGroup>\r\n                            </Row>\r\n\r\n                            <Row>\r\n                              <FormGroup className=\"mb-2 col col-sm-4 \">\r\n                                <Label htmlFor=\"validationCustom01\">Password</Label>\r\n                                <Input name=\"password\" id=\"password\"\r\n                                  type=\"password\"\r\n                                  placeholder=\"Please Enter Password\"\r\n                                  autoComplete=\"new-password\"\r\n                                  className=\"form-control\"\r\n                                  value={password}\r\n                                  onChange={(e) => { setPassword(e.target.value) }} />\r\n                              </FormGroup>\r\n                            </Row>\r\n\r\n                            <Row>\r\n                              <FormGroup className=\"mb-2 col col-sm-4 \">\r\n                                <Label htmlFor=\"validationCustom01\">Confirm Password</Label>\r\n                                <Input\r\n                                  name=\"Password\" id=\"password\"\r\n                                  type=\"password\"\r\n                                  placeholder=\"Please Enter Password\"\r\n                                  autoComplete=\"new-password\"\r\n                                  className={cPasswordClass}\r\n                                  value={cPassword}\r\n                                  onChange={handleCPassword} />\r\n                                {showErrorMessage && isCPassword ? <div> Passwords did not match </div> : ''}\r\n                              </FormGroup>\r\n                            </Row>\r\n\r\n                            <Row className=\"mt-2\">\r\n                              <FormGroup className=\"mb-1 col col-sm-12 \" >\r\n                                <Row className=\"justify-content-md-left\">\r\n                                  <Label htmlFor=\"horizontal-firstname-input\" className=\" col-sm-2 col-form-label\" >{fieldLabel.isLoginUsingMobile}</Label>\r\n                                  <Col md=\"1\" style={{ marginTop: '9px' }} >\r\n                                    <div className=\"form-check form-switch form-switch-md ml-4 \" dir=\"ltr\">\r\n                                      <Input type=\"checkbox\" className=\"form-check-input\"\r\n                                        checked={values.isLoginUsingMobile}\r\n                                        name=\"isLoginUsingMobile\"\r\n                                        onChange={(event) => {\r\n                                          setState((i) => {\r\n                                            const a = { ...i }\r\n                                            a.values.isLoginUsingMobile = event.target.checked\r\n                                            return a\r\n                                          })\r\n                                        }}\r\n                                      />\r\n                                      <label className=\"form-check-label\" htmlFor=\"customSwitchsizemd\"></label>\r\n                                    </div>\r\n                                  </Col>\r\n\r\n                                  <Col md=\"2\" >  </Col>\r\n                                  <Label htmlFor=\"horizontal-firstname-input\" className=\"col-sm-1 col-form-label \" >{fieldLabel.isActive} </Label>\r\n                                  <Col md=\"1\" style={{ marginTop: '9px' }} >\r\n                                    <div className=\"form-check form-switch form-switch-md \" dir=\"ltr\">\r\n                                      <Input type=\"checkbox\" className=\"form-check-input\"\r\n                                        checked={values.isActive}\r\n                                        defaultChecked={true}\r\n                                        name=\"isActive\"\r\n                                        onChange={(event) => {\r\n                                          setState((i) => {\r\n                                            const a = { ...i }\r\n                                            a.values.isActive = event.target.checked\r\n                                            return a\r\n                                          })\r\n                                        }}\r\n                                      />\r\n                                      <label className=\"form-check-label\" htmlFor=\"customSwitchsizemd\"></label>\r\n                                    </div>\r\n                                  </Col>\r\n                                </Row>\r\n                              </FormGroup>\r\n                            </Row>\r\n\r\n                            <Row >\r\n                              <FormGroup className=\"col col-sm-12  \" >\r\n                                <Row className=\"justify-content-md-left\">\r\n                                  <Label htmlFor=\"horizontal-firstname-input\" className=\"col-sm-2 col-form-label\" >{fieldLabel.isLoginUsingEmail}</Label>\r\n                                  <Col md={1} style={{ marginTop: '10px' }} >\r\n                                    <div className=\"form-check form-switch form-switch-md\" dir=\"ltr\">\r\n                                      <Input type=\"checkbox\" className=\"form-check-input\"\r\n                                        checked={values.isLoginUsingEmail}\r\n                                        name=\"isLoginUsingEmail\"\r\n                                        onChange={(event) => {\r\n                                          setState((i) => {\r\n                                            const a = { ...i }\r\n                                            a.values.isLoginUsingEmail = event.target.checked\r\n                                            return a\r\n                                          })\r\n                                        }}\r\n                                      />\r\n                                      <label className=\"form-check-label\" htmlFor=\"customSwitchsizemd\"></label>\r\n                                    </div>\r\n                                  </Col>\r\n\r\n                                  <Col md=\"2\" >  </Col>\r\n                                  <Label htmlFor=\"horizontal-firstname-input\" className=\"col-sm-1 col-form-label \" >{fieldLabel.isSendOTP}</Label>\r\n                                  <Col md={1} style={{ marginTop: '10px' }} >\r\n                                    <div className=\"form-check form-switch form-switch-md\" dir=\"ltr\">\r\n                                      <Input type=\"checkbox\" className=\"form-check-input\"\r\n                                        checked={values.isSendOTP}\r\n                                        name=\"isSendOTP\"\r\n                                        onChange={(event) => {\r\n                                          setState((i) => {\r\n                                            const a = { ...i }\r\n                                            a.values.isSendOTP = event.target.checked\r\n                                            return a\r\n                                          })\r\n\r\n                                        }}\r\n                                      />\r\n                                      <label className=\"form-check-label\" htmlFor=\"customSwitchsizemd\"></label>\r\n                                    </div>\r\n                                  </Col>\r\n                                </Row>\r\n                              </FormGroup>\r\n                            </Row>\r\n\r\n\r\n                          </CardBody>\r\n                        </Card>\r\n\r\n                        < Card className=\"mt-n2\">\r\n                          <CardBody style={{ backgroundColor: \"whitesmoke\" }}>\r\n                            <Row >\r\n                              <PartyWiseRoleTable />\r\n                              <Row>\r\n                                <Col sm={2}>\r\n                                  <div>\r\n                                    <SaveButton\r\n                                      pageMode={pageMode}\r\n                                      loading={saveBtnloading}\r\n                                      onClick={saveHandler}\r\n                                      userAcc={userPageAccessState}\r\n                                      editCreatedBy={editCreatedBy}\r\n                                      module={\"User\"}\r\n                                    />\r\n\r\n                                  </div>\r\n                                </Col>\r\n                              </Row>\r\n                            </Row>\r\n                          </CardBody>\r\n                        </Card>\r\n\r\n                      </form>\r\n                    </CardBody>\r\n                    <br></br>\r\n                    <br></br>\r\n                    <br></br>\r\n                    <br></br>\r\n                    <br></br>\r\n                  </Card>\r\n                </Col>\r\n              </Row>\r\n            </div>\r\n          </Container>\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n  else {\r\n    return (\r\n      <React.Fragment></React.Fragment>\r\n    )\r\n  }\r\n};\r\nexport default AddUser;\r\n\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\Page-Pages\\PageMaster.js",["2954","2955","2956","2957","2958","2959","2960","2961","2962","2963","2964","2965"],"import React, { useEffect, useMemo, useState } from \"react\";\r\nimport {\r\n  Card,\r\n  CardBody,\r\n  CardHeader,\r\n  Col,\r\n  Container,\r\n  FormGroup,\r\n  Input,\r\n  Label,\r\n  Nav,\r\n  NavItem,\r\n  NavLink,\r\n  Row,\r\n  TabContent,\r\n  TabPane,\r\n} from \"reactstrap\";\r\nimport MetaTags from \"react-meta-tags\"\r\nimport Select from \"react-select\";\r\nimport classnames from \"classnames\";\r\nimport { AvField, AvForm, AvInput } from \"availity-reactstrap-validation\";\r\nimport {\r\n  Breadcrumb_inputName,\r\n  edit_PageListID_Success,\r\n  getModuleList,\r\n  getPageAccess_DropDown_API,\r\n  RelatedPageListDropdownAction,\r\n  RelatedPageListDropdownSuccess,\r\n  saveModuleMasterSuccess,\r\n  save_PageMaster_Action,\r\n  save_PageMaster_Success,\r\n  update_PageListId_Action,\r\n  update_PageListId_Success,\r\n  getPageType,\r\n  getFieldValidationsForALLType,\r\n  getControlTypes,\r\n} from \"../../../store/actions\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { PAGE_lIST } from \"../../../routes/route_url\";\r\nimport { breadcrumbReturnFunc, loginUserID, metaTagLabel } from \"../../../components/Common/CommonFunction\";\r\nimport PageFieldMaster_Tab from \"./PageFieldMaster\";\r\nimport * as mode from \"../../../routes/PageMode\"\r\nimport * as pageId from \"../../../routes/allPageID\"\r\nimport { SaveButton } from \"../../../components/Common/CommonButton\";\r\nimport AddMaster from \"../EmployeePages/Drodown\";\r\nimport Modules from \"../ModulesPages/Modules\";\r\nimport * as url from \"../../../routes/route_url\";\r\nimport { customAlert } from \"../../../CustomAlert/ConfirmDialog\";\r\n\r\nconst PageMaster = (props) => {\r\n  const dispatch = useDispatch();\r\n  const history = useHistory()\r\n\r\n  const [EditData, setEditData] = useState([]);\r\n  const [modalCss, setModalCss] = useState(false);\r\n  const [pageMode, setPageMode] = useState(mode.defaultsave);\r\n  const [userPageAccessState, setUserAccState] = useState('');\r\n\r\n  const [customActiveTab, setcustomActiveTab] = useState(\"1\");\r\n  const [relatedPageListShowUI, setRelatedPageListShowUI] = useState(false);\r\n  const [module_DropdownSelect, setModule_DropdownSelect] = useState(\"\");\r\n  const [pageType_DropdownSelect, setPageType_DropdownSelect] = useState(\"\");\r\n  const [relatedPage_DropdownSelect, setrelatedPage_DropdownSelect] = useState(\"\");\r\n  const [pageAccessDropDownView, setPageAccessDropDownView] = useState(false);\r\n  const [modal_center, setmodal_center] = useState(false);\r\n  const [pageAccessData, setPageAccessData] = useState([]);\r\n  const [editCreatedBy, seteditCreatedBy] = useState(\"\");\r\n  const [moduleMaster_AddAccess, setModuleMaster_AddAccess] = useState(false)\r\n\r\n  const [pageFieldTabTable, setPageFieldTabTable] = useState([{\r\n    ControlID: '',\r\n    FieldLabel: '',\r\n    ControlType: { label: \"select...\", value: 0 },\r\n    FieldValidation: { label: \"select...\", value: 0 },\r\n    InValidMsg: '',\r\n    ListPageSeq: '',\r\n    IsCompulsory: false,\r\n    DefaultSort: 0,\r\n    FieldSequence: false,\r\n    ShowInListPage: false,\r\n    ShowInDownload: false,\r\n    DownloadDefaultSelect: false,\r\n  }]);\r\n\r\n  const {\r\n    postMsg,\r\n    updateMsg,\r\n    userAccess,\r\n    ModuleData,\r\n    PageAccess,\r\n    modulePostAPIResponse,\r\n    PageList,\r\n    PageType,\r\n    saveBtnloading,\r\n    fieldValidationsALLType\r\n  } = useSelector((state) => ({\r\n    postMsg: state.H_Pages.saveMessage,\r\n    updateMsg: state.H_Pages.updateMessage,\r\n    userAccess: state.Login.RoleAccessUpdateData,\r\n    ModuleData: state.Modules.modulesList,\r\n    PageAccess: state.H_Pages.PageAccess,\r\n    modulePostAPIResponse: state.Modules.modulesSubmitSuccesss,\r\n    PageList: state.H_Pages.PageList,\r\n    PageType: state.H_Pages.PageType,\r\n    saveBtnloading: state.H_Pages.saveBtnloading,\r\n    fieldValidationsALLType: state.H_Pages.fieldValidationsALLType,\r\n\r\n  }));\r\n\r\n  const location = { ...history.location }\r\n  const hasShowloction = location.hasOwnProperty(mode.editValue)\r\n  const hasShowModal = props.hasOwnProperty(mode.editValue)\r\n\r\n  // userAccess useEffect\r\n  useEffect(() => {\r\n\r\n    let userAcc = null;\r\n    let locationPath = location.pathname;\r\n\r\n    if (hasShowModal) {\r\n      locationPath = props.masterPath;\r\n    };\r\n\r\n    userAcc = userAccess.find((inx) => {\r\n      return (`/${inx.ActualPagePath}` === locationPath)\r\n    })\r\n\r\n    if (userAcc) {\r\n      setUserAccState(userAcc)\r\n      breadcrumbReturnFunc({ dispatch, userAcc });\r\n    };\r\n    userAccess.find((index) => {\r\n      if (index.id === pageId.MODULE) {\r\n        return setModuleMaster_AddAccess(true)\r\n      }\r\n    });\r\n  }, [userAccess])\r\n\r\n  useEffect(() => {\r\n    dispatch(getModuleList());\r\n    dispatch(getPageAccess_DropDown_API());\r\n    dispatch(getPageType());\r\n    dispatch(getControlTypes());\r\n    dispatch(getFieldValidationsForALLType())\r\n  }, [dispatch]);\r\n\r\n  // This UseEffect 'SetEdit' data and 'autoFocus' while this Component load First Time.\r\n  useEffect(() => {\r\n\r\n    if (((fieldValidationsALLType.length > 0) && (hasShowloction || hasShowModal))) {\r\n\r\n      let hasEditVal = null\r\n      if (hasShowloction) {\r\n        setPageMode(location.pageMode)\r\n        hasEditVal = location.editValue\r\n      }\r\n      else if (hasShowModal) {\r\n        hasEditVal = props.editValue\r\n        setPageMode(props.pageMode)\r\n      }\r\n\r\n      if (hasEditVal) {\r\n\r\n        let pageType_ID = hasEditVal.PageType;\r\n\r\n        setEditData(hasEditVal);\r\n\r\n        dispatch(Breadcrumb_inputName(hasEditVal.Name))\r\n        setPageAccessData(hasEditVal.PagePageAccess);\r\n        seteditCreatedBy(hasEditVal.CreatedBy);\r\n\r\n        setModule_DropdownSelect({\r\n          label: hasEditVal.ModuleName,\r\n          value: hasEditVal.Module,\r\n        });\r\n        if ((pageType_ID === 1)) {\r\n          setPageAccessDropDownView(false);\r\n          setPageType_DropdownSelect({\r\n            label: hasEditVal.PageTypeName,\r\n            value: hasEditVal.PageType,\r\n          });\r\n        }\r\n        if ((pageType_ID === 2) || ((pageType_ID === 3))) {\r\n          setPageAccessDropDownView(true);\r\n          setPageType_DropdownSelect({\r\n            label: hasEditVal.PageTypeName,\r\n            value: hasEditVal.PageType,\r\n          });\r\n        }\r\n        function validtionOptionAssing(controlType) {\r\n          let validationOptions = fieldValidationsALLType.find(item => item.type === controlType)?.data || []\r\n          return validationOptions.map(item => ({ value: item.id, label: item.Name }));\r\n        }\r\n\r\n        let PageFieldMaster = hasEditVal.PageFieldMaster.map((index) => {\r\n          return {\r\n            ControlType: {\r\n              label: index.ControlTypeName,\r\n              value: index.ControlType\r\n            },\r\n            FieldValidation: {\r\n              label: index.FieldValidationName,\r\n              value: index.FieldValidation\r\n            },\r\n            validationOptions: validtionOptionAssing(index.ControlType),\r\n            ControlID: index.ControlID,\r\n            FieldLabel: index.FieldLabel,\r\n            InValidMsg: index.InValidMsg,\r\n            IsCompulsory: index.IsCompulsory,\r\n            DefaultSort: index.DefaultSort,\r\n            ListPageSeq: index.ListPageSeq,\r\n            Alignment: index.Alignment,\r\n            ShowInListPage: index.ShowInListPage,\r\n            ShowInDownload: index.ShowInDownload,\r\n            DownloadDefaultSelect: index.ShownloadDefaultSelect\r\n          }\r\n        })\r\n        PageFieldMaster.sort((firstItem, secondItem) => firstItem.ListPageSeq - secondItem.ListPageSeq);\r\n\r\n        if (!(PageFieldMaster.length === 0) && (pageType_ID === 1) || (pageType_ID === 3)) {\r\n          setPageFieldTabTable(PageFieldMaster)\r\n        }\r\n        \r\n\r\n        let PageFieldList = hasEditVal.PageFieldList.map((index) => {\r\n          return {\r\n            ControlType: {\r\n              label: index.ControlTypeName,\r\n              value: index.ControlType\r\n            },\r\n            FieldValidation: {\r\n              label: index.FieldValidationName,\r\n              value: index.FieldValidation\r\n            },\r\n            validationOptions: validtionOptionAssing(index.ControlType),\r\n            ControlID: index.ControlID,\r\n            FieldLabel: index.FieldLabel,\r\n            InValidMsg: index.InValidMsg,\r\n            IsCompulsory: index.IsCompulsory,\r\n            DefaultSort: index.DefaultSort,\r\n            ListPageSeq: index.ListPageSeq,\r\n            Alignment: index.Alignment,\r\n            ShowInListPage: index.ShowInListPage,\r\n            ShowInDownload: index.ShowInDownload,\r\n            DownloadDefaultSelect: index.ShownloadDefaultSelect\r\n          }\r\n        })\r\n        PageFieldList.sort((firstItem, secondItem) => firstItem.ListPageSeq - secondItem.ListPageSeq);\r\n\r\n\r\n        if ((pageType_ID === 2)) {\r\n          setPageFieldTabTable(PageFieldList)\r\n        }\r\n\r\n        if (hasEditVal.PageType === 2) {\r\n          setRelatedPageListShowUI(true)\r\n        }\r\n        setrelatedPage_DropdownSelect({\r\n          value: hasEditVal.RelatedPageId,\r\n          label: hasEditVal.RelatedPageName,\r\n        });\r\n      }\r\n\r\n      dispatch(edit_PageListID_Success({ Status: false }));\r\n    }\r\n  }, [fieldValidationsALLType]);\r\n\r\n  const pageAccessval = useMemo(() => {\r\n    const arr = []\r\n    PageAccess.forEach(i => {\r\n      i[\"hascheck\"] = false;\r\n      pageAccessData.forEach(ele => {\r\n        if (ele.AccessName === i.Name) {\r\n          i.hascheck = true\r\n        }\r\n      })\r\n      arr.push(i)\r\n    })\r\n    return arr\r\n  }, [pageAccessData, PageAccess]);\r\n\r\n  // This UseEffect clear Form Data and when modules Save Successfully.\r\n  useEffect(async () => {\r\n    if (postMsg.Status === true && postMsg.StatusCode === 200) {\r\n      dispatch(save_PageMaster_Success({ Status: false }));\r\n      setModule_DropdownSelect(\"\");\r\n      setPageType_DropdownSelect(\"\");\r\n      setrelatedPage_DropdownSelect(\"\");\r\n\r\n      if (pageMode === \"true\") {\r\n        dispatch(\r\n          customAlert({\r\n            Type: 1,\r\n            Message: postMsg.Message,\r\n          })\r\n        );\r\n      } else {\r\n        let isPermission = await customAlert({\r\n          Type: 1,\r\n          Status: true,\r\n          Message: postMsg.Message,\r\n        })\r\n        if (isPermission) {\r\n          history.push({ pathname: url.PAGE_lIST })\r\n        }\r\n      }\r\n    } else if (postMsg.Status === true) {\r\n      dispatch(save_PageMaster_Success({ Status: false }));\r\n      customAlert({\r\n        Type: 4,\r\n        Message: JSON.stringify(postMsg.Message),\r\n      })\r\n    }\r\n  }, [postMsg]);\r\n\r\n  useEffect(() => {\r\n    if ((modulePostAPIResponse.Status === true) && (modulePostAPIResponse.StatusCode === 200)) {\r\n      dispatch(saveModuleMasterSuccess({ Status: false }))\r\n      dispatch(customAlert({\r\n        Type: 1,\r\n        Status: true,\r\n        Message: modulePostAPIResponse.Message,\r\n      }))\r\n      tog_center()\r\n    } else if (modulePostAPIResponse.Status === true) {\r\n      dispatch(saveModuleMasterSuccess({ Status: false }))\r\n      dispatch(customAlert({\r\n        Type: 4,\r\n        Status: true,\r\n        Message: JSON.stringify(modulePostAPIResponse.Message),\r\n        RedirectPath: false,\r\n        AfterResponseAction: false\r\n      }));\r\n    }\r\n\r\n  }, [modulePostAPIResponse])\r\n\r\n  useEffect(() => {\r\n\r\n    if (updateMsg.Status === true && updateMsg.StatusCode === 200 && !modalCss) {\r\n      history.push({\r\n        pathname: PAGE_lIST,\r\n      })\r\n    } else if (updateMsg.Status === true && !modalCss) {\r\n      dispatch(update_PageListId_Success({ Status: false }));\r\n      customAlert({\r\n        Type: 3,\r\n        Message: JSON.stringify(updateMsg.Message),\r\n      })\r\n    }\r\n  }, [updateMsg, modalCss]);\r\n\r\n  const Module_DropdownOption = ModuleData.map((d) => ({\r\n    value: d.id,\r\n    label: d.Name,\r\n  }));\r\n\r\n  // PageList Dropdown\r\n  const PageList_DropdownOption = PageList.map((d) => ({\r\n    value: d.id,\r\n    label: d.Name,\r\n  }));\r\n\r\n  // PageType Dropdown\r\n  const PageType_DropdownOption = PageType.map((data) => ({\r\n    value: data.id,\r\n    label: data.Name,\r\n  }));\r\n\r\n  const toggleCustom = (tab) => {\r\n    if (customActiveTab !== tab) {\r\n      setcustomActiveTab(tab);\r\n    }\r\n  };\r\n\r\n  const SaveHandler = (event, values) => {\r\n\r\n    event.preventDefault();\r\n    const btnId = event.target.id;\r\n\r\n    let Access = []\r\n    PageAccess.forEach((element, key) => {\r\n      if (element.hascheck) {\r\n        Access.push({ Access: element.id })\r\n      }\r\n    });\r\n    const PageFieldMaster = pageFieldTabTable.map((index) => ({\r\n      ControlID: index.ControlID,\r\n      FieldLabel: index.FieldLabel,\r\n      InValidMsg: index.InValidMsg,\r\n      IsCompulsory: index.IsCompulsory,\r\n      DefaultSort: index.DefaultSort,\r\n      ListPageSeq: index.ListPageSeq,\r\n      Alignment: index.Alignment,\r\n      ShowInListPage: index.ShowInListPage,\r\n      ShowInDownload: index.ShowInDownload,\r\n      ControlType: index.ControlType.value,\r\n      FieldValidation: index.FieldValidation.value,\r\n      DownloadDefaultSelect: index.DownloadDefaultSelect,\r\n    }))\r\n\r\n    if (\r\n      Access.length === 0 &&\r\n      (pageType_DropdownSelect.value === 2)\r\n    ) {\r\n      dispatch(\r\n        customAlert({\r\n          Type: 4,\r\n          Status: true,\r\n          Message: \"At Least One PageAccess is Select\",\r\n          RedirectPath: false,\r\n          PermissionAction: false,\r\n        })\r\n      );\r\n      return;\r\n    }\r\n\r\n    if ((pageType_DropdownSelect.value === 2) && (relatedPage_DropdownSelect === undefined)) {\r\n      dispatch(\r\n        customAlert({\r\n          Type: 4,\r\n          Status: true,\r\n          Message: \"Please Select Related Page ID\",\r\n          RedirectPath: false,\r\n          PermissionAction: false,\r\n        })\r\n      );\r\n      return;\r\n    }\r\n\r\n    const jsonBody = JSON.stringify({\r\n\r\n      Name: values.Name,\r\n      Module: module_DropdownSelect.value,\r\n      isActive: values.isActive,\r\n      DisplayIndex: values.displayIndex,\r\n      Icon: values.Icon,\r\n      CountLabel: values.CountLabel,\r\n      ShowCountLabel: values.ShowCountLabel,\r\n      ActualPagePath: values.pagePath,\r\n      PageType: pageType_DropdownSelect.value,\r\n      PageHeading: values.pageheading,\r\n      PageDescription: values.pagedescription,\r\n      PageDescriptionDetails: values.pageheadingdescription,\r\n      RelatedPageID: (pageType_DropdownSelect.value === 2) ? relatedPage_DropdownSelect.value : 0,\r\n      IsDivisionRequired: values.IsDivisionRequired,\r\n      IsEditPopuporComponent: values.IsEditPopuporComponent,\r\n      CreatedBy: loginUserID(),\r\n      UpdatedBy: loginUserID(),\r\n      PagePageAccess: Access,\r\n      PageFieldMaster: PageFieldMaster,\r\n    })\r\n\r\n    if ((pageType_DropdownSelect.value === 1) && (PageFieldMaster.length === 0)) {\r\n      {\r\n        dispatch(\r\n          customAlert({\r\n            Type: 4,\r\n            Status: true,\r\n            Message: \"PageFields is Required\",\r\n            RedirectPath: false,\r\n            PermissionAction: false,\r\n          })\r\n        );\r\n        return;\r\n      }\r\n    }\r\n\r\n    if (pageMode === mode.edit) {\r\n      dispatch(update_PageListId_Action({ jsonBody, updateId: EditData.id, btnId }));\r\n\r\n    } else {\r\n\r\n      dispatch(save_PageMaster_Action({ jsonBody, btnId }));\r\n\r\n    }\r\n  };\r\n\r\n  // for module dropdown\r\n  const Module_DropdownSelectHandller = (e) => {\r\n    setModule_DropdownSelect(e);\r\n  };\r\n\r\n  //  for PageType deropDown\r\n  const PageType_DropdownSelectHandller = (e) => {\r\n\r\n    if (e.value === 2) {\r\n      relatedPage_DropdownSelectHandller()\r\n      setRelatedPageListShowUI(true)\r\n      dispatch(RelatedPageListDropdownAction(e.value));\r\n      setPageAccessDropDownView(true);\r\n    }\r\n    else if (e.value === 1) {\r\n      setRelatedPageListShowUI(false)\r\n      setPageAccessDropDownView(false);\r\n      dispatch(RelatedPageListDropdownSuccess([]));\r\n      setrelatedPage_DropdownSelect({ value: 0 });\r\n    }\r\n    else if (e.value === 3) {\r\n      setRelatedPageListShowUI(false)\r\n\r\n      setPageAccessDropDownView(true);\r\n      dispatch(RelatedPageListDropdownSuccess([]));\r\n      // setrelatedPage_DropdownSelect({ value: 0 });\r\n    }\r\n    setPageType_DropdownSelect(e);\r\n  };\r\n\r\n  const relatedPage_DropdownSelectHandller = (e) => {\r\n    setrelatedPage_DropdownSelect(e);\r\n  };\r\n\r\n  function tog_center() {\r\n    setmodal_center(!modal_center)\r\n  }\r\n\r\n\r\n  // IsEditMode_Css is use of module Edit_mode (reduce page-content marging)\r\n  var IsEditMode_Css = ''\r\n  if ((modalCss) || (pageMode === mode.dropdownAdd)) { IsEditMode_Css = \"-5.5%\" };\r\n\r\n  if (!(userPageAccessState === '')) {\r\n    return (\r\n      <React.Fragment>\r\n        <div className=\"page-content\" style={{ marginTop: IsEditMode_Css }}>\r\n          <MetaTags>{metaTagLabel(userPageAccessState)}</MetaTags>\r\n          <Container fluid>\r\n            <AvForm\r\n              id=\"mainForm\"\r\n              name=\"mainForm\"\r\n              onValidSubmit={(e, v) => { SaveHandler(e, v); }}>\r\n\r\n              <Col lg={12}>\r\n                <Card className=\"text-black \" style={{ minHeight: \"100px\" }}>\r\n                  <CardHeader className=\"card-header   text-black c_card_header\" >\r\n                    <h4 className=\"card-title text-black\">{userPageAccessState.PageDescription}</h4>\r\n                    <p className=\"card-title-desc text-black\">{userPageAccessState.PageDescriptionDetails}</p>\r\n                  </CardHeader>\r\n                  <CardBody>\r\n                    <Nav tabs className=\"nav-tabs-custom nav-justified\">\r\n                      <NavItem>\r\n                        <NavLink\r\n                          style={{ cursor: \"pointer\" }}\r\n                          className={classnames({\r\n                            active: customActiveTab === \"1\",\r\n                          })}\r\n                          onClick={() => {\r\n                            toggleCustom(\"1\");\r\n                          }}\r\n                        >\r\n                          <span className=\"d-block d-sm-none\">\r\n                            <i className=\"fas fa-home\"></i>\r\n                          </span>\r\n                          <span className=\"d-none d-sm-block\">Page Master Details</span>\r\n                        </NavLink>\r\n                      </NavItem>\r\n                      {/* {!(pageType_DropdownSelect.value === 2) ? */}\r\n                      <NavItem>\r\n                        <NavLink\r\n                          style={{ cursor: \"pointer\" }}\r\n                          className={classnames({\r\n                            active: customActiveTab === \"2\",\r\n                          })}\r\n                          onClick={() => {\r\n                            toggleCustom(\"2\");\r\n                          }}\r\n                        >\r\n                          <span className=\"d-block d-sm-none\">\r\n                            <i className=\"far fa-user\"></i>\r\n                          </span>\r\n                          <span className=\"d-none d-sm-block\">Page Field</span>\r\n                        </NavLink>\r\n                      </NavItem>\r\n                      {/* : <></> */}\r\n                      {/* } */}\r\n\r\n                    </Nav>\r\n\r\n                    <TabContent\r\n                      activeTab={customActiveTab}\r\n                      className=\"p-3 text-muted\"\r\n                    >\r\n                      <TabPane tabId=\"1\">\r\n                        <Card className=\"text-black c_card_body\" >\r\n                          <CardBody >\r\n                            <Row >\r\n                              <Col md=\"3\">\r\n                                <FormGroup className=\"mb-3 \">\r\n                                  <Label>Name </Label>\r\n                                  <AvField\r\n                                    name=\"Name\"\r\n                                    id=\"txtName\"\r\n                                    value={EditData.Name}\r\n                                    type=\"text\"\r\n                                    autoFocus={true}\r\n                                    placeholder=\"Please Enter Name\"\r\n                                    autoComplete=\"off\"\r\n                                    validate={{\r\n                                      required: {\r\n                                        value: true,\r\n                                        errorMessage: \"Please Enter Name\",\r\n                                      },\r\n                                    }}\r\n                                    onChange={(e) => {\r\n                                      dispatch(Breadcrumb_inputName(e.target.value));\r\n                                    }}\r\n                                  />\r\n                                </FormGroup>\r\n                              </Col>\r\n\r\n                              <Col md=\"1\"> </Col>\r\n\r\n                              <Col md=\"7\">\r\n                                <FormGroup className=\"mb-3 \">\r\n                                  <Label>Page Description </Label>\r\n                                  <AvField\r\n                                    name=\"pagedescription\"\r\n                                    value={EditData.PageDescription}\r\n                                    type=\"text\"\r\n                                    placeholder=\"Please Enter Page Description\"\r\n                                    autoComplete=\"off\"\r\n                                    validate={{\r\n                                      required: {\r\n                                        value: true,\r\n                                        errorMessage: \"Please Enter Page Description\",\r\n                                      },\r\n                                    }}\r\n                                  />\r\n                                </FormGroup>\r\n                              </Col>\r\n                            </Row>\r\n\r\n                            <Row>\r\n                              <Col md=\"3\">\r\n                                <FormGroup className=\"mb-3\">\r\n                                  <Label>Page Heading</Label>\r\n                                  <AvField\r\n                                    name=\"pageheading\"\r\n                                    type=\"text\"\r\n                                    defaultValue=\"\"\r\n                                    value={EditData.PageHeading}\r\n                                    placeholder=\"Enter your Page Heading \"\r\n                                  />\r\n                                </FormGroup>\r\n                              </Col>\r\n\r\n                              <Col md=\"1\"> </Col>\r\n                              <Col md=\"7\">\r\n                                <FormGroup className=\"mb-3\">\r\n                                  <Label>Page Description Details</Label>\r\n                                  <AvField\r\n                                    name=\"pageheadingdescription\"\r\n                                    type=\"text\"\r\n                                    defaultValue=\"\"\r\n                                    value={EditData.PageDescriptionDetails}\r\n                                    placeholder=\"Enter your Description \"\r\n                                    validate={{\r\n                                      required: {\r\n                                        value: true,\r\n                                        errorMessage:\r\n                                          \"Please Enter Page Description Deails\",\r\n                                      },\r\n                                    }}\r\n                                  />\r\n                                </FormGroup>\r\n                              </Col>\r\n                            </Row>\r\n                          </CardBody>\r\n                        </Card>\r\n\r\n                        <Card className=\" mt-n2 text-black c_card_body\">\r\n                          <CardBody>\r\n                            <Row >\r\n                              <Col md=\"3\">\r\n                                <FormGroup className=\"mb-3 \">\r\n                                  <Label htmlFor=\"validationCustom01\">Module</Label>\r\n                                  <Select\r\n                                    value={module_DropdownSelect}\r\n                                    options={Module_DropdownOption}\r\n                                    autoComplete=\"off\"\r\n                                    onChange={(e) => {\r\n                                      Module_DropdownSelectHandller(e);\r\n                                    }}\r\n                                  />\r\n                                </FormGroup>\r\n                              </Col>\r\n                              {(moduleMaster_AddAccess) ?\r\n                                <Col md=\"1\" className=\" mt-3\">\r\n                                  <AddMaster\r\n                                    masterModal={Modules}\r\n                                    masterPath={url.MODULE}\r\n                                  />\r\n                                </Col>\r\n                                : <Col md=\"1\"> </Col>}\r\n\r\n\r\n                              <Col md=\"3\">\r\n                                <FormGroup className=\"mb-3\">\r\n                                  <Label htmlFor=\"validationCustom01\">Page Type</Label>\r\n                                  <Select\r\n                                    value={pageType_DropdownSelect}\r\n                                    options={PageType_DropdownOption}\r\n                                    autoComplete=\"off\"\r\n                                    onChange={(e) => {\r\n                                      PageType_DropdownSelectHandller(e);\r\n                                    }}\r\n                                  />\r\n                                </FormGroup>\r\n                              </Col>\r\n\r\n                              <Col md=\"1\"> </Col>\r\n                              {relatedPageListShowUI ?\r\n                                <Col md=\"3\">\r\n                                  <FormGroup className=\"mb-3\">\r\n                                    <Label htmlFor=\"validationCustom01\">\r\n                                      Related Page List\r\n                                    </Label>\r\n                                    <Select\r\n                                      value={relatedPage_DropdownSelect}\r\n                                      options={PageList_DropdownOption}\r\n                                      autoComplete=\"off\"\r\n                                      onChange={(e) => {\r\n                                        relatedPage_DropdownSelectHandller(e);\r\n                                      }}\r\n                                    />\r\n                                  </FormGroup>\r\n                                </Col> : null}\r\n                            </Row>\r\n\r\n                            <Row>\r\n                              <Col md=\"3\">\r\n                                <FormGroup>\r\n                                  <Label htmlFor=\"validationCustom01\">\r\n                                    Display Index\r\n                                  </Label>\r\n                                  <AvField\r\n                                    name=\"displayIndex\"\r\n                                    value={EditData.DisplayIndex}\r\n                                    type=\"text\"\r\n                                    autoComplete=\"off\"\r\n                                    placeholder=\" Please Enter Display Index\"\r\n                                    validate={{\r\n                                      number: true,\r\n                                      required: {\r\n                                        value: true,\r\n                                        errorMessage:\r\n                                          \"Please Enter Display Index \",\r\n                                      },\r\n                                      tel: {\r\n                                        pattern: /^\\d{1,8}$/,\r\n                                      },\r\n                                    }}\r\n                                  />\r\n                                </FormGroup>\r\n                              </Col>\r\n\r\n                              <Col md=\"1\"> </Col>\r\n                              <Col md=\"3\">\r\n                                <FormGroup className=\"mb-3\">\r\n                                  <Label htmlFor=\"validationCustom01\">Page Path</Label>\r\n                                  <AvField\r\n                                    name=\"pagePath\"\r\n                                    id=\"pagePathid\"\r\n                                    value={EditData.ActualPagePath}\r\n                                    type=\"text\"\r\n                                    placeholder=\"Please Enter Page Path\"\r\n                                    validate={{\r\n                                      required: {\r\n                                        value: true,\r\n                                        errorMessage: \"Please Enter Page Path\",\r\n                                      },\r\n                                    }}\r\n                                    autoComplete=\"off\"\r\n                                  />\r\n                                </FormGroup>\r\n                              </Col>\r\n\r\n                              <Col md=\"1\"> </Col>\r\n                              <Col md=\"3\">\r\n                                <FormGroup className=\"mb-3\">\r\n                                  <Label htmlFor=\"validationCustom01\">Icon</Label>\r\n                                  <AvField\r\n                                    name=\"Icon\"\r\n                                    value={EditData.Icon}\r\n                                    type=\"text\"\r\n                                    placeholder=\"Please Enter Icon\"\r\n                                    validate={{\r\n                                      required: {\r\n                                        value: true,\r\n                                        errorMessage: \"Please Enter Icon\",\r\n                                      },\r\n                                    }}\r\n                                    autoComplete=\"off\"\r\n                                  />\r\n                                </FormGroup>\r\n                              </Col>\r\n                            </Row>\r\n\r\n                            <Row>\r\n                              <Col md=\"3\">\r\n                                <FormGroup className=\"mb-3\">\r\n                                  <Label htmlFor=\"validationCustom01\"> Show Count Label</Label>\r\n                                  <AvField\r\n                                    name=\"ShowCountLabel\"\r\n                                    value={EditData.ShowCountLabel}\r\n                                    type=\"text\"\r\n                                    placeholder=\"Please Enter  Show Count Label\"\r\n                                    autoComplete=\"off\"\r\n                                  />\r\n                                </FormGroup>\r\n                              </Col>\r\n\r\n                              <FormGroup className=\"mb-1 col col-sm-4\">\r\n                                <Row className=\"justify-content-md-left\">\r\n                                  <Col md=\"3\"> </Col>\r\n                                  <Label\r\n                                    htmlFor=\"horizontal-firstname-input\"\r\n                                    className=\"col-sm-4 col-form-label mt-4\"\r\n                                  >\r\n                                    Count Label\r\n                                  </Label>\r\n                                  <Col md={5} style={{ marginTop: \"15px\" }}>\r\n                                    <div\r\n                                      className=\"form-check form-switch form-switch-md mb-1\"\r\n                                      dir=\"ltr\"\r\n                                    >\r\n                                      <AvInput\r\n                                        type=\"checkbox\"\r\n                                        className=\"form-check-input mt-4\"\r\n                                        id=\"customSwitchsizemd\"\r\n                                        defaultChecked={EditData.CountLabel}\r\n                                        name=\"CountLabel\"\r\n                                      />\r\n                                      <label\r\n                                        className=\"form-check-label\"\r\n                                        htmlFor=\"customSwitchsizemd\"\r\n                                      ></label>\r\n                                    </div>\r\n                                  </Col>\r\n                                </Row>\r\n                              </FormGroup>\r\n                            </Row>\r\n\r\n\r\n                            <Row Col sm=\"12\">\r\n                              <FormGroup className=\"mb-1 col col-sm-4\">\r\n                                <Row className=\"justify-content-md-left\">\r\n                                  <Label\r\n                                    htmlFor=\"horizontal-firstname-input\"\r\n                                    className=\"col-sm-3 col-form-label mt-4\"\r\n                                  >\r\n                                    Active{\" \"}\r\n                                  </Label>\r\n                                  <Col md={5} style={{ marginTop: \"15px\" }}>\r\n                                    <div\r\n                                      className=\"form-check form-switch form-switch-md mb-1\"\r\n                                      dir=\"ltr\"\r\n                                    >\r\n                                      <AvInput\r\n                                        type=\"checkbox\"\r\n                                        className=\"form-check-input mt-4\"\r\n                                        id=\"customSwitchsizemd\"\r\n                                        checked={EditData.isActive}\r\n                                        name=\"isActive\"\r\n                                        defaultChecked={true}\r\n                                      />\r\n                                      <label\r\n                                        className=\"form-check-label\"\r\n                                        htmlFor=\"customSwitchsizemd\"\r\n                                      ></label>\r\n                                    </div>\r\n                                  </Col>\r\n                                </Row>\r\n                              </FormGroup>\r\n\r\n                              <FormGroup className=\"mb-1 col col-sm-4\">\r\n                                <Row className=\"justify-content-md-left\">\r\n\r\n                                  <Label\r\n                                    htmlFor=\"horizontal-firstname-input\"\r\n                                    className=\"col-sm-4 col-form-label mt-4\"\r\n                                  >\r\n                                    Division Req*{\" \"}\r\n                                  </Label>\r\n                                  <Col md={5} style={{ marginTop: \"15px\" }}>\r\n                                    <div\r\n                                      className=\"form-check form-switch form-switch-md mb-1\"\r\n                                      dir=\"ltr\"\r\n                                    >\r\n                                      <AvInput\r\n                                        type=\"checkbox\"\r\n                                        className=\"form-check-input mt-4\"\r\n                                        id=\"customSwitchsizemd\"\r\n                                        defaultChecked={EditData.IsDivisionRequired}\r\n                                        name=\"IsDivisionRequired\"\r\n                                      />\r\n                                      <label\r\n                                        className=\"form-check-label\"\r\n                                        htmlFor=\"customSwitchsizemd\"\r\n                                      ></label>\r\n                                    </div>\r\n                                  </Col>\r\n                                </Row>\r\n                              </FormGroup>\r\n\r\n                              {(pageType_DropdownSelect.value === 2) || (pageType_DropdownSelect.value === 3) ?\r\n                                <FormGroup className=\"mb-1 col col-sm-4\">\r\n                                  <Row className=\"justify-content-md-left\">\r\n\r\n                                    <Label\r\n                                      htmlFor=\"horizontal-firstname-input\"\r\n                                      className=\"col-sm-4 col-form-label mt-4\"\r\n                                    >\r\n                                      EditMode show In Component\r\n                                    </Label>\r\n                                    <Col md={5} style={{ marginTop: \"15px\" }}>\r\n                                      <div\r\n                                        className=\"form-check form-switch form-switch-md mb-1\"\r\n                                        dir=\"ltr\"\r\n                                      >\r\n                                        <AvInput\r\n                                          type=\"checkbox\"\r\n                                          className=\"form-check-input mt-4\"\r\n                                          id=\"customSwitchsizemd\"\r\n                                          defaultChecked={EditData.IsEditPopuporComponent}\r\n                                          name=\"IsEditPopuporComponent\"\r\n                                        />\r\n                                        <label\r\n                                          className=\"form-check-label\"\r\n                                          htmlFor=\"customSwitchsizemd\"\r\n                                        ></label>\r\n                                      </div>\r\n                                    </Col>\r\n                                  </Row>\r\n                                </FormGroup>\r\n                                : null}\r\n\r\n                            </Row>\r\n\r\n                          </CardBody>\r\n\r\n                        </Card>\r\n\r\n                        {pageAccessDropDownView ? (\r\n\r\n                          <Card className=\" mt-n2\">\r\n                            <CardBody style={{ backgroundColor: \"whitesmoke\" }}>\r\n                              <h5 className=\"text-black \"> Page Access</h5><br></br>\r\n\r\n                              <Row className=\"row \">\r\n                                {pageAccessval.map((index, key) => {\r\n\r\n                                  return (\r\n                                    <Col className=\"col col-4 text-black\" >\r\n                                      <li>\r\n                                        <Row className=\"row \">\r\n                                          <Col className=\" col col-6 \">\r\n                                            <li>\r\n                                              <Label>{index.Name}</Label>\r\n                                            </li>\r\n                                          </Col>\r\n\r\n                                          <Col className=\" col col-6 \">\r\n                                            <Input\r\n                                              className=\"col col-2 text-black \"\r\n                                              type=\"checkbox\"\r\n                                              defaultChecked={index.hascheck}\r\n                                              onChange={e => {\r\n                                                pageAccessval[key].hascheck = e.target.checked\r\n                                              }}\r\n                                            />\r\n                                          </Col>\r\n                                        </Row>\r\n                                      </li>\r\n                                    </Col>\r\n                                  )\r\n                                })}\r\n                              </Row>\r\n                            </CardBody>\r\n                          </Card>\r\n                        ) : null}\r\n                      </TabPane>\r\n\r\n                      <TabPane tabId=\"2\">\r\n                        <PageFieldMaster_Tab\r\n                          pageFieldTabTable={pageFieldTabTable}\r\n                          setPageFieldTabTable={setPageFieldTabTable} >\r\n                        </PageFieldMaster_Tab>\r\n                      </TabPane>\r\n\r\n                    </TabContent>\r\n                   \r\n                  </CardBody>\r\n                  <div style={{ paddingLeft: \"30px\", paddingBottom: \"10px\" }}>\r\n                    <SaveButton\r\n                      loading={saveBtnloading}\r\n                      type=\"submit\"\r\n                      pageMode={pageMode}\r\n                      userAcc={userPageAccessState}\r\n                      editCreatedBy={editCreatedBy}\r\n                      module={\"PageMaster\"}\r\n                    />\r\n                  </div>\r\n                </Card>\r\n              </Col>\r\n\r\n            </AvForm>\r\n\r\n          </Container>\r\n\r\n        </div>\r\n      </React.Fragment >\r\n    )\r\n  }\r\n  else {\r\n    return (\r\n      <React.Fragment></React.Fragment>\r\n    )\r\n  }\r\n}\r\nexport default PageMaster;","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\UserRegistrationPages\\UserList.js",["2966","2967","2968","2969"],"import React, { useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport AddUser from \"./UserRegistration\";\r\nimport {\r\n    getUserList,\r\n    userDeleteAction,\r\n    userDeleteActionSuccess,\r\n    userEditAction,\r\n    userUpdateActionSuccess,\r\n    saveUserMasterActionSuccess\r\n} from \"../../../store/Administrator/UserRegistrationRedux/actions\";\r\nimport CommonListPage from \"../../../components/Common/CommonMasterListPage\";\r\nimport { commonPageFieldList, commonPageFieldListSuccess, } from \"../../../store/actions\";\r\nimport { USER } from \"../../../routes/route_url\";\r\nimport { MetaTags } from \"react-meta-tags\";\r\n\r\nimport * as pageId from \"../../../routes/allPageID\"\r\nimport { Listloader, PageLoadingSpinner } from \"../../../components/Common/CommonButton\";\r\n\r\nconst UserList = () => {\r\n    const dispatch = useDispatch();\r\n    const reducers = useSelector(\r\n        (state) => ({\r\n            listBtnLoading: state.User_Registration_Reducer.listBtnLoading,\r\n            loading: state.User_Registration_Reducer.loading,\r\n            tableList: state.User_Registration_Reducer.pages,\r\n            editData: state.User_Registration_Reducer.editData,\r\n            updateMsg: state.User_Registration_Reducer.updateMessage,\r\n            deleteMsg: state.User_Registration_Reducer.deleteSuccessRole,\r\n            userAccess: state.Login.RoleAccessUpdateData,\r\n            postMsg: state.User_Registration_Reducer.postMsg,\r\n            pageField: state.CommonPageFieldReducer.pageFieldList\r\n        })\r\n    );\r\n\r\n    const action = {\r\n        getList: getUserList,\r\n        editId: userEditAction,\r\n        deleteId: userDeleteAction,\r\n        postSucc: saveUserMasterActionSuccess,\r\n        updateSucc: userUpdateActionSuccess,\r\n        deleteSucc: userDeleteActionSuccess\r\n    }\r\n\r\n    //  This UseEffect => Featch Modules List data  First Rendering\r\n    useEffect(() => {\r\n        dispatch(commonPageFieldListSuccess(null))\r\n        dispatch(commonPageFieldList(pageId.USER_lIST))\r\n        dispatch(getUserList());\r\n    }, []);\r\n\r\n\r\n    const { pageField, userAccess = [] } = reducers\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <PageLoadingSpinner isLoading={(reducers.loading || !pageField)} />\r\n            {\r\n                (pageField) &&\r\n                <CommonListPage\r\n                    action={action}\r\n                    showBreadcrumb={true}\r\n                    reducers={reducers}\r\n                    MasterModal={AddUser}\r\n                    masterPath={USER}\r\n                    ButtonMsgLable={\"User\"}\r\n                    deleteName={\"LoginName\"}\r\n                />\r\n            }\r\n\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default UserList;\r\n\r\n\r\n\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\EmployeePages\\EmployeeList.js",["2970"],"import React, { useEffect } from \"react\";\r\nimport {\r\n  getEmployeelist,\r\n  editEmployeeeId,\r\n  deleteEmployeeIDSuccess,\r\n  updateEmployeeIDSuccess,\r\n  delete_Employee_ID,\r\n  PostEmployeeSuccess,\r\n  getEmployeelistSuccess,\r\n} from \"../../../store/Administrator/EmployeeRedux/action\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport AddEmployee from \"./EmployeeMaster\";\r\nimport CommonListPage from \"../../../components/Common/CommonMasterListPage\";\r\nimport { commonPageFieldList, commonPageFieldListSuccess } from \"../../../store/actions\";\r\nimport * as pageId from \"../../../routes/allPageID\"\r\nimport * as url from \"../../../routes/route_url\";\r\nimport { PageLoadingSpinner } from \"../../../components/Common/CommonButton\";\r\n\r\nconst Employee_List = () => {\r\n\r\n  const dispatch = useDispatch();\r\n  const reducers = useSelector(\r\n    (state) => ({\r\n      listBtnLoading: state.EmployeesReducer.listBtnLoading,\r\n      goBtnLoading: state.EmployeesReducer.goBtnLoading,\r\n      tableList: state.EmployeesReducer.employeeList,\r\n      editData: state.EmployeesReducer.editData,\r\n      updateMsg: state.EmployeesReducer.updateMessage,\r\n      deleteMsg: state.EmployeesReducer.deleteMessage,\r\n      userAccess: state.Login.RoleAccessUpdateData,\r\n      postMsg: state.EmployeesReducer.postMessage,\r\n      pageField: state.CommonPageFieldReducer.pageFieldList\r\n    })\r\n  );\r\n\r\n  const action = {\r\n    getList: getEmployeelist,\r\n    editId: editEmployeeeId,\r\n    deleteId: delete_Employee_ID,\r\n    postSucc: PostEmployeeSuccess,\r\n    updateSucc: updateEmployeeIDSuccess,\r\n    deleteSucc: deleteEmployeeIDSuccess\r\n  }\r\n\r\n  //  This UseEffect => Featch Modules List data  First Rendering\r\n  useEffect(() => {\r\n    const page_Id = pageId.EMPLOYEE_lIST\r\n    dispatch(commonPageFieldListSuccess(null))\r\n    dispatch(commonPageFieldList(page_Id))\r\n    dispatch(getEmployeelist());\r\n\r\n    return () => {\r\n      dispatch(getEmployeelistSuccess([]));\r\n      dispatch(commonPageFieldListSuccess(null))\r\n    }\r\n  }, []);\r\n\r\n  const { pageField, goBtnLoading } = reducers\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <PageLoadingSpinner isLoading={(goBtnLoading || !pageField)} />\r\n      {\r\n        (pageField) &&\r\n        <CommonListPage\r\n          action={action}\r\n          reducers={reducers}\r\n          MasterModal={AddEmployee}\r\n          masterPath={url.EMPLOYEE}\r\n          ButtonMsgLable={\"Employee\"}\r\n          deleteName={\"Name\"}\r\n        />\r\n      }\r\n\r\n\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nexport default Employee_List;\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\EmployeePages\\EmployeeMaster.js",["2971","2972","2973","2974","2975","2976","2977","2978","2979","2980","2981","2982","2983","2984","2985","2986","2987","2988"],"import React, { useState, useEffect } from \"react\";\r\nimport Select from \"react-select\";\r\nimport {\r\n  Card,\r\n  CardBody,\r\n  Col,\r\n  Container,\r\n  Row,\r\n  Label,\r\n  CardHeader,\r\n  FormGroup,\r\n  Input,\r\n} from \"reactstrap\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  getState,\r\n  saveEmployeeAction,\r\n  updateEmployeeAction,\r\n  PostEmployeeSuccess,\r\n  editEmployeeSuccess,\r\n  updateEmployeeIDSuccess,\r\n  getCityOnDistrict,\r\n  getCityOnDistrictSuccess\r\n} from \"../../../store/Administrator/EmployeeRedux/action\";\r\nimport { commonPageField, commonPageFieldSuccess } from \"../../../store/actions\";\r\nimport {\r\n  getDistrictOnState,\r\n  getDistrictOnStateSuccess,\r\n  getPartyListAPI,\r\n  getPartyListAPISuccess\r\n} from \"../../../store/Administrator/PartyRedux/action\";\r\nimport { Breadcrumb_inputName } from \"../../../store/Utilites/Breadcrumb/actions\";\r\nimport { MetaTags } from \"react-meta-tags\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {\r\n  comAddPageFieldFunc,\r\n  formValid,\r\n  initialFiledFunc,\r\n  onChangeDate,\r\n  onChangeSelect,\r\n  onChangeText,\r\n  resetFunction\r\n} from \"../../../components/Common/validationFunction\";\r\nimport { SaveButton } from \"../../../components/Common/CommonButton\";\r\nimport {\r\n  breadcrumbReturnFunc,\r\n  btnIsDissablefunc,\r\n  loginCompanyID,\r\n  loginUserID,\r\n  metaTagLabel,\r\n} from \"../../../components/Common/CommonFunction\";\r\nimport * as url from \"../../../routes/route_url\";\r\nimport * as pageId from \"../../../routes/allPageID\"\r\nimport * as mode from \"../../../routes/PageMode\"\r\nimport { getEmployeeTypelist } from \"../../../store/Administrator/EmployeeTypeRedux/action\";\r\nimport { customAlert } from \"../../../CustomAlert/ConfirmDialog\";\r\nimport EmployeeTypesMaster from \"../EmployeeTypes/EmployeeTypesMaster\";\r\nimport AddMaster from \"./Drodown\";\r\nimport PartyMaster from \"../PartyMaster/MasterAdd/PartyIndex\";\r\nimport { C_DatePicker, C_Select } from \"../../../CustomValidateForm\";\r\nimport CityMaster from \"../CityPages/CityMaster\";\r\nimport { getStateESuccess } from \"../../../store/Administrator/EmployeeRedux/action\";\r\nimport { getEmployeeTypelistSuccess } from \"../../../store/Administrator/EmployeeTypeRedux/action\";\r\n\r\nconst AddEmployee = (props) => {\r\n\r\n  const dispatch = useDispatch();\r\n  const history = useHistory()\r\n\r\n  const fileds = {\r\n    id: \"\",\r\n    Name: \"\",\r\n    Address: \"\",\r\n    Mobile: \"\",\r\n    email: \"\",\r\n    DOB: \"\",\r\n    PAN: \"\",\r\n    AadharNo: \"\",\r\n    EmployeeTypeName: \"\",\r\n    StateName: \"\",\r\n    DistrictName: \"\",\r\n    PIN: \"\",\r\n    CityName: \"\",\r\n    EmployeeParties: []\r\n  }\r\n\r\n  const [state, setState] = useState(() => initialFiledFunc(fileds))\r\n\r\n  const [pageMode, setPageMode] = useState(mode.defaultsave);\r\n  const [userPageAccessState, setUserAccState] = useState('');\r\n  const [modalCss, setModalCss] = useState(false);\r\n  const [editCreatedBy, seteditCreatedBy] = useState(\"\");\r\n  const [employeeType_AddAccess, setEmployeeType_AddAccess] = useState(false)\r\n  const [partyMaster_AddAccess, setPartyMaster_AddAccess] = useState(false)\r\n  const [cityMaster_AddAccess, setCityMaster_AddAccess] = useState(false)\r\n\r\n  //Access redux store Data /  'save_ModuleSuccess' action data\r\n  const {\r\n    employeeType,\r\n    State,\r\n    City,\r\n    district,\r\n    partyList,\r\n    postMsg,\r\n    userAccess,\r\n    pageField,\r\n    saveBtnloading,\r\n    stateDropDownLoading,\r\n    employeeTypeLoading,\r\n    partyDropdownLoading,\r\n    districtDropDownLoading,\r\n    cityDropDownLoading,\r\n    updateMsg } = useSelector((state) => ({\r\n      saveBtnloading: state.EmployeeTypeReducer.saveBtnloading,\r\n      employeeType: state.EmployeeTypeReducer.EmployeeTypeList,\r\n      State: state.EmployeesReducer.State,\r\n      City: state.EmployeesReducer.City,\r\n      district: state.PartyMasterReducer.DistrictOnState,\r\n      partyList: state.PartyMasterReducer.partyList,\r\n      postMsg: state.EmployeesReducer.postMessage,\r\n      updateMsg: state.EmployeesReducer.updateMessage,\r\n      userAccess: state.Login.RoleAccessUpdateData,\r\n      pageField: state.CommonPageFieldReducer.pageField,\r\n      employeeTypeLoading: state.EmployeeTypeReducer.goBtnLoading,\r\n      partyDropdownLoading: state.PartyMasterReducer.goBtnLoading,\r\n      stateDropDownLoading: state.EmployeesReducer.stateDropDownLoading,\r\n      districtDropDownLoading: state.PartyMasterReducer.districtDropDownLoading,\r\n      cityDropDownLoading: state.EmployeesReducer.cityDropDownLoading,\r\n    }));\r\n\r\n  const values = { ...state.values }\r\n  const { isError } = state;\r\n  const { fieldLabel } = state;\r\n\r\n  const location = { ...history.location }\r\n  const hasShowloction = location.hasOwnProperty(mode.editValue)\r\n  const hasShowModal = props.hasOwnProperty(mode.editValue)\r\n\r\n  useEffect(() => {\r\n    dispatch(getDistrictOnStateSuccess([]))\r\n    dispatch(commonPageFieldSuccess(null));\r\n    dispatch(commonPageField(pageId.EMPLOYEE))\r\n    dispatch(getEmployeeTypelist());\r\n    dispatch(getPartyListAPI())\r\n    dispatch(getState());\r\n    return () => {\r\n      dispatch(getPartyListAPISuccess([]));\r\n      dispatch(getStateESuccess([]));\r\n      dispatch(getEmployeeTypelistSuccess([]));\r\n    }\r\n  }, [dispatch]);\r\n\r\n\r\n  useEffect(() => {\r\n\r\n    let userAcc = null;\r\n    let locationPath;\r\n\r\n    if (props.pageMode === mode.dropdownAdd) {\r\n      locationPath = props.masterPath;\r\n    } else {\r\n      locationPath = location.pathname;\r\n    }\r\n\r\n    if (hasShowModal) {\r\n      locationPath = props.masterPath;\r\n    };\r\n\r\n    userAcc = userAccess.find((inx) => {\r\n      return (`/${inx.ActualPagePath}` === locationPath)\r\n    })\r\n\r\n    if (userAcc) {\r\n      setUserAccState(userAcc);\r\n      if (!props.isdropdown) {\r\n        breadcrumbReturnFunc({ dispatch, userAcc });\r\n      }\r\n    };\r\n    userAccess.find((index) => {\r\n      if (index.id === pageId.EMPLOYEETYPE) {\r\n        return setEmployeeType_AddAccess(true)\r\n      }\r\n      if (index.id === pageId.PARTY) {\r\n        return setPartyMaster_AddAccess(true)\r\n      }\r\n      if (index.id === pageId.CITY) {\r\n        return setCityMaster_AddAccess(true)\r\n      }\r\n    });\r\n  }, [userAccess])\r\n\r\n  // This UseEffect 'SetEdit' data and 'autoFocus' while this Component load First Time.\r\n  useEffect(() => {\r\n\r\n    if ((hasShowloction || hasShowModal)) {\r\n\r\n      let hasEditVal = null\r\n      if (hasShowloction) {\r\n        setPageMode(location.pageMode)\r\n        hasEditVal = location.editValue\r\n      }\r\n      else if (hasShowModal) {\r\n        hasEditVal = props.editValue\r\n        setPageMode(props.pageMode)\r\n        setModalCss(true)\r\n      }\r\n\r\n      if (hasEditVal) {\r\n\r\n        const listItems = hasEditVal.EmployeeParties.map((data) => ({\r\n          value: data.id,\r\n          label: data.Name\r\n        }))\r\n\r\n        // if ((hasEditVal.EmployeeParties).length > 0) { setPartyDropDownShow_UI(true) };\r\n\r\n        const { id, Name, Address, Mobile, email, DOB, PAN, AadharNo, CompanyName, EmployeeTypeName, StateName, DistrictName, EmployeeParties, PIN, City, CityName,\r\n          State_id, District_id, Company_id, City_id, EmployeeType_id, } = hasEditVal\r\n\r\n        const { values, fieldLabel, hasValid, required, isError } = { ...state }\r\n        hasValid.id.valid = id\r\n        hasValid.Name.valid = true;\r\n        hasValid.Address.valid = true;\r\n        hasValid.Mobile.valid = true;\r\n        hasValid.email.valid = true;\r\n        hasValid.DOB.valid = true;\r\n        hasValid.PAN.valid = true;\r\n        hasValid.AadharNo.valid = true;\r\n        hasValid.EmployeeTypeName.valid = true;\r\n        hasValid.StateName.valid = true;\r\n        hasValid.DistrictName.valid = true;\r\n        hasValid.EmployeeParties.valid = true;\r\n        hasValid.PIN.valid = true;\r\n        hasValid.CityName.valid = true;\r\n\r\n\r\n        values.id = id\r\n        values.Address = Address;\r\n        values.Mobile = Mobile\r\n        values.email = email;\r\n        values.DOB = DOB\r\n        values.PAN = PAN;\r\n        values.AadharNo = AadharNo\r\n        values.Name = Name;\r\n        values.PIN = PIN;\r\n        values.CityName = { label: CityName, value: City_id };\r\n        values.EmployeeTypeName = { label: EmployeeTypeName, value: EmployeeType_id };\r\n        values.StateName = { label: StateName, value: State_id };\r\n        values.DistrictName = { label: DistrictName, value: District_id };\r\n        values.EmployeeParties = listItems;\r\n        dispatch(getDistrictOnState(State_id))\r\n        setState({ values, fieldLabel, hasValid, required, isError })\r\n        dispatch(Breadcrumb_inputName(hasEditVal.Name))\r\n        seteditCreatedBy(hasEditVal.CreatedBy)\r\n      }\r\n      dispatch(editEmployeeSuccess({ Status: false }))\r\n    }\r\n  }, [])\r\n\r\n  useEffect(async () => {\r\n\r\n    if ((postMsg.Status === true) && (postMsg.StatusCode === 200)) {\r\n      dispatch(PostEmployeeSuccess({ Status: false }))\r\n      setState(() => resetFunction(fileds, state))// Clear form values  \r\n      dispatch(Breadcrumb_inputName(''))\r\n\r\n      if (props.pageMode === mode.dropdownAdd) {\r\n        customAlert({\r\n          Type: 1,\r\n          Message: postMsg.Message,\r\n        })\r\n      }\r\n      else {\r\n        let isPermission = await customAlert({\r\n          Type: 1,\r\n          Status: true,\r\n          Message: postMsg.Message,\r\n        })\r\n        if (isPermission) {\r\n          history.push({ pathname: url.EMPLOYEE_lIST })\r\n        }\r\n      }\r\n    }\r\n    else if (postMsg.Status === true) {\r\n      dispatch(PostEmployeeSuccess({ Status: false }))\r\n      customAlert({\r\n        Type: 4,\r\n        Message: JSON.stringify(postMsg.Message),\r\n      })\r\n    }\r\n  }, [postMsg])\r\n\r\n  useEffect(() => {\r\n    if (updateMsg.Status === true && updateMsg.StatusCode === 200 && !modalCss) {\r\n      setState(() => resetFunction(fileds, state))// Clear form values \r\n      history.push({\r\n        pathname: url.EMPLOYEE_lIST,\r\n      })\r\n    } else if (updateMsg.Status === true && !modalCss) {\r\n      dispatch(updateEmployeeIDSuccess({ Status: false }));\r\n      customAlert({\r\n        Type: 3,\r\n        Message: JSON.stringify(updateMsg.Message),\r\n      })\r\n    }\r\n  }, [updateMsg, modalCss]);\r\n\r\n  useEffect(() => {\r\n\r\n    if (pageField) {\r\n      const fieldArr = pageField.PageFieldMaster\r\n      comAddPageFieldFunc({ state, setState, fieldArr })\r\n    }\r\n  }, [pageField])\r\n\r\n  const Party_DropdownOptions = partyList.map((data) => ({\r\n    value: data.id,\r\n    label: data.Name\r\n  }));\r\n\r\n  const EmployeeType_DropdownOptions = employeeType.map((data) => ({\r\n    value: data.id,\r\n    label: data.Name,\r\n    IsPartyConnection: data.IsPartyConnection\r\n  }));\r\n\r\n  const State_DropdownOptions = State.map((data) => ({\r\n    value: data.id,\r\n    label: data.Name\r\n  }));\r\n\r\n  const District_DropdownOptions = district.map((data) => ({\r\n    value: data.id,\r\n    label: data.Name\r\n  }));\r\n\r\n  const City_DropdownOptions = City.map((data) => ({\r\n\r\n    value: data.id,\r\n    label: data.Name\r\n  }));\r\n\r\n  function State_Dropdown_Handler(e) {\r\n    dispatch(getDistrictOnState(e.value))\r\n    dispatch(getCityOnDistrictSuccess([]))\r\n    setState((i) => {\r\n      const a = { ...i }\r\n      a.values.DistrictName = \"\";\r\n      a.hasValid.DistrictName.valid = false\r\n\r\n      a.values.CityName = \"\";\r\n      a.hasValid.CityName.valid = false\r\n      return a\r\n    })\r\n  }\r\n\r\n  function District_Dropdown_Handler(e) {\r\n    dispatch(getCityOnDistrict(e.value))\r\n    setState((i) => {\r\n      const a = { ...i }\r\n      a.values.CityName = \"\";\r\n      a.hasValid.CityName.valid = false\r\n\r\n      return a\r\n    })\r\n  }\r\n\r\n  const SaveHandler = (event) => {\r\n\r\n    event.preventDefault();\r\n    const btnId = event.target.id;\r\n    try {\r\n      if (formValid(state, setState)) {\r\n        btnIsDissablefunc({ btnId, state: true })\r\n        if ((values.EmployeeTypeName.IsPartyConnection === true) && (values.EmployeeParties.length === 0)) {\r\n          dispatch(\r\n            customAlert({\r\n              Type: 4,\r\n              Status: true,\r\n              Message: \"Party is Required\",\r\n            })\r\n          );\r\n          return btnIsDissablefunc({ btnId, state: false })\r\n        }\r\n\r\n        let emplPartie = [{ Party: \"\" }]\r\n        if (!(values.EmployeeParties.length === 0)) {\r\n          emplPartie = values.EmployeeParties.map((i) => { return ({ Party: i.value }) })\r\n        }\r\n\r\n        const jsonBody = JSON.stringify({\r\n          Name: values.Name,\r\n          Address: values.Address,\r\n          Mobile: values.Mobile,\r\n          email: values.email,\r\n          DOB: values.DOB,\r\n          PAN: values.PAN,\r\n          AadharNo: values.AadharNo,\r\n          EmployeeType: values.EmployeeTypeName.value,\r\n          State: values.StateName.value,\r\n          District: values.DistrictName.value,\r\n          City: values.CityName.value,\r\n          EmployeeParties: emplPartie,\r\n          PIN: values.PIN,\r\n          Company: loginCompanyID(),\r\n          CreatedBy: loginUserID(),\r\n          UpdatedBy: loginUserID()\r\n        });\r\n\r\n        if (pageMode === mode.edit) {\r\n          dispatch(updateEmployeeAction({ jsonBody, updateId: values.id, btnId }));\r\n        }\r\n        else {\r\n\r\n          dispatch(saveEmployeeAction({ jsonBody, btnId }));\r\n        }\r\n      }\r\n    } catch (e) { btnIsDissablefunc({ btnId, state: false }) }\r\n  };\r\n\r\n  // IsEditMode_Css is use of module Edit_mode (reduce page-content marging)\r\n  var IsEditMode_Css = ''\r\n  if ((modalCss) || (pageMode === mode.dropdownAdd)) { IsEditMode_Css = \"-5.5%\" };\r\n\r\n  if (!(userPageAccessState === '')) {\r\n    return (\r\n      <React.Fragment>\r\n        <MetaTags>{metaTagLabel(userPageAccessState)}</MetaTags>\r\n\r\n        <div className=\"page-content\" style={{ marginTop: IsEditMode_Css }}>\r\n          <Container fluid>\r\n\r\n            <Card className=\"text-black\">\r\n              <CardHeader className=\"card-header   text-dark c_card_header\" >\r\n                <h4 className=\"card-title text-black\">{userPageAccessState.PageDescription}</h4>\r\n                <p className=\"card-title-desc text-black\">{userPageAccessState.PageDescriptionDetails}</p>\r\n              </CardHeader>\r\n\r\n              <CardBody>\r\n                <form noValidate>\r\n                  <Card  >\r\n                    <CardBody className=\"c_card_body\">\r\n                      <Row>\r\n                        <FormGroup className=\"mb-2 col col-sm-3 \">\r\n                          <Label htmlFor=\"validationCustom01\">{fieldLabel.Name} </Label>\r\n                          <Input\r\n                            name=\"Name\"\r\n                            id=\"txtName\"\r\n                            value={values.Name}\r\n                            type=\"text\"\r\n                            className={isError.Name.length > 0 ? \"is-invalid form-control\" : \"form-control\"}\r\n                            placeholder=\"Please Enter Name\"\r\n                            autoComplete='off'\r\n                            autoFocus={true}\r\n                            onChange={(event) => {\r\n                              onChangeText({ event, state, setState })\r\n                              dispatch(Breadcrumb_inputName(event.target.value))\r\n                            }}\r\n                          />\r\n                          {isError.Name.length > 0 && (\r\n                            <span className=\"invalid-feedback\">{isError.Name}</span>\r\n                          )}\r\n                        </FormGroup>\r\n\r\n                        <Col md=\"1\">  </Col>\r\n                        <FormGroup className=\"mb-2 col col-sm-3 \">\r\n                          <Label htmlFor=\"validationCustom01\">{fieldLabel.email} </Label>\r\n                          <Input\r\n                            name=\"email\"\r\n                            value={values.email}\r\n                            type=\"text\"\r\n                            className={isError.email.length > 0 ? \"is-invalid form-control\" : \"form-control\"}\r\n                            placeholder=\"Please Enter email\"\r\n                            autoComplete='off'\r\n                            onChange={(event) => {\r\n                              onChangeText({ event, state, setState })\r\n                            }}\r\n                          />\r\n                          {isError.email.length > 0 && (\r\n                            <span className=\"invalid-feedback\">{isError.email}</span>\r\n                          )}\r\n                        </FormGroup>\r\n\r\n                        <Col md=\"1\">  </Col>\r\n                        <FormGroup className=\"mb-2 col col-sm-3 \">\r\n                          <Label htmlFor=\"validationCustom01\">{fieldLabel.Mobile} </Label>\r\n                          <Input\r\n                            name=\"Mobile\"\r\n                            value={values.Mobile}\r\n                            type=\"text\"\r\n                            className={isError.Mobile.length > 0 ? \"is-invalid form-control\" : \"form-control\"}\r\n                            placeholder=\"Please Enter Mobile\"\r\n                            autoComplete='off'\r\n                            onChange={(event) => {\r\n                              onChangeText({ event, state, setState })\r\n                            }}\r\n                          />\r\n                          {isError.Mobile.length > 0 && (\r\n                            <span className=\"invalid-feedback\">{isError.Mobile}</span>\r\n                          )}\r\n                        </FormGroup>\r\n                      </Row>\r\n\r\n                      <Row>\r\n                        <FormGroup className=\"mb-2 col col-sm-3 \">\r\n                          <Label htmlFor=\"validationCustom01\">{fieldLabel.DOB} </Label>\r\n                          <C_DatePicker\r\n                            name=\"DOB\"\r\n                            value={values.DOB}\r\n                            placeholder={\"DD/MM/YYYY\"}\r\n                            onChange={(y, v, e) => {\r\n                              onChangeDate({ e, v, state, setState })\r\n                            }}\r\n                          />\r\n                          {isError.DOB.length > 0 && (\r\n                            <span className=\"invalid-feedback\">{isError.DOB}</span>\r\n                          )}\r\n                        </FormGroup>\r\n\r\n                        <Col md=\"1\">  </Col>\r\n                        <FormGroup className=\"mb-2 col col-sm-3 \">\r\n                          <Label htmlFor=\"validationCustom01\">{fieldLabel.AadharNo} </Label>\r\n                          <Input\r\n                            name=\"AadharNo\"\r\n                            value={values.AadharNo}\r\n                            type=\"text\"\r\n                            className={isError.AadharNo.length > 0 ? \"is-invalid form-control\" : \"form-control\"}\r\n                            placeholder=\"Please Enter AadharNo\"\r\n                            autoComplete='off'\r\n                            onChange={(event) => {\r\n                              onChangeText({ event, state, setState })\r\n                            }}\r\n                          />\r\n                          {isError.AadharNo.length > 0 && (\r\n                            <span className=\"invalid-feedback\">{isError.AadharNo}</span>\r\n                          )}\r\n                        </FormGroup>\r\n\r\n                        <Col md=\"1\">  </Col>\r\n                        <FormGroup className=\"mb-2 col col-sm-3 \">\r\n                          <Label htmlFor=\"validationCustom01\">{fieldLabel.PAN} </Label>\r\n                          <Input\r\n                            name=\"PAN\"\r\n                            value={values.PAN}\r\n                            type=\"text\"\r\n                            className={isError.PAN.length > 0 ? \"is-invalid form-control\" : \"form-control\"}\r\n                            placeholder=\"Please Enter PAN\"\r\n                            autoComplete='off'\r\n                            onChange={(event) => {\r\n                              onChangeText({ event, state, setState })\r\n                            }}\r\n                          />\r\n                          {isError.PAN.length > 0 && (\r\n                            <span className=\"invalid-feedback\">{isError.PAN}</span>\r\n                          )}\r\n                        </FormGroup>\r\n                      </Row>\r\n\r\n                      <Row>\r\n                        <FormGroup className=\"mb-2 col col-sm-3 \">\r\n                          <Label htmlFor=\"validationCustom01\">{fieldLabel.Address} </Label>\r\n                          <Input\r\n                            name=\"Address\"\r\n                            value={values.Address}\r\n                            type=\"text\"\r\n                            className={isError.Address.length > 0 ? \"is-invalid form-control\" : \"form-control\"}\r\n                            placeholder=\"Please Enter Address\"\r\n                            autoComplete='off'\r\n                            onChange={(event) => {\r\n                              onChangeText({ event, state, setState })\r\n                            }}\r\n                          />\r\n                          {isError.Address.length > 0 && (\r\n                            <span className=\"invalid-feedback\">{isError.Address}</span>\r\n                          )}\r\n                        </FormGroup>\r\n\r\n                        <Col md=\"1\"></Col>\r\n                        <FormGroup className=\"mb-2 col col-sm-3 \">\r\n                          <Label htmlFor=\"validationCustom01\"> {fieldLabel.StateName} </Label>\r\n                          <Col sm={12}>\r\n                            <C_Select\r\n                              name=\"StateName\"\r\n                              id=\"state\"\r\n                              value={values.StateName}\r\n                              isSearchable={true}\r\n                              isLoading={stateDropDownLoading}\r\n                              classNamePrefix=\"dropdown\"\r\n                              options={State_DropdownOptions}\r\n                              onChange={(hasSelect, evn) => {\r\n                                onChangeSelect({ hasSelect, evn, state, setState, })\r\n                                State_Dropdown_Handler(hasSelect)\r\n                              }}\r\n                            />\r\n                            {isError.StateName.length > 0 && (\r\n                              <span className=\"text-danger f-8\"><small>{isError.StateName}</small></span>\r\n                            )}\r\n                          </Col>\r\n                        </FormGroup>\r\n\r\n                        <Col md=\"1\"></Col>\r\n                        <FormGroup className=\"mb-2 col col-sm-3 \">\r\n                          <Label htmlFor=\"validationCustom01\"> {fieldLabel.DistrictName} </Label>\r\n                          <Col sm={12}>\r\n                            <C_Select\r\n                              name=\"DistrictName\"\r\n                              value={values.DistrictName}\r\n                              isSearchable={true}\r\n                              className=\"react-dropdown\"\r\n                              classNamePrefix=\"dropdown\"\r\n                              isLoading={districtDropDownLoading}\r\n                              options={District_DropdownOptions}\r\n                              onChange={(hasSelect, evn) => {\r\n                                onChangeSelect({ hasSelect, evn, state, setState, })\r\n                                District_Dropdown_Handler(hasSelect)\r\n                              }}\r\n                            />\r\n                            {isError.DistrictName.length > 0 && (\r\n                              <span className=\"text-danger f-8\"><small>{isError.DistrictName}</small></span>\r\n                            )}\r\n                          </Col>\r\n                        </FormGroup>\r\n                      </Row>\r\n                      <Row>\r\n                        <FormGroup className=\"mb-2 col col-sm-3 \">\r\n                          <Label htmlFor=\"validationCustom01\">{fieldLabel.CityName} </Label>\r\n                          <C_Select\r\n                            name=\"CityName\"\r\n                            id=\"CityName\"\r\n                            value={values.CityName}\r\n                            isSearchable={true}\r\n                            classNamePrefix=\"dropdown\"\r\n                            isLoading={cityDropDownLoading}\r\n                            options={City_DropdownOptions}\r\n                            onChange={(hasSelect, evn) => {\r\n                              onChangeSelect({ hasSelect, evn, state, setState, })\r\n                            }}\r\n                          />\r\n                          {isError.CityName.length > 0 && (\r\n                            <span className=\"text-danger f-8\"><small>{isError.CityName}</small></span>\r\n                          )}\r\n                        </FormGroup>\r\n\r\n                        {cityMaster_AddAccess ? <Col md=\"1\" className=\" mt-3\">\r\n                          <AddMaster\r\n                            masterModal={CityMaster}\r\n                            masterPath={url.CITY}\r\n                          />\r\n                        </Col> : <Col md=\"1\"></Col>\r\n                        }\r\n                        <FormGroup className=\"mb-2 col col-sm-3 \">\r\n                          <Label htmlFor=\"validationCustom01\">{fieldLabel.PIN} </Label>\r\n                          <Input\r\n                            name=\"PIN\"\r\n                            value={values.PIN}\r\n                            type=\"text\"\r\n                            className={isError.PIN.length > 0 ? \"is-invalid form-control\" : \"form-control\"}\r\n                            placeholder=\"Please Enter PIN\"\r\n                            autoComplete='off'\r\n                            onChange={(event) => {\r\n                              onChangeText({ event, state, setState })\r\n                            }}\r\n                          />\r\n                          {isError.PIN.length > 0 && (\r\n                            <span className=\"invalid-feedback\">{isError.PIN}</span>\r\n                          )}\r\n                        </FormGroup>\r\n                      </Row>\r\n                    </CardBody>\r\n                  </Card>\r\n\r\n                  <Card className=\"mt-n2\">\r\n                    <CardBody className=\"c_card_body\">\r\n\r\n                      <Row >\r\n                        <Col md=\"3\">\r\n                          <FormGroup className=\"mb-3 \">\r\n                            <Label > {fieldLabel.EmployeeTypeName}</Label>\r\n                            <C_Select\r\n                              name=\"EmployeeTypeName\"\r\n                              value={values.EmployeeTypeName}\r\n                              isSearchable={true}\r\n                              isLoading={employeeTypeLoading}\r\n                              className=\"react-dropdown\"\r\n                              classNamePrefix=\"dropdown\"\r\n                              options={EmployeeType_DropdownOptions}\r\n                              onChange={(hasSelect, evn) => {\r\n                                onChangeSelect({ hasSelect, evn, state, setState });\r\n                              }}\r\n                            />\r\n                            {isError.EmployeeTypeName.length > 0 && (\r\n                              <span className=\"text-danger f-8\"><small>{isError.EmployeeTypeName}</small></span>\r\n                            )}\r\n                          </FormGroup>\r\n                        </Col>\r\n\r\n                        {employeeType_AddAccess ? <Col md=\"1\" className=\" mt-3\">\r\n                          <AddMaster\r\n                            masterModal={EmployeeTypesMaster}\r\n                            masterPath={url.EMPLOYEETYPE}\r\n                          />\r\n                        </Col> : <Col md=\"1\"></Col>\r\n                        }\r\n\r\n                        <Col md=\"3\">\r\n                          <FormGroup className=\"mb-3\">\r\n                            <Label>{fieldLabel.EmployeeParties}</Label>\r\n                            <C_Select\r\n                              name=\"EmployeeParties\"\r\n                              value={values.EmployeeParties}\r\n                              isMulti={true}\r\n                              isLoading={partyDropdownLoading}\r\n                              className=\"react-dropdown\"\r\n                              options={Party_DropdownOptions}\r\n                              onChange={(hasSelect, evn) => {\r\n                                onChangeSelect({ hasSelect, evn, state, setState });\r\n                              }}\r\n                              classNamePrefix=\"dropdown\"\r\n                            />\r\n                          </FormGroup>\r\n                        </Col>\r\n\r\n                        {partyMaster_AddAccess ? <Col md=\"1\" className=\" mt-3\">\r\n                          <AddMaster\r\n                            masterModal={PartyMaster}\r\n                            masterPath={url.PARTY}\r\n                          />\r\n                        </Col> : <Col md=\"1\"></Col>\r\n                        }\r\n                      </Row>\r\n\r\n                      <FormGroup className=\"mt-3\">\r\n                        <Row>\r\n                          <Col sm={2}>\r\n                            <SaveButton\r\n                              loading={saveBtnloading}\r\n                              pageMode={pageMode}\r\n                              onClick={SaveHandler}\r\n                              userAcc={userPageAccessState}\r\n                              editCreatedBy={editCreatedBy}\r\n                              module={\"EmployeeMaster\"}\r\n                            />\r\n                          </Col>\r\n                        </Row>\r\n                      </FormGroup>\r\n\r\n                    </CardBody>\r\n                  </Card>\r\n                </form>\r\n              </CardBody>\r\n            </Card>\r\n          </Container>\r\n        </div>\r\n\r\n      </React.Fragment >\r\n\r\n    );\r\n  }\r\n  else {\r\n    return (\r\n      <React.Fragment></React.Fragment>\r\n    )\r\n  }\r\n};\r\nexport default AddEmployee\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\ItemPages\\ItemMaster\\itemIndex.js",["2989","2990","2991","2992","2993","2994","2995","2996","2997","2998","2999","3000","3001","3002"],"import React, { useEffect, useState } from \"react\"\r\nimport MetaTags from \"react-meta-tags\"\r\nimport {\r\n    Card,\r\n    CardBody,\r\n    CardHeader,\r\n    Col,\r\n    Container,\r\n    FormGroup,\r\n    Input,\r\n    Label,\r\n    Nav,\r\n    NavItem,\r\n    NavLink,\r\n    Row,\r\n    TabContent,\r\n    TabPane,\r\n} from \"reactstrap\"\r\nimport { useHistory } from \"react-router-dom\"\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport classnames from \"classnames\"\r\nimport Select from \"react-select\";\r\nimport { getcompanyList } from \"../../../../store/Administrator/CompanyRedux/actions\"\r\nimport {\r\n    editItemSuccess,\r\n    getBaseUnit_ForDropDown,\r\n    getBrandTagName,\r\n    getItemTagName,\r\n    get_CategoryTypes_ForDropDown,\r\n    get_Category_By_CategoryType_ForDropDownAPI,\r\n    get_Division_ForDropDown,\r\n    get_ImageType_ForDropDown,\r\n    get_Party_ForDropDown,\r\n    saveItemMasterAction,\r\n    SaveItemMasterActionSuccess,\r\n    updateItemMasterAction,\r\n    updateItemMasterActionSuccess\r\n} from \"../../../../store/Administrator/ItemsRedux/action\";\r\nimport { Breadcrumb_inputName, getCategoryTypelist } from \"../../../../store/actions\";\r\nimport { getPartyListAPI } from \"../../../../store/Administrator/PartyRedux/action\";\r\nimport GSTTab from \"./GST_Tab\";\r\nimport MRPTab from \"./MRP_Tab\";\r\nimport Margin_Tab from \"./MarginTab/index\";\r\nimport GroupTab from \"./Group_Tab\";\r\nimport UnitConverstion from \"./UnitConversion_Tab/Index\";\r\nimport Image from \"./Image_Tab/Index\";\r\nimport {\r\n    breadcrumbReturnFunc,\r\n    loginUserID,\r\n    loginCompanyID,\r\n    btnIsDissablefunc,\r\n    metaTagLabel\r\n} from \"../../../../components/Common/CommonFunction\";\r\nimport * as url from \"../../../../routes/route_url\";\r\nimport * as mode from \"../../../../routes/PageMode\";\r\nimport { GeneralMasterSubType, } from \"../../../../store/Administrator/GeneralRedux/action\";\r\nimport { customAlert } from \"../../../../CustomAlert/ConfirmDialog\";\r\nimport { SaveButton } from \"../../../../components/Common/CommonButton\";\r\nimport WeightageTab from \"./Weightage_Tab\";\r\nimport { C_Select } from \"../../../../CustomValidateForm\";\r\n\r\nexport const unitConversionInitial = {\r\n    id: 1,\r\n    Conversion: '',\r\n    Unit: '',\r\n    POUnit: false,\r\n    SOUnit: false,\r\n    IsBase: false,\r\n    hasEdit: false,\r\n    hasDelete: false\r\n};\r\nconst ItemsMaster = (props) => {\r\n\r\n    const dispatch = useDispatch();\r\n    const history = useHistory()\r\n    const [EditData, setEditData] = useState({});\r\n    const [modalCss, setModalCss] = useState(false);\r\n    const [pageMode, setPageMode] = useState(mode.defaultsave);\r\n    const [userPageAccessState, setUserAccState] = useState('');\r\n    const [editCreatedBy, seteditCreatedBy] = useState(\"\");\r\n    const [activeTab1, setactiveTab1] = useState(\"1\")\r\n\r\n    const [searchResults, setSearchResults] = React.useState([]);\r\n\r\n    let initial = {\r\n        Name: \"\",\r\n        SAPItemCode: \"\",\r\n        ShortName: \"\",\r\n        BarCode: '',\r\n        BaseUnit: \"\",\r\n        Category: [],\r\n        CategoryType: [],\r\n        Division: [],\r\n        MRP: '',\r\n        GST: '',\r\n        HSN: '',\r\n        isActive: true,\r\n        Tag: '',\r\n        Sequence: '',\r\n        BrandName: [],\r\n        IsSCM: false\r\n    }\r\n    const initialInValid = [\"txtName0\", \"txtShortName0\",]\r\n\r\n    const [inValidDrop, setInValidDrop] = useState({\r\n        BaseUnit: false,\r\n        Company: false,\r\n        CategoryType: false,\r\n        Category: false,\r\n        Division: false,\r\n        BrandName: false,\r\n    })\r\n\r\n    let [isValidate, setIsValidate] = useState(initialInValid);\r\n\r\n    const [formValue, setFormValue] = useState(initial);\r\n    console.log(formValue)\r\n    const [marginMaster, setMarginMaster] = useState([]);\r\n\r\n    const [imageTabTable, setImageTabTable] = useState([{\r\n        ImageType: '',\r\n        ImageUpload: ''\r\n    }]);\r\n\r\n    const [baseUnitTableData, setBaseUnitTableData] = useState([unitConversionInitial]);\r\n    const [previousBaseUnitTableData, setPreviousBaseUnitTableData] = useState([]);\r\n\r\n    const [MRP_Tab_TableData, setMRP_Tab_TableData] = useState([]);\r\n    const [Group_Tab_TableData, setGroup_Tab_TableData] = useState([]);\r\n    const [GStDetailsMaster, setGStDetailsMaster] = useState([]);\r\n\r\n    const [weightageTabMaster, setWeightageTabMaster] = useState({\r\n        Breadth: '',\r\n        Grammage: '',\r\n        Height: '',\r\n        Length: '',\r\n        StoringCondition: '',\r\n    });\r\n\r\n    const [isShelfLife, setIsShelfLife] = useState('');\r\n    const [editItemShelfLife, setEditItemShelfLife] = useState('');\r\n\r\n    const {\r\n        BaseUnit,\r\n        postMsg,\r\n        userAccess,\r\n        Division,\r\n        CategoryTypeList,\r\n        CategoryList,\r\n        ItemTagList,\r\n        BrandTagList,\r\n        updateMsg,\r\n        BrandName,\r\n        saveBtnloading,\r\n        categotyDropDownLoading,\r\n    } = useSelector((state) => ({\r\n        saveBtnloading: state.ItemMastersReducer.saveBtnloading,\r\n        BaseUnit: state.ItemMastersReducer.BaseUnit,\r\n        userAccess: state.Login.RoleAccessUpdateData,\r\n        postMsg: state.ItemMastersReducer.postMsg,\r\n        updateMsg: state.ItemMastersReducer.updateMsg,\r\n        Division: state.ItemMastersReducer.Division,\r\n        CategoryTypeList: state.categoryTypeReducer.categoryTypeListData,\r\n        CategoryList: state.ItemMastersReducer.Category,\r\n        ItemTagList: state.ItemMastersReducer.ItemTagList,\r\n        BrandTagList: state.ItemMastersReducer.BrandTagList,\r\n        BrandName: state.GeneralReducer.GeneralMasterSubType,\r\n        categotyDropDownLoading: state.ItemMastersReducer.categotyDropDownLoading,\r\n    }));\r\n\r\n    const location = { ...history.location }\r\n    const hasShowloction = location.hasOwnProperty(\"editValue\")\r\n    const hasShowModal = props.hasOwnProperty(\"editValue\")\r\n\r\n    // userAccess useEffect\r\n    useEffect(() => {\r\n        let userAcc = null;\r\n        let locationPath = location.pathname;\r\n\r\n        if (hasShowModal) {\r\n            locationPath = props.masterPath;\r\n        };\r\n\r\n        userAcc = userAccess.find((inx) => {\r\n            return (`/${inx.ActualPagePath}` === locationPath)\r\n        })\r\n\r\n        if (userAcc) {\r\n            setUserAccState(userAcc)\r\n            breadcrumbReturnFunc({ dispatch, userAcc });\r\n        };\r\n    }, [userAccess])\r\n\r\n    useEffect(() => {\r\n        const jsonBody = JSON.stringify({\r\n            Company: loginCompanyID(),\r\n            TypeID: 1\r\n        });\r\n        dispatch(GeneralMasterSubType(jsonBody));\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if ((hasShowloction || hasShowModal)) {\r\n\r\n            let hasEditVal = null\r\n            if (hasShowloction) {\r\n                setPageMode(location.pageMode)\r\n                hasEditVal = location.editValue\r\n            }\r\n            else if (hasShowModal) {\r\n                hasEditVal = props.editValue\r\n                setPageMode(props.pageMode)\r\n                setModalCss(true)\r\n            }\r\n            if (hasEditVal) {\r\n                setEditData(hasEditVal);\r\n                dispatch(Breadcrumb_inputName(hasEditVal.Name))\r\n\r\n                const editDivision = hasEditVal.ItemDivisionDetails.map(index => ({\r\n                    value: index.Party,\r\n                    label: index.PartyName\r\n                }))\r\n\r\n                const editCategoryType = {\r\n                    value: hasEditVal.ItemCategoryDetails[0].CategoryType,\r\n                    label: hasEditVal.ItemCategoryDetails[0].CategoryTypeName\r\n                }\r\n\r\n                const editCategory = hasEditVal.ItemCategoryDetails.map(index => ({\r\n                    value: index.Category,\r\n                    label: index.CategoryName\r\n                }))\r\n\r\n                const editBrandName = hasEditVal.BrandName.map(index => ({\r\n                    value: index.id,\r\n                    label: index.Name\r\n                }))\r\n\r\n\r\n                let initialFormValue = {\r\n                    // ====================== Base detail tab ======================\r\n\r\n                    Name: hasEditVal.Name,\r\n                    SAPItemCode: hasEditVal.SAPItemCode,\r\n                    ShortName: hasEditVal.ShortName,\r\n                    BarCode: hasEditVal.BarCode,\r\n                    Sequence: hasEditVal.Sequence,\r\n                    Company: { label: hasEditVal.CompanyName, value: hasEditVal.Company },\r\n                    CategoryType: editCategoryType,\r\n                    Category: editCategory,\r\n                    Division: editDivision,\r\n                    BaseUnit: { label: hasEditVal.BaseUnitName, value: hasEditVal.BaseUnitID },\r\n                    isActive: hasEditVal.isActive,\r\n                    IsSCM: hasEditVal.IsSCM,\r\n                    BrandName: editBrandName\r\n                }\r\n                // ====================== Images tab ======================\r\n\r\n\r\n\r\n                // if (hasEditVal.ItemImagesDetails.length === 0) {\r\n                //     setImageTabTable(imageTabTable)\r\n                // }\r\n                // let ItemImagesDetails = hasEditVal.ItemImagesDetails.map((index) => {\r\n                //     \r\n                //     if (index.ItemImagesDetails.length === 0) {\r\n                //         return setImageTabTable(imageTabTable)\r\n                //     }\r\n                //     else {\r\n                //         return {\r\n                //             ImageType:\r\n                //             {\r\n                //                 label: index.ImageTypeName,\r\n                //                 value: index.ImageType\r\n                //             },\r\n                //             ImageUpload: index.Item_pic,\r\n                //         }\r\n                //     }\r\n\r\n                // })\r\n                // setImageTabTable(ItemImagesDetails)\r\n\r\n                \r\n                let ItemShelfLife = hasEditVal.ItemShelfLife.map((index) => {\r\n\r\n                    return index.Days\r\n                })\r\n                setEditItemShelfLife(ItemShelfLife[0])\r\n                setIsShelfLife(ItemShelfLife[0])\r\n                // ====================== Unit Conversion tab  start ======================\r\n\r\n                const UnitDetails = []\r\n                hasEditVal.ItemUnitDetails.forEach((index, key) => {\r\n                    // if (!index.IsBase) {\r\n                    UnitDetails.push({\r\n                        id: key + 1,\r\n                        Unit: { label: index.UnitName, value: index.UnitID },\r\n                        Conversion: index.BaseUnitQuantity,\r\n                        IsBase: index.IsBase,\r\n                        POUnit: index.PODefaultUnit,\r\n                        SOUnit: index.SODefaultUnit,\r\n                    })\r\n                    // }\r\n                })\r\n\r\n\r\n                if ((UnitDetails.length === 0)) {\r\n\r\n                    UnitDetails.push(unitConversionInitial)\r\n                };\r\n\r\n\r\n                setPreviousBaseUnitTableData(JSON.parse(JSON.stringify(UnitDetails)));// Assign the deep copy to previousBaseUnitTableData\r\n                setBaseUnitTableData(UnitDetails);\r\n                // ====================== Weightage tab =================================\r\n\r\n                setWeightageTabMaster({\r\n                    Breadth: hasEditVal.Breadth,\r\n                    Grammage: hasEditVal.Grammage,\r\n                    Height: hasEditVal.Height,\r\n                    Length: hasEditVal.Length,\r\n                    StoringCondition: hasEditVal.StoringCondition,\r\n                })\r\n\r\n                setFormValue(initialFormValue);\r\n                // setImageTabTable(ItemImagesDetails)\r\n                setMRP_Tab_TableData(hasEditVal.ItemMRPDetails)\r\n                setMarginMaster(hasEditVal.ItemMarginDetails)\r\n                setGStDetailsMaster(hasEditVal.ItemGSTHSNDetails)\r\n                setGroup_Tab_TableData(hasEditVal.ItemGroupDetails)\r\n                seteditCreatedBy(hasEditVal.CreatedBy)\r\n                dispatch(editItemSuccess({ Status: false }))\r\n            }\r\n        }\r\n\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        dispatch(getcompanyList());\r\n        dispatch(getBaseUnit_ForDropDown());\r\n        dispatch(get_CategoryTypes_ForDropDown());\r\n        dispatch(getPartyListAPI());\r\n        dispatch(get_ImageType_ForDropDown());\r\n        dispatch(get_Division_ForDropDown());\r\n        dispatch(get_Party_ForDropDown());\r\n        // dispatch(priceListByCompay_Action());\r\n        dispatch(getCategoryTypelist());\r\n        dispatch(getItemTagName())\r\n        dispatch(getBrandTagName())\r\n\r\n    }, []);\r\n\r\n    useEffect(async () => {\r\n\r\n        if ((postMsg.Status === true) && (postMsg.StatusCode === 200) && !(pageMode === mode.dropdownAdd)) {\r\n            dispatch(SaveItemMasterActionSuccess({ Status: false }))\r\n            if (pageMode === mode.dropdownAdd) {\r\n                customAlert({\r\n                    Type: 1,\r\n                    Message: postMsg.Message,\r\n                })\r\n            }\r\n            else {\r\n                const promise = await customAlert({\r\n                    Type: 1,\r\n                    Message: postMsg.Message,\r\n                })\r\n                if (promise) {\r\n                    history.push({\r\n                        pathname: url.ITEM_lIST,\r\n                    })\r\n                }\r\n            }\r\n        }\r\n\r\n        else if (postMsg.Status === true) {\r\n            dispatch(SaveItemMasterActionSuccess({ Status: false }))\r\n            customAlert({\r\n                Type: 4,\r\n                Message: JSON.stringify(postMsg.Message),\r\n            })\r\n        }\r\n    }, [postMsg])\r\n\r\n    useEffect(() => {\r\n        if (updateMsg.Status === true && updateMsg.StatusCode === 200 && !modalCss) {\r\n            history.push({\r\n                pathname: url.ITEM_lIST,\r\n            })\r\n        } else if (updateMsg.Status === true && !modalCss) {\r\n            dispatch(updateItemMasterActionSuccess({ Status: false }));\r\n            customAlert({\r\n                Type: 3,\r\n                Message: JSON.stringify(updateMsg.Message),\r\n            })\r\n        }\r\n    }, [updateMsg, modalCss]);\r\n\r\n    const toggle1 = tab => {\r\n        if (activeTab1 !== tab) {\r\n            setactiveTab1(tab)\r\n        }\r\n    }\r\n\r\n    const BaseUnit_DropdownOptions = BaseUnit.map((data) => ({\r\n        value: data.id,\r\n        label: data.Name\r\n    }));\r\n\r\n    const CategoryTypeList_DropdownOptions = CategoryTypeList.map((data) => ({\r\n        value: data.id,\r\n        label: data.Name,\r\n    }));\r\n\r\n    const CategoryList_DropdownOptions = CategoryList.map((data) => ({\r\n        value: data.id,\r\n        label: data.Name,\r\n    }));\r\n\r\n    const Division_DropdownOptions = Division.map((data) => ({\r\n        value: data.id,\r\n        label: data.Name\r\n    }));\r\n\r\n    const BrandName_DropdownOptions = BrandName.map((data) => ({\r\n        value: data.id,\r\n        label: data.Name,\r\n    }));\r\n\r\n    function dropDownValidation(event, type,) {\r\n        let isval = (event.value === '')\r\n        if (isval) {\r\n            inValidDrop[type] = true\r\n            return\r\n        } else {\r\n            setFormValue((i) => {\r\n                return { ...i, [type]: event }\r\n            })\r\n            // formValue[type] = event\r\n            inValidDrop[type] = false\r\n\r\n        }\r\n        if (type === \"BaseUnit\") {\r\n            setBaseUnitTableData([{ ...unitConversionInitial, IsBase: true, Conversion: 1, Unit: event }])\r\n        }\r\n\r\n    }\r\n\r\n    function Common_Text_INPUT_Validation(value, type, key) {\r\n\r\n        let OnchangeControl = document.getElementById(`txt${type}${key}`)\r\n        if (value === '') {\r\n            OnchangeControl.className = 'form-control is-invalid'\r\n            return false\r\n        } else {\r\n            OnchangeControl.className = 'form-control';\r\n            return true\r\n        }\r\n    }\r\n\r\n    function CommonTab_SimpleText_INPUT_handller_ForAll(event, type, key) {\r\n\r\n        let validateReturn = Common_Text_INPUT_Validation(event, type, 0);\r\n\r\n        if (validateReturn === false) {\r\n            isValidate.push(`txt${type}0`)\r\n            return\r\n        } else {\r\n\r\n            formValue[type] = event\r\n            isValidate = isValidate.filter((indF) => {\r\n                return !(indF === `txt${type}0`)\r\n            })\r\n            setIsValidate(isValidate)\r\n        }\r\n\r\n    }\r\n\r\n    const CategoryType_Handler = (event) => {\r\n        dropDownValidation(event, \"CategoryType\");\r\n        setFormValue((i) => {\r\n            const a = { ...i };\r\n            a.Category = []\r\n            return { ...a }\r\n        })\r\n        dispatch(get_Category_By_CategoryType_ForDropDownAPI(event.value))\r\n    };\r\n\r\n    const Category_Handler = (event) => {\r\n        dropDownValidation(event, \"Category\")\r\n    };\r\n\r\n    const Division_Handler = (event) => {\r\n        dropDownValidation(event, \"Division\")\r\n    };\r\n\r\n    const BrandName_Handler = (event) => {\r\n        dropDownValidation(event, \"BrandName\")\r\n    };\r\n\r\n    const SaveHandler = (event) => {\r\n\r\n        event.preventDefault();\r\n        const btnId = event.target.id;\r\n        btnIsDissablefunc({ btnId, state: true })\r\n\r\n        try {\r\n            let isvalid = true\r\n            let inValidMsg = []\r\n\r\n            if (formValue.Name === '') {\r\n                document.getElementById(\"txtName0\").className = \"form-control is-invalid\"\r\n                inValidMsg.push(\"Name: Is Requried\")\r\n                isvalid = false\r\n            }\r\n            if (formValue.ShortName === '') {\r\n                document.getElementById(\"txtShortName0\").className = \"form-control is-invalid\"\r\n                isvalid = false\r\n                inValidMsg.push(\"ShortName: Is Requried\")\r\n            }\r\n\r\n            if (formValue.BaseUnit === '') {\r\n                setInValidDrop(i => {\r\n                    const a = { ...i }\r\n                    a.BaseUnit = true\r\n                    return a\r\n                })\r\n                isvalid = false\r\n                inValidMsg.push(\"BaseUnit: Is Requried\")\r\n\r\n            }\r\n            if (formValue.CategoryType.length < 1) {\r\n                setInValidDrop(i => {\r\n                    const a = { ...i }\r\n                    a.CategoryType = true\r\n                    return a\r\n                })\r\n                isvalid = false\r\n                inValidMsg.push(\"CategoryType: Is Requried\")\r\n            }\r\n            if (formValue.Category.length < 1) {\r\n                setInValidDrop(i => {\r\n                    const a = { ...i }\r\n                    a.Category = true\r\n                    return a\r\n                })\r\n                isvalid = false\r\n                inValidMsg.push(\"Category: Is Requried\")\r\n            }\r\n\r\n            if (formValue.Division.length < 1) {\r\n                setInValidDrop(i => {\r\n                    const a = { ...i }\r\n                    a.Division = true\r\n                    return a\r\n                })\r\n                isvalid = false\r\n                inValidMsg.push(\"Division:Is Requried\")\r\n            }\r\n\r\n            if (!Group_Tab_TableData.length > 0) {\r\n                isvalid = false\r\n                inValidMsg.push(\" GroupType Primary:Is Requried\")\r\n            }\r\n            else {\r\n                const found = Group_Tab_TableData.find(element => {\r\n                    return element.GroupTypeName === \"Primary\"\r\n                });\r\n                if (found === undefined) {\r\n                    isvalid = false;\r\n                    inValidMsg.push(\" GroupType Primary:Is Requried\")\r\n                }\r\n            }\r\n            if (isvalid) {  // ************* is valid if start \r\n\r\n                //**************** Brand Name **************** */\r\n                const ItemBrandName = formValue.BrandName.map((index) => {\r\n                    return index.value\r\n                })\r\n                // ====================== Unit conversion *****start ======================\r\n\r\n                const specificID = formValue.BaseUnit.value;\r\n                const isEditMode = pageMode === mode.edit; // Set the value based on your page mode\r\n                let isChangeBaseUnitTable = false; // Flag to track if there are any changes in the data\r\n\r\n                // Check if the page is in edit mode and compare the current and previous baseUnitTableData arrays\r\n                if (isEditMode) {\r\n                    // Check if the lengths of the arrays are different, indicating a change\r\n                    if (baseUnitTableData.length !== previousBaseUnitTableData.length) {\r\n                        isChangeBaseUnitTable = true;\r\n                    } else {\r\n                        // Compare each element of the arrays if their properties are different\r\n                        for (let i = 0; i < baseUnitTableData.length; i++) {\r\n                            const currentData = baseUnitTableData[i];\r\n                            const previousData = previousBaseUnitTableData[i];\r\n\r\n                            // If any property is different, set the isChange flag to true and break out of the loop\r\n                            if (\r\n                                currentData.Unit.value !== previousData.Unit.value ||\r\n                                Number(currentData.Conversion) !== Number(previousData.Conversion) ||\r\n                                currentData.IsBase !== previousData.IsBase ||\r\n                                currentData.SOUnit !== previousData.SOUnit ||\r\n                                currentData.POUnit !== previousData.POUnit\r\n                            ) {\r\n                                isChangeBaseUnitTable = true;\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                // Initialize the itemUnitDetails array and perform filtering and transformations using reduce\r\n                let itemUnitDetails = baseUnitTableData.reduce((result, index, key) => {\r\n                    const val1 = index.Conversion !== '' ? parseFloat(index.Conversion).toFixed(3) : '';\r\n                    const unit1 = index.Unit.value;\r\n\r\n                    // Check if there are any duplicates in the baseUnitTableData array\r\n                    const isDuplicate = baseUnitTableData.some((i, k) => {\r\n                        const inner = i.Conversion !== '' ? parseFloat(i.Conversion).toFixed(3) : '';\r\n                        return val1 === inner && unit1 === i.Unit.value && key !== k;\r\n                    });\r\n\r\n                    // Check if the combination of BaseUnitQuantity and UnitID already exists in the result array\r\n                    const isExisting = result.some((i, k) => {\r\n                        return val1 === i.BaseUnitQuantity && unit1 === i.UnitID && key !== k;\r\n                    });\r\n\r\n                    // Add the item to the result array if it's not a duplicate, not existing already, and not empty\r\n                    // Also, if in edit mode, exclude the item if its UnitID matches the specificID\r\n                    if (!isDuplicate && !isExisting && val1 !== '' && unit1 !== '' && !(isEditMode && unit1 === specificID)) {\r\n                        result.push({\r\n                            BaseUnitQuantity: index.Conversion,\r\n                            UnitID: unit1,\r\n                            IsBase: index.IsBase,\r\n                            SODefaultUnit: index.SOUnit,\r\n                            PODefaultUnit: index.POUnit\r\n                        });\r\n                    }\r\n\r\n                    return result;\r\n                }, []);\r\n\r\n                //If isChangeBaseUnitTable flase and edit mode true then  itemUnitDetails blanck array\r\n                if (!isChangeBaseUnitTable && isEditMode) {\r\n                    itemUnitDetails = []\r\n                }\r\n\r\n\r\n                //  ======================   ItemCategoryDetails *****start   ====================== \r\n\r\n                const ItemCategoryDetails = formValue.Category.map((index) => ({\r\n                    CategoryType: formValue.CategoryType.value,\r\n                    Category: index.value\r\n                }))\r\n                //  ======================   MRP_Tab_TableData *****start   ====================== \r\n\r\n                let hasAdd_MRP = []\r\n                MRP_Tab_TableData.forEach((index) => {\r\n                    if (index.IsAdd === true) { hasAdd_MRP.push(index) }\r\n                })\r\n\r\n                // ======================  marginMaster *****start   ====================== \r\n\r\n                let hasAdd_Margin = []\r\n\r\n                marginMaster.forEach((index) => {\r\n                    if (index.IsAdd === true) { hasAdd_Margin.push(index) }\r\n                })\r\n\r\n                // ======================  GStDetailsMaster *****start   ====================== \r\n\r\n                let hasAdd_GST = []\r\n\r\n                GStDetailsMaster.forEach((index) => {\r\n\r\n                    if (index.IsAdd === true) { hasAdd_GST.push(index) }\r\n                })\r\n\r\n\r\n                let imagedata = imageTabTable.map(function (index) {\r\n\r\n                    if ((index.ImageType === '') || (index.ImageUpload === '')) {\r\n\r\n\r\n                        return imageTabTable.length = []\r\n                    }\r\n                    else {\r\n                        return ({\r\n                            ImageType: index.ImageType.value,\r\n                            Item_pic: index.ImageUpload\r\n                        })\r\n                    }\r\n                })\r\n\r\n                let imagedata1 = imagedata.reduce(function (r, a) { return r.concat(a); }, []);\r\n\r\n                if (GStDetailsMaster.length === 0) {\r\n                    customAlert({\r\n                        Type: 4,\r\n                        Message: \"GST Details Required\",\r\n                    })\r\n                    return btnIsDissablefunc({ btnId, state: false });\r\n                }\r\n\r\n                const isShelfLifeArr = [];\r\n\r\n                if (Number(editItemShelfLife) !== isShelfLife) {\r\n                    isShelfLifeArr.push({\r\n                        Days: isShelfLife,\r\n                        CreatedBy: loginUserID(),\r\n                        UpdatedBy: loginUserID(),\r\n                        IsAdd: true\r\n                    });\r\n                }\r\n\r\n                const jsonBody = JSON.stringify({\r\n                    Name: formValue.Name,\r\n                    ShortName: formValue.ShortName,\r\n                    SAPItemCode: formValue.SAPItemCode,\r\n                    BarCode: formValue.BarCode,\r\n                    isActive: formValue.isActive,\r\n                    IsSCM: formValue.IsSCM,\r\n                    Company: loginCompanyID(),\r\n                    BaseUnitID: formValue.BaseUnit.value,\r\n                    BrandName: ItemBrandName.toString(),\r\n                    Tag: formValue.Tag,\r\n                    Sequence: formValue.Sequence,\r\n                    CreatedBy: loginUserID(),\r\n                    UpdatedBy: loginUserID(),\r\n                    Breadth: weightageTabMaster.Breadth,\r\n                    Grammage: weightageTabMaster.Grammage,\r\n                    Height: weightageTabMaster.Height,\r\n                    Length: weightageTabMaster.Length,\r\n                    StoringCondition: weightageTabMaster.StoringCondition,\r\n                    ItemCategoryDetails: ItemCategoryDetails,\r\n                    ItemUnitDetails: itemUnitDetails,\r\n\r\n                    ItemDivisionDetails: formValue.Division.map((i) => {\r\n                        return ({ Party: i.value })\r\n                    }),\r\n\r\n                    ItemImagesDetails: imagedata1,\r\n                    ItemMRPDetails: hasAdd_MRP,\r\n                    ItemMarginDetails: hasAdd_Margin,\r\n                    ItemGSTHSNDetails: hasAdd_GST,\r\n                    ItemGroupDetails: Group_Tab_TableData,\r\n                    ItemShelfLife: isShelfLifeArr\r\n                });\r\n\r\n                if (pageMode === mode.edit) {\r\n                    dispatch(updateItemMasterAction({ jsonBody, updateId: EditData.id, btnId }));\r\n                    console.log(jsonBody)\r\n                }\r\n                else {\r\n                    dispatch(saveItemMasterAction({ jsonBody, btnId }));\r\n                    console.log(jsonBody)\r\n                }\r\n            }                                                            // ************* is valid if start \r\n            else {                                                       // ************* is valid esle start \r\n                customAlert({\r\n                    Type: 4,\r\n                    Message: JSON.stringify(inValidMsg),\r\n                })\r\n                return btnIsDissablefunc({ btnId, state: false })\r\n\r\n            }\r\n\r\n        } catch (error) { btnIsDissablefunc({ btnId, state: false }) }\r\n    }\r\n\r\n\r\n    // When the user clicks anywhere outside of the modal, close it\r\n    window.onclick = function (event) {\r\n        var x = document.getElementById(\"itemtag\");\r\n        if (event.target == \"\") {\r\n            var x = document.getElementById(\"itemtag\");\r\n            x.style.display = \"none\";\r\n        }\r\n    }\r\n\r\n    let data1 = BrandTagList.map((index) => {\r\n        return index.dta\r\n    })\r\n\r\n    let data = ItemTagList.map((index) => {\r\n        return index.dta\r\n    })\r\n\r\n    const handleChange = event => {\r\n        // \r\n        dispatch(Breadcrumb_inputName(event.target.value));\r\n        CommonTab_SimpleText_INPUT_handller_ForAll(event.target.value, \"Name\")\r\n        var searchtext = event.target.value\r\n        const results = data.filter(person =>\r\n            person.toLowerCase().includes(searchtext)\r\n        );\r\n\r\n        setSearchResults(results);\r\n        var x = document.getElementById(\"itemtag\");\r\n        document.addEventListener('click', function handleClickOutsideBox(event) {\r\n            if (!x.contains(event.target)) {\r\n                x.style.display = 'none';\r\n            }\r\n        });\r\n        x.style.display = \"block\";\r\n        var di = \"100Px\"\r\n\r\n        if (event.target.value == \"\") {\r\n            di = `${x.style.display = \"none\"}`\r\n        }\r\n        else if (results.length == 0) {\r\n            di = `${x.style.display = \"none\"}`\r\n        }\r\n        else if (results.length < 2) {\r\n            di = \"50Px\"\r\n        } else if (results.length > 5) {\r\n            di = \"300Px\"\r\n        } else if (results.length < 2) {\r\n            di = \"50Px\"\r\n        }\r\n        x.style.height = di\r\n\r\n    };\r\n\r\n\r\n    const onclickselect = function () {\r\n        const hasNone = document.getElementById(\"itemtag\").style;\r\n\r\n        if (hasNone.display === \"none\") {\r\n            hasNone.display = \"block\";\r\n        } else {\r\n            hasNone.display = \"none\";\r\n        }\r\n    };\r\n\r\n\r\n    var IsEditMode_Css = ''\r\n    if ((modalCss) || (pageMode === \"dropdownAdd\")) { IsEditMode_Css = \"-5.5%\" };\r\n\r\n    if (!(userPageAccessState === '')) {\r\n        return (\r\n            <React.Fragment>\r\n                <div className=\"page-content\" style={{ marginTop: IsEditMode_Css, marginBottom: \"1cm\" }}>\r\n                    <MetaTags>{metaTagLabel(userPageAccessState)}</MetaTags>\r\n                    <Container fluid>\r\n                        <form >\r\n                            <Row>\r\n                                <Col lg={12}>\r\n                                    <Card className=\"text-black\" >\r\n                                        <CardHeader className=\"card-header   text-black c_card_header\" >\r\n                                            <h4 className=\"card-title text-black\">{userPageAccessState.PageDescription}</h4>\r\n                                            <p className=\"card-title-desc text-black\">{userPageAccessState.PageDescriptionDetails}</p>\r\n                                        </CardHeader>\r\n                                        <CardBody>\r\n                                            <Nav tabs className=\"nav-tabs-custom nav-justified\">\r\n                                                <NavItem>\r\n                                                    <NavLink\r\n                                                        id=\"nave-link-1\"\r\n                                                        style={{ cursor: \"pointer\" }}\r\n                                                        className={classnames({\r\n                                                            active: activeTab1 === \"1\",\r\n                                                        })}\r\n                                                        onClick={() => {\r\n                                                            toggle1(\"1\")\r\n                                                        }}\r\n                                                    >\r\n                                                        <span className=\"d-block d-sm-none\">\r\n                                                            <i className=\"fas fa-home\"></i>\r\n                                                        </span>\r\n                                                        <span className=\"d-none d-sm-block\">Basic Info</span>\r\n                                                    </NavLink>\r\n                                                </NavItem>\r\n                                                <NavItem>\r\n                                                    <NavLink\r\n                                                        id=\"nave-link-2\"\r\n                                                        style={{ cursor: \"pointer\" }}\r\n                                                        className={classnames({\r\n                                                            active: activeTab1 === \"2\",\r\n                                                        })}\r\n                                                        onClick={() => {\r\n                                                            toggle1(\"2\")\r\n                                                        }}\r\n                                                    >\r\n                                                        <span className=\"d-block d-sm-none\">\r\n                                                            <i className=\"fas fa-home\"></i>\r\n                                                        </span>\r\n                                                        <span className=\"d-none d-sm-block\">Item Group</span>\r\n\r\n                                                    </NavLink>\r\n                                                </NavItem>\r\n                                                <NavItem>\r\n                                                    <NavLink\r\n                                                        id=\"nave-link-3\"\r\n                                                        style={{ cursor: \"pointer\" }}\r\n                                                        className={classnames({\r\n                                                            active: activeTab1 === \"3\",\r\n                                                        })}\r\n                                                        onClick={() => {\r\n                                                            toggle1(\"3\")\r\n                                                        }}\r\n                                                    >\r\n                                                        <span className=\"d-block d-sm-none\">\r\n                                                            <i className=\"fas fa-home\"></i>\r\n                                                        </span>\r\n                                                        <span className=\"d-none d-sm-block\">Unit Conversions</span>\r\n                                                    </NavLink>\r\n                                                </NavItem>\r\n                                                <NavItem>\r\n                                                    <NavLink\r\n                                                        id=\"nave-link-5\"\r\n                                                        style={{ cursor: \"pointer\" }}\r\n                                                        className={classnames({\r\n                                                            active: activeTab1 === \"4\",\r\n                                                        })}\r\n                                                        onClick={() => {\r\n                                                            toggle1(\"4\")\r\n                                                        }}\r\n                                                    >\r\n                                                        <span className=\"d-block d-sm-none\">\r\n                                                            <i className=\"fas fa-home\"></i>\r\n                                                        </span>\r\n                                                        <span className=\"d-none d-sm-block\">Image</span>\r\n                                                    </NavLink>\r\n                                                </NavItem>\r\n\r\n                                                <NavItem>\r\n                                                    <NavLink\r\n                                                        id=\"nave-link-5\"\r\n                                                        style={{ cursor: \"pointer\" }}\r\n                                                        className={classnames({\r\n                                                            active: activeTab1 === \"5\",\r\n                                                        })}\r\n                                                        onClick={() => {\r\n                                                            toggle1(\"5\")\r\n                                                        }}\r\n                                                    >\r\n                                                        <span className=\"d-block d-sm-none\">\r\n                                                            <i className=\"fas fa-home\"></i>\r\n                                                        </span>\r\n                                                        <span className=\"d-none d-sm-block\">MRP</span>\r\n                                                    </NavLink>\r\n                                                </NavItem>\r\n\r\n                                                <NavItem>\r\n                                                    <NavLink\r\n                                                        id=\"nave-link-6\"\r\n                                                        style={{ cursor: \"pointer\" }}\r\n                                                        className={classnames({\r\n                                                            active: activeTab1 === \"6\",\r\n                                                        })}\r\n                                                        onClick={() => {\r\n                                                            toggle1(\"6\")\r\n                                                        }}\r\n                                                    >\r\n                                                        <span className=\"d-block d-sm-none\">\r\n                                                            <i className=\"fas fa-home\"></i>\r\n                                                        </span>\r\n                                                        <span className=\"d-none d-sm-block\">Margin</span>\r\n                                                    </NavLink>\r\n                                                </NavItem>\r\n\r\n                                                <NavItem>\r\n                                                    <NavLink\r\n                                                        id=\"nave-link-7\"\r\n                                                        style={{ cursor: \"pointer\" }}\r\n                                                        className={classnames({\r\n                                                            active: activeTab1 === \"7\",\r\n                                                        })}\r\n                                                        onClick={() => {\r\n                                                            toggle1(\"7\")\r\n                                                        }}\r\n                                                    >\r\n                                                        <span className=\"d-block d-sm-none\">\r\n                                                            <i className=\"fas fa-home\"></i>\r\n                                                        </span>\r\n                                                        <span className=\"d-none d-sm-block\">GST Details</span>\r\n                                                    </NavLink>\r\n                                                </NavItem>\r\n\r\n                                                <NavItem>\r\n                                                    <NavLink\r\n                                                        id=\"nave-link-8\"\r\n                                                        style={{ cursor: \"pointer\" }}\r\n                                                        className={classnames({\r\n                                                            active: activeTab1 === \"8\",\r\n                                                        })}\r\n                                                        onClick={() => {\r\n                                                            toggle1(\"8\")\r\n                                                        }}\r\n                                                    >\r\n                                                        <span className=\"d-block d-sm-none\">\r\n                                                            <i className=\"fas fa-home\"></i>\r\n                                                        </span>\r\n                                                        <span className=\"d-none d-sm-block\">Weightage</span>\r\n                                                    </NavLink>\r\n                                                </NavItem>\r\n                                            </Nav>\r\n\r\n                                            <TabContent activeTab={activeTab1} className=\"p-3 text-muted\">\r\n\r\n                                                <TabPane tabId=\"1\">{/* +++++++++++ TabPane tabId=\"1\" ++++++++++++++++++++++++++++++++++++++++++ */}\r\n                                                    <Col md={12}  >\r\n                                                        <Card className=\"text-black\">\r\n                                                            <CardBody className=\"c_card_body\">\r\n                                                                <Row>\r\n                                                                    <FormGroup className=\"mb-3 col col-sm-4 \" >\r\n                                                                        <Label >Name</Label>\r\n                                                                        <Input type=\"text\"\r\n                                                                            id='txtName0'\r\n                                                                            placeholder=\" Please Enter Name \"\r\n                                                                            defaultValue={EditData.Name}\r\n                                                                            autoComplete=\"off\"\r\n                                                                            autoFocus={true}\r\n                                                                            // value={searchTerm}\r\n                                                                            onClick={onclickselect}\r\n                                                                            onChange={handleChange}\r\n\r\n                                                                        />\r\n                                                                        <div id=\"itemtag\" >\r\n                                                                            <ul style={{}}>\r\n                                                                                {searchResults.map(item => (\r\n                                                                                    <li className=\"liitem\" >{item}</li>\r\n                                                                                ))}\r\n                                                                            </ul>\r\n                                                                        </div>\r\n                                                                    </FormGroup>\r\n\r\n                                                                    <FormGroup className=\"mb-3 col col-sm-4 \" >\r\n                                                                        <Label >ShortName</Label>\r\n                                                                        <Input type=\"text\"\r\n                                                                            id='txtShortName0'\r\n                                                                            className=\"\"\r\n                                                                            defaultValue={EditData.ShortName}\r\n                                                                            placeholder=\" Please Enter ShortName \"\r\n                                                                            autoComplete=\"off\"\r\n                                                                            onChange={(e) => { CommonTab_SimpleText_INPUT_handller_ForAll(e.target.value, \"ShortName\") }}\r\n                                                                        />\r\n                                                                    </FormGroup>\r\n\r\n                                                                    <FormGroup className=\" col col-sm-4 \" >\r\n                                                                        <Label >Shelf Life<samp className=\"text-secondary\">/Day</samp></Label>\r\n                                                                        <Input\r\n                                                                            type=\"text\"\r\n                                                                            rows=\"1\"\r\n                                                                            id='txtShelfLife0'\r\n                                                                            // defaultValue={pageMode === 'edit' ? isShelfLife : ''}\r\n                                                                            Value={isShelfLife}\r\n                                                                            placeholder=\" Please Enter Days \"\r\n                                                                            autoComplete=\"off\"\r\n                                                                            onChange={(e) => { setIsShelfLife(e.target.value) }}\r\n                                                                        />\r\n                                                                    </FormGroup>\r\n                                                                </Row>\r\n\r\n                                                                <Row>\r\n                                                                    <FormGroup className=\" col col-sm-4 \" >\r\n                                                                        <Label htmlFor=\"validationCustom21\">Base Unit</Label>\r\n                                                                        <Select\r\n                                                                            id='dropBaseUnit-0'\r\n                                                                            value={formValue.BaseUnit}\r\n                                                                            options={BaseUnit_DropdownOptions}\r\n                                                                            isDisabled={pageMode === \"edit\" ? true : false}\r\n                                                                            styles={{\r\n                                                                                control: base => ({\r\n                                                                                    ...base,\r\n                                                                                    border: inValidDrop.BaseUnit ? '1px solid red' : '',\r\n\r\n                                                                                })\r\n                                                                            }}\r\n                                                                            onChange={(event) => dropDownValidation(event, \"BaseUnit\")}\r\n                                                                        />\r\n                                                                    </FormGroup>\r\n\r\n                                                                    <FormGroup className=\"mb-3 col col-sm-4 \" >\r\n                                                                        <Label >BarCode</Label>\r\n                                                                        <Input\r\n                                                                            id='txtBarCode0'\r\n                                                                            placeholder=\" Please Enter BarCode \"\r\n                                                                            defaultValue={EditData.BarCode}\r\n                                                                            autoComplete=\"off\"\r\n                                                                            onChange={(e) => { CommonTab_SimpleText_INPUT_handller_ForAll(e.target.value, \"BarCode\") }}\r\n                                                                        />\r\n                                                                    </FormGroup>\r\n\r\n                                                                    <FormGroup className=\"mb-3 col col-sm-4 \" >\r\n                                                                        <Label >SAP Code</Label>\r\n                                                                        <Input\r\n                                                                            id='txtSAPItemCode0'\r\n                                                                            defaultValue={EditData.SAPItemCode}\r\n                                                                            placeholder=\" Please Enter SAP Code \"\r\n                                                                            autoComplete=\"off\"\r\n                                                                            onChange={(e) => { CommonTab_SimpleText_INPUT_handller_ForAll(e.target.value, \"SAPItemCode\") }}\r\n                                                                        />\r\n\r\n                                                                    </FormGroup>\r\n                                                                </Row>\r\n\r\n                                                                <Row>\r\n                                                                    <FormGroup className=\"mb-3 col col-sm-4 \">\r\n                                                                        <Label>Category Type</Label>\r\n                                                                        <Select\r\n                                                                            id={`dropCategoryType-${0}`}\r\n                                                                            value={formValue.CategoryType}\r\n                                                                            options={CategoryTypeList_DropdownOptions}\r\n                                                                            styles={{\r\n                                                                                control: base => ({\r\n                                                                                    ...base,\r\n                                                                                    border: inValidDrop.CategoryType ? '1px solid red' : '',\r\n                                                                                })\r\n                                                                            }}\r\n                                                                            onChange={(e) => { CategoryType_Handler(e) }}\r\n                                                                        />\r\n                                                                    </FormGroup>\r\n\r\n                                                                    <FormGroup className=\"mb-3 col col-sm-4 \">\r\n                                                                        <Label >Category</Label>\r\n                                                                        <C_Select\r\n                                                                            value={formValue.Category}\r\n                                                                            isMulti={true}\r\n                                                                            className=\"basic-multi-select\"\r\n                                                                            options={CategoryList_DropdownOptions}\r\n                                                                            isLoading={categotyDropDownLoading}\r\n                                                                            styles={{\r\n                                                                                control: base => ({\r\n                                                                                    ...base,\r\n                                                                                    border: inValidDrop.Category ? '1px solid red' : '',\r\n\r\n                                                                                })\r\n                                                                            }}\r\n                                                                            onChange={(e) => { Category_Handler(e) }}\r\n                                                                            classNamePrefix=\"select2-selection\"\r\n                                                                        />\r\n                                                                    </FormGroup>\r\n\r\n\r\n                                                                    <FormGroup className=\"mb-3 col col-sm-4 \">\r\n                                                                        <Label >Brand Name</Label>\r\n                                                                        <Select\r\n                                                                            defaultValue={formValue.BrandName}\r\n                                                                            isMulti={true}\r\n                                                                            className=\"basic-multi-select\"\r\n                                                                            options={BrandName_DropdownOptions}\r\n                                                                            styles={{\r\n                                                                                control: base => ({\r\n                                                                                    ...base,\r\n                                                                                    border: inValidDrop.BrandName ? '1px solid red' : '',\r\n\r\n                                                                                })\r\n                                                                            }}\r\n                                                                            onChange={(e) => { BrandName_Handler(e) }}\r\n                                                                            classNamePrefix=\"select2-selection\"\r\n                                                                        />\r\n                                                                    </FormGroup>\r\n                                                                </Row>\r\n\r\n                                                                <Row>\r\n                                                                    <FormGroup className=\" col col-sm-4 \">\r\n                                                                        <div className=\"mb-3\">\r\n                                                                            <Label >Division</Label>\r\n                                                                            <Select\r\n                                                                                defaultValue={formValue.Division}\r\n                                                                                isMulti={true}\r\n                                                                                className=\"basic-multi-select\"\r\n                                                                                options={Division_DropdownOptions}\r\n                                                                                styles={{\r\n                                                                                    control: base => ({\r\n                                                                                        ...base,\r\n                                                                                        border: (inValidDrop.Division) ? '1px solid red' : '',\r\n\r\n                                                                                    })\r\n                                                                                }}\r\n                                                                                onChange={(e) => { Division_Handler(e) }}\r\n                                                                                classNamePrefix=\"select2-selection\"\r\n                                                                            />\r\n                                                                        </div>\r\n                                                                    </FormGroup>\r\n\r\n                                                                    <FormGroup className=\" col col-sm-4 \" >\r\n                                                                        <Label >Item Tag</Label>\r\n                                                                        <Input\r\n                                                                            type=\"textarea\"\r\n                                                                            rows=\"1\"\r\n                                                                            id='txtTag0'\r\n                                                                            defaultValue={EditData.Tag}\r\n                                                                            placeholder=\" Please Enter Item Tag \"\r\n                                                                            autoComplete=\"off\"\r\n                                                                            onChange={(e) => { CommonTab_SimpleText_INPUT_handller_ForAll(e.target.value, \"Tag\") }}\r\n                                                                        />\r\n                                                                    </FormGroup>\r\n\r\n                                                                    <FormGroup className=\" col col-sm-4 \" >\r\n                                                                        <Label >Sequence</Label>\r\n                                                                        <Input\r\n                                                                            type=\"text\"\r\n                                                                            rows=\"1\"\r\n                                                                            id='txtSequence0'\r\n                                                                            defaultValue={EditData.Sequence}\r\n                                                                            placeholder=\" Please Enter Sequence \"\r\n                                                                            autoComplete=\"off\"\r\n                                                                            onChange={(e) => { CommonTab_SimpleText_INPUT_handller_ForAll(e.target.value, \"Sequence\") }}\r\n                                                                        />\r\n                                                                    </FormGroup>\r\n\r\n                                                                </Row>\r\n                                                                <Row >\r\n                                                                    <FormGroup className=\" col col-md-4\">\r\n                                                                        <Row className=\"justify-content-ml-left \">\r\n                                                                            <Label htmlFor=\"horizontal-firstname-input\"\r\n                                                                                className=\"col-md-3 col-form-label\" >Active </Label>\r\n                                                                            <Col md={6} style={{ marginTop: '9px' }} >\r\n\r\n                                                                                <div className=\"form-check form-switch form-switch-md mb-3\" dir=\"ltr\">\r\n                                                                                    <Input type=\"checkbox\" className=\"form-check-input\" id=\"customSwitchsizemd\"\r\n                                                                                        defaultChecked={formValue.isActive}\r\n                                                                                        onChange={(e) => { formValue.isActive = e.target.checked }}\r\n\r\n                                                                                    />\r\n                                                                                </div>\r\n                                                                            </Col>\r\n                                                                        </Row>\r\n                                                                    </FormGroup>\r\n\r\n\r\n                                                                    <FormGroup className=\" col col-md-4\">\r\n                                                                        <Row className=\"justify-content-ml-left \">\r\n                                                                            <Label htmlFor=\"horizontal-firstname-input\"\r\n                                                                                className=\"col-md-3 col-form-label\" >IsSCM </Label>\r\n                                                                            <Col md={6} style={{ marginTop: '9px' }} >\r\n\r\n                                                                                <div className=\"form-check form-switch form-switch-md mb-3\" dir=\"ltr\">\r\n                                                                                    <Input type=\"checkbox\" className=\"form-check-input\" id=\"customSwitchsizemd\"\r\n                                                                                        defaultChecked={formValue.IsSCM}\r\n                                                                                        onChange={(e) => { formValue.IsSCM = e.target.checked }}\r\n\r\n                                                                                    />\r\n                                                                                </div>\r\n                                                                            </Col>\r\n                                                                        </Row>\r\n                                                                    </FormGroup>\r\n                                                                </Row>\r\n\r\n\r\n                                                            </CardBody>\r\n                                                        </Card>\r\n                                                    </Col>\r\n\r\n                                                </TabPane>\r\n\r\n                                                <TabPane tabId=\"2\">{/* +++++++++++ TabPane Group Type ++++++++++++++++++++++++++++++++++++++++++ */}\r\n                                                    <Row>\r\n                                                        <Col md={12}  >\r\n                                                            <Row className=\"mt-3\">\r\n                                                                <Col className=\" col col-12 \">\r\n                                                                    <GroupTab tableData={Group_Tab_TableData} func={setGroup_Tab_TableData} />\r\n                                                                </Col>\r\n                                                            </Row>\r\n                                                        </Col>\r\n                                                    </Row>\r\n                                                </TabPane>\r\n\r\n\r\n                                                <TabPane tabId=\"3\">{/* ++++++++++++ TabPane UnitConverstion ++++++++++++++++++++++++++++++++++++++++++ */}\r\n                                                    <UnitConverstion\r\n                                                        state={{\r\n                                                            pageMode: pageMode,\r\n                                                            formValue: formValue,\r\n                                                            TableData: baseUnitTableData,\r\n                                                            BaseUnit: BaseUnit\r\n                                                        }}\r\n                                                        settable={setBaseUnitTableData}\r\n                                                        setFormValue={setFormValue}\r\n                                                    />\r\n                                                </TabPane>\r\n                                                <TabPane tabId=\"4\">{/* ++++++++++++ TabPane Item Image ++++++++++++++++++++++++++++++++++++++++++ */}\r\n                                                    <Image state={{\r\n                                                        imageTable: imageTabTable,\r\n                                                        setImageTable: setImageTabTable\r\n                                                    }}\r\n                                                    />\r\n                                                </TabPane>\r\n\r\n                                                <TabPane tabId=\"5\">{/* ++++++++++++ TabPane MRP_Tab ++++++++++++++++++++++++++++++++++++++++++ */}\r\n                                                    <Row>\r\n                                                        <Col md={12}  >\r\n                                                            <Row className=\"mt-3\">\r\n                                                                <Col className=\" col col-12 \">\r\n                                                                    <MRPTab tableData={MRP_Tab_TableData} func={setMRP_Tab_TableData} />\r\n                                                                </Col>\r\n                                                            </Row>\r\n                                                        </Col>\r\n                                                    </Row>\r\n                                                </TabPane>\r\n\r\n                                                <TabPane tabId=\"6\">{/* ++++++++++++ TabPane Margin ++++++++++++++++++++++++++++++++++++++++++ */}\r\n                                                    <Row>\r\n                                                        <Col md={12}  >\r\n                                                            <Row className=\"mt-3\">\r\n                                                                <Col className=\" col col-12 \">\r\n                                                                    <Margin_Tab tableData={marginMaster} func={setMarginMaster} />\r\n                                                                </Col>\r\n                                                            </Row>\r\n                                                        </Col>\r\n                                                    </Row>\r\n                                                </TabPane>\r\n\r\n                                                <TabPane tabId=\"7\">{/* +++++++++++++ TabPane Gst ++++++++++++++++++++++++++++++++++++++++++ */}\r\n                                                    <Row>\r\n                                                        <Col md={12}  >\r\n                                                            <Row className=\"mt-3\">\r\n                                                                <Col className=\" col col-12 \">\r\n                                                                    <GSTTab tableData={GStDetailsMaster} func={setGStDetailsMaster} />\r\n                                                                </Col>\r\n                                                            </Row>\r\n                                                        </Col>\r\n                                                    </Row>\r\n                                                </TabPane>\r\n\r\n                                                <TabPane tabId=\"8\">{/* +++++++++++++ TabPane Gst ++++++++++++++++++++++++++++++++++++++++++ */}\r\n                                                    <Row>\r\n                                                        <Col md={12}  >\r\n                                                            <Row className=\"mt-3\">\r\n                                                                <Col className=\" col col-12 \">\r\n                                                                    <WeightageTab weightageTabMaster={weightageTabMaster} setWeightageTabMaster={setWeightageTabMaster} />\r\n                                                                </Col>\r\n                                                            </Row>\r\n                                                        </Col>\r\n                                                    </Row>\r\n                                                </TabPane>\r\n                                            </TabContent>\r\n\r\n                                            <Row >{/* +++++++++++++++++++++++++++ Save Button  ++++++++++++++++++++++++++++++++++++++++++ */}\r\n                                                <Col sm={2}>\r\n                                                    <SaveButton\r\n                                                        loading={saveBtnloading}\r\n                                                        pageMode={pageMode}\r\n                                                        onClick={SaveHandler}\r\n                                                        userAcc={userPageAccessState}\r\n                                                        editCreatedBy={editCreatedBy}\r\n                                                        module={\"Item\"}\r\n                                                    />\r\n\r\n                                                </Col>\r\n                                            </Row>\r\n                                        </CardBody>\r\n                                    </Card>\r\n                                </Col>\r\n                            </Row>\r\n\r\n                        </form>\r\n                    </Container>\r\n                </div >\r\n            </React.Fragment >\r\n        );\r\n    }\r\n    else {\r\n        return (\r\n            <React.Fragment></React.Fragment>\r\n        )\r\n    }\r\n};\r\nexport default ItemsMaster;\r\n\r\n\r\n\r\n\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\SearchBox\\SerachBox3.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\SearchBox\\SearchBoxSecond.js",["3003","3004","3005","3006","3007","3008","3009"],"import React, { useEffect, useState } from 'react'\r\nimport { useSelector } from 'react-redux';\r\nimport './Search.scss'\r\n// import { Search } from \"react-bootstrap-table2-toolkit\";\r\n// let view = false;\r\n// const onchange = (e) => {\r\n//     e.preventDefault();\r\n//     view = e.target.value.length\r\n// }\r\nexport default function SearchBoxSecond() {\r\n    // const { SearchBar } = Search;\r\n\r\n    const [searchRoleData, setSearchRoleData] = useState([])\r\n    // const  RoleAccessData=demoRolleAcess\r\n\r\n    const { RoleAccessData, searchProps } = useSelector((state) => ({\r\n        RoleAccessData: state.Login.RoleData,\r\n        searchProps: state.BreadcrumbReducer.searchProps,\r\n    }));\r\n\r\n    useEffect(() => {\r\n\r\n        let SearchRoleData_initial = []\r\n\r\n        RoleAccessData.map((i) => {\r\n            i.ModuleData.map((index) => {\r\n                SearchRoleData_initial.push(index)\r\n            })\r\n        })\r\n        setSearchRoleData(SearchRoleData_initial)\r\n    }, [RoleAccessData])\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        function autocomplete(inp, arr) {\r\n            /*the autocomplete function takes two arguments,\r\n            the text field element and an array of possible autocompleted values:*/\r\n            var currentFocus;\r\n            /*execute a function when someone writes in the text field:*/\r\n\r\n            inp.addEventListener(\"input\", function (e) {\r\n\r\n                var a, b, i, val = this.value;\r\n                /*close any already open lists of autocompleted values*/\r\n                closeAllLists();\r\n                if (!val) { return false; }\r\n                // var a = input.value\r\n\r\n                if (val[0] === \"/\") {\r\n                    val = val.substring(1);\r\n                } else {\r\n                    return false;\r\n                }\r\n                currentFocus = -1;\r\n                /*create a DIV element that will contain the items (values):*/\r\n                a = document.createElement(\"DIV\");\r\n                a.setAttribute(\"id\", this.id + \"autocomplete-list\");\r\n                a.setAttribute(\"class\", \"autocomplete-items\");\r\n                /*append the DIV element as a child of the autocomplete container:*/\r\n                this.parentNode.appendChild(a);\r\n                /*for each item in the array...*/\r\n                for (i = 0; i < arr.length; i++) {\r\n                    /*check if the item starts with the same letters as the text field value:*/\r\n                    if (arr[i].Name.substr(0, val.length).toUpperCase() === val.toUpperCase()) {\r\n                        /*create a DIV element for each matching element:*/\r\n                        b = document.createElement(\"DIV\");\r\n                        /*make the matching letters bold:*/\r\n                        b.innerHTML = \"<strong>\" + arr[i].Name.substr(0, val.length) + \"</strong>\";\r\n                        b.innerHTML += arr[i].Name.substr(val.length);\r\n                        /*insert a input field that will hold the current array item's value:*/\r\n                        b.innerHTML += \"<input type='hidden' id='\" + i + \"' value='\" + arr[i].Name + \"'>\";\r\n                        //  var ActualPagePath=arr[i].ActualPagePath\r\n                        // alert(ActualPagePath)\r\n                        /*execute a function when someone clicks on the item value (DIV element):*/\r\n                        b.addEventListener(\"click\", function (e) {\r\n                            /*insert the value for the autocomplete text field:*/\r\n                            inp.value = this.getElementsByTagName(\"input\")[0].value;\r\n                            var input_id = this.getElementsByTagName(\"input\")[0].id;\r\n\r\n                            // alert(input_id)\r\n                            var ActualPagePath = arr[input_id].ActualPagePath\r\n                            window.location.href = (ActualPagePath)\r\n                            // window.open(ActualPagePath)\r\n                            /*close the list of autocompleted values,\r\n                            (or any other open lists of autocompleted values:*/\r\n                            closeAllLists();\r\n                        });\r\n                        a.appendChild(b);\r\n                    }\r\n                }\r\n            });\r\n            /*execute a function presses a key on the keyboard:*/\r\n            inp.addEventListener(\"keydown\", function (e) {\r\n                // \r\n                var x = document.getElementById(this.id + \"autocomplete-list\");\r\n                if (x) x = x.getElementsByTagName(\"div\");\r\n                if (e.keyCode === 40) {\r\n                    /*If the arrow DOWN key is pressed,\r\n                    increase the currentFocus variable:*/\r\n                    currentFocus++;\r\n                    /*and and make the current item more visible:*/\r\n                    addActive(x);\r\n                } else if (e.keyCode === 38) { //up\r\n                    /*If the arrow UP key is pressed,\r\n                    decrease the currentFocus variable:*/\r\n                    currentFocus--;\r\n                    /*and and make the current item more visible:*/\r\n                    addActive(x);\r\n                } else if (e.keyCode === 13) {\r\n                    /*If the ENTER key is pressed, prevent the form from being submitted,*/\r\n                    e.preventDefault();\r\n                    if (currentFocus > -1) {\r\n                        /*and simulate a click on the \"active\" item:*/\r\n                        if (x) x[currentFocus].click();\r\n                    }\r\n                }\r\n            });\r\n            function addActive(x) {\r\n                /*a function to classify an item as \"active\":*/\r\n                if (!x) return false;\r\n                /*start by removing the \"active\" class on all items:*/\r\n                removeActive(x);\r\n                if (currentFocus >= x.length) currentFocus = 0;\r\n                if (currentFocus < 0) currentFocus = (x.length - 1);\r\n                /*add class \"autocomplete-active\":*/\r\n                x[currentFocus].classList.add(\"autocomplete-active\");\r\n            }\r\n            function removeActive(x) {\r\n                /*a function to remove the \"active\" class from all autocomplete items:*/\r\n                for (var i = 0; i < x.length; i++) {\r\n                    x[i].classList.remove(\"autocomplete-active\");\r\n                }\r\n            }\r\n            function closeAllLists(elmnt) {\r\n                /*close all autocomplete lists in the document,\r\n                except the one passed as an argument:*/\r\n                var x = document.getElementsByClassName(\"autocomplete-items\");\r\n                for (var i = 0; i < x.length; i++) {\r\n                    if (elmnt != x[i] && elmnt != inp) {\r\n                        x[i].parentNode.removeChild(x[i]);\r\n                    }\r\n                }\r\n            }\r\n            /*execute a function when someone clicks in the document:*/\r\n            document.addEventListener(\"click\", function (e) {\r\n                closeAllLists(e.target);\r\n            });\r\n        }\r\n\r\n        /*An array containing all the country names in the world:*/\r\n\r\n\r\n\r\n        var countries = [\r\n            {\r\n                ID: 2,\r\n                Name: \"Module List\",\r\n                DisplayIndex: 2,\r\n                Icon: \"Module List\",\r\n                ActualPagePath: \"/ModulesList\"\r\n            },\r\n            {\r\n                ID: 3,\r\n                Name: \"Modules Master\",\r\n                DisplayIndex: 1,\r\n                Icon: \"Modules Master\",\r\n                ActualPagePath: \"ModulesMaster\"\r\n            },\r\n            {\r\n                ID: 4,\r\n                Name: \"Company Master\",\r\n                DisplayIndex: 3,\r\n                Icon: \"Companys Master\",\r\n                ActualPagePath: \"companyMaster\"\r\n            },\r\n            {\r\n                ID: 5,\r\n                Name: \"Company List\",\r\n                DisplayIndex: 3,\r\n                Icon: \"CompanyList\",\r\n                ActualPagePath: \"companyList\"\r\n            },\r\n            {\r\n                ID: 6,\r\n                Name: \"Pages Master\",\r\n                DisplayIndex: 5,\r\n                Icon: \"pagesMaster\",\r\n                ActualPagePath: \"pagesMaster\"\r\n            },\r\n            {\r\n                ID: 7,\r\n                Name: \"Pages List\",\r\n                DisplayIndex: 3,\r\n                Icon: \"Pages List\",\r\n                ActualPagePath: \"PagesList\"\r\n            },\r\n            {\r\n                ID: 8,\r\n                Name: \"Users List\",\r\n                DisplayIndex: 8,\r\n                Icon: \"Users List\",\r\n                ActualPagePath: \"usersList\"\r\n            },\r\n            {\r\n                ID: 9,\r\n                Name: \"Users Master\",\r\n                DisplayIndex: 7,\r\n                Icon: \"Users Master\",\r\n                ActualPagePath: \"usersMaster\"\r\n            },\r\n            {\r\n                ID: 2,\r\n                Name: \"Module List1\",\r\n                DisplayIndex: 2,\r\n                Icon: \"Module List\",\r\n                ActualPagePath: \"/ModulesList\"\r\n            }, {\r\n                ID: 2,\r\n                Name: \"Module List2\",\r\n                DisplayIndex: 2,\r\n                Icon: \"Module List\",\r\n                ActualPagePath: \"/ModulesList\"\r\n            }, {\r\n                ID: 2,\r\n                Name: \"Module List3\",\r\n                DisplayIndex: 2,\r\n                Icon: \"Module List\",\r\n                ActualPagePath: \"/ModulesList\"\r\n            }, {\r\n                ID: 2,\r\n                Name: \"Module List4\",\r\n                DisplayIndex: 2,\r\n                Icon: \"Module List\",\r\n                ActualPagePath: \"/ModulesList\"\r\n            },\r\n        ]\r\n\r\n\r\n        /*initiate the autocomplete function on the \"myInput\" element, and pass along the countries array as possible autocomplete values:*/\r\n        autocomplete(document.getElementById(\"myInput\"), searchRoleData);\r\n\r\n    }, [searchRoleData])\r\n\r\n    // searchProps2 = searchProps\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <MySearch />\r\n        </React.Fragment>\r\n\r\n\r\n    )\r\n}\r\n\r\nlet props2 = function onSearch() { }\r\n\r\nexport const mySearchProps1 = (props1) => {\r\n    props2 = props1;\r\n};\r\n\r\n// let input;\r\n// const handleClick = () => {\r\n//     props2.onSearch(input.value);\r\n// };\r\n// function onChange2() {\r\n    \r\n//     var a = input.value\r\n\r\n//     if (!(a[0] === \"/\")) {\r\n//         const str = a.substring(1);\r\n//         props2.onSearch(str);\r\n//     }\r\n// }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst MySearch = () => {\r\n    \r\n\r\n    // let input;\r\n    const handleClick = (e) => {\r\n        \r\n        var a = e.target.value\r\n\r\n    if (!(a[0] === \"/\")) {\r\n        const str = a.substring(1);\r\n        props2.onSearch(str);\r\n    }\r\n    };\r\n    function onChange() {\r\n       \r\n    }\r\n    return (\r\n        <div className=\"app-search d-none d-lg-block \" style={{ marginTop: \"-3px\" }} autocomplete=\"off\">\r\n            <div className=\"position-relative\">\r\n                {/* <input\r\n                    id=\"myInput\"\r\n                    className=\"form-control\"\r\n                    placeholder=\"Search...\"\r\n                    // style={{ backgroundColor: 'pink' }}\r\n                    // ref={n => input = n}\r\n                    type=\"text\"\r\n                    onChange={handleClick}\r\n                    name=\"myCountry\"\r\n                /> */}\r\n                <button className=\"btn btn-primary\"\r\n                    onClick={handleClick}\r\n                    type=\"button\">\r\n                    {/* <i className=\"bx bx-search-alt align-middle\" /> */}\r\n                    <i class=\"mdi mdi-magnify\"/>\r\n                </button>\r\n\r\n            </div>\r\n        </div>\r\n    );\r\n}","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\RoleMasterPages\\RoleMaster.js",["3010","3011","3012","3013","3014","3015","3016","3017"],"import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  Card,\r\n  CardBody,\r\n  Col,\r\n  Container,\r\n  Row,\r\n  Label,\r\n  CardHeader,\r\n  FormGroup,\r\n  Input\r\n} from \"reactstrap\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  userEditActionSuccess,\r\n  postRole,\r\n  userUpdateAction,\r\n  PostSuccess\r\n} from \"../../../store/Administrator/RoleMasterRedux/action\";\r\nimport {\r\n  commonPageField,\r\n  commonPageFieldSuccess,\r\n  userUpdateActionSuccess\r\n} from \"../../../store/actions\";\r\nimport Select from \"react-select\";\r\nimport { Breadcrumb_inputName } from \"../../../store/Utilites/Breadcrumb/actions\";\r\nimport { MetaTags } from \"react-meta-tags\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { getEmployeeTypelist } from \"../../../store/Administrator/EmployeeTypeRedux/action\";\r\nimport {\r\n  comAddPageFieldFunc,\r\n  formValid,\r\n  initialFiledFunc,\r\n  onChangeSelect,\r\n  onChangeText,\r\n  resetFunction,\r\n} from \"../../../components/Common/validationFunction\";\r\nimport { SaveButton } from \"../../../components/Common/CommonButton\";\r\nimport {\r\n  breadcrumbReturnFunc,\r\n  btnIsDissablefunc,\r\n  loginCompanyID,\r\n  loginIsSCMCompany,\r\n  loginUserID,\r\n  metaTagLabel\r\n} from \"../../../components/Common/CommonFunction\";\r\nimport * as url from \"../../../routes/route_url\";\r\nimport * as pageId from \"../../../routes/allPageID\"\r\nimport * as mode from \"../../../routes/PageMode\"\r\nimport AddMaster from \"../EmployeePages/Drodown\";\r\nimport EmployeeTypesMaster from \"../EmployeeTypes/EmployeeTypesMaster\";\r\nimport { customAlert } from \"../../../CustomAlert/ConfirmDialog\";\r\n\r\n\r\nconst RoleMaster = (props) => {\r\n\r\n  const dispatch = useDispatch();\r\n  const history = useHistory()\r\n\r\n  const fileds = {\r\n    id: \"\",\r\n    Name: \"\",\r\n    Description: \"\",\r\n    Dashboard: \"\",\r\n    RoleEmployeeTypes: \"\",\r\n    isActive: true,\r\n    isSCMRole: loginIsSCMCompany() > 0 ? true : false,\r\n    IsPartyConnection: false\r\n  }\r\n\r\n  const [state, setState] = useState(() => initialFiledFunc(fileds))\r\n  const [pageMode, setPageMode] = useState(mode.defaultsave);\r\n  const [modalCss, setModalCss] = useState(false);\r\n  const [userPageAccessState, setUserAccState] = useState(123);\r\n  const [editCreatedBy, seteditCreatedBy] = useState(\"\");\r\n  const [employeeTypes_AddAccess, setEmployeeTypes_AddAccess] = useState(false)\r\n  //Access redux store Data /  'save_ModuleSuccess' action data\r\n  const {\r\n    postMsg,\r\n    updateMsg,\r\n    pageField,\r\n    userAccess,\r\n    saveBtnloading,\r\n    EmployeeType } = useSelector((state) => ({\r\n      saveBtnloading: state.RoleMaster_Reducer.saveBtnloading,\r\n      postMsg: state.RoleMaster_Reducer.postMsg,\r\n      updateMsg: state.RoleMaster_Reducer.updateMsg,\r\n      EmployeeType: state.EmployeeTypeReducer.EmployeeTypeList,\r\n      userAccess: state.Login.RoleAccessUpdateData,\r\n      pageField: state.CommonPageFieldReducer.pageField\r\n    }));\r\n\r\n  useEffect(() => {\r\n    const page_Id = pageId.ROLE\r\n    dispatch(commonPageFieldSuccess());\r\n    dispatch(commonPageField(page_Id))\r\n    dispatch(getEmployeeTypelist());\r\n  }, []);\r\n\r\n  const location = { ...history.location }\r\n  const hasShowloction = location.hasOwnProperty(mode.editValue)\r\n  const hasShowModal = props.hasOwnProperty(mode.editValue)\r\n\r\n  const values = { ...state.values }\r\n  const { isError } = state;\r\n  const { fieldLabel } = state;\r\n\r\n  // userAccess useEffect\r\n  useEffect(() => {\r\n    let userAcc = null;\r\n    let locationPath = location.pathname;\r\n\r\n    if (hasShowModal) {\r\n      locationPath = props.masterPath;\r\n    };\r\n\r\n    userAcc = userAccess.find((index) => {\r\n      if (index.id === pageId.PARTYTYPE) {\r\n        setEmployeeTypes_AddAccess(true)\r\n      }\r\n      return (`/${index.ActualPagePath}` === locationPath)\r\n    })\r\n\r\n    if (userAcc) {\r\n      setUserAccState(userAcc)\r\n      breadcrumbReturnFunc({ dispatch, userAcc });\r\n    };\r\n\r\n    userAccess.find((index) => {\r\n      if (index.id === pageId.EMPLOYEETYPE) {\r\n        return setEmployeeTypes_AddAccess(true)\r\n      }\r\n    });\r\n  }, [userAccess])\r\n\r\n  useEffect(() => {\r\n\r\n    if ((hasShowloction || hasShowModal)) {\r\n\r\n      let hasEditVal = null\r\n      if (hasShowloction) {\r\n        setPageMode(location.pageMode)\r\n        hasEditVal = location.editValue\r\n      }\r\n      else if (hasShowModal) {\r\n        hasEditVal = props.editValue\r\n        setPageMode(props.pageMode)\r\n        setModalCss(true)\r\n      }\r\n\r\n      if (hasEditVal) {\r\n        const listItems = hasEditVal.RoleEmployeeTypes.map((data) => ({\r\n          value: data.EmployeeType,\r\n          label: data.EmployeeTypeName\r\n        }))\r\n\r\n        const { id, Name, Description, Dashboard, isActive, isSCMRole, IsPartyConnection } = hasEditVal\r\n        const { values, fieldLabel, hasValid, required, isError } = { ...state }\r\n\r\n        hasValid.Name.valid = true;\r\n        hasValid.Description.valid = true;\r\n        hasValid.Dashboard.valid = true;\r\n        hasValid.isActive.valid = true;\r\n        hasValid.isSCMRole.valid = true;\r\n        hasValid.IsPartyConnection.valid = true;\r\n        hasValid.RoleEmployeeTypes.valid = true;\r\n\r\n        values.id = id\r\n        values.Name = Name\r\n        values.Description = Description\r\n        values.Dashboard = Dashboard\r\n        values.isActive = isActive\r\n        values.isSCMRole = isSCMRole\r\n        values.IsPartyConnection = IsPartyConnection\r\n        values.RoleEmployeeTypes = listItems;\r\n\r\n        setState({ values, fieldLabel, hasValid, required, isError })\r\n        dispatch(Breadcrumb_inputName(hasEditVal.Name))\r\n        seteditCreatedBy(hasEditVal.CreatedBy)\r\n      }\r\n      dispatch(userEditActionSuccess({ Status: false }))\r\n    }\r\n  }, [])\r\n\r\n  useEffect(async () => {\r\n    if ((postMsg.Status === true) && (postMsg.StatusCode === 200) && !(pageMode === \"dropdownAdd\")) {\r\n      dispatch(PostSuccess({ Status: false }))\r\n      setState(() => resetFunction(fileds, state))// Clear form values  \r\n      dispatch(Breadcrumb_inputName(''))\r\n\r\n      if (pageMode === mode.dropdownAdd) {\r\n        customAlert({\r\n          Type: 1,\r\n          Message: postMsg.Message,\r\n      })\r\n      }\r\n      else {\r\n        let isPermission = await customAlert({\r\n          Type: 1,\r\n          Status: true,\r\n          Message: postMsg.Message,\r\n      })\r\n      if (isPermission) {\r\n          history.push({ pathname: url.ROLE_lIST })\r\n      }\r\n      }\r\n    }\r\n    else if ((postMsg.Status === true) && !(pageMode === \"dropdownAdd\")) {\r\n      dispatch(PostSuccess({ Status: false }))\r\n      customAlert({\r\n        Type: 4,\r\n         Message: JSON.stringify(postMsg.Message),\r\n    })\r\n    }\r\n  }, [postMsg.Status])\r\n\r\n  useEffect(() => {\r\n    if (updateMsg.Status === true && updateMsg.StatusCode === 200 && !modalCss) {\r\n      setState(() => resetFunction(fileds, state))// Clear form values  \r\n      history.push({\r\n        pathname: url.ROLE_lIST,\r\n      })\r\n    } else if (updateMsg.Status === true && !modalCss) {\r\n      dispatch(userUpdateActionSuccess({ Status: false }));\r\n      customAlert({\r\n                Type: 3,\r\n                Message: JSON.stringify(updateMsg.Message),\r\n            })\r\n    }\r\n  }, [updateMsg, modalCss]);\r\n\r\n  useEffect(() => {\r\n\r\n    if (pageField) {\r\n      const fieldArr = pageField.PageFieldMaster\r\n      comAddPageFieldFunc({ state, setState, fieldArr })\r\n    }\r\n  }, [pageField])\r\n\r\n  const EmployeeType_DropdownOptions = EmployeeType.map((data) => ({\r\n    value: data.id,\r\n    label: data.Name\r\n  }));\r\n\r\n  const SaveHandler = (event) => {\r\n    event.preventDefault();\r\n    const btnId = event.target.id\r\n    try {\r\n      if (formValid(state, setState)) {\r\n        btnIsDissablefunc({ btnId, state: true })\r\n        const jsonBody = JSON.stringify({\r\n          Name: values.Name,\r\n          Description: values.Description,\r\n          Dashboard: values.Dashboard,\r\n          isActive: values.isActive,\r\n          isSCMRole: values.isSCMRole,\r\n          IsPartyConnection: values.IsPartyConnection,\r\n          RoleEmployeeTypes: values.RoleEmployeeTypes.map((i) => { return ({ EmployeeType: i.value }) }),\r\n          Company: loginCompanyID(),\r\n          CreatedBy: loginUserID(),\r\n          CreatedOn: \"2022-05-20T11:22:55.711483Z\",\r\n          UpdatedBy: loginUserID(),\r\n          UpdatedOn: \"2022-05-20T11:22:55.711483Z\"\r\n        });\r\n\r\n        if (pageMode === mode.edit) {\r\n          dispatch(userUpdateAction({ jsonBody, updateId: values.id, btnId }));\r\n\r\n        }\r\n        else {\r\n          dispatch(postRole({ jsonBody, btnId }));\r\n\r\n        }\r\n      }\r\n    } catch (e) { btnIsDissablefunc({ btnId, state: false }) }\r\n  };\r\n\r\n\r\n  // IsEditMode_Css is use of module Edit_mode (reduce page-content marging)\r\n  var IsEditMode_Css = ''\r\n  if (modalCss || (pageMode === mode.dropdownAdd)) { IsEditMode_Css = \"-5.5%\" };\r\n  if (!(userPageAccessState === '')) {\r\n    return (\r\n      <React.Fragment>\r\n        <div className=\"page-content\" style={{ marginTop: IsEditMode_Css }}>\r\n          <Container fluid>\r\n            <MetaTags>{metaTagLabel(userPageAccessState)}</MetaTags>\r\n            <Card className=\"text-black\">\r\n              <CardHeader className=\"card-header  text-black c_card_header\" >\r\n                <h4 className=\"card-title text-black\">{userPageAccessState.PageDescription}</h4>\r\n                <p className=\"card-title-desc text-black\">{userPageAccessState.PageDescriptionDetails}</p>\r\n              </CardHeader>\r\n              <CardBody className=\" vh-10 0 text-black\" style={{ backgroundColor: \"#whitesmoke\" }} >\r\n                <form noValidate>\r\n\r\n                  <Card>\r\n                    <CardBody className=\"c_card_body\">\r\n                      <Row>\r\n                        <FormGroup className=\"mb-2 col col-sm-4 \">\r\n                          <Label>{fieldLabel.Name} </Label>\r\n                          <Input\r\n                            name=\"Name\"\r\n                            id=\"txtName\"\r\n                            value={values.Name}\r\n                            type=\"text\"\r\n                            className={isError.Name.length > 0 ? \"is-invalid form-control\" : \"form-control\"}\r\n                            placeholder=\"Please Enter Name\"\r\n                            autoComplete='off'\r\n                            autoFocus={true}\r\n                            onChange={(event) => {\r\n                              onChangeText({ event, state, setState })\r\n                              dispatch(Breadcrumb_inputName(event.target.value))\r\n                            }}\r\n                          />\r\n                          {isError.Name.length > 0 && (\r\n                            <span className=\"invalid-feedback\">{isError.Name}</span>\r\n                          )}\r\n                        </FormGroup>\r\n\r\n                        <Col md={1} className=\"mx-n1\"> </Col>\r\n                        <FormGroup className=\"mb-2 col col-sm-4 \">\r\n                          <Label >{fieldLabel.RoleEmployeeTypes} </Label>\r\n                          <Select\r\n                            name=\"RoleEmployeeTypes\"\r\n                            value={values.RoleEmployeeTypes}\r\n                            isMulti={true}\r\n                            options={EmployeeType_DropdownOptions}\r\n                            onChange={(hasSelect, evn) => onChangeSelect({ hasSelect, evn, state, setState, })}\r\n                            classNamePrefix=\"dropdown\"\r\n                          />\r\n                          {isError.RoleEmployeeTypes.length > 0 && (\r\n                            <span className=\"text-danger f-8\"><small>{isError.RoleEmployeeTypes}</small></span>\r\n                          )}\r\n                        </FormGroup>\r\n                        {\r\n                          (employeeTypes_AddAccess) && <Col md=\"1\" className=\" mt-3\">\r\n                            <AddMaster\r\n                              masterModal={EmployeeTypesMaster}\r\n                              masterPath={url.EMPLOYEETYPE}\r\n                            />\r\n                          </Col>\r\n                        }\r\n\r\n                      </Row>\r\n\r\n                      <Row>\r\n                        <FormGroup className=\"mb-2 col col-sm-4 \">\r\n                          <Label>{fieldLabel.Description} </Label>\r\n                          <Input\r\n                            name=\"Description\"\r\n                            id=\"txtName\"\r\n                            value={values.Description}\r\n                            type=\"text\"\r\n                            className={isError.Description.length > 0 ? \"is-invalid form-control\" : \"form-control\"}\r\n                            placeholder=\"Please Enter Description\"\r\n                            autoComplete='off'\r\n                            onChange={(event) => {\r\n                              onChangeText({ event, state, setState })\r\n                            }}\r\n                          />\r\n                          {isError.Description.length > 0 && (\r\n                            <span className=\"invalid-feedback\">{isError.Description}</span>\r\n                          )}\r\n                        </FormGroup>\r\n\r\n                        <Col md={1} className=\"mx-n1\"> </Col>\r\n                        <FormGroup className=\"mb-2 col col-sm-4 \">\r\n                          <Label >{fieldLabel.Dashboard} </Label>\r\n                          <Input\r\n                            name=\"Dashboard\"\r\n                            id=\"txtName\"\r\n                            value={values.Dashboard}\r\n                            type=\"text\"\r\n                            className={isError.Dashboard.length > 0 ? \"is-invalid form-control\" : \"form-control\"}\r\n                            placeholder=\"Please Enter Dashboard\"\r\n                            autoComplete='off'\r\n                            onChange={(event) => {\r\n                              onChangeText({ event, state, setState })\r\n                            }}\r\n                          />\r\n                          {isError.Dashboard.length > 0 && (\r\n                            <span className=\"invalid-feedback\">{isError.Dashboard}</span>\r\n                          )}\r\n                        </FormGroup>\r\n                      </Row>\r\n\r\n                      <Row>\r\n                        <FormGroup className=\"mb-2 col col-sm-5\">\r\n                          <Row className=\"justify-content-md-left\">\r\n                            <Label className=\"col-sm-5 col-form-label\" >{fieldLabel.isSCMRole}</Label>\r\n                            <Col md={2} style={{ marginTop: '9px', }} >\r\n\r\n                              <div className=\"form-check form-switch form-switch-md mb-3\" >\r\n                                <Input type=\"checkbox\" className=\"form-check-input\"\r\n                                  checked={values.isSCMRole}\r\n                                  name=\"isSCMRole\"\r\n                                  disabled={loginIsSCMCompany() > 0 ? true : false}\r\n                                  onChange={(e) => {\r\n                                    setState((i) => {\r\n                                      const a = { ...i }\r\n                                      a.values.isSCMRole = e.target.checked;\r\n                                      return a\r\n                                    })\r\n                                  }}\r\n                                />\r\n                              </div>\r\n                            </Col>\r\n                          </Row>\r\n                        </FormGroup>\r\n                        <FormGroup className=\"mb-2 col col-sm-5\">\r\n                          <Row className=\"justify-content-md-left\">\r\n                            <Label className=\"col-sm-3 col-form-label\" >{fieldLabel.isActive}</Label>\r\n                            <Col md={2} style={{ marginTop: '9px' }} >\r\n\r\n                              <div className=\"form-check form-switch form-switch-md mb-3\" dir=\"ltr\">\r\n                                <Input type=\"checkbox\" className=\"form-check-input\" id=\"customSwitchsizemd\"\r\n                                  checked={values.isActive}\r\n                                  name=\"isActive\"\r\n                                  onChange={(e) => {\r\n                                    setState((i) => {\r\n                                      const a = { ...i }\r\n                                      a.values.isActive = e.target.checked;\r\n                                      return a\r\n                                    })\r\n                                  }}\r\n                                />\r\n                              </div>\r\n                            </Col>\r\n                          </Row>\r\n                        </FormGroup>\r\n                        <FormGroup className=\"mb-2 col col-sm-5\">\r\n                          <Row className=\"justify-content-md-left\">\r\n                            <Label className=\"col-sm-5 col-form-label\" >{fieldLabel.IsPartyConnection}</Label>\r\n                            <Col md={1} style={{ marginTop: '9px' }} >\r\n\r\n                              <div className=\"form-check form-switch form-switch-md mb-3\" dir=\"ltr\">\r\n                                <Input type=\"checkbox\" className=\"form-check-input\" id=\"customSwitchsizemd\"\r\n                                  checked={values.IsPartyConnection}\r\n                                  name=\"IsPartyConnection\"\r\n                                  onChange={(e) => {\r\n                                    setState((i) => {\r\n                                      const a = { ...i }\r\n                                      a.values.IsPartyConnection = e.target.checked;\r\n                                      return a\r\n                                    })\r\n                                  }}\r\n                                />\r\n                              </div>\r\n                            </Col>\r\n                          </Row>\r\n                        </FormGroup>\r\n                        {/* </Row> */}\r\n                        <FormGroup>\r\n                          <Row>\r\n                            <Col sm={2}>\r\n                              <SaveButton pageMode={pageMode}\r\n                                loading={saveBtnloading}\r\n                                onClick={SaveHandler}\r\n                                userAcc={userPageAccessState}\r\n                                editCreatedBy={editCreatedBy}\r\n                                module={\"RoleMaster\"}\r\n                              />\r\n                            </Col>\r\n                          </Row>\r\n                        </FormGroup >\r\n                      </Row>\r\n                    </CardBody>\r\n                  </Card>\r\n\r\n                </form>\r\n              </CardBody>\r\n            </Card>\r\n          </Container>\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n  else {\r\n    return (\r\n      <React.Fragment></React.Fragment>\r\n    )\r\n  }\r\n};\r\nexport default RoleMaster\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\RoleAccessPages\\RoleAccessCopyFunctionality.js",["3018","3019","3020"],"import React, { useEffect, useState, } from \"react\";\r\nimport { Card, CardHeader, Col, Container, FormGroup, Label, Row, Button } from \"reactstrap\";\r\nimport Select from \"react-select\";\r\nimport { MetaTags } from \"react-meta-tags\";\r\nimport { getPartyListAPI } from \"../../../store/Administrator/PartyRedux/action\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n    saveCopyRoleAccessAction,\r\n} from \"../../../store/actions\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { getcompanyList } from \"../../../store/Administrator/CompanyRedux/actions\";\r\nimport { getRole } from \"../../../store/Administrator/RoleMasterRedux/action\";\r\nimport { btnIsDissablefunc } from \"../../../components/Common/CommonFunction\";\r\n\r\nconst RoleAccessCopyFunctionality = (props) => {\r\n\r\n    const [copyRole_Dropdown_Select, setCopyRole_Dropdown_Select] = useState(\"\");\r\n    const [copyDivision_dropdown_Select, setCopyDivision_dropdown_Select] = useState(\"\");\r\n    const [newRoleDropdown_Select, setNewRoleDropdown_Select] = useState(\"\");\r\n    const [newDivision_dropdown_Select, setNewDivision_dropdown_Select] = useState(null);\r\n    const [newcompany_dropdown_Select, setNewCompany_dropdown_Select] = useState(\"\");\r\n    const [company_dropdown_Select, setCompany_dropdown_Select] = useState(\"\");\r\n\r\n\r\n    // const [EditData, setEditData] = useState([]);\r\n    const [pageMode, setPageMode] = useState(\"edit\");\r\n    const dispatch = useDispatch();\r\n    const history = useHistory()\r\n\r\n    //Access redux store Data \r\n    const { Roles_redux=[],\r\n        DivisionTypes_redux,\r\n        company\r\n    } = useSelector((state) => ({\r\n        DivisionTypes_redux: state.PartyMasterReducer.partyList,\r\n        Roles_redux: state.RoleMaster_Reducer.roleList,\r\n        company: state.Company.companyList,\r\n    }));\r\n\r\n    useEffect(() => {\r\n        dispatch(getRole());\r\n        dispatch(getPartyListAPI());\r\n        dispatch(getcompanyList());\r\n\r\n    }, []);\r\n\r\n    let editDataGatingFromList = props.state;\r\n\r\n    // userAccess useEffect\r\n    useEffect(() => {\r\n\r\n        if (!(editDataGatingFromList === undefined)) {\r\n            var C_props = editDataGatingFromList\r\n\r\n            var divisionId = C_props.Division_id\r\n            if (divisionId === null) {\r\n                divisionId = 0\r\n            }\r\n            var roleId = C_props.Role_id\r\n            var Company_id = C_props.Company_id\r\n\r\n            if (roleId > 0) {\r\n\r\n                setCopyRole_Dropdown_Select({ label: C_props.RoleName, value: roleId })\r\n                setCopyDivision_dropdown_Select({ label: C_props.DivisionName, value: divisionId })\r\n                setCompany_dropdown_Select({ label: C_props.CompanyName, value: Company_id })\r\n                setNewCompany_dropdown_Select({ label: C_props.CompanyName, value: Company_id })\r\n\r\n            }\r\n        }\r\n\r\n    }, [history]);\r\n\r\n    useEffect(() => {\r\n        if (company.length === 1) {\r\n            setCompany_dropdown_Select({\r\n                value: company[0].id,\r\n                label: company[0].Name\r\n            })\r\n        }\r\n    }, [company])\r\n\r\n    const newDivisionTypesOption = DivisionTypes_redux.map((Data) => ({\r\n        value: Data.id,\r\n        label: Data.Name\r\n    }));\r\n\r\n    const newRole_DropdownOption = Roles_redux.map((Data) => ({\r\n        value: Data.id,\r\n        label: Data.Name\r\n    }));\r\n\r\n    const CompanyValues = company.map((i) => ({\r\n        value: i.id,\r\n        label: i.Name\r\n    }));\r\n\r\n    function newRoleDropDown_onChangeHandler(e) {\r\n        setNewRoleDropdown_Select(e)\r\n    }\r\n\r\n    function newDivisionTypes_onChangeHandler(e) {\r\n        setNewDivision_dropdown_Select(e)\r\n    }\r\n\r\n    function CompanyDropDown_onChangeHandler(e) {\r\n        setNewCompany_dropdown_Select(e)\r\n    }\r\n\r\n\r\n    function CopyButton_Handler(event) {\r\n        event.preventDefault();\r\n        const btnId = event.target.id\r\n        btnIsDissablefunc({ btnId, state: true })\r\n        try {\r\n            const jsonBody = JSON.stringify(\r\n                {\r\n                    Role: copyRole_Dropdown_Select.value,\r\n                    Division: copyDivision_dropdown_Select.value,\r\n                    Company: company_dropdown_Select.value,\r\n                    NewRole: newRoleDropdown_Select.value,\r\n                    NewDivision: (newDivision_dropdown_Select) ? newDivision_dropdown_Select.value : 0,\r\n                    NewCompany: newcompany_dropdown_Select.value\r\n                })\r\n            dispatch(saveCopyRoleAccessAction({ jsonBody, btnId }))\r\n\r\n        } catch (error) { btnIsDissablefunc({ btnId, state: false }) }\r\n    }\r\n\r\n    // IsEditMode_Css is use of module Edit_mode (reduce page-content marging)\r\n    let IsEditMode_Css = ''\r\n    if (pageMode === \"edit\" || pageMode === \"other\") { IsEditMode_Css = \"-5.5%\" };\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"page-content\" style={{ marginTop: IsEditMode_Css }}>\r\n                <MetaTags>\r\n                    <title>Role Access| FoodERP-React FrontEnd</title>\r\n                </MetaTags>\r\n                <Container fluid>\r\n\r\n                    <Card className=\"text-black\" >\r\n                        <CardHeader className=\"card-header   text-black\" style={{ backgroundColor: \"#dddddd\" }} >\r\n                            <Row style={{ backgroundColor: \"#f2f2f2\" }} className='mb-3 mt-n1'>\r\n                                <Col md=\"4\" className=\"p-2 \">\r\n                                    <Label className=\"p-2 col-sm-3\">Role</Label>\r\n                                    <Button type=\"button\" color=\"btn btn-outline-warning\" className=\"btn-sm\" ><h className=\"text-black\">{copyRole_Dropdown_Select.label}</h></Button>\r\n                                </Col>\r\n                                {(copyDivision_dropdown_Select.value > 0)\r\n                                    ?\r\n                                    <Col md=\"4\" className=\"p-2 \">\r\n                                        <Label className=\" p-2 col-sm-3 \">Division</Label>\r\n                                        <Button type=\"button\" color=\"btn btn-outline-warning\" className=\"btn-sm\" ><h className=\"text-black\">{copyDivision_dropdown_Select.label}</h></Button>\r\n                                    </Col>\r\n                                    : null\r\n                                }\r\n                                <Col sm={4} className=\"p-2 \">\r\n                                    <Label className=\"p-2 col-sm-4\">Company</Label>\r\n                                    <Button type=\"button\" color=\"btn btn-outline-warning\" className=\"btn-sm\" >\r\n                                        <h className=\"text-black\">{company_dropdown_Select.label}</h></Button>\r\n                                </Col>\r\n                                {/* <Col md=\"4\" className=\"p-2 text-end\">\r\n                                                    <Button type=\"button\" color=\"btn btn-outline-secondary\" className=\"btn-sm\" onClick={() => { ChangeButtonHandeler() }}><h className=\"text-black\">Change Role</h></Button>\r\n                                                </Col> */}\r\n\r\n                            </Row>\r\n\r\n\r\n                            <Row className=\"mt-3\">\r\n                                <Col md=\"4\">\r\n\r\n                                    <FormGroup className=\"mb-3 row \">\r\n                                        <Label className=\"col-sm-2 p-2 ml-n4 \">Role</Label>\r\n                                        <Col md=\"9\">\r\n                                            <Select\r\n                                                value={newRoleDropdown_Select}\r\n                                                options={newRole_DropdownOption}\r\n                                                className=\"rounded-bottom\"\r\n                                                onChange={(e) => { newRoleDropDown_onChangeHandler(e) }}\r\n                                                classNamePrefix=\"select2-selection\"\r\n\r\n                                            />\r\n                                        </Col>\r\n                                    </FormGroup>\r\n                                </Col>\r\n\r\n                                <Col md=\"4\" className=\"\">\r\n                                    <FormGroup className=\"mb-3 row\" >\r\n                                        <Label className=\"col-sm-3 p-2\">Division</Label>\r\n                                        <Col md=\"9\">\r\n                                            <Select\r\n                                                value={newDivision_dropdown_Select}\r\n                                                className=\"rounded-bottom\"\r\n                                                options={newDivisionTypesOption}\r\n                                                onChange={(e) => { newDivisionTypes_onChangeHandler(e) }}\r\n                                            />\r\n                                        </Col>\r\n                                    </FormGroup>\r\n                                </Col>\r\n                                <Col sm={4} className=\"\">\r\n                                    <FormGroup className=\"mb-3 row\" >\r\n                                        <Label className=\"col-sm-3 p-2\">Company</Label>\r\n                                        <Col md=\"9\">\r\n                                            <Select\r\n                                                value={newcompany_dropdown_Select}\r\n                                                className=\"rounded-bottom\"\r\n                                                placeholder=\"Select...\"\r\n                                                options={CompanyValues}\r\n                                                onChange={(e) => { CompanyDropDown_onChangeHandler(e) }}\r\n                                            />\r\n                                        </Col>\r\n                                    </FormGroup>\r\n                                </Col>\r\n\r\n                                <Col md=\"3\" className=\"mt- \">\r\n                                    <Button type=\"button\" color=\"primary\" id={\"roleAccessCopy\"} onClick={CopyButton_Handler}>Copy Role</Button>\r\n                                </Col>\r\n\r\n                            </Row>\r\n                        </CardHeader>\r\n\r\n                    </Card>\r\n\r\n                </Container>\r\n            </div>\r\n        </React.Fragment >\r\n    );\r\n\r\n\r\n};\r\nexport default RoleAccessCopyFunctionality\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\EmployeeTypes\\EmployeeTypeList.js",["3021"],"import React, { useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport {\r\n  deleteEmployeeTypeIDSuccess,\r\n  delete_EmployeeType_ID,\r\n  editEmployeeTypeId,\r\n  getEmployeeTypelist,\r\n  PostEmployeeTypeSubmitSuccess,\r\n  updateEmployeeTypeIDSuccess,\r\n  getEmployeeTypelistSuccess\r\n} from \"../../../store/Administrator/EmployeeTypeRedux/action\";\r\nimport EmployeeTypesMaster from \"./EmployeeTypesMaster\";\r\nimport CommonListPage from \"../../../components/Common/CommonMasterListPage\";\r\nimport { commonPageFieldList, commonPageFieldListSuccess } from \"../../../store/actions\";\r\nimport * as pageId from \"../../../routes/allPageID\"\r\nimport * as url from \"../../../routes/route_url\";\r\nimport { PageLoadingSpinner } from \"../../../components/Common/CommonButton\";\r\n\r\nconst EmployeeTypeList = (props) => {\r\n\r\n  const dispatch = useDispatch();\r\n  const reducers = useSelector(\r\n    (state) => ({\r\n      goBtnLoading: state.EmployeeTypeReducer.goBtnLoading,\r\n      listBtnLoading: state.EmployeeTypeReducer.listBtnLoading,\r\n      tableList: state.EmployeeTypeReducer.EmployeeTypeList,\r\n      editData: state.EmployeeTypeReducer.editData,\r\n      updateMsg: state.EmployeeTypeReducer.updateMessage,\r\n      deleteMsg: state.EmployeeTypeReducer.deleteMessage,\r\n      userAccess: state.Login.RoleAccessUpdateData,\r\n      postMsg: state.EmployeeTypeReducer.PostEmployeeType,\r\n      pageField: state.CommonPageFieldReducer.pageFieldList\r\n    })\r\n  );\r\n\r\n  const action = {\r\n    getList: getEmployeeTypelist,\r\n    editId: editEmployeeTypeId,\r\n    deleteId: delete_EmployeeType_ID,\r\n    postSucc: PostEmployeeTypeSubmitSuccess,\r\n    updateSucc: updateEmployeeTypeIDSuccess,\r\n    deleteSucc: deleteEmployeeTypeIDSuccess\r\n  }\r\n\r\n  //  This UseEffect => Featch Modules List data  First Rendering\r\n  useEffect(() => {\r\n    const page_Id = pageId.EMPLOYEETYPE_lIST\r\n    dispatch(commonPageFieldListSuccess(null))\r\n    dispatch(commonPageFieldList(page_Id))\r\n    dispatch(getEmployeeTypelist());\r\n\r\n    return () => {\r\n      dispatch(getEmployeeTypelistSuccess([]));\r\n      dispatch(commonPageFieldListSuccess(null))\r\n    }\r\n  }, []);\r\n\r\n  const { pageField, goBtnLoading } = reducers\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <PageLoadingSpinner isLoading={(goBtnLoading || !pageField)} />\r\n      {\r\n        (pageField) &&\r\n        <CommonListPage\r\n          action={action}\r\n          reducers={reducers}\r\n          MasterModal={EmployeeTypesMaster}\r\n          masterPath={url.EMPLOYEETYPE}\r\n          ButtonMsgLable={\"Employee Type\"}\r\n          deleteName={\"Name\"}\r\n        />\r\n      }\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nexport default EmployeeTypeList;\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\RoleAccessPages\\RoleAccessAdd.js",["3022","3023","3024","3025","3026","3027","3028","3029","3030","3031","3032"],"import React, { useEffect, useState } from \"react\";\r\nimport {\r\n    Col,\r\n    Container,\r\n    Row,\r\n    Label,\r\n    CardHeader,\r\n    FormGroup,\r\n    Button,\r\n} from \"reactstrap\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport Select, { components } from \"react-select\";\r\nimport {\r\n    getPartyListAPI,\r\n} from \"../../../store/Administrator/PartyRedux/action\";\r\nimport { MetaTags } from \"react-meta-tags\";\r\nimport {\r\n    AddPageHandlerForRoleAccessListPage,\r\n    getPageAccess_DropDown_API,\r\n    GO_Button_RoleAccess_AddPage_Action,\r\n    PageDropdownForRoleAccessList,\r\n    PageDropdownForRoleAccessList_Success,\r\n    saveRoleAccessAddAction,\r\n    saveRoleAccessAddActionSuccess,\r\n    setTableData_roleAccss_AddPageSuccess,\r\n} from \"../../../store/actions\";\r\nimport { getModuleList } from \"../../../store/actions\";\r\nimport { useHistory, } from \"react-router-dom\";\r\nimport { breadcrumbReturnFunc, CommonConsole, loginUserID, metaTagLabel } from \"../../../components/Common/CommonFunction\";\r\nimport { getcompanyList } from \"../../../store/Administrator/CompanyRedux/actions\";\r\nimport { getRole } from \"../../../store/Administrator/RoleMasterRedux/action\";\r\nimport { SaveButton } from \"../../../components/Common/CommonButton\";\r\nimport * as mode from \"../../../routes/PageMode\";\r\nimport { customAlert } from \"../../../CustomAlert/ConfirmDialog\";\r\nimport * as url from \"../../../routes/route_url\"\r\nimport { deltBtnCss } from \"../../../components/Common/ListActionsButtons\";\r\nimport { C_Select } from \"../../../CustomValidateForm\";\r\nimport \"./style.scss\";\r\n\r\nimport ToolkitProvider from \"react-bootstrap-table2-toolkit\";\r\nimport { mySearchProps } from \"../../../components/Common/SearchBox/MySearch\";\r\nimport BootstrapTable from \"react-bootstrap-table-next\";\r\n\r\nconst RoleAccessAdd = () => {\r\n\r\n    const dispatch = useDispatch();\r\n    const history = useHistory()\r\n\r\n    const [userPageAccessState, setUserAccState] = useState('');\r\n    const [pageMode, setPageMode] = useState(mode.defaultsave);\r\n    const [editCreatedBy, setEditCreatedBy] = useState('');\r\n    const [showTableOnUI, setShowTableOnUI] = useState(false)\r\n    const [division_dropdown_Select, setDivision_dropdown_Select] = useState({ label: \"Select...\", value: 0 });\r\n    const [role_dropdown_Select, setRoleDropDown] = useState(\"\");\r\n    const [module_DropdownSelect, setModule_DropdownSelect] = useState('');\r\n    const [page_DropdownSelect, setPage_DropdownSelect] = useState({ value: 0, label: \"All Pages\" });\r\n    const [company_dropdown_Select, setCompany_dropdown_Select] = useState({ label: \"Select...\", value: 0 });\r\n    const [forceRefresh, setForceRefresh] = useState(false);\r\n\r\n    //Access redux store Data /  'save_ModuleSuccess' action data\r\n    const location = { ...history.location };\r\n\r\n    const {\r\n        ModuleData,\r\n        PageDropdownRedux,\r\n        postMsg,\r\n        Roles = [],\r\n        partyList,\r\n        userAccess = [],\r\n        company,\r\n        tableDataRedux = [],\r\n        saveBtnloading,\r\n        pageDropDownLoading,\r\n    } = useSelector((state) => ({\r\n        saveBtnloading: state.RoleAccessReducer.saveBtnloading,\r\n        PartySaveSuccess: state.PartyMasterReducer.PartySaveSuccess,\r\n        companyList: state.Company.companyList,\r\n        partyList: state.PartyMasterReducer.partyList,\r\n        Roles: state.RoleMaster_Reducer.roleList,\r\n        ModuleData: state.Modules.modulesList,\r\n        PageAccess: state.H_Pages.PageAccess,\r\n        PageDropdownRedux: state.RoleAccessReducer.PageDropdownForRoleAccess,\r\n        postMsg: state.RoleAccessReducer.postMsg,\r\n        tableDataRedux: state.RoleAccessReducer.AddPageTableDataRedux,\r\n        userAccess: state.Login.RoleAccessUpdateData,\r\n        company: state.Company.companyList,\r\n        pageDropDownLoading: state.RoleAccessReducer.pageDropDownLoading,\r\n    }));\r\n\r\n\r\n    // userAccess useEffect\r\n    useEffect(() => {\r\n        let userAcc = null;\r\n        let locationPath = location.pathname;\r\n\r\n        userAcc = userAccess.find((inx) => {\r\n            return (`/${inx.ActualPagePath}` === locationPath)\r\n        });\r\n\r\n        if (userAcc) {\r\n            setUserAccState(userAcc);\r\n            breadcrumbReturnFunc({ dispatch, userAcc });\r\n        };\r\n    }, [userAccess]);\r\n\r\n    useEffect(() => {\r\n        const hasEditVal = history.location.state;\r\n        if (!(hasEditVal === undefined)) {\r\n            const { rowData = {}, btnmode } = hasEditVal\r\n            const { Division_id, DivisionName, Role_id, RoleName, Company_id, CompanyName, CreatedBy } = rowData;\r\n            if (Role_id > 0) {\r\n                setPageMode(btnmode)\r\n                setEditCreatedBy(CreatedBy)\r\n                dispatch(GO_Button_RoleAccess_AddPage_Action(Role_id, Division_id, Company_id));\r\n                setShowTableOnUI(true)\r\n                setRoleDropDown({ label: RoleName, value: Role_id })\r\n                setCompany_dropdown_Select({ label: CompanyName, value: Company_id })\r\n                setDivision_dropdown_Select({ label: DivisionName, value: Division_id })\r\n            }\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        dispatch(getPartyListAPI());//for division dropdown API\r\n        dispatch(getRole());//for Role  dropdown API\r\n        dispatch(getModuleList())//for Modules  dropdown API\r\n        dispatch(getPageAccess_DropDown_API());//for Page Access  API from pages saga file\r\n        dispatch(setTableData_roleAccss_AddPageSuccess([]))\r\n        dispatch(PageDropdownForRoleAccessList_Success([]))// for clear page dropdown clear  list when first rendring\r\n        dispatch(getcompanyList());\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (company.length === 1) {\r\n            setCompany_dropdown_Select({\r\n                value: company[0].id,\r\n                label: company[0].Name\r\n            })\r\n        }\r\n    }, [company])\r\n\r\n    useEffect(async () => {\r\n        if ((postMsg.Status === true) && (postMsg.StatusCode === 200)) {\r\n            dispatch(saveRoleAccessAddActionSuccess({ Status: false }))\r\n            const promise = await customAlert({ Type: 1, Message: postMsg.Message, })\r\n            if (promise) {\r\n                history.push({ pathname: url.ROLEACCESS_lIST })\r\n            }\r\n        }\r\n        else if (postMsg.Status === true) {\r\n            dispatch(saveRoleAccessAddActionSuccess({ Status: false }))\r\n            customAlert({ Type: 4, Message: JSON.stringify(postMsg.Message), })\r\n        }\r\n    }, [postMsg])\r\n\r\n\r\n\r\n    const DivisionTypesValues = partyList.map((i) => ({\r\n        value: i.id,\r\n        label: i.Name\r\n    }));\r\n\r\n    const CompanyValues = company.map((i) => ({\r\n        value: i.id,\r\n        label: i.Name\r\n    }));\r\n\r\n    const Role_DropdownOption = Roles.map((i) => ({\r\n        value: i.id,\r\n        label: i.Name\r\n    }));\r\n\r\n    const Module_DropdownOption = ModuleData.map((i) => ({\r\n        value: i.id,\r\n        label: i.Name,\r\n    }));\r\n\r\n    // for Page dropdown\r\n    const Page_DropdownOption = PageDropdownRedux.map((d) => ({\r\n        value: d.id,\r\n        label: d.Name,\r\n    }));\r\n\r\n    const tableColumns = [\r\n\r\n        {\r\n            text: \"Module Name\",\r\n            dataField: \"ModuleName\",\r\n            sort: true,\r\n        },\r\n        {\r\n            text: \"PageName\",\r\n            dataField: \"PageName\",\r\n            sort: true,\r\n        },\r\n        {\r\n            text: \"Access\",\r\n            dataField: \"\",\r\n            formatExtraData: { tableList: tableDataRedux, forceRefresh, setForceRefresh },\r\n            formatter: MultiSelectDopdown\r\n\r\n        },\r\n        {\r\n            text: \"Action\",\r\n            dataField: \"\",\r\n            formatExtraData: { tableList: tableDataRedux },\r\n            formatter: (cellContent, user, __key, { tableList }) => {\r\n                const btnId = `roleAccDelete-${user.id}`\r\n                const config = { btnId, deleteId: user.id }\r\n                return (\r\n                    <div style={{ justifyContent: 'center' }} >\r\n                        <Button className={deltBtnCss} id={btnId}> <i className=\"mdi mdi-delete font-size-18 text-danger text-right\"\r\n                            onClick={() => { DeleteRolePage_Handler(user.PageID, tableList) }}></i></Button>\r\n                    </div>\r\n                )\r\n            },\r\n        },\r\n    ]\r\n\r\n    /// Role dopdown\r\n    function RoleDropDown_select_handler(e) {\r\n        setRoleDropDown(e)\r\n    };\r\n\r\n    function handllerDivisionTypes(e) {\r\n        setDivision_dropdown_Select(e)\r\n    }\r\n\r\n    // for module dropdown\r\n    const Module_DropdownSelectHandller = (e) => {\r\n        var module = e.value;\r\n        var division = division_dropdown_Select.value\r\n        setModule_DropdownSelect(e);\r\n        setPage_DropdownSelect({ value: 0, label: \"All Pages\" })\r\n        dispatch(PageDropdownForRoleAccessList(module, division));\r\n    }\r\n\r\n    const Page_DropdownSelectHandller = (e) => {\r\n        setPage_DropdownSelect(e);\r\n    }\r\n\r\n    const GoButton_Handler = () => {\r\n\r\n        var division = division_dropdown_Select.value\r\n        var role = role_dropdown_Select.value\r\n        var company = company_dropdown_Select.value\r\n        if (division === undefined) {\r\n            division = 0\r\n        }\r\n        if (role > 0) {\r\n\r\n            dispatch(GO_Button_RoleAccess_AddPage_Action(role, division, company));\r\n            setShowTableOnUI(true)\r\n        }\r\n        else if (role === undefined) {\r\n            customAlert({\r\n                Type: 4,\r\n                Message: \"Please Select Role\",\r\n            })\r\n\r\n        }\r\n    }\r\n    function ChangeButtonHandeler() {\r\n        setShowTableOnUI(false);\r\n        setModule_DropdownSelect('')\r\n        setPage_DropdownSelect('')\r\n        dispatch(setTableData_roleAccss_AddPageSuccess([]))\r\n    }\r\n\r\n    const AddPageButton_Handeler = () => {\r\n\r\n        let selectePageID = page_DropdownSelect.value\r\n\r\n        if (selectePageID === 0) {\r\n            var pageId = 0\r\n            PageDropdownRedux.forEach((i) => {\r\n                pageId = i.id\r\n                let found = tableDataRedux.find((inx) => { return inx.PageID === pageId })\r\n                if ((found === undefined) && !(pageId === 0)) {\r\n                    dispatch(AddPageHandlerForRoleAccessListPage(pageId));\r\n                }\r\n            })\r\n        }\r\n        else {\r\n\r\n            let found = tableDataRedux.find((inx) => { return inx.PageID === selectePageID })\r\n\r\n            if ((found === undefined) && !(selectePageID === undefined)) {\r\n                dispatch(AddPageHandlerForRoleAccessListPage(selectePageID));\r\n            }\r\n            else if (found) {\r\n                customAlert({\r\n                    Type: 4,\r\n                    Message: \"Page Alredy Exist\",\r\n                })\r\n            }\r\n            else {\r\n                customAlert({\r\n                    Type: 4,\r\n                    Message: \"Please Select Page\",\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    function DeleteRolePage_Handler(deleteId, tableList = []) {\r\n\r\n        const newList = tableList.filter((index) => {\r\n            return (!(index.PageID === deleteId))\r\n        })\r\n        dispatch(setTableData_roleAccss_AddPageSuccess(newList))\r\n\r\n    }\r\n\r\n    const saveHandeller = (event) => {\r\n        event.preventDefault();\r\n        const btnId = event.target.id\r\n\r\n        try {\r\n\r\n            function isAccessSelect(item) {\r\n                let accArray = [];\r\n                let isShowOnMenu_Id\r\n\r\n                item.defaultSelectedValues.map(({ value, id }) => {\r\n                    // -1 stands for \"List\", -2 stands for \"Add\", and -3 stands for \"STP\".\r\n                    if ((value < 0)) {\r\n                        isShowOnMenu_Id = id\r\n                    }\r\n                    else {\r\n                        accArray.push({ \"PageAccess\": value })\r\n                    }\r\n                })\r\n\r\n                return { accArray, isShowOnMenu_Id }\r\n            }\r\n\r\n            const jsonArray = [];\r\n            tableDataRedux.map((row) => {\r\n\r\n                let { accArray = [], isShowOnMenu_Id } = isAccessSelect(row);\r\n                // -1 stands for \"List\", -2 stands for \"Add\", and -3 stands for \"STP\".\r\n                let showList = row.defaultSelectedValues?.find(i => ((i.value === -1) || (i.value === -3)))\r\n                let showAdd = row.defaultSelectedValues?.find(i => (i.value === -2))\r\n                let isAccess = accArray.length > 0;\r\n                let isrelated = row.RelatedPageID > 0;\r\n                let divisionID = division_dropdown_Select.value\r\n                let isSTP_page = row.PageType === 3 //PageTypeName :\"SourceTransactionPage\"\r\n\r\n                const listRowOBJFunc = () => {\r\n                    let showArray = [];\r\n                    if (showList) {\r\n                        showArray = [{ \"PageAccess\": isShowOnMenu_Id }]\r\n                    }\r\n                    return {\r\n                        Role: role_dropdown_Select.value,\r\n                        Company: company_dropdown_Select.value,\r\n                        Division: divisionID === 0 ? '' : divisionID,\r\n                        Modules: row.ModuleID,\r\n                        Pages: row.PageID,\r\n                        CreatedBy: loginUserID(),\r\n                        UpdatedBy: loginUserID(),\r\n                        RolePageAccess: [...showArray, ...accArray],\r\n                    }\r\n                };\r\n\r\n                const addRowOBJFunc = () => {\r\n                    let showArray = [];\r\n                    if (showAdd) {\r\n                        showArray = [{ \"PageAccess\": isShowOnMenu_Id }]\r\n                    }\r\n                    return {\r\n                        Role: role_dropdown_Select.value,\r\n                        Company: company_dropdown_Select.value,\r\n                        Division: divisionID === 0 ? '' : divisionID,\r\n                        Modules: row.ModuleID,\r\n                        Pages: row.RelatedPageID,\r\n                        CreatedBy: loginUserID(),\r\n                        UpdatedBy: loginUserID(),\r\n                        RolePageAccess: [...showArray, ...accArray],\r\n                    }\r\n                };\r\n\r\n                if (isAccess || showList || showAdd) {\r\n                    jsonArray.push(listRowOBJFunc());\r\n                    if (isrelated && !isSTP_page) jsonArray.push(addRowOBJFunc());\r\n                }\r\n            })\r\n            const jsonBody = JSON.stringify(jsonArray)\r\n            console.log(\"jsonArray\", jsonArray)\r\n            dispatch(saveRoleAccessAddAction({ jsonBody, btnId }));\r\n\r\n        } catch (w) { CommonConsole(w) }\r\n    }\r\n\r\n\r\n    let IsEditMode_Css = ''\r\n    if ((pageMode === \"edit\") || (pageMode === \"copy\") || (pageMode === \"dropdownAdd\")) { IsEditMode_Css = \"-5.5%\" };\r\n\r\n    return <React.Fragment>\r\n        <div className=\"page-content\"  >\r\n            <MetaTags>{metaTagLabel(userPageAccessState)}</MetaTags>\r\n            <Container fluid>\r\n                {\r\n                    !showTableOnUI ?\r\n                        <CardHeader className=\"card-header   text-black  c_card_body\"  >\r\n                            <Row className=\"mt-3\">\r\n                                <Col sm={3}>\r\n                                    <FormGroup className=\"mb-3 row \">\r\n                                        <Label className=\"col-sm-2 p-2 ml-n4 \">Role</Label>\r\n                                        <Col sm={9} style={{ zIndex: \"3\" }}>\r\n                                            <Select\r\n                                                value={role_dropdown_Select}\r\n                                                options={Role_DropdownOption}\r\n                                                className=\"rounded-bottom\"\r\n                                                placeholder=\"Select...\"\r\n                                                onChange={(e) => { RoleDropDown_select_handler(e) }}\r\n                                                classNamePrefix=\"select2-selection\"\r\n                                            />\r\n                                        </Col>\r\n                                    </FormGroup>\r\n                                </Col>\r\n\r\n                                <Col sm={4} className=\"\">\r\n                                    <FormGroup className=\"mb-3 row\" >\r\n                                        <Label className=\"col-sm-3 p-2\">Division</Label>\r\n                                        <Col md=\"9\" style={{ zIndex: \"3\" }}>\r\n                                            <Select\r\n                                                value={division_dropdown_Select}\r\n                                                className=\"rounded-bottom\"\r\n                                                placeholder=\"Select...\"\r\n                                                options={DivisionTypesValues}\r\n                                                onChange={(e) => { handllerDivisionTypes(e) }}\r\n                                            />\r\n                                        </Col>\r\n                                    </FormGroup>\r\n                                </Col>\r\n\r\n                                <Col sm={4} className=\"\">\r\n                                    <FormGroup className=\"mb-3 row\" >\r\n                                        <Label className=\"col-sm-3 p-2\">Company</Label>\r\n                                        <Col md=\"9\" style={{ zIndex: \"3\" }}>\r\n                                            <Select\r\n                                                value={company_dropdown_Select}\r\n                                                className=\"rounded-bottom\"\r\n                                                placeholder=\"Select...\"\r\n                                                options={CompanyValues}\r\n                                                onChange={(e) => { setCompany_dropdown_Select(e) }}\r\n                                            />\r\n                                        </Col>\r\n                                    </FormGroup>\r\n                                </Col>\r\n                                <Col sm={1}>\r\n                                    <div className=\"col col-2\">\r\n                                        <Button type=\"button\" color=\"primary\" onClick={() => { GoButton_Handler() }}>Go</Button>\r\n                                    </div>\r\n                                </Col>\r\n                            </Row>\r\n                            <div>\r\n                            </div>\r\n\r\n                        </CardHeader>\r\n\r\n                        :\r\n                        <div>\r\n                            <Row style={{ backgroundColor: \"#dddddd\", borderRadius: \"5px\" }} className='mb-1 mt-n head '>\r\n                                <Row sm={12} >\r\n                                    <Col sm={3} className=\"p-2 \">\r\n                                        <Label className=\"p-2 col-sm-3\">Role</Label>\r\n                                        <Button type=\"button\" color=\"btn btn-outline-warning\" className=\"btn-sm\" >\r\n                                            <h className=\"text-black\">{role_dropdown_Select.label}</h></Button>\r\n                                    </Col>\r\n\r\n                                    <Col sm={4} className=\"p-2 \">\r\n                                        {(division_dropdown_Select.value > 0)\r\n                                            ?\r\n                                            <> <Label className=\" p-2 col-sm-3\">Division</Label>\r\n                                                <Button type=\"button\" color=\"btn btn-outline-warning\" className=\"btn-sm\" >\r\n                                                    <h className=\"text-black\">{division_dropdown_Select.label}</h></Button>\r\n                                            </>\r\n                                            : null}\r\n                                    </Col>\r\n\r\n                                    <Col sm={4} className=\"p-2 \">\r\n                                        <Label className=\"p-2 col-sm-4\">Company</Label>\r\n                                        <Button type=\"button\" color=\"btn btn-outline-warning\" className=\"btn-sm\" >\r\n                                            <h className=\"text-black\">{company_dropdown_Select.label}</h></Button>\r\n                                    </Col>\r\n                                    <Col sm={1} className=\"p-2 mt-1\">\r\n                                        <Button type=\"button\"\r\n                                            color=\"btn btn-outline-secondary\"\r\n                                            className=\"btn-sm\"\r\n                                            onClick={() => { ChangeButtonHandeler() }}>\r\n                                            <h className=\"text-black\">Change</h></Button>\r\n\r\n                                    </Col>\r\n\r\n                                </Row>\r\n                            </Row>\r\n                            <div className=\"card-header headbody  text-black\"\r\n                                style={{\r\n                                    backgroundColor: \"rgb(231 231 231)\",\r\n                                    marginLeft: \"-8px\",\r\n                                    marginRight: \"-8px\",\r\n                                    borderRadius: \"5px\"\r\n                                }} >\r\n                                <Row >\r\n                                    <Col sm={4}>\r\n                                        <FormGroup className=\"row\">\r\n                                            <Label className=\"col-sm-3 p-2 ml-n5\">Module</Label>\r\n                                            <Col sm={8} style={{ zIndex: \"3\" }}>\r\n                                                <C_Select\r\n                                                    value={module_DropdownSelect}\r\n                                                    placeholder=\"select..\"\r\n                                                    options={Module_DropdownOption}\r\n                                                    onChange={(e) => { Module_DropdownSelectHandller(e) }}\r\n                                                    classNamePrefix=\"select2-selection\"\r\n                                                />\r\n                                            </Col>\r\n                                        </FormGroup>\r\n                                    </Col>\r\n\r\n                                    <Col sm={4}>\r\n                                        <FormGroup className=\" row \">\r\n                                            <Label className=\"col-sm-3 p-2\">Page</Label>\r\n                                            <Col sm={8} style={{ zIndex: \"3\" }}>\r\n                                                <C_Select\r\n                                                    value={page_DropdownSelect}\r\n                                                    placeholder=\"select..\"\r\n                                                    options={Page_DropdownOption}\r\n                                                    isLoading={pageDropDownLoading}\r\n                                                    onChange={(e) => { Page_DropdownSelectHandller(e) }}\r\n                                                    classNamePrefix=\"select2-selection\"\r\n                                                />\r\n                                            </Col>\r\n                                        </FormGroup>\r\n                                    </Col >\r\n\r\n                                    <Col sm={2} >\r\n                                        <Button type=\"button\" color=\"btn btn-outline-success\" className=\"\"\r\n                                            onClick={() => { AddPageButton_Handeler() }}>\r\n                                            {page_DropdownSelect.value === 0 ? 'Add All Page' : \"Add Page\"}</Button>\r\n                                    </Col>\r\n                                    <Col sm={1} >\r\n                                        {/* <Button type=\"button\" color=\"primary\" onClick={() => { saveHandeller() }}>Save</Button> */}\r\n                                        <SaveButton\r\n                                            loading={saveBtnloading}\r\n                                            pageMode={pageMode}\r\n                                            userAcc={userPageAccessState}\r\n                                            module={\"RoleAccess\"}\r\n                                            onClick={saveHandeller}\r\n                                            editCreatedBy={editCreatedBy}\r\n                                        />\r\n                                    </Col>\r\n                                </Row>\r\n\r\n                            </div>\r\n\r\n                        </div>\r\n                }\r\n                <div style={{\r\n                    marginLeft: \"-7px\",\r\n                    paddingTop: '4px'\r\n                }}>\r\n                    <RoleAccTable data={tableDataRedux} columns={tableColumns} />\r\n                </div>\r\n\r\n            </Container>\r\n\r\n\r\n\r\n        </div>\r\n    </React.Fragment>\r\n}\r\n\r\n\r\n\r\nexport default RoleAccessAdd\r\n\r\n\r\n\r\nconst RoleAccTable = ({ data, columns }) => {\r\n\r\n    return (\r\n        <>\r\n            <ToolkitProvider\r\n                keyField=\"PageID\"\r\n                data={data}\r\n                columns={columns}\r\n                search\r\n            >\r\n                {(toolkitProps) => (\r\n                    <React.Fragment>\r\n                        <Row>\r\n                            <Col xl=\"12\">\r\n                                <div className=\"table-responsive\" id=\"TableDiv\" style={{ minHeight: \"65vh\" }}  >\r\n                                    <BootstrapTable\r\n                                        keyField={\"id\"}\r\n                                        responsive\r\n                                        bordered={false}\r\n                                        headerClasses=\"theader-class\"\r\n                                        classes={\"table  table-bordered \"}\r\n                                        noDataIndication={<div className=\"text-danger text-center \">Items Not available</div>}\r\n                                        {...toolkitProps.baseProps}\r\n                                    />\r\n                                    {mySearchProps(toolkitProps.searchProps,)}\r\n                                </div>\r\n                            </Col>\r\n                        </Row>\r\n\r\n                    </React.Fragment>\r\n                )}\r\n            </ToolkitProvider>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nconst MultiSelectDopdown = (cell, item, __key, { forceRefresh, setForceRefresh }) => {\r\n\r\n\r\n    const Option = (props) => {\r\n        const { innerProps, label, data } = props;\r\n        return (\r\n            <components.Option {...props}>\r\n                <div {...innerProps} className=\"custom-option\">\r\n                    <span className=\"icon\">{data.icon}</span>\r\n                    <span className=\"label\">{label}</span>\r\n\r\n                </div>\r\n            </components.Option>\r\n        );\r\n    };\r\n\r\n\r\n    const CustomMultiValueLabel = ({ data }) => (\r\n        <div className=\"custom-select-value\">\r\n            <span className=\"icon\">{data.icon}</span>\r\n            <span className=\"label\">{data.label}</span>\r\n        </div>\r\n    );\r\n\r\n    const MultiValueRemove = props => (\r\n        <components.MultiValueRemove {...props}>\r\n            <span className=\"remove-icon\">×</span>\r\n        </components.MultiValueRemove>\r\n    );\r\n\r\n\r\n    const onChangehamdler = (selectedVal = []) => {\r\n        let updatedSelectedValues = [...selectedVal];\r\n      \r\n        const hasAddShow = updatedSelectedValues.some((item) => item.value === -2);\r\n        const hasSave = updatedSelectedValues.some((item) => item.value === 2);\r\n        const hasCopy = updatedSelectedValues.some((item) => item.value === 12);\r\n        const hasEdit = updatedSelectedValues.some((item) => item.value === 4);\r\n        const hasEditSelf = updatedSelectedValues.some((item) => item.value === 6);\r\n        const hasDelete = updatedSelectedValues.some((item) => item.value === 5);\r\n        const hasDeleteSelf = updatedSelectedValues.some((item) => item.value === 7);\r\n        const lastSelect = updatedSelectedValues[updatedSelectedValues.length - 1]?.value;\r\n      \r\n        // Refactor common logic for adding \"IsSave\" option\r\n        const addIsSaveOption = () => {\r\n          if (!hasSave) {\r\n            updatedSelectedValues.push({ value: 2, label: \"IsSave\" });\r\n          }\r\n        };\r\n      \r\n        if (hasAddShow && lastSelect === -2) {\r\n          addIsSaveOption();\r\n        }\r\n        if (hasCopy && lastSelect === 12) {\r\n          addIsSaveOption();\r\n        }\r\n      \r\n        if (hasEdit && hasEditSelf) {\r\n          if (lastSelect === 4) {\r\n            updatedSelectedValues = updatedSelectedValues.filter(\r\n              (item) => item.value !== 6\r\n            );\r\n          } else if (lastSelect === 6) {\r\n            updatedSelectedValues = updatedSelectedValues.filter(\r\n              (item) => item.value !== 4\r\n            );\r\n          }\r\n        }\r\n      \r\n        if (hasDelete && hasDeleteSelf) {\r\n          if (lastSelect === 5) {\r\n            updatedSelectedValues = updatedSelectedValues.filter(\r\n              (item) => item.value !== 7\r\n            );\r\n          } else if (lastSelect === 7) {\r\n            updatedSelectedValues = updatedSelectedValues.filter(\r\n              (item) => item.value !== 5\r\n            );\r\n          }\r\n        }\r\n      \r\n        // Set the updated selected values in the state\r\n        setForceRefresh(!forceRefresh);\r\n        item.defaultSelectedValues = updatedSelectedValues;\r\n      };\r\n      \r\n\r\n\r\n    return (\r\n        <div key={item.id}>\r\n            <Select\r\n                key={`select-${item.id}${item.defaultSelectedValues}`}\r\n                isMulti\r\n                onChange={(e) => onChangehamdler(e)}\r\n                value={item.defaultSelectedValues}\r\n                components={{\r\n                    Option,\r\n                    MultiValueLabel: CustomMultiValueLabel, // Custom icon + label for selected values\r\n                    MultiValueRemove: MultiValueRemove, // Default cancel button\r\n                }}\r\n                options={item.dynamicOptions} />\r\n        </div>\r\n\r\n    );\r\n};","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\PartyTypes\\PartyType.js",["3033","3034","3035","3036","3037","3038","3039"],"import React, { useEffect, useState } from \"react\";\r\nimport {\r\n    Card,\r\n    CardBody,\r\n    CardHeader,\r\n    Col,\r\n    Container,\r\n    FormGroup,\r\n    Input,\r\n    Label,\r\n    Row\r\n} from \"reactstrap\";\r\nimport { MetaTags } from \"react-meta-tags\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {\r\n    Breadcrumb_inputName,\r\n    commonPageField,\r\n    commonPageFieldSuccess\r\n} from \"../../../store/actions\";\r\nimport {\r\n    editPartyTypeSuccess,\r\n    SavePartyTypeAPISuccess,\r\n    getPartyTypelist,\r\n    updatePartyTypeAction,\r\n    SavePartyTypeAction,\r\n    updatePartyTypeIDSuccess\r\n} from \"../../../store/Administrator/PartyTypeRedux/action\";\r\nimport {\r\n    comAddPageFieldFunc,\r\n    formValid,\r\n    initialFiledFunc,\r\n    onChangeText,\r\n    resetFunction\r\n} from \"../../../components/Common/validationFunction\";\r\nimport { SaveButton } from \"../../../components/Common/CommonButton\";\r\nimport * as url from \"../../../routes/route_url\";\r\nimport * as pageId from \"../../../routes/allPageID\"\r\nimport * as mode from \"../../../routes/PageMode\"\r\nimport { customAlert } from \"../../../CustomAlert/ConfirmDialog\";\r\nimport * as _cfunc from \"../../../components/Common/CommonFunction\";\r\n\r\n\r\nconst PartyType = (props) => {\r\n\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n\r\n    const fileds = {\r\n        id: \"\",\r\n        Name: \"\",\r\n        IsSCM: _cfunc.loginIsSCMCompany() > 0 ? true : false,\r\n        IsDivision: false,\r\n        IsRetailer: false,\r\n        IsVendor: false,\r\n        IsAdminDivision: false\r\n    }\r\n\r\n    const [state, setState] = useState(() => initialFiledFunc(fileds))\r\n\r\n    const [modalCss, setModalCss] = useState(false);\r\n    const [pageMode, setPageMode] = useState(mode.modeSTPsave);\r\n    const [userPageAccessState, setUserAccState] = useState(\"\");\r\n    const [editCreatedBy, seteditCreatedBy] = useState(\"\");\r\n\r\n    //Access redux store Data /  'save_ModuleSuccess' action data\r\n    const { postMsg, pageField, updateMsg, userAccess, saveBtnloading } =\r\n        useSelector((state) => ({\r\n            saveBtnloading: state.PartyTypeReducer.saveBtnloading,\r\n            postMsg: state.PartyTypeReducer.PostData,\r\n            pageField: state.CommonPageFieldReducer.pageField,\r\n            userAccess: state.Login.RoleAccessUpdateData,\r\n            updateMsg: state.PartyTypeReducer.updateMessage\r\n        }));\r\n\r\n    useEffect(() => {\r\n        const page_Id = pageId.PARTYTYPE\r\n        dispatch(commonPageFieldSuccess(null));\r\n        dispatch(commonPageField(page_Id))\r\n        dispatch(getPartyTypelist());\r\n    }, []);\r\n\r\n    const values = { ...state.values }\r\n    const { isError } = state;\r\n    const { fieldLabel } = state;\r\n\r\n    const location = { ...history.location }\r\n    const hasShowloction = location.hasOwnProperty(mode.editValue)\r\n    const hasShowModal = props.hasOwnProperty(mode.editValue)\r\n\r\n    // userAccess useEffect\r\n    useEffect(() => {\r\n\r\n        let userAcc = null;\r\n        let locationPath;\r\n\r\n        if (props.pageMode === mode.dropdownAdd) {\r\n            locationPath = props.masterPath;\r\n        } else {\r\n            locationPath = location.pathname;\r\n        }\r\n\r\n        if (hasShowModal) {\r\n            locationPath = props.masterPath;\r\n        };\r\n\r\n        userAcc = userAccess.find((inx) => {\r\n            return (`/${inx.ActualPagePath}` === locationPath)\r\n        })\r\n\r\n        if (userAcc) {\r\n            setUserAccState(userAcc);\r\n            if (!props.isdropdown) {\r\n                _cfunc.breadcrumbReturnFunc({ dispatch, userAcc });\r\n            }\r\n        };\r\n    }, [userAccess])\r\n\r\n    // This UseEffect 'SetEdit' data and 'autoFocus' while this Component load First Time.\r\n    useEffect(() => {\r\n       \r\n        if (!(props.pageMode === mode.dropdownAdd)) {\r\n            if ((hasShowloction || hasShowModal)) {\r\n\r\n                let hasEditVal = null\r\n                if (hasShowloction) {\r\n                    setPageMode(location.pageMode)\r\n                    hasEditVal = location.editValue\r\n                }\r\n                else if (hasShowModal) {\r\n                    hasEditVal = props.editValue\r\n                    setPageMode(props.pageMode)\r\n                    setModalCss(true)\r\n                }\r\n\r\n                if (hasEditVal) {\r\n                    const { id, Name, IsSCM, IsDivision, IsRetailer, IsVendor, IsAdminDivision } = hasEditVal\r\n                    const { values, fieldLabel, hasValid, required, isError } = { ...state }\r\n                    values.Name = Name;\r\n                    values.IsSCM = IsSCM;\r\n                    values.IsDivision = IsDivision;\r\n                    values.IsRetailer = IsRetailer\r\n                    values.IsVendor = IsVendor\r\n                    values.IsAdminDivision = IsAdminDivision\r\n\r\n                    values.id = id\r\n                    hasValid.Name.valid = true;\r\n                    hasValid.IsSCM.valid = true;\r\n                    hasValid.IsDivision.valid = true;\r\n                    hasValid.IsRetailer.valid = true\r\n                    hasValid.IsVendor.valid = true\r\n                    hasValid.IsAdminDivision.valid = true\r\n\r\n                    setState({ values, fieldLabel, hasValid, required, isError })\r\n                    dispatch(Breadcrumb_inputName(hasEditVal.Name))\r\n                    seteditCreatedBy(hasEditVal.CreatedBy)\r\n                }\r\n                dispatch(editPartyTypeSuccess({ Status: false }))\r\n            }\r\n        }\r\n\r\n    }, [])\r\n\r\n\r\n    useEffect(async () => {\r\n\r\n        if ((postMsg.Status === true) && (postMsg.StatusCode === 200)) {\r\n            dispatch(SavePartyTypeAPISuccess({ Status: false }))\r\n            dispatch(Breadcrumb_inputName(''))\r\n            setState(() => resetFunction(fileds, state))// Clear form values  \r\n            if (props.pageMode === mode.dropdownAdd) {\r\n                customAlert({\r\n                    Type: 1,\r\n                    Message: postMsg.Message,\r\n                })\r\n                // history.push({\r\n                //     Data: postMsg.Data\r\n                // })\r\n                dispatch(getPartyTypelist())\r\n\r\n                props.isOpenModal(false)\r\n            }\r\n            else if (pageMode === mode.edit) {\r\n                customAlert({\r\n                    Type: 1,\r\n                    Message: postMsg.Message,\r\n                })\r\n                history.push({ pathname: url.PARTYTYPE_lIST })\r\n            }\r\n            else {\r\n                dispatch(Breadcrumb_inputName(''))\r\n                const promise = await customAlert({\r\n                    Type: 1,\r\n                    Message: postMsg.Message,\r\n                })\r\n                if (promise) { history.push({ pathname: url.PARTYTYPE_lIST }) }\r\n            }\r\n\r\n        } else if\r\n            (postMsg.Status === true) {\r\n            customAlert({\r\n                Type: 3,\r\n                Message: JSON.stringify(postMsg.Message),\r\n            })\r\n        }\r\n    }, [postMsg])\r\n\r\n    useEffect(() => {\r\n        if (updateMsg.Status === true && updateMsg.StatusCode === 200 && !modalCss) {\r\n            setState(() => resetFunction(fileds, state))// Clear form values \r\n            history.push({\r\n                pathname: url.PARTYTYPE_lIST,\r\n            })\r\n        } else if (updateMsg.Status === true && !modalCss) {\r\n\r\n            dispatch(updatePartyTypeIDSuccess({ Status: false }));\r\n\r\n            customAlert({\r\n                Type: 3,\r\n                Message: JSON.stringify(updateMsg.Message),\r\n            })\r\n        }\r\n    }, [updateMsg, modalCss]);\r\n\r\n    useEffect(() => {\r\n\r\n        if (pageField) {\r\n            const fieldArr = pageField.PageFieldMaster\r\n            comAddPageFieldFunc({ state, setState, fieldArr })\r\n        }\r\n    }, [pageField])\r\n\r\n    const SaveHandler = (event) => {\r\n        event.preventDefault();\r\n        const btnId = event.target.id;\r\n        try {\r\n            if (formValid(state, setState)) {\r\n                _cfunc.btnIsDissablefunc({ btnId, state: true })\r\n                const jsonBody = JSON.stringify({\r\n                    Name: values.Name,\r\n                    IsSCM: values.IsSCM,\r\n                    IsDivision: values.IsDivision,\r\n                    IsRetailer: values.IsRetailer,\r\n                    IsVendor: values.IsVendor,\r\n                    IsAdminDivision: values.IsAdminDivision,\r\n                    Company: _cfunc.loginCompanyID(),\r\n                    CreatedBy: _cfunc.loginUserID(),\r\n                    UpdatedBy: _cfunc.loginUserID(),\r\n                });\r\n                if (pageMode === mode.edit) {\r\n                    dispatch(updatePartyTypeAction({ jsonBody, updateId: values.id, btnId }));\r\n                }\r\n                else {\r\n                    dispatch(SavePartyTypeAction({ jsonBody, btnId }));\r\n                }\r\n            }\r\n        } catch (error) {\r\n            _cfunc.btnIsDissablefunc({ btnId, state: false })\r\n        }\r\n    };\r\n\r\n    // IsEditMode_Css is use of module Edit_mode (reduce page-content marging)\r\n    var IsEditMode_Css = ''\r\n    if ((pageMode === mode.edit) || (pageMode === mode.copy) || (pageMode === mode.dropdownAdd)) { IsEditMode_Css = \"-5.5%\" };\r\n\r\n    if (!(userPageAccessState === '')) {\r\n        return (\r\n            <React.Fragment>\r\n                <div className=\"page-content\" style={{ marginTop: IsEditMode_Css }}>\r\n                    <MetaTags>{_cfunc.metaTagLabel(userPageAccessState)}</MetaTags>\r\n                    <Container fluid>\r\n                        <Card className=\"text-black\">\r\n                            <CardHeader className=\"card-header   text-black c_card_header\"  >\r\n                                <h4 className=\"card-title text-black\">{userPageAccessState.PageDescription}</h4>\r\n                                <p className=\"card-title-desc text-black\">{userPageAccessState.PageDescriptionDetails}</p>\r\n                            </CardHeader>\r\n\r\n                            <CardBody className=\" vh-10 0 text-black\" style={{ backgroundColor: \"#whitesmoke\" }} >\r\n                                <form noValidate>\r\n                                    {/* <Row className=\"\"> */}\r\n                                    <Col md={12}>\r\n                                        <Card>\r\n                                            <CardBody className=\"c_card_body\">\r\n                                                <Row>\r\n                                                    <FormGroup className=\"mb-2 col col-sm-4 \">\r\n                                                        <Label htmlFor=\"validationCustom01\">{fieldLabel.Name} </Label>\r\n                                                        <Input\r\n                                                            name=\"Name\"\r\n                                                            id=\"txtName\"\r\n                                                            value={values.Name}\r\n                                                            type=\"text\"\r\n                                                            className={isError.Name.length > 0 ? \"is-invalid form-control\" : \"form-control\"}\r\n                                                            placeholder=\"Please Enter Name\"\r\n                                                            autoComplete='off'\r\n                                                            autoFocus={true}\r\n                                                            onChange={(event) => {\r\n                                                                onChangeText({ event, state, setState })\r\n                                                                dispatch(Breadcrumb_inputName(event.target.value))\r\n                                                            }}\r\n                                                        />\r\n                                                        {isError.Name.length > 0 && (\r\n                                                            <span className=\"invalid-feedback\">{isError.Name}</span>\r\n                                                        )}\r\n                                                    </FormGroup>\r\n                                                </Row>\r\n\r\n                                                <Row>\r\n                                                    <FormGroup className=\"mb-2 col col-sm-4\">\r\n                                                        <Row className=\"justify-content-md-left\">\r\n                                                            <Label htmlFor=\"horizontal-firstname-input\"\r\n                                                                className=\"col-sm-5 col-form-label\" >{fieldLabel.IsSCM} </Label>\r\n                                                            <Col md={2} style={{ marginTop: '9px' }} >\r\n                                                                <div className=\"form-check form-switch form-switch-md mb-2\">\r\n                                                                    <Input type=\"checkbox\" className=\"form-check-input\"\r\n                                                                        checked={values.IsSCM}\r\n                                                                        disabled={_cfunc.loginIsSCMCompany() > 0 ? true : false}\r\n                                                                        name=\"IsSCM\"\r\n                                                                        onChange={(e) => {\r\n                                                                            setState((i) => {\r\n                                                                                const a = { ...i }\r\n                                                                                a.values.IsSCM = e.target.checked;\r\n                                                                                return a\r\n                                                                            })\r\n                                                                        }}\r\n                                                                    />\r\n                                                                </div>\r\n                                                            </Col>\r\n                                                        </Row>\r\n                                                    </FormGroup>\r\n\r\n                                                    <FormGroup className=\"mb-2 col col-sm-4\">\r\n                                                        <Row className=\"justify-content-md-left\">\r\n                                                            <Label htmlFor=\"horizontal-firstname-input\"\r\n                                                                className=\"col-sm-5 col-form-label\" >{fieldLabel.IsDivision} </Label>\r\n                                                            <Col md={2} style={{ marginTop: '9px' }} >\r\n                                                                <div className=\"form-check form-switch form-switch-md mb-3\">\r\n                                                                    <Input type=\"checkbox\" className=\"form-check-input\"\r\n                                                                        checked={values.IsDivision}\r\n                                                                        name=\"IsDivision\"\r\n                                                                        onChange={(e) => {\r\n                                                                            setState((i) => {\r\n                                                                                const a = { ...i }\r\n                                                                                a.values.IsDivision = e.target.checked;\r\n                                                                                return a\r\n                                                                            })\r\n                                                                        }}\r\n                                                                    />\r\n                                                                </div>\r\n                                                            </Col>\r\n                                                        </Row>\r\n                                                    </FormGroup>\r\n                                                </Row>\r\n\r\n                                                {/* <Row>\r\n                                                    \r\n                                                </Row> */}\r\n\r\n                                                <Row>\r\n                                                    <FormGroup className=\"mb-2 col col-sm-4\">\r\n                                                        <Row className=\"justify-content-md-left\">\r\n                                                            <Label htmlFor=\"horizontal-firstname-input\"\r\n                                                                className=\"col-sm-5 col-form-label\" >{fieldLabel.IsRetailer} </Label>\r\n                                                            <Col md={1} style={{ marginTop: '9px' }} >\r\n                                                                <div className=\"form-check form-switch form-switch-md mb-3\">\r\n                                                                    <Input type=\"checkbox\" className=\"form-check-input\"\r\n                                                                        checked={values.IsRetailer}\r\n                                                                        name=\"IsRetailer\"\r\n                                                                        onChange={(e) => {\r\n                                                                            setState((i) => {\r\n                                                                                const a = { ...i }\r\n                                                                                a.values.IsRetailer = e.target.checked;\r\n                                                                                return a\r\n                                                                            })\r\n                                                                        }}\r\n                                                                    />\r\n                                                                </div>\r\n                                                            </Col>\r\n                                                        </Row>\r\n                                                    </FormGroup>\r\n\r\n                                                    <FormGroup className=\"mb-2 col col-sm-4\">\r\n                                                        <Row className=\"justify-content-md-left\">\r\n                                                            <Label htmlFor=\"horizontal-firstname-input\"\r\n                                                                className=\"col-sm-5 col-form-label\" >{fieldLabel.IsVendor} </Label>\r\n                                                            <Col md={1} style={{ marginTop: '9px' }} >\r\n                                                                <div className=\"form-check form-switch form-switch-md mb-3\">\r\n                                                                    <Input type=\"checkbox\" className=\"form-check-input\"\r\n                                                                        checked={values.IsVendor}\r\n                                                                        name=\"IsVendor\"\r\n                                                                        onChange={(e) => {\r\n                                                                            setState((i) => {\r\n                                                                                const a = { ...i }\r\n                                                                                a.values.IsVendor = e.target.checked;\r\n                                                                                return a\r\n                                                                            })\r\n                                                                        }}\r\n                                                                    />\r\n                                                                </div>\r\n                                                            </Col>\r\n                                                        </Row>\r\n                                                    </FormGroup>\r\n                                                </Row>\r\n\r\n                                                {/* <Row>\r\n                                                    <FormGroup className=\"mb-2 col col-sm-5\">\r\n                                                        <Row className=\"justify-content-md-left\">\r\n                                                            <Label htmlFor=\"horizontal-firstname-input\" className=\"col-sm-3 col-form-label\" >{fieldLabel.IsVendor} </Label>\r\n                                                            <Col md={2} style={{ marginTop: '9px' }} >\r\n                                                                <div className=\"form-check form-switch form-switch-md mb-3\">\r\n                                                                    <Input type=\"checkbox\" className=\"form-check-input\"\r\n                                                                        checked={values.IsVendor}\r\n                                                                        name=\"IsVendor\"\r\n                                                                        onChange={(e) => {\r\n                                                                            setState((i) => {\r\n                                                                                const a = { ...i }\r\n                                                                                a.values.IsVendor = e.target.checked;\r\n                                                                                return a\r\n                                                                            })\r\n                                                                        }}\r\n                                                                    />\r\n                                                                </div>\r\n                                                            </Col>\r\n                                                        </Row>\r\n                                                    </FormGroup>\r\n                                                </Row> */}\r\n\r\n                                                {/* <Row>\r\n                                                    <FormGroup className=\"mb-2 col col-sm-4\">\r\n                                                        <Row className=\"justify-content-md-left\">\r\n                                                            <Label htmlFor=\"horizontal-firstname-input\"\r\n                                                                className=\"col-sm-5 col-form-label\" >{fieldLabel.IsAdminDivision} </Label>\r\n                                                            <Col md={2} style={{ marginTop: '9px' }} >\r\n                                                                <div className=\"form-check form-switch form-switch-md mb-3\">\r\n                                                                    <Input type=\"checkbox\" className=\"form-check-input\"\r\n                                                                        name=\"IsAdminDivision\"\r\n                                                                        checked={values.IsAdminDivision}\r\n                                                                        onChange={(e) => {\r\n                                                                            setState((i) => {\r\n                                                                                const a = { ...i }\r\n                                                                                a.values.IsAdminDivision = e.target.checked;\r\n                                                                                return a\r\n                                                                            })\r\n                                                                        }}\r\n                                                                    />\r\n                                                                </div>\r\n                                                            </Col>\r\n                                                        </Row>\r\n                                                    </FormGroup>\r\n                                                </Row> */}\r\n\r\n                                                <FormGroup>\r\n                                                    <Row>\r\n                                                        <Col sm={2}>\r\n                                                            <SaveButton pageMode={pageMode}\r\n                                                                loading={saveBtnloading}\r\n                                                                onClick={SaveHandler}\r\n                                                                userAcc={userPageAccessState}\r\n                                                                editCreatedBy={editCreatedBy}\r\n                                                                module={\"PartyType\"}\r\n                                                            />\r\n                                                        </Col>\r\n                                                    </Row>\r\n                                                </FormGroup >\r\n\r\n                                            </CardBody>\r\n                                        </Card>\r\n                                    </Col>\r\n                                    {/* </Row> */}\r\n                                </form>\r\n                            </CardBody>\r\n                        </Card>\r\n\r\n                    </Container>\r\n                </div>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n    else {\r\n        return (\r\n            <React.Fragment></React.Fragment>\r\n        )\r\n    }\r\n};\r\n\r\nexport default PartyType\r\n\r\n\r\n\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\RoleAccessPages\\RoleAccessListPage.js",["3040","3041","3042","3043","3044","3045","3046","3047","3048","3049","3050","3051","3052","3053","3054","3055","3056","3057"],"import React, { useEffect, useState } from \"react\"\r\nimport { Row, Col, Modal, Button } from \"reactstrap\"\r\nimport MetaTags from 'react-meta-tags'\r\n// datatable related plugins\r\nimport BootstrapTable from 'react-bootstrap-table-next';\r\nimport paginationFactory, {\r\n    PaginationProvider, PaginationListStandalone,\r\n} from 'react-bootstrap-table2-paginator';\r\nimport ToolkitProvider from 'react-bootstrap-table2-toolkit';\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n    commonPageFieldList,\r\n    commonPageFieldListSuccess,\r\n    DeleteRoleAcess,\r\n    DeleteRoleAcessSuccess,\r\n    EditRoleAcessAction,\r\n    getRoleAccessListPage,\r\n    getRoleAccessListPageSuccess,\r\n    saveCopyRoleAccessActionSuccess,\r\n    updateRoleAcessAction,\r\n} from \"../../../store/actions\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport RoleAccessCopyFunctionality from \"./RoleAccessCopyFunctionality\";\r\nimport CommonPurchaseList, { countlabelFunc } from \"../../../components/Common/CommonPurchaseList\";\r\nimport { mySearchProps } from \"../../../components/Common/SearchBox/MySearch\";\r\nimport * as pageId from \"../../../routes/allPageID\"\r\nimport * as url from \"../../../routes/route_url\"\r\nimport { breadcrumbReturnFunc, btnIsDissablefunc, loginCompanyID, loginRoleID, loginUserID } from \"../../../components/Common/CommonFunction\";\r\nimport { customAlert } from \"../../../CustomAlert/ConfirmDialog\";\r\nimport RoleAccessAdd from \"./RoleAccessAdd\"\r\n\r\n\r\nconst RoleAccessListPage = () => {\r\n\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n    const [modal_center, setmodal_center] = useState(false);\r\n    const [copy_user_RowData, setCopy_user_RowData] = useState({});\r\n\r\n    const reducers = useSelector(\r\n        (state) => ({\r\n            tableList: state.RoleAccessReducer.RoleAccessListPage,\r\n            userAccess: state.Login.RoleAccessUpdateData,\r\n            postMsg: state.RoleAccessReducer.postMsg,\r\n            postMsgCopy: state.RoleAccessReducer.postMsgCopy,\r\n            deleteMsg: state.RoleAccessReducer.deleteMsg,\r\n            editData: state.RoleAccessReducer.editData,\r\n            updateMsg: state.RoleAccessReducer.updateMsg,\r\n            pageField: state.CommonPageFieldReducer.pageFieldList\r\n\r\n        })\r\n    );\r\n\r\n    const { postMsgCopy } = reducers;\r\n\r\n    const action = {\r\n        getList: getRoleAccessListPage,\r\n        editId: EditRoleAcessAction,\r\n        deleteId: DeleteRoleAcess,\r\n        postSucc: getRoleAccessListPageSuccess,\r\n        updateSucc: updateRoleAcessAction,\r\n        deleteSucc: DeleteRoleAcessSuccess\r\n    }\r\n\r\n    //  This UseEffect => Featch Modules List data  First Rendering\r\n    useEffect(() => {\r\n        const page_Id = pageId.ROLEACCESS_lIST\r\n        dispatch(commonPageFieldListSuccess(null))\r\n        dispatch(commonPageFieldList(page_Id))\r\n        dispatch(getRoleAccessListPage());\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if ((postMsgCopy.Status === true) && (postMsgCopy.StatusCode === 200)) {\r\n            dispatch(saveCopyRoleAccessActionSuccess({ Status: false }))\r\n            dispatch(getRoleAccessListPage());\r\n            tog_center()\r\n            customAlert({\r\n                Type: 1,\r\n                Message: postMsgCopy.Message,\r\n            })\r\n        }\r\n        else if (postMsgCopy.Status === true) {\r\n            dispatch(saveCopyRoleAccessActionSuccess({ Status: false }))\r\n            customAlert({\r\n                Type: 1,\r\n                Message: JSON.stringify(postMsgCopy.Message),\r\n            })\r\n        }\r\n    }, [postMsgCopy])\r\n\r\n    function editBodyfunc(config) {\r\n        const { rowData } = config;\r\n\r\n        if (rowData.Division_id === null) {\r\n            rowData.Division_id = 0\r\n        }\r\n        history.push({\r\n            pathname: url.ROLEACCESS,\r\n            state: config,\r\n        })\r\n    }\r\n\r\n    async function deleteBodyfunc(config) {\r\n\r\n        const { rowData, btnId } = config;\r\n\r\n        const ispermission = await customAlert({\r\n            Type: 7,\r\n            Message: `Are you sure you want to delete this Role : \"${rowData.RoleName}\"`,\r\n        })\r\n        if (ispermission) {\r\n            btnIsDissablefunc({ btnId, state: true })\r\n            let role = rowData.Role_id\r\n            let division = rowData.Division_id === null ? 0 : rowData.Division_id\r\n            let company = rowData.Company_id\r\n            dispatch(DeleteRoleAcess({ role, division, company, btnId }))\r\n        }\r\n    }\r\n\r\n    function copyBodyfunc(config) {\r\n        const { rowData, btnId } = config;\r\n        setCopy_user_RowData(rowData)\r\n        tog_center()\r\n        btnIsDissablefunc({ btnId, state: false })\r\n    }\r\n\r\n    function goButnFunc() {\r\n        dispatch(getRoleAccessListPage());\r\n    }\r\n    // tag_center -- Control the Edit Modal show and close\r\n    function tog_center() {\r\n        setmodal_center(!modal_center)\r\n    }\r\n\r\n    const { pageField, userAccess = [] } = reducers\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"page-content\" style={{ marginTop: \"-4px\" }}>\r\n                {\r\n                    (pageField) ?\r\n                        <CommonPurchaseList\r\n                            action={action}\r\n                            reducers={reducers}\r\n                            showBreadcrumb={false}\r\n                            newBtnPath={url.ROLEACCESS}\r\n                            MasterModal={RoleAccessAdd}\r\n                            editBodyfunc={editBodyfunc}\r\n                            copyBodyfunc={copyBodyfunc}\r\n                            goButnFunc={goButnFunc}\r\n                            deleteBodyfunc={deleteBodyfunc}\r\n                            masterPath={url.ROLEACCESS}\r\n                            ButtonMsgLable={\"RoleAccess\"}\r\n                            deleteName={\"Name\"}\r\n                        />\r\n                        : null\r\n                }\r\n            </div>\r\n            <Modal\r\n                isOpen={modal_center}\r\n                toggle={() => { tog_center() }}\r\n                size=\"xl\"\r\n            >\r\n                <RoleAccessCopyFunctionality state={copy_user_RowData} />\r\n\r\n            </Modal>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default RoleAccessListPage\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\PartyTypes\\PartyTypeList.js",["3058"],"import React, { useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport {\r\n  deletePartyTypeIDSuccess,\r\n  delete_PartyType_ID,\r\n  editPartyTypeId,\r\n  getPartyTypelist,\r\n  getPartyTypelistSuccess,\r\n  SavePartyTypeAPISuccess,\r\n  updatePartyTypeIDSuccess\r\n} from \"../../../store/Administrator/PartyTypeRedux/action\";\r\nimport PartyType from \"./PartyType\";\r\nimport CommonListPage from \"../../../components/Common/CommonMasterListPage\";\r\nimport { commonPageFieldList, commonPageFieldListSuccess } from \"../../../store/actions\";\r\nimport * as pageId from \"../../../routes/allPageID\"\r\nimport * as url from \"../../../routes/route_url\";\r\nimport {  PageLoadingSpinner } from \"../../../components/Common/CommonButton\";\r\n\r\n\r\nconst PartyTypeList = (props) => {\r\n\r\n  const dispatch = useDispatch();\r\n  const reducers = useSelector(\r\n    (state) => ({\r\n      listBtnLoading: state.PartyTypeReducer.listBtnLoading,\r\n      goBtnLoading: state.PartyTypeReducer.goBtnLoading,\r\n      tableList: state.PartyTypeReducer.ListData,\r\n      editData: state.PartyTypeReducer.editData,\r\n      updateMsg: state.PartyTypeReducer.updateMessage,\r\n      deleteMsg: state.PartyTypeReducer.deleteMessage,\r\n      userAccess: state.Login.RoleAccessUpdateData,\r\n      postMsg: state.PartyTypeReducer.PostData,\r\n      pageField: state.CommonPageFieldReducer.pageFieldList\r\n    })\r\n  );\r\n\r\n  const action = {\r\n    getList: getPartyTypelist,\r\n    editId: editPartyTypeId,\r\n    deleteId: delete_PartyType_ID,\r\n    postSucc: SavePartyTypeAPISuccess,\r\n    updateSucc: updatePartyTypeIDSuccess,\r\n    deleteSucc: deletePartyTypeIDSuccess\r\n  }\r\n\r\n  //  This UseEffect => Featch Modules List data  First Rendering\r\n  useEffect(() => {\r\n    const page_Id = pageId.PARTYTYPE_lIST\r\n    dispatch(commonPageFieldListSuccess(null))\r\n    dispatch(commonPageFieldList(page_Id))\r\n    dispatch(getPartyTypelist());\r\n\r\n    return () => {\r\n      dispatch(getPartyTypelistSuccess([]));\r\n      dispatch(commonPageFieldListSuccess(null))\r\n    }\r\n\r\n  }, []);\r\n\r\n  const { pageField, goBtnLoading } = reducers\r\n\r\n  return (\r\n    <React.Fragment>\r\n\r\n      <PageLoadingSpinner isLoading={(goBtnLoading || !pageField)} />\r\n      {\r\n        (pageField) &&\r\n        <CommonListPage\r\n          action={action}\r\n          reducers={reducers}\r\n          MasterModal={PartyType}\r\n          masterPath={url.PARTYTYPE}\r\n          ButtonMsgLable={\"Party Type\"}\r\n          deleteName={\"Name\"}\r\n        />\r\n\r\n      }\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nexport default PartyTypeList;\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\ItemPages\\ItemList.js",["3059","3060"],"import React, { useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport {\r\n  deleteItemID,\r\n  deleteItemIdSuccess,\r\n  editItemId,\r\n  getItemList,\r\n  getItemListSuccess,\r\n  SaveItemMasterActionSuccess,\r\n  updateItemMasterActionSuccess,\r\n} from \"../../../store/Administrator/ItemsRedux/action\";\r\nimport ItemsMaster from \"./ItemMaster/itemIndex\";\r\nimport CommonListPage from \"../../../components/Common/CommonMasterListPage\";\r\nimport { commonPageFieldList, commonPageFieldListSuccess, } from \"../../../store/actions\";\r\nimport { ITEM } from \"../../../routes/route_url\";\r\nimport * as pageId from \"../../../routes/allPageID\"\r\nimport { PageLoadingSpinner, Listloader } from \"../../../components/Common/CommonButton\";\r\n\r\nconst ItemsList = () => {\r\n\r\n  const dispatch = useDispatch();\r\n  const reducers = useSelector(\r\n    (state) => ({\r\n      listBtnLoading: state.ItemMastersReducer.listBtnLoading,\r\n      GoBtnlistloading: state.ItemMastersReducer.loading,\r\n      tableList: state.ItemMastersReducer.ItemList,\r\n      editData: state.ItemMastersReducer.editData,\r\n      updateMsg: state.ItemMastersReducer.updateMsg,\r\n      deleteMsg: state.ItemMastersReducer.deleteMsg,\r\n      userAccess: state.Login.RoleAccessUpdateData,\r\n      postMsg: state.ItemMastersReducer.postMsg,\r\n      pageField: state.CommonPageFieldReducer.pageFieldList\r\n    })\r\n  );\r\n\r\n  const action = {\r\n    getList: getItemList,\r\n    editId: editItemId,\r\n    deleteId: deleteItemID,\r\n    postSucc: SaveItemMasterActionSuccess,\r\n    updateSucc: updateItemMasterActionSuccess,\r\n    deleteSucc: deleteItemIdSuccess\r\n  }\r\n\r\n  //  This UseEffect => Featch Modules List data  First Rendering\r\n  useEffect(() => {\r\n    dispatch(commonPageFieldListSuccess(null))\r\n    dispatch(commonPageFieldList(pageId.ITEM_lIST))\r\n    dispatch(getItemList());\r\n    return () => {\r\n      dispatch(getItemListSuccess([]));\r\n    }\r\n  }, []);\r\n\r\n\r\n  const { pageField, GoBtnlistloading } = reducers\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <PageLoadingSpinner isLoading={(GoBtnlistloading || !pageField)} />\r\n      {\r\n        (pageField) &&\r\n        <CommonListPage\r\n          action={action}\r\n          reducers={reducers}\r\n          MasterModal={ItemsMaster}\r\n          masterPath={ITEM}\r\n          ButtonMsgLable={\"Item\"}\r\n          deleteName={\"Name\"}\r\n        />\r\n\r\n      }\r\n\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nexport default ItemsList;\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\EmployeeTypes\\EmployeeTypesMaster.js",["3061","3062","3063","3064","3065","3066","3067"],"import React, { useEffect, useState, } from \"react\";\r\nimport {\r\n    Card,\r\n    CardBody,\r\n    CardHeader,\r\n    Col,\r\n    Container,\r\n    FormGroup,\r\n    Input,\r\n    Label,\r\n    Row\r\n} from \"reactstrap\";\r\nimport { MetaTags } from \"react-meta-tags\";\r\nimport {\r\n    editEmployeeTypeSuccess,\r\n    getEmployeeTypelist,\r\n    PostEmployeeTypeSubmit,\r\n    PostEmployeeTypeSubmitSuccess,\r\n    updateEmployeeTypeID,\r\n    updateEmployeeTypeIDSuccess\r\n} from \"../../../store/Administrator/EmployeeTypeRedux/action\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useHistory, useLocation } from \"react-router-dom\";\r\nimport {\r\n    commonPageField,\r\n    commonPageFieldSuccess\r\n} from \"../../../store/actions\";\r\nimport { Breadcrumb_inputName } from \"../../../store/actions\";\r\nimport {\r\n    comAddPageFieldFunc,\r\n    formValid,\r\n    initialFiledFunc,\r\n    onChangeText,\r\n    resetFunction\r\n} from \"../../../components/Common/validationFunction\";\r\nimport { SaveButton } from \"../../../components/Common/CommonButton\";\r\nimport {\r\n    breadcrumbReturnFunc,\r\n    btnIsDissablefunc,\r\n    loginUserID,\r\n    loginCompanyID,\r\n    metaTagLabel\r\n} from \"../../../components/Common/CommonFunction\";\r\nimport * as url from \"../../../routes/route_url\";\r\nimport * as pageId from \"../../../routes/allPageID\"\r\nimport * as mode from \"../../../routes/PageMode\";\r\nimport { customAlert } from \"../../../CustomAlert/ConfirmDialog\";\r\n\r\nconst EmployeeTypesMaster = (props) => {\r\n\r\n    const dispatch = useDispatch();\r\n    const history = useHistory()\r\n    const location = useLocation()\r\n    const fileds = {\r\n        id: \"\",\r\n        Name: \"\",\r\n        IsPartyConnection: false,\r\n        IsSCM: false,\r\n        IsSalesTeamMember: false\r\n    }\r\n    const [state, setState] = useState(() => initialFiledFunc(fileds))\r\n\r\n    const [pageMode, setPageMode] = useState(mode.defaultsave);\r\n    const [userPageAccessState, setUserAccState] = useState('');\r\n    const [modalCss, setModalCss] = useState(false);\r\n    const [editCreatedBy, seteditCreatedBy] = useState(\"\");\r\n\r\n    //Access redux store Data /  'save_ModuleSuccess' action data\r\n    const { postMsg,\r\n        updateMsg,\r\n        pageField,\r\n        saveBtnloading,\r\n        userAccess, } = useSelector((state) => ({\r\n            saveBtnloading: state.EmployeeTypeReducer.saveBtnloading,\r\n            postMsg: state.EmployeeTypeReducer.PostEmployeeType,\r\n            updateMsg: state.EmployeeTypeReducer.updateMessage,\r\n            userAccess: state.Login.RoleAccessUpdateData,\r\n            pageField: state.CommonPageFieldReducer.pageField\r\n        }));\r\n\r\n\r\n    useEffect(() => {\r\n        const page_Id = pageId.EMPLOYEETYPE\r\n        dispatch(commonPageFieldSuccess(null));\r\n        dispatch(commonPageField(page_Id))\r\n    }, []);\r\n\r\n\r\n    const hasShowloction = location.hasOwnProperty(mode.editValue)\r\n    const hasShowModal = props.hasOwnProperty(mode.editValue)\r\n\r\n    const values = { ...state.values }\r\n    const { isError } = state;\r\n    const { fieldLabel } = state;\r\n\r\n    // userAccess useEffect\r\n    useEffect(() => {\r\n\r\n        let userAcc = null;\r\n        let locationPath;\r\n\r\n        if (props.pageMode === mode.dropdownAdd) {\r\n            locationPath = props.masterPath;\r\n        } else {\r\n            locationPath = location.pathname;\r\n        }\r\n\r\n        if (hasShowModal) {\r\n            locationPath = props.masterPath;\r\n        };\r\n\r\n        userAcc = userAccess.find((inx) => {\r\n            return (`/${inx.ActualPagePath}` === locationPath)\r\n        })\r\n\r\n        if (userAcc) {\r\n            setUserAccState(userAcc);\r\n            if (!props.isdropdown) {\r\n                breadcrumbReturnFunc({ dispatch, userAcc });\r\n            }\r\n        };\r\n    }, [userAccess])\r\n\r\n\r\n    useEffect(() => {\r\n        if (!(props.pageMode === mode.dropdownAdd)) {\r\n        if ((hasShowloction || hasShowModal)) {\r\n\r\n            let hasEditVal = null\r\n            if (hasShowloction) {\r\n                setPageMode(location.pageMode)\r\n                hasEditVal = location.editValue\r\n            }\r\n            else if (hasShowModal) {\r\n                hasEditVal = props.editValue\r\n                setPageMode(props.pageMode)\r\n                setModalCss(true)\r\n            }\r\n\r\n            if (hasEditVal) {\r\n                const { id, Name, IsPartyConnection, IsSCM, IsSalesTeamMember } = hasEditVal\r\n                const { values, fieldLabel, hasValid, required, isError } = { ...state }\r\n                values.Name = Name;\r\n                values.IsPartyConnection = IsPartyConnection;\r\n                values.IsSCM = IsSCM;\r\n                values.id = id\r\n                values.IsSalesTeamMember = IsSalesTeamMember;\r\n\r\n                hasValid.Name.valid = true;\r\n                hasValid.IsSCM.valid = true;\r\n                hasValid.IsPartyConnection.valid = true;\r\n                hasValid.IsSalesTeamMember.valid = true;\r\n\r\n                setState({ values, fieldLabel, hasValid, required, isError })\r\n                dispatch(Breadcrumb_inputName(hasEditVal.Name))\r\n                seteditCreatedBy(hasEditVal.CreatedBy)\r\n            }\r\n            dispatch(editEmployeeTypeSuccess({ Status: false }))\r\n        }\r\n    }\r\n    }, [])\r\n\r\n    useEffect(async () => {\r\n\r\n        if ((postMsg.Status === true) && (postMsg.StatusCode === 200)) {\r\n            dispatch(PostEmployeeTypeSubmitSuccess({ Status: false }))\r\n            dispatch(Breadcrumb_inputName(''))\r\n            setState(() => resetFunction(fileds, state))// Clear form values  \r\n            if (props.pageMode === mode.dropdownAdd) {\r\n                customAlert({\r\n                    Type: 1,\r\n                    Message: postMsg.Message,\r\n                })\r\n                \r\n                dispatch(getEmployeeTypelist())\r\n\r\n                props.isOpenModal(false)\r\n            }\r\n            else if (pageMode === mode.edit) {\r\n                customAlert({\r\n                    Type: 1,\r\n                    Message: postMsg.Message,\r\n                })\r\n                history.push({ pathname: url.EMPLOYEETYPE_lIST })\r\n            }\r\n            else {\r\n                dispatch(Breadcrumb_inputName(''))\r\n                const promise = await customAlert({\r\n                    Type: 1,\r\n                    Message: postMsg.Message,\r\n                })\r\n                if (promise) { history.push({ pathname: url.EMPLOYEETYPE_lIST }) }\r\n            }\r\n\r\n        } else if\r\n            (postMsg.Status === true) {\r\n            customAlert({\r\n                Type: 3,\r\n                Message: JSON.stringify(postMsg.Message),\r\n            })\r\n        }\r\n    }, [postMsg])\r\n\r\n    useEffect(() => {\r\n\r\n        if (updateMsg.Status === true && updateMsg.StatusCode === 200 && !modalCss) {\r\n            setState(() => resetFunction(fileds, state))//Clear form values  \r\n            history.push({\r\n                pathname: url.EMPLOYEETYPE_lIST,\r\n            })\r\n        } else if (updateMsg.Status === true && !modalCss) {\r\n            dispatch(updateEmployeeTypeIDSuccess({ Status: false }));\r\n            dispatch(\r\n                customAlert({\r\n                    Type: 3,\r\n                    Message: JSON.stringify(updateMsg.Message),\r\n                  })\r\n            );\r\n        }\r\n    }, [updateMsg, modalCss]);\r\n\r\n    useEffect(() => {\r\n\r\n        if (pageField) {\r\n            const fieldArr = pageField.PageFieldMaster\r\n            comAddPageFieldFunc({ state, setState, fieldArr })\r\n        }\r\n    }, [pageField])\r\n\r\n    const SaveHandler = async (event) => {\r\n        event.preventDefault();\r\n        const btnId = event.target.id\r\n        try {\r\n            if (formValid(state, setState)) {\r\n                btnIsDissablefunc({ btnId, state: true })\r\n\r\n                const jsonBody = JSON.stringify({\r\n                    Name: values.Name,\r\n                    Company: loginCompanyID(),\r\n                    IsSalesTeamMember: values.IsSalesTeamMember,\r\n                    CreatedBy: loginUserID(),\r\n                    CreatedOn: \"2022-07-18T00:00:00\",\r\n                    UpdatedBy: loginUserID(),\r\n                    UpdatedOn: \"2022-07-18T00:00:00\"\r\n                });\r\n\r\n                if (pageMode === mode.edit) {\r\n                    dispatch(updateEmployeeTypeID({ jsonBody, updateId: values.id, btnId }));\r\n                }\r\n                else {\r\n                    dispatch(PostEmployeeTypeSubmit({ jsonBody, btnId }));\r\n                }\r\n\r\n            }\r\n        } catch (e) { btnIsDissablefunc({ btnId, state: false }) }\r\n    };\r\n\r\n    // IsEditMode_Css is use of module Edit_mode (reduce page-content marging)\r\n    var IsEditMode_Css = ''\r\n    if ((modalCss) || (pageMode === mode.dropdownAdd)) { IsEditMode_Css = \"-20.5%\" };\r\n\r\n    if (!(userPageAccessState === '')) {\r\n        return (\r\n            <React.Fragment>\r\n                <div className=\"page-content\" style={{ marginTop: IsEditMode_Css }}>\r\n                    <MetaTags>{metaTagLabel(userPageAccessState)}</MetaTags>\r\n\r\n                    <Container fluid>\r\n                        <Card className=\"text-black\">\r\n                            <CardHeader className=\"card-header   text-black c_card_header\" >\r\n                                <h4 className=\"card-title text-black\">{userPageAccessState.PageDescription}</h4>\r\n                                <p className=\"card-title-desc text-black\">{userPageAccessState.PageDescriptionDetails}</p>\r\n                            </CardHeader>\r\n\r\n                            <CardBody className=\" vh-10 0 text-black\">\r\n                                <form noValidate>\r\n                                    <Row className=\"\">\r\n                                        <Col md={12}>\r\n                                            <Card>\r\n                                                <CardBody className=\"c_card_body\">\r\n                                                    <Row>\r\n                                                        <FormGroup className=\"mb-2 col col-sm-4 \">\r\n                                                            <Label htmlFor=\"validationCustom01\">{fieldLabel.Name} </Label>\r\n                                                            <Input\r\n                                                                name=\"Name\"\r\n                                                                id=\"txtName\"\r\n                                                                value={values.Name}\r\n                                                                type=\"text\"\r\n                                                                className={isError.Name.length > 0 ? \"is-invalid form-control\" : \"form-control\"}\r\n                                                                placeholder=\"Please Enter Name\"\r\n                                                                autoComplete='off'\r\n                                                                autoFocus={true}\r\n                                                                onChange={(event) => {\r\n                                                                    onChangeText({ event, state, setState })\r\n                                                                    dispatch(Breadcrumb_inputName(event.target.value))\r\n                                                                }}\r\n                                                            />\r\n                                                            {isError.Name.length > 0 && (\r\n                                                                <span className=\"invalid-feedback\">{isError.Name}</span>\r\n                                                            )}\r\n                                                        </FormGroup>\r\n\r\n                                                        <Row>\r\n                                                            <FormGroup className=\"mb-2 col col-sm-5\">\r\n                                                                <Row className=\"justify-content-md-left\">\r\n                                                                    <Label htmlFor=\"horizontal-firstname-input\"\r\n                                                                        className=\"col-sm-5 col-form-label\" >{fieldLabel.IsSalesTeamMember} </Label>\r\n                                                                    <Col md={2} style={{ marginTop: '9px' }} >\r\n                                                                        <div className=\"form-check form-switch form-switch-md mb-3\" >\r\n                                                                            <Input type=\"checkbox\" className=\"form-check-input\"\r\n                                                                                name=\"IsSalesTeamMember\"\r\n                                                                                checked={values.IsSalesTeamMember}\r\n                                                                                onChange={(e) => {\r\n                                                                                    setState((i) => {\r\n                                                                                        const a = { ...i }\r\n                                                                                        a.values.IsSalesTeamMember = e.target.checked;\r\n                                                                                        return a\r\n                                                                                    })\r\n                                                                                }}\r\n                                                                            />\r\n                                                                        </div>\r\n                                                                    </Col>\r\n                                                                </Row>\r\n                                                            </FormGroup>\r\n                                                        </Row>\r\n\r\n                                                        <FormGroup>\r\n                                                            <Row>\r\n                                                                <Col sm={2}>\r\n                                                                    <SaveButton\r\n                                                                        loading={saveBtnloading}\r\n                                                                        pageMode={pageMode}\r\n                                                                        onClick={SaveHandler}\r\n                                                                        userAcc={userPageAccessState}\r\n                                                                        editCreatedBy={editCreatedBy}\r\n                                                                        module={\"EmployeeTypesMaster\"}\r\n                                                                    />\r\n                                                                </Col>\r\n                                                            </Row>\r\n                                                        </FormGroup>\r\n                                                    </Row>\r\n                                                </CardBody>\r\n                                            </Card>\r\n                                        </Col>\r\n                                    </Row>\r\n                                </form>\r\n                            </CardBody>\r\n                        </Card>\r\n                    </Container>\r\n                </div>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n    else {\r\n        return (\r\n            <React.Fragment></React.Fragment>\r\n        )\r\n    }\r\n};\r\n\r\nexport default EmployeeTypesMaster\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\CategoryTypePages\\CategoryTypeList.js",["3068"],"import React, { useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport CategoryTypeMaster from \"./CategoryTypeMaster\";\r\nimport {\r\n  deleteCategoryTypeIDSuccess,\r\n  delete_CategoryType_ID,\r\n  editCategoryTypeID,\r\n  getCategoryTypelist,\r\n  getCategoryTypelistSuccess,\r\n  saveCategoryTypeMaster_Success,\r\n  updateCategoryTypeIDSuccess\r\n} from \"../../../store/actions\";\r\nimport { commonPageFieldList, commonPageFieldListSuccess } from \"../../../store/actions\";\r\nimport CommonListPage from \"../../../components/Common/CommonMasterListPage\";\r\nimport * as pageId from \"../../../routes/allPageID\"\r\nimport * as url from \"../../../routes/route_url\";\r\nimport { PageLoadingSpinner } from \"../../../components/Common/CommonButton\";\r\n\r\nconst CategoryTypeList = () => {\r\n\r\n  const dispatch = useDispatch();\r\n  const reducers = useSelector(\r\n    (state) => ({\r\n      listBtnLoading: state.categoryTypeReducer.listBtnLoading,\r\n      goBtnLoading: state.categoryTypeReducer.goBtnLoading,\r\n      tableList: state.categoryTypeReducer.categoryTypeListData,\r\n      postMsg: state.categoryTypeReducer.PostData,\r\n      editData: state.categoryTypeReducer.editData,\r\n      updateMsg: state.categoryTypeReducer.updateMessage,\r\n      deleteMsg: state.categoryTypeReducer.deleteMessage,\r\n      userAccess: state.Login.RoleAccessUpdateData,\r\n      pageField: state.CommonPageFieldReducer.pageFieldList\r\n    })\r\n  );\r\n\r\n  const action = {\r\n    getList: getCategoryTypelist,\r\n    editId: editCategoryTypeID,\r\n    deleteId: delete_CategoryType_ID,\r\n    postSucc: saveCategoryTypeMaster_Success,\r\n    updateSucc: updateCategoryTypeIDSuccess,\r\n    deleteSucc: deleteCategoryTypeIDSuccess,\r\n  }\r\n\r\n  //  This UseEffect => Featch Modules List data  First Rendering\r\n  useEffect(() => {\r\n    const page_Id = pageId.CATEGORYTYPE_lIST\r\n    dispatch(commonPageFieldListSuccess(null))\r\n    dispatch(commonPageFieldList(page_Id))\r\n    dispatch(getCategoryTypelist());\r\n\r\n    return () => {\r\n      dispatch(getCategoryTypelistSuccess([]));\r\n      dispatch(commonPageFieldListSuccess(null))\r\n    }\r\n  }, []);\r\n\r\n  const { pageField, goBtnLoading } = reducers;\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <PageLoadingSpinner isLoading={(goBtnLoading || !pageField)} />\r\n      {\r\n        (pageField) &&\r\n        <CommonListPage\r\n          action={action}\r\n          reducers={reducers}\r\n          MasterModal={CategoryTypeMaster}\r\n          masterPath={url.CATEGORYTYPE}\r\n          ButtonMsgLable={\"Category Type\"}\r\n          deleteName={\"Name\"}\r\n        />\r\n\r\n      }\r\n\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nexport default CategoryTypeList;\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\CategoryTypePages\\CategoryTypeMaster.js",["3069","3070","3071","3072","3073","3074","3075"],"import React, { useEffect, useState, } from \"react\";\r\nimport {\r\n    Card,\r\n    CardBody,\r\n    CardHeader,\r\n    Col,\r\n    Container,\r\n    FormGroup,\r\n    Input,\r\n    Label,\r\n    Row,\r\n} from \"reactstrap\";\r\nimport { MetaTags } from \"react-meta-tags\";\r\nimport {  commonPageField, commonPageFieldSuccess } from \"../../../store/actions\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { Breadcrumb_inputName } from \"../../../store/Utilites/Breadcrumb/actions\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n    saveCategoryTypeMaster,\r\n    saveCategoryTypeMaster_Success,\r\n    editCategoryTypeIDSuccess,\r\n    updateCategoryTypeID,\r\n    updateCategoryTypeIDSuccess,\r\n    getCategoryTypelist,\r\n} from \"../../../store/Administrator/CategoryTypeRedux/actions\";\r\nimport {\r\n    comAddPageFieldFunc,\r\n    formValid,\r\n    initialFiledFunc,\r\n    onChangeText,\r\n    resetFunction\r\n} from \"../../../components/Common/validationFunction\";\r\nimport { SaveButton } from \"../../../components/Common/CommonButton\";\r\nimport { breadcrumbReturnFunc, btnIsDissablefunc, loginUserID, metaTagLabel, } from \"../../../components/Common/CommonFunction\";\r\nimport * as url from \"../../../routes/route_url\";\r\nimport * as pageId from \"../../../routes/allPageID\"\r\nimport * as mode from \"../../../routes/PageMode\"\r\nimport { customAlert } from \"../../../CustomAlert/ConfirmDialog\";\r\n\r\nconst CategoryTypeMaster = (props) => {\r\n\r\n    const history = useHistory()\r\n    const dispatch = useDispatch();\r\n\r\n    const fileds = {\r\n        id: \"\",\r\n        Name: \"\",\r\n    }\r\n\r\n    const [state, setState] = useState(() => initialFiledFunc(fileds))\r\n    const [modalCss, setModalCss] = useState(false);\r\n    const [pageMode, setPageMode] = useState(mode.defaultsave);\r\n    const [userPageAccessState, setUserAccState] = useState(123);\r\n    const [editCreatedBy, seteditCreatedBy] = useState(\"\");\r\n\r\n    //Access redux store Data /  'save_ModuleSuccess' action data\r\n    const {\r\n        postMsg,\r\n        updateMsg,\r\n        pageField,\r\n        saveBtnloading,\r\n        userAccess } = useSelector((state) => ({\r\n            saveBtnloading: state.categoryTypeReducer.saveBtnloading,\r\n            postMsg: state.categoryTypeReducer.PostData,\r\n            updateMsg: state.categoryTypeReducer.updateMessage,\r\n            userAccess: state.Login.RoleAccessUpdateData,\r\n            pageField: state.CommonPageFieldReducer.pageField\r\n        }));\r\n\r\n    useEffect(() => {\r\n        const page_Id = pageId.CATEGORYTYPE\r\n        dispatch(commonPageFieldSuccess(null));\r\n        dispatch(commonPageField(page_Id))\r\n    }, []);\r\n\r\n    const values = { ...state.values }\r\n    const { isError } = state;\r\n    const { fieldLabel } = state;\r\n\r\n    const location = { ...history.location }\r\n    const hasShowloction = location.hasOwnProperty(mode.editValue)\r\n    const hasShowModal = props.hasOwnProperty(mode.editValue)\r\n\r\n    \r\n    useEffect(() => {\r\n\r\n        let userAcc = null;\r\n        let locationPath;\r\n\r\n        if (props.pageMode === mode.dropdownAdd) {\r\n            locationPath = props.masterPath;\r\n        } else {\r\n            locationPath = location.pathname;\r\n        }\r\n\r\n        if (hasShowModal) {\r\n            locationPath = props.masterPath;\r\n        };\r\n\r\n        userAcc = userAccess.find((inx) => {\r\n            return (`/${inx.ActualPagePath}` === locationPath)\r\n        })\r\n\r\n        if (userAcc) {\r\n            setUserAccState(userAcc);\r\n            if (!props.isdropdown) {\r\n                breadcrumbReturnFunc({ dispatch, userAcc });\r\n            }\r\n        };\r\n\r\n    }, [userAccess])\r\n    //This UseEffect 'SetEdit' data and 'autoFocus' while this Component load First Time.\r\n    useEffect(() => {\r\n\r\n        if ((hasShowloction || hasShowModal)) {\r\n\r\n            let hasEditVal = null\r\n            if (hasShowloction) {\r\n                setPageMode(location.pageMode)\r\n                hasEditVal = location.editValue\r\n            }\r\n            else if (hasShowModal) {\r\n                hasEditVal = props.editValue\r\n                setPageMode(props.pageMode)\r\n                setModalCss(true)\r\n            }\r\n\r\n            if (hasEditVal) {\r\n\r\n                const { id, Name } = hasEditVal\r\n                const { values, fieldLabel, hasValid, required, isError } = { ...state }\r\n                values.Name = Name;\r\n                values.id = id\r\n\r\n                hasValid.Name.valid = true;\r\n\r\n                setState({ values, fieldLabel, hasValid, required, isError })\r\n                dispatch(Breadcrumb_inputName(hasEditVal.Name))\r\n                seteditCreatedBy(hasEditVal.CreatedBy)\r\n            }\r\n            dispatch(editCategoryTypeIDSuccess({ Status: false }))\r\n        }\r\n    }, [])\r\n\r\n    useEffect(async () => {\r\n\r\n        if ((postMsg.Status === true) && (postMsg.StatusCode === 200)) {\r\n            dispatch(saveCategoryTypeMaster_Success({ Status: false }))\r\n            dispatch(Breadcrumb_inputName(''))\r\n            setState(() => resetFunction(fileds, state))// Clear form values  \r\n            if (props.pageMode === mode.dropdownAdd) {\r\n                customAlert({\r\n                    Type: 1,\r\n                    Message: postMsg.Message,\r\n                })\r\n\r\n                dispatch(getCategoryTypelist())\r\n\r\n                props.isOpenModal(false)\r\n            }\r\n            else if (pageMode === mode.edit) {\r\n                customAlert({\r\n                    Type: 1,\r\n                    Message: postMsg.Message,\r\n                })\r\n                history.push({ pathname: url.CATEGORYTYPE_lIST })\r\n            }\r\n            else {\r\n                dispatch(Breadcrumb_inputName(''))\r\n                const promise = await customAlert({\r\n                    Type: 1,\r\n                    Message: postMsg.Message,\r\n                })\r\n                if (promise) { history.push({ pathname: url.CATEGORYTYPE_lIST }) }\r\n            }\r\n\r\n        } else if\r\n            (postMsg.Status === true) {\r\n            customAlert({\r\n                Type: 3,\r\n                Message: JSON.stringify(postMsg.Message),\r\n            })\r\n        }\r\n    }, [postMsg])\r\n\r\n    useEffect(() => {\r\n        if (updateMsg.Status === true && updateMsg.StatusCode === 200 && !modalCss) {\r\n            setState(() => resetFunction(fileds, state))// Clear form values\r\n            history.push({\r\n                pathname: url.CATEGORYTYPE_lIST,\r\n            })\r\n        } else if (updateMsg.Status === true && !modalCss) {\r\n            dispatch(updateCategoryTypeIDSuccess({ Status: false }));\r\n                customAlert({\r\n                    Type: 3,\r\n                    Message: JSON.stringify(updateMsg.Message),\r\n                })\r\n        }\r\n    }, [updateMsg, modalCss]);\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        if (pageField) {\r\n            const fieldArr = pageField.PageFieldMaster\r\n            comAddPageFieldFunc({ state, setState, fieldArr })\r\n        }\r\n    }, [pageField])\r\n\r\n    const SaveHandler = async (event) => {\r\n        event.preventDefault();\r\n        const btnId = event.target.id\r\n        try {\r\n            if (formValid(state, setState)) {\r\n                btnIsDissablefunc({ btnId, state: true })\r\n\r\n                const jsonBody = JSON.stringify({\r\n                    Name: values.Name,\r\n                    CreatedBy: loginUserID(),\r\n                    UpdatedBy: loginUserID()\r\n                });\r\n\r\n                if (pageMode === mode.edit) {\r\n                    dispatch(updateCategoryTypeID({ jsonBody, updateId: values.id, btnId }));\r\n                }\r\n                else {\r\n                    dispatch(saveCategoryTypeMaster({ jsonBody, btnId }));\r\n                }\r\n            }\r\n        } catch (e) { btnIsDissablefunc({ btnId, state: false }) }\r\n    };\r\n\r\n    // IsEditMode_Css is use of module Edit_mode (reduce page-content marging)\r\n    var IsEditMode_Css = ''\r\n    if ((modalCss) || (pageMode === mode.dropdownAdd)) { IsEditMode_Css = \"-5.5%\" };\r\n\r\n    if (!(userPageAccessState === '')) {\r\n        return (\r\n            <React.Fragment>\r\n                <MetaTags>{metaTagLabel(userPageAccessState)}</MetaTags>\r\n\r\n                <div className=\"page-content\" style={{ marginTop: IsEditMode_Css }}>\r\n                    <Container fluid>\r\n\r\n                        <Card className=\"text-black\">\r\n                            <CardHeader className=\"card-header   text-black c_card_header\">\r\n                                <h4 className=\"card-title text-black\">{userPageAccessState.PageDescription}</h4>\r\n                                <p className=\"card-title-desc text-black\">{userPageAccessState.PageDescriptionDetails}</p>\r\n                            </CardHeader>\r\n\r\n                            <CardBody className=\" vh-10 0 text-black\" style={{ backgroundColor: \"#whitesmoke\" }} >\r\n                                <form noValidate>\r\n                                    <Row className=\"\">\r\n                                        <Col md={12}>\r\n                                            <Card>\r\n                                                <CardBody className=\"c_card_body\">\r\n                                                    <Row>\r\n                                                        <FormGroup className=\"mb-2 col col-sm-4 \">\r\n                                                            <Label htmlFor=\"validationCustom01\">{fieldLabel.Name}</Label>\r\n                                                            <Input\r\n                                                                name=\"Name\"\r\n                                                                id=\"txtName\"\r\n                                                                value={values.Name}\r\n                                                                type=\"text\"\r\n                                                                className={isError.Name.length > 0 ? \"is-invalid form-control\" : \"form-control\"}\r\n                                                                placeholder=\"Please Enter Name\"\r\n                                                                autoComplete=\"off\"\r\n                                                                autoFocus={true}\r\n                                                                onChange={(event) => {\r\n                                                                    onChangeText({ event, state, setState })\r\n                                                                    dispatch(Breadcrumb_inputName(event.target.value))\r\n                                                                }}\r\n                                                            />\r\n                                                            {isError.Name.length > 0 && (\r\n                                                                <span className=\"invalid-feedback\">{isError.Name}</span>\r\n                                                            )}\r\n                                                        </FormGroup>\r\n\r\n                                                        <FormGroup className=\"mt-2\">\r\n                                                            <Row>\r\n                                                                <Col sm={2}>\r\n                                                                    <SaveButton pageMode={pageMode}\r\n                                                                        loading={saveBtnloading}\r\n                                                                        onClick={SaveHandler}\r\n                                                                        userAcc={userPageAccessState}\r\n                                                                        editCreatedBy={editCreatedBy}\r\n                                                                        module={\"CategoryTypeMaster\"}\r\n                                                                    />\r\n                                                                </Col>\r\n                                                            </Row>\r\n                                                        </FormGroup>\r\n                                                    </Row>\r\n                                                </CardBody>\r\n                                            </Card>\r\n                                        </Col>\r\n                                    </Row>\r\n                                </form>\r\n                            </CardBody>\r\n                        </Card>\r\n                    </Container>\r\n                </div>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n    else {\r\n        return (\r\n            <React.Fragment></React.Fragment>\r\n        )\r\n    }\r\n};\r\n\r\nexport default CategoryTypeMaster\r\n\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\CategoryPages\\CategoryMaster.js",["3076","3077","3078","3079","3080","3081","3082","3083"],"import React, { useEffect, useState, } from \"react\";\r\nimport {\r\n    Card,\r\n    CardBody,\r\n    CardHeader,\r\n    Col,\r\n    Container,\r\n    FormGroup,\r\n    Input,\r\n    Label,\r\n    Row,\r\n} from \"reactstrap\";\r\nimport Select from \"react-select\";\r\nimport { MetaTags } from \"react-meta-tags\";\r\nimport {\r\n    Breadcrumb_inputName,\r\n    commonPageField,\r\n    commonPageFieldSuccess,\r\n    getCategoryTypelist\r\n} from \"../../../store/actions\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n    editCategoryIDSuccess,\r\n    saveCategoryMaster,\r\n    saveCategoryMaster_Success,\r\n    updateCategoryID,\r\n    updateCategoryIDSuccess\r\n} from \"../../../store/Administrator/CategoryRedux/action\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {\r\n    comAddPageFieldFunc,\r\n    formValid,\r\n    initialFiledFunc,\r\n    onChangeSelect,\r\n    onChangeText,\r\n    resetFunction,\r\n} from \"../../../components/Common/validationFunction\";\r\nimport { SaveButton } from \"../../../components/Common/CommonButton\";\r\nimport {\r\n    breadcrumbReturnFunc,\r\n    btnIsDissablefunc,\r\n    loginUserID,\r\n    metaTagLabel\r\n} from \"../../../components/Common/CommonFunction\";\r\nimport * as url from \"../../../routes/route_url\";\r\nimport * as pageId from \"../../../routes/allPageID\"\r\nimport * as mode from \"../../../routes/PageMode\"\r\nimport AddMaster from \"../../Adminisrator/EmployeePages/Drodown\";\r\nimport CategoryTypeMaster from \"../CategoryTypePages/CategoryTypeMaster\";\r\nimport { customAlert } from \"../../../CustomAlert/ConfirmDialog\";\r\n\r\nconst CategoryMaster = (props) => {\r\n\r\n    const history = useHistory()\r\n    const dispatch = useDispatch();\r\n\r\n    const fileds = {\r\n        id: \"\",\r\n        Name: \"\",\r\n        CategoryTypeName: \"\"\r\n    }\r\n\r\n    const [state, setState] = useState(() => initialFiledFunc(fileds))\r\n\r\n    const [pageMode, setPageMode] = useState(mode.defaultsave);//changes\r\n    const [modalCss, setModalCss] = useState(false);\r\n    const [userPageAccessState, setUserAccState] = useState(123);\r\n    const [editCreatedBy, seteditCreatedBy] = useState(\"\");\r\n    const [categoryType_AddAccess, setCategoryType_AddAccess] = useState(false)\r\n    //Access redux store Data /  'save_ModuleSuccess' action data\r\n    const {\r\n        postMsg,\r\n        CategoryAPI,\r\n        pageField,\r\n        updateMsg,\r\n        saveBtnloading,\r\n        userAccess } = useSelector((state) => ({\r\n            saveBtnloading: state.CategoryReducer.saveBtnloading ,\r\n            postMsg: state.CategoryReducer.postMsg,\r\n            updateMsg: state.CategoryReducer.updateMessage,\r\n            CategoryAPI: state.categoryTypeReducer.categoryTypeListData,\r\n            userAccess: state.Login.RoleAccessUpdateData,\r\n            pageField: state.CommonPageFieldReducer.pageField\r\n        }));\r\n\r\n    useEffect(() => {\r\n        const page_Id = pageId.CATEGORY//changes\r\n        dispatch(commonPageFieldSuccess(null));\r\n        dispatch(commonPageField(page_Id))\r\n        dispatch(getCategoryTypelist());\r\n    }, []);\r\n\r\n    const values = { ...state.values }\r\n    const { isError } = state;\r\n    const { fieldLabel } = state;\r\n\r\n    const location = { ...history.location }\r\n    const hasShowloction = location.hasOwnProperty(mode.editValue)//changes\r\n    const hasShowModal = props.hasOwnProperty(mode.editValue)//changes\r\n\r\n    // userAccess useEffect\r\n    useEffect(() => {\r\n        let userAcc = null;\r\n        let locationPath;\r\n\r\n        if (props.pageMode === mode.dropdownAdd) {\r\n            locationPath = props.masterPath;\r\n        } else {\r\n            locationPath = location.pathname;\r\n        }\r\n\r\n        if (hasShowModal) {\r\n            locationPath = props.masterPath;\r\n        };\r\n\r\n        userAcc = userAccess.find((inx) => {\r\n            return (`/${inx.ActualPagePath}` === locationPath)\r\n        })\r\n\r\n        if (userAcc) {\r\n            setUserAccState(userAcc);\r\n            if (!props.isdropdown) {\r\n                breadcrumbReturnFunc({ dispatch, userAcc });\r\n            }\r\n        };\r\n        userAccess.find((index) => {\r\n            if (index.id === pageId.CATEGORYTYPE) {\r\n                return setCategoryType_AddAccess(true)\r\n            }\r\n\r\n        });\r\n    }, [userAccess])\r\n\r\n    // This UseEffect 'SetEdit' data and 'autoFocus' while this Component load First Time.\r\n    useEffect(() => {\r\n\r\n        if ((hasShowloction || hasShowModal)) {\r\n\r\n            let hasEditVal = null\r\n            if (hasShowloction) {\r\n                setPageMode(location.pageMode)\r\n                hasEditVal = location.editValue\r\n            }\r\n            else if (hasShowModal) {\r\n                hasEditVal = props.editValue\r\n                setPageMode(props.pageMode)\r\n                setModalCss(true)\r\n            }\r\n\r\n            if (hasEditVal) {\r\n                const { id, Name, CategoryTypeName, CategoryType } = hasEditVal\r\n                const { values, fieldLabel, hasValid, required, isError } = { ...state }\r\n\r\n                hasValid.Name.valid = true;\r\n                hasValid.CategoryTypeName.valid = true;\r\n\r\n                values.id = id\r\n                values.Name = Name;\r\n                values.CategoryTypeName = { label: CategoryTypeName, value: CategoryType };\r\n\r\n                setState({ values, fieldLabel, hasValid, required, isError })\r\n                dispatch(Breadcrumb_inputName(hasEditVal.Name))\r\n                seteditCreatedBy(hasEditVal.CreatedBy)\r\n            }\r\n            dispatch(editCategoryIDSuccess({ Status: false }))\r\n        }\r\n    }, [])\r\n\r\n    useEffect(async () => {\r\n\r\n        if ((postMsg.Status === true) && (postMsg.StatusCode === 200)) {\r\n            dispatch(saveCategoryMaster_Success({ Status: false }))\r\n            setState(() => resetFunction(fileds, state)) //Clear form values \r\n            dispatch(Breadcrumb_inputName(''))\r\n\r\n            if (pageMode === \"other\") {\r\n                customAlert({\r\n                    Type: 1,\r\n                    Message: postMsg.Message,\r\n                })\r\n            }\r\n            else {\r\n                let isPermission = await customAlert({\r\n                    Type: 1,\r\n                    Status: true,\r\n                    Message: postMsg.Message,\r\n                })\r\n                if (isPermission) {\r\n                    history.push({ pathname: url.CATEGORY_lIST })\r\n                }\r\n            }\r\n        }\r\n        else if (postMsg.Status === true) {\r\n            dispatch(saveCategoryMaster_Success({ Status: false }))\r\n            customAlert({\r\n                Type: 4,\r\n                Message: JSON.stringify(postMsg.Message),\r\n            })\r\n        }\r\n    }, [postMsg])\r\n\r\n    useEffect(() => {\r\n        if (updateMsg.Status === true && updateMsg.StatusCode === 200 && !modalCss) {\r\n            setState(() => resetFunction(fileds, state)) // Clear form values \r\n            history.push({\r\n                pathname: url.CATEGORY_lIST,\r\n            })\r\n        } else if (updateMsg.Status === true && !modalCss) {\r\n            dispatch(updateCategoryIDSuccess({ Status: false }));\r\n                customAlert({\r\n                    Type: 3,\r\n                    Message: JSON.stringify(updateMsg.Message),\r\n                })\r\n        }\r\n    }, [updateMsg, modalCss]);\r\n\r\n    useEffect(() => {\r\n        if (pageField) {\r\n            const fieldArr = pageField.PageFieldMaster\r\n            comAddPageFieldFunc({ state, setState, fieldArr })\r\n        }\r\n    }, [pageField])\r\n\r\n    const CategoryTypesValues = CategoryAPI.map((Data) => ({\r\n        value: Data.id,\r\n        label: Data.Name\r\n    }));\r\n\r\n    const saveHandeller = async (event) => {\r\n        event.preventDefault();\r\n        const btnId = event.target.id\r\n        try {\r\n            if (formValid(state, setState)) {\r\n                btnIsDissablefunc({ btnId, state: true })\r\n\r\n                const jsonBody = JSON.stringify({\r\n                    Name: values.Name,\r\n                    CategoryType: values.CategoryTypeName.value,\r\n                    CreatedBy: loginUserID(),\r\n                    UpdatedBy: loginUserID()\r\n                });\r\n\r\n                if (pageMode === mode.edit) {\r\n                    dispatch(updateCategoryID({ jsonBody, updateId: values.id, btnId }));\r\n                }\r\n\r\n                else {\r\n                    dispatch(saveCategoryMaster({ jsonBody, btnId }));\r\n                }\r\n            }\r\n        } catch (e) { btnIsDissablefunc({ btnId, state: false }) }\r\n    };\r\n\r\n    // IsEditMode_Css is use of module Edit_mode (reduce page-content marging)\r\n    var IsEditMode_Css = ''\r\n    if ((modalCss) || (pageMode === mode.dropdownAdd)) { IsEditMode_Css = \"-5.5%\" };\r\n\r\n    if (!(userPageAccessState === '')) {\r\n        return (\r\n            <React.Fragment>\r\n                <MetaTags>{metaTagLabel(userPageAccessState)}</MetaTags>\r\n\r\n                <div className=\"page-content\" style={{ marginTop: IsEditMode_Css, height: \"18cm\" }}>\r\n                    <Container fluid>\r\n                        <Card className=\"text-black\">\r\n                            <CardHeader className=\"card-header   text-black c_card_header\" >\r\n                                <h4 className=\"card-title text-black\">{userPageAccessState.PageDescription}</h4>\r\n                                <p className=\"card-title-desc text-black\">{userPageAccessState.PageDescriptionDetails}</p>\r\n                            </CardHeader>\r\n\r\n                            <CardBody className=\" vh-10 0 text-black\" style={{ backgroundColor: \"#whitesmoke\" }} >\r\n                                <form noValidate>\r\n\r\n                                    <Card>\r\n                                        <CardBody className=\"c_card_body\">\r\n                                            <Row>\r\n                                                <FormGroup className=\"mb-2 col col-sm-4 \">\r\n                                                    <Label htmlFor=\"validationCustom01\">{fieldLabel.Name} </Label>\r\n                                                    <Input\r\n                                                        name=\"Name\"\r\n                                                        id=\"txtName\"\r\n                                                        value={values.Name}\r\n                                                        type=\"text\"\r\n                                                        className={isError.Name.length > 0 ? \"is-invalid form-control\" : \"form-control\"}\r\n                                                        placeholder=\"Please Enter Name\"\r\n                                                        autoComplete='off'\r\n                                                        autoFocus={true}\r\n                                                        onChange={(event) => {\r\n                                                            onChangeText({ event, state, setState })\r\n                                                            dispatch(Breadcrumb_inputName(event.target.value))\r\n                                                        }}\r\n                                                    />\r\n                                                    {isError.Name.length > 0 && (\r\n                                                        <span className=\"invalid-feedback\">{isError.Name}</span>\r\n                                                    )}\r\n                                                </FormGroup>\r\n                                            </Row>\r\n                                            <Row>\r\n\r\n                                                <Col md=\"4\" >\r\n                                                    <FormGroup className=\"mb-3\">\r\n                                                        <Label htmlFor=\"validationCustom01\"> {fieldLabel.CategoryTypeName} </Label>\r\n                                                        <Col sm={12} >\r\n                                                            <Select\r\n                                                                name=\"CategoryTypeName\"\r\n                                                                value={values.CategoryTypeName}\r\n                                                                isSearchable={true}\r\n                                                                className=\"react-dropdown\"\r\n                                                                classNamePrefix=\"dropdown\"\r\n                                                                options={CategoryTypesValues}\r\n                                                                onChange={(hasSelect, evn) => onChangeSelect({ hasSelect, evn, state, setState, })}\r\n\r\n                                                            />\r\n                                                            {isError.CategoryTypeName.length > 0 && (\r\n                                                                <span className=\"text-danger f-8\"><small>{isError.CategoryTypeName}</small></span>\r\n                                                            )}\r\n                                                        </Col>\r\n                                                    </FormGroup>\r\n                                                </Col>\r\n\r\n                                                {(categoryType_AddAccess) &&\r\n                                                    <Col md=\"1\" className=\" mt-3\">\r\n                                                        <AddMaster\r\n                                                            masterModal={CategoryTypeMaster}\r\n                                                            masterPath={url.CATEGORYTYPE}\r\n                                                        />\r\n                                                    </Col>}\r\n                                            </Row>\r\n\r\n                                            <FormGroup className=\"mt-1\">\r\n                                                <Row>\r\n                                                    <Col sm={2}>\r\n                                                        <SaveButton pageMode={pageMode}\r\n                                                            loading={saveBtnloading}\r\n                                                            onClick={saveHandeller}\r\n                                                            userAcc={userPageAccessState}\r\n                                                            editCreatedBy={editCreatedBy}\r\n                                                            module={\"CategoryMaster\"}\r\n                                                        />\r\n                                                    </Col>\r\n                                                </Row>\r\n                                            </FormGroup>\r\n                                        </CardBody>\r\n                                    </Card>\r\n\r\n                                </form>\r\n                            </CardBody>\r\n                        </Card>\r\n                    </Container>\r\n                </div>\r\n            </React.Fragment >\r\n        );\r\n    }\r\n    else {\r\n        return (\r\n            <React.Fragment></React.Fragment>\r\n        )\r\n    }\r\n};\r\n\r\nexport default CategoryMaster\r\n\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\CategoryPages\\CategoryList.js",["3084"],"import React, { useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport CategoryMaster from \"./CategoryMaster\";\r\nimport {\r\n  deleteCategoryIDSuccess,\r\n  delete_Category_ID,\r\n  editCategoryID,\r\n  getCategorylist,\r\n  getCategorylistSuccess,\r\n  saveCategoryMaster_Success,\r\n  updateCategoryIDSuccess\r\n} from \"../../../store/Administrator/CategoryRedux/action\";\r\nimport { commonPageFieldList, commonPageFieldListSuccess } from \"../../../store/actions\";\r\nimport CommonListPage from \"../../../components/Common/CommonMasterListPage\";\r\nimport * as pageId from \"../../../routes/allPageID\"\r\nimport * as url from \"../../../routes/route_url\";\r\nimport { PageLoadingSpinner } from \"../../../components/Common/CommonButton\";\r\n\r\nconst CategoryList = (props) => {\r\n\r\n  const dispatch = useDispatch();\r\n  const reducers = useSelector(\r\n    (state) => ({\r\n      listBtnLoading: state.CategoryReducer.listBtnLoading,\r\n      goBtnLoading: state.CategoryReducer.goBtnLoading,\r\n      tableList: state.CategoryReducer.CategoryListData,\r\n      editData: state.CategoryReducer.editData,\r\n      updateMsg: state.CategoryReducer.updateMessage,\r\n      deleteMsg: state.CategoryReducer.deleteMessage,\r\n      userAccess: state.Login.RoleAccessUpdateData,\r\n      postMsg: state.CategoryReducer.postMsg,\r\n      pageField: state.CommonPageFieldReducer.pageFieldList\r\n    })\r\n  );\r\n\r\n  const action = {\r\n    getList: getCategorylist,\r\n    editId: editCategoryID,\r\n    deleteId: delete_Category_ID,\r\n    postSucc: saveCategoryMaster_Success,\r\n    updateSucc: updateCategoryIDSuccess,\r\n    deleteSucc: deleteCategoryIDSuccess\r\n  }\r\n\r\n  //  This UseEffect => Featch Modules List data  First Rendering\r\n  useEffect(() => {\r\n    const page_Id = pageId.CATEGORY_lIST\r\n    dispatch(commonPageFieldListSuccess(null))\r\n    dispatch(commonPageFieldList(page_Id))\r\n    dispatch(getCategorylist());\r\n\r\n    return () => {\r\n      dispatch(getCategorylistSuccess([]));\r\n      dispatch(commonPageFieldListSuccess(null))\r\n    }\r\n  }, []);\r\n\r\n  const { pageField, goBtnLoading } = reducers\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <PageLoadingSpinner isLoading={(goBtnLoading || !pageField)} />\r\n      {\r\n        (pageField) &&\r\n        <CommonListPage\r\n          action={action}\r\n          reducers={reducers}\r\n          MasterModal={CategoryMaster}\r\n          masterPath={url.CATEGORY}\r\n          ButtonMsgLable={\"Category\"}\r\n          deleteName={\"Name\"}\r\n        />\r\n      }\r\n\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nexport default CategoryList;\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\VehiclePages\\VehicleList.js",["3085","3086","3087"],"import React, { useEffect, useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport VehicleMaster from \"./VehicleMaster\";\r\nimport {\r\n  deleteVehicleID_Success,\r\n  updateVehicleID_Success,\r\n  getVehicleList,\r\n  editVehicleID,\r\n  deleteVehicleID,\r\n  saveVehicleMasterSuccess,\r\n  getVehicleListSuccess\r\n} from \"../../../store/Administrator/VehicleRedux/action\";\r\nimport { commonPageFieldList, commonPageFieldListSuccess, } from \"../../../store/actions\";\r\nimport * as pageId from \"../../../routes/allPageID\"\r\nimport * as url from \"../../../routes/route_url\";\r\nimport CommonPurchaseList from \"../../../components/Common/CommonPurchaseList\";\r\nimport PartyDropdown_Common from \"../../../components/Common/PartyDropdown\";\r\nimport * as _cfunc from \"../../../components/Common/CommonFunction\";\r\nimport { PageLoadingSpinner } from \"../../../components/Common/CommonButton\";\r\nimport { customAlert } from \"../../../CustomAlert/ConfirmDialog\";\r\n\r\n\r\nconst VehicleList = () => {\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const reducers = useSelector(\r\n    (state) => ({\r\n      goBtnLoading: state.VehicleReducer.goBtnLoading,\r\n      listBtnLoading: state.VehicleReducer.listBtnLoading,\r\n      tableList: state.VehicleReducer.VehicleList,\r\n      postMsg: state.VehicleReducer.postMsg,\r\n      editData: state.VehicleReducer.editData,\r\n      updateMsg: state.VehicleReducer.updateMsg,\r\n      deleteMsg: state.VehicleReducer.deleteMsg,\r\n      userAccess: state.Login.RoleAccessUpdateData,\r\n      pageField: state.CommonPageFieldReducer.pageFieldList,\r\n    })\r\n  );\r\n  const { pageField, goBtnLoading } = reducers\r\n\r\n  const action = {\r\n    getList: getVehicleList,\r\n    editId: editVehicleID,\r\n    deleteId: deleteVehicleID,\r\n    postSucc: saveVehicleMasterSuccess,\r\n    updateSucc: updateVehicleID_Success,\r\n    deleteSucc: deleteVehicleID_Success,\r\n  }\r\n\r\n  //  This UseEffect => Featch Modules List data  First Rendering\r\n  useEffect(() => {\r\n    const page_Id = pageId.VEHICLE_lIST\r\n    dispatch(commonPageFieldListSuccess(null))\r\n    dispatch(commonPageFieldList(page_Id))\r\n    if (!(_cfunc.loginSelectedPartyID() === 0)) {\r\n      goButtonHandler()\r\n    }\r\n    return () => {\r\n      dispatch(getVehicleListSuccess([]));\r\n      dispatch(commonPageFieldListSuccess(null))\r\n    }\r\n  }, []);\r\n\r\n  const goButtonHandler = () => {\r\n    try {\r\n      if (_cfunc.loginSelectedPartyID() === 0) {\r\n        customAlert({ Type: 3, Message: \"Please Select Party\" });\r\n        return;\r\n      };\r\n      const jsonBody = {\r\n        ..._cfunc.loginJsonBody(),\r\n        PartyID: _cfunc.loginSelectedPartyID()\r\n      };\r\n\r\n      dispatch(getVehicleList(jsonBody));\r\n    } catch (error) { }\r\n    return\r\n  };\r\n\r\n  const partyOnChngeButtonHandler = () => {\r\n    dispatch(getVehicleListSuccess([]));\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <PageLoadingSpinner isLoading={(goBtnLoading || !pageField)} />\r\n      <div className=\"page-content\">\r\n\r\n        <PartyDropdown_Common \r\n          goBtnLoading={goBtnLoading}\r\n          goButtonHandler={goButtonHandler}\r\n          changeButtonHandler={partyOnChngeButtonHandler}\r\n        />\r\n\r\n        {\r\n          (pageField) &&\r\n          <div className=\"mt-n1\">\r\n            <CommonPurchaseList\r\n              action={action}\r\n              reducers={reducers}\r\n              showBreadcrumb={false}\r\n              MasterModal={VehicleMaster}\r\n              masterPath={url.VEHICLE}\r\n              newBtnPath={url.VEHICLE}\r\n              ButtonMsgLable={\"Vehicle\"}\r\n              deleteName={\"VehicleNumber\"}\r\n              goButnFunc={goButtonHandler}\r\n            />\r\n          </div>\r\n\r\n        }\r\n      </div>\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nexport default VehicleList;\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\VehiclePages\\VehicleMaster.js",["3088","3089","3090","3091","3092","3093","3094","3095","3096","3097","3098"],"import React, { useEffect, useState, } from \"react\";\r\nimport {\r\n    Card,\r\n    CardBody,\r\n    CardHeader,\r\n    Col,\r\n    Container,\r\n    FormGroup,\r\n    Label,\r\n    Row,\r\n    Input,\r\n} from \"reactstrap\";\r\nimport Select from \"react-select\";\r\nimport { MetaTags } from \"react-meta-tags\";\r\nimport {\r\n    Breadcrumb_inputName,\r\n    commonPageField,\r\n    commonPageFieldSuccess\r\n} from \"../../../store/actions\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n    saveVehicleMaster,\r\n    getVehicleType_for_dropdown,\r\n    saveVehicleMasterSuccess,\r\n    getVehicleListSuccess,\r\n    editVehicleID_Success,\r\n    updateVehicleID,\r\n    updateVehicleID_Success\r\n} from \"../../../store/Administrator/VehicleRedux/action\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {\r\n    comAddPageFieldFunc,\r\n    formValid,\r\n    initialFiledFunc,\r\n    onChangeSelect,\r\n    onChangeText,\r\n    resetFunction\r\n} from \"../../../components/Common/validationFunction\";\r\nimport { SaveButton } from \"../../../components/Common/CommonButton\";\r\nimport {\r\n    breadcrumbReturnFunc,\r\n    loginCompanyID,\r\n    loginPartyID,\r\n    loginUserID,\r\n    btnIsDissablefunc,\r\n    metaTagLabel,\r\n    loginUserAdminRole,\r\n    loginSelectedPartyID,\r\n} from \"../../../components/Common/CommonFunction\";\r\nimport PartyDropdown_Common from \"../../../components/Common/PartyDropdown\";\r\nimport * as pageId from \"../../../routes/allPageID\";\r\nimport * as url from \"../../../routes/route_url\";\r\nimport * as mode from \"../../../routes/PageMode\";\r\nimport { customAlert } from \"../../../CustomAlert/ConfirmDialog\";\r\n\r\nconst VehicleMaster = (props) => {\r\n\r\n    const dispatch = useDispatch();\r\n    const history = useHistory()\r\n    const userAdminRole = loginUserAdminRole();\r\n\r\n    const fileds = {\r\n        id: \"\",\r\n        VehicleNumber: \"\",\r\n        Description: \"\",\r\n        VehicleTypeName: \"\",\r\n        Party: ''\r\n    }\r\n\r\n    const [state, setState] = useState(() => initialFiledFunc(fileds))\r\n\r\n    const [modalCss, setModalCss] = useState(false);\r\n    const [pageMode, setPageMode] = useState(mode.defaultsave);\r\n    const [userPageAccessState, setUserAccState] = useState('');\r\n    const [editCreatedBy, seteditCreatedBy] = useState(\"\");\r\n\r\n    //Access redux store Data /  'save_ModuleSuccess' action data\r\n    const {\r\n        postMsg,\r\n        updateMsg,\r\n        VehicleTypes,\r\n        pageField,\r\n        saveBtnloading,\r\n        userAccess } = useSelector((state) => ({\r\n            saveBtnloading: state.VehicleReducer.saveBtnloading,\r\n            postMsg: state.VehicleReducer.postMsg,\r\n            updateMsg: state.VehicleReducer.updateMsg,\r\n            VehicleList: state.VehicleReducer.VehicleList,\r\n            VehicleTypes: state.VehicleReducer.VehicleTypes,\r\n            userAccess: state.Login.RoleAccessUpdateData,\r\n            pageField: state.CommonPageFieldReducer.pageField,\r\n        }));\r\n\r\n    useEffect(() => {\r\n        const page_Id = pageId.VEHICLE\r\n        dispatch(commonPageFieldSuccess(null));\r\n        dispatch(commonPageField(page_Id))\r\n        dispatch(getVehicleType_for_dropdown());\r\n    }, []);\r\n\r\n    const location = { ...history.location }\r\n    const hasShowloction = location.hasOwnProperty(mode.editValue)\r\n    const hasShowModal = props.hasOwnProperty(mode.editValue)\r\n\r\n    const values = { ...state.values }\r\n    const { isError } = state;\r\n    const { fieldLabel } = state;\r\n\r\n    // userAccess useEffect\r\n    useEffect(() => {\r\n        let userAcc = null;\r\n        let locationPath = location.pathname;\r\n\r\n        if (hasShowModal) {\r\n            locationPath = props.masterPath;\r\n        };\r\n\r\n        userAcc = userAccess.find((inx) => {\r\n            return (`/${inx.ActualPagePath}` === locationPath)\r\n        })\r\n\r\n        if (userAcc) {\r\n            setUserAccState(userAcc)\r\n            breadcrumbReturnFunc({ dispatch, userAcc });\r\n        };\r\n    }, [userAccess])\r\n\r\n    // This UseEffect 'SetEdit' data and 'autoFocus' while this Component load First Time\r\n    useEffect(() => {\r\n\r\n        if ((hasShowloction || hasShowModal)) {\r\n\r\n            let hasEditVal = null\r\n            if (hasShowloction) {\r\n                setPageMode(location.pageMode)\r\n                hasEditVal = location.editValue\r\n            }\r\n            else if (hasShowModal) {\r\n                hasEditVal = props.editValue\r\n                setPageMode(props.pageMode)\r\n                setModalCss(true)\r\n            }\r\n\r\n            if (hasEditVal) {\r\n                const { id, VehicleNumber, Description, VehicleType, VehicleTypeName, Party, PartyName } = hasEditVal\r\n                const { values, fieldLabel, hasValid, required, isError } = { ...state }\r\n\r\n                hasValid.VehicleNumber.valid = true;\r\n                hasValid.Description.valid = true;\r\n                hasValid.VehicleTypeName.valid = true;\r\n                hasValid.Party.valid = true;\r\n\r\n                values.id = id\r\n                values.VehicleNumber = VehicleNumber\r\n                values.Description = Description\r\n                values.VehicleTypeName = { label: VehicleTypeName, value: VehicleType };\r\n                values.Party = { value: Party, label: PartyName }\r\n\r\n                setState({ values, fieldLabel, hasValid, required, isError })\r\n                dispatch(Breadcrumb_inputName(hasEditVal.RoleMaster))\r\n                dispatch(editVehicleID_Success({ Status: false }))\r\n                seteditCreatedBy(hasEditVal.CreatedBy)\r\n            }\r\n        }\r\n    }, []);\r\n\r\n    useEffect(async () => {\r\n        if ((postMsg.Status === true) && (postMsg.StatusCode === 200)) {\r\n            dispatch(saveVehicleMasterSuccess({ Status: false }))\r\n            setState(() => resetFunction(fileds, state))// Clear form values  \r\n            dispatch(Breadcrumb_inputName(''))\r\n\r\n            if (pageMode === mode.dropdownAdd) {\r\n                customAlert({\r\n                    Type: 1,\r\n                    Message: postMsg.Message,\r\n                })\r\n            }\r\n            else {\r\n                let isPermission = await customAlert({\r\n                    Type: 1,\r\n                    Status: true,\r\n                    Message: postMsg.Message,\r\n                })\r\n                if (isPermission) {\r\n                    history.push({ pathname: url.VEHICLE_lIST })\r\n                }\r\n            }\r\n        }\r\n        else if (postMsg.Status === true) {\r\n            dispatch(getVehicleListSuccess({ Status: false }))\r\n            customAlert({\r\n                Type: 4,\r\n                Message: JSON.stringify(postMsg.Message),\r\n            })\r\n        }\r\n    }, [postMsg])\r\n\r\n    useEffect(() => {\r\n        if (updateMsg.Status === true && updateMsg.StatusCode === 200 && !modalCss) {\r\n            setState(() => resetFunction(fileds, state))// Clear form values \r\n            history.push({\r\n                pathname: url.VEHICLE_lIST,\r\n            })\r\n        } else if (updateMsg.Status === true && !modalCss) {\r\n            dispatch(updateVehicleID_Success({ Status: false }));\r\n            customAlert({\r\n                Type: 3,\r\n                Message: JSON.stringify(updateMsg.Message),\r\n            })\r\n        }\r\n    }, [updateMsg, modalCss]);\r\n\r\n    useEffect(() => {\r\n\r\n        if (pageField) {\r\n            const fieldArr = pageField.PageFieldMaster\r\n            comAddPageFieldFunc({ state, setState, fieldArr })\r\n        }\r\n    }, [pageField])\r\n\r\n    const VehicleType_DropdownOptions = VehicleTypes.map((data) => ({\r\n        value: data.id,\r\n        label: data.Name\r\n    }));\r\n\r\n    const partyOnChngeHandler = (e) => {\r\n        setState((i) => {\r\n            const a = { ...i }\r\n            a.values.Party = e;\r\n            return a\r\n        })\r\n    }\r\n\r\n    const SaveHandler = async (event) => {\r\n        event.preventDefault();\r\n        const btnId = event.target.id\r\n        if ((loginSelectedPartyID() === 0)) {\r\n            customAlert({ Type: 3, Message: \"Please Select Party\" });\r\n            return;\r\n        };\r\n        try {\r\n            \r\n            if (formValid(state, setState)) {\r\n                btnIsDissablefunc({ btnId, state: true })\r\n\r\n                const jsonBody = JSON.stringify({\r\n\r\n                    VehicleNumber: values.VehicleNumber,\r\n                    Description: values.Description,\r\n                    VehicleType: values.VehicleTypeName.value,\r\n                    Party:loginSelectedPartyID(),\r\n                    Company: loginCompanyID(),\r\n                    CreatedBy: loginUserID(),\r\n                    UpdatedBy: loginUserID()\r\n                });\r\n\r\n                if (pageMode === mode.edit) {\r\n                    dispatch(updateVehicleID({ jsonBody, updateId: values.id, btnId }));\r\n                }\r\n                else {\r\n                    dispatch(saveVehicleMaster({ jsonBody, btnId }));\r\n                }\r\n            }\r\n        } catch (e) { btnIsDissablefunc({ btnId, state: false }) }\r\n    };\r\n\r\n    // IsEditMode_Css is use of module Edit_mode (reduce page-content marging)\r\n    var IsEditMode_Css = ''\r\n    if ((modalCss) || (pageMode === mode.dropdownAdd)) { IsEditMode_Css = \"-5.5%\" };\r\n\r\n    if (!(userPageAccessState === '')) {\r\n        return (\r\n            <React.Fragment>\r\n                <div className=\"page-content\" style={{ marginTop: IsEditMode_Css }}>\r\n                    <Container fluid>\r\n                        <MetaTags>{metaTagLabel(userPageAccessState)}</MetaTags>\r\n\r\n                        <PartyDropdown_Common pageMode={pageMode} />\r\n\r\n                        <Card className=\"text-black\" style={{ marginTop: \"3px\" }}>\r\n                            <CardHeader className=\"card-header   text-black c_card_header\" >\r\n                                <h4 className=\"card-title text-black\">{userPageAccessState.PageDescription}</h4>\r\n                                <p className=\"card-title-desc text-black\">{userPageAccessState.PageDescriptionDetails}</p>\r\n                            </CardHeader>\r\n\r\n                            <CardBody className=\" vh-10 0 text-black\" style={{ backgroundColor: \"#whitesmoke\" }} >\r\n                                <form noValidate>\r\n\r\n                                    <Col md={12}>\r\n                                        <Card>\r\n                                            <CardBody className=\"c_card_body\">\r\n                                                <Row>\r\n                                                    <FormGroup className=\"mb-2 col col-sm-3 \">\r\n                                                        <Label htmlFor=\"validationCustom01\">{fieldLabel.VehicleTypeName} </Label>\r\n                                                        <Select\r\n                                                            id=\"VehicleDropDown \"\r\n                                                            name=\"VehicleTypeName\"\r\n                                                            value={values.VehicleTypeName}\r\n                                                            isSearchable={true}\r\n                                                            autoFocus={true}\r\n                                                            className=\"react-dropdown\"\r\n                                                            classNamePrefix=\"dropdown\"\r\n                                                            options={VehicleType_DropdownOptions}\r\n                                                            onChange={(hasSelect, evn) => onChangeSelect({ hasSelect, evn, state, setState, })}\r\n                                                        />\r\n                                                        {isError.VehicleTypeName.length > 0 && (\r\n                                                            <span className=\"text-danger f-8\"><small>{isError.VehicleTypeName}</small></span>\r\n                                                        )}\r\n                                                    </FormGroup>\r\n\r\n                                                    <Col md=\"1\">  </Col>\r\n                                                    <FormGroup className=\"mb-2 col col-sm-3 \">\r\n                                                        <Label htmlFor=\"validationCustom01\">{fieldLabel.VehicleNumber} </Label>\r\n                                                        <Input\r\n                                                            name=\"VehicleNumber\"\r\n                                                            id=\"VehicleNumber\"\r\n                                                            value={values.VehicleNumber}\r\n                                                            type=\"text\"\r\n                                                            className={isError.VehicleNumber.length > 0 ? \"is-invalid form-control\" : \"form-control\"}\r\n                                                            placeholder=\"Please Enter VehicleNumber\"\r\n                                                            autoComplete='off'\r\n                                                            onChange={(event) => {\r\n                                                                onChangeText({ event, state, setState })\r\n                                                                dispatch(Breadcrumb_inputName(event.target.value))\r\n                                                            }}\r\n                                                        />\r\n                                                        {isError.VehicleNumber.length > 0 && (\r\n                                                            <span className=\"invalid-feedback\">{isError.VehicleNumber}</span>\r\n                                                        )}\r\n                                                    </FormGroup>\r\n                                                </Row>\r\n\r\n                                                <Row className=\"mt-2\">\r\n                                                    <FormGroup className=\"mb-2 col col-sm-3 \">\r\n                                                        <Label htmlFor=\"validationCustom01\">{fieldLabel.Description} </Label>\r\n                                                        <Input\r\n                                                            name=\"Description\"\r\n                                                            id=\"Description\"\r\n                                                            value={values.Description}\r\n                                                            type=\"text\"\r\n                                                            className={isError.Description.length > 0 ? \"is-invalid form-control\" : \"form-control\"}\r\n                                                            placeholder=\"Please Enter Description\"\r\n                                                            autoComplete='off'\r\n                                                            onChange={(event) => {\r\n                                                                onChangeText({ event, state, setState })\r\n                                                                dispatch(Breadcrumb_inputName(event.target.value))\r\n                                                            }}\r\n                                                        />\r\n                                                        {isError.Description.length > 0 && (\r\n                                                            <span className=\"invalid-feedback\">{isError.Description}</span>\r\n                                                        )}\r\n                                                    </FormGroup>\r\n\r\n                                                    <Col md=\"1\">  </Col>\r\n\r\n                                                    {/* {RoleID === 2 ?\r\n                                                        <FormGroup className=\"mb-2 col col-sm-3 \">\r\n                                                            <PartyDropdownMaster\r\n                                                                fieldLabel={fieldLabel.Party}\r\n                                                                state={values.Party}\r\n                                                                setState={setState}\r\n                                                            />\r\n                                                        </FormGroup>\r\n                                                        : null} */}\r\n\r\n                                                </Row>\r\n\r\n\r\n                                                <FormGroup>\r\n                                                    <Row>\r\n                                                        <Col sm={2} className=\"mt-3\">\r\n                                                            <SaveButton pageMode={pageMode}\r\n                                                                loading={saveBtnloading}\r\n                                                                onClick={SaveHandler}\r\n                                                                userAcc={userPageAccessState}\r\n                                                                editCreatedBy={editCreatedBy}\r\n                                                                module={\"VehicleMaster\"}\r\n                                                            />\r\n                                                        </Col>\r\n                                                    </Row>\r\n                                                </FormGroup >\r\n\r\n                                            </CardBody>\r\n                                        </Card>\r\n                                    </Col>\r\n\r\n                                </form>\r\n                            </CardBody>\r\n                        </Card>\r\n\r\n                    </Container>\r\n                </div>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n    else {\r\n        return (\r\n            <React.Fragment></React.Fragment>\r\n        )\r\n    }\r\n};\r\n\r\nexport default VehicleMaster\r\n\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\PriceList\\PriceList.js",["3099"],"import React, { useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport PriceMaster from \"./PriceMaster\";\r\nimport {\r\n  delete_PriceListSuccess,\r\n  savePriceMasterActionSuccess,\r\n  delete_PriceList,\r\n  editPriceList,\r\n  updatePriceListSuccess,\r\n  priceListByCompay_Action\r\n} from \"../../../store/Administrator/PriceList/action\";\r\nimport CommonListPage from \"../../../components/Common/CommonMasterListPage\";\r\nimport { commonPageFieldList, commonPageFieldListSuccess } from \"../../../store/actions\";\r\nimport { PRICE } from \"../../../routes/route_url\";\r\nimport * as pageId from \"../../../routes/allPageID\"\r\nimport { PageLoadingSpinner } from \"../../../components/Common/CommonButton\";\r\n\r\nconst PriceList = () => {\r\n  const dispatch = useDispatch();\r\n  const reducers = useSelector(\r\n    (state) => ({\r\n      tableList: state.PriceListReducer.priceListByCompany,\r\n      editData: state.PriceListReducer.editData,\r\n      updateMsg: state.PriceListReducer.updateMessage,\r\n      deleteMsg: state.PriceListReducer.deleteMsg,\r\n      postMsg: state.PriceListReducer.postMsg,\r\n      userAccess: state.Login.RoleAccessUpdateData,\r\n      pageField: state.CommonPageFieldReducer.pageFieldList,\r\n      listBtnLoading:state.PriceListReducer.listBtnLoading\r\n    })\r\n  );\r\n\r\n  const { pageField} = reducers\r\n\r\n  const action = {\r\n    getList: priceListByCompay_Action,\r\n    editId: editPriceList,\r\n    deleteId: delete_PriceList,\r\n    postSucc: savePriceMasterActionSuccess,\r\n    updateSucc: updatePriceListSuccess,\r\n    deleteSucc: delete_PriceListSuccess,\r\n  }\r\n\r\n  //  This UseEffect => Featch Modules List data  First Rendering\r\n  useEffect(() => {\r\n    dispatch(commonPageFieldListSuccess(null))\r\n    dispatch(commonPageFieldList(pageId.PRICE_lIST))\r\n    dispatch(priceListByCompay_Action());\r\n  }, []);\r\n\r\n\r\n  function editBodyfunc(row) {\r\n\r\n    const config = { ...row }\r\n    config.PartyTypeName = row.rowData.PLPartyTypeName\r\n    config.PartyTypeId = row.rowData.PLPartyType;\r\n    config.editId = row.rowData.PLPartyType\r\n\r\n    dispatch(editPriceList(config))\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <PageLoadingSpinner isLoading={(reducers.listBtnLoading || !pageField)} />\r\n      {\r\n        (pageField) &&\r\n        <CommonListPage\r\n            action={action}\r\n            reducers={reducers}\r\n            MasterModal={PriceMaster}\r\n            masterPath={PRICE}\r\n            ButtonMsgLable={\"Price\"}\r\n            deleteName={\"Name\"}\r\n            editBodyfunc={editBodyfunc}\r\n          />\r\n      }\r\n\r\n    </React.Fragment>\r\n  )\r\n}\r\nexport default PriceList;\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\DriverPage\\DriverList.js",["3100","3101","3102"],"import React, { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport DriverMaster from \"./DriverMaster\";\r\nimport {\r\n  deleteDriverID_Success,\r\n  updateDriverID_Success,\r\n  getDriverList,\r\n  editDriverID,\r\n  deleteDriverID,\r\n  saveDriverMasterSuccess,\r\n  getDriverListSuccess,\r\n} from \"../../../store/Administrator/DriverRedux/action\";\r\nimport { commonPageFieldList, commonPageFieldListSuccess } from \"../../../store/actions\";\r\nimport * as pageId from \"../../../routes/allPageID\"\r\nimport * as url from \"../../../routes/route_url\";\r\nimport * as _cfunc from \"../../../components/Common/CommonFunction\";\r\nimport CommonPurchaseList from \"../../../components/Common/CommonPurchaseList\";\r\nimport PartyDropdown_Common from \"../../../components/Common/PartyDropdown\";\r\nimport { PageLoadingSpinner } from \"../../../components/Common/CommonButton\";\r\nimport { customAlert } from \"../../../CustomAlert/ConfirmDialog\";\r\n\r\nconst DriverList = () => {\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const reducers = useSelector(\r\n    (state) => ({\r\n      tableList: state.DriverReducer.DriverList,\r\n      editData: state.DriverReducer.editData,\r\n      updateMsg: state.DriverReducer.updateMessage,\r\n      deleteMsg: state.DriverReducer.deleteMsg,\r\n      postMsg: state.DriverReducer.postMsg,\r\n      userAccess: state.Login.RoleAccessUpdateData,\r\n      pageField: state.CommonPageFieldReducer.pageFieldList,\r\n      listBtnLoading: state.DriverReducer.listBtnLoading,\r\n      GoBtnlistloading: state.DriverReducer.loading\r\n    })\r\n  );\r\n  const { pageField, GoBtnlistloading } = reducers\r\n\r\n  const action = {\r\n    editId: editDriverID,\r\n    deleteId: deleteDriverID,\r\n    postSucc: saveDriverMasterSuccess,\r\n    updateSucc: updateDriverID_Success,\r\n    deleteSucc: deleteDriverID_Success\r\n  }\r\n\r\n  useEffect(() => {\r\n    const page_Id = pageId.DRIVER_lIST\r\n    dispatch(commonPageFieldListSuccess(null))\r\n    dispatch(commonPageFieldList(page_Id))\r\n    if (!(_cfunc.loginSelectedPartyID() === 0)) {\r\n      goButtonHandler()\r\n    }\r\n    return () => {\r\n      dispatch(getDriverListSuccess([]));\r\n    }\r\n  }, []);\r\n\r\n  function goButtonHandler() {\r\n    try {\r\n      if ((_cfunc.loginSelectedPartyID() === 0)) {\r\n        customAlert({ Type: 3, Message: \"Please Select Party\" });\r\n        return;\r\n      };\r\n      const jsonBody = {\r\n        ..._cfunc.loginJsonBody(),\r\n        PartyID: _cfunc.loginSelectedPartyID()\r\n      };\r\n      dispatch(getDriverList(jsonBody));\r\n    }\r\n    catch (error) { }\r\n    return\r\n  };\r\n\r\n  function partyOnChngeButtonHandler() {\r\n    dispatch(getDriverListSuccess([]));\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <PageLoadingSpinner isLoading={(GoBtnlistloading || !pageField)} />\r\n      <div className=\"page-content\">\r\n\r\n        <PartyDropdown_Common \r\n          goBtnLoading={GoBtnlistloading}\r\n          goButtonHandler={goButtonHandler}\r\n          changeButtonHandler={partyOnChngeButtonHandler}\r\n        />\r\n\r\n        {\r\n          (pageField) &&\r\n          <div className=\"mt-n1\">\r\n            <CommonPurchaseList\r\n              action={action}\r\n              reducers={reducers}\r\n              showBreadcrumb={false}\r\n              MasterModal={DriverMaster}\r\n              masterPath={url.DRIVER}\r\n              newBtnPath={url.DRIVER}\r\n              ButtonMsgLable={\"Driver\"}\r\n              deleteName={\"Name\"}\r\n              goButnFunc={goButtonHandler}\r\n            />\r\n          </div>\r\n\r\n        }\r\n      </div>\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nexport default DriverList;\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\CompanyGroupPages\\CompanyGroupList.js",["3103"],"import React, { useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport CompanyGroupMaster from \"./CompanyGroupMaster\";\r\nimport {\r\n  deleteCompanyGroupIDSuccess,\r\n  updateCompanyGroupIDSuccess,\r\n  getCompanyGroupList,\r\n  editCompanyGroupID,\r\n  deleteCompanyGroupID,\r\n  saveCompanyGroupMasterSuccess,\r\n  getCompanyGroupListSuccess,\r\n} from \"../../../store/Administrator/CompanyGroupRedux/action\";\r\nimport CommonListPage from \"../../../components/Common/CommonMasterListPage\";\r\nimport { commonPageFieldList, commonPageFieldListSuccess } from \"../../../store/actions\";\r\nimport * as pageId from \"../../../routes/allPageID\"\r\nimport * as url from \"../../../routes/route_url\";\r\nimport { PageLoadingSpinner, } from \"../../../components/Common/CommonButton\";\r\n\r\nconst CompanyGroupList = (props) => {\r\n\r\n  const dispatch = useDispatch();\r\n  const reducers = useSelector(\r\n    (state) => ({\r\n      listBtnLoading: state.CompanyGroupReducer.listBtnLoading,\r\n      goBtnLoading: state.CompanyGroupReducer.goBtnLoading,\r\n      tableList: state.CompanyGroupReducer.CompanyGroupList,\r\n      editData: state.CompanyGroupReducer.editData,\r\n      updateMsg: state.CompanyGroupReducer.updateMessage,\r\n      deleteMsg: state.CompanyGroupReducer.deleteMessage,\r\n      userAccess: state.Login.RoleAccessUpdateData,\r\n      postMsg: state.CompanyGroupReducer.postMsg,\r\n      pageField: state.CommonPageFieldReducer.pageFieldList\r\n    })\r\n  );\r\n\r\n  const action = {\r\n    getList: getCompanyGroupList,\r\n    editId: editCompanyGroupID,\r\n    deleteId: deleteCompanyGroupID,\r\n    postSucc: saveCompanyGroupMasterSuccess,\r\n    updateSucc: updateCompanyGroupIDSuccess,\r\n    deleteSucc: deleteCompanyGroupIDSuccess,\r\n  }\r\n\r\n  //  This UseEffect => Featch Modules List data  First Rendering\r\n  useEffect(() => {\r\n    const page_Id = pageId.COMPANYGROUP_lIST\r\n    dispatch(commonPageFieldListSuccess(null))\r\n    dispatch(commonPageFieldList(page_Id))\r\n    dispatch(getCompanyGroupList());\r\n\r\n    return () => {\r\n      dispatch(getCompanyGroupListSuccess([]));\r\n      dispatch(commonPageFieldListSuccess(null))\r\n    }\r\n  }, []);\r\n\r\n  const { pageField, goBtnLoading } = reducers\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <PageLoadingSpinner isLoading={(goBtnLoading || !pageField)} />\r\n      {\r\n        (pageField) &&\r\n        <CommonListPage\r\n          action={action}\r\n          reducers={reducers}\r\n          MasterModal={CompanyGroupMaster}\r\n          masterPath={url.COMPANYGROUP}\r\n          ButtonMsgLable={\"Company Group\"}\r\n          deleteName={\"Name\"}\r\n        />\r\n      }\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nexport default CompanyGroupList;\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\DriverPage\\DriverMaster.js",["3104","3105","3106","3107","3108","3109","3110","3111","3112","3113","3114","3115","3116","3117"],"import React, { useEffect, useState, } from \"react\";\r\nimport {\r\n    Card,\r\n    CardBody,\r\n    CardHeader,\r\n    Col,\r\n    Container,\r\n    FormGroup,\r\n    Input,\r\n    Label,\r\n    Row\r\n} from \"reactstrap\";\r\nimport { MetaTags } from \"react-meta-tags\";\r\nimport { Breadcrumb_inputName, commonPageFieldSuccess } from \"../../../store/actions\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { commonPageField } from \"../../../store/actions\";\r\nimport {\r\n    saveDriverMaster,\r\n    saveDriverMasterSuccess,\r\n    getDriverListSuccess,\r\n    editDriverID_Success,\r\n    updateDriverID,\r\n    updateDriverID_Success,\r\n} from \"../../../store/Administrator/DriverRedux/action\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {\r\n    comAddPageFieldFunc,\r\n    formValid,\r\n    onChangeText,\r\n    onChangeDate,\r\n    initialFiledFunc,\r\n    resetFunction\r\n} from \"../../../components/Common/validationFunction\";\r\nimport { SaveButton } from \"../../../components/Common/CommonButton\";\r\nimport * as url from \"../../../routes/route_url\";\r\nimport * as pageId from \"../../../routes/allPageID\"\r\nimport * as mode from \"../../../routes/PageMode\";\r\nimport { C_DatePicker } from \"../../../CustomValidateForm\";\r\nimport * as _cfunc from \"../../../components/Common/CommonFunction\";\r\nimport PartyDropdown_Common from \"../../../components/Common/PartyDropdown\";\r\nimport { customAlert } from \"../../../CustomAlert/ConfirmDialog\";\r\n\r\nconst DriverMaster = (props) => {\r\n\r\n    const dispatch = useDispatch();\r\n    const history = useHistory()\r\n\r\n    const fileds = {\r\n        id: \"\",\r\n        Name: \"\",\r\n        Address: \"\",\r\n        DOB: '',\r\n    }\r\n    const [state, setState] = useState(() => initialFiledFunc(fileds))\r\n\r\n    const [pageMode, setPageMode] = useState(mode.defaultsave);\r\n    const [userPageAccessState, setUserAccState] = useState(\"\");\r\n    const [modalCss, setModalCss] = useState(false);\r\n    const [editCreatedBy, seteditCreatedBy] = useState(\"\");\r\n\r\n    //Access redux store Data /  'save_ModuleSuccess' action data\r\n    const {\r\n        postMsg,\r\n        updateMsg,\r\n        pageField,\r\n        userAccess,\r\n        saveBtnloading,\r\n    } = useSelector((state) => ({\r\n        saveBtnloading: state.DriverReducer.saveBtnloading,\r\n        postMsg: state.DriverReducer.postMsg,\r\n        userAccess: state.Login.RoleAccessUpdateData,\r\n        updateMsg: state.DriverReducer.updateMessage,\r\n        pageField: state.CommonPageFieldReducer.pageField\r\n    }));\r\n\r\n    useEffect(() => {\r\n        const page_Id = pageId.DRIVER\r\n        dispatch(commonPageFieldSuccess(null));\r\n        dispatch(commonPageField(page_Id))\r\n    }, []);\r\n\r\n    const location = { ...history.location }\r\n    const hasShowloction = location.hasOwnProperty(mode.editValue)\r\n    const hasShowModal = props.hasOwnProperty(mode.editValue)\r\n\r\n    const values = { ...state.values }\r\n    const { isError } = state;\r\n    const { fieldLabel } = state;\r\n\r\n    // userAccess useEffect\r\n    useEffect(() => {\r\n\r\n        let userAcc = null;\r\n        let locationPath = location.pathname;\r\n\r\n        if (hasShowModal) {\r\n            locationPath = props.masterPath;\r\n        };\r\n\r\n        userAcc = userAccess.find((inx) => {\r\n            return (`/${inx.ActualPagePath}` === locationPath)\r\n        })\r\n\r\n        if (userAcc) {\r\n            setUserAccState(userAcc)\r\n            _cfunc.breadcrumbReturnFunc({ dispatch, userAcc });\r\n        };\r\n    }, [userAccess])\r\n\r\n    // This UseEffect 'SetEdit' data and 'autoFocus' while this Component load First Time.\r\n    useEffect(() => {\r\n\r\n        if ((hasShowloction || hasShowModal)) {\r\n\r\n            let hasEditVal = null\r\n            if (hasShowloction) {\r\n                setPageMode(location.pageMode)\r\n                hasEditVal = location.editValue\r\n            }\r\n            else if (hasShowModal) {\r\n                hasEditVal = props.editValue\r\n                setPageMode(props.pageMode)\r\n                setModalCss(true)\r\n            }\r\n\r\n            if (hasEditVal) {\r\n\r\n                const { id, Name, DOB, Address, Party, PartyName } = hasEditVal\r\n                const { values, fieldLabel, hasValid, required, isError } = { ...state }\r\n\r\n                hasValid.Name.valid = true;\r\n                hasValid.DOB.valid = true;\r\n                hasValid.Address.valid = true;\r\n                // hasValid.Party.valid = true;\r\n\r\n                values.Name = Name;\r\n                values.DOB = DOB;\r\n                values.Address = Address;\r\n                values.id = id\r\n                // values.Party = { value: Party, label: PartyName }\r\n\r\n                setState({ values, fieldLabel, hasValid, required, isError })\r\n                dispatch(Breadcrumb_inputName(hasEditVal.DriverMaster))\r\n                seteditCreatedBy(hasEditVal.CreatedBy)\r\n            }\r\n            dispatch(editDriverID_Success({ Status: false }))\r\n        }\r\n    }, [])\r\n\r\n    useEffect(async () => {\r\n        if ((postMsg.Status === true) && (postMsg.StatusCode === 200)) {\r\n            dispatch(saveDriverMasterSuccess({ Status: false }))\r\n            setState(() => resetFunction(fileds, state))// Clear form values \r\n            dispatch(Breadcrumb_inputName(''))\r\n            if (pageMode === mode.dropdownAdd) {\r\n                customAlert({\r\n                    Type: 1,\r\n                    Message: postMsg.Message,\r\n                })\r\n            }\r\n            else {\r\n                let isPermission = await customAlert({\r\n                    Type: 1,\r\n                    Status: true,\r\n                    Message: postMsg.Message,\r\n                })\r\n                if (isPermission) {\r\n                    history.push({ pathname: url.DRIVER_lIST })\r\n                }\r\n            }\r\n        }\r\n        else if (postMsg.Status === true) {\r\n            dispatch(getDriverListSuccess({ Status: false }))\r\n            customAlert({\r\n                Type: 4,\r\n                Message: JSON.stringify(postMsg.Message),\r\n            })\r\n        }\r\n    }, [postMsg])\r\n\r\n    useEffect(() => {\r\n        if (updateMsg.Status === true && updateMsg.StatusCode === 200 && !modalCss) {\r\n            setState(() => resetFunction(fileds, state))//+++++++++ Clear form values \r\n            history.push({\r\n                pathname: url.DRIVER_lIST,\r\n            })\r\n        } else if (updateMsg.Status === true && !modalCss) {\r\n            dispatch(updateDriverID_Success({ Status: false }));\r\n            customAlert({\r\n                Type: 3,\r\n                Message: JSON.stringify(updateMsg.Message),\r\n            })\r\n        }\r\n    }, [updateMsg, modalCss]);\r\n\r\n    useEffect(() => {\r\n        if (pageField) {\r\n            const fieldArr = pageField.PageFieldMaster\r\n            comAddPageFieldFunc({ state, setState, fieldArr })\r\n        }\r\n    }, [pageField])\r\n\r\n    const SaveHandler = async (event) => {\r\n       \r\n        event.preventDefault();\r\n        const btnId = event.target.id\r\n        try {\r\n            if ((_cfunc.loginSelectedPartyID() === 0)) {\r\n                customAlert({ Type: 3, Message: \"Please Select Party\" });\r\n                return;\r\n            };\r\n            if (formValid(state, setState)) {\r\n                _cfunc.btnIsDissablefunc({ btnId, state: true })\r\n\r\n                const jsonBody = JSON.stringify({\r\n                    Name: values.Name,\r\n                    Address: values.Address,\r\n                    DOB: values.DOB,\r\n                    Party: _cfunc.loginSelectedPartyID(),\r\n                    Company: _cfunc.loginCompanyID(),\r\n                    CreatedBy: _cfunc.loginUserID(),\r\n                    UpdatedBy: _cfunc.loginUserID()\r\n                });\r\n\r\n                if (pageMode === mode.edit) {\r\n                    dispatch(updateDriverID({ jsonBody, updateId: values.id, btnId }));\r\n                }\r\n                else {\r\n                    dispatch(saveDriverMaster({ jsonBody, btnId }));\r\n                }\r\n            }\r\n        } catch (e) { _cfunc.btnIsDissablefunc({ btnId, state: false }) }\r\n    };\r\n\r\n    // IsEditMode_Css is use of module Edit_mode (reduce page-content marging)\r\n    var IsEditMode_Css = ''\r\n    if ((modalCss) || (pageMode === mode.dropdownAdd)) { IsEditMode_Css = \"-5.5%\" };// new change\r\n\r\n    if (!(userPageAccessState === '')) {\r\n        return (\r\n            <React.Fragment>\r\n\r\n                <MetaTags>{_cfunc.metaTagLabel(userPageAccessState)}</MetaTags>\r\n\r\n                <div className=\"page-content\" style={{ marginTop: IsEditMode_Css }}>\r\n                    <Container fluid>\r\n                     \r\n                        <PartyDropdown_Common pageMode={pageMode} />\r\n\r\n                        <Card className=\"text-black\" style={{ marginTop: \"3px\" }}>\r\n                            <CardHeader className=\"card-header   text-black c_card_header\"  >\r\n                                <h4 className=\"card-title text-black\">{userPageAccessState.PageDescription}</h4>\r\n                                <p className=\"card-title-desc text-black\">{userPageAccessState.PageDescriptionDetails}</p>\r\n                            </CardHeader>\r\n\r\n                            <CardBody className=\" vh-10 0 text-black\" style={{ backgroundColor: \"#whitesmoke\" }} >\r\n\r\n                                <form noValidate>\r\n\r\n                                    <Row className=\"\">\r\n                                        <Col md={12}>\r\n                                            <Card>\r\n                                                <CardBody className=\"c_card_body\">\r\n                                                    <Row>\r\n                                                        <FormGroup className=\"mb-2 col col-sm-4 \">\r\n                                                            <Label htmlFor=\"validationCustom01\">{fieldLabel.Name} </Label>\r\n                                                            <Input\r\n                                                                id=\"txtName\"\r\n                                                                name=\"Name\"\r\n                                                                type=\"text\"\r\n                                                                value={values.Name}\r\n                                                                autoFocus={true}\r\n                                                                autoComplete='off'\r\n                                                                className={isError.Name.length > 0 ? \"is-invalid form-control\" : \"form-control\"}\r\n                                                                placeholder=\"Please Enter Name\"\r\n                                                                onChange={(event) => {\r\n                                                                    onChangeText({ event, state, setState })\r\n                                                                    dispatch(Breadcrumb_inputName(event.target.value))\r\n                                                                }}\r\n                                                            />\r\n                                                            {isError.Name.length > 0 && (\r\n                                                                <span className=\"invalid-feedback\">{isError.Name}</span>\r\n                                                            )}\r\n                                                        </FormGroup>\r\n                                                    </Row>\r\n\r\n                                                    <Row>\r\n                                                        <Col md=\"4\">\r\n                                                            <FormGroup className=\"mb-3\">\r\n                                                                <Label>{fieldLabel.DOB} </Label>\r\n                                                                <C_DatePicker\r\n                                                                    name=\"DOB\"\r\n                                                                    value={values.DOB}\r\n                                                                    placeholder={\"DD/MM/YYYY\"}\r\n                                                                    onChange={(y, v, e) => { onChangeDate({ e, v, state, setState }) }}\r\n                                                                />\r\n                                                            </FormGroup>\r\n                                                        </Col>\r\n                                                    </Row>\r\n\r\n                                                    <Row>\r\n                                                        <FormGroup className=\"mb-2 col col-sm-4 \">\r\n                                                            <Label htmlFor=\"validationCustom01\">{fieldLabel.Address} </Label>\r\n                                                            <Input\r\n                                                                name=\"Address\"\r\n                                                                value={values.Address}\r\n                                                                type=\"text\"\r\n                                                                className={isError.Address.length > 0 ? \"is-invalid form-control\" : \"form-control\"}\r\n                                                                placeholder=\"Please Enter Address\"\r\n                                                                autoComplete='off'\r\n                                                                onChange={(event) => onChangeText({ event, state, setState })}\r\n                                                            />\r\n                                                            {isError.Address.length > 0 && (\r\n                                                                <span className=\"invalid-feedback\">{isError.Address}</span>\r\n                                                            )}\r\n                                                        </FormGroup>\r\n                                                    </Row>\r\n\r\n\r\n\r\n                                                    <FormGroup className=\"mt-2\">\r\n                                                        <Row>\r\n                                                            <Col sm={2}>\r\n                                                                <SaveButton\r\n                                                                    loading={saveBtnloading}\r\n                                                                    pageMode={pageMode}\r\n                                                                    onClick={SaveHandler}\r\n                                                                    userAcc={userPageAccessState}\r\n                                                                    editCreatedBy={editCreatedBy}\r\n                                                                    module={\"DriverMaster\"}\r\n                                                                />\r\n                                                            </Col>\r\n                                                        </Row>\r\n                                                    </FormGroup >\r\n\r\n                                                </CardBody>\r\n                                            </Card>\r\n                                        </Col>\r\n                                    </Row>\r\n                                </form>\r\n                            </CardBody>\r\n                        </Card>\r\n\r\n                    </Container>\r\n                </div>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n    else {\r\n        return (\r\n            <React.Fragment></React.Fragment>\r\n        )\r\n    }\r\n};\r\n\r\nexport default DriverMaster\r\n\r\n\r\n\r\n\r\nconst Email = RegExp(\r\n    /^[a-zA-Z0-9]+@[a-zA-Z0-9]+\\.[A-Za-z]+$/\r\n)\r\n\r\nconst Mobile = RegExp(\r\n    /^[a-zA-Z0-9]+@[a-zA-Z0-9]+\\.[A-Za-z]+$/\r\n)\r\nconst NotNull = RegExp(\r\n    /^[a-zA-Z0-9]+@[a-zA-Z0-9]+\\.[A-Za-z]+$/\r\n)","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\CompanyGroupPages\\CompanyGroupMaster.js",["3118","3119","3120","3121","3122","3123","3124"],"import React, { useEffect, useState, } from \"react\";\r\nimport {\r\n    Card,\r\n    CardBody,\r\n    CardHeader,\r\n    Col,\r\n    Container,\r\n    FormGroup,\r\n    Input,\r\n    Label,\r\n    Row,\r\n} from \"reactstrap\";\r\nimport { MetaTags } from \"react-meta-tags\";\r\nimport { Breadcrumb_inputName } from \"../../../store/Utilites/Breadcrumb/actions\";\r\nimport {\r\n    commonPageField,\r\n    commonPageFieldSuccess\r\n} from \"../../../store/actions\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n    saveCompanyGroupMasterSuccess,\r\n    editCompanyGroupSuccess,\r\n    updateCompanyGroupID,\r\n    saveCompanyGroupMaster,\r\n    updateCompanyGroupIDSuccess\r\n} from \"../../../store/Administrator/CompanyGroupRedux/action\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {\r\n    comAddPageFieldFunc,\r\n    formValid,\r\n    initialFiledFunc,\r\n    onChangeText,\r\n    resetFunction\r\n} from \"../../../components/Common/validationFunction\";\r\nimport { SaveButton } from \"../../../components/Common/CommonButton\";\r\nimport {\r\n    breadcrumbReturnFunc,\r\n    loginUserID,\r\n    btnIsDissablefunc,\r\n    metaTagLabel\r\n} from \"../../../components/Common/CommonFunction\";\r\nimport * as url from \"../../../routes/route_url\";\r\nimport * as pageId from \"../../../routes/allPageID\"\r\nimport * as mode from \"../../../routes/PageMode\"\r\nimport { customAlert } from \"../../../CustomAlert/ConfirmDialog\";\r\n\r\nconst CompanyGroupMaster = (props) => {\r\n\r\n    const dispatch = useDispatch();\r\n    const history = useHistory()\r\n\r\n    const fileds = {\r\n        id: \"\",\r\n        Name: \"\",\r\n        IsSCM: false\r\n    }\r\n    const [state, setState] = useState(() => initialFiledFunc(fileds))\r\n\r\n    const [pageMode, setPageMode] = useState(mode.defaultsave);\r\n    const [userPageAccessState, setUserAccState] = useState('');\r\n    const [modalCss, setModalCss] = useState(false);\r\n    const [editCreatedBy, seteditCreatedBy] = useState(\"\");\r\n\r\n    const { postMsg,\r\n        updateMsg,\r\n        pageField,\r\n        saveBtnloading,\r\n        userAccess } = useSelector((state) => ({\r\n            saveBtnloading: state.CompanyGroupReducer.saveBtnloading,\r\n            postMsg: state.CompanyGroupReducer.postMsg,\r\n            updateMsg: state.CompanyGroupReducer.updateMessage,\r\n            userAccess: state.Login.RoleAccessUpdateData,\r\n            pageField: state.CommonPageFieldReducer.pageField\r\n        }));\r\n\r\n    useEffect(() => {\r\n        const page_Id = pageId.COMPANYGROUP\r\n        dispatch(commonPageFieldSuccess(null));\r\n        dispatch(commonPageField(page_Id))\r\n    }, []);\r\n\r\n    const location = { ...history.location }\r\n    const hasShowloction = location.hasOwnProperty(mode.editValue)\r\n    const hasShowModal = props.hasOwnProperty(mode.editValue)\r\n\r\n    const values = { ...state.values }\r\n    const { isError } = state;\r\n    const { fieldLabel } = state;\r\n\r\n    // userAccess useEffect\r\n    useEffect(() => {\r\n\r\n        let userAcc = null;\r\n        let locationPath = location.pathname;\r\n\r\n        if (hasShowModal) {\r\n            locationPath = props.masterPath;\r\n        };\r\n\r\n        userAcc = userAccess.find((inx) => {\r\n            return (`/${inx.ActualPagePath}` === locationPath)\r\n        })\r\n\r\n        if (userAcc) {\r\n            setUserAccState(userAcc)\r\n            breadcrumbReturnFunc({ dispatch, userAcc });\r\n        };\r\n    }, [userAccess])\r\n\r\n    // This UseEffect 'SetEdit' data and 'autoFocus' while this Component load First Time.\r\n    useEffect(() => {\r\n\r\n        if ((hasShowloction || hasShowModal)) {\r\n\r\n            let hasEditVal = null\r\n            if (hasShowloction) {\r\n                setPageMode(location.pageMode)\r\n                hasEditVal = location.editValue\r\n            }\r\n            else if (hasShowModal) {\r\n                hasEditVal = props.editValue\r\n                setPageMode(props.pageMode)\r\n                setModalCss(true)\r\n            }\r\n\r\n            if (hasEditVal) {\r\n                const { id, Name, IsSCM } = hasEditVal\r\n                const { values, fieldLabel, hasValid, required, isError } = { ...state }\r\n                values.Name = Name;\r\n                values.IsSCM = IsSCM;\r\n                values.id = id\r\n                hasValid.Name.valid = true;\r\n                hasValid.IsSCM.valid = true;\r\n\r\n                setState({ values, fieldLabel, hasValid, required, isError })\r\n                dispatch(Breadcrumb_inputName(hasEditVal.Name))\r\n                seteditCreatedBy(hasEditVal.CreatedBy)\r\n            }\r\n            dispatch(editCompanyGroupSuccess({ Status: false }))\r\n        }\r\n    }, [])\r\n\r\n    useEffect(async () => {\r\n\r\n        if ((postMsg.Status === true) && (postMsg.StatusCode === 200)) {\r\n            setState(() => resetFunction(fileds, state))// Clear form values \r\n            dispatch(saveCompanyGroupMasterSuccess({ Status: false }))\r\n            if (pageMode === mode.dropdownAdd) {\r\n                customAlert({\r\n                    Type: 1,\r\n                    Message: postMsg.Message,\r\n                })\r\n            }\r\n            else {\r\n                let isPermission = await customAlert({\r\n                    Type: 1,\r\n                    Status: true,\r\n                    Message: postMsg.Message,\r\n                })\r\n                if (isPermission) {\r\n                    history.push({ pathname: url.COMPANYGROUP_lIST })\r\n                }\r\n            }\r\n        }\r\n        else if (postMsg.Status === true) {\r\n            dispatch(saveCompanyGroupMasterSuccess({ Status: false }))\r\n            customAlert({\r\n                Type: 4,\r\n                 Message: JSON.stringify(postMsg.Message),\r\n            })\r\n        }\r\n    }, [postMsg])\r\n\r\n    useEffect(() => {\r\n        if (updateMsg.Status === true && updateMsg.StatusCode === 200 && !modalCss) {\r\n            setState(() => resetFunction(fileds, state))// Clear form values \r\n            history.push({\r\n                pathname: url.COMPANYGROUP_lIST,\r\n            })\r\n        } else if (updateMsg.Status === true && !modalCss) {\r\n            dispatch(updateCompanyGroupIDSuccess({ Status: false }));\r\n             customAlert({\r\n                Type: 3,\r\n                Message: JSON.stringify(updateMsg.Message),\r\n            })\r\n        }\r\n    }, [updateMsg, modalCss]);\r\n\r\n    useEffect(() => {\r\n        if (pageField) {\r\n            const fieldArr = pageField.PageFieldMaster\r\n            comAddPageFieldFunc({ state, setState, fieldArr })\r\n        }\r\n    }, [pageField])\r\n\r\n    const SaveHandler = async (event) => {\r\n        event.preventDefault();\r\n        const btnId = event.target.id\r\n        try {\r\n            if (formValid(state, setState)) {\r\n                btnIsDissablefunc({ btnId, state: true })\r\n                const jsonBody = JSON.stringify({\r\n                    Name: values.Name,\r\n                    IsSCM: values.IsSCM,\r\n                    CreatedBy: loginUserID(),\r\n                    UpdatedBy: loginUserID()\r\n                });\r\n\r\n                if (pageMode === mode.edit) {\r\n                    dispatch(updateCompanyGroupID({ jsonBody, updateId: values.id, btnId }));\r\n                }\r\n                else {\r\n                    dispatch(saveCompanyGroupMaster({ jsonBody, btnId }));\r\n                }\r\n            }\r\n        } catch (e) { btnIsDissablefunc({ btnId, state: false }) }\r\n    };\r\n\r\n    // IsEditMode_Css is use of module Edit_mode (reduce page-content marging)\r\n    var IsEditMode_Css = ''\r\n    if ((modalCss) || (pageMode === mode.dropdownAdd)) { IsEditMode_Css = \"-5.5%\" };\r\n\r\n    if (!(userPageAccessState === '')) {\r\n        return (\r\n            <React.Fragment>\r\n                <MetaTags>{metaTagLabel(userPageAccessState)}</MetaTags>\r\n\r\n                <div className=\"page-content\" style={{ marginTop: IsEditMode_Css }}>\r\n                    <Container fluid>\r\n                        <Card className=\"text-black\">\r\n                            <CardHeader className=\"card-header   text-black c_card_header\" >\r\n                                <h4 className=\"card-title text-black\">{userPageAccessState.PageDescription}</h4>\r\n                                <p className=\"card-title-desc text-black\">{userPageAccessState.PageDescriptionDetails}</p>\r\n                            </CardHeader>\r\n                            <CardBody className=\" vh-10 0 text-black\" style={{ backgroundColor: \"#whitesmoke\" }} >\r\n\r\n                                <form noValidate>\r\n                                    <Row className=\"\">\r\n                                        <Col md={12}>\r\n                                            <Card>\r\n                                                <CardBody className=\"c_card_body\">\r\n                                                    <Row>\r\n                                                        <FormGroup className=\"mb-2 col col-sm-4 \">\r\n                                                            <Label htmlFor=\"validationCustom01\"> {fieldLabel.Name}</Label>\r\n                                                            <Input\r\n                                                                name=\"Name\"\r\n                                                                id=\"txtName\"\r\n                                                                className={isError.Name.length > 0 ? \"is-invalid form-control\" : \"form-control\"}\r\n                                                                type=\"text\"\r\n                                                                value={values.Name}\r\n                                                                placeholder=\"Please Enter Name\"\r\n                                                                autoComplete='off'\r\n                                                                autoFocus={true}\r\n                                                                onChange={(event) => {\r\n                                                                    onChangeText({ event, state, setState })\r\n                                                                    dispatch(Breadcrumb_inputName(event.target.value))\r\n                                                                }}\r\n                                                            />\r\n                                                            {isError.Name.length > 0 && (\r\n                                                                <span className=\"invalid-feedback\">{isError.Name}</span>\r\n                                                            )}\r\n                                                        </FormGroup>\r\n\r\n                                                        <Row>\r\n                                                            <FormGroup className=\"mb-2 col col-sm-5\">\r\n                                                                <Row className=\"justify-content-md-left\">\r\n                                                                    <Label htmlFor=\"horizontal-firstname-input\" className=\"col-sm-3 col-form-label\">{fieldLabel.IsSCM}</Label>\r\n                                                                    <Col md={2} style={{ marginTop: '9px' }} >\r\n                                                                        <div className=\"form-check form-switch form-switch-md mb-3\">\r\n                                                                            <Input type=\"checkbox\" className=\"form-check-input\"\r\n                                                                                checked={values.IsSCM}\r\n                                                                                name=\"IsSCM\"\r\n                                                                                onChange={(e) => {\r\n                                                                                    setState((i) => {\r\n                                                                                        const a = { ...i }\r\n                                                                                        a.values.IsSCM = e.target.checked;\r\n                                                                                        return a\r\n                                                                                    })\r\n                                                                                }}\r\n                                                                            />\r\n                                                                        </div>\r\n                                                                    </Col>\r\n                                                                </Row>\r\n                                                            </FormGroup>\r\n                                                        </Row>\r\n\r\n                                                        <FormGroup>\r\n                                                            <Row>\r\n                                                                <Col sm={2}>\r\n                                                                    <SaveButton\r\n                                                                        loading={saveBtnloading}\r\n                                                                        pageMode={pageMode}\r\n                                                                        onClick={SaveHandler}\r\n                                                                        userAcc={userPageAccessState}\r\n                                                                        editCreatedBy={editCreatedBy}\r\n                                                                        module={\"CompanyGroupMaster\"}\r\n                                                                    />\r\n                                                                </Col>\r\n                                                            </Row>\r\n                                                        </FormGroup >\r\n                                                    </Row>\r\n                                                </CardBody>\r\n                                            </Card>\r\n                                        </Col>\r\n                                    </Row>\r\n                                </form>\r\n                            </CardBody>\r\n                        </Card>\r\n                    </Container>\r\n                </div>\r\n            </React.Fragment >\r\n        );\r\n    }\r\n    else {\r\n        return (\r\n            <React.Fragment></React.Fragment>\r\n        )\r\n    }\r\n};\r\n\r\nexport default CompanyGroupMaster\r\n\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\MRPMaster\\MRPMaster.js",["3125","3126","3127","3128","3129","3130","3131","3132","3133","3134","3135","3136","3137","3138"],"import React, { useEffect, useState, useRef } from \"react\";\r\nimport {\r\n    Button,\r\n    Card,\r\n    CardBody,\r\n    CardHeader,\r\n    Col,\r\n    Container,\r\n    FormGroup,\r\n    Input,\r\n    Label,\r\n    Row,\r\n} from \"reactstrap\";\r\nimport Select from \"react-select\";\r\nimport { MetaTags } from \"react-meta-tags\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { Breadcrumb_inputName, commonPageField, commonPageFieldSuccess } from \"../../../store/actions\";\r\nimport ToolkitProvider, { Search } from \"react-bootstrap-table2-toolkit\";\r\nimport { get_Division_ForDropDown, get_Party_ForDropDown } from \"../../../store/Administrator/ItemsRedux/action\";\r\nimport BootstrapTable from \"react-bootstrap-table-next\";\r\nimport {\r\n    breadcrumbReturnFunc,\r\n    loginUserID,\r\n    loginCompanyID,\r\n    metaTagLabel\r\n} from \"../../../components/Common/CommonFunction\";\r\nimport * as _cfunc from \"../../../components/Common/CommonFunction\";\r\nimport { CInput, C_DatePicker, decimalRegx } from \"../../../CustomValidateForm\";\r\nimport { mode, pageId, url } from \"../../../routes\";\r\nimport { customAlert } from \"../../../CustomAlert/ConfirmDialog\";\r\nimport { comAddPageFieldFunc, formValid, initialFiledFunc, onChangeDate, onChangeSelect, resetFunction } from \"../../../components/Common/validationFunction\";\r\nimport { Go_Button, SaveButton } from \"../../../components/Common/CommonButton\";\r\nimport { mySearchProps } from \"../../../components/Common/SearchBox/MySearch\";\r\n\r\nimport { deleteMRPMaster_Id, deleteMRPMaster_Id_Success, getMRPList, GoButtonForMRP_Master, GoButtonForMRP_MasterSuccess, saveMRPMaster, saveMRPMasterSuccess } from \"../../../store/Administrator/MRPMasterRedux/action\";\r\n\r\nconst MRPMaster = (props) => {\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n    let IsSCM = _cfunc.loginIsSCMCompany()\r\n\r\n    const fileds = {\r\n        DivisionName: \"\",\r\n        PartyName: \"\",\r\n        EffectiveDate: \"\",\r\n    }\r\n    const [state, setState] = useState(() => initialFiledFunc(fileds))\r\n\r\n    //SetState  Edit data Geting From Modules List component\r\n    const [pageMode, setPageMode] = useState(mode.defaultsave);\r\n    const [userPageAccessState, setUserAccState] = useState(\"\");\r\n    const [editCreatedBy, seteditCreatedBy] = useState(\"\");\r\n\r\n    //Access redux store Data /  'save_ModuleSuccess' action data\r\n    const { postMsg,\r\n        tableData,\r\n        deleteMessage,\r\n        Party,\r\n        Division,\r\n        userAccess,\r\n        pageField,\r\n        saveBtnloading,\r\n        listBtnLoading,\r\n    } = useSelector((state) => ({\r\n        listBtnLoading: state.MRPMasterReducer.listBtnLoading,\r\n        saveBtnloading: state.MRPMasterReducer.saveBtnloading,\r\n        tableData: state.MRPMasterReducer.MRPGoButton,\r\n        deleteMessage: state.MRPMasterReducer.deleteIdForMRPMaster,\r\n        postMsg: state.MRPMasterReducer.postMsg,\r\n        Party: state.ItemMastersReducer.Party,\r\n        Division: state.ItemMastersReducer.Division,\r\n        userAccess: state.Login.RoleAccessUpdateData,\r\n        pageField: state.CommonPageFieldReducer.pageField\r\n\r\n    }));\r\n\r\n    const { Data = [] } = tableData\r\n\r\n    useEffect(() => {\r\n        const page_Id = pageId.MRP\r\n        dispatch(commonPageFieldSuccess(null));\r\n        dispatch(commonPageField(page_Id))\r\n    }, []);\r\n\r\n    const values = { ...state.values }\r\n    const { isError } = state;\r\n    const { fieldLabel } = state;\r\n\r\n    const location = { ...history.location }\r\n    const hasShowloction = location.hasOwnProperty(mode.editValue)\r\n    const hasShowModal = props.hasOwnProperty(mode.editValue)\r\n\r\n    useEffect(() => {\r\n        dispatch(get_Party_ForDropDown());\r\n        dispatch(get_Division_ForDropDown());\r\n    }, [dispatch]);\r\n\r\n    // userAccess useEffect\r\n    useEffect(() => {\r\n\r\n        let userAcc = null;\r\n        let locationPath = location.pathname;\r\n\r\n        if (hasShowModal) {\r\n            locationPath = props.masterPath;\r\n        };\r\n\r\n        userAcc = userAccess.find((inx) => {\r\n            return (`/${inx.ActualPagePath}` === locationPath)\r\n        })\r\n\r\n        if (userAcc) {\r\n            setUserAccState(userAcc)\r\n            breadcrumbReturnFunc({ dispatch, userAcc });\r\n        };\r\n    }, [userAccess])\r\n\r\n    useEffect(() => {\r\n\r\n        if (pageField) {\r\n            const fieldArr = pageField.PageFieldMaster\r\n            comAddPageFieldFunc({ state, setState, fieldArr })\r\n        }\r\n    }, [pageField])\r\n\r\n    // hasShowloction && hasShowModal useEffect\r\n    useEffect(() => {\r\n\r\n        if ((hasShowloction || hasShowModal)) {\r\n\r\n            let hasEditVal = null\r\n            if (hasShowloction) {\r\n                setPageMode(location.page_Mode)\r\n                hasEditVal = location.editValue\r\n            }\r\n            else if (hasShowModal) {\r\n                hasEditVal = props.editValue\r\n                setPageMode(props.pageMode)\r\n            }\r\n\r\n            if (hasEditVal) {\r\n\r\n                const { id, Division_id, DivisionName, Party_id, PartyName, EffectiveDate } = hasEditVal\r\n                const { values, fieldLabel, hasValid, required, isError } = { ...state }\r\n                values.DivisionName = { label: DivisionName, value: Division_id };\r\n                values.PartyName = Party_id === null ? { label: \"select\", value: \"\" } : { label: PartyName, value: Party_id };\r\n                values.EffectiveDate = EffectiveDate\r\n                values.id = id\r\n\r\n                hasValid.DivisionName.valid = true;\r\n                hasValid.PartyName.valid = true;\r\n                hasValid.EffectiveDate.valid = true;\r\n                setState({ values, fieldLabel, hasValid, required, isError })\r\n                // dispatch(Breadcrumb_inputName(hasEditVal.DivisionName))\r\n                seteditCreatedBy(hasEditVal.CreatedBy)\r\n            }\r\n        }\r\n        else {\r\n            dispatch(GoButtonForMRP_MasterSuccess({ Status: false }))\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (deleteMessage.Status === true && deleteMessage.StatusCode === 200) {\r\n            dispatch(deleteMRPMaster_Id_Success({ Status: false }));\r\n            dispatch(GoButtonForMRP_MasterSuccess([]))\r\n            GoButton_Handler()\r\n            dispatch(\r\n                customAlert({\r\n                    Type: 1,\r\n                    Status: true,\r\n                    Message: deleteMessage.Message,\r\n                    AfterResponseAction: getMRPList,\r\n                })\r\n            );\r\n        } else if (deleteMessage.Status === true) {\r\n            dispatch(deleteMRPMaster_Id_Success({ Status: false }));\r\n            dispatch(\r\n                customAlert({\r\n                    Type: 3,\r\n                    Status: true,\r\n                    Message: JSON.stringify(deleteMessage.Message),\r\n                })\r\n            );\r\n        }\r\n    }, [deleteMessage]);\r\n\r\n    useEffect(() => _cfunc.tableInputArrowUpDounFunc(\"#table_Arrow\"), [Data]);\r\n\r\n    const PartyTypeDropdown_Options = Party.map((Data) => ({\r\n        value: Data.id,\r\n        label: Data.Name\r\n    }));\r\n    PartyTypeDropdown_Options.unshift({\r\n        value: \"\",\r\n        label: \"select\"\r\n    });\r\n\r\n    const Division_DropdownOptions = Division.map((data) => ({\r\n        value: data.id,\r\n        label: data.Name\r\n    }));\r\n\r\n    const GoButton_Handler = (event) => {\r\n\r\n        event.preventDefault();\r\n        const btnId = event.target.id\r\n        if (values.EffectiveDate === '') {\r\n            customAlert({\r\n                Type: 4,\r\n                Message: \"Please select EffectiveDate\",\r\n            })\r\n            return\r\n        }\r\n        try {\r\n            if (formValid(state, setState)) {\r\n\r\n                _cfunc.btnIsDissablefunc({ btnId, state: true })\r\n\r\n\r\n\r\n                const jsonBody = JSON.stringify({\r\n                    Division: values.DivisionName.value ? values.DivisionName.value : 0,\r\n                    Party: values.PartyName.value ? values.PartyName.value : 0,\r\n                    EffectiveDate: values.EffectiveDate\r\n                });\r\n                dispatch(GoButtonForMRP_Master({ jsonBody }));\r\n            }\r\n        } catch (e) { _cfunc.btnIsDissablefunc({ btnId, state: false }) }\r\n    };\r\n\r\n    //select id for delete row\r\n    const deleteHandeler = (id, name) => {\r\n        dispatch(\r\n            customAlert({\r\n                Type: 5,\r\n                Status: true,\r\n                Message: `Are you sure you want to delete this Item : \"${name}\"`,\r\n                RedirectPath: false,\r\n                PermissionAction: deleteMRPMaster_Id,\r\n                ID: id,\r\n            })\r\n        );\r\n    };\r\n\r\n    useEffect(async () => {\r\n\r\n        if ((postMsg.Status === true) && (postMsg.StatusCode === 200) && !(pageMode === mode.dropdownAdd)) {\r\n            dispatch(saveMRPMasterSuccess({ Status: false }))\r\n            setState(() => resetFunction(fileds, state))// Clear form values  \r\n            if (pageMode === mode.dropdownAdd) {\r\n                customAlert({\r\n                    Type: 1,\r\n                    Message: postMsg.Message,\r\n                })\r\n            }\r\n            else {\r\n                let isPermission = await customAlert({\r\n                    Type: 1,\r\n                    Status: true,\r\n                    Message: postMsg.Message,\r\n                })\r\n                if (isPermission) {\r\n                    history.push({ pathname: url.MRP_lIST })\r\n                }\r\n            }\r\n        }\r\n\r\n        else if (postMsg.Status === true) {\r\n            dispatch(saveMRPMasterSuccess({ Status: false }))\r\n            customAlert({\r\n                Type: 4,\r\n                Message: JSON.stringify(postMsg.Message),\r\n            })\r\n        }\r\n    }, [postMsg])\r\n\r\n    const pageOptions = {\r\n        sizePerPage: 10,\r\n        totalSize: Data.length,\r\n        custom: true,\r\n    };\r\n\r\n    const pagesListColumns = [\r\n        {\r\n            text: \"Item Name\",\r\n            dataField: \"Name\",\r\n            sort: true,\r\n            headerStyle: () => {\r\n                return { width: '500px', };\r\n            }\r\n        },\r\n        {\r\n            text: \"Current MRP\",\r\n            dataField: \"CurrentMRP\",\r\n            sort: true,\r\n            formatter: (cellContent, row, key) => {\r\n                return (<span style={{ justifyContent: 'center' }}>\r\n                    <Input\r\n                        key={`CurrentMRP${row.Item}`}\r\n                        id=\"\"\r\n                        type=\"text\"\r\n                        disabled={true}\r\n                        defaultValue={cellContent}\r\n                        className=\"col col-sm text-end\"\r\n                    />\r\n                </span>)\r\n            },\r\n            headerStyle: () => {\r\n                return { width: '200px', };\r\n            }\r\n        },\r\n        {\r\n            text: \"Effective from \",\r\n            dataField: \"CurrentDate\",\r\n            sort: true,\r\n            headerStyle: () => {\r\n                return { width: '200px' };\r\n            },\r\n            formatter: (cellContent, row, key) => {\r\n                if (!cellContent) {\r\n                    return null\r\n                }\r\n                return (<span style={{ justifyContent: 'center' }}>\r\n                    <Label\r\n                        style={{ color: \"black\", textAlign: \"center\", display: \"block\", }}\r\n                        key={`CurrentDate${row.Item}`}\r\n                    >{_cfunc.date_dmy_func(cellContent)}</Label>\r\n                </span>)\r\n            },\r\n        },\r\n        {\r\n            text: \"MRP \",\r\n            dataField: \"MRP\",\r\n            sort: true,\r\n            formatter: (cellContent, row) => {\r\n\r\n                if (((cellContent > 0) && (row[\"mrp\"] === undefined) || row.mrp)) {\r\n                    row[\"mrp\"] = true\r\n                } else {\r\n                    row[\"mrp\"] = false\r\n                }\r\n                return (<span style={{ justifyContent: 'center' }}>\r\n                    <CInput\r\n                        key={`MRP${row.Item}`}\r\n                        type=\"text\"\r\n                        cpattern={decimalRegx}\r\n                        defaultValue={cellContent}\r\n                        disabled={row.mrp}\r\n                        className=\"col col-sm text-end\"\r\n                        onChange={(e) => row[\"MRP\"] = e.target.value}\r\n                    />\r\n                </span>)\r\n            },\r\n            headerStyle: () => {\r\n                return { width: '200px' };\r\n            }\r\n        },\r\n        {\r\n            text: \"Action \",\r\n            dataField: \"\",\r\n            headerStyle: () => {\r\n                return { width: '100px' };\r\n            },\r\n            formatter: (cellContent, user) => {\r\n                return (\r\n                    <span className=\"d-flex justify-content-center align-items-center\">\r\n                        {!(user.id === '') &&\r\n                            <Button\r\n                                id={\"deleteid\"}\r\n                                type=\"button\"\r\n                                className=\"badge badge-soft-danger font-size-12 btn btn-danger waves-effect waves-light w-xxs border border-light\"\r\n                                data-mdb-toggle=\"tooltip\" data-mdb-placement=\"top\" title='Delete MRP'\r\n                                onClick={() => { deleteHandeler(user.id, user.Name); }}\r\n                            >\r\n                                <i className=\"mdi mdi-delete font-size-18\"></i>\r\n                            </Button>}\r\n                    </span>\r\n                )\r\n            }\r\n        },\r\n    ]\r\n\r\n    const SaveHandler = async (event) => {\r\n        event.preventDefault();\r\n        const btnId = event.target.id\r\n        try {\r\n            // if (formValid(state, setState)) {\r\n            _cfunc.btnIsDissablefunc({ btnId, state: true })\r\n\r\n            var ItemData = Data.map((index) => ({\r\n                DivisionName: values.DivisionName.value,\r\n                Party: values.PartyName.value,\r\n                EffectiveDate: values.EffectiveDate,\r\n                Company: loginCompanyID(),\r\n                CreatedBy: loginUserID(),\r\n                UpdatedBy: loginUserID(),\r\n                IsDeleted: 0,\r\n                Item: index.Item,\r\n                MRP: index.MRP,\r\n                id: index.id\r\n            }))\r\n\r\n            const Find = ItemData.filter((index) => {\r\n                return (Number(index.MRP) > 0)\r\n            })\r\n            const jsonBody = JSON.stringify(Find)\r\n\r\n            if (!(Find.length > 0)) {\r\n                customAlert({\r\n                    Type: 4,\r\n                    Message: \"Please Enter MRP\"\r\n                })\r\n                return _cfunc.btnIsDissablefunc({ btnId, state: false })\r\n            }\r\n            else {\r\n                dispatch(saveMRPMaster({ jsonBody, btnId }));\r\n            }\r\n\r\n        } catch (e) { _cfunc.btnIsDissablefunc({ btnId, state: false }) }\r\n    };\r\n\r\n    // IsEditMode_Css is use of module Edit_mode (reduce page-content marging)\r\n    var IsEditMode_Css = ''\r\n    if ((pageMode === mode.edit) || (pageMode === mode.copy) || (pageMode === mode.dropdownAdd)) { IsEditMode_Css = \"-5.5%\" };\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"page-content\" style={{ marginTop: IsEditMode_Css }}>\r\n                <MetaTags>{metaTagLabel(userPageAccessState)}</MetaTags>\r\n                <Container fluid>\r\n\r\n                    <form noValidate>\r\n                        <Card className=\"text-black \">\r\n                            <CardHeader className=\"card-header  text-black c_card_header\" >\r\n                                <h4 className=\"card-title text-black\">{userPageAccessState.PageDescription}</h4>\r\n                                <p className=\"card-title-desc text-black\">{userPageAccessState.PageDescriptionDetails}</p>\r\n                            </CardHeader>\r\n                            <CardBody className=\" vh-10 0 text-black\" style={{ marginBottom: \"4cm\" }}>\r\n\r\n                                <Card style={{ backgroundColor: \"whitesmoke\" }} className=\" mb-1\">\r\n                                    <CardHeader className=\"c_card_body\"  >\r\n                                        <Row className=\"mt-3\">\r\n                                            {(IsSCM === 0) &&\r\n                                                <Col sm={3}>\r\n                                                    <FormGroup className=\"mb-3 row\">\r\n                                                        <Label htmlFor=\"validationCustom01\" className=\"col-sm-4 p-2 ml-n2 \">{fieldLabel.DivisionName}</Label>\r\n                                                        <Col sm={8}>\r\n                                                            <Select\r\n                                                                name=\"DivisionName\"\r\n                                                                value={values.DivisionName}\r\n                                                                id={\"DivisionName\"}\r\n                                                                options={Division_DropdownOptions}\r\n                                                                isDisabled={pageMode === mode.edit ? true : false}\r\n                                                                isSearchable={true}\r\n                                                                styles={{\r\n                                                                    menu: provided => ({ ...provided, zIndex: 2 })\r\n                                                                }}\r\n                                                                autoFocus={true}\r\n                                                                placeholder=\"select\"\r\n                                                                onChange={(hasSelect, evn) => {\r\n                                                                    onChangeSelect({ hasSelect, evn, state, setState, })\r\n                                                                    dispatch(Breadcrumb_inputName(hasSelect.label))\r\n                                                                }}\r\n                                                                classNamePrefix=\"dropdown\"\r\n                                                            />\r\n                                                            {isError.DivisionName.length > 0 && (\r\n                                                                <span className=\"text-danger f-8\"><small>{isError.DivisionName}</small></span>\r\n                                                            )}\r\n\r\n                                                        </Col>\r\n                                                    </FormGroup>\r\n                                                </Col>}\r\n\r\n                                            {(IsSCM === 0) &&\r\n                                                <Col sm={3}>\r\n                                                    <FormGroup className=\"mb-3 row \">\r\n                                                        <Label htmlFor=\"validationCustom01\" className=\"col-sm-3 p-2\" style={{ width: \"2.5cm\" }}>{fieldLabel.PartyName}</Label>\r\n                                                        <Col sm={8} >\r\n                                                            <Select\r\n                                                                name=\"PartyName\"\r\n                                                                value={values.PartyName}\r\n                                                                id={\"PartyName\"}\r\n                                                                options={PartyTypeDropdown_Options}\r\n                                                                isDisabled={pageMode === mode.edit ? true : false}\r\n                                                                isSearchable={true}\r\n                                                                styles={{\r\n                                                                    menu: provided => ({ ...provided, zIndex: 2 })\r\n                                                                }}\r\n                                                                placeholder=\"select\"\r\n                                                                onChange={(hasSelect, evn) => onChangeSelect({ hasSelect, evn, state, setState, })}\r\n                                                                classNamePrefix=\"dropdown\"\r\n                                                            />\r\n                                                            {isError.PartyName.length > 0 && (\r\n                                                                <span className=\"text-danger f-8\"><small>{isError.PartyName}</small></span>\r\n                                                            )}\r\n                                                        </Col>\r\n                                                    </FormGroup>\r\n                                                </Col>\r\n                                            }\r\n\r\n                                            <Col sm={4}>\r\n                                                <FormGroup className=\"mb-3 row \">\r\n                                                    <Label className=\"col-md-6 p-2\" style={{ width: \"2.9cm\" }}>{fieldLabel.EffectiveDate}</Label>\r\n                                                    <Col sm={6}>\r\n                                                        <C_DatePicker\r\n                                                            id=\"EffectiveDate\"\r\n                                                            name=\"EffectiveDate\"\r\n                                                            placeholder={\"DD/MM/YYYY\"}\r\n                                                            value={values.EffectiveDate}\r\n                                                            isDisabled={pageMode === mode.edit ? true : false}\r\n                                                            onChange={(y, v, e) => {\r\n                                                                onChangeDate({ e, v, state, setState })\r\n                                                            }}\r\n                                                            options={{\r\n                                                                altInput: true,\r\n                                                                altFormat: \"d-m-Y\",\r\n                                                                dateFormat: \"Y-m-d\",\r\n                                                            }}\r\n                                                        />\r\n                                                        {isError.EffectiveDate.length > 0 && (\r\n                                                            <span className=\"invalid-feedback\">{isError.EffectiveDate}</span>\r\n                                                        )}\r\n                                                    </Col>\r\n                                                </FormGroup>\r\n                                            </Col>\r\n                                            <Col sm={1}>\r\n                                                <Go_Button onClick={(event) => { GoButton_Handler(event) }} loading={listBtnLoading} />\r\n                                            </Col>\r\n                                        </Row>\r\n                                    </CardHeader>\r\n                                </Card>\r\n\r\n                                {Data.length > 0 ?\r\n\r\n                                    <ToolkitProvider\r\n                                        keyField=\"Item\"\r\n                                        data={Data}\r\n                                        columns={pagesListColumns}\r\n                                        search\r\n                                    >\r\n                                        {(toolkitProps) => (\r\n                                            <React.Fragment>\r\n                                                <Row>\r\n                                                    <Col xl=\"12\">\r\n                                                        <div className=\"table-responsive\">\r\n                                                            <BootstrapTable\r\n                                                                keyField={\"Item\"}\r\n                                                                id=\"table_Arrow\"\r\n                                                                responsive\r\n                                                                bordered={false}\r\n                                                                striped={false}\r\n                                                                classes={\"table  table-bordered\"}\r\n                                                                noDataIndication={<div className=\"text-danger text-center \">Items Not available</div>}\r\n                                                                {...toolkitProps.baseProps}\r\n                                                            />\r\n                                                            {mySearchProps(toolkitProps.searchProps)}\r\n                                                        </div>\r\n                                                    </Col>\r\n                                                </Row>\r\n\r\n                                            </React.Fragment>\r\n                                        )}\r\n                                    </ToolkitProvider>\r\n\r\n\r\n                                    : null}\r\n\r\n                                {Data.length > 0 ?\r\n                                    <FormGroup>\r\n                                        <Col sm={2} style={{ marginLeft: \"-40px\" }} className={\"row save1\"}>\r\n                                            <SaveButton pageMode={pageMode}\r\n                                                loading={saveBtnloading}\r\n                                                onClick={SaveHandler}\r\n                                                userAcc={userPageAccessState}\r\n                                                editCreatedBy={editCreatedBy}\r\n                                            />\r\n                                        </Col>\r\n                                    </FormGroup >\r\n                                    : null\r\n                                }\r\n\r\n                            </CardBody>\r\n                        </Card>\r\n                    </form>\r\n                </Container>\r\n            </div>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default MRPMaster\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\PriceList\\PriceMaster.js",["3139","3140","3141","3142","3143","3144","3145","3146","3147","3148","3149","3150"],"import React, { useEffect, useLayoutEffect, useState } from \"react\";\r\nimport './pricemaster.scss'\r\nimport {\r\n    Button,\r\n    Card,\r\n    CardBody,\r\n    CardFooter,\r\n    CardHeader,\r\n    Col,\r\n    Container,\r\n    Dropdown,\r\n    DropdownItem,\r\n    DropdownMenu,\r\n    DropdownToggle,\r\n    FormGroup,\r\n    Input,\r\n    Label,\r\n    Modal,\r\n    Row,\r\n} from \"reactstrap\";\r\nimport Select from \"react-select\";\r\nimport { MetaTags } from \"react-meta-tags\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {\r\n    delete_PriceList,\r\n    delete_PriceListSuccess,\r\n    editPriceListSuccess,\r\n    priceListByCompay_Action,\r\n    priceListByPartyAction,\r\n    priceListByPartyActionSuccess,\r\n    savePriceMasterAction,\r\n    savePriceMasterActionSuccess,\r\n    updatePriceList,\r\n    updatePriceListSuccess\r\n} from \"../../../store/Administrator/PriceList/action\";\r\nimport { breadcrumbReturnFunc, btnIsDissablefunc, loginCompanyID, loginUserID, metaTagLabel } from \"../../../components/Common/CommonFunction\";\r\nimport { customAlert } from \"../../../CustomAlert/ConfirmDialog\";\r\nimport { getPartyTypelist } from \"../../../store/Administrator/PartyTypeRedux/action\";\r\n// import { PriceDrop } from \"./PriceDrop\";\r\nimport * as mode from \"../../../routes/PageMode\"\r\n\r\nconst PriceMaster = (props) => {\r\n\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n\r\n    //*** \"isEditdata get all data from ModuleID for Binding  Form controls\r\n    let editDataGatingFromList = props.state;\r\n\r\n    //SetState  Edit data Geting From Modules List component\r\n    const [pageMode, setPageMode] = useState(mode.defaultsave);\r\n\r\n    // const [partyTypeSelect, setPartyTypeSelect] = useState({ value: '' });\r\n    const [userPageAccessState, setUserAccState] = useState(\"\");\r\n    const [partyType_dropdown_Select, setPartyType_dropdown_Select] = useState(\"\");\r\n    const [menu, setMenu] = useState(false);\r\n    const [dropOpen, setDropOpen] = useState(false);\r\n    const [currentPrice, setCurrentPrice] = useState({ Name: '' });\r\n    const [hasPartySelect, setHasPartySelect] = useState(false);\r\n    const [calculationPathstate, setcalculationPathstate] = useState([]);\r\n    const [movePricelist, setMovePricelist] = useState('');\r\n\r\n\r\n    const {\r\n        PostAPIResponse,\r\n        priceListByPartyType,\r\n        deleteAPIResponse,\r\n        updateMessage,\r\n        PartyTypes,\r\n        priceListByCompany = [],\r\n        userAccess\r\n    } = useSelector((state) => ({\r\n        PostAPIResponse: state.PriceListReducer.postMsg,\r\n        deleteAPIResponse: state.PriceListReducer.deleteMsg,\r\n        updateMessage: state.PriceListReducer.updateMessage,\r\n        PartyTypes: state.PartyTypeReducer.ListData,\r\n        priceListByPartyType: state.PriceListReducer.priceListByPartyType,\r\n        priceListByCompany: state.PriceListReducer.priceListByCompany,\r\n        userAccess: state.Login.RoleAccessUpdateData,\r\n    }));\r\n\r\n    // userAccess useEffect\r\n    useEffect(() => {\r\n\r\n        let userAcc = undefined;\r\n        if (editDataGatingFromList === undefined) {\r\n            let locationPath = history.location.pathname;\r\n            userAcc = userAccess.find((inx) => {\r\n                return `/${inx.ActualPagePath}` === locationPath;\r\n            });\r\n        } else if (!(editDataGatingFromList === undefined)) {\r\n            let relatatedPage = props.relatatedPage;\r\n            userAcc = userAccess.find((inx) => {\r\n                return `/${inx.ActualPagePath}` === relatatedPage;\r\n            });\r\n        }\r\n        if (!(userAcc === undefined)) {\r\n            setUserAccState(userAcc);\r\n            breadcrumbReturnFunc({ dispatch, userAcc });\r\n        }\r\n    }, [userAccess]);\r\n\r\n    useLayoutEffect(() => {\r\n        dispatch(priceListByPartyActionSuccess([]))\r\n        dispatch(getPartyTypelist());\r\n        dispatch(priceListByCompay_Action());\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if ((PostAPIResponse.Status === true) && (PostAPIResponse.StatusCode === 200)) {\r\n            dispatch(savePriceMasterActionSuccess({ Status: false }))\r\n            dispatch(priceListByPartyAction(partyType_dropdown_Select.value))\r\n            setDropOpen(false)\r\n            customAlert({\r\n                Type: 1,\r\n                Message: PostAPIResponse.Message,\r\n            })\r\n        }\r\n\r\n    }, [PostAPIResponse])\r\n\r\n\r\n    const location = { ...history.location }\r\n    const hasShowloction = location.hasOwnProperty(mode.editValue)\r\n    const hasShowModal = props.hasOwnProperty(mode.editValue)\r\n\r\n    useEffect(() => {\r\n\r\n        if ((hasShowloction || hasShowModal)) {\r\n\r\n            let hasEditVal = null\r\n            if (hasShowModal) {\r\n                hasEditVal = props.editValue\r\n                setPageMode(props.pageMode)\r\n                // setModalCss(true)\r\n            }\r\n            else if (hasShowloction) {\r\n                setPageMode(location.pageMode)\r\n                hasEditVal = location.editValue\r\n            }\r\n            if (hasEditVal) {\r\n                const { PartyTypeId, PartyTypeName } = hasEditVal\r\n                // if (!(partyType_dropdown_Select === '')) {\r\n                setPartyType_dropdown_Select({ value: PartyTypeId, label: PartyTypeName })\r\n                dispatch(priceListByPartyAction(PartyTypeId))\r\n                setHasPartySelect(true)\r\n                // }\r\n            }\r\n            dispatch(editPriceListSuccess({ Status: false }))\r\n        }\r\n\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if ((deleteAPIResponse.Status === true) && (deleteAPIResponse.StatusCode === 200)) {\r\n            dispatch(delete_PriceListSuccess({ Status: false }))\r\n            dispatch(priceListByPartyAction(partyType_dropdown_Select.value))\r\n            customAlert({\r\n                Type: 1,\r\n                Message: deleteAPIResponse.Message,\r\n            })\r\n        }\r\n    }, [deleteAPIResponse])\r\n\r\n\r\n    useEffect(() => {\r\n        if ((updateMessage.Status === true) && (updateMessage.StatusCode === 200)) {\r\n            dispatch(updatePriceListSuccess({ Status: false }))\r\n            dispatch(priceListByPartyAction(partyType_dropdown_Select.value))\r\n            setDropOpen(false)\r\n            customAlert({\r\n                Type: 1,\r\n                Message: updateMessage.Message,\r\n            })\r\n        }\r\n    }, [updateMessage])\r\n\r\n    const PartyTypeDropdown_Options = PartyTypes.map((Data) => ({\r\n        value: Data.id,\r\n        label: Data.Name\r\n    }));\r\n    //***************************calculatepathOptionsfunction************************** \r\n    const calculatepathOptionsfunction = () => {\r\n        const optionArr = []\r\n        function infunc1(node) {\r\n            optionArr.push({ value: node.value, label: node.label });\r\n            if (node.children) {\r\n                infunc2(node.children)\r\n            }\r\n        }\r\n        function infunc2(nodeArr = []) {\r\n            nodeArr.map(i2 => { infunc1(i2) })\r\n        }\r\n        priceListByPartyType.map(node => {\r\n            infunc1(node)\r\n        })\r\n        return optionArr\r\n    }\r\n    \r\n    const calculatepathOptions = priceListByCompany.map(i => ({\r\n        label: i.Name, value: i.id\r\n    }))\r\n    //*************************** end calculatepathOptionsfunction************************** \r\n\r\n\r\n    function PartyType_Dropdown_OnChange_Handller(e) {\r\n        setPartyType_dropdown_Select(e)\r\n\r\n    }\r\n    const dropOpen_ONClickHandler = price => {\r\n        price.BasePriceListID = price.value\r\n        price[\"mode\"] = \"save\"\r\n        setCurrentPrice(price)\r\n        setMovePricelist(price)\r\n        setDropOpen(true)\r\n    }\r\n\r\n    const dropOpen_EditHandler = price => { // Edit handler\r\n\r\n        price[\"mode\"] = \"edit\"\r\n        setcalculationPathstate(price.CalculationPath.map(i => ({ value: i.id, label: i.Name })))\r\n        setMovePricelist(price)\r\n        setCurrentPrice(price)\r\n        setDropOpen(true)\r\n\r\n    }\r\n    const delete_PriceList_Handler = async (price, event) => {// Delete handler\r\n        event.preventDefault();\r\n        const btnId = \"cc\";\r\n        const promise = await customAlert({\r\n            Type: 7,\r\n            Message: `Are you sure you want to delete this Price : \"${price.label}\"`,\r\n        })\r\n        if (promise) {\r\n            btnIsDissablefunc({ btnId, state: true })\r\n            dispatch(delete_PriceList({ btnId, deleteId: price.value }))\r\n        }\r\n    }\r\n    function goButtonHandler() { // party Type Go Button API Call\r\n        if (!(partyType_dropdown_Select === '')) {\r\n            dispatch(priceListByPartyAction(partyType_dropdown_Select.value))\r\n            setHasPartySelect(true)\r\n        }\r\n    }\r\n    //***************************SaveHandler************************** \r\n\r\n    function commonSavefunction() {// Common JSON for save handler\r\n\r\n        var textInp1 = document.getElementById(\"txtsubprice\")\r\n        const invaildMsg = []\r\n        if (textInp1.value === \"\") {\r\n            invaildMsg.push({ Alert: \"Please Enter SubPrice\" })\r\n        }\r\n\r\n        if (invaildMsg.length > 0) {\r\n            customAlert({ Type: 3, Message: invaildMsg })\r\n        }\r\n        else {\r\n            var mkup = document.getElementById(`mkupMkdown`).checked\r\n\r\n            var pathNo = ''\r\n            calculationPathstate.map(ele => {\r\n                pathNo = pathNo.concat(`${ele.value},`)\r\n            })\r\n            pathNo = pathNo.replace(/,*$/, '');           //****** withoutLastComma  function */\r\n\r\n\r\n            return JSON.stringify({\r\n                id: currentPrice.value,\r\n                Name: textInp1.value,\r\n                BasePriceListID: movePricelist.BasePriceListID,\r\n                PLPartyType: partyType_dropdown_Select.value,\r\n                MkUpMkDn: mkup,\r\n                Company: loginCompanyID(),\r\n                CalculationPath: pathNo,\r\n                CreatedBy: loginUserID(),\r\n                UpdatedBy: loginUserID(),\r\n            });\r\n        }\r\n        return false\r\n    }\r\n    function sub_Price_Add_Handler(event) {// add price save handler\r\n        event.preventDefault();\r\n        const btnId = event.target.id;\r\n        btnIsDissablefunc({ btnId, state: true })\r\n\r\n        const jsonBody = commonSavefunction();\r\n        if (jsonBody) {\r\n            dispatch(savePriceMasterAction({ jsonBody, btnId }));\r\n        } else {\r\n            btnIsDissablefunc({ btnId, state: false })\r\n        }\r\n    }\r\n\r\n    function sub_Price_edit_Handler(event) {// edit price save handler\r\n\r\n        event.preventDefault();\r\n        const btnId = event.target.id;\r\n        btnIsDissablefunc({ btnId, state: true })\r\n\r\n        const jsonBody = commonSavefunction();\r\n        if (jsonBody) {\r\n            dispatch(updatePriceList({ jsonBody, updateId: currentPrice.value, btnId }));\r\n        } else {\r\n            btnIsDissablefunc({ btnId, state: false })\r\n        }\r\n    }\r\n    //*************************** end SaveHandler************************** \r\n\r\n    const onclickselect = function (node = {}) {\r\n        const hasNone = document.getElementById(\"select-div\").style;\r\n\r\n        if (hasNone.display === \"none\") {\r\n            hasNone.display = \"block\";\r\n        } else {\r\n            setMovePricelist(node)\r\n            hasNone.display = \"none\";\r\n        }\r\n    };\r\n\r\n\r\n\r\n    const NodeInsidemenu = ({ node }) => {\r\n        return (\r\n            <div >\r\n                <i className=\"mdi mdi-pencil font-size-12 \"\r\n                    onClick={e => setMenu(node.value)}  >\r\n                    <Dropdown\r\n                        isOpen={menu === node.value}\r\n                        toggle={() => { setMenu('') }}\r\n                        className=\"d-inline-block\">\r\n                        <DropdownToggle className=\"btn header-item \" tag=\"button\">\r\n\r\n                        </DropdownToggle>\r\n\r\n                        <DropdownMenu className=\"dropdown_menu dropdown-menu-end\" id=\"drop-downcss\" >\r\n                            <DropdownItem\r\n                                key={node.value}\r\n                                onClick={(e) => { dropOpen_ONClickHandler(node) }}\r\n                                de\r\n                            >\r\n                                <span className=\"align-middle text-black\" >{\"Add Sub-List\"}</span>\r\n                            </DropdownItem>\r\n\r\n                            <DropdownItem\r\n                                key={node.value}\r\n                                onClick={(e) => { dropOpen_EditHandler(node) }}\r\n                            >\r\n                                <span className=\"align-middle text-black\" >{\"Edit\"}</span>\r\n                            </DropdownItem>\r\n\r\n                            <DropdownItem\r\n                                onClick={(event) => delete_PriceList_Handler(node, event)}\r\n                            >\r\n                                <span className=\"align-middle text-danger\"> {\"Delete\"} </span>\r\n                            </DropdownItem>\r\n                        </DropdownMenu>\r\n                    </Dropdown>\r\n                </i>\r\n            </div>)\r\n    }\r\n\r\n    function calculatedPathOnChange(e, node) {\r\n        setcalculationPathstate(e)\r\n    }\r\n\r\n\r\n    const MainPriceTree = () => {\r\n\r\n        function mainTreeFunc_3(node) {\r\n            let pathNo = \"Select Path\"\r\n            node.CalculationPath.map((ele, k) => {\r\n                if (k === 0) { pathNo = '' }\r\n                pathNo = pathNo.concat(`${ele.Name},`)\r\n            })\r\n            pathNo = pathNo.replace(/,*$/, '');           //****** withoutLastComma  function */\r\n            return (\r\n                <ol>\r\n                    <li >\r\n                        <div className=\"flexcontainer \">\r\n                            <div className=\" flexitem-1\"><span id=\"span2\" >{node.label}</span></div>\r\n                            <div className=\" flexitem-2 \"><span id=\"span2\" >{pathNo}</span></div>\r\n                            <div className=\"flexitem-3\">  <span id=\"span2\">\r\n                                <Input type=\"checkbox\"\r\n                                    id={`mkUp${node.value}`}\r\n                                    key={node.value}\r\n                                    checked={node.MkUpMkDn}\r\n                                    disabled={true}></Input></span> </div>\r\n                            <div className=\"flexitem-4\">  <NodeInsidemenu node={node} /> </div>\r\n                        </div>\r\n                        {node.children ? mainTreeFunc_2(node.children) : null}\r\n                    </li>\r\n                </ol>\r\n            )\r\n        }\r\n\r\n        function mainTreeFunc_2(arr = []) {\r\n            return (\r\n                arr.map(node => {\r\n                    return mainTreeFunc_3(node)\r\n                })\r\n            )\r\n        }\r\n\r\n        function mainTreeFunc_1(node) {\r\n            let pathNo = \"Select Path\"\r\n            node.CalculationPath.map((ele, k) => {\r\n                if (k === 0) { pathNo = '' }\r\n                pathNo = pathNo.concat(`${ele.Name},`)\r\n            })\r\n            pathNo = pathNo.replace(/,*$/, '');           //****** withoutLastComma  function */\r\n            return (\r\n                <li>\r\n                    <div className=\"flexcontainer \">\r\n                        <div className=\"flexitem-1\"><span id={\"span1\"} >{node.label}</span></div>\r\n                        <div className=\" flexitem-2 \"><span id=\"span1\" >{pathNo}</span></div>\r\n                        <div className=\"flexitem-3\">  <span id={\"span1\"}>\r\n                            <Input type=\"checkbox\"\r\n                                id={`mkUp${node.value}`}\r\n                                key={node.value}\r\n                                checked={node.MkUpMkDn}\r\n                                disabled={true}></Input></span> </div>\r\n                        <div className=\"flexitem-4\">  <NodeInsidemenu node={node} /> </div>\r\n                    </div>\r\n\r\n\r\n                    {node.children ? mainTreeFunc_2(node.children) : null}\r\n                </li>\r\n            )\r\n        }\r\n\r\n        return <ol className=\"wtree\">\r\n            {priceListByPartyType.map((node, ind) => {\r\n                return mainTreeFunc_1(node, ind)\r\n            })}\r\n        </ol >\r\n    }\r\n\r\n    const PriceDrop = ({ List = [] }) => {\r\n\r\n        function nodeOnClick(node) {\r\n            onclickselect(node);\r\n        }\r\n\r\n        function dropTreeFunc_3(node) {\r\n            return (\r\n                <ol>\r\n                    <li >\r\n                        <div>\r\n                            <div className=\"d-flex \">\r\n                                <div className=\" flex-fill \"><span id=\"span2\" onClick={() => nodeOnClick(node)} >{node.label}</span></div>\r\n                            </div>\r\n                        </div>\r\n                        {node.children ? dropTreeFunc_2(node.children) : null}\r\n                    </li>\r\n                </ol>\r\n            )\r\n        }\r\n        function dropTreeFunc_2(arr = []) {\r\n            return (\r\n                arr.map(node => {\r\n                    return dropTreeFunc_3(node)\r\n                })\r\n            )\r\n        }\r\n        function dropTreeFunc_1(node) {\r\n            return (\r\n                <li  >\r\n                    <div>\r\n                        <div className=\"d-flex \">\r\n                            <div className=\"flex-grow-1\"><span id={\"span1\"} onClick={() => nodeOnClick(node)} >{node.label}</span></div>\r\n                        </div>\r\n                    </div>\r\n\r\n\r\n                    {node.children ? dropTreeFunc_2(node.children) : null}\r\n                </li >\r\n            )\r\n        }\r\n        return (\r\n            <div id=\"select-div\" style={{ display: \"none\", backgroundColor: 'whitesmoke' }}>\r\n                <ol className=\"wtree\">\r\n                    {List.map((node, ind) => {\r\n                        return dropTreeFunc_1(node, ind)\r\n                    })}\r\n\r\n                </ol >\r\n            </div>\r\n        )\r\n\r\n    }\r\n\r\n    function dropOpen1Togle() {\r\n        setDropOpen(!dropOpen);\r\n        setcalculationPathstate([]);\r\n    }\r\n    var IsEditMode_Css = ''\r\n    if ((pageMode === \"edit\") || (pageMode === \"copy\") || (pageMode === \"dropdownAdd\")) { IsEditMode_Css = \"-5.5%\" };\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"page-content\" style={{ marginTop: IsEditMode_Css, marginBottom: \"5cm\" }} >\r\n                <MetaTags>{metaTagLabel(userPageAccessState)}</MetaTags>\r\n                <Container fluid>\r\n                    <Card className=\"text-black\">\r\n                        <CardHeader className=\"card-header   text-black c_card_header\" >\r\n                            <h4 className=\"card-title text-black\">{userPageAccessState.PageDescription}</h4>\r\n                            <p className=\"card-title-desc text-black\">{userPageAccessState.PageDescriptionDetails}</p>\r\n                        </CardHeader>\r\n\r\n                        <CardBody className=\" vh-10 0 text-black\" >\r\n                            <Row className=\"\">\r\n                                <Col md={12}>\r\n                                    <Card style={{ backgroundColor: \"whitesmoke\" }}>\r\n\r\n                                        <CardHeader className=\"card-header   text-black  \" style={{ backgroundColor: \"#e9e9ef\" }} >\r\n                                            <Row className=\"mt-3\">\r\n                                                <Col md=\"4\">\r\n\r\n                                                    <FormGroup className=\"mb-3 row \">\r\n                                                        <Label className=\"col-sm-3 p-2 ml-n4 \">Party Type</Label>\r\n                                                        <Col md=\"9\" style={{}}>\r\n                                                            <Select\r\n                                                                value={partyType_dropdown_Select}\r\n                                                                options={PartyTypeDropdown_Options}\r\n                                                                className=\"rounded-bottom\"\r\n                                                                placeholder=\"select\"\r\n                                                                autoFocus={true}\r\n                                                                onChange={(e) => { PartyType_Dropdown_OnChange_Handller(e) }}\r\n                                                                classNamePrefix=\"select2-selection\"\r\n                                                            />\r\n                                                        </Col>\r\n                                                    </FormGroup>\r\n                                                </Col>\r\n\r\n                                                <Col md=\"3\" className=\"mt- \">\r\n                                                    <Button type=\"button\" color=\"primary\" onClick={(e) => { goButtonHandler() }}>Go</Button>\r\n                                                </Col>\r\n                                            </Row>\r\n                                        </CardHeader>\r\n                                        {hasPartySelect ?\r\n                                            <div className={\" row mt-4\"}>\r\n                                                <Modal\r\n                                                    isOpen={dropOpen}\r\n                                                    toggle={dropOpen1Togle}\r\n                                                    size=\"xl\"\r\n                                                    centered={true}\r\n                                                >\r\n                                                    <div className=\"modal-header\">\r\n                                                        {currentPrice.mode === \"save\" ?\r\n                                                            <h5 className=\"modal-title mt-0\">{currentPrice.id === 0 ? \"Add Main Price\" : \"Add Sub-Price\"}</h5> :\r\n                                                            <h5 className=\"modal-title mt-0\">{currentPrice.id === 0 ? \"Add Main Price\" : \"Edit Sub-Price\"}</h5>}\r\n                                                        <button\r\n                                                            type=\"button\"\r\n                                                            onClick={dropOpen1Togle}\r\n                                                            className=\"close\"\r\n                                                            data-dismiss=\"modal\"\r\n                                                            aria-label=\"Close\"\r\n                                                        >\r\n                                                            <span aria-hidden=\"true\">&times;</span>\r\n                                                        </button>\r\n                                                    </div>\r\n\r\n                                                    <div className=\"modal-body\">\r\n                                                        {currentPrice.mode === \"edit\" ?\r\n\r\n                                                            <Row className=\"justify-content-md-left\">\r\n                                                                <Label className=\"col-3 col-form-label\" >Price List</Label>\r\n                                                                <Col className=\"col-9\">\r\n                                                                    <Input\r\n                                                                        id=\"Input\"\r\n                                                                        value={movePricelist.label}\r\n                                                                        placeholder=\"Select...\"\r\n                                                                        onClick={onclickselect}\r\n                                                                        autoComplete=\"off\"\r\n                                                                    >\r\n                                                                    </Input>\r\n                                                                    <PriceDrop List={priceListByPartyType}\r\n                                                                    />\r\n                                                                </Col>\r\n                                                            </Row>\r\n                                                            : null}\r\n\r\n                                                        {currentPrice.mode === \"edit\" ?\r\n                                                            <Row className=\"mt-2\">\r\n                                                                <span className=\"form-label text-primary text-center\">{currentPrice.Name}</span>\r\n                                                                <Label htmlFor=\"horizontal-firstname-input\"\r\n                                                                    className=\"col-3 col-form-label\" > {currentPrice.id === 0 ? \"Main Price\" : \"Sub-Price\"} </Label>\r\n                                                                <Col style={{ marginTop: '9px' }} >\r\n                                                                    <Input type=\"text\" id='txtsubprice'\r\n                                                                        defaultValue={currentPrice.label}\r\n                                                                    />\r\n                                                                </Col>\r\n                                                            </Row>\r\n                                                            : <Row className=\"mt-2\">\r\n                                                                <span className=\"form-label text-primary text-center\">{currentPrice.Name}</span>\r\n                                                                <Label htmlFor=\"horizontal-firstname-input\"\r\n                                                                    className=\"col-3 col-form-label\" > {currentPrice.id === 0 ? \"Main Price\" : \"Sub-Price\"} </Label>\r\n                                                                <Col style={{ marginTop: '9px' }} >\r\n                                                                    <Input type=\"text\" id='txtsubprice'\r\n                                                                    />\r\n                                                                </Col>\r\n                                                            </Row>}\r\n                                                        <Row className=\"mt-2\">\r\n                                                            {/* <span className=\"form-label text-primary text-center\">{currentPrice.Name}</span> */}\r\n                                                            <Label htmlFor=\"horizontal-firstname-input\"\r\n                                                                className=\"col-3 col-form-label\" >CalculationPath</Label>\r\n                                                            <Col className=\" col col-9\" style={{ marginTop: '9px' }} >\r\n                                                                <Select\r\n                                                                    isMulti={true}\r\n                                                                    value={calculationPathstate}\r\n                                                                    onChange={(e) => { calculatedPathOnChange(e, \"node\") }}\r\n                                                                    components={{\r\n                                                                        IndicatorSeparator: () => null\r\n                                                                    }}\r\n                                                                    options={calculatepathOptions}\r\n                                                                />\r\n\r\n                                                            </Col>\r\n                                                        </Row>\r\n\r\n                                                        <Row className=\"mt-2\">\r\n                                                            <Label className=\"col-3 col-form-label\" >MkUp </Label>\r\n                                                            <Col className=\"mt-2\">\r\n                                                                <Input type={\"checkbox\"} id='mkupMkdown'\r\n                                                                    defaultChecked={currentPrice.MkUpMkDn} />\r\n                                                            </Col>\r\n                                                        </Row>\r\n                                                    </div>\r\n\r\n                                                    <div className=\"modal-footer\">\r\n                                                        <button type=\"button\" className=\"btn btn-light\" onClick={dropOpen1Togle}>Close</button>\r\n                                                        {currentPrice.mode === \"save\" ?\r\n\r\n                                                            <button type=\"button\" className=\"btn btn-primary\" id={\"price_Add-btn\"}\r\n                                                                onClick={(e) => { sub_Price_Add_Handler(e) }}\r\n\r\n                                                            >Add</button>\r\n                                                            :\r\n                                                            <button type=\"button\" className=\"btn btn-success w-md\"\r\n                                                                id={\"price-edit-btn\"}\r\n                                                                onClick={(e) => { sub_Price_edit_Handler(e) }} >\r\n\r\n                                                                <i className=\"fas fa-edit me-2\"></i>\r\n                                                                update</button>\r\n                                                        }\r\n\r\n                                                    </div>\r\n\r\n                                                </Modal>\r\n                                                <Col md={1} ></Col>\r\n                                                <Col md={10} >\r\n                                                    <div className=\"row\"> <h4 className={'text-center text-primary'}>Price List</h4></div>\r\n                                                    <Card>\r\n                                                        <CardBody className=\"mt-3\">\r\n\r\n                                                            <MainPriceTree />\r\n                                                            {((priceListByPartyType.length === 0)) ?\r\n                                                                <div className='row justify-content-center mt-n4 '>\r\n                                                                    <div className=' col-10'>\r\n                                                                        <Input type=\"text\" disabled={true}\r\n                                                                            value={'Base Price  Not Exist'} >\r\n                                                                        </Input>\r\n                                                                    </div>\r\n                                                                </div>\r\n                                                                : null\r\n                                                            }\r\n                                                        </CardBody>\r\n                                                        <CardFooter >\r\n                                                            <Row>\r\n                                                                <Col >\r\n                                                                    <Button type=\"button\" color=\"primary\" onClick={(e) => { dropOpen_ONClickHandler({ value: 0, }) }}>\r\n                                                                        <i className=\"dripicons-plus\"></i> Add Sub-Rate</Button>\r\n                                                                </Col>\r\n                                                                <Col className=\"col col-4\">\r\n                                                                </Col>\r\n                                                            </Row>\r\n                                                        </CardFooter>\r\n                                                    </Card>\r\n                                                </Col>\r\n                                            </div>\r\n                                            : null\r\n                                        }\r\n\r\n                                    </Card>\r\n                                </Col>\r\n                            </Row>\r\n\r\n                        </CardBody>\r\n                    </Card>\r\n                </Container>\r\n            </div>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\n\r\nexport default PriceMaster\r\n\r\n\r\n\r\n\r\n\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\MRPMaster\\MRPList.js",["3151","3152","3153","3154","3155"],"import React, { useEffect, useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport {\r\n  BreadcrumbShowCountlabel,\r\n  commonPageFieldList,\r\n  commonPageFieldListSuccess\r\n} from \"../../../store/actions\";\r\nimport CommonPurchaseList from \"../../../components/Common/CommonPurchaseList\"\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { url, mode, pageId } from \"../../../routes/index\"\r\nimport * as _cfunc from \"../../../components/Common/CommonFunction\";\r\nimport * as _act from \"../../../store/actions\";\r\nimport { customAlert } from \"../../../CustomAlert/ConfirmDialog\";\r\nimport { deleteMRPList_Id, deleteMRPList_Id_Success, getMRPList, GoButtonForMRP_MasterSuccess } from \"../../../store/Administrator/MRPMasterRedux/action\";\r\nimport MRPMaster from \"./MRPMaster\";\r\nimport { Listloader } from \"../../../components/Common/CommonButton\";\r\n\r\nconst MRPList = () => {\r\n\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n  const hasPagePath = history.location.pathname\r\n\r\n  const [pageMode, setpageMode] = useState(mode.defaultsave)\r\n\r\n  const reducers = useSelector(\r\n    (state) => ({\r\n      listBtnLoading: state.MRPMasterReducer.listBtnLoading,\r\n      tableList: state.MRPMasterReducer.MRPList,\r\n      MRPGoButton: state.MRPMasterReducer.MRPGoButton,\r\n      deleteMsg: state.MRPMasterReducer.deleteMsg,\r\n      userAccess: state.Login.RoleAccessUpdateData,\r\n      pageField: state.CommonPageFieldReducer.pageFieldList\r\n    })\r\n  );\r\n\r\n  const {pageField, MRPGoButton, deleteMsg } = reducers;\r\n\r\n  const action = {\r\n    getList: getMRPList,\r\n    deleteId: deleteMRPList_Id,\r\n    deleteSucc: deleteMRPList_Id_Success\r\n  }\r\n  const page_Id = pageId.MRP_lIST\r\n\r\n  // Featch Modules List data  First Rendering\r\n  useEffect(() => {\r\n    setpageMode(hasPagePath)\r\n    dispatch(commonPageFieldListSuccess(null))\r\n    dispatch(commonPageFieldList(page_Id))\r\n    // dispatch(BreadcrumbShowCountlabel(`${\"MRP Count\"} :0`))\r\n    dispatch(getMRPList())\r\n\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n\r\n    if (deleteMsg.Status === true && deleteMsg.StatusCode === 200) {\r\n      dispatch(deleteMRPList_Id_Success([]))\r\n      dispatch(getMRPList())\r\n    }\r\n  }, [deleteMsg]);\r\n\r\n  useEffect(() => {\r\n\r\n    if (MRPGoButton.Status === true && MRPGoButton.StatusCode === 200) {\r\n      dispatch(GoButtonForMRP_MasterSuccess({ ...MRPGoButton, Status: false }))\r\n      history.push({\r\n        pathname: MRPGoButton.pathname,\r\n        page_Mode: MRPGoButton.pageMode,\r\n        editValue: MRPGoButton.rowData\r\n      })\r\n    }\r\n  }, [MRPGoButton]);\r\n\r\n  function editBodyfunc(index) {\r\n\r\n    const { rowData} = index\r\n    let { Division_id, Party_id, EffectiveDate } = rowData;\r\n    try {\r\n      const jsonBody = JSON.stringify({\r\n        Division: Division_id === null ? 0 : Division_id,\r\n        Party: Party_id === null ? 0 : Party_id,\r\n        EffectiveDate: EffectiveDate\r\n      })\r\n      let config = { jsonBody, pathname: url.MRP, btnmode: mode.edit, rowData: rowData }\r\n      dispatch(_act.GoButtonForMRP_Master(config));\r\n    } catch (error) {}\r\n  }\r\n\r\n  async function deleteBodyfunc(index) {\r\n\r\n    const { rowData, btnId } = index\r\n    if (rowData.CommonID) {\r\n      const rep = await customAlert({\r\n        Type: 8,\r\n        Message: `Are you sure you want to delete this ${\"EffectiveDate\"}: \"${rowData.EffectiveDate}\"`,\r\n      })\r\n      if (rep) {\r\n        let config = { btnId, deleteId: rowData.CommonID }\r\n        try {\r\n          dispatch(deleteMRPList_Id(config))\r\n        }\r\n        catch (error) {}\r\n      }\r\n    }\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"page-content\">\r\n\r\n        <div className=\"mt-n1\">\r\n          {\r\n            reducers.listBtnLoading ?\r\n              <Listloader />\r\n              :\r\n              (pageField) ?\r\n                <CommonPurchaseList\r\n                  action={action}\r\n                  reducers={reducers}\r\n                  showBreadcrumb={false}\r\n                  MasterModal={MRPMaster}\r\n                  masterPath={url.MRP}\r\n                  newBtnPath={url.MRP}\r\n                  ButtonMsgLable={\"MRP\"}\r\n                  deleteName={\"EffectiveDate\"}\r\n                  pageMode={pageMode}\r\n                  editBodyfunc={editBodyfunc}\r\n                  deleteBodyfunc={deleteBodyfunc}\r\n                />\r\n                : <Listloader />\r\n          }\r\n        </div>\r\n\r\n      </div>\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nexport default MRPList;","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\GroupTypePage\\GroupTypeMaster.js",["3156","3157","3158","3159","3160","3161","3162","3163"],"import React, { useEffect, useState, } from \"react\";\r\nimport {\r\n    Card,\r\n    CardBody,\r\n    CardHeader,\r\n    Col,\r\n    Container,\r\n    FormGroup,\r\n    Input,\r\n    Label,\r\n    Row\r\n} from \"reactstrap\";\r\nimport { MetaTags } from \"react-meta-tags\";\r\nimport { Breadcrumb_inputName, commonPageFieldSuccess } from \"../../../store/actions\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {  commonPageField } from \"../../../store/actions\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {\r\n    comAddPageFieldFunc,\r\n    formValid,\r\n    initialFiledFunc,\r\n    onChangeText,\r\n    resetFunction\r\n} from \"../../../components/Common/validationFunction\";\r\nimport {\r\n    editGroupTypeIDSuccess,\r\n    getGroupTypeslist,\r\n    saveGroupTypeMaster,\r\n    saveGroupTypeMasterSuccess,\r\n    updateGroupTypeID,\r\n    updateGroupTypeIDSuccess\r\n} from \"../../../store/Administrator/GroupTypeRedux/action\";\r\nimport { SaveButton } from \"../../../components/Common/CommonButton\";\r\nimport {\r\n    breadcrumbReturnFunc,\r\n    loginUserID,\r\n    btnIsDissablefunc,\r\n    metaTagLabel\r\n} from \"../../../components/Common/CommonFunction\";\r\nimport * as url from \"../../../routes/route_url\";\r\nimport * as pageId from \"../../../routes/allPageID\"\r\nimport * as mode from \"../../../routes/PageMode\"\r\nimport { customAlert } from \"../../../CustomAlert/ConfirmDialog\";\r\n\r\nconst GroupTypeMaster = (props) => {\r\n\r\n    const dispatch = useDispatch();\r\n    const history = useHistory()\r\n\r\n    const fileds = {\r\n        id: \"\",\r\n        Name: \"\",\r\n        IsReserved: false,\r\n        Sequence: ''\r\n    }\r\n    const [state, setState] = useState(() => initialFiledFunc(fileds))\r\n\r\n    const [EditData, setEditData] = useState({});\r\n    const [modalCss, setModalCss] = useState(false);\r\n    const [pageMode, setPageMode] = useState(mode.defaultsave);\r\n    const [userPageAccessState, setUserAccState] = useState('');\r\n    const [editCreatedBy, seteditCreatedBy] = useState(\"\");\r\n\r\n    //Access redux store Data /  'save_ModuleSuccess' action data\r\n    const {\r\n        postMsg,\r\n        updateMsg,\r\n        pageField,\r\n        userAccess,\r\n        saveBtnloading,\r\n    } = useSelector((state) => ({\r\n        saveBtnloading: state.GroupTypeReducer.saveBtnloading,\r\n        postMsg: state.GroupTypeReducer.PostData,\r\n        updateMsg: state.GroupTypeReducer.updateMessage,\r\n        userAccess: state.Login.RoleAccessUpdateData,\r\n        pageField: state.CommonPageFieldReducer.pageField\r\n    }));\r\n\r\n    useEffect(() => {\r\n        const page_Id = pageId.GROUPTYPE\r\n        dispatch(commonPageFieldSuccess(null));\r\n        dispatch(commonPageField(page_Id))\r\n    }, []);\r\n\r\n    const location = { ...history.location }\r\n    const hasShowloction = location.hasOwnProperty(mode.editValue)\r\n    const hasShowModal = props.hasOwnProperty(mode.editValue)\r\n\r\n    const values = { ...state.values }\r\n    const { isError } = state;\r\n    const { fieldLabel } = state;\r\n\r\n    // userAccess useEffect\r\n    useEffect(() => {\r\n\r\n        let userAcc = null;\r\n        let locationPath;\r\n\r\n        if (props.pageMode === mode.dropdownAdd) {\r\n            locationPath = props.masterPath;\r\n        } else {\r\n            locationPath = location.pathname;\r\n        }\r\n\r\n        if (hasShowModal) {\r\n            locationPath = props.masterPath;\r\n        };\r\n\r\n        userAcc = userAccess.find((inx) => {\r\n            return (`/${inx.ActualPagePath}` === locationPath)\r\n        })\r\n\r\n        if (userAcc) {\r\n            setUserAccState(userAcc);\r\n            if (!props.isdropdown) {\r\n                breadcrumbReturnFunc({ dispatch, userAcc });\r\n            }\r\n        };\r\n\r\n    }, [userAccess])\r\n\r\n    // This UseEffect 'SetEdit' data and 'autoFocus' while this Component load First Time.\r\n    useEffect(() => {\r\n\r\n        if ((hasShowloction || hasShowModal)) {\r\n\r\n            let hasEditVal = null\r\n            if (hasShowloction) {\r\n                setPageMode(location.pageMode)\r\n                hasEditVal = location.editValue\r\n            }\r\n            else if (hasShowModal) {\r\n                hasEditVal = props.editValue\r\n                setPageMode(props.pageMode)\r\n                setModalCss(true)\r\n            }\r\n\r\n            if (hasEditVal) {\r\n                setEditData(hasEditVal);\r\n                const { id, Name, IsReserved,Sequence } = hasEditVal\r\n                const { values, fieldLabel, hasValid, required, isError } = { ...state }\r\n\r\n                hasValid.Name.valid = true;\r\n                hasValid.IsReserved.valid = true;\r\n                hasValid.Sequence.valid=true;\r\n\r\n                values.id = id\r\n                values.Name = Name;\r\n                values.IsReserved = IsReserved;\r\n                values.Sequence=Sequence;\r\n                \r\n                setState({ values, fieldLabel, hasValid, required, isError })\r\n                dispatch(editGroupTypeIDSuccess({ Status: false }))\r\n                dispatch(Breadcrumb_inputName(hasEditVal.Name))\r\n                seteditCreatedBy(hasEditVal.CreatedBy)\r\n            }\r\n        }\r\n    }, [])\r\n\r\n    useEffect(async () => {\r\n\r\n        if ((postMsg.Status === true) && (postMsg.StatusCode === 200)) {\r\n            dispatch(saveGroupTypeMasterSuccess({ Status: false }))\r\n            dispatch(Breadcrumb_inputName(''))\r\n            setState(() => resetFunction(fileds, state))// Clear form values  \r\n            if (props.pageMode === mode.dropdownAdd) {\r\n                customAlert({\r\n                    Type: 1,\r\n                    Message: postMsg.Message,\r\n                })\r\n\r\n                dispatch(getGroupTypeslist())\r\n\r\n                props.isOpenModal(false)\r\n            }\r\n            else if (pageMode === mode.edit) {\r\n                customAlert({\r\n                    Type: 1,\r\n                    Message: postMsg.Message,\r\n                })\r\n                history.push({ pathname: url.GROUPTYPE_lIST })\r\n            }\r\n            else {\r\n                dispatch(Breadcrumb_inputName(''))\r\n                const promise = await customAlert({\r\n                    Type: 1,\r\n                    Message: postMsg.Message,\r\n                })\r\n                if (promise) { history.push({ pathname: url.GROUPTYPE_lIST }) }\r\n            }\r\n\r\n        } else if\r\n            (postMsg.Status === true) {\r\n            customAlert({\r\n                Type: 3,\r\n                Message: JSON.stringify(postMsg.Message),\r\n            })\r\n        }\r\n    }, [postMsg])\r\n\r\n    useEffect(() => {\r\n\r\n        if (updateMsg.Status === true && updateMsg.StatusCode === 200 && !modalCss) {\r\n            setState(() => resetFunction(fileds, state))//Clear form values\r\n            history.push({\r\n                pathname: url.GROUPTYPE_lIST,\r\n            })\r\n\r\n        } else if (updateMsg.Status === true && !modalCss) {\r\n            dispatch(updateGroupTypeIDSuccess({ Status: false }));\r\n            dispatch(\r\n                customAlert({\r\n                    Type: 3,\r\n                    Message: JSON.stringify(updateMsg.Message),\r\n                  })\r\n            );\r\n        }\r\n    }, [updateMsg, modalCss]);\r\n\r\n    useEffect(() => {\r\n        if (pageField) {\r\n            const fieldArr = pageField.PageFieldMaster\r\n            comAddPageFieldFunc({ state, setState, fieldArr })\r\n        }\r\n    }, [pageField])\r\n\r\n    const SaveHandler = async (event) => {\r\n        event.preventDefault();\r\n        const btnId = event.target.id\r\n        try {\r\n            if (formValid(state, setState)) {\r\n                btnIsDissablefunc({ btnId, state: true })\r\n\r\n                const jsonBody = JSON.stringify({\r\n                    Name: values.Name,\r\n                    IsReserved: values.IsReserved,\r\n                    Sequence:values.Sequence,\r\n                    CreatedBy: loginUserID(),\r\n                    CreatedOn: \"0002-10-03T12:48:14.910491\",\r\n                    UpdatedBy: loginUserID(),\r\n                    UpdatedOn: \"0002-10-03T12:48:14.910491\"\r\n                });\r\n\r\n                if (pageMode === mode.edit) {\r\n                    dispatch(updateGroupTypeID({ jsonBody, updateId: values.id, btnId }));\r\n                }\r\n                else {\r\n                    dispatch(saveGroupTypeMaster({ jsonBody, btnId }));\r\n                }\r\n\r\n            }\r\n        } catch (e) { btnIsDissablefunc({ btnId, state: false }) }\r\n    };\r\n\r\n    var IsEditMode_Css = ''\r\n    if ((modalCss) || (pageMode === mode.dropdownAdd)) { IsEditMode_Css = \"-5.5%\" };\r\n\r\n    if (!(userPageAccessState === '')) {\r\n        return (\r\n            <React.Fragment>\r\n                <div className=\"page-content\" style={{ marginTop: IsEditMode_Css }}>\r\n                    <Container fluid>\r\n                        <MetaTags>{metaTagLabel(userPageAccessState)}</MetaTags>\r\n\r\n                        <Card className=\"text-black\">\r\n                            <CardHeader className=\"card-header   text-black c_card_header\" >\r\n                                <h4 className=\"card-title text-black\">{userPageAccessState.PageDescription}</h4>\r\n                                <p className=\"card-title-desc text-black\">{userPageAccessState.PageDescriptionDetails}</p>\r\n                            </CardHeader>\r\n\r\n                            <CardBody className=\" vh-10 0 text-black\"  >\r\n                                <form noValidate>\r\n                                    <Card>\r\n                                        <CardBody className=\"c_card_body\">\r\n                                            <Row>\r\n                                                <FormGroup className=\"mb-2 col col-sm-4 \">\r\n                                                    <Label htmlFor=\"validationCustom01\">{fieldLabel.Name} </Label>\r\n                                                    <Input\r\n                                                        id=\"txtName\"\r\n                                                        name=\"Name\"\r\n                                                        type=\"text\"\r\n                                                        value={values.Name}\r\n                                                        className={isError.Name.length > 0 ? \"is-invalid form-control\" : \"form-control\"}\r\n                                                        placeholder=\"Please Enter Name\"\r\n                                                        autoFocus={true}\r\n                                                        autoComplete='off'\r\n                                                        onChange={(event) => {\r\n                                                            onChangeText({ event, state, setState })\r\n                                                            dispatch(Breadcrumb_inputName(event.target.value))\r\n                                                        }}\r\n                                                    />\r\n                                                    {isError.Name.length > 0 && (\r\n                                                        <span className=\"invalid-feedback\">{isError.Name}</span>\r\n                                                    )}\r\n                                                </FormGroup>\r\n                                            </Row>\r\n\r\n                                            <Row>\r\n                                                <FormGroup className=\"mb-2 col col-sm-4 \">\r\n                                                    <Label htmlFor=\"validationCustom01\">{fieldLabel.Sequence} </Label>\r\n                                                    <Input\r\n                                                        name=\"Sequence\"\r\n                                                        id=\"txtSequence\"\r\n                                                        value={values.Sequence}\r\n                                                        type=\"text\"\r\n                                                        className={isError.Sequence.length > 0 ? \"is-invalid form-control\" : \"form-control\"}\r\n                                                        placeholder=\"Please Enter Sequence\"\r\n                                                        autoComplete='off'\r\n                                                        onChange={(event) => {\r\n                                                            onChangeText({ event, state, setState })\r\n                                                        }}\r\n                                                    />\r\n                                                    {isError.Sequence.length > 0 && (\r\n                                                        <span className=\"invalid-feedback\">{isError.Sequence}</span>\r\n                                                    )}\r\n                                                </FormGroup>\r\n                                            </Row>\r\n\r\n                                            <Row>\r\n                                                <FormGroup className=\"mb-2 col col-sm-3\">\r\n                                                    <Row className=\"justify-content-md-left\">\r\n                                                        <Label className=\"col-sm-6 col-form-label\" >{fieldLabel.IsReserved}</Label>\r\n                                                        <Col md={2} style={{ marginTop: '9px' }} >\r\n                                                            <div className=\"form-check form-switch form-switch-md mb-3\" >\r\n                                                                <Input type=\"checkbox\" className=\"form-check-input\"\r\n                                                                    checked={values.IsReserved}\r\n                                                                    name=\"IsReserved\"\r\n                                                                    onChange={(e) => {\r\n                                                                        setState((i) => {\r\n                                                                            const a = { ...i }\r\n                                                                            a.values.IsReserved = e.target.checked;\r\n                                                                            return a\r\n                                                                        })\r\n                                                                    }}\r\n                                                                />\r\n                                                            </div>\r\n                                                        </Col>\r\n                                                    </Row>\r\n                                                </FormGroup>\r\n                                            </Row>\r\n                                            <FormGroup>\r\n                                                <Row>\r\n                                                    <Col sm={2}>\r\n                                                        <SaveButton pageMode={pageMode}\r\n                                                            loading={saveBtnloading}\r\n                                                            onClick={SaveHandler}\r\n                                                            userAcc={userPageAccessState}\r\n                                                            editCreatedBy={editCreatedBy}\r\n                                                            module={\"GroupTypeMaster\"}\r\n                                                        />\r\n                                                    </Col>\r\n                                                </Row>\r\n                                            </FormGroup >\r\n\r\n                                        </CardBody>\r\n                                    </Card>\r\n                                </form>\r\n                            </CardBody>\r\n                        </Card>\r\n                    </Container>\r\n                </div>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n    else {\r\n        return (\r\n            <React.Fragment></React.Fragment>\r\n        )\r\n    }\r\n};\r\n\r\nexport default GroupTypeMaster\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\MarginMaster\\MarginList.js",["3164","3165","3166","3167","3168","3169","3170"],"import React, { useEffect, useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport {\r\n  BreadcrumbShowCountlabel,\r\n  commonPageFieldList,\r\n  commonPageFieldListSuccess\r\n} from \"../../../store/actions\";\r\nimport CommonPurchaseList from \"../../../components/Common/CommonPurchaseList\"\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { url, mode, pageId } from \"../../../routes/index\"\r\nimport * as _cfunc from \"../../../components/Common/CommonFunction\";\r\nimport MarginMaster from \"./MarginMaster\";\r\nimport { delete_MarginList_ID, delete_MarginList_ID_Success, getMarginList, goButtonForMarginSuccess } from \"../../../store/Administrator/MarginMasterRedux/action\";\r\nimport * as _act from \"../../../store/actions\";\r\nimport { customAlert } from \"../../../CustomAlert/ConfirmDialog\";\r\nimport { PageLoadingSpinner, Listloader } from \"../../../components/Common/CommonButton\";\r\n\r\nconst MarginList = () => {\r\n\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n  const hasPagePath = history.location.pathname\r\n\r\n  const [pageMode, setpageMode] = useState(mode.defaultsave)\r\n  const [userAccState, setUserAccState] = useState('');\r\n\r\n  const reducers = useSelector(\r\n    (state) => ({\r\n      listBtnLoading: state.MarginMasterReducer.listBtnLoading,\r\n      GoBtnlistloading: state.MarginMasterReducer.loading,\r\n      tableList: state.MarginMasterReducer.MarginList,\r\n      MarginGoButton: state.MarginMasterReducer.MarginGoButton,\r\n      deleteMsg: state.MarginMasterReducer.deleteMsg,\r\n      userAccess: state.Login.RoleAccessUpdateData,\r\n      pageField: state.CommonPageFieldReducer.pageFieldList\r\n    })\r\n  );\r\n\r\n  const { userAccess, pageField, MarginGoButton, deleteMsg, GoBtnlistloading } = reducers;\r\n\r\n  const action = {\r\n    getList: getMarginList,\r\n    deleteId: delete_MarginList_ID,\r\n    deleteSucc: delete_MarginList_ID_Success\r\n  }\r\n  const page_Id = pageId.MARGIN_lIST\r\n\r\n  // Featch Modules List data  First Rendering\r\n  useEffect(() => {\r\n    setpageMode(hasPagePath)\r\n    dispatch(commonPageFieldListSuccess(null))\r\n    dispatch(commonPageFieldList(page_Id))\r\n    // dispatch(BreadcrumbShowCountlabel(`${\"Margin Count\"} :0`))\r\n    dispatch(getMarginList())\r\n\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    let userAcc = userAccess.find((inx) => {\r\n      return (inx.id === page_Id)\r\n    })\r\n    if (!(userAcc === undefined)) {\r\n      setUserAccState(userAcc)\r\n    }\r\n  }, [userAccess])\r\n\r\n  useEffect(() => {\r\n\r\n    if (deleteMsg.Status === true && deleteMsg.StatusCode === 200) {\r\n      dispatch(delete_MarginList_ID_Success([]))\r\n      dispatch(getMarginList())\r\n    }\r\n  }, [deleteMsg]);\r\n\r\n  useEffect(() => {\r\n\r\n    if (MarginGoButton.Status === true && MarginGoButton.StatusCode === 200) {\r\n      dispatch(goButtonForMarginSuccess({ ...MarginGoButton, Status: false }))\r\n      history.push({\r\n        pathname: MarginGoButton.pathname,\r\n        page_Mode: MarginGoButton.pageMode,\r\n        editValue: MarginGoButton.rowData\r\n      })\r\n    }\r\n  }, [MarginGoButton]);\r\n\r\n  function editBodyfunc(index) {\r\n\r\n    const { rowData, btnId } = index\r\n    let { PriceList_id, Party_id, EffectiveDate } = rowData;\r\n    _cfunc.btnIsDissablefunc({ btnId, state: true })\r\n\r\n    try {\r\n      const jsonBody = JSON.stringify({\r\n        PriceList: PriceList_id,\r\n        Party: Party_id === null ? 0 : Party_id,\r\n        EffectiveDate: EffectiveDate\r\n      })\r\n      let config = { jsonBody, pathname: url.MARGIN, btnmode: mode.edit, rowData: rowData }\r\n      // sessionStorage.setItem(\"margin_Master\", config)\r\n      dispatch(_act.goButtonForMargin(config));\r\n    } catch (error) { _cfunc.btnIsDissablefunc({ btnId, state: false }) }\r\n  }\r\n\r\n  async function deleteBodyfunc(index) {\r\n\r\n    const { rowData, btnId } = index\r\n    if (rowData.CommonID) {\r\n      const rep = await customAlert({\r\n        Type: 8,\r\n        Message: `Are you sure you want to delete this ${\"EffectiveDate\"}: \"${rowData.EffectiveDate}\"`,\r\n      })\r\n      if (rep) {\r\n        _cfunc.btnIsDissablefunc({ btnId, state: true })\r\n        let config = { btnId, deleteId: rowData.CommonID }\r\n        try {\r\n          dispatch(delete_MarginList_ID(config))\r\n        }\r\n        catch (error) { _cfunc.btnIsDissablefunc({ btnId, state: false }) }\r\n      }\r\n    }\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <PageLoadingSpinner isLoading={(GoBtnlistloading || !pageField)} />\r\n      <div className=\"page-content\">\r\n        <div className=\"mt-n1\">\r\n          {\r\n            (pageField) &&\r\n            <CommonPurchaseList\r\n              action={action}\r\n              reducers={reducers}\r\n              showBreadcrumb={false}\r\n              MasterModal={MarginMaster}\r\n              masterPath={url.MARGIN}\r\n              newBtnPath={url.MARGIN}\r\n              ButtonMsgLable={\"Margin\"}\r\n              deleteName={\"EffectiveDate\"}\r\n              pageMode={pageMode}\r\n              editBodyfunc={editBodyfunc}\r\n              deleteBodyfunc={deleteBodyfunc}\r\n            />\r\n\r\n          }\r\n        </div>\r\n\r\n      </div>\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nexport default MarginList;","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\MarginMaster\\MarginMaster.js",["3171","3172","3173","3174","3175","3176","3177","3178","3179","3180","3181","3182","3183","3184","3185","3186","3187","3188","3189"],"import React, { useEffect, useState, useRef } from \"react\";\r\nimport {\r\n    Button,\r\n    Card,\r\n    CardBody,\r\n    CardHeader,\r\n    Col,\r\n    Container,\r\n    FormGroup,\r\n    Input,\r\n    Label,\r\n    Row,\r\n} from \"reactstrap\";\r\nimport Select from \"react-select\";\r\nimport { MetaTags } from \"react-meta-tags\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { Breadcrumb_inputName, commonPageField, commonPageFieldSuccess } from \"../../../store/actions\";\r\nimport paginationFactory, {\r\n    PaginationListStandalone,\r\n    PaginationProvider,\r\n} from \"react-bootstrap-table2-paginator\";\r\nimport ToolkitProvider, { Search } from \"react-bootstrap-table2-toolkit\";\r\nimport { get_Party_ForDropDown } from \"../../../store/Administrator/ItemsRedux/action\";\r\nimport BootstrapTable from \"react-bootstrap-table-next\";\r\nimport {\r\n    deleteIdForMarginMaster,\r\n    deleteIdForMarginMasterSuccess,\r\n    getMarginList,\r\n    goButtonForMargin,\r\n    goButtonForMarginSuccess,\r\n    saveMarginMaster,\r\n    saveMarginMasterSuccess\r\n} from \"../../../store/Administrator/MarginMasterRedux/action\";\r\nimport {\r\n    breadcrumbReturnFunc,\r\n    loginUserID,\r\n    loginCompanyID,\r\n    metaTagLabel\r\n} from \"../../../components/Common/CommonFunction\";\r\nimport { priceListByCompay_Action } from \"../../../store/Administrator/PriceList/action\";\r\nimport * as _cfunc from \"../../../components/Common/CommonFunction\";\r\nimport { CInput, C_DatePicker, decimalRegx } from \"../../../CustomValidateForm\";\r\nimport { mode, pageId, url } from \"../../../routes\";\r\nimport { customAlert } from \"../../../CustomAlert/ConfirmDialog\";\r\nimport { comAddPageFieldFunc, formValid, initialFiledFunc, onChangeDate, onChangeSelect, resetFunction } from \"../../../components/Common/validationFunction\";\r\nimport { Go_Button, SaveButton } from \"../../../components/Common/CommonButton\";\r\nimport { mySearchProps } from \"../../../components/Common/SearchBox/MySearch\";\r\nimport { async } from \"q\";\r\n\r\nconst MarginMaster = (props) => {\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n\r\n    const fileds = {\r\n        EffectiveDate: \"\",\r\n        PartyName: \"\",\r\n        PriceListName: \"\",\r\n    }\r\n    const [state, setState] = useState(() => initialFiledFunc(fileds))\r\n\r\n    //SetState  Edit data Geting From Modules List component\r\n    const [pageMode, setPageMode] = useState(mode.defaultsave);\r\n    const [userPageAccessState, setUserAccState] = useState(\"\");\r\n    const [editCreatedBy, seteditCreatedBy] = useState(\"\");\r\n\r\n    //Access redux store Data /  'save_ModuleSuccess' action data\r\n    const { postMsg,\r\n        tableData,\r\n        deleteMessage,\r\n        Party,\r\n        PriceList,\r\n        userAccess,\r\n        pageField,\r\n        saveBtnloading,\r\n        listBtnLoading,\r\n    } = useSelector((state) => ({\r\n        listBtnLoading: state.MarginMasterReducer.listBtnLoading,\r\n        saveBtnloading: state.MarginMasterReducer.saveBtnloading,\r\n        tableData: state.MarginMasterReducer.MarginGoButton,\r\n        deleteMessage: state.MarginMasterReducer.deleteId_For_MarginMaster,\r\n        postMsg: state.MarginMasterReducer.postMsg,\r\n        Party: state.ItemMastersReducer.Party,\r\n        PriceList: state.PriceListReducer.priceListByCompany,\r\n        userAccess: state.Login.RoleAccessUpdateData,\r\n        pageField: state.CommonPageFieldReducer.pageField\r\n    }));\r\n\r\n    const { Data = [] } = tableData\r\n\r\n    useEffect(() => {\r\n        const page_Id = pageId.MARGIN\r\n        dispatch(commonPageFieldSuccess(null));\r\n        dispatch(commonPageField(page_Id))\r\n    }, []);\r\n\r\n    const values = { ...state.values }\r\n    const { isError } = state;\r\n    const { fieldLabel } = state;\r\n\r\n    const location = { ...history.location }\r\n    const hasShowloction = location.hasOwnProperty(mode.editValue)\r\n    const hasShowModal = props.hasOwnProperty(mode.editValue)\r\n\r\n    useEffect(() => {\r\n        dispatch(priceListByCompay_Action());\r\n        dispatch(get_Party_ForDropDown());\r\n    }, [dispatch]);\r\n\r\n    // userAccess useEffect\r\n    useEffect(() => {\r\n\r\n        let userAcc = null;\r\n        let locationPath = location.pathname;\r\n\r\n        if (hasShowModal) {\r\n            locationPath = props.masterPath;\r\n        };\r\n\r\n        userAcc = userAccess.find((inx) => {\r\n            return (`/${inx.ActualPagePath}` === locationPath)\r\n        })\r\n\r\n        if (userAcc) {\r\n            setUserAccState(userAcc)\r\n            breadcrumbReturnFunc({ dispatch, userAcc });\r\n        };\r\n    }, [userAccess])\r\n\r\n    useEffect(() => {\r\n\r\n        if (pageField) {\r\n            const fieldArr = pageField.PageFieldMaster\r\n            comAddPageFieldFunc({ state, setState, fieldArr })\r\n        }\r\n    }, [pageField])\r\n\r\n    // hasShowloction && hasShowModal useEffect\r\n    useEffect(() => {\r\n\r\n        if ((hasShowloction || hasShowModal)) {\r\n\r\n            let hasEditVal = null\r\n            if (hasShowloction) {\r\n                setPageMode(location.page_Mode)\r\n                hasEditVal = location.editValue\r\n            }\r\n            else if (hasShowModal) {\r\n                hasEditVal = props.editValue\r\n                setPageMode(props.pageMode)\r\n            }\r\n\r\n            if (hasEditVal) {\r\n\r\n                const { id, PriceList_id, PriceListName, Party_id, PartyName, EffectiveDate } = hasEditVal\r\n                const { values, fieldLabel, hasValid, required, isError } = { ...state }\r\n                values.PriceListName = { label: PriceListName, value: PriceList_id };\r\n                values.PartyName = Party_id === null ? { label: \"select\", value: \"\" } : { label: PartyName, value: Party_id };\r\n                values.EffectiveDate = EffectiveDate\r\n                values.id = id\r\n\r\n                hasValid.PriceListName.valid = true;\r\n                hasValid.PartyName.valid = true;\r\n                hasValid.EffectiveDate.valid = true;\r\n                setState({ values, fieldLabel, hasValid, required, isError })\r\n                dispatch(Breadcrumb_inputName(hasEditVal.PriceListName))\r\n                seteditCreatedBy(hasEditVal.CreatedBy)\r\n            }\r\n        }\r\n        else {\r\n            dispatch(goButtonForMarginSuccess({ Status: false }))\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (deleteMessage.Status === true && deleteMessage.StatusCode === 200) {\r\n            dispatch(deleteIdForMarginMasterSuccess({ Status: false }));\r\n            dispatch(goButtonForMarginSuccess([]))\r\n            GoButton_Handler()\r\n            customAlert({\r\n                Type: 1,\r\n                Message: deleteMessage.Message,\r\n            })\r\n\r\n        } else if (deleteMessage.Status === true) {\r\n            dispatch(deleteIdForMarginMasterSuccess({ Status: false }));\r\n\r\n            customAlert({\r\n                Type: 3,\r\n                Status: true,\r\n                Message: JSON.stringify(deleteMessage.Message),\r\n            })\r\n\r\n        }\r\n    }, [deleteMessage]);\r\n\r\n    useEffect(() => _cfunc.tableInputArrowUpDounFunc(\"#table_Arrow\"), [Data]);\r\n\r\n    const PartyTypeDropdown_Options = Party.map((Data) => ({\r\n        value: Data.id,\r\n        label: Data.Name\r\n    }));\r\n    PartyTypeDropdown_Options.unshift({\r\n        value: \"\",\r\n        label: \"select\"\r\n    });\r\n\r\n    const PriceList_DropdownOptions = PriceList.map((data) => ({\r\n        value: data.id,\r\n        label: data.Name\r\n    }));\r\n\r\n    const GoButton_Handler = () => {\r\n\r\n        if (values.EffectiveDate === '') {\r\n            customAlert({\r\n                Type: 4,\r\n                Message: \"Please select EffectiveDate\",\r\n            })\r\n            return\r\n        }\r\n        try {\r\n            if (formValid(state, setState)) {\r\n\r\n                const jsonBody = JSON.stringify({\r\n                    PriceList: values.PriceListName.value,\r\n                    Party: values.PartyName.value ? values.PartyName.value : 0,\r\n                    EffectiveDate: values.EffectiveDate\r\n                });\r\n                dispatch(goButtonForMargin({ jsonBody }));\r\n            }\r\n        } catch (e) { console.log(e) }\r\n    };\r\n\r\n    //select id for delete row\r\n    const deleteHandeler = async (id, name) => {\r\n\r\n        const isConfirmed = await customAlert({\r\n            Type: 7,\r\n            Message: `Are you sure you want to delete this Item : \"${name}\"`\r\n        });\r\n\r\n        if (isConfirmed) {\r\n            dispatch(deleteIdForMarginMaster(id))\r\n        }\r\n\r\n    };\r\n\r\n    useEffect(async () => {\r\n\r\n        if ((postMsg.Status === true) && (postMsg.StatusCode === 200) && !(pageMode === \"dropdownAdd\")) {\r\n            dispatch(saveMarginMasterSuccess({ Status: false }))\r\n            setState(() => resetFunction(fileds, state))// Clear form values  \r\n            if (pageMode === mode.dropdownAdd) {\r\n                customAlert({\r\n                    Type: 1,\r\n                    Message: postMsg.Message,\r\n                })\r\n            }\r\n            else {\r\n                let isPermission = await customAlert({\r\n                    Type: 1,\r\n                    Status: true,\r\n                    Message: postMsg.Message,\r\n                })\r\n                if (isPermission) {\r\n                    history.push({ pathname: url.MARGIN_lIST })\r\n                }\r\n            }\r\n        }\r\n\r\n        else if (postMsg.Status === true) {\r\n            dispatch(saveMarginMasterSuccess({ Status: false }))\r\n            customAlert({\r\n                Type: 4,\r\n                Message: JSON.stringify(postMsg.Message),\r\n            })\r\n        }\r\n    }, [postMsg])\r\n\r\n    const pageOptions = {\r\n        sizePerPage: 10,\r\n        totalSize: Data.length,\r\n        custom: true,\r\n    };\r\n\r\n    const pagesListColumns = [\r\n        {\r\n            text: \"Item Name\",\r\n            dataField: \"Name\",\r\n            sort: true,\r\n            headerStyle: () => {\r\n                return { width: '500px', };\r\n            }\r\n        },\r\n        {\r\n            text: \"Current Margin\",\r\n            dataField: \"CurrentMargin\",\r\n            sort: true,\r\n            formatter: (cellContent, row, key) => {\r\n                return (<span style={{ justifyContent: 'center' }}>\r\n                    <Input\r\n                        key={`CurrentMargin${row.Item}`}\r\n                        id=\"\"\r\n                        type=\"text\"\r\n                        disabled={true}\r\n                        defaultValue={cellContent}\r\n                        className=\"col col-sm text-end\"\r\n                    />\r\n                </span>)\r\n            },\r\n            headerStyle: () => {\r\n                return { width: '200px', };\r\n            }\r\n        },\r\n        {\r\n            text: \"Effective from \",\r\n            dataField: \"CurrentDate\",\r\n            sort: true,\r\n            headerStyle: () => {\r\n                return { width: '200px' };\r\n            },\r\n            formatter: (cellContent, row, key) => {\r\n                if (!cellContent) {\r\n                    return null\r\n                }\r\n                return (<span style={{ justifyContent: 'center' }}>\r\n                    <Label\r\n                        style={{ color: \"black\", textAlign: \"center\", display: \"block\", }}\r\n                        key={`CurrentDate${row.Item}`}\r\n                    >{_cfunc.date_dmy_func(cellContent)}</Label>\r\n                </span>)\r\n            },\r\n        },\r\n        {\r\n            text: \"Margin \",\r\n            dataField: \"Margin\",\r\n            sort: true,\r\n            formatter: (cellContent, row) => {\r\n\r\n                if (((cellContent > 0) && (row[\"margin\"] === undefined) || row.margin)) {\r\n                    row[\"margin\"] = true\r\n                } else {\r\n                    row[\"margin\"] = false\r\n                }\r\n                return (<span style={{ justifyContent: 'center' }}>\r\n                    <CInput\r\n                        key={`Margin${row.Item}`}\r\n                        type=\"text\"\r\n                        cpattern={decimalRegx}\r\n                        defaultValue={cellContent}\r\n                        disabled={row.margin}\r\n                        className=\"col col-sm text-end\"\r\n                        onChange={(e) => row[\"Margin\"] = e.target.value}\r\n                    />\r\n                </span>)\r\n            },\r\n            headerStyle: () => {\r\n                return { width: '200px' };\r\n            }\r\n        },\r\n        {\r\n            text: \"Action \",\r\n            dataField: \"\",\r\n            headerStyle: () => {\r\n                return { width: '100px' };\r\n            },\r\n            formatter: (cellContent, user) => {\r\n                return (\r\n                    <span className=\"d-flex justify-content-center align-items-center\">\r\n                        {!(user.id === '') &&\r\n                            <Button\r\n                                id={\"deleteid\"}\r\n                                type=\"button\"\r\n                                className=\"badge badge-soft-danger font-size-12 btn btn-danger waves-effect waves-light w-xxs border border-light\"\r\n                                data-mdb-toggle=\"tooltip\" data-mdb-placement=\"top\" title='Delete MRP'\r\n                                onClick={() => { deleteHandeler(user.id, user.Name); }}\r\n                            >\r\n                                <i className=\"mdi mdi-delete font-size-18\"></i>\r\n                            </Button>}\r\n                    </span>\r\n                )\r\n            }\r\n        },\r\n    ]\r\n\r\n    const SaveHandler = async (event) => {\r\n        event.preventDefault();\r\n        const btnId = event.target.id\r\n        try {\r\n            // if (formValid(state, setState)) {\r\n            _cfunc.btnIsDissablefunc({ btnId, state: true })\r\n\r\n            var ItemData = Data.map((index) => ({\r\n                PriceList: values.PriceListName.value,\r\n                Party: values.PartyName.value,\r\n                EffectiveDate: values.EffectiveDate,\r\n                Company: loginCompanyID(),\r\n                CreatedBy: loginUserID(),\r\n                UpdatedBy: loginUserID(),\r\n                IsDeleted: 0,\r\n                Item: index.Item,\r\n                Margin: index.Margin,\r\n                id: index.id\r\n            }))\r\n\r\n            const Find = ItemData.filter((index) => {   // condition for margin save without 0\r\n                return (Number(index.Margin) > 0)\r\n            })\r\n\r\n            const jsonBody = JSON.stringify(Find)\r\n\r\n            if (!(Find.length > 0)) {\r\n\r\n                customAlert({\r\n                    Type: 4,\r\n                    Message: \"Please Enter Margin\"\r\n                })\r\n                return _cfunc.btnIsDissablefunc({ btnId, state: false })\r\n            }\r\n            else {\r\n                dispatch(saveMarginMaster({ jsonBody, btnId }));\r\n            }\r\n\r\n        } catch (e) { _cfunc.btnIsDissablefunc({ btnId, state: false }) }\r\n    };\r\n\r\n    // IsEditMode_Css is use of module Edit_mode (reduce page-content marging)\r\n    var IsEditMode_Css = ''\r\n    if ((pageMode === mode.edit) || (pageMode === mode.copy) || (pageMode === mode.dropdownAdd)) { IsEditMode_Css = \"-5.5%\" };\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"page-content\" style={{ marginTop: IsEditMode_Css }}>\r\n                <MetaTags>{metaTagLabel(userPageAccessState)}</MetaTags>\r\n                <Container fluid>\r\n\r\n                    {/* <form noValidate> */}\r\n                    <Card className=\"text-black \">\r\n                        <CardHeader className=\"card-header  text-black c_card_header\" >\r\n                            <h4 className=\"card-title text-black\">{userPageAccessState.PageDescription}</h4>\r\n                            <p className=\"card-title-desc text-black\">{userPageAccessState.PageDescriptionDetails}</p>\r\n                        </CardHeader>\r\n                        <CardBody className=\" vh-10 0 text-black\" style={{ marginBottom: \"4cm\" }}>\r\n\r\n                            <Card style={{ backgroundColor: \"whitesmoke\" }} className=\" mb-1\">\r\n                                <CardHeader className=\"c_card_body\"  >\r\n                                    <Row className=\"mt-3\">\r\n                                        <Col sm={3}>\r\n                                            <FormGroup className=\"mb-3 row\">\r\n                                                <Label htmlFor=\"validationCustom01\" className=\"col-sm-4 p-1 ml-n1 \">{fieldLabel.PriceListName}</Label>\r\n                                                <Col sm={8}>\r\n                                                    <Select\r\n                                                        name=\"PriceListName\"\r\n                                                        value={values.PriceListName}\r\n                                                        id={\"PriceListName\"}\r\n                                                        options={PriceList_DropdownOptions}\r\n                                                        isDisabled={pageMode === mode.edit ? true : false}\r\n                                                        isSearchable={true}\r\n                                                        autoFocus={true}\r\n                                                        styles={{\r\n                                                            menu: provided => ({ ...provided, zIndex: 2 })\r\n                                                        }}\r\n                                                        placeholder=\"select\"\r\n                                                        onChange={(hasSelect, evn) => {\r\n                                                            onChangeSelect({ hasSelect, evn, state, setState, })\r\n                                                            dispatch(Breadcrumb_inputName(hasSelect.label))\r\n                                                        }}\r\n                                                        classNamePrefix=\"dropdown\"\r\n                                                    />\r\n                                                    {isError.PriceListName.length > 0 && (\r\n                                                        <span className=\"text-danger f-8\"><small>{isError.PriceListName}</small></span>\r\n                                                    )}\r\n\r\n                                                </Col>\r\n                                            </FormGroup>\r\n                                        </Col>\r\n                                        <Col sm={3}>\r\n                                            <FormGroup className=\"mb-3 row \">\r\n                                                <Label htmlFor=\"validationCustom01\" className=\"col-sm-3 p-2\" style={{ width: \"2.5cm\" }}>{fieldLabel.PartyName}</Label>\r\n                                                <Col sm={8} >\r\n                                                    <Select\r\n                                                        name=\"PartyName\"\r\n                                                        value={values.PartyName}\r\n                                                        id={\"PartyName\"}\r\n                                                        options={PartyTypeDropdown_Options}\r\n                                                        isDisabled={pageMode === mode.edit ? true : false}\r\n                                                        isSearchable={true}\r\n                                                        styles={{\r\n                                                            menu: provided => ({ ...provided, zIndex: 2 })\r\n                                                        }}\r\n                                                        placeholder=\"select\"\r\n                                                        onChange={(hasSelect, evn) => onChangeSelect({ hasSelect, evn, state, setState, })}\r\n                                                        classNamePrefix=\"dropdown\"\r\n                                                    />\r\n                                                    {isError.PartyName.length > 0 && (\r\n                                                        <span className=\"text-danger f-8\"><small>{isError.PartyName}</small></span>\r\n                                                    )}\r\n                                                </Col>\r\n                                            </FormGroup>\r\n                                        </Col>\r\n                                        <Col sm={4}>\r\n                                            <FormGroup className=\"mb-3 row \">\r\n                                                <Label className=\"col-md-6 p-2\" style={{ width: \"2.9cm\" }}>{fieldLabel.EffectiveDate}</Label>\r\n                                                <Col sm={6}>\r\n                                                    <C_DatePicker\r\n                                                        id=\"EffectiveDate\"\r\n                                                        name=\"EffectiveDate\"\r\n                                                        placeholder={\"DD/MM/YYYY\"}\r\n                                                        value={values.EffectiveDate}\r\n                                                        isDisabled={pageMode === mode.edit ? true : false}\r\n                                                        onChange={(y, v, e) => {\r\n                                                            onChangeDate({ e, v, state, setState })\r\n                                                        }}\r\n                                                        options={{\r\n                                                            altInput: true,\r\n                                                            altFormat: \"d-m-Y\",\r\n                                                            dateFormat: \"Y-m-d\",\r\n                                                        }}\r\n                                                    />\r\n                                                    {isError.EffectiveDate.length > 0 && (\r\n                                                        <span className=\"invalid-feedback\">{isError.EffectiveDate}</span>\r\n                                                    )}\r\n                                                </Col>\r\n                                            </FormGroup>\r\n                                        </Col>\r\n                                        <Col sm={1}>\r\n                                            <Go_Button onClick={(event) => { GoButton_Handler(event) }} loading={listBtnLoading} />\r\n                                        </Col>\r\n                                    </Row>\r\n                                </CardHeader>\r\n                            </Card>\r\n\r\n                            {Data.length > 0 ?\r\n                                <ToolkitProvider\r\n                                    keyField=\"Item\"\r\n                                    data={Data}\r\n                                    columns={pagesListColumns}\r\n                                    search\r\n                                >\r\n                                    {(toolkitProps) => (\r\n                                        <React.Fragment>\r\n                                            <Row>\r\n                                                <Col xl=\"12\">\r\n                                                    <div className=\"table-responsive\">\r\n                                                        <BootstrapTable\r\n                                                            keyField={\"Item\"}\r\n                                                            id=\"table_Arrow\"\r\n                                                            responsive\r\n                                                            bordered={false}\r\n                                                            striped={false}\r\n                                                            classes={\"table  table-bordered\"}\r\n                                                            noDataIndication={<div className=\"text-danger text-center \">Items Not available</div>}\r\n                                                            {...toolkitProps.baseProps}\r\n                                                        />\r\n                                                        {mySearchProps(toolkitProps.searchProps)}\r\n\r\n                                                    </div>\r\n                                                </Col>\r\n                                            </Row>\r\n\r\n                                        </React.Fragment>\r\n                                    )}\r\n                                </ToolkitProvider>\r\n                                : null\r\n                            }\r\n\r\n                            {Data.length > 0 ?\r\n                                <FormGroup>\r\n                                    <Col sm={2} style={{ marginLeft: \"-40px\" }} className={\"row save1\"}>\r\n                                        <SaveButton pageMode={pageMode}\r\n                                            loading={saveBtnloading}\r\n                                            onClick={SaveHandler}\r\n                                            userAcc={userPageAccessState}\r\n                                            editCreatedBy={editCreatedBy}\r\n                                        />\r\n                                    </Col>\r\n                                </FormGroup >\r\n                                : null\r\n                            }\r\n\r\n                        </CardBody>\r\n                    </Card>\r\n                    {/* </form> */}\r\n                </Container>\r\n            </div>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default MarginMaster\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\GroupPage\\GroupList.js",["3190"],"import React, { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport CommonListPage from \"../../../components/Common/CommonMasterListPage\";\r\nimport {\r\n  commonPageFieldList,\r\n  commonPageFieldListSuccess,\r\n} from \"../../../store/actions\";\r\nimport GroupMaster from \"./GroupMaster\";\r\nimport {\r\n  deleteGrouplistSuccess,\r\n  delete_GroupList_ID,\r\n  editGroupID,\r\n  getGroupList,\r\n  getGroupListSuccess,\r\n  saveGroupMaster_Success,\r\n  updateGroupIDSuccess\r\n} from \"../../../store/Administrator/GroupRedux/action\";\r\nimport * as pageId from \"../../../routes/allPageID\"\r\nimport * as url from \"../../../routes/route_url\";\r\nimport { PageLoadingSpinner } from \"../../../components/Common/CommonButton\";\r\n\r\nconst GroupList = () => {\r\n\r\n  const dispatch = useDispatch();\r\n  const reducers = useSelector(\r\n    (state) => ({\r\n      listBtnLoading: state.GroupReducer.listBtnLoading,\r\n      goBtnLoading: state.GroupReducer.goBtnLoading,\r\n      tableList: state.GroupReducer.groupList,\r\n      editData: state.GroupReducer.editData,\r\n      updateMsg: state.GroupReducer.updateMsg,\r\n      deleteMsg: state.GroupReducer.deleteMsg,\r\n      postMsg: state.GroupReducer.postMsg,\r\n      userAccess: state.Login.RoleAccessUpdateData,\r\n      pageField: state.CommonPageFieldReducer.pageFieldList\r\n    })\r\n  );\r\n\r\n  const action = {\r\n    getList: getGroupList,\r\n    editId: editGroupID,\r\n    deleteId: delete_GroupList_ID,\r\n    postSucc: saveGroupMaster_Success,\r\n    updateSucc: updateGroupIDSuccess,\r\n    deleteSucc: deleteGrouplistSuccess\r\n  }\r\n\r\n  useEffect(() => {\r\n    const page_Id = pageId.GROUP_lIST\r\n    dispatch(commonPageFieldListSuccess(null))\r\n    dispatch(commonPageFieldList(page_Id))\r\n    dispatch(getGroupList());\r\n\r\n    return () => {\r\n      dispatch(getGroupListSuccess([]));\r\n      dispatch(commonPageFieldListSuccess(null))\r\n    }\r\n  }, []);\r\n\r\n  const { pageField, goBtnLoading } = reducers\r\n  return (\r\n    <React.Fragment>\r\n      <PageLoadingSpinner isLoading={(goBtnLoading || !pageField)} />\r\n      {\r\n        (pageField) &&\r\n        <CommonListPage\r\n          action={action}\r\n          reducers={reducers}\r\n          MasterModal={GroupMaster}\r\n          masterPath={url.GROUP}\r\n          ButtonMsgLable={\"Group\"}\r\n          deleteName={\"Name\"}\r\n        />\r\n\r\n      }\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nexport default GroupList;\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\GroupTypePage\\GroupTypeList.js",["3191"],"import React, { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport CommonListPage from \"../../../components/Common/CommonMasterListPage\";\r\nimport {\r\n  commonPageFieldList,\r\n  commonPageFieldListSuccess\r\n} from \"../../../store/actions\";\r\nimport {\r\n  deleteGroupTypeID,\r\n  deleteGroupTypeIDSuccess,\r\n  editGroupTypeID,\r\n  getGroupTypeslist,\r\n  getGroupTypeslistSuccess,\r\n  saveGroupTypeMasterSuccess,\r\n  updateGroupTypeIDSuccess\r\n} from \"../../../store/Administrator/GroupTypeRedux/action\";\r\nimport GroupTypeMaster from \"./GroupTypeMaster\";\r\nimport * as pageId from \"../../../routes/allPageID\"\r\nimport * as url from \"../../../routes/route_url\";\r\nimport { PageLoadingSpinner } from \"../../../components/Common/CommonButton\";\r\n\r\nconst GroupTypeList = (props) => {\r\n  const dispatch = useDispatch();\r\n\r\n  const reducers = useSelector(\r\n    (state) => ({\r\n      listBtnLoading: state.GroupTypeReducer.listBtnLoading,\r\n      goBtnLoading: state.GroupTypeReducer.goBtnLoading,\r\n      tableList: state.GroupTypeReducer.GroupType,\r\n      editData: state.GroupTypeReducer.editData,\r\n      updateMsg: state.GroupTypeReducer.updateMessage,\r\n      deleteMsg: state.GroupTypeReducer.deleteMessage,\r\n      postMsg: state.GroupTypeReducer.PostData,\r\n      userAccess: state.Login.RoleAccessUpdateData,\r\n      pageField: state.CommonPageFieldReducer.pageFieldList\r\n    })\r\n  );\r\n\r\n  const action = {\r\n    getList: getGroupTypeslist,\r\n    editId: editGroupTypeID,\r\n    deleteId: deleteGroupTypeID,\r\n    postSucc: saveGroupTypeMasterSuccess,\r\n    updateSucc: updateGroupTypeIDSuccess,\r\n    deleteSucc: deleteGroupTypeIDSuccess\r\n  }\r\n  useEffect(() => {\r\n    const page_Id = pageId.GROUPTYPE_lIST\r\n    dispatch(commonPageFieldListSuccess(null))\r\n    dispatch(commonPageFieldList(page_Id))\r\n    dispatch(getGroupTypeslist())\r\n\r\n    return () => {\r\n      dispatch(getGroupTypeslistSuccess([]));\r\n      dispatch(commonPageFieldListSuccess(null))\r\n    }\r\n\r\n  }, []);\r\n\r\n  const { pageField, goBtnLoading } = reducers\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <PageLoadingSpinner isLoading={(goBtnLoading || !pageField)} />\r\n      {\r\n        (pageField) &&\r\n        <CommonListPage\r\n          action={action}\r\n          reducers={reducers}\r\n          MasterModal={GroupTypeMaster}\r\n          masterPath={url.GROUPTYPE}\r\n          ButtonMsgLable={\"Group Type\"}\r\n          deleteName={\"Name\"}\r\n        />\r\n\r\n      }\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nexport default GroupTypeList;\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\GroupPage\\GroupMaster.js",["3192","3193","3194","3195","3196","3197"],"import React, { useEffect, useState } from \"react\";\r\nimport {\r\n    Card,\r\n    CardBody,\r\n    CardHeader,\r\n    Col,\r\n    Container,\r\n    FormGroup,\r\n    Input,\r\n    Label,\r\n    Row\r\n} from \"reactstrap\";\r\nimport Select from \"react-select\";\r\nimport { MetaTags } from \"react-meta-tags\";\r\nimport {\r\n    Breadcrumb_inputName,\r\n    commonPageField,\r\n    commonPageFieldSuccess,\r\n    editGroupIDSuccess,\r\n    saveGroupMaster,\r\n    saveGroupMaster_Success,\r\n    updateGroupID,\r\n    updateGroupIDSuccess\r\n} from \"../../../store/actions\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {\r\n    comAddPageFieldFunc,\r\n    formValid,\r\n    initialFiledFunc,\r\n    onChangeSelect,\r\n    onChangeText,\r\n    resetFunction\r\n} from \"../../../components/Common/validationFunction\";\r\nimport { getGroupTypeslist } from \"../../../store/Administrator/GroupTypeRedux/action\";\r\nimport { SaveButton } from \"../../../components/Common/CommonButton\";\r\nimport {\r\n    btnIsDissablefunc,\r\n    loginUserID,\r\n    metaTagLabel\r\n} from \"../../../components/Common/CommonFunction\";\r\nimport { mode, url, pageId } from \"../../../routes/index\";\r\nimport { customAlert } from \"../../../CustomAlert/ConfirmDialog\";\r\nimport GroupTypeMaster from \"../GroupTypePage/GroupTypeMaster\";\r\nimport AddMaster from \"../EmployeePages/Drodown\";\r\nimport { saveMsgUseEffect, userAccessUseEffect } from \"../../../components/Common/CommonUseEffect\";\r\n\r\nconst GroupMaster = (props) => {\r\n\r\n    const history = useHistory()\r\n    const dispatch = useDispatch();\r\n\r\n    const fileds = {\r\n        id: \"\",\r\n        Name: \"\",\r\n        GroupTypeName: \"\",\r\n        Sequence: \"\"\r\n    }\r\n\r\n    const [state, setState] = useState(() => initialFiledFunc(fileds))\r\n    const [pageMode, setPageMode] = useState(mode.defaultsave);\r\n    const [modalCss, setModalCss] = useState(false);\r\n    const [userPageAccessState, setUserAccState] = useState('');\r\n    const [editCreatedBy, seteditCreatedBy] = useState(\"\");\r\n    const [groupTypeMaster_AddAccess, setGroupTypeMaster_AddAccess] = useState(false)\r\n\r\n    //Access redux store Data /  'save_ModuleSuccess' action data\r\n    const {\r\n        postMsg,\r\n        GroupTypeAPI,\r\n        updateMsg,\r\n        pageField,\r\n        saveBtnloading,\r\n        userAccess } = useSelector((state) => ({\r\n            saveBtnloading: state.GroupReducer.saveBtnloading,\r\n            postMsg: state.GroupReducer.postMsg,\r\n            updateMsg: state.GroupReducer.updateMsg,\r\n            GroupTypeAPI: state.GroupTypeReducer.GroupType,\r\n            userAccess: state.Login.RoleAccessUpdateData,\r\n            pageField: state.CommonPageFieldReducer.pageField\r\n        }));\r\n\r\n    const { values } = state\r\n    const { isError } = state;\r\n    const { fieldLabel } = state;\r\n\r\n    const location = { ...history.location }\r\n    const hasShowloction = location.hasOwnProperty(mode.editValue)\r\n    const hasShowModal = props.hasOwnProperty(mode.editValue)\r\n\r\n    useEffect(() => {\r\n        const page_Id = pageId.GROUP\r\n        dispatch(commonPageFieldSuccess(null));\r\n        dispatch(commonPageField(page_Id))\r\n        dispatch(getGroupTypeslist())\r\n\r\n    }, []);\r\n\r\n    // userAccess useEffect\r\n    useEffect(() => userAccessUseEffect({\r\n        props,\r\n        userAccess,\r\n        dispatch,\r\n        setUserAccState,\r\n        otherloginAccss\r\n    }), [userAccess]);\r\n\r\n    const otherloginAccss = (index) => {\r\n        if (index.id === pageId.GROUPTYPE) {\r\n            setGroupTypeMaster_AddAccess(true)\r\n        }\r\n\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        if ((hasShowloction || hasShowModal)) {\r\n\r\n            let hasEditVal = null\r\n            if (hasShowloction) {\r\n                setPageMode(location.pageMode)\r\n                hasEditVal = location.editValue\r\n            }\r\n            else if (hasShowModal) {\r\n                hasEditVal = props.editValue\r\n                setPageMode(props.pageMode)\r\n                setModalCss(true)\r\n            }\r\n\r\n            if (hasEditVal) {\r\n\r\n\r\n                const { id, Name, GroupType, GroupTypeName, Sequence } = hasEditVal\r\n                const { values, fieldLabel, hasValid, required, isError } = { ...state }\r\n\r\n                values.Name = Name;\r\n                values.id = id\r\n                values.GroupTypeName = { label: GroupTypeName, value: GroupType };\r\n                values.Sequence = Sequence\r\n\r\n                hasValid.Name.valid = true;\r\n                hasValid.GroupTypeName.valid = true;\r\n                hasValid.Sequence.valid = true;\r\n\r\n                setState({ values, fieldLabel, hasValid, required, isError })\r\n                dispatch(Breadcrumb_inputName(hasEditVal.Name))\r\n                seteditCreatedBy(hasEditVal.CreatedBy)\r\n            }\r\n            dispatch(editGroupIDSuccess({ Status: false }))\r\n        }\r\n    }, [])\r\n\r\n\r\n    useEffect(() => saveMsgUseEffect({\r\n        postMsg, pageMode,\r\n        history, dispatch,\r\n        postSuccss: saveGroupMaster_Success,\r\n        resetFunc: { fileds, state, setState },\r\n        listPath: url.GROUP_lIST\r\n    }), [postMsg])\r\n\r\n\r\n    useEffect(() => {\r\n        if (updateMsg.Status === true && updateMsg.StatusCode === 200 && !modalCss) {\r\n            setState(() => resetFunction(fileds, state))// Clear form values\r\n            history.push({\r\n                pathname: url.GROUP_lIST,\r\n            })\r\n        } else if (updateMsg.Status === true && !modalCss) {\r\n            dispatch(updateGroupIDSuccess({ Status: false }));\r\n            customAlert({\r\n                Type: 3,\r\n                Message: JSON.stringify(updateMsg.Message),\r\n            })\r\n        }\r\n    }, [updateMsg, modalCss]);\r\n\r\n\r\n    useEffect(() => {\r\n        if (pageField) {\r\n            const fieldArr = pageField.PageFieldMaster\r\n            comAddPageFieldFunc({ state, setState, fieldArr })\r\n        }\r\n    }, [pageField])\r\n\r\n    const GroupTypesValues = GroupTypeAPI.map((Data) => ({\r\n        value: Data.id,\r\n        label: Data.Name\r\n    }));\r\n\r\n    const SaveHandler = async (event) => {\r\n        event.preventDefault();\r\n        const btnId = event.target.id\r\n        try {\r\n            if (formValid(state, setState)) {\r\n                btnIsDissablefunc({ btnId, state: true })\r\n\r\n                const jsonBody = JSON.stringify({\r\n                    Name: values.Name,\r\n                    GroupType: values.GroupTypeName.value,\r\n                    Sequence: values.Sequence,\r\n                    CreatedBy: loginUserID(),\r\n                    UpdatedBy: loginUserID(),\r\n                });\r\n\r\n                if (pageMode === mode.edit) {\r\n                    dispatch(updateGroupID({ jsonBody, updateId: values.id, btnId }));\r\n                }\r\n                else {\r\n                    dispatch(saveGroupMaster({ jsonBody, btnId }));\r\n                }\r\n\r\n            }\r\n        } catch (e) { btnIsDissablefunc({ btnId, state: false }) }\r\n    };\r\n\r\n\r\n    // IsEditMode_Css is use of module Edit_mode (reduce page-content marging)\r\n    var IsEditMode_Css = ''\r\n    if ((modalCss) || (pageMode === mode.dropdownAdd)) { IsEditMode_Css = \"-5.5%\" };\r\n\r\n    if (!(userPageAccessState === '')) {\r\n        return (\r\n            <React.Fragment>\r\n                <div className=\"page-content\" style={{ marginTop: IsEditMode_Css }}>\r\n                    <Container fluid>\r\n                        <MetaTags>{metaTagLabel(userPageAccessState)}</MetaTags>\r\n\r\n                        <Card className=\"text-black\">\r\n                            <CardHeader className=\"card-header   text-black c_card_header\" >\r\n                                <h4 className=\"card-title text-black\">{userPageAccessState.PageDescription}</h4>\r\n                                <p className=\"card-title-desc text-black\">{userPageAccessState.PageDescriptionDetails}</p>\r\n                            </CardHeader>\r\n\r\n                            <CardBody className=\" vh-10 0 text-black \" >\r\n                                <form noValidate>\r\n\r\n                                    <Card>\r\n                                        <CardBody className=\"c_card_body\">\r\n                                            <Row>\r\n                                                <FormGroup className=\"mb-2 col col-sm-4 \">\r\n                                                    <Label htmlFor=\"validationCustom01\">{fieldLabel.Name} </Label>\r\n                                                    <Input\r\n                                                        name=\"Name\"\r\n                                                        id=\"txtName\"\r\n                                                        value={values.Name}\r\n                                                        type=\"text\"\r\n                                                        className={isError.Name.length > 0 ? \"is-invalid form-control\" : \"form-control\"}\r\n                                                        placeholder=\"Please Enter Name\"\r\n                                                        autoComplete='off'\r\n                                                        autoFocus={true}\r\n                                                        onChange={(event) => {\r\n                                                            onChangeText({ event, state, setState })\r\n                                                            dispatch(Breadcrumb_inputName(event.target.value))\r\n                                                        }}\r\n                                                    />\r\n                                                    {isError.Name.length > 0 && (\r\n                                                        <span className=\"invalid-feedback\">{isError.Name}</span>\r\n                                                    )}\r\n                                                </FormGroup>\r\n                                            </Row>\r\n                                            <Row>\r\n\r\n                                                <Col md=\"4\" >\r\n                                                    <FormGroup className=\"mb-3\">\r\n                                                        <Label htmlFor=\"validationCustom01\"> {fieldLabel.GroupTypeName} </Label>\r\n                                                        <Col sm={12} >\r\n                                                            <Select\r\n                                                                name=\"GroupTypeName\"\r\n                                                                value={values.GroupTypeName}\r\n                                                                isSearchable={true}\r\n                                                                className=\"react-dropdown\"\r\n                                                                classNamePrefix=\"dropdown\"\r\n                                                                options={GroupTypesValues}\r\n                                                                onChange={(hasSelect, evn) => onChangeSelect({ hasSelect, evn, state, setState, })}\r\n\r\n                                                            />\r\n                                                            {isError.GroupTypeName.length > 0 && (\r\n                                                                <span className=\"text-danger f-8\"><small>{isError.GroupTypeName}</small></span>\r\n                                                            )}\r\n                                                        </Col>\r\n                                                    </FormGroup>\r\n                                                </Col>\r\n\r\n                                                {(groupTypeMaster_AddAccess) &&\r\n                                                    <Col md=\"1\" className=\" mt-3\">\r\n                                                        <AddMaster\r\n                                                            masterModal={GroupTypeMaster}\r\n                                                            masterPath={url.GROUPTYPE}\r\n                                                        />\r\n                                                    </Col>}\r\n                                            </Row>\r\n\r\n                                            <Row>\r\n                                                <FormGroup className=\"mb-2 col col-sm-4 \">\r\n                                                    <Label htmlFor=\"validationCustom01\">{fieldLabel.Sequence} </Label>\r\n                                                    <Input\r\n                                                        name=\"Sequence\"\r\n                                                        id=\"txtSequence\"\r\n                                                        value={values.Sequence}\r\n                                                        type=\"text\"\r\n                                                        className={isError.Sequence.length > 0 ? \"is-invalid form-control\" : \"form-control\"}\r\n                                                        placeholder=\"Please Enter Sequence\"\r\n                                                        autoComplete='off'\r\n                                                        onChange={(event) => {\r\n                                                            onChangeText({ event, state, setState })\r\n                                                        }}\r\n                                                    />\r\n                                                    {isError.Sequence.length > 0 && (\r\n                                                        <span className=\"invalid-feedback\">{isError.Sequence}</span>\r\n                                                    )}\r\n                                                </FormGroup>\r\n                                            </Row>\r\n\r\n                                            <FormGroup className=\"mt-1\">\r\n                                                <Row>\r\n                                                    <Col sm={2}>\r\n                                                        <SaveButton\r\n                                                            loading={saveBtnloading}\r\n                                                            pageMode={pageMode}\r\n                                                            onClick={SaveHandler}\r\n                                                            userAcc={userPageAccessState}\r\n                                                            editCreatedBy={editCreatedBy}\r\n                                                            module={\"GroupMaster\"}\r\n                                                        />\r\n                                                    </Col>\r\n                                                </Row>\r\n                                            </FormGroup>\r\n                                        </CardBody>\r\n                                    </Card>\r\n                                </form>\r\n                            </CardBody>\r\n                        </Card>\r\n                    </Container>\r\n                </div>\r\n            </React.Fragment >\r\n        );\r\n    }\r\n    else {\r\n        return (\r\n            <React.Fragment></React.Fragment>\r\n        )\r\n    }\r\n};\r\n\r\nexport default GroupMaster\r\n\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\PartySubPartyPages\\partysubPartyList.js",["3198"],"import React, { useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport CommonListPage from \"../../../components/Common/CommonMasterListPage\";\r\nimport { commonPageFieldList, commonPageFieldListSuccess } from \"../../../store/actions\";\r\nimport {\r\n  deletePartySubParty,\r\n  deletePartySubPartySuccess,\r\n  editPartySubParty,\r\n  getPartySubPartylist,\r\n  savePartySubPartySuccess,\r\n  updatePartySubPartySuccess\r\n} from \"../../../store/Administrator/PartySubPartyRedux/action\";\r\nimport PartySubParty from \"./PartySubParty\";\r\nimport * as pageId from \"../../../routes/allPageID\"\r\nimport * as url from \"../../../routes/route_url\";\r\n\r\nconst PartySubPartyList = () => {\r\n  const dispatch = useDispatch();\r\n  const reducers = useSelector(\r\n    (state) => ({\r\n      tableList: state.PartySubPartyReducer.listData,\r\n      postMsg: state.PartySubPartyReducer.postMsg,\r\n      editData: state.PartySubPartyReducer.editData,\r\n      updateMsg: state.PartySubPartyReducer.updateMsg,\r\n      deleteMsg: state.PartySubPartyReducer.deleteMsg,\r\n      userAccess: state.Login.RoleAccessUpdateData,\r\n      pageField: state.CommonPageFieldReducer.pageFieldList\r\n    })\r\n  );\r\n\r\n  const action = {\r\n    getList: getPartySubPartylist,\r\n    editId: editPartySubParty,\r\n    deleteId: deletePartySubParty,\r\n    postSucc: savePartySubPartySuccess,\r\n    updateSucc: updatePartySubPartySuccess,\r\n    deleteSucc: deletePartySubPartySuccess\r\n  }\r\n\r\n  //  This UseEffect => Featch Modules List data  First Rendering\r\n  useEffect(() => {\r\n    const page_Id = pageId.PARTY_SUB_PARTY_lIST\r\n    dispatch(commonPageFieldListSuccess(null))\r\n    dispatch(commonPageFieldList(page_Id))\r\n    dispatch(getPartySubPartylist());\r\n  }, []);\r\n\r\n  const { pageField } = reducers\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {\r\n        (pageField) &&\r\n        <CommonListPage\r\n          action={action}\r\n          reducers={reducers}\r\n          MasterModal={PartySubParty}\r\n          masterPath={url.PARTY_SUB_PARTY}\r\n          ButtonMsgLable={\"PartySubParty\"}\r\n          deleteName={\"PartySubParty\"}\r\n        />\r\n      }\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nexport default PartySubPartyList;\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\GSTPages\\GSTList.js",["3199","3200","3201","3202","3203","3204","3205"],"import React, { useEffect, useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport {\r\n  BreadcrumbShowCountlabel,\r\n  commonPageFieldList,\r\n  commonPageFieldListSuccess\r\n} from \"../../../store/actions\";\r\nimport CommonPurchaseList from \"../../../components/Common/CommonPurchaseList\"\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { url, mode, pageId } from \"../../../routes/index\"\r\nimport * as _cfunc from \"../../../components/Common/CommonFunction\";\r\nimport * as _act from \"../../../store/actions\";\r\nimport { customAlert } from \"../../../CustomAlert/ConfirmDialog\";\r\nimport GSTMaster from \"./GSTMaster\";\r\nimport { deleteGSTListId, deleteGSTListId_Success, getGSTList, goButtonForGST_Master_Success } from \"../../../store/Administrator/GSTRedux/action\";\r\nimport { PageLoadingSpinner, Listloader } from \"../../../components/Common/CommonButton\";\r\n\r\nconst GSTList = () => {\r\n\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n  const hasPagePath = history.location.pathname\r\n\r\n  const [pageMode, setpageMode] = useState(mode.defaultsave)\r\n  const [userAccState, setUserAccState] = useState('');\r\n\r\n  const reducers = useSelector(\r\n    (state) => ({\r\n      listBtnLoading: state.GSTReducer.listBtnLoading,\r\n      GoBtnlistloading: state.GSTReducer.GoBtnlistloading,\r\n      tableList: state.GSTReducer.GSTList,\r\n      GSTGoButton: state.GSTReducer.GSTGoButton,\r\n      deleteMsg: state.GSTReducer.deleteMsg,\r\n      userAccess: state.Login.RoleAccessUpdateData,\r\n      pageField: state.CommonPageFieldReducer.pageFieldList\r\n    })\r\n  );\r\n\r\n  const { userAccess, pageField, GSTGoButton, deleteMsg, GoBtnlistloading } = reducers;\r\n\r\n  const action = {\r\n    getList: getGSTList,\r\n    deleteId: deleteGSTListId,\r\n    deleteSucc: deleteGSTListId_Success\r\n  }\r\n  const page_Id = pageId.GST_LIST\r\n\r\n  // Featch Modules List data  First Rendering\r\n  useEffect(() => {\r\n    setpageMode(hasPagePath)\r\n    dispatch(commonPageFieldListSuccess(null))\r\n    dispatch(commonPageFieldList(page_Id))\r\n    // dispatch(BreadcrumbShowCountlabel(`${\"GST Count\"} :0`))\r\n    dispatch(getGSTList())\r\n    return () => {\r\n      dispatch(_act.getGSTListSuccess([]));\r\n    }\r\n\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    let userAcc = userAccess.find((inx) => {\r\n      return (inx.id === page_Id)\r\n    })\r\n    if (!(userAcc === undefined)) {\r\n      setUserAccState(userAcc)\r\n    }\r\n  }, [userAccess])\r\n\r\n  useEffect(() => {\r\n\r\n    if (deleteMsg.Status === true && deleteMsg.StatusCode === 200) {\r\n      dispatch(deleteGSTListId_Success([]))\r\n      dispatch(getGSTList())\r\n    }\r\n  }, [deleteMsg]);\r\n\r\n  useEffect(() => {\r\n\r\n    if (GSTGoButton.Status === true && GSTGoButton.StatusCode === 200) {\r\n      dispatch(goButtonForGST_Master_Success({ ...GSTGoButton, Status: false }))\r\n      history.push({\r\n        pathname: GSTGoButton.pathname,\r\n        page_Mode: GSTGoButton.pageMode,\r\n        editValue: GSTGoButton.rowData\r\n      })\r\n    }\r\n  }, [GSTGoButton]);\r\n\r\n  function editBodyfunc(index) {\r\n\r\n    const { rowData, btnId } = index\r\n    let { EffectiveDate } = rowData;\r\n    _cfunc.btnIsDissablefunc({ btnId, state: true })\r\n\r\n    try {\r\n      const jsonBody = JSON.stringify({\r\n        EffectiveDate: EffectiveDate\r\n      })\r\n      let config = { jsonBody, pathname: url.GST, btnmode: mode.edit, rowData: rowData }\r\n      // sessionStorage.setItem(\"margin_Master\", config)\r\n      dispatch(_act.goButtonForGST_Master(config));\r\n    } catch (error) { _cfunc.btnIsDissablefunc({ btnId, state: false }) }\r\n  }\r\n\r\n  async function deleteBodyfunc(index) {\r\n\r\n    const { rowData, btnId } = index\r\n    if (rowData.CommonID) {\r\n      const rep = await customAlert({\r\n        Type: 8,\r\n        Message: `Are you sure you want to delete this ${\"EffectiveDate\"}: \"${rowData.EffectiveDate}\"`,\r\n      })\r\n      if (rep) {\r\n        _cfunc.btnIsDissablefunc({ btnId, state: true })\r\n        let config = { btnId, deleteId: rowData.CommonID }\r\n        try {\r\n          dispatch(deleteGSTListId(config))\r\n        }\r\n        catch (error) { _cfunc.btnIsDissablefunc({ btnId, state: false }) }\r\n      }\r\n    }\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <PageLoadingSpinner isLoading={(GoBtnlistloading || !pageField)} />\r\n      <div className=\"page-content\">\r\n        {\r\n\r\n          (pageField) &&\r\n          <CommonPurchaseList\r\n            action={action}\r\n            reducers={reducers}\r\n            showBreadcrumb={false}\r\n            MasterModal={GSTMaster}\r\n            masterPath={url.GST}\r\n            newBtnPath={url.GST}\r\n            ButtonMsgLable={\"GST\"}\r\n            deleteName={\"EffectiveDate\"}\r\n            pageMode={pageMode}\r\n            editBodyfunc={editBodyfunc}\r\n            deleteBodyfunc={deleteBodyfunc}\r\n          />\r\n\r\n        }\r\n      </div>\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nexport default GSTList;","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\PartyItemPage\\PartyItems.js",["3206","3207","3208","3209","3210","3211","3212","3213","3214","3215","3216","3217","3218","3219"],"import React, { useEffect, useMemo, useState } from \"react\";\r\nimport { Button, Card, CardBody, CardHeader, Col, Container, FormGroup, Label, Row } from \"reactstrap\";\r\n\r\nimport { MetaTags } from \"react-meta-tags\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Breadcrumb_inputName, commonPageField, commonPageFieldSuccess } from \"../../../store/actions\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { goButtonPartyItemAddPageSuccess, goButtonPartyItemAddPage, savePartyItemsAction, savePartyItemsActionSuccess, editPartyItemIDSuccess, channalItemViewDetailAction } from \"../../../store/Administrator/PartyItemsRedux/action\";\r\nimport { mySearchProps } from \"../../../components/Common/SearchBox/MySearch\";\r\nimport { C_Button, PageLoadingSpinner, SaveButton } from \"../../../components/Common/CommonButton\";\r\n\r\nimport * as url from \"../../../routes/route_url\";\r\nimport * as mode from \"../../../routes/PageMode\";\r\nimport BootstrapTable from \"react-bootstrap-table-next\";\r\nimport { customAlert } from \"../../../CustomAlert/ConfirmDialog\";\r\nimport PartyDropdown_Common from \"../../../components/Common/PartyDropdown\";\r\nimport { breadcrumbReturnFunc, metaTagLabel } from \"../../../components/Common/CommonFunction\";\r\nimport * as pageId from \"../../../routes/allPageID\";\r\nimport { selectAllCheck } from \"../../../components/Common/TableCommonFunc\";\r\nimport * as _cfunc from \"../../../components/Common/CommonFunction\";\r\nimport { C_Select } from \"../../../CustomValidateForm\";\r\nimport { getPartyTypelist, getPartyTypelistSuccess } from \"../../../store/Administrator/PartyTypeRedux/action\";\r\nimport ChannelViewDetails from \"./ChannelViewDetails\";\r\nimport { vieBtnCss } from \"../../../components/Common/ListActionsButtons\";\r\n\r\n\r\nfunction initialState(history) {\r\n\r\n    let page_Id = '';\r\n    let sub_Mode = history.location.pathname;\r\n\r\n    if (sub_Mode === url.PARTYITEM) {\r\n        page_Id = pageId.PARTYITEM;\r\n    }\r\n    else if (sub_Mode === url.CHANNEL_ITEM) {\r\n        page_Id = pageId.CHANNEL_ITEM;\r\n    }\r\n\r\n    return { page_Id }\r\n};\r\n\r\nconst PartyItems = (props) => {\r\n    const history = useHistory();\r\n    const dispatch = useDispatch();\r\n    const [subPageMode] = useState(history.location.pathname)\r\n    const [pageMode, setPageMode] = useState(mode.defaultsave);\r\n    const [modalCss, setModalCss] = useState(false);\r\n    const [userPageAccessState, setUserAccState] = useState(\"\");\r\n    const [searchQuery, setSearchQuery] = useState(\"\");\r\n\r\n\r\n    const [page_id] = useState(() => initialState(history).page_Id)\r\n    const [partyIdSelect, setPartyIdSelect] = useState({ value: _cfunc.loginSelectedPartyID() })\r\n    const [channelTypeSelect, setChannelTypeSelect] = useState('');\r\n\r\n    const location = { ...history.location };\r\n    const hasShowloction = location.hasOwnProperty(mode.editValue);\r\n    const hasShowModal = props.hasOwnProperty(mode.editValue);\r\n\r\n    const {\r\n        postMsg,\r\n        pageField,\r\n        tableList,\r\n        saveBtnloading,\r\n        GoBtnlistloading,\r\n        userAccess,\r\n        PartyTypes,\r\n        viewBtnLoading\r\n    } = useSelector((state) => ({\r\n        saveBtnloading: state.PartyItemsReducer.saveBtnloading,\r\n        GoBtnlistloading: state.PartyItemsReducer.partyItemListLoading,\r\n        postMsg: state.PartyItemsReducer.postMsg,\r\n        tableList: state.PartyItemsReducer.partyItem,\r\n        userAccess: state.Login.RoleAccessUpdateData,\r\n        pageField: state.CommonPageFieldReducer.pageField,\r\n        PartyTypes: state.PartyTypeReducer.ListData,\r\n        viewBtnLoading: state.PartyItemsReducer.channeItemViewBtnLoading,\r\n    }));\r\n\r\n    useEffect(() => {\r\n\r\n        dispatch(commonPageFieldSuccess(null));\r\n        dispatch(commonPageField(page_id));\r\n        dispatch(getPartyTypelist());\r\n\r\n        if (!(_cfunc.loginSelectedPartyID() === 0) && !(hasShowloction || hasShowModal)) {\r\n            goButtonHandler()\r\n        }\r\n        return () => {\r\n            dispatch(getPartyTypelistSuccess([]));\r\n            dispatch(goButtonPartyItemAddPageSuccess([]));\r\n\r\n        }\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        let userAcc = null;\r\n        let locationPath = location.pathname;\r\n\r\n        if (hasShowModal) {\r\n            locationPath = props.masterPath;\r\n        }\r\n\r\n        userAcc = userAccess.find((inx) => {\r\n            return `/${inx.ActualPagePath}` === locationPath;\r\n        });\r\n\r\n        if (userAcc) {\r\n            setUserAccState(userAcc);\r\n            if (!props.isAssing) {\r\n                breadcrumbReturnFunc({ dispatch, userAcc });\r\n            }\r\n        }\r\n    }, [userAccess]);\r\n\r\n    useEffect(() => {\r\n\r\n        if (hasShowloction || hasShowModal) {\r\n            let hasEditVal = null;\r\n            if (hasShowModal) {\r\n                hasEditVal = props.editValue;\r\n                setPageMode(props.pageMode);\r\n                setModalCss(true);\r\n            } else if (hasShowloction) {\r\n                setPageMode(location.pageMode);\r\n                hasEditVal = location.editValue;\r\n            }\r\n            if (hasEditVal) {\r\n                const { Party, PartyName, PartyItem = [] } = hasEditVal;\r\n                const convArr = PartyItem.map((item) => {\r\n                    item.selectCheck = false;\r\n                    if (item.Party > 0) {\r\n                        item.selectCheck = true;\r\n                    }\r\n                    return item;\r\n                });\r\n                setPartyIdSelect({ value: Party, label: PartyName })\r\n                dispatch(goButtonPartyItemAddPageSuccess(convArr));\r\n                dispatch(Breadcrumb_inputName(PartyName));\r\n            }\r\n            dispatch(editPartyItemIDSuccess({ Status: false }));\r\n        }\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (postMsg.Status === true && postMsg.StatusCode === 200) {\r\n            dispatch(savePartyItemsActionSuccess({ Status: false }));\r\n            dispatch(Breadcrumb_inputName(\"\"));\r\n            if (pageMode === mode.assingLink) {\r\n                customAlert({\r\n                    Type: 1,\r\n                    Message: postMsg.Message,\r\n                });\r\n                props.isOpenModal(false);\r\n            } else {\r\n                customAlert({\r\n                    Type: 1,\r\n                    Message: postMsg.Message,\r\n                });\r\n            }\r\n        } else if (postMsg.Status === true) {\r\n            dispatch(savePartyItemsActionSuccess({ Status: false }));\r\n            customAlert({\r\n                Type: 3,\r\n                Message: JSON.stringify(postMsg.Message),\r\n            });\r\n        }\r\n    }, [postMsg]);\r\n\r\n    useEffect(() => _cfunc.tableInputArrowUpDounFunc(\"#table_Arrow\"), [tableList]);\r\n\r\n    const channelDropdownOptions = useMemo(() => {\r\n        return PartyTypes.map(item => ({ value: item.id, label: item.Name }))\r\n    }, [PartyTypes]);\r\n\r\n    mySearchProps({\r\n        onSearch: (text) => {\r\n            setSearchQuery(text);\r\n        },\r\n    });\r\n\r\n    const groupWiseItemArray = useMemo(() => {\r\n        const groupItemsByGroup = (items) => {\r\n\r\n            const groupedItems = items.reduce((result, item) => {\r\n                const { GroupName, ...rest } = item;\r\n                if (!result[GroupName]) {\r\n                    result[GroupName] = [];\r\n                }\r\n                result[GroupName].push(rest);\r\n                return result;\r\n            }, {});\r\n            return Object.entries(groupedItems).map(([group, items]) => ({ group, items, })\r\n            );\r\n        };\r\n        return groupItemsByGroup(tableList);\r\n    }, [tableList]);\r\n\r\n    const filterdItemWise_tableData = useMemo(() => {\r\n        return groupWiseItemArray\r\n            .map(({ items, ...rest }) => ({\r\n                ...rest,\r\n                items: items.filter((item) => {\r\n                    return (\r\n                        item.ItemName.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n                        String(item.Item).toLowerCase().includes(searchQuery.toLowerCase())\r\n                    );\r\n                }),\r\n            }))\r\n            .filter((row) => row.items.length > 0);\r\n    }, [searchQuery, groupWiseItemArray]);\r\n\r\n    const tableColumns = [\r\n        {\r\n            text: \"Item ID\",\r\n            dataField: \"Item\",\r\n            sort: true,\r\n            style: {\r\n                width: \"100px\",\r\n            },\r\n        },\r\n        {\r\n            text: \"Item Name\",\r\n            dataField: \"ItemName\",\r\n            sort: true,\r\n            style: {\r\n                width: \"700px\",\r\n            },\r\n        },\r\n        {\r\n            text: \"View\",\r\n            dataField: \"\",\r\n            hidden: (subPageMode === url.PARTYITEM),\r\n            formatExtraData: { viewBtnLoading },\r\n            formatter: (cell, row, __, { viewBtnLoading }) => {\r\n                return <div >\r\n                    <C_Button\r\n                        className={vieBtnCss}\r\n                        loading={(viewBtnLoading === row.Item) && true}\r\n                        spinnerColor='white'\r\n                        onClick={() => {\r\n                            const jsonBody = JSON.stringify({\r\n                                \"Item\": row.Item,\r\n                                \"PartyType\": channelTypeSelect.value,\r\n                            })\r\n                            dispatch(channalItemViewDetailAction({ jsonBody, btnId: row.Item }))\r\n                        }}><i className=\"bx bxs-show font-size-16\" /></C_Button>\r\n                </div>\r\n            }\r\n\r\n        },\r\n    ];\r\n\r\n    function goButtonHandler(event) {\r\n\r\n        try {\r\n            event?.persist();// Call event.persist() to remove the synthetic event from the pool\r\n\r\n            if ((_cfunc.loginSelectedPartyID() === 0 && !(subPageMode === url.CHANNEL_ITEM))) {\r\n                customAlert({ Type: 3, Message: \"Please Select Party\" });\r\n                return;\r\n            };\r\n            const jsonBody = {\r\n                ..._cfunc.loginJsonBody(),\r\n                PartyID: _cfunc.loginSelectedPartyID(),\r\n                PartyTypeID: channelTypeSelect.value\r\n            };\r\n            dispatch(goButtonPartyItemAddPage({ jsonBody, subPageMode }));\r\n        }\r\n        catch (error) { }\r\n        return\r\n    };\r\n\r\n    function partyOnChngeButtonHandler() {\r\n        dispatch(goButtonPartyItemAddPageSuccess([]));\r\n    }\r\n\r\n    const rowSelected = (tableArray) => {\r\n        return tableArray.map((index) => (index.selectCheck && index.Item));\r\n    };\r\n    const nonSelectedRow = (tableArray) => {\r\n        var noSelectedIds = [];\r\n        if (subPageMode === url.CHANNEL_ITEM) {\r\n            noSelectedIds = tableArray\r\n                .filter(row => (row.InPartyItem == true))\r\n                .map(row => row.Item);\r\n        }else if (subPageMode === url.PARTYITEM) {\r\n                noSelectedIds = tableArray\r\n                    .filter(row => (row.InStock == true))\r\n                    .map(row => row.Item);\r\n        }\r\n        return noSelectedIds;\r\n    };\r\n\r\n    const SaveHandler = (event) => {\r\n        event.preventDefault();\r\n\r\n        const selectedItems = groupWiseItemArray.flatMap(group => group.items.filter(item => item.selectCheck));\r\n\r\n        if (selectedItems.length === 0) {\r\n            customAlert({\r\n                Type: 4,\r\n                Message: \"Select Atleast One Item\",\r\n            });\r\n            return;\r\n        }\r\n        try {\r\n            const jsonBody = JSON.stringify(selectedItems.map((index) => ({\r\n                Item: index.Item,\r\n                // Party: partyIdSelect.value,\r\n                Party: (pageMode === mode.assingLink) ? partyIdSelect.value : _cfunc.loginSelectedPartyID(),\r\n                PartyType: channelTypeSelect.value\r\n            })));\r\n            dispatch(savePartyItemsAction({ jsonBody, subPageMode }));\r\n        } catch (w) { }\r\n    };\r\n\r\n    const AdminDivsionRoleDropdown = () => {\r\n        if (subPageMode === url.PARTYITEM) {\r\n            return (\r\n                <PartyDropdown_Common pageMode={pageMode}\r\n                    goBtnLoading={GoBtnlistloading}\r\n                    goButtonHandler={goButtonHandler}\r\n                    changeButtonHandler={partyOnChngeButtonHandler}\r\n                />\r\n            )\r\n        }\r\n        return null\r\n    };\r\n    const ChannelTypeDropdown = () => {\r\n        if (subPageMode === url.CHANNEL_ITEM) {\r\n            return (\r\n                <div className=\"px-2 c_card_header text-black mb-1\">\r\n                    <div className=\"row pt-2\">\r\n                        <Col sm=\"5\">\r\n                            <FormGroup className=\"row\">\r\n                                <Label className=\"col-sm-5 p-2\" style={{ width: \"120px\" }}>\r\n                                    Channel Type\r\n                                </Label>\r\n                                <Col sm=\"6\">\r\n                                    <C_Select\r\n                                        name=\"Name\"\r\n                                        value={channelTypeSelect}\r\n                                        isDisabled={(filterdItemWise_tableData.length > 0)}\r\n                                        className=\"react-dropdown\"\r\n                                        classNamePrefix=\"dropdown\"\r\n                                        styles={{\r\n                                            menu: (provided) => ({ ...provided, zIndex: 2 }),\r\n                                        }}\r\n                                        options={channelDropdownOptions}\r\n                                        onChange={(e) => { setChannelTypeSelect(e) }}\r\n                                    />\r\n                                </Col>\r\n                            </FormGroup>\r\n                        </Col>\r\n\r\n                        <Col sm=\"1\">\r\n                            {((filterdItemWise_tableData.length === 0)) ? (\r\n                                <C_Button\r\n                                    type=\"button\"\r\n                                    loading={GoBtnlistloading}\r\n                                    className=\"btn btn-outline-primary border-1 font-size-12 text-center\"\r\n                                    onClick={(e) => {\r\n                                        goButtonHandler(e)\r\n                                    }}\r\n                                >\r\n                                    Select\r\n                                </C_Button>\r\n                            ) : (\r\n                                <C_Button\r\n                                    type=\"button\"\r\n                                    spinnerColor={\"info\"}\r\n                                    className=\"btn btn-outline-info border-1 font-size-12 \"\r\n                                    onClick={() => { dispatch(goButtonPartyItemAddPageSuccess([])); }}\r\n\r\n                                >Change</C_Button>\r\n                            )}\r\n                        </Col>\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n        return null\r\n    };\r\n    let IsEditMode_Css = \"\";\r\n    if (modalCss || pageMode === mode.dropdownAdd) {\r\n        IsEditMode_Css = \"-5.5%\";\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <PageLoadingSpinner isLoading={(GoBtnlistloading || !pageField)} />\r\n            {userPageAccessState && (\r\n                <div className=\"page-content\" style={{ marginTop: IsEditMode_Css }}>\r\n                    <Container fluid>\r\n                        <MetaTags>{metaTagLabel(userPageAccessState)}</MetaTags>\r\n\r\n                        <AdminDivsionRoleDropdown />\r\n                        <ChannelViewDetails />\r\n\r\n                        <Card className=\"text-black\">\r\n                            <CardHeader className=\"card-header   text-black c_card_header\">\r\n                                <h4 className=\"card-title text-black\">\r\n                                    {userPageAccessState.PageDescription}\r\n                                </h4>\r\n                                <p className=\"card-title-desc text-black\">\r\n                                    {userPageAccessState.PageDescriptionDetails}\r\n                                </p>\r\n                            </CardHeader>\r\n\r\n                            <CardBody style={{ backgroundColor: \"#whitesmoke\" }}>\r\n\r\n                                <ChannelTypeDropdown />\r\n\r\n                                {filterdItemWise_tableData.length > 0 ? (\r\n                                    <>\r\n                                        {filterdItemWise_tableData.map((i, key) => (\r\n                                            <div key={i.group}>\r\n                                                <Label\r\n                                                    style={{\r\n                                                        background: \"#efefef\",\r\n                                                        padding: \"7px 10px 0px 8px\",\r\n                                                        borderRadius: \"3px\",\r\n                                                    }}\r\n                                                >\r\n                                                    <h6> Group : {i.group ? i.group : `No Group Assign`}</h6>\r\n                                                </Label>\r\n                                                <div className=\"table\">\r\n                                                    <BootstrapTable\r\n                                                        keyField={\"Item\"}\r\n                                                        key={`table-key-${i.group}-${key}`}\r\n                                                        data={i.items}\r\n                                                        columns={tableColumns}\r\n                                                        Item=\"table_Arrow\"\r\n                                                        selectRow={selectAllCheck({\r\n                                                            rowSelected: rowSelected(i.items),\r\n                                                            nonSelectable: nonSelectedRow(i.items),\r\n                                                            disabledWithMsg:subPageMode==url.PARTYITEM&&\"In-stock\",\r\n                                                            bgColor: '',\r\n                                                        })}\r\n                                                        noDataIndication={\r\n                                                            <div className=\"text-danger text-center \">\r\n                                                                Items Not available\r\n                                                            </div>\r\n                                                        }\r\n                                                        classes={\"table align-middle table-nowrap table-hover\"}\r\n                                                    />\r\n                                                </div>\r\n                                            </div>\r\n                                        ))}\r\n                                    </>\r\n                                ) : (\r\n                                    <>\r\n                                        <BootstrapTable\r\n                                            keyField={\"Item\"}\r\n                                            data={[]}\r\n                                            columns={tableColumns}\r\n                                            noDataIndication={\r\n                                                <div className=\"text-danger text-center \">\r\n                                                    Items Not available\r\n                                                </div>\r\n                                            }\r\n                                        />\r\n                                    </>\r\n                                )}\r\n\r\n                                <div className=\"row save1\">\r\n                                    <SaveButton\r\n                                        loading={saveBtnloading}\r\n                                        pageMode={pageMode}\r\n                                        userAcc={userPageAccessState}\r\n                                        module={\"PartyItems\"}\r\n                                        onClick={SaveHandler}\r\n                                    />\r\n                                </div>\r\n                            </CardBody>\r\n                        </Card>\r\n                    </Container>\r\n                </div>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default PartyItems;\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\PartySubPartyPages\\PartySubParty.js",["3220","3221","3222","3223","3224","3225","3226","3227","3228","3229"],"import React, { useEffect, useState } from \"react\";\r\nimport {\r\n    Button,\r\n    Card,\r\n    CardBody,\r\n    CardHeader,\r\n    Col,\r\n    Container,\r\n    FormGroup,\r\n    Input,\r\n    Label,\r\n    Row,\r\n    Table,\r\n} from \"reactstrap\";\r\nimport Select from \"react-select\";\r\nimport { MetaTags } from \"react-meta-tags\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n    editPartySubPartySuccess,\r\n    savePartySubParty,\r\n    savePartySubPartySuccess,\r\n    updatePartySubParty,\r\n    updatePartySubPartySuccess,\r\n    getPartySubParty_For_party_dropdown,\r\n    deleteIDForMasterPage,\r\n} from \"../../../store/Administrator/PartySubPartyRedux/action\";\r\nimport {\r\n    Breadcrumb_inputName,\r\n    commonPageField,\r\n    commonPageFieldSuccess\r\n} from \"../../../store/actions\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { SaveButton } from \"../../../components/Common/CommonButton\";\r\nimport {\r\n    comAddPageFieldFunc,\r\n    formValid,\r\n    initialFiledFunc,\r\n    onChangeSelect,\r\n} from \"../../../components/Common/validationFunction\";\r\nimport {\r\n    breadcrumbReturnFunc,\r\n    btnIsDissablefunc,\r\n    loginCompanyID,\r\n    loginUserID,\r\n    metaTagLabel\r\n} from \"../../../components/Common/CommonFunction\";\r\nimport * as url from \"../../../routes/route_url\";\r\nimport * as pageId from \"../../../routes/allPageID\"\r\nimport * as mode from \"../../../routes/PageMode\"\r\nimport { Retailer_List, SSDD_List_under_Company, } from \"../../../store/CommonAPI/SupplierRedux/actions\";\r\nimport { customAlert } from \"../../../CustomAlert/ConfirmDialog\";\r\nimport { Tbody, Thead } from \"react-super-responsive-table\";\r\n\r\nconst PartySubParty = (props) => {\r\n\r\n    const dispatch = useDispatch();\r\n    const history = useHistory()\r\n\r\n    const fileds = {\r\n        id: \"\",\r\n        PartyName: \"\",\r\n        Subparty: \"\",\r\n        IsRetailerTransfer: false,\r\n        SSDD: \"\",\r\n        Retailer: \"\"\r\n    }\r\n\r\n    const [state, setState] = useState(() => initialFiledFunc(fileds))\r\n\r\n    const [pageMode, setPageMode] = useState(mode.defaultsave);\r\n    const [modalCss, setModalCss] = useState(false);\r\n    const [partyTableArr, setPartyTableArr] = useState([]);\r\n    const [userPageAccessState, setUserPageAccessState] = useState(123);\r\n    const [editCreatedBy, seteditCreatedBy] = useState(\"\");\r\n\r\n    //Access redux store Data /  'save_ModuleSuccess' action data\r\n    const { postMsg,\r\n        SSDD_List,\r\n        RetailerList,\r\n        updateMsg,\r\n        pageField,\r\n        PartySubParty,\r\n        saveBtnloading,\r\n        userAccess } = useSelector((state) => ({\r\n            saveBtnloading: state.PartySubPartyReducer.saveBtnloading,\r\n            postMsg: state.PartySubPartyReducer.postMsg,\r\n            SSDD_List: state.CommonAPI_Reducer.SSDD_List,\r\n            RetailerList: state.CommonAPI_Reducer.RetailerList,\r\n            updateMsg: state.PartySubPartyReducer.updateMsg,\r\n            pageField: state.CommonPageFieldReducer.pageField,\r\n            userAccess: state.Login.RoleAccessUpdateData,\r\n            PartySubParty: state.PartySubPartyReducer.PartySubParty,\r\n        }));\r\n\r\n    useEffect(() => {\r\n        const page_Id = pageId.PARTY_SUB_PARTY\r\n        dispatch(commonPageFieldSuccess(null));\r\n        dispatch(commonPageField(page_Id))\r\n        dispatch(SSDD_List_under_Company());\r\n\r\n    }, []);\r\n\r\n    const values = { ...state.values }\r\n    const { isError } = state;\r\n    const { fieldLabel } = state;\r\n\r\n    const location = { ...history.location }\r\n    const hasShowloction = location.hasOwnProperty(mode.editValue)\r\n    const hasShowModal = props.hasOwnProperty(mode.editValue)\r\n\r\n    // userAccess useEffect\r\n    useEffect(() => {\r\n        let userAcc = null;\r\n        let locationPath = location.pathname;\r\n\r\n        if (hasShowModal) {\r\n            locationPath = props.masterPath;\r\n        };\r\n\r\n        userAcc = userAccess.find((inx) => {\r\n            return (`/${inx.ActualPagePath}` === locationPath)\r\n        })\r\n\r\n        if (userAcc) {\r\n            setUserPageAccessState(userAcc)\r\n            breadcrumbReturnFunc({ dispatch, userAcc });\r\n        };\r\n    }, [userAccess])\r\n\r\n    // This UseEffect 'SetEdit' data and 'autoFocus' while this Component load First Time.\r\n    useEffect(() => {\r\n\r\n        if ((hasShowloction || hasShowModal)) {\r\n\r\n            let hasEditVal = null\r\n            if (hasShowloction) {\r\n                setPageMode(location.pageMode)\r\n                hasEditVal = location.editValue\r\n            }\r\n            else if (hasShowModal) {\r\n                hasEditVal = props.editValue\r\n                setPageMode(props.pageMode)\r\n                setModalCss(true)\r\n            }\r\n\r\n            if (hasEditVal) {\r\n                const { id, Party, Division } = hasEditVal\r\n                const { values, fieldLabel, hasValid, required, isError } = { ...state }\r\n\r\n                hasValid.Party.valid = true;\r\n                hasValid.Division.valid = true;\r\n\r\n                values.id = id\r\n                values.Party = { label: Party, value: Party };\r\n                values.Division = { label: Division, value: Division };\r\n\r\n                setState({ values, fieldLabel, hasValid, required, isError })\r\n                dispatch(Breadcrumb_inputName(hasEditVal.Party))\r\n                seteditCreatedBy(hasEditVal.CreatedBy)\r\n            }\r\n            dispatch(editPartySubPartySuccess({ Status: false }))\r\n        }\r\n    }, [])\r\n\r\n    useEffect(async () => {\r\n        if ((postMsg.Status === true) && (postMsg.StatusCode === 200) && !(pageMode === mode.dropdownAdd)) {\r\n            dispatch(savePartySubPartySuccess({ Status: false }))\r\n            dispatch(Breadcrumb_inputName(''))\r\n            if (pageMode === mode.dropdownAdd) {\r\n                customAlert({\r\n                    Type: 1,\r\n                    Message: postMsg.Message,\r\n                })\r\n            }\r\n            else {\r\n                let isPermission = await customAlert({\r\n                    Type: 1,\r\n                    Status: true,\r\n                    Message: postMsg.Message,\r\n                })\r\n                if (isPermission) {\r\n                    history.push({ pathname: url.PARTY_SUB_PARTY_lIST })\r\n                }\r\n            }\r\n        }\r\n        else if ((postMsg.Status === true) && !(pageMode === mode.dropdownAdd)) {\r\n            dispatch(savePartySubPartySuccess({ Status: false }))\r\n            customAlert({\r\n                Type: 4,\r\n                Message: JSON.stringify(postMsg.Message),\r\n            })\r\n        }\r\n    }, [postMsg])\r\n\r\n    useEffect(() => {\r\n        if (updateMsg.Status === true && updateMsg.StatusCode === 200 && !modalCss) {\r\n            history.push({\r\n                pathname: url.PARTY_SUB_PARTY_lIST,\r\n            })\r\n        } else if (updateMsg.Status === true && !modalCss) {\r\n            dispatch(updatePartySubPartySuccess({ Status: false }));\r\n            customAlert({\r\n                Type: 3,\r\n                Message: JSON.stringify(updateMsg.Message),\r\n            })\r\n        }\r\n    }, [updateMsg, modalCss]);\r\n\r\n    useEffect(() => {\r\n\r\n        if (pageField) {\r\n            const fieldArr = pageField.PageFieldMaster\r\n            comAddPageFieldFunc({ state, setState, fieldArr })\r\n        }\r\n    }, [pageField])\r\n\r\n    useEffect(() => {\r\n\r\n        if (values.PartyName.value > 0) {\r\n            const newArr = (PartySubParty.map(i => ({\r\n                value: i.SubParty,\r\n                label: i.SubPartyName,\r\n                IsVendor: i.IsVendor,\r\n                Creditlimit: i.Creditlimit,\r\n                Route: i.Route\r\n            })))\r\n            setPartyTableArr(newArr)\r\n        }\r\n\r\n    }, [PartySubParty]);\r\n\r\n    const PartyDropdown_Options = SSDD_List.map(i => ({\r\n        value: i.id,\r\n        label: i.Name\r\n    }));\r\n\r\n    const RetailerDropdown_Options = RetailerList.map(i => ({\r\n        value: i.id,\r\n        label: i.Name,\r\n        Creditlimit: null,\r\n        Route: null\r\n    }));\r\n\r\n    function handllerParty(e) {\r\n        dispatch(getPartySubParty_For_party_dropdown(e.value));\r\n        setState((i) => {\r\n            const a = { ...i }\r\n            a.PartyName = e\r\n            a.values.Subparty = '';\r\n            a.values.SSDD = '';\r\n            a.hasValid.Subparty.valid = true\r\n            a.hasValid.SSDD.valid = true\r\n            return a\r\n        })\r\n    }\r\n\r\n    function IsRetailerTransfer(e) {\r\n        setState((i) => {\r\n            const a = { ...i }\r\n            a.values.IsRetailerTransfer = e.target.checked;\r\n            a.values.Subparty = '';\r\n            a.hasValid.Subparty.valid = true\r\n            a.hasValid.IsRetailerTransfer.valid = true\r\n            return a\r\n        })\r\n        if (values.IsRetailerTransfer) {\r\n            setState((i) => {\r\n                const a = { ...i }\r\n                a.values.Subparty = '';\r\n                a.values.SSDD = '';\r\n                a.hasValid.Subparty.valid = true\r\n                a.hasValid.SSDD.valid = true\r\n                return a\r\n            })\r\n        }\r\n    }\r\n\r\n    function handllerSub_Party(e) {\r\n        setState((i) => {\r\n            const a = { ...i }\r\n            a.values.Subparty = e;\r\n            a.hasValid.Subparty.valid = true\r\n            return a\r\n        })\r\n    }\r\n\r\n    function handller_SSDD(e) {\r\n        const jsonBody = JSON.stringify({\r\n            Type: 1,\r\n            PartyID: e.value,\r\n            CompanyID: loginCompanyID()\r\n        });\r\n        dispatch(Retailer_List(jsonBody));\r\n    }\r\n\r\n    // Role Table Validation\r\n    function AddPartyHandler() {\r\n\r\n        const find = partyTableArr.find((element) => {\r\n            return element.value === values.Subparty.value\r\n        });\r\n\r\n        if (values.PartyName === '') {\r\n            customAlert({\r\n                Type: 3,\r\n                Message: \"Select Party\",\r\n            })\r\n        }\r\n        else if ((values.Subparty === '')) {\r\n            const msg = (values.IsRetailerTransfer) ? \"Select Retailer\" : \"Select Sub-Party\"\r\n            customAlert({\r\n                Type: 3,\r\n                Message: msg,\r\n            })\r\n        }\r\n        else if (find === undefined) {\r\n            setPartyTableArr([...partyTableArr, values.Subparty]);\r\n        }\r\n        else {\r\n            customAlert({\r\n                Type: 3,\r\n                Message: \"Party Already Exist\",\r\n            })\r\n        }\r\n    }\r\n\r\n    const pagesListColumns = [\r\n        {\r\n            text: \"SubPartyName\",\r\n            dataField: \"label\",\r\n        },\r\n        {\r\n            text: \"Action \",\r\n            dataField: \"\",\r\n            formatter: (cellContent, Party, k) => {\r\n                return (<>\r\n                    <div style={{ justifyContent: 'center' }} >\r\n                        <Col>\r\n                            <FormGroup className=\" col col-sm-4 \">\r\n                                <Button\r\n                                    id={\"deleteid\"}\r\n                                    type=\"button\"\r\n                                    className=\"badge badge-soft-danger font-size-12 btn btn-danger waves-effect waves-light w-xxs border border-light\"\r\n                                    data-mdb-toggle=\"tooltip\" data-mdb-placement=\"top\" title='Delete MRP'\r\n                                    onClick={() => { dispatch(deleteIDForMasterPage(Party.value)) }}\r\n                                // onClick={() => { deleteHandler(Party.value) }}\r\n                                >\r\n                                    <i className=\"mdi mdi-delete font-size-18\"></i>\r\n                                </Button>\r\n                            </FormGroup>\r\n                        </Col>\r\n                    </div></>)\r\n            }\r\n        },\r\n    ];\r\n\r\n    const pageOptions = {\r\n        sizePerPage: 8,\r\n        totalSize: partyTableArr.length,\r\n        custom: true,\r\n    };\r\n\r\n    const onDeleteHandeler = (id) => {\r\n        var filerData = partyTableArr.filter((index) => {\r\n            return !(index.value === id);\r\n        });\r\n        setPartyTableArr(filerData)\r\n    };\r\n\r\n    const tableRows = partyTableArr.map((info) => {\r\n        return (\r\n            <tr>\r\n                <td>{info.label}</td>\r\n                <td>\r\n                    <Button\r\n                        className=\"badge badge-soft-danger font-size-12 btn btn-danger waves-effect waves-light w-xxs border border-light\"\r\n                        data-mdb-toggle=\"tooltip\"\r\n                        data-mdb-placement=\"top\"\r\n                        title=\"Delete Party Type\"\r\n                        onClick={(e) => {\r\n                            onDeleteHandeler(info.value);\r\n                        }}\r\n                    >\r\n                        <i className=\"mdi mdi-delete font-size-18\"></i>\r\n                    </Button>\r\n                </td>\r\n            </tr>\r\n        );\r\n    });\r\n\r\n    const SaveHandler = async (event) => {\r\n\r\n        event.preventDefault();\r\n        const btnId = event.target.id;\r\n\r\n        try {\r\n            if (formValid(state, setState)) {\r\n                btnIsDissablefunc({ btnId, state: true })\r\n                const arr = partyTableArr.map(i => {\r\n\r\n                    const normal = {\r\n                        Party: values.PartyName.value,\r\n                        SubParty: i.value,\r\n                        PartyID: values.PartyName.value,\r\n\r\n                    }\r\n                    const isvendor = {\r\n                        Party: i.value,\r\n                        SubParty: values.PartyName.value,\r\n                        PartyID: values.PartyName.value,\r\n                    }\r\n\r\n                    const ramain = {\r\n                        CreatedBy: loginUserID(),\r\n                        UpdatedBy: loginUserID(),\r\n                        Creditlimit: i.Creditlimit,\r\n                        Route: i.Route\r\n                    }\r\n\r\n                    if (i.IsVendor === true) {\r\n                        return { ...isvendor, ...ramain }\r\n                    }\r\n                    else {\r\n                        return { ...normal, ...ramain }\r\n                    }\r\n                })\r\n\r\n                const jsonBody = JSON.stringify(arr);\r\n                if (pageMode === mode.edit) {\r\n                    dispatch(updatePartySubParty({ jsonBody, updateId: values.id, btnId }));\r\n                }\r\n                else {\r\n                    dispatch(savePartySubParty({ jsonBody, btnId }));\r\n                }\r\n            }\r\n        } catch (e) { btnIsDissablefunc({ btnId, state: false }) }\r\n    };\r\n\r\n\r\n    // IsEditMode_Css is use of module Edit_mode (reduce page-content marging)\r\n    var IsEditMode_Css = ''\r\n    if ((pageMode === mode.edit) || (pageMode === mode.copy) || (pageMode === mode.dropdownAdd)) { IsEditMode_Css = \"-5.5%\" };\r\n\r\n    if (!(userPageAccessState === '')) {\r\n        return (\r\n            <React.Fragment>\r\n                <div className=\"page-content\" style={{ marginTop: IsEditMode_Css }}>\r\n                    <Container fluid>\r\n                        <MetaTags>{metaTagLabel(userPageAccessState)}</MetaTags>\r\n\r\n                        <Card className=\"text-black\">\r\n                            <CardHeader className=\"card-header   text-black c_card_header\" >\r\n                                <h4 className=\"card-title text-black\">{userPageAccessState.PageDescription}</h4>\r\n                                <p className=\"card-title-desc text-black\">{userPageAccessState.PageDescriptionDetails}</p>\r\n                            </CardHeader>\r\n\r\n                            <CardBody className=\" vh-10 0 text-black\" style={{ backgroundColor: \"#whitesmoke\" }} >\r\n                                <form onSubmit={SaveHandler} noValidate>\r\n                                    <Row className=\"\">\r\n                                        <Col md={12}>\r\n                                            <Card>\r\n                                                <CardBody className=\"c_card_body\">\r\n                                                    <Row className=\"mb-3\">\r\n                                                        <Col sm=\"4\">\r\n                                                            <FormGroup className=\"mb-1\">\r\n                                                                <Label htmlFor=\"validationCustom01\">{fieldLabel.PartyName} </Label>\r\n                                                                <Col sm={12}>\r\n                                                                    <Select\r\n                                                                        name=\"PartyName\"\r\n                                                                        value={values.PartyName}\r\n                                                                        isSearchable={true}\r\n                                                                        autoFocus={true}\r\n                                                                        className=\"react-dropdown\"\r\n                                                                        classNamePrefix=\"dropdown\"\r\n                                                                        options={PartyDropdown_Options}\r\n                                                                        onChange={(hasSelect, evn) => {\r\n                                                                            onChangeSelect({ hasSelect, evn, state, setState, })\r\n                                                                            handllerParty(hasSelect)\r\n                                                                        }}\r\n                                                                        styles={{\r\n                                                                            menu: provided => ({ ...provided, zIndex: 2 })\r\n                                                                        }}\r\n                                                                    />\r\n                                                                    {isError.PartyName.length > 0 && (\r\n                                                                        <span className=\"text-danger f-8\"><small>{isError.PartyName}</small></span>\r\n                                                                    )}\r\n                                                                </Col>\r\n                                                            </FormGroup>\r\n                                                        </Col>\r\n\r\n                                                        <Col md={1}></Col>\r\n                                                        <FormGroup className=\"mt-4 col col-sm-5\">\r\n                                                            <Row className=\"justify-content-md-left\">\r\n                                                                <Label htmlFor=\"horizontal-firstname-input\"\r\n                                                                    className=\"col-sm-5 col-form-label\">{fieldLabel.IsRetailerTransfer}</Label>\r\n                                                                <Col md={2} style={{ marginTop: '9px' }} >\r\n                                                                    <div className=\"form-check form-switch form-switch-md \">\r\n                                                                        <Input type=\"checkbox\" className=\"form-check-input\"\r\n                                                                            checked={values.IsRetailerTransfer}\r\n                                                                            name=\"IsRetailerTransfer\"\r\n                                                                            onChange={(e) => {\r\n                                                                                IsRetailerTransfer(e)\r\n                                                                            }}\r\n                                                                        />\r\n                                                                    </div>\r\n                                                                </Col>\r\n                                                            </Row>\r\n                                                        </FormGroup>\r\n                                                    </Row>\r\n\r\n                                                    {(values.IsRetailerTransfer) ?\r\n                                                        <Row className=\"mb-3\">\r\n                                                            <Col sm=\"4\" >\r\n                                                                <FormGroup>\r\n                                                                    <Label htmlFor=\"validationCustom01\"> {fieldLabel.SSDD}</Label>\r\n                                                                    <Select\r\n                                                                        name=\"SSDD\"\r\n                                                                        value={values.SSDD}\r\n                                                                        isSearchable={true}\r\n                                                                        className=\"react-dropdown\"\r\n                                                                        classNamePrefix=\"dropdown\"\r\n                                                                        options={PartyDropdown_Options}\r\n                                                                        onChange={(hasSelect, evn) => {\r\n                                                                            onChangeSelect({ hasSelect, evn, state, setState, })\r\n                                                                            handller_SSDD(hasSelect)\r\n                                                                        }}\r\n                                                                        styles={{\r\n                                                                            menu: provided => ({ ...provided, zIndex: 2 })\r\n                                                                        }}\r\n                                                                    />\r\n\r\n                                                                </FormGroup>\r\n                                                            </Col>\r\n                                                        </Row>\r\n                                                        : null}\r\n\r\n                                                    <Row className=\"\">\r\n                                                        <Col sm=\"4\">\r\n                                                            <FormGroup>\r\n                                                                <Label >{(values.IsRetailerTransfer) ? fieldLabel.Retailer : fieldLabel.Subparty}</Label>\r\n                                                                <Select\r\n                                                                    name=\"Subparty\"\r\n                                                                    value={values.Subparty}\r\n                                                                    isSearchable={true}\r\n                                                                    className=\"react-dropdown\"\r\n                                                                    classNamePrefix=\"dropdown\"\r\n                                                                    options={(values.IsRetailerTransfer) ? RetailerDropdown_Options : PartyDropdown_Options}\r\n                                                                    onChange={(hasSelect, evn) => {\r\n                                                                        onChangeSelect({ hasSelect, evn, state, setState, })\r\n                                                                        handllerSub_Party(hasSelect)\r\n                                                                    }}\r\n                                                                    styles={{\r\n                                                                        menu: provided => ({ ...provided, zIndex: 2 })\r\n                                                                    }}\r\n                                                                />\r\n                                                            </FormGroup>\r\n                                                        </Col>\r\n\r\n                                                        <Col sm={2} style={{ marginTop: '16px' }} >\r\n                                                            <Button\r\n                                                                type=\"button\"\r\n                                                                className=\" button_add\"\r\n                                                                color=\"btn btn-outline-primary border-2 font-size-12\"\r\n                                                                onClick={() =>\r\n                                                                    AddPartyHandler()\r\n                                                                }\r\n                                                            >\r\n                                                                <i className=\"dripicons-plus\"></i>\r\n                                                            </Button>\r\n                                                        </Col>\r\n                                                    </Row>\r\n                                                    {/* \r\n                                                    <Row>\r\n                                                        <Col sm={3} style={{ marginTop: '28px', marginRight: \"30px\" }}>\r\n                                                            {partyTableArr.length > 0 ? (\r\n                                                                <div className=\"table\">\r\n                                                                    <Table className=\"table table-bordered  text-center\" >\r\n                                                                        <Thead>\r\n                                                                            <tr>\r\n                                                                                <th>Party</th>\r\n                                                                                <th>Action</th>\r\n                                                                            </tr>\r\n                                                                        </Thead>\r\n                                                                        <Tbody>\r\n                                                                            {partyTableArr.map((TableValue) => (\r\n                                                                                <tr>\r\n                                                                                    <td>\r\n                                                                                        {TableValue.label}\r\n                                                                                    </td>\r\n                                                                                    <td>\r\n                                                                                        <i className=\"mdi mdi-trash-can d-block text-danger font-size-20\" onClick={() => {\r\n                                                                                            deleteTableSubPartyHandler(TableValue.value)\r\n                                                                                        }} >\r\n                                                                                        </i>\r\n                                                                                    </td>\r\n                                                                                </tr>\r\n                                                                            ))}\r\n                                                                        </Tbody>\r\n                                                                    </Table>\r\n                                                                </div>\r\n                                                            ) : (\r\n                                                                <>\r\n                                                                </>\r\n                                                            )}\r\n                                                        </Col>\r\n                                                    </Row> */}\r\n\r\n                                                </CardBody>\r\n                                            </Card>\r\n\r\n\r\n\r\n                                            {/* <PaginationProvider\r\n                                                pagination={paginationFactory(pageOptions)}\r\n                                            >\r\n                                                {({ paginationProps, paginationTableProps }) => (\r\n                                                    <ToolkitProvider\r\n                                                        keyField=\"id\"\r\n                                                        data={[...partyTableArr]}\r\n                                                        columns={pagesListColumns}\r\n\r\n                                                        search\r\n                                                    >\r\n                                                        {toolkitProps => (\r\n                                                            <React.Fragment>\r\n                                                                <div className=\"table\">\r\n                                                                    <BootstrapTable\r\n                                                                        keyField={\"id\"}\r\n                                                                        bordered={true}\r\n                                                                        striped={false}\r\n                                                                        noDataIndication={<div className=\"text-danger text-center \">SubParty Not available</div>}\r\n                                                                        classes={\"table align-middle table-nowrap table-hover\"}\r\n                                                                        headerWrapperClasses={\"thead-light\"}\r\n\r\n                                                                        {...toolkitProps.baseProps}\r\n                                                                        {...paginationTableProps}\r\n                                                                    />\r\n                                                                    {countlabelFunc(toolkitProps, paginationProps, dispatch, \"MRP\")}\r\n                                                                    {mySearchProps(toolkitProps.searchProps)}\r\n                                                                </div>\r\n\r\n                                                                <Row className=\"align-items-md-center mt-30\">\r\n                                                                    <Col className=\"pagination pagination-rounded justify-content-end mb-2\">\r\n                                                                        <PaginationListStandalone\r\n                                                                            {...paginationProps}\r\n                                                                        />\r\n                                                                    </Col>\r\n                                                                </Row>\r\n                                                            </React.Fragment>\r\n                                                        )\r\n                                                        }\r\n                                                    </ToolkitProvider>\r\n                                                )\r\n                                                }\r\n\r\n                                            </PaginationProvider> */}\r\n\r\n                                            <Table className=\"table table-bordered table-hover\">\r\n                                                <Thead>\r\n                                                    <tr>\r\n                                                        <th className=\"col col-sm-3\">SubPartyName</th>\r\n                                                        <th className=\"col col-sm-3\">{\"Action\"}</th>\r\n                                                    </tr>\r\n                                                </Thead>\r\n                                                <Tbody>{tableRows}</Tbody>\r\n                                            </Table>\r\n\r\n                                            <FormGroup>\r\n                                                <Row>\r\n                                                    <Col sm={2}>\r\n                                                        <SaveButton pageMode={pageMode}\r\n                                                            loading={saveBtnloading}\r\n                                                            onClick={SaveHandler}\r\n                                                            userAcc={userPageAccessState}\r\n                                                            editCreatedBy={editCreatedBy}\r\n                                                            module={\"PartySubParty\"}\r\n                                                        />\r\n                                                    </Col>\r\n                                                </Row>\r\n                                            </FormGroup >\r\n                                        </Col>\r\n                                    </Row>\r\n                                </form>\r\n                            </CardBody>\r\n\r\n                        </Card>\r\n\r\n                    </Container>\r\n                </div>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n    else {\r\n        return (\r\n            <React.Fragment></React.Fragment>\r\n        )\r\n    }\r\n};\r\n\r\nexport default PartySubParty\r\n\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\GSTPages\\GSTMaster.js",["3230","3231","3232","3233","3234","3235","3236","3237","3238","3239","3240","3241","3242","3243","3244"],"import React, { useEffect, useState } from \"react\";\r\nimport {\r\n    Button,\r\n    Card,\r\n    CardBody,\r\n    CardHeader,\r\n    Col,\r\n    Container,\r\n    FormGroup,\r\n    Input,\r\n    Label,\r\n    Row,\r\n} from \"reactstrap\";\r\nimport { MetaTags } from \"react-meta-tags\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {\r\n    Breadcrumb_inputName,\r\n    commonPageField,\r\n    commonPageFieldSuccess,\r\n    deleteGSTId_ForMaster,\r\n    deleteGSTId_ForMaster_Success,\r\n    getGSTList,\r\n    goButtonForGST_Master,\r\n    goButtonForGST_Master_Success,\r\n    saveGSTMaster,\r\n    saveGSTMasterSuccess,\r\n} from \"../../../store/actions\";\r\nimport ToolkitProvider, { Search } from \"react-bootstrap-table2-toolkit\";\r\nimport BootstrapTable from \"react-bootstrap-table-next\";\r\nimport {\r\n    breadcrumbReturnFunc,\r\n    loginUserID,\r\n    loginCompanyID,\r\n    metaTagLabel\r\n} from \"../../../components/Common/CommonFunction\";\r\nimport * as _cfunc from \"../../../components/Common/CommonFunction\";\r\nimport { CInput, C_DatePicker, decimalRegx } from \"../../../CustomValidateForm\";\r\nimport { mode, pageId, url } from \"../../../routes\";\r\nimport { customAlert } from \"../../../CustomAlert/ConfirmDialog\";\r\nimport { comAddPageFieldFunc, initialFiledFunc, onChangeDate, resetFunction } from \"../../../components/Common/validationFunction\";\r\nimport { Go_Button, SaveButton } from \"../../../components/Common/CommonButton\";\r\nimport { mySearchProps } from \"../../../components/Common/SearchBox/MySearch\";\r\n\r\nconst GSTMaster = (props) => {\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n\r\n    const fileds = {\r\n        EffectiveDate: \"\",\r\n    }\r\n\r\n    const [state, setState] = useState(() => initialFiledFunc(fileds))\r\n\r\n    //SetState  Edit data Geting From Modules List component\r\n    const [pageMode, setPageMode] = useState(mode.defaultsave);\r\n    const [userPageAccessState, setUserAccState] = useState(\"\");\r\n    const [editCreatedBy, seteditCreatedBy] = useState(\"\");\r\n\r\n    //Access redux store Data /  'save_ModuleSuccess' action data\r\n    const { postMsg,\r\n        tableData,\r\n        deleteMessage,\r\n        userAccess,\r\n        pageField,\r\n        saveBtnloading,\r\n        listBtnLoading,\r\n    } = useSelector((state) => ({\r\n        listBtnLoading: state.GSTReducer.listBtnLoading,\r\n        saveBtnloading: state.GSTReducer.saveBtnloading,\r\n        tableData: state.GSTReducer.GSTGoButton,\r\n        deleteMessage: state.GSTReducer.deleteMsgForMaster,\r\n        postMsg: state.GSTReducer.postMsg,\r\n        userAccess: state.Login.RoleAccessUpdateData,\r\n        pageField: state.CommonPageFieldReducer.pageField\r\n    }));\r\n\r\n    const { Data = [] } = tableData\r\n\r\n    useEffect(() => {\r\n        const page_Id = pageId.GST\r\n        dispatch(commonPageFieldSuccess(null));\r\n        dispatch(commonPageField(page_Id))\r\n    }, []);\r\n\r\n    const values = { ...state.values }\r\n    const { isError } = state;\r\n    const { fieldLabel } = state;\r\n\r\n    const location = { ...history.location }\r\n    const hasShowloction = location.hasOwnProperty(mode.editValue)\r\n    const hasShowModal = props.hasOwnProperty(mode.editValue)\r\n\r\n    // userAccess useEffect\r\n    useEffect(() => {\r\n\r\n        let userAcc = null;\r\n        let locationPath = location.pathname;\r\n\r\n        if (hasShowModal) {\r\n            locationPath = props.masterPath;\r\n        };\r\n\r\n        userAcc = userAccess.find((inx) => {\r\n            return (`/${inx.ActualPagePath}` === locationPath)\r\n        })\r\n\r\n        if (userAcc) {\r\n            setUserAccState(userAcc)\r\n            breadcrumbReturnFunc({ dispatch, userAcc });\r\n        };\r\n    }, [userAccess])\r\n\r\n    useEffect(() => {\r\n\r\n        if (pageField) {\r\n            const fieldArr = pageField.PageFieldMaster\r\n            comAddPageFieldFunc({ state, setState, fieldArr })\r\n        }\r\n    }, [pageField])\r\n\r\n    // hasShowloction && hasShowModal useEffect\r\n    useEffect(() => {\r\n\r\n        if ((hasShowloction || hasShowModal)) {\r\n\r\n            let hasEditVal = null\r\n            if (hasShowloction) {\r\n                setPageMode(location.page_Mode)\r\n                hasEditVal = location.editValue\r\n            }\r\n            else if (hasShowModal) {\r\n                hasEditVal = props.editValue\r\n                setPageMode(props.pageMode)\r\n            }\r\n\r\n            if (hasEditVal) {\r\n\r\n                const { id, EffectiveDate } = hasEditVal\r\n                const { values, fieldLabel, hasValid, required, isError } = { ...state }\r\n\r\n                values.EffectiveDate = EffectiveDate\r\n                values.id = id\r\n\r\n                hasValid.EffectiveDate.valid = true;\r\n\r\n                setState({ values, fieldLabel, hasValid, required, isError })\r\n                dispatch(Breadcrumb_inputName(hasEditVal.PriceListName))\r\n                seteditCreatedBy(hasEditVal.CreatedBy)\r\n            }\r\n        }\r\n        else {\r\n            dispatch(goButtonForGST_Master_Success({ Status: false }))\r\n        }\r\n    }, [])\r\n\r\n    useEffect(async () => {\r\n\r\n        if ((postMsg.Status === true) && (postMsg.StatusCode === 200) && !(pageMode === \"dropdownAdd\")) {\r\n            dispatch(saveGSTMasterSuccess({ Status: false }))\r\n            setState(() => resetFunction(fileds, state))// Clear form values  \r\n            if (pageMode === mode.dropdownAdd) {\r\n                customAlert({\r\n                    Type: 1,\r\n                    Message: postMsg.Message,\r\n                })\r\n            }\r\n            else {\r\n                let isPermission = await customAlert({\r\n                    Type: 1,\r\n                    Status: true,\r\n                    Message: postMsg.Message,\r\n                })\r\n                if (isPermission) {\r\n                    history.push({ pathname: url.GST_LIST })\r\n                }\r\n            }\r\n        }\r\n\r\n        else if (postMsg.Status === true) {\r\n            dispatch(saveGSTMasterSuccess({ Status: false }))\r\n            customAlert({\r\n                Type: 4,\r\n                Message: JSON.stringify(postMsg.Message),\r\n            })\r\n        }\r\n    }, [postMsg])\r\n\r\n    useEffect(() => {\r\n        if (deleteMessage.Status === true && deleteMessage.StatusCode === 200) {\r\n            dispatch(deleteGSTId_ForMaster_Success({ Status: false }));\r\n            dispatch(goButtonForGST_Master_Success([]))\r\n            GoButton_Handler()\r\n            dispatch(\r\n                customAlert({\r\n                    Type: 1,\r\n                    Status: true,\r\n                    Message: deleteMessage.Message,\r\n                    AfterResponseAction: getGSTList,\r\n                })\r\n            );\r\n        } else if (deleteMessage.Status === true) {\r\n            dispatch(deleteGSTId_ForMaster_Success({ Status: false }));\r\n            dispatch(\r\n                customAlert({\r\n                    Type: 3,\r\n                    Status: true,\r\n                    Message: JSON.stringify(deleteMessage.Message),\r\n                })\r\n            );\r\n        }\r\n    }, [deleteMessage]);\r\n\r\n    useEffect(() => _cfunc.tableInputArrowUpDounFunc(\"#table_Arrow\"), [Data]);\r\n\r\n    const GoButton_Handler = (event) => {\r\n\r\n        if (values.EffectiveDate === '') {\r\n            customAlert({\r\n                Type: 4,\r\n                Message: \"Please select EffectiveDate\",\r\n            })\r\n            return\r\n        }\r\n        else {\r\n            const jsonBody = JSON.stringify({\r\n                EffectiveDate: values.EffectiveDate\r\n            });\r\n\r\n            dispatch(goButtonForGST_Master({ jsonBody }));\r\n        }\r\n    };\r\n\r\n    //select id for delete row\r\n    const deleteHandeler = (id, name) => {\r\n        dispatch(\r\n            customAlert({\r\n                Type: 5,\r\n                Status: true,\r\n                Message: `Are you sure you want to delete this Item : \"${name}\"`,\r\n                RedirectPath: false,\r\n                PermissionAction: deleteGSTId_ForMaster,\r\n                ID: id,\r\n            })\r\n        )\r\n    };\r\n\r\n    const pageOptions = {\r\n        sizePerPage: 10,\r\n        totalSize: Data.length,\r\n        custom: true,\r\n    };\r\n\r\n    const pagesListColumns = [\r\n        {\r\n            text: \"Item Name\",\r\n            dataField: \"Name\",\r\n            sort: true,\r\n            headerStyle: () => { return { width: '300px' } },\r\n        },\r\n        {\r\n            text: \"Current GSTPercentage\",\r\n            dataField: \"CurrentGSTPercentage\",\r\n            sort: true,\r\n            headerStyle: () => { return { width: '200px' } },\r\n            formatter: (cellContent, row) => {\r\n                return (<span style={{ justifyContent: 'center' }}>\r\n                    < Input\r\n                        key={`CurrentGSTPercentage${row.Item}`}\r\n                        id=\"\"\r\n                        type=\"text\"\r\n                        disabled={true}\r\n                        defaultValue={cellContent}\r\n                        className=\"col col-sm text-end\"\r\n                        onChange={(e) => { row[\"CurrentGSTPercentage\"] = e.target.value }}\r\n                    />\r\n                </span>)\r\n            },\r\n        },\r\n\r\n        {\r\n            text: \"GSTPercentage\",\r\n            dataField: \"GSTPercentage\",\r\n            sort: true,\r\n            headerStyle: () => { return { width: '200px' } },\r\n            formatter: (cellContent, row, key) => {\r\n                if (((cellContent > 0) && (row[\"GSTPerDis\"] === undefined) || row.GSTPerDis)) {\r\n                    row[\"GSTPerDis\"] = true\r\n                } else {\r\n                    row[\"GSTPerDis\"] = false\r\n                }\r\n                return (\r\n                    <span style={{ justifyContent: 'center' }}>\r\n                        <CInput\r\n                            key={`GSTPercentage${row.Item}`}\r\n                            id=\"\"\r\n                            cpattern={decimalRegx}\r\n                            type=\"text\"\r\n                            defaultValue={cellContent}\r\n                            disabled={row.GSTPerDis}\r\n                            className=\"col col-sm text-end\"\r\n                            onChange={(e) => { row[\"GSTPercentage\"] = e.target.value }}\r\n                        />\r\n                    </span>\r\n                )\r\n            },\r\n        },\r\n\r\n        {\r\n            text: \"Current HSNCode\",\r\n            dataField: \"CurrentHSNCode\",\r\n            sort: true,\r\n            headerStyle: () => { return { width: '200px' } },\r\n            formatter: (cellContent, row) => {\r\n                return (<span style={{ justifyContent: 'center' }}>\r\n                    < Input\r\n                        key={`CurrentHSNCode${row.Item}`}\r\n                        id=\"\"\r\n                        type=\"text\"\r\n                        disabled={true}\r\n                        defaultValue={cellContent}\r\n                        className=\"col col-sm \"\r\n                        onChange={(e) => { row[\"CurrentHSNCode\"] = e.target.value }}\r\n                    />\r\n                </span>)\r\n            },\r\n        },\r\n\r\n        {\r\n\r\n            text: \"HSNCode \",\r\n            dataField: \"HSNCode\",\r\n            sort: true,\r\n            headerStyle: () => { return { width: '200px' } },\r\n            formatter: (cellContent, row, key) => {\r\n                if (((cellContent > 0) && (row[\"hsncodeDis\"] === undefined) || row.hsncodeDis)) {\r\n                    row[\"hsncodeDis\"] = true\r\n                } else {\r\n                    row[\"hsncodeDis\"] = false\r\n                }\r\n                return (\r\n                    <span style={{ justifyContent: 'center' }}>\r\n                        <CInput\r\n                            key={`HSNCode${row.Item}`}\r\n                            type=\"text\"\r\n                            cpattern={decimalRegx}\r\n                            defaultValue={cellContent}\r\n                            disabled={row.hsncodeDis}\r\n                            className=\"col col-sm \"\r\n                            onChange={(e) => { row[\"HSNCode\"] = e.target.value }}\r\n                        />\r\n\r\n                    </span>\r\n\r\n                )\r\n            },\r\n        },\r\n\r\n        {\r\n            text: \"Action \",\r\n            dataField: \"\",\r\n            headerStyle: () => {\r\n                return { width: '100px' };\r\n            },\r\n            formatter: (cellContent, user) => {\r\n                return (\r\n                    <span className=\"d-flex justify-content-center align-items-center\">\r\n                        {!(user.id === '') &&\r\n                            <Button\r\n                                id={\"deleteid\"}\r\n                                type=\"button\"\r\n                                className=\"badge badge-soft-danger font-size-12 btn btn-danger waves-effect waves-light w-xxs border border-light\"\r\n                                data-mdb-toggle=\"tooltip\" data-mdb-placement=\"top\" title='Delete MRP'\r\n                                onClick={() => { deleteHandeler(user.id, user.Name); }}\r\n                            >\r\n                                <i className=\"mdi mdi-delete font-size-18\"></i>\r\n                            </Button>}\r\n                    </span>\r\n                )\r\n            }\r\n        },\r\n    ]\r\n\r\n    const SaveHandler = async (event) => {\r\n        event.preventDefault();\r\n        const btnId = event.target.id\r\n        try {\r\n\r\n            _cfunc.btnIsDissablefunc({ btnId, state: true })\r\n\r\n            var ItemData = Data.map((index) => ({\r\n                EffectiveDate: values.EffectiveDate,\r\n                Company: loginCompanyID(),\r\n                CreatedBy: loginUserID(),\r\n                IsDeleted: 0,\r\n                UpdatedBy: loginUserID(),\r\n                Item: index.Item,\r\n                GSTPercentage: index.GSTPercentage,\r\n                HSNCode: index.HSNCode,\r\n                id: index.id\r\n            }))\r\n\r\n            const filterData = ItemData.filter((index) => {\r\n                return (!(index.GSTPercentage === '') && !(index.HSNCode === '') && (index.id === ''))\r\n            })\r\n\r\n            const jsonBody = JSON.stringify(filterData)\r\n\r\n            if (!(filterData.length > 0)) {\r\n                dispatch(\r\n                    customAlert({\r\n                        Type: 4,\r\n                        Status: true,\r\n                        Message: \"Please Enter One GSTPercentage & HSNCode\",\r\n                    })\r\n                );\r\n                return _cfunc.btnIsDissablefunc({ btnId, state: false })\r\n            }\r\n            else {\r\n                dispatch(saveGSTMaster(jsonBody));\r\n            }\r\n\r\n        } catch (e) { _cfunc.btnIsDissablefunc({ btnId, state: false }) }\r\n    };\r\n\r\n    // IsEditMode_Css is use of module Edit_mode (reduce page-content marging)\r\n    var IsEditMode_Css = ''\r\n    if ((pageMode === mode.edit) || (pageMode === mode.copy) || (pageMode === mode.dropdownAdd)) { IsEditMode_Css = \"-5.5%\" };\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"page-content\" style={{ marginTop: IsEditMode_Css }}>\r\n                <MetaTags>{metaTagLabel(userPageAccessState)}</MetaTags>\r\n                <Container fluid>\r\n\r\n                    <form noValidate>\r\n                        <Card className=\"text-black \">\r\n                            <CardHeader className=\"card-header  text-black c_card_header\" >\r\n                                <h4 className=\"card-title text-black\">{userPageAccessState.PageDescription}</h4>\r\n                                <p className=\"card-title-desc text-black\">{userPageAccessState.PageDescriptionDetails}</p>\r\n                            </CardHeader>\r\n                            <CardBody className=\" vh-10 0 text-black\" style={{ marginBottom: \"4cm\" }}>\r\n\r\n                                <Card style={{ backgroundColor: \"whitesmoke\" }} className=\" mb-1\">\r\n                                    <CardHeader className=\"c_card_body\"  >\r\n                                        <Row className=\"mt-3\">\r\n\r\n                                            <Col sm={4}>\r\n                                                <FormGroup className=\"mb-3 row \">\r\n                                                    <Label className=\"col-md-6 p-2\" style={{ width: \"2.9cm\" }}>{fieldLabel.EffectiveDate}</Label>\r\n                                                    <Col sm={8}>\r\n                                                        <C_DatePicker\r\n                                                            id=\"EffectiveDate\"\r\n                                                            name=\"EffectiveDate\"\r\n                                                            placeholder={\"DD/MM/YYYY\"}\r\n                                                            value={values.EffectiveDate}\r\n                                                            isDisabled={pageMode === mode.edit ? true : false}\r\n                                                            onChange={(y, v, e) => {\r\n                                                                onChangeDate({ e, v, state, setState })\r\n                                                            }}\r\n                                                            options={{\r\n                                                                altInput: true,\r\n                                                                altFormat: \"d-m-Y\",\r\n                                                                dateFormat: \"Y-m-d\",\r\n                                                            }}\r\n                                                        />\r\n                                                        {isError.EffectiveDate.length > 0 && (\r\n                                                            <span className=\"invalid-feedback\">{isError.EffectiveDate}</span>\r\n                                                        )}\r\n                                                    </Col>\r\n                                                </FormGroup>\r\n                                            </Col>\r\n                                            <Col sm={1}>\r\n                                                <Go_Button onClick={(event) => { GoButton_Handler(event) }} loading={listBtnLoading} />\r\n                                            </Col>\r\n                                        </Row>\r\n                                    </CardHeader>\r\n                                </Card>\r\n\r\n                                {Data.length > 0 ?\r\n\r\n                                    <ToolkitProvider\r\n                                        keyField=\"Item\"\r\n                                        data={Data}\r\n                                        columns={pagesListColumns}\r\n                                        search\r\n                                    >\r\n                                        {(toolkitProps) => (\r\n                                            <React.Fragment>\r\n                                                <Row>\r\n                                                    <Col xl=\"12\">\r\n                                                        <div className=\"table-responsive\">\r\n                                                            <BootstrapTable\r\n                                                                keyField={\"Item\"}\r\n                                                                id=\"table_Arrow\"\r\n                                                                responsive\r\n                                                                bordered={false}\r\n                                                                striped={false}\r\n                                                                classes={\"table  table-bordered\"}\r\n                                                                noDataIndication={<div className=\"text-danger text-center \">Items Not available</div>}\r\n                                                                {...toolkitProps.baseProps}\r\n                                                            />\r\n                                                            {mySearchProps(toolkitProps.searchProps)}\r\n\r\n                                                        </div>\r\n                                                    </Col>\r\n                                                </Row>\r\n\r\n                                            </React.Fragment>\r\n                                        )}\r\n                                    </ToolkitProvider>\r\n                                    : null}\r\n\r\n                                {Data.length > 0 ?\r\n                                    <FormGroup>\r\n                                        <Col sm={2} style={{ marginLeft: \"-40px\" }} className={\"row save1\"}>\r\n                                            <SaveButton pageMode={pageMode}\r\n                                                loading={saveBtnloading}\r\n                                                onClick={SaveHandler}\r\n                                                userAcc={userPageAccessState}\r\n                                                editCreatedBy={editCreatedBy}\r\n                                            />\r\n                                        </Col>\r\n                                    </FormGroup >\r\n                                    : null\r\n                                }\r\n\r\n                            </CardBody>\r\n                        </Card>\r\n                    </form>\r\n                </Container>\r\n            </div>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default GSTMaster\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\components\\VerticalLayout\\Header.js",["3245","3246"],"import PropTypes from 'prop-types'\r\nimport React, { useEffect, useState } from \"react\"\r\nimport { connect } from \"react-redux\"\r\nimport { Link } from \"react-router-dom\"\r\n\r\n//import drawer\r\nimport ReactDrawer from 'react-drawer';\r\nimport 'react-drawer/lib/react-drawer.css';\r\n\r\n//Import Icons\r\nimport FeatherIcon from \"feather-icons-react\";\r\n\r\n// Import menuDropdown\r\nimport NotificationDropdown from \"../CommonForBoth/TopbarDropdown/NotificationDropdown\"\r\nimport ProfileMenu from \"../CommonForBoth/TopbarDropdown/ProfileMenu\"\r\nimport RightSidebar from \"../CommonForBoth/RightSidebar\"\r\n// import LightDark from \"../CommonForBoth/Menus/LightDark\";\r\n\r\n// import images\r\nimport logoSvg from \"../../assets/images/cbm_logo.png\"\r\n\r\n//i18n\r\nimport { withTranslation } from \"react-i18next\"\r\n\r\n// Redux Store\r\nimport {\r\n  showRightSidebarAction,\r\n  toggleLeftmenu,\r\n  changeSidebarType,\r\n  changelayoutMode\r\n} from \"../../store/actions\"\r\nimport { MainSearchBox, } from '../Common/SearchBox/index';\r\nimport { MySearch } from '../Common/SearchBox/MySearch';\r\n\r\nconst Header = props => {\r\n  const { onChangeLayoutMode } = props;\r\n  const [search, setsearch] = useState(false)\r\n  const [isClick, setClick] = useState(true);\r\n  const [position, setPosition] = useState();\r\n  const [open, setOpen] = useState(false);\r\n\r\n\r\n\r\n  const onDrawerClose = () => {\r\n    setOpen(false);\r\n  }\r\n\r\n  /*** Sidebar menu icon and default menu set */\r\n  function tToggle() {\r\n    var body = document.body;\r\n    setClick(!isClick);\r\n    if (isClick === true) {\r\n      body.classList.add(\"sidebar-enable\");\r\n      document.body.setAttribute('data-sidebar-size', 'sm');\r\n    } else {\r\n      body.classList.remove(\"sidebar-enable\");\r\n      document.body.setAttribute('data-sidebar-size', 'lg');\r\n    }\r\n  }\r\n  // Check the window width on the first load and set the initial state of isClick\r\n  useEffect(() => {\r\n    function handleResize() {\r\n      setClick(window.innerWidth >= 768); // Set isClick to true if the window width is greater than or equal to 768, otherwise set it to false\r\n    }\r\n    window.addEventListener('resize', handleResize);\r\n    handleResize(); // Call it on the first load\r\n\r\n    return () => window.removeEventListener('resize', handleResize);\r\n  }, []);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <header id=\"page-topbar\">\r\n        <div className=\"navbar-header\">\r\n          <div className=\"d-flex\">\r\n            <div className=\"navbar-brand-box\" >\r\n              <Link to=\"/dashboard\" className=\"logo logo-dark\">\r\n                <span className=\"logo-sm\" >\r\n                  <img src={logoSvg} alt=\"\" height=\"35\" />\r\n                </span>\r\n                <span className=\"logo-lg\">\r\n                  <img src={logoSvg} alt=\"\" height=\"45\" /> <span className=\"logo-txt\" style={{ color: 'white' }}>FoodERP 2.0</span>\r\n                </span>\r\n              </Link>\r\n\r\n              <Link to=\"/dashboard\" className=\"logo logo-light\">\r\n                <span className=\"logo-sm\" >\r\n                  <img src={logoSvg} alt=\"\" height=\"35\" />\r\n                </span>\r\n                <span className=\"logo-lg\">\r\n                  <img src={logoSvg} alt=\"\" height=\"35\" /> <span className=\"logo-txt\">FoodERP 2.0</span>\r\n                </span>\r\n              </Link>\r\n            </div>\r\n            <div>\r\n              <button\r\n                onClick={() => {\r\n                  tToggle()\r\n                }}\r\n                type=\"button\" className=\"btn btn-sm  font-size-16 header-item\" id=\"vertical-menu-btn\">\r\n                <i className=\"fa fa-fw fa-bars\"></i>\r\n              </button>\r\n            </div>\r\n            <MainSearchBox />\r\n\r\n\r\n          </div>\r\n\r\n\r\n          <div className=\"d-flex\">\r\n            <div className=\"dropdown d-inline-block d-lg-none ms-2\">\r\n              {/* <button type=\"button\" className=\"btn header-item\" id=\"page-header-search-dropdown\"\r\n                data-bs-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n                <FeatherIcon\r\n                  icon=\"search\"\r\n                  className=\"icon-lg\"\r\n                />\r\n              </button> */}\r\n              <div className=\"dropdown-menu dropdown-menu-lg dropdown-menu-end p-0\"\r\n                aria-labelledby=\"page-header-search-dropdown\">\r\n\r\n                <form className=\"p-3\">\r\n                  <div className=\"form-group m-0\">\r\n                    <div className=\"input-group\">\r\n                      <input type=\"text\" className=\"form-control\" placeholder=\"Search ...\" aria-label=\"Search Result\" />\r\n\r\n                      <button className=\"btn btn-primary\" type=\"submit\"><i className=\"mdi mdi-magnify\"></i></button>\r\n                    </div>\r\n                  </div>\r\n                </form>\r\n              </div>\r\n            </div>\r\n\r\n          </div>\r\n          <div className=\"d-flex\">\r\n            <div className=\"dropdown d-inline-block d-lg-none ms-2\">\r\n              <button\r\n                onClick={() => {\r\n                  setsearch(!search)\r\n                }}\r\n                type=\"button\"\r\n                className=\"btn header-item noti-icon \"\r\n                id=\"page-header-search-dropdown\"\r\n              >\r\n                <i className=\"mdi mdi-magnify\" />\r\n              </button>\r\n              <div\r\n                className={\r\n                  search\r\n                    ? \"dropdown-menu dropdown-menu-lg dropdown-menu-end p-0 show\"\r\n                    : \"dropdown-menu dropdown-menu-lg dropdown-menu-end p-0\"\r\n                }\r\n                aria-labelledby=\"page-header-search-dropdown\"\r\n              >\r\n                <div className=\" d-flex position-relative\">\r\n                  <MySearch />\r\n                </div>\r\n                {/* <form className=\"p-3\">\r\n                  <div className=\"form-group m-0\">\r\n                    <div className=\"input-group\">\r\n                      <input\r\n                        type=\"text\"\r\n                        className=\"form-control\"\r\n                        placeholder=\"Search ...\"\r\n                        aria-label=\"Recipient's username\"\r\n                      />\r\n                      <div className=\"input-group-append\">\r\n                        <button className=\"btn btn-primary\" type=\"submit\">\r\n                          <i className=\"mdi mdi-magnify\" />\r\n                        </button>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </form> */}\r\n\r\n              </div>\r\n            </div>\r\n\r\n            <NotificationDropdown />\r\n            <ProfileMenu />\r\n\r\n          </div>\r\n        </div>\r\n      </header>\r\n      <ReactDrawer\r\n        open={open}\r\n        position={position}\r\n        onClose={onDrawerClose}\r\n      >\r\n        <RightSidebar onClose={onDrawerClose} onChangeLayoutMode={onChangeLayoutMode} />\r\n      </ReactDrawer>\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nHeader.propTypes = {\r\n  changeSidebarType: PropTypes.func,\r\n  leftMenu: PropTypes.any,\r\n  leftSideBarType: PropTypes.any,\r\n  showRightSidebar: PropTypes.any,\r\n  showRightSidebarAction: PropTypes.func,\r\n  t: PropTypes.any,\r\n  toggleLeftmenu: PropTypes.func,\r\n  changelayoutMode: PropTypes.func,\r\n  layoutMode: PropTypes.any,\r\n}\r\n\r\nconst mapStatetoProps = state => {\r\n  const {\r\n    layoutType,\r\n    showRightSidebar,\r\n    leftMenu,\r\n    leftSideBarType,\r\n    layoutMode\r\n  } = state.Layout\r\n  return { layoutType, showRightSidebar, leftMenu, leftSideBarType, layoutMode }\r\n}\r\n\r\nexport default connect(mapStatetoProps, {\r\n  showRightSidebarAction,\r\n  changelayoutMode,\r\n  toggleLeftmenu,\r\n  changeSidebarType,\r\n})(withTranslation()(Header))\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\store\\actions.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Purchase\\Order\\Order.js",["3247","3248","3249","3250","3251","3252","3253","3254","3255","3256","3257","3258","3259","3260","3261","3262","3263","3264","3265","3266","3267","3268","3269","3270","3271","3272","3273","3274"],"import React, { useEffect, useLayoutEffect, useState } from \"react\";\r\nimport { MetaTags } from \"react-meta-tags\"\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {\r\n    Button,\r\n    Col,\r\n    FormGroup,\r\n    Input,\r\n    Label,\r\n    Modal,\r\n    Row,\r\n} from \"reactstrap\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport Select from \"react-select\";\r\nimport ToolkitProvider from \"react-bootstrap-table2-toolkit\";\r\nimport BootstrapTable from \"react-bootstrap-table-next\";\r\nimport { orderCalculateFunc } from \"./OrderPageCalulation\";\r\nimport { SaveButton, Go_Button, Change_Button, GotoInvoiceBtn, PageLoadingSpinner, DashboardLoader } from \"../../../components/Common/CommonButton\";\r\nimport { mySearchProps } from \"../../../components/Common/SearchBox/MySearch\";\r\n\r\nimport OrderPageTermsTable from \"./OrderPageTermsTable\";\r\nimport { initialFiledFunc } from \"../../../components/Common/validationFunction\";\r\nimport PartyItems from \"../../Adminisrator/PartyItemPage/PartyItems\";\r\n\r\nimport { customAlert } from \"../../../CustomAlert/ConfirmDialog\"\r\nimport { order_Type } from \"../../../components/Common/C-Varialbes\";\r\nimport { CInput, C_DatePicker, C_Select, decimalRegx, onlyNumberRegx } from \"../../../CustomValidateForm/index\";\r\n\r\nimport * as _act from \"../../../store/actions\";\r\nimport * as _cfunc from \"../../../components/Common/CommonFunction\";\r\nimport { url, mode, pageId } from \"../../../routes/index\"\r\nimport { editPartyItemID } from \"../../../store/Administrator/PartyItemsRedux/action\";\r\nimport { getPartyListAPI, getPartyListAPISuccess } from \"../../../store/Administrator/PartyRedux/action\";\r\nimport { pageFieldUseEffect, table_ArrowUseEffect, updateMsgUseEffect, userAccessUseEffect } from \"../../../components/Common/CommonUseEffect\";\r\nimport { orderApprovalFunc, orderApprovalMessage } from \"./orderApproval\";\r\nimport { GetRoutesList, GetRoutesListSuccess } from \"../../../store/Administrator/RoutesRedux/actions\";\r\nimport { ORDER_4 } from \"../../../routes/route_url\";\r\nimport NewCommonPartyDropdown from \"../../../components/Common/NewCommonPartyDropdown\";\r\nimport \"../../../CustomTable2/CustomTable.scss\"\r\nimport \"./order.scss\"\r\n\r\nlet editVal = {}\r\nlet initial_BredcrumbMsg = \"Order Amount :0.00\"\r\n\r\nfunction initialState(history) {\r\n\r\n    let page_Id = '';\r\n    let listPath = ''\r\n    let sub_Mode = history.location.pathname;\r\n\r\n    if (sub_Mode === url.ORDER_1) {\r\n        page_Id = pageId.ORDER_1;\r\n        listPath = url.ORDER_LIST_1\r\n    }\r\n    else if (sub_Mode === url.ORDER_2) {\r\n        page_Id = pageId.ORDER_2;\r\n        listPath = url.ORDER_LIST_2\r\n    }\r\n    else if (sub_Mode === url.IB_ORDER) {\r\n        page_Id = pageId.IB_ORDER;\r\n        listPath = url.IB_ORDER_PO_LIST;\r\n    }\r\n    else if (sub_Mode === url.ORDER_4) {\r\n        page_Id = pageId.ORDER_4;\r\n        listPath = url.ORDER_LIST_4\r\n    }\r\n    return { page_Id, listPath }\r\n};\r\n\r\nconst Order = (props) => {\r\n\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n    const currentDate_ymd = _cfunc.date_ymd_func();\r\n\r\n    const fileds = {\r\n        id: \"\",\r\n        Supplier: \"\",\r\n        Route: \"\",\r\n        Item: ''\r\n    }\r\n\r\n    const [state, setState] = useState(() => initialFiledFunc(fileds))\r\n    const [editCreatedBy, seteditCreatedBy] = useState(\"\");\r\n    const [page_id] = useState(() => initialState(history).page_Id)\r\n    const [listPath] = useState(() => initialState(history).listPath)\r\n    const [subPageMode] = useState(history.location.pathname)\r\n    const [modalCss, setModalCss] = useState(false);\r\n    const [pageMode, setPageMode] = useState(mode.defaultsave);\r\n    const [userPageAccessState, setUserAccState] = useState('');\r\n    const [description, setDescription] = useState('')\r\n\r\n    const [deliverydate, setdeliverydate] = useState(currentDate_ymd)\r\n    const [billAddr, setbillAddr] = useState('')\r\n    const [shippAddr, setshippAddr] = useState('');\r\n\r\n    const [poFromDate, setpoFromDate] = useState(currentDate_ymd);\r\n    const [poToDate, setpoToDate] = useState(currentDate_ymd);\r\n    const [orderdate, setorderdate] = useState(currentDate_ymd);\r\n\r\n    const [supplierSelect, setsupplierSelect] = useState('');\r\n    const [routeSelect, setRouteSelect] = useState({ value: '', label: \"All\" });\r\n    const [itemSelect, setItemSelect] = useState({ value: '', label: \"All\" });\r\n    const [itemSelectDropOptions, setitemSelectOptions] = useState([]);\r\n    const [selecedItemWiseOrder, setSelecedItemWiseOrder] = useState(true)\r\n    const [goBtnDissable, setGoBtnDissable] = useState(false)\r\n\r\n    const [termsAndConTable, setTermsAndConTable] = useState([]);\r\n    const [orderTypeSelect, setorderTypeSelect] = useState('');\r\n    const [isOpen_assignLink, setisOpen_assignLink] = useState(false)\r\n    const [orderItemTable, setOrderItemTable] = useState([])\r\n    const [findPartyItemAccess, setFindPartyItemAccess] = useState(false)\r\n    const [FSSAI_Date_Is_Expired, setFSSAI_Date_Is_Expired] = useState(\"\")\r\n\r\n    // for Order page heder dicount functionality useSate ************************************\r\n    const [discountValueAll, setDiscountValueAll] = useState(\"\");\r\n    const [discountTypeAll, setDiscountTypeAll] = useState({ value: 2, label: \" % \" });\r\n    const [discountDropOption] = useState([{ value: 1, label: \"Rs\" }, { value: 2, label: \"%\" }])\r\n    const [changeAllDiscount, setChangeAllDiscount] = useState(false)\r\n    const [forceReload, setForceReload] = useState(false)\r\n    // ****************************************************************************\r\n\r\n    const {\r\n        goBtnOrderdata,\r\n        postMsg,\r\n        vendorSupplierCustomer,\r\n        userAccess,\r\n        orderType,\r\n        updateMsg,\r\n        supplierAddress,\r\n        pageField,\r\n        partyList_redux,\r\n        assingItemData = '',\r\n        approvalDetail,\r\n        orderApprovalMsg,\r\n        gobutton_Add_invoice,\r\n        invoiceGoBtnloading,\r\n        goBtnloading,\r\n        saveBtnloading,\r\n        gotoInvoiceBtnLoading,\r\n        RoutesList,\r\n        supplierADDdropLoading,\r\n        supplierDropLoading,\r\n        orderTypeDropLoading,\r\n        routesDropLoading,\r\n        commonPartyDropSelect\r\n    } = useSelector((state) => ({\r\n        goBtnOrderdata: state.OrderReducer.goBtnOrderAdd,\r\n\r\n        vendorSupplierCustomer: state.CommonAPI_Reducer.vendorSupplierCustomer,\r\n        supplierDropLoading: state.CommonAPI_Reducer.vendorSupplierCustomerLoading,\r\n\r\n        supplierAddress: state.CommonAPI_Reducer.supplierAddress,\r\n        supplierADDdropLoading: state.CommonAPI_Reducer.supilerADDLoading,\r\n\r\n        orderType: state.CommonAPI_Reducer.orderType,\r\n        orderTypeDropLoading: state.CommonAPI_Reducer.orderTypeLoading,\r\n\r\n        postMsg: state.OrderReducer.postMsg,\r\n        updateMsg: state.OrderReducer.updateMsg,\r\n        userAccess: state.Login.RoleAccessUpdateData,\r\n        pageField: state.CommonPageFieldReducer.pageField,\r\n        orderApprovalMsg: state.OrderReducer.orderApprovalMsg,\r\n        approvalDetail: state.OrderReducer.approvalDetail,\r\n        assingItemData: state.PartyItemsReducer.editData,\r\n\r\n        partyList_redux: state.PartyMasterReducer.partyList,\r\n        partyDropLoading: state.PartyMasterReducer.partyDropLoading,\r\n\r\n        RoutesList: state.RoutesReducer.RoutesList,\r\n        routesDropLoading: state.RoutesReducer.goBtnLoading,\r\n\r\n        gobutton_Add_invoice: state.InvoiceReducer.gobutton_Add,\r\n        invoiceGoBtnloading: state.InvoiceReducer.goBtnloading,\r\n\r\n        goBtnloading: state.OrderReducer.goBtnLoading,\r\n        saveBtnloading: state.OrderReducer.saveBtnloading,\r\n        gotoInvoiceBtnLoading: state.OrderReducer.gotoInvoiceBtnLoading,\r\n\r\n        commonPartyDropSelect: state.CommonPartyDropdownReducer.commonPartyDropSelect\r\n    }));;\r\n\r\n    const { fieldLabel } = state;\r\n\r\n    const location = { ...history.location }\r\n    const hasShowloction = location.hasOwnProperty(mode.editValue)\r\n    const hasShowModal = props.hasOwnProperty(mode.editValue)\r\n\r\n    useLayoutEffect(() => {\r\n        dispatch(_act.commonPageFieldSuccess(null));\r\n        dispatch(_act.GoButton_For_Order_AddSuccess(null));\r\n        dispatch(_act.commonPageField(page_id));\r\n        dispatch(_act.getTermAndCondition());\r\n        dispatch(_act.getOrderType());\r\n        return () => {\r\n            dispatch(_act.commonPageFieldSuccess(null));\r\n            dispatch(_act.GoButton_For_Order_AddSuccess(null))\r\n            dispatch(_act.getTermAndCondition_Success([]));\r\n        }\r\n\r\n    }, []);\r\n\r\n    useEffect(() => userAccessUseEffect({ // userAccess useEffect \r\n        props,\r\n        userAccess,\r\n        dispatch,\r\n        setUserAccState,\r\n        otherloginAccss// for other pages login role access chack\r\n    }), [userAccess]);\r\n\r\n    const otherloginAccss = (ind) => {\r\n        if ((ind.id === pageId.PARTYITEM) && !(subPageMode === url.IB_ORDER)) {\r\n            setFindPartyItemAccess(true)\r\n        }\r\n    };\r\n\r\n    // Common Party Dropdown useEffect\r\n    useEffect(() => {\r\n\r\n        if (commonPartyDropSelect.value > 0) {\r\n            dispatch(GetRoutesList({ ..._cfunc.loginJsonBody(), \"PartyID\": commonPartyDropSelect.value }));\r\n            dispatch(getPartyListAPI({ ..._cfunc.loginJsonBody(), \"PartyID\": commonPartyDropSelect.value }));\r\n            dispatch(_act.GetVenderSupplierCustomer({ subPageMode, RouteID: \"\", \"PartyID\": commonPartyDropSelect.value }));\r\n            if (!(subPageMode === url.ORDER_4)) {\r\n                dispatch(_act.getSupplierAddress(commonPartyDropSelect.value))\r\n            }\r\n        }\r\n        setItemSelect({ value: '', label: \"All\" });\r\n        setRouteSelect({ value: '', label: \"All\" });\r\n        setsupplierSelect('')\r\n        return () => {\r\n            dispatch(getPartyListAPISuccess([]));\r\n            dispatch(GetRoutesListSuccess([]));\r\n            dispatch(_act.GetVenderSupplierCustomerSuccess([]));\r\n            setGoBtnDissable(false)\r\n            setSelecedItemWiseOrder(true)\r\n            setOrderItemTable([])\r\n            dispatch(_act.GoButton_For_Order_AddSuccess([]))\r\n        }\r\n\r\n\r\n    }, [commonPartyDropSelect]);\r\n\r\n    useEffect(() => { // hasEditVal useEffect\r\n\r\n        if ((hasShowloction || hasShowModal)) {\r\n\r\n            let hasEditVal = null\r\n            if (hasShowloction) {\r\n                setPageMode(location.pageMode)\r\n                hasEditVal = location.editValue\r\n            }\r\n            else if (hasShowModal) {\r\n                hasEditVal = props.editValue\r\n                setPageMode(props.pageMode)\r\n                setModalCss(true)\r\n            }\r\n            if (hasEditVal) {\r\n                dispatch(_act.BreadcrumbShowCountlabel(`${\"Order Amount\"} :${_cfunc.amountCommaSeparateFunc(Number(hasEditVal.OrderAmount).toFixed(2))}`))\r\n                setorderdate(hasEditVal.OrderDate)\r\n\r\n                if (subPageMode === url.ORDER_4) {\r\n                    setsupplierSelect({\r\n                        label: hasEditVal.CustomerName,\r\n                        value: hasEditVal.Customer\r\n                    });\r\n                } else {\r\n                    setsupplierSelect({\r\n                        label: hasEditVal.SupplierName,\r\n                        value: hasEditVal.Supplier\r\n                    });\r\n                }\r\n                setdeliverydate(hasEditVal.DeliveryDate)\r\n                setshippAddr({ label: hasEditVal.ShippingAddress, value: hasEditVal.ShippingAddressID })\r\n                setbillAddr({ label: hasEditVal.BillingAddress, value: hasEditVal.BillingAddressID });\r\n                setDescription(hasEditVal.Description)\r\n                editVal = {}\r\n                editVal = hasEditVal\r\n                // setOrderAmount(hasEditVal.OrderAmount)\r\n                setorderTypeSelect({ value: hasEditVal.POType, label: hasEditVal.POTypeName })\r\n\r\n                setpoToDate(hasEditVal.POToDate)\r\n                setpoFromDate(hasEditVal.POFromDate)\r\n\r\n                const { TermsAndConditions = [] } = hasEditVal;\r\n                const termsAndCondition = TermsAndConditions.map(i => ({\r\n                    value: i.id,\r\n                    label: i.TermsAndCondition,\r\n                    IsDeleted: 0\r\n                }))\r\n\r\n                const orderItems = hasEditVal.OrderItems.map((ele, k) => {\r\n                    ele[\"id\"] = k + 1\r\n                    return ele\r\n                });\r\n                setOrderItemTable(orderItems)\r\n                setTermsAndConTable(termsAndCondition)\r\n            }\r\n            dispatch(_act.editOrderIdSuccess({ Status: false }))\r\n            seteditCreatedBy(hasEditVal.CreatedBy)\r\n        } else {\r\n            dispatch(_act.BreadcrumbShowCountlabel(initial_BredcrumbMsg))\r\n        }\r\n    }, []);\r\n\r\n    useEffect(async () => {\r\n        if ((postMsg.Status === true) && (postMsg.StatusCode === 200) && !(pageMode === mode.dropdownAdd)) {\r\n            dispatch(_act.saveOrderActionSuccess({ Status: false }))\r\n            setSelecedItemWiseOrder(true)\r\n            setGoBtnDissable(false)\r\n            // setOrderAmount(0);\r\n            setTermsAndConTable([]);\r\n            // setorderTypeSelect('');\r\n            setisOpen_assignLink(false)\r\n            setOrderItemTable([])\r\n            setsupplierSelect('');\r\n\r\n            // ??******************************+++++++++++++++++++++++++++++++++++++++++\r\n            const liveMode = false  // temporary not working code thats why false use line no. 253 to 289\r\n            const aprovalSapCallMode = (postMsg.IsSAPCustomer > 0)\r\n\r\n            if ((subPageMode === url.ORDER_2) && liveMode && aprovalSapCallMode) { //        SAP OEDER-APROVUAL CODE\r\n                let config = { orderId: postMsg.OrderID }\r\n\r\n                dispatch(_act.getOrderApprovalDetailAction(config));\r\n\r\n            } else {// ??******************************+++++++++++++++++++++++++++++++++++++++++++++++\r\n\r\n\r\n                dispatch(_act.GoButton_For_Order_AddSuccess([]))\r\n                if ((subPageMode === url.ORDER_4) && (postMsg.gotoInvoiceMode)) {\r\n\r\n                    const customer = supplierSelect\r\n                    const jsonBody = JSON.stringify({\r\n                        OrderIDs: postMsg.OrderID.toString(),\r\n                        FromDate: orderdate,\r\n                        Customer: supplierSelect.value,\r\n                        Party: commonPartyDropSelect.value,\r\n                    });\r\n                    dispatch(_act.GoButtonForinvoiceAdd({\r\n                        jsonBody,\r\n                        subPageMode: url.INVOICE_1,\r\n                        path: url.INVOICE_1,\r\n                        pageMode: mode.defaultsave,\r\n                        customer,\r\n                        errorMsg: \"Order Save Successfully But Can't Make Invoice\"\r\n                    }));\r\n                }\r\n                else {\r\n                    const a = await customAlert({\r\n                        Type: 1,\r\n                        Message: postMsg.Message,\r\n                    })\r\n                    if (a) {\r\n                        history.push({\r\n                            pathname: listPath,\r\n                            updatedRowBlinkId: postMsg.OrderID\r\n                        });\r\n                    }\r\n                }\r\n\r\n            }\r\n        }\r\n        else if ((postMsg.Status === true) && !(pageMode === mode.dropdownAdd)) {\r\n\r\n            dispatch(_act.saveOrderActionSuccess({ Status: false }))\r\n            customAlert({\r\n                Type: 4,\r\n                Message: JSON.stringify(postMsg.Message),\r\n            });\r\n        }\r\n    }, [postMsg])\r\n\r\n    useEffect(() => updateMsgUseEffect({\r\n        updateMsg, modalCss,\r\n        history, dispatch,\r\n        updateSuccss: _act.updateOrderIdSuccess,\r\n        listPath: listPath\r\n    }), [updateMsg])\r\n\r\n    useEffect(() => pageFieldUseEffect({// useEffect common pagefield for master\r\n        state,\r\n        setState,\r\n        pageField\r\n    }), [pageField])\r\n\r\n    useEffect(() => table_ArrowUseEffect(\"#table_Arrow\"), [orderItemTable]);\r\n\r\n    useEffect(() => {\r\n        if (assingItemData.Status === true) {\r\n            setisOpen_assignLink(true);\r\n        }\r\n    }, [assingItemData]);\r\n\r\n    useEffect(() => {\r\n        if (goBtnOrderdata) {\r\n            let { OrderItems = [], TermsAndConditions = [] } = goBtnOrderdata\r\n            if (!selecedItemWiseOrder) { setOrderItemTable(OrderItems) }\r\n            setitemSelectOptions(OrderItems.map(i => ({ ...i, value: i.Item_id, label: i.ItemName })))\r\n\r\n            setTermsAndConTable(TermsAndConditions)\r\n            dispatch(_act.GoButton_For_Order_AddSuccess(''))\r\n        }\r\n    }, [goBtnOrderdata]);\r\n\r\n    useEffect(() => {\r\n        if ((supplierAddress.length > 0) && (!((hasShowloction || hasShowModal)))) {\r\n            setbillAddr(supplierAddress[0]);\r\n            setshippAddr(supplierAddress[0]);\r\n        }\r\n    }, [supplierAddress]);\r\n\r\n    useEffect(() => {\r\n        if ((orderType.length > 0) && (!((hasShowloction || hasShowModal)))) {\r\n            setorderTypeSelect({\r\n                value: orderType[0].id,\r\n                label: orderType[0].Name,\r\n            });\r\n        }\r\n    }, [orderType]);\r\n\r\n    useEffect(() => {\r\n        orderApprovalFunc({ dispatch, approvalDetail })\r\n    }, [approvalDetail]);\r\n\r\n    useEffect(() => {\r\n        orderApprovalMessage({ dispatch, orderApprovalMsg, listPath, history })\r\n    }, [orderApprovalMsg]);\r\n\r\n    useEffect(() => {\r\n        try {\r\n            document.getElementById(\"__assignItem_onClick\").style.display = ((supplierSelect.value > 0) && (findPartyItemAccess) && !goBtnloading) ? \"block\" : \"none\"\r\n        } catch (e) { }\r\n    }, [goBtnloading, supplierSelect, findPartyItemAccess]);\r\n\r\n    useEffect(() => {\r\n        if (gobutton_Add_invoice.Status === true && gobutton_Add_invoice.StatusCode === 200) {\r\n            history.push({\r\n                pathname: gobutton_Add_invoice.path,\r\n            })\r\n        }\r\n    }, [gobutton_Add_invoice]);\r\n\r\n    // useEffect(() => {\r\n    //     if (changeAllDiscount) {\r\n\r\n    //         const updatedOrderItemTable = orderItemTable.map((item) => ({\r\n    //             ...item,\r\n    //             Discount: discountValueAll,\r\n    //             DiscountType: discountTypeAll.value,\r\n    //         }));\r\n    //         itemWise_CalculationFunc(item, undefined, orderItemTable)\r\n    //         setOrderItemTable(updatedOrderItemTable);\r\n    //     }\r\n    // }, [changeAllDiscount, discountValueAll, discountTypeAll.value]);\r\n\r\n    useEffect(() => {\r\n        debugger\r\n        if (changeAllDiscount) {\r\n            const updatedOrderItemTable = orderItemTable.map((item) => ({\r\n                ...item,\r\n                Discount: discountValueAll,\r\n                DiscountType: discountTypeAll.value,\r\n            }));\r\n\r\n            // Perform calculations based on the updated values for each item\r\n            updatedOrderItemTable.forEach((item) => {\r\n                itemWise_CalculationFunc(item, undefined, updatedOrderItemTable);\r\n            });\r\n\r\n            // Set the updated array as the new orderItemTable\r\n            setOrderItemTable(updatedOrderItemTable);\r\n        }\r\n    }, [changeAllDiscount, discountValueAll, discountTypeAll.value]);\r\n\r\n    const supplierOptions = vendorSupplierCustomer.map((i) => ({\r\n        value: i.id,\r\n        label: i.Name,\r\n        FSSAIExipry: i.FSSAIExipry,\r\n        GSTIN: i.GSTIN,\r\n        FSSAINo: i.FSSAINo,\r\n        IsTCSParty: i.IsTCSParty,\r\n        ISCustomerPAN: i.PAN,\r\n\r\n    }))\r\n\r\n    const orderTypeOptions = orderType.map((i) => ({\r\n        value: i.id,\r\n        label: i.Name,\r\n    }));\r\n\r\n    const RoutesListOptions = RoutesList.map((index) => ({\r\n        value: index.id,\r\n        label: index.Name,\r\n        IsActive: index.IsActive\r\n    }));\r\n\r\n    const RouteOptions = RoutesListOptions.filter((index) => {\r\n        return index.IsActive === true\r\n    });\r\n\r\n    RouteOptions.unshift({\r\n        value: \"\",\r\n        label: \"All\"\r\n    });\r\n\r\n    const pagesListColumns = [\r\n        {\r\n            dataField: \"GroupName\",\r\n            text: \"Group\",\r\n            classes: 'table-cursor-pointer',\r\n            sort: true,\r\n            attrs: (cell, row, rowIndex, colIndex) => ({ 'data-label': \"GroupName\" }),\r\n            headerStyle: () => {\r\n                return { minWidth: '100px', textAlign: 'center' };\r\n            },\r\n        },\r\n        {\r\n            dataField: \"SubGroupName\",\r\n            text: \"SubGroup\",\r\n            classes: 'table-cursor-pointer',\r\n            sort: true,\r\n            attrs: (cell, row, rowIndex, colIndex) => ({ 'data-label': \"SubGroupName\" }),\r\n            headerStyle: () => {\r\n                return { minWidth: '100px', textAlign: 'center' };\r\n            },\r\n        },\r\n\r\n        {//------------- ItemName column ----------------------------------\r\n            dataField: \"ItemName\",\r\n            text: \"Item Name\",\r\n            classes: 'table-cursor-pointer',\r\n            attrs: (cell, row, rowIndex, colIndex) => ({ 'data-label': \"ItemName\", \"sticky-col\": \"true\" }),\r\n            sort: true,\r\n            headerStyle: () => {\r\n                return { minWidth: '200px', textAlign: 'center' };\r\n            },\r\n            sortValue: (cell, row) => row[\"ItemName\"],\r\n            headerFormatter: (value, row, k, f) => {\r\n                return (\r\n                    <div className=\"d-flex justify-content-between\" key={row.id}>\r\n                        <div>\r\n                            Item Name\r\n                        </div>\r\n                        <div onClick={assignItem_onClick}>\r\n                            <samp id={\"__assignItem_onClick\"} style={{ display: \"none\", cursor: \"pointer\" }} className=\"text-primary fst-italic text-decoration-underline\"\r\n                            >\r\n                                Assign-Items</samp>\r\n                        </div>\r\n\r\n                    </div>\r\n                )\r\n            },\r\n        },\r\n        {\r\n            dataField: \"StockQuantity\",\r\n            text: \"Stock Quantity\",\r\n            classes: 'table-cursor-pointer',\r\n            align: () => \"right\",\r\n            attrs: (cell, row, rowIndex, colIndex) => ({ 'data-label': \"StockQuantity\" }),\r\n            sort: true,\r\n            headerStyle: () => {\r\n                return { minWidth: '100px', textAlign: 'center' };\r\n            },\r\n        },\r\n\r\n        { //------------- Quantity column ----------------------------------\r\n            text: \"Quantity\",\r\n            classes: 'table-cursor-pointer',\r\n            attrs: (cell, row, rowIndex, colIndex) => ({ 'data-label': \"Quantity\" }),\r\n            headerStyle: () => {\r\n                return { width: '10%', textAlign: 'center' };\r\n            },\r\n            formatExtraData: { tableList: orderItemTable },\r\n            formatter: (value, row, k, { tableList }) => {\r\n\r\n                return (\r\n                    <>\r\n                        <CInput\r\n                            key={`Quantity-${k}`}\r\n                            id={`Quantity-${k}`}\r\n                            cpattern={onlyNumberRegx}\r\n                            defaultValue={row.Quantity}\r\n                            autoComplete=\"off\"\r\n                            className=\" text-end\"\r\n                            onChange={(e) => {\r\n                                row[\"Quantity\"] = e.target.value\r\n                                itemWise_CalculationFunc(row, undefined, tableList)\r\n                            }}\r\n                        />\r\n                    </>\r\n                )\r\n            },\r\n\r\n        },\r\n\r\n        {  //------------- Unit column ----------------------------------\r\n            text: \"Unit\",\r\n            classes: 'table-cursor-pointer',\r\n            dataField: \"\",\r\n            attrs: (cell, row, rowIndex, colIndex) => ({ 'data-label': \"Unit\" }),\r\n            headerStyle: () => {\r\n                return { width: '9%', textAlign: 'center' };\r\n            },\r\n            formatExtraData: { tableList: orderItemTable },\r\n            formatter: (value, row, key, { tableList }) => {\r\n\r\n                if (!row.UnitName) {\r\n                    row[\"Unit_id\"] = 0;\r\n                    row[\"UnitName\"] = 'null';\r\n\r\n                    row.UnitDetails.forEach(i => {\r\n                        if ((i.PODefaultUnit) && !(subPageMode === url.ORDER_4)) {\r\n                            defaultUnit(i)\r\n                        }\r\n                        else if ((i.SODefaultUnit) && (subPageMode === url.ORDER_4)) {\r\n                            defaultUnit(i)\r\n                        }\r\n                    });\r\n                    // ********************** //if default unit is not selected then auto first indx unit select\r\n                    if ((row[\"UnitName\"] === 'null') && row.UnitDetails.length > 0) {\r\n                        defaultUnit(row.UnitDetails[0])\r\n                    }\r\n                    // **********************                   \r\n\r\n                    function defaultUnit(i) {\r\n                        row[\"Unit_id\"] = i.UnitID;\r\n                        row[\"po_Unit_id\"] = i.UnitID;\r\n                        row[\"UnitName\"] = i.UnitName;\r\n                        row[\"BaseUnitQuantity\"] = i.BaseUnitQuantity;\r\n                        row[\"Rate\"] = ((i.BaseUnitQuantity / i.BaseUnitQuantityNoUnit) * i.Rate).toFixed(2);\r\n                    }\r\n\r\n                } else {\r\n                    row.UnitDetails.forEach(i => {\r\n                        if ((row.Unit_id === i.UnitID)) {\r\n                            row[\"BaseUnitQuantity\"] = i.BaseUnitQuantity;\r\n                            row[\"UnitName\"] = i.UnitName;\r\n                        }\r\n                    });\r\n\r\n                }\r\n                if (pageMode === mode.edit) {\r\n\r\n                    if (!row[\"edit_Qty\"]) {\r\n                        if (row.Quantity > 0) {\r\n                            row[\"editrowId\"] = true\r\n                            row[\"edit_Qty\"] = row.Quantity\r\n\r\n                        } else {\r\n                            row[\"edit_Qty\"] = 0\r\n                            row[\"editrowId\"] = false\r\n                        }\r\n                    }\r\n\r\n                    if (!row[\"edit_Unit_id\"]) {\r\n                        row[\"edit_Unit_id\"] = row.Unit_id;\r\n                    }\r\n\r\n                    if (!row[\"edit_Discount\"]) {\r\n                        row[\"edit_Discount\"] = row.Discount;\r\n                    }\r\n                    if (!row[\"edit_DiscountType\"]) {\r\n                        row[\"edit_DiscountType\"] = row.DiscountType;\r\n                    }\r\n                }\r\n\r\n                return (\r\n                    <div >\r\n                        <Select\r\n                            id={\"ddlUnit\"}\r\n                            key={`ddlUnit${row.id}`}\r\n                            defaultValue={{ value: row.Unit_id, label: row.UnitName }}\r\n                            options={\r\n                                row.UnitDetails.map(i => ({\r\n                                    label: i.UnitName,\r\n                                    value: i.UnitID,\r\n\r\n                                    BaseUnitQuantity: i.BaseUnitQuantity,\r\n                                    Rate: i.Rate,\r\n                                    BaseUnitQuantityNoUnit: i.BaseUnitQuantityNoUnit\r\n                                }))\r\n                            }\r\n                            onChange={e => {\r\n                                row[\"Unit_id\"] = e.value;\r\n                                row[\"UnitName\"] = e.label\r\n                                row[\"BaseUnitQuantity\"] = e.BaseUnitQuantity;\r\n\r\n                                row[\"Rate\"] = ((e.BaseUnitQuantity / e.BaseUnitQuantityNoUnit) * e.Rate).toFixed(2);\r\n                                itemWise_CalculationFunc(row, undefined, tableList)\r\n\r\n                                document.getElementById(`Rate-${key}`).innerText = _cfunc.amountCommaSeparateFunc(Number(row.Rate).toFixed(2))\r\n                            }}\r\n                        >\r\n                        </Select >\r\n                    </div>\r\n                )\r\n            },\r\n\r\n        },\r\n\r\n        {//------------- Rate column ----------------------------------\r\n            text: \"Basic Rate\",\r\n            classes: 'table-cursor-pointer',\r\n            dataField: \"\",\r\n            attrs: (cell, row, rowIndex, colIndex) => ({ 'data-label': \"Basic Rate\" }),\r\n            headerStyle: () => {\r\n                return { width: '9%', textAlign: 'center' };\r\n            },\r\n            formatExtraData: { tableList: orderItemTable },\r\n            formatter: (value, row, k, { tableList }) => {\r\n                if (subPageMode === url.ORDER_1) {\r\n                    return (\r\n                        <div key={row.id} className=\"text-end\">\r\n                            <CInput\r\n                                type=\"text\"\r\n                                id={`Rate-${k}`}\r\n                                cpattern={decimalRegx}\r\n                                defaultValue={row.Rate}\r\n                                className=\"text-end\"\r\n                                onChange={(event) => {\r\n                                    row.Rate = event.target.value;\r\n                                    itemWise_CalculationFunc(row, undefined, tableList)\r\n\r\n                                }}\r\n                            />\r\n\r\n                        </div>\r\n                    )\r\n                }\r\n                else {\r\n                    return (\r\n                        <div key={row.id} className=\"text-end\">\r\n\r\n                            <span id={`Rate-${k}`}>{_cfunc.amountCommaSeparateFunc(Number(row.Rate).toFixed(2))}</span>\r\n                        </div>\r\n                    )\r\n                }\r\n\r\n            },\r\n\r\n        },\r\n\r\n        {//------------- MRP column ----------------------------------\r\n            text: \"MRP\",\r\n            classes: 'table-cursor-pointer',\r\n            dataField: \"\",\r\n            attrs: (cell, row, rowIndex, colIndex) => ({ 'data-label': \"MRP\" }),\r\n            headerStyle: () => {\r\n                return { width: '8%', textAlign: 'center' };\r\n            },\r\n            formatter: (value, row, k) => {\r\n\r\n                return (\r\n                    <div key={row.id} className=\"text-end\">\r\n                        <span>{row.MRPValue}</span>\r\n                    </div>\r\n                )\r\n            },\r\n\r\n        },\r\n        {//***************Discount********************************************************************* */\r\n            text: \"Discount/unit\",\r\n            dataField: \"\",\r\n            formatExtraData: {\r\n                discountValueAll: discountValueAll,\r\n                discountTypeAll: discountTypeAll,\r\n                changeAllDiscount: changeAllDiscount,\r\n                forceReload: forceReload,\r\n                tableList: orderItemTable\r\n            },\r\n            attrs: (cell, row, rowIndex, colIndex) => ({ 'data-label': \"Discount/unit\" }),\r\n            headerStyle: () => {\r\n                return { width: '11%', textAlign: 'center' };\r\n            },\r\n            headerFormatter: () => {\r\n                return (\r\n                    <div className=\"\" >\r\n                        {orderItemTable.length <= 0 ?\r\n                            <div className=\"col col-3 mt-2\">\r\n                                <Label>Discount/unit</Label>\r\n                            </div>\r\n                            :\r\n                            <div className=\"row\">\r\n                                <div className=\" mt-n2 mb-n2\">\r\n                                    <Label>Discount/unit</Label>\r\n                                </div>\r\n                                <div className=\"col col-6\" >\r\n                                    <Select\r\n                                        type=\"text\"\r\n                                        defaultValue={discountTypeAll}\r\n                                        classNamePrefix=\"select2-selection\"\r\n                                        options={discountDropOption}\r\n                                        isDisabled={(subPageMode === url.ORDER_2)}\r\n                                        style={{ textAlign: \"right\" }}\r\n                                        onChange={(e) => {\r\n                                            setChangeAllDiscount(true);\r\n                                            setDiscountTypeAll(e);\r\n                                            setDiscountValueAll('');\r\n                                        }}\r\n                                    />\r\n                                </div>\r\n                                <div className=\"col col-6\" >\r\n                                    <CInput\r\n                                        type=\"text\"\r\n                                        className=\"input\"\r\n                                        style={{ textAlign: \"right\" }}\r\n                                        cpattern={decimalRegx}\r\n                                        value={discountValueAll}\r\n                                        disabled={(subPageMode === url.ORDER_2)}\r\n                                        onChange={(e) => {\r\n                                            debugger\r\n                                            let e_val = Number(e.target.value);\r\n\r\n                                            // Check if discount type is \"percentage\"\r\n                                            if (discountTypeAll.value === 2) {// Discount type 2 represents \"percentage\"\r\n                                                // Limit the input to the range of 0 to 100\r\n                                                if (e_val > 100) {\r\n                                                    e.target.value = 100; // Set the input value to 100 if it exceeds 100\r\n                                                } else if (!(e_val >= 0 && e_val < 100)) {\r\n                                                    e.target.value = \"\"; // Clear the input value if it is less than 0\r\n                                                }\r\n                                            }\r\n\r\n                                            setChangeAllDiscount(true);\r\n                                            setDiscountValueAll(e.target.value);\r\n                                        }}\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                        }\r\n                    </div>\r\n                );\r\n            },\r\n\r\n            classes: () => \"order-discount-row\",\r\n            formatter: (cellContent, index1, key, formatExtraData) => {\r\n                debugger\r\n                let { tableList, discountValueAll, discountTypeAll } = formatExtraData;\r\n\r\n                // if (formatExtraData.changeAllDiscount) {\r\n                //     index1.Discount = discountValueAll;\r\n                //     index1.DiscountType = discountTypeAll.value;\r\n                //     itemWise_CalculationFunc(index1, undefined, tableList)\r\n                // }\r\n                if (!index1.DiscountType) { index1.DiscountType = discountTypeAll.value }\r\n\r\n                const defaultDiscountTypelabel =\r\n                    index1.DiscountType === 1 ? discountDropOption[0] : discountDropOption[1];\r\n\r\n                return (\r\n                    <>\r\n                        <div className=\"mb-2\">\r\n                            <div className=\"parent\">\r\n                                <div className=\"child\">\r\n                                    <label className=\"label\">Type&nbsp;&nbsp;&nbsp;</label>\r\n                                </div>\r\n                                <div className=\"child\">\r\n                                    <Select\r\n                                        id={`DicountType_${key}`}\r\n                                        classNamePrefix=\"select2-selection\"\r\n                                        key={`DicountType_${key}-${index1.id}`}\r\n                                        value={defaultDiscountTypelabel}\r\n                                        isDisabled={(subPageMode === url.ORDER_2)}\r\n                                        options={discountDropOption}\r\n                                        onChange={(e) => {\r\n                                            setChangeAllDiscount(false);\r\n                                            setForceReload(!forceReload);\r\n                                            index1.DiscountType = e.value;\r\n                                            index1.Discount = '';\r\n                                            itemWise_CalculationFunc(index1, undefined, tableList)\r\n                                        }}\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div>\r\n                            <div className=\"parent\">\r\n                                <div className=\"child\">\r\n                                    <label className=\"label\">Value&nbsp;</label>\r\n                                </div>\r\n                                <div className=\"child\">\r\n                                    <CInput\r\n                                        className=\"input\"\r\n                                        id={`Dicount_${key}-${index1.id}`}\r\n                                        style={{ textAlign: \"right\" }}\r\n                                        type=\"text\"\r\n                                        value={index1.Discount}\r\n                                        disabled={(subPageMode === url.ORDER_2)}\r\n                                        cpattern={decimalRegx}\r\n                                        onChange={(e) => {\r\n\r\n                                            let e_val = Number(e.target.value);\r\n                                            // Check if discount type is \"percentage\"\r\n                                            if (index1.DiscountType === 2) { // Discount type 2 represents \"percentage\"\r\n                                                // Limit the input to the range of 0 to 100\r\n                                                if (e_val > 100) {\r\n                                                    e.target.value = 100; // Set the input value to 100 if it exceeds 100\r\n                                                } else if (!(e_val >= 0 && e_val < 100)) {\r\n                                                    e.target.value = ''; // Clear the input value if it is less than 0\r\n                                                }\r\n                                            }\r\n                                            index1.Discount = e.target.value;\r\n                                            setChangeAllDiscount(false);\r\n                                            setForceReload(!forceReload);\r\n                                            itemWise_CalculationFunc(index1, undefined, tableList)\r\n                                        }}\r\n\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        {/* <div className=\"bottom-div\">\r\n                            <span>Amount:</span>\r\n                            <samp id={`roundedTotalAmount-${index1.id}`}>\r\n                                {_cfunc.amountCommaSeparateFunc(index1.roundedTotalAmount)}\r\n                            </samp>\r\n                        </div> */}\r\n                    </>\r\n                );\r\n            },\r\n        },\r\n\r\n        { //------------- Comment column ----------------------------------\r\n            text: \"Comment\",\r\n            classes: 'table-cursor-pointer',\r\n            dataField: \"\",\r\n            attrs: (cell, row, rowIndex, colIndex) => ({ 'data-label': \"Comment\" }),\r\n            formatter: (value, row, k) => {\r\n                return (\r\n                    <span >\r\n                        <Input type=\"text\"\r\n                            id={`Comment${k}`}\r\n                            key={`Comment${row.id}`}\r\n\r\n                            defaultValue={row.Comment}\r\n                            autoComplete=\"off\"\r\n                            onChange={(e) => { row[\"Comment\"] = e.target.value }}\r\n                        />\r\n                    </span>\r\n                )\r\n            },\r\n\r\n            headerStyle: () => {\r\n                return { width: '9%', textAlign: 'center' };\r\n            }\r\n        },\r\n    ];\r\n\r\n    const defaultSorted = [\r\n        {\r\n            dataField: \"ItemName\", // if dataField is not match to any column you defined, it will be ignored.\r\n            order: \"asc\", // desc or asc\r\n        },\r\n    ];\r\n\r\n    function supplierOnchange(e) {\r\n\r\n        setsupplierSelect(e);\r\n        if (subPageMode === url.ORDER_4) {\r\n            dispatch(_act.getSupplierAddress(e.value))\r\n            let Date = currentDate_ymd\r\n            if ((e.FSSAIExipry === \"\") || (e.FSSAIExipry === null)) {\r\n                setFSSAI_Date_Is_Expired(\"There is No FSSAI Expiry Date Please Insert FSSAI Date!\")\r\n            }\r\n            else if (e.FSSAIExipry < Date) {\r\n                setFSSAI_Date_Is_Expired(\"FSSAI Expired\")\r\n            } else {\r\n                setFSSAI_Date_Is_Expired(\"\")\r\n            }\r\n        }\r\n        setOrderItemTable([])\r\n        setItemSelect('')\r\n        goButtonHandler(e.value)\r\n    };\r\n\r\n    function itemSelectOnchange(e) {\r\n        setItemSelect(e)\r\n    };\r\n\r\n    function Open_Assign_func() {\r\n        setisOpen_assignLink(false)\r\n        dispatch(_act.editPartyItemIDSuccess({ Status: false }));\r\n        _cfunc.breadcrumbReturnFunc({ dispatch, userAcc: userPageAccessState })\r\n        goButtonHandler()\r\n    };\r\n\r\n    function RouteOnChange(event) {\r\n        setsupplierSelect('')\r\n        dispatch(_act.GetVenderSupplierCustomer({ subPageMode, RouteID: event.value, \"PartyID\": commonPartyDropSelect.value }))\r\n        setRouteSelect(event)\r\n    }\r\n\r\n    async function assignItem_onClick(event) {\r\n        event.stopPropagation();\r\n        const isParty = subPageMode === url.ORDER_1 ? supplierSelect.value : commonPartyDropSelect.value\r\n        const config = {\r\n            editId: isParty,\r\n            Party: isParty,\r\n            btnmode: mode.assingLink,\r\n            subPageMode,\r\n            btnId: `btn-assingLink-${supplierSelect.value}`\r\n        }\r\n\r\n        const isConfirmed = await customAlert({\r\n            Type: 7,\r\n            Message: \"Do you confirm your choice?\",\r\n        });\r\n\r\n        if (isConfirmed) {\r\n\r\n            const jsonBody = JSON.stringify({ ..._cfunc.loginJsonBody(), ...{ PartyID: isParty } });\r\n\r\n            dispatch(editPartyItemID({ jsonBody, config }))\r\n            dispatch(_act.GoButton_For_Order_AddSuccess([]))\r\n        };\r\n    };\r\n\r\n    function itemWise_CalculationFunc(row, IsComparGstIn, tableList) {\r\n        debugger\r\n        const calculate = orderCalculateFunc(row) //order calculation function \r\n        row[\"Amount\"] = calculate.roundedTotalAmount\r\n        let sumOfAmount = tableList.reduce((accumulator, currentObject) => accumulator + (Number(currentObject[\"Amount\"]) || 0), 0);\r\n        // setOrderAmount(sumOfAmount.toFixed(2))\r\n        dispatch(_act.BreadcrumbShowCountlabel(`${\"Order Amount\"} :${_cfunc.amountCommaSeparateFunc(Number(sumOfAmount).toFixed(2))}`))\r\n    };\r\n\r\n    const item_AddButtonHandler = () => {\r\n\r\n        setGoBtnDissable(true)\r\n\r\n        let isfound = orderItemTable.find(i => i.value === itemSelect.value);\r\n\r\n        if (!itemSelect) {\r\n            customAlert({ Type: 4, Message: `Select Item Name` })\r\n        }\r\n        else if (isfound === undefined) {\r\n            setOrderItemTable([itemSelect].concat(orderItemTable))\r\n        }\r\n        else {\r\n            customAlert({ Type: 3, Message: \"This Item Already Exist\" })\r\n        }\r\n        setItemSelect('')\r\n    }\r\n\r\n    const goButtonHandler = async (selectSupplier) => {\r\n\r\n        if (!supplierSelect > 0 && !selectSupplier) {\r\n            await customAlert({\r\n                Type: 4,\r\n                Message: `Please Select ${fieldLabel.Supplier}`\r\n            })\r\n            return;\r\n        }\r\n        let btnId = `go-btn${subPageMode}`\r\n        _cfunc.btnIsDissablefunc({ btnId, state: true })\r\n\r\n        dispatch(_act.BreadcrumbShowCountlabel(initial_BredcrumbMsg))\r\n\r\n\r\n        let PO_Body = {\r\n            Party: selectSupplier ? selectSupplier : supplierSelect.value,\r\n            Customer: commonPartyDropSelect.value,\r\n            RateParty: commonPartyDropSelect.value,\r\n            EffectiveDate: orderdate,\r\n            OrderID: (pageMode === mode.defaultsave) ? 0 : editVal.id,\r\n            OrderType: order_Type.PurchaseOrder,\r\n        }\r\n        let SO_body = {\r\n            Party: commonPartyDropSelect.value, //swap  party and customer for sale oerder\r\n            Customer: selectSupplier ? selectSupplier : supplierSelect.value,//swap  party and customer for sale oerder\r\n            RateParty: selectSupplier ? selectSupplier : supplierSelect.value,\r\n            EffectiveDate: orderdate,\r\n            OrderID: (pageMode === mode.defaultsave) ? 0 : editVal.id,\r\n            OrderType: order_Type.SaleOrder,\r\n        }\r\n\r\n\r\n        let jsonBody;   //json body decleration \r\n        if (subPageMode === url.ORDER_4) {\r\n            jsonBody = JSON.stringify({ ...SO_body, });\r\n        }\r\n        else {\r\n            jsonBody = JSON.stringify({ ...PO_Body, });\r\n        }\r\n        let config = { subPageMode, jsonBody, btnId }\r\n        dispatch(_act.GoButton_For_Order_Add(config))\r\n    };\r\n\r\n    // Function to handle the form submission\r\n    const saveHandler = async (event) => {\r\n        event.preventDefault();\r\n\r\n        // Extract the ID from the target element\r\n        const buttonId = event.target.id;\r\n        const gotoInvoiceMode = buttonId.substring(0, 14) === \"gotoInvoiceBtn\";\r\n\r\n        try {\r\n            // Get the division from the loginPartyID function\r\n            const division = commonPartyDropSelect.value;\r\n            const supplier = supplierSelect.value;\r\n\r\n            const validationMessages = []; // Stores validation messages for items\r\n            const orderItems = []; // Stores processed order items\r\n            const vdcPoValidationMessages = []; // Stores VDC-PO validation messages\r\n            let sumOfOrderAmount = 0;//total grand total amount\r\n\r\n            // Loop through the order items\r\n            await orderItemTable.forEach(item => {\r\n\r\n                // Check for item quantity and rate validity\r\n                if ((item.Quantity > 0) && !(item.Rate > 0)) {\r\n                    validationMessages.push({ [item.ItemName]: \"This Item Rate Is Required...\" });\r\n                }\r\n                else if (pageMode === mode.edit) {\r\n                    // Check if the item quantity or unit has changed in edit mode\r\n                    const isChange = (\r\n                        !(Number(item.edit_Qty) === Number(item.Quantity))\r\n                        || !(item.edit_Unit_id === item.Unit_id)\r\n                        || !(Number(item.edit_Discount) === Number(item.Discount))\r\n                        || !(Number(item.edit_DiscountType) === Number(item.DiscountType))\r\n                    );\r\n\r\n                    let isEdit = 0;\r\n                    if (isChange && !(item.edit_Qty === 0)) {\r\n                        isEdit = 1;\r\n                    }\r\n                    processOrderItem({ item, isEdit });\r\n                }\r\n                else {\r\n                    const isEdit = 0;\r\n                    processOrderItem({ item, isEdit });\r\n                }\r\n                sumOfOrderAmount = (Number(sumOfOrderAmount) + Number(item[\"Amount\"])).toFixed(2) //total grand total amount\r\n\r\n            });\r\n\r\n            // Function to handle order items\r\n            function processOrderItem({ item, isEdit }) {\r\n\r\n                // Handle quantity for null or undefined values\r\n                item.Quantity = !Number(item.Quantity) ? 0 : item.Quantity;\r\n\r\n                // Check various conditions for item processing\r\n                if ((item.Quantity > 0) && (item.Rate > 0) && !(orderTypeSelect.value === 3)) {\r\n                    // Item is not deleted and has value changes\r\n                    processValueChanged({ item, isEdit, isDelete: false });\r\n                }\r\n                else if (!(item.Quantity < 0) && (item.editrowId) && !(orderTypeSelect.value === 3)) {\r\n                    // Item is deleted (set quantity to 0) and has value changes\r\n                    processValueChanged({ item, isEdit, isDelete: true });\r\n                }\r\n                else if (!(item.Quantity < 0) && !(item.editrowId) && !(orderTypeSelect.value === 3)) {\r\n                    // Item is not deleted and has no value changes, skip\r\n                    return;\r\n                }\r\n                else if ((item.Quantity > 0) && (item.Rate > 0)) { // Logic for VDC-PO\r\n                    if (item.Bom) {\r\n                        if ((orderItems.length === 0)) {\r\n                            // First VDC-PO item, not deleted and has value changes\r\n                            processValueChanged({ item, isEdit, isDelete: false });\r\n                        } else {\r\n                            if (vdcPoValidationMessages.length === 0) {\r\n                                vdcPoValidationMessages.push({ [\"VDC-PO Type\"]: \"This Type Of Order Only One Item Quantity Accept...\" });\r\n                            }\r\n                        }\r\n                    } else {\r\n                        vdcPoValidationMessages.push({ [item.ItemName]: \"This Is Not VDC-PO Item...\" });\r\n                    }\r\n                }\r\n                else if ((item.Quantity < 1) && (item.editrowId)) {\r\n                    if (item.Bom) {\r\n                        if ((orderItems.length === 0)) {\r\n                            // First VDC-PO item, deleted and has value changes\r\n                            processValueChanged({ item, isEdit, isDelete: true });\r\n                        } else {\r\n                            if (vdcPoValidationMessages.length === 0) {\r\n                                vdcPoValidationMessages.push({ [\"VDC-PO Type\"]: \"This Type of order Only One Item Quantity Accept...\" });\r\n                            }\r\n                        }\r\n                    } else {\r\n                        vdcPoValidationMessages.push({ [item.ItemName]: \"This Is Not VDC-PO Item...\" });\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Function to handle value changes in order items\r\n            function processValueChanged({ item, isEdit, isDelete }) {\r\n\r\n                const calculated = orderCalculateFunc(item, { GSTIn_1: supplierSelect.GSTIN, GSTIn_2: _cfunc.loginUserGSTIN() });\r\n\r\n                // Create an object for the order item\r\n                const orderItem = {\r\n                    Item: item.Item_id,\r\n                    Quantity: isDelete ? 0 : item.Quantity,\r\n                    MRP: item.MRP_id,\r\n                    MRPValue: item.MRPValue,\r\n                    Rate: item.Rate,\r\n                    Unit: item.Unit_id,\r\n                    BaseUnitQuantity: (Number(item.BaseUnitQuantity) * Number(item.Quantity)).toFixed(2),\r\n                    Margin: \"\",\r\n                    GST: item.GST_id,\r\n                    CGST: calculated.CGST_Amount,\r\n                    SGST: calculated.SGST_Amount,\r\n                    IGST: calculated.IGST_Amount,\r\n                    GSTPercentage: calculated.GST_Percentage,\r\n                    CGSTPercentage: calculated.CGST_Percentage,\r\n                    SGSTPercentage: calculated.SGST_Percentage,\r\n                    IGSTPercentage: calculated.IGST_Percentage,\r\n                    BasicAmount: calculated.basicAmount,\r\n                    GSTAmount: calculated.roundedGstAmount,\r\n                    Amount: calculated.roundedTotalAmount,\r\n                    TaxType: 'GST',\r\n                    DiscountType: item.DiscountType,\r\n                    Discount: Number(item.Discount) || 0,\r\n                    DiscountAmount: Number(calculated.disCountAmt).toFixed(2),\r\n                    IsDeleted: isEdit, // Set to 1 if item is edited, otherwise 0 for delete\r\n                    Comment: item.Comment\r\n                };\r\n\r\n                orderItems.push(orderItem);\r\n            }\r\n\r\n            // Get terms and conditions\r\n            const termsAndConditions = await termsAndConTable.map(item => ({\r\n                TermsAndCondition: item.value,\r\n                IsDeleted: item.IsDeleted\r\n            }));\r\n\r\n\r\n            // Check for any validation errors\r\n            if (vdcPoValidationMessages.length > 0) {\r\n                customAlert({\r\n                    Type: 4,\r\n                    Message: vdcPoValidationMessages,\r\n                });\r\n                return;\r\n            }\r\n            if (validationMessages.length > 0) {\r\n                customAlert({\r\n                    Type: 4,\r\n                    Message: validationMessages,\r\n                });\r\n                return;\r\n            }\r\n            if (orderItems.length === 0) {\r\n                customAlert({\r\n                    Type: 4,\r\n                    Message: \"Please Select 1 Item Quantity\",\r\n                });\r\n                return;\r\n            }\r\n            if (orderTypeSelect.length === 0) {\r\n                customAlert({\r\n                    Type: 4,\r\n                    Message: \"Please Select PO Type\",\r\n                });\r\n                return;\r\n            }\r\n            if ((termsAndConditions.length === 0) && !(subPageMode === url.ORDER_2)\r\n                && !(subPageMode === url.ORDER_4) && !(subPageMode === url.IB_ORDER)\r\n            ) {\r\n                customAlert({\r\n                    Type: 4,\r\n                    Message: \"Please Enter One Terms And Condition\",\r\n                });\r\n                return;\r\n            }\r\n\r\n            const po_JsonBody = {\r\n                Customer: division,\r\n                Supplier: supplier,\r\n                OrderType: order_Type.PurchaseOrder,\r\n                IsConfirm: false  // PO Order then IsConfirm true\r\n            }\r\n            const SO_JsonBody = {\r\n                Customer: supplier,// swipe supllier \r\n                Supplier: division,// swipe Customer\r\n                OrderType: order_Type.SaleOrder,\r\n                IsConfirm: true   // SO Order then IsConfirm true\r\n            }\r\n            const IB_JsonBody = {\r\n                DemandDate: orderdate,\r\n                DemandAmount: sumOfOrderAmount,\r\n                DemandItem: orderItems,\r\n                Customer: division,\r\n                Supplier: supplier,\r\n                OrderType: order_Type.PurchaseOrder,\r\n            }\r\n            const comm_jsonBody = {\r\n                OrderDate: deliverydate,// order Date as a delivery date \r\n                DeliveryDate: deliverydate,\r\n                OrderAmount: sumOfOrderAmount,\r\n                OrderItem: orderItems,\r\n\r\n                Description: description,\r\n                BillingAddress: billAddr.value,\r\n                ShippingAddress: shippAddr.value,\r\n                OrderNo: 1,\r\n                FullOrderNumber: \"PO0001\",\r\n                Division: division,\r\n                POType: orderTypeSelect.value,\r\n                POFromDate: orderTypeSelect.value === 1 ? currentDate_ymd : poFromDate,\r\n                POToDate: orderTypeSelect.value === 1 ? currentDate_ymd : poToDate,\r\n                CreatedBy: _cfunc.loginUserID(),\r\n                UpdatedBy: _cfunc.loginUserID(),\r\n                OrderTermsAndConditions: termsAndConditions\r\n            };\r\n\r\n\r\n            let jsonBody;   //json body decleration \r\n            if (subPageMode === url.IB_ORDER) {\r\n                jsonBody = JSON.stringify({ ...comm_jsonBody, ...IB_JsonBody });\r\n            }\r\n            else if (subPageMode === url.ORDER_4) {\r\n                jsonBody = JSON.stringify({ ...comm_jsonBody, ...SO_JsonBody });\r\n            }\r\n            else {\r\n                jsonBody = JSON.stringify({ ...comm_jsonBody, ...po_JsonBody });\r\n            }\r\n            // +*********************************\r\n\r\n            if (pageMode === mode.edit) {\r\n                dispatch(_act.updateOrderIdAction({ jsonBody, updateId: editVal.id, gotoInvoiceMode }))\r\n\r\n            } else {\r\n\r\n                dispatch(_act.saveOrderAction({ jsonBody, subPageMode, gotoInvoiceMode }))\r\n            }\r\n        } catch (error) {\r\n            _cfunc.CommonConsole(\"order_save_\", error);\r\n        }\r\n    };\r\n\r\n    if (!(userPageAccessState === \"\")) {\r\n        return (\r\n            <React.Fragment>\r\n                <MetaTags>{_cfunc.metaTagLabel(userPageAccessState)}</MetaTags>\r\n                <PageLoadingSpinner isLoading={!pageField} />\r\n                <div className=\"page-container1\">\r\n                    {invoiceGoBtnloading && <div className=\"c_spinner-container\">\r\n                        <div className=\"d-flex\">\r\n                            <div className=\"\">\r\n                                <span className=\"font-size-18 color-primary\">Please Wait...</span>\r\n                            </div>\r\n                            <DashboardLoader />\r\n                        </div>\r\n\r\n                    </div>}\r\n\r\n                    <div className=\"page-content\">\r\n\r\n                        <NewCommonPartyDropdown pageMode={pageMode} />\r\n\r\n                        <div>\r\n                            <div className=\"px-2 c_card_filter header text-black\" >{/* Order Date And Supplier Name,Go_Button*/}\r\n\r\n                                <div>\r\n                                    <Row >\r\n                                        <Col sm=\"4\" >\r\n                                            <FormGroup className=\" row mt-2\" >\r\n                                                <Label className=\"col-sm-5 p-2\"\r\n                                                    style={{ width: \"115px\" }}>Delivery Date</Label>\r\n                                                <Col sm=\"7\">\r\n                                                    <C_DatePicker\r\n                                                        options={{\r\n                                                            altInput: true,\r\n                                                            altFormat: \"d-m-Y\",\r\n                                                            dateFormat: \"Y-m-d\",\r\n                                                        }}\r\n                                                        name=\"deliverydate\"\r\n                                                        value={deliverydate}\r\n                                                        disabled={(orderItemTable.length > 0 || pageMode === \"edit\") ? true : false}\r\n                                                        onChange={(e, date) => { setdeliverydate(date) }}\r\n                                                    />\r\n                                                </Col>\r\n                                            </FormGroup>\r\n                                        </Col>\r\n\r\n                                        {(subPageMode === ORDER_4) ?\r\n                                            <Col sm=\"3\">\r\n                                                <FormGroup className=\" row mt-2 \" >\r\n                                                    <Label className=\"col-sm-5 p-2\"\r\n                                                        style={{ width: \"65px\" }}>{fieldLabel.Route}</Label>\r\n                                                    <Col sm=\"7\">\r\n\r\n                                                        <C_Select\r\n                                                            classNamePrefix=\"react-select\"\r\n                                                            value={routeSelect}\r\n                                                            options={RouteOptions}\r\n                                                            isDisabled={(orderItemTable.length > 0 || pageMode === \"edit\" || goBtnloading) ? true : false}\r\n                                                            // onChange={(e) => { setRouteSelect(e) }}\r\n                                                            onChange={(e) => { RouteOnChange(e) }}\r\n                                                            isLoading={routesDropLoading}\r\n                                                            styles={{\r\n                                                                menu: provided => ({ ...provided, zIndex: 2 })\r\n                                                            }}\r\n                                                        />\r\n\r\n                                                    </Col>\r\n                                                </FormGroup>\r\n                                            </Col >\r\n                                            : <Col sm='3' />\r\n                                        }\r\n\r\n                                        <Col sm=\"4\" className=\"\">\r\n                                            <FormGroup className=\"row mt-2\" >\r\n                                                <Label className=\"col-sm-5 p-2\"\r\n                                                    style={{ width: \"115px\" }}>{fieldLabel.Supplier}</Label>\r\n                                                <Col sm=\"7\">\r\n                                                    <C_Select\r\n                                                        value={supplierSelect}\r\n                                                        isDisabled={(orderItemTable.length > 0 || pageMode === \"edit\" || goBtnloading) ? true : false}\r\n                                                        options={supplierOptions}\r\n                                                        onChange={supplierOnchange}\r\n                                                        isLoading={supplierDropLoading}\r\n                                                        styles={{\r\n                                                            menu: provided => ({ ...provided, zIndex: 2 })\r\n                                                        }}\r\n                                                    />\r\n                                                    {(FSSAI_Date_Is_Expired) &&\r\n                                                        <span className=\"text-danger f-8\">\r\n                                                            <small>{FSSAI_Date_Is_Expired} </small>\r\n                                                        </span>\r\n                                                    }\r\n                                                </Col>\r\n\r\n                                            </FormGroup>\r\n                                        </Col>\r\n\r\n                                        <Col sm=\"1\">                      {/*Go_Button  */}\r\n\r\n                                            <div className=\"row mt-2  pr-1\">\r\n                                                {pageMode === mode.defaultsave ?\r\n                                                    // (!selecedItemWiseOrder && itemSelectDropOptions.length > 0) ?\r\n                                                    (!goBtnDissable) ?\r\n\r\n                                                        < Go_Button\r\n                                                            loading={goBtnloading}\r\n                                                            id={`go-btn${subPageMode}`}\r\n                                                            onClick={(e) => {\r\n                                                                if (commonPartyDropSelect.value === 0) {\r\n                                                                    customAlert({\r\n                                                                        Type: 4,\r\n                                                                        Message: \"Select Party\",\r\n                                                                    });\r\n                                                                    return;\r\n                                                                }\r\n                                                                if (supplierSelect === '') {\r\n                                                                    customAlert({\r\n                                                                        Type: 4,\r\n                                                                        Message: `Please Select ${fieldLabel.Supplier}`\r\n                                                                    })\r\n                                                                    return;\r\n                                                                }\r\n                                                                setSelecedItemWiseOrder(false)\r\n                                                                setOrderItemTable(itemSelectDropOptions)\r\n                                                                setItemSelect({ value: '', label: \"All\" })\r\n                                                                setGoBtnDissable(true)\r\n                                                            }} />\r\n                                                        : (!selecedItemWiseOrder) &&\r\n                                                        <Change_Button\r\n                                                            id={`change-btn${subPageMode}`}\r\n                                                            onClick={(e) => {\r\n                                                                setsupplierSelect('')\r\n                                                                setGoBtnDissable(false)\r\n                                                                setSelecedItemWiseOrder(true)\r\n                                                                setOrderItemTable([])\r\n                                                                setItemSelect({ value: '', label: \"All\" })\r\n                                                                dispatch(_act.GoButton_For_Order_AddSuccess([]))\r\n                                                            }}\r\n                                                        />\r\n                                                    : null\r\n                                                }\r\n                                            </div>\r\n                                        </Col>\r\n\r\n                                    </Row>\r\n                                    <Row>\r\n                                        <Col sm=\"4\">                               {/*  Description field */}\r\n                                            <FormGroup className=\"row mt-1\" >\r\n                                                <Label className=\"col-sm-5 p-2\"\r\n                                                    style={{ width: \"115px\" }}>Description</Label>\r\n                                                <div className=\"col-7\">\r\n                                                    <Input type=\"text\"\r\n                                                        value={description}\r\n                                                        placeholder='Enter Order Description'\r\n                                                        onChange={e => setDescription(e.target.value)}\r\n                                                    />\r\n\r\n                                                </div>\r\n\r\n                                            </FormGroup>\r\n                                        </Col >\r\n                                        <Col sm=\"3\" />\r\n                                        <Col sm=\"4\">\r\n                                            <FormGroup className=\"row mt-1\" >\r\n                                                <Label className=\"col-sm-5 p-2\"\r\n                                                    style={{ width: \"115px\" }}>{fieldLabel.Item}</Label>\r\n\r\n                                                <Col sm=\"7\">\r\n                                                    <C_Select\r\n                                                        value={itemSelect}\r\n                                                        isDisabled={(pageMode === \"edit\" || goBtnloading) ? true : false}\r\n                                                        options={itemSelectDropOptions}\r\n                                                        isLoading={goBtnloading}\r\n                                                        onChange={itemSelectOnchange}\r\n                                                        styles={{\r\n                                                            menu: provided => ({ ...provided, zIndex: 2 })\r\n                                                        }}\r\n                                                    />\r\n                                                </Col>\r\n\r\n                                            </FormGroup>\r\n                                        </Col>\r\n                                        <Col sm=\"1\"  >\r\n\r\n                                            {pageMode === mode.defaultsave ?\r\n                                                <div className=\"row mt-2 pr-1\"  >\r\n                                                    {(selecedItemWiseOrder && itemSelectDropOptions.length > 0) ?\r\n                                                        <Button\r\n                                                            className\r\n                                                            color=\"btn btn-outline-info border-1 font-size-12 \"\r\n                                                            disabled={goBtnloading}\r\n                                                            onClick={() => item_AddButtonHandler()} >\r\n                                                            Add Item\r\n                                                        </Button>\r\n                                                        :\r\n                                                        ((itemSelectDropOptions.length > 0)) &&\r\n                                                        <Button\r\n                                                            color=\"btn btn-secondary border-1 font-size-12\"\r\n                                                            className='text-blac1k'\r\n                                                            disabled={goBtnloading}\r\n                                                            onClick={() => {\r\n                                                                setsupplierSelect('')\r\n                                                                setGoBtnDissable(false)\r\n                                                                setSelecedItemWiseOrder(true)\r\n                                                                setOrderItemTable([])\r\n                                                                setItemSelect('')\r\n                                                                dispatch(_act.GoButton_For_Order_AddSuccess([]))\r\n                                                            }} >\r\n                                                            Item Wise\r\n                                                        </Button>\r\n\r\n                                                    }\r\n\r\n                                                </div> : null\r\n                                            }\r\n                                        </Col>\r\n\r\n                                    </Row>\r\n                                </div>\r\n\r\n                            </div>\r\n\r\n                            <div className=\"px-2  mb-1 c_card_body text-black\" >              {/*  Description and Delivery Date  field */}\r\n                                <div className=\"row\">                                         {/*  Description and Delivery Date  field */}\r\n\r\n\r\n                                    {/*  Delivery Date field */}\r\n                                    {/* {!(subPageMode === url.IB_ORDER) ?\r\n                                    <div className=\"col col-6\" >\r\n                                        <FormGroup className=\" row mt-3 \" >\r\n                                            <Label className=\" p-2\"\r\n                                                style={{ width: \"130px\" }}>Delivery Date</Label>\r\n                                            <div className=\"col col-6 sm-1\">\r\n                                                <C_DatePicker\r\n                                                    id=\"deliverydate\"\r\n                                                    name=\"deliverydate\"\r\n                                                    value={deliverydate}\r\n                                                    disabled={pageMode === \"edit\" ? true : false}\r\n                                                    onChange={(e, date) => { setdeliverydate(date) }}\r\n                                                />\r\n                                            </div>\r\n\r\n                                        </FormGroup>\r\n                                    </div > : null} */}\r\n\r\n                                </div>\r\n\r\n                                {subPageMode === url.ORDER_1 ? <div>                             {/*  Billing Address   and Shipping Address*/}\r\n                                    <div className=\"row mt-2 \">\r\n\r\n                                        <div className=\"col col-6\">                             {/* Billing Address */}\r\n                                            <FormGroup className=\"row  \" >\r\n                                                <Label className=\" p-2\"\r\n                                                    style={{ width: \"115px\" }}>Billing Address</Label>\r\n                                                <div className=\"col col-6\">\r\n                                                    <C_Select\r\n                                                        value={billAddr}\r\n                                                        classNamePrefix=\"select2-Customer\"\r\n                                                        options={supplierAddress}\r\n                                                        onChange={(e) => { setbillAddr(e) }}\r\n                                                        isLoading={supplierADDdropLoading}\r\n                                                        styles={{\r\n                                                            menu: provided => ({ ...provided, zIndex: 2 })\r\n                                                        }}\r\n                                                    />\r\n                                                </div>\r\n                                            </FormGroup>\r\n                                        </div >\r\n\r\n                                        <div className=\"col col-6\">                               {/*  Billing Shipping Address */}\r\n                                            <FormGroup className=\" row \" >\r\n                                                <Label className=\" p-2\"\r\n                                                    style={{ width: \"130px\" }}>Shipping Address</Label>\r\n                                                <div className=\"col col-6\">\r\n                                                    <Select\r\n                                                        value={shippAddr}\r\n                                                        classNamePrefix=\"select2-Customer\"\r\n                                                        styles={{\r\n                                                            menu: provided => ({ ...provided, zIndex: 2 })\r\n                                                        }}\r\n                                                        isLoading={supplierADDdropLoading}\r\n                                                        options={supplierAddress}\r\n                                                        onChange={(e) => { setshippAddr(e) }}\r\n                                                    />\r\n                                                </div>\r\n                                            </FormGroup>\r\n                                        </div >\r\n                                    </div>\r\n\r\n                                    <div className=\"row\" >                                        {/**PO Type  (PO From Date and PO To Date)*/}\r\n                                        <div className=\"col col-6\" >                              {/**PO Type */}\r\n                                            <FormGroup className=\" row  \" >\r\n                                                <Label className=\" p-2\"\r\n                                                    style={{ width: \"115px\" }}>PO Type</Label>\r\n                                                <div className=\"col col-6 \">\r\n                                                    <Select\r\n                                                        value={orderTypeSelect}\r\n                                                        classNamePrefix=\"select2-Customer\"\r\n                                                        options={orderTypeOptions}\r\n                                                        onChange={(e) => { setorderTypeSelect(e) }}\r\n                                                        isLoading={orderTypeDropLoading}\r\n                                                        styles={{\r\n                                                            menu: provided => ({ ...provided, zIndex: 2 })\r\n                                                        }}\r\n                                                    />\r\n                                                </div>\r\n                                            </FormGroup>\r\n                                        </div >\r\n                                    </div>\r\n\r\n\r\n                                    {(orderTypeSelect.label === 'Open PO') ?\r\n                                        <div className=\"row\" >                                    {/*PO From Date */}\r\n                                            <div className=\"col col-6\" >\r\n                                                <FormGroup className=\" row \" >\r\n                                                    <Label className=\" p-2\"\r\n                                                        style={{ width: \"115px\" }}>PO From Date</Label>\r\n                                                    <div className=\"col col-6 \">\r\n                                                        <C_DatePicker\r\n                                                            id=\"pofromdate\"\r\n                                                            name=\"pofromdate\"\r\n                                                            value={poFromDate}\r\n                                                            onChange={(e, date) => { setpoFromDate(date) }}\r\n                                                        />\r\n                                                    </div>\r\n                                                </FormGroup>\r\n                                            </div >\r\n\r\n                                            <div className=\"col col-6\" >                        {/*PO To Date */}\r\n                                                <FormGroup className=\" row  \" >\r\n                                                    <Label className=\" p-2\"\r\n                                                        style={{ width: \"130px\" }}>PO To Date</Label>\r\n                                                    <div className=\"col col-6 \">\r\n                                                        <C_DatePicker\r\n                                                            id=\"potodate\"\r\n                                                            name=\"potodate\"\r\n                                                            value={poToDate}\r\n                                                            onChange={(e, date) => { setpoToDate(date) }}\r\n                                                        />\r\n                                                    </div>\r\n                                                </FormGroup>\r\n                                            </div >\r\n                                        </div> : null}\r\n                                </div>\r\n                                    : null}\r\n\r\n                            </div>\r\n\r\n                        </div>\r\n\r\n\r\n                        <ToolkitProvider\r\n                            keyField={\"Item_id\"}\r\n                            data={orderItemTable}\r\n                            columns={pagesListColumns}\r\n                            search\r\n                        >\r\n                            {(toolkitProps,) => (\r\n                                <React.Fragment>\r\n                                    <Row>\r\n                                        <Col xl=\"12\">\r\n                                            <div className=\"table-responsive table \" style={{ minHeight: \"45vh\" }} >\r\n                                                <BootstrapTable\r\n                                                    keyField={\"Item_id\"}\r\n                                                    id=\"table_Arrow\"\r\n                                                    defaultSorted={!selecedItemWiseOrder ? defaultSorted : ''}\r\n                                                    classes='custom-table'\r\n                                                    // headerClasses=\"custom-table\"\r\n                                                    noDataIndication={\r\n                                                        <div className=\"text-danger text-center table-cursor-pointer\">\r\n                                                            Items Not available\r\n                                                        </div>\r\n                                                    }\r\n                                                    onDataSizeChange={(e) => {\r\n                                                        _cfunc.tableInputArrowUpDounFunc(\"#table_Arrow\")\r\n                                                    }}\r\n                                                    {...toolkitProps.baseProps}\r\n                                                />\r\n                                                {mySearchProps(toolkitProps.searchProps)}\r\n                                            </div>\r\n                                        </Col>\r\n                                    </Row>\r\n\r\n                                </React.Fragment>\r\n                            )}\r\n                        </ToolkitProvider>\r\n\r\n                        <OrderPageTermsTable tableList={termsAndConTable} setfunc={setTermsAndConTable} privious={editVal.TermsAndConditions} tableData={orderItemTable} />\r\n\r\n                        {\r\n                            ((orderItemTable.length > 0) && (!isOpen_assignLink)) ? <div className=\"row save1\" style={{ paddingBottom: 'center' }}>\r\n                                <Col>\r\n                                    <SaveButton\r\n                                        loading={saveBtnloading}\r\n                                        editCreatedBy={editCreatedBy}\r\n                                        pageMode={pageMode}\r\n                                        userAcc={userPageAccessState}\r\n                                        onClick={saveHandler}\r\n                                        forceDisabled={gotoInvoiceBtnLoading}\r\n                                    />\r\n                                </Col>\r\n                                {\r\n                                    (subPageMode === url.ORDER_4) && (pageMode === mode.defaultsave) ?\r\n                                        <Col>\r\n                                            <GotoInvoiceBtn\r\n                                                forceDisabled={gotoInvoiceBtnLoading}\r\n                                                loading={gotoInvoiceBtnLoading}\r\n                                                pageMode={pageMode}\r\n                                                userAcc={userPageAccessState}\r\n                                                onClick={saveHandler}\r\n                                            />\r\n                                        </Col> : null}\r\n                            </div>\r\n                                : <div className=\"row save1\"></div>\r\n                        }\r\n                    </div >\r\n                </div>\r\n                <Modal\r\n                    isOpen={isOpen_assignLink}\r\n                    toggle={() => {\r\n                        setisOpen_assignLink(false)\r\n                    }}\r\n                    size=\"xl\"\r\n                >\r\n\r\n                    <PartyItems\r\n                        editValue={assingItemData.Data}\r\n                        isAssing={true}\r\n                        masterPath={url.PARTYITEM}\r\n                        redirectPath={subPageMode}\r\n                        isOpenModal={Open_Assign_func}\r\n                        pageMode={mode.assingLink}\r\n                    />\r\n\r\n                </Modal>\r\n\r\n            </React.Fragment >\r\n        )\r\n    } else {\r\n        return null\r\n    }\r\n\r\n}\r\n\r\nexport default Order\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Purchase\\Order\\OrderList.js",["3275","3276","3277","3278","3279","3280","3281","3282","3283","3284","3285","3286","3287","3288","3289","3290","3291","3292","3293","3294"],"import React, { useEffect, useLayoutEffect, useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { Col, FormGroup, Label } from \"reactstrap\";\r\nimport { customAlert } from \"../../../CustomAlert/ConfirmDialog\";\r\nimport { C_DatePicker, C_Select } from \"../../../CustomValidateForm\";\r\nimport Order from \"./Order\";\r\nimport * as _act from \"../../../store/actions\";\r\nimport * as _cfunc from \"../../../components/Common/CommonFunction\";\r\nimport CommonPurchaseList from \"../../../components/Common/CommonPurchaseList\"\r\n\r\nimport { Go_Button, PageLoadingSpinner } from \"../../../components/Common/CommonButton\";\r\nimport * as report from '../../../Reports/ReportIndex'\r\nimport { url, mode, pageId } from \"../../../routes/index\"\r\nimport { order_Type } from \"../../../components/Common/C-Varialbes\";\r\nimport { OrderPage_Edit_ForDownload_API } from \"../../../helpers/backend_helper\";\r\nimport { comAddPageFieldFunc, initialFiledFunc } from \"../../../components/Common/validationFunction\";\r\nimport { getOrderApprovalDetailAction, postOrderConfirms_API, postOrderConfirms_API_Success } from \"../../../store/actions\";\r\nimport { orderApprovalFunc, orderApprovalMessage } from \"./orderApproval\";\r\nimport { priceListByCompay_Action, priceListByCompay_ActionSuccess } from \"../../../store/Administrator/PriceList/action\";\r\nimport OrderView from \"./OrderView\";\r\nimport OrderView_Modal from \"./OrderView\";\r\nimport PartyDropdown_Common from \"../../../components/Common/PartyDropdown\";\r\n\r\n\r\nconst OrderList = () => {\r\n\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n    const currentDate_ymd = _cfunc.date_ymd_func();\r\n\r\n    const fileds = {\r\n        FromDate: currentDate_ymd,\r\n        ToDate: currentDate_ymd,\r\n        Supplier: { value: \"\", label: \"All\" },\r\n        CustomerType: [{ value: \"\", label: \"All\" }]\r\n    }\r\n\r\n    const [state, setState] = useState(() => initialFiledFunc(fileds))\r\n    const [subPageMode] = useState(history.location.pathname);\r\n    const [pageMode, setPageMode] = useState(mode.defaultList);\r\n\r\n    const [otherState, setOtherState] = useState({\r\n        masterPath: '',\r\n        makeBtnShow: false,\r\n        makeBtnShow: '',\r\n        makeBtnName: '',\r\n        IBType: '',\r\n        showAprovalBtn: false\r\n    });\r\n\r\n    const reducers = useSelector(\r\n        (state) => ({\r\n            unhideMsg: state.GRNReducer.hideMsg,\r\n            tableList: state.OrderReducer.orderList,\r\n            GRNitem: state.GRNReducer.GRNitem,\r\n            makeIBInvoice: state.InvoiceReducer.makeIBInvoice,\r\n            deleteMsg: state.OrderReducer.deleteMsg,\r\n            updateMsg: state.OrderReducer.updateMsg,\r\n            postMsg: state.OrderReducer.postMsg,\r\n            editData: state.OrderReducer.editData,\r\n            userAccess: state.Login.RoleAccessUpdateData,\r\n            pageField: state.CommonPageFieldReducer.pageFieldList,\r\n\r\n            orderApprovalMsg: state.OrderReducer.orderApprovalMsg,\r\n            approvalDetail: state.OrderReducer.approvalDetail,\r\n\r\n            customerType: state.PriceListReducer.priceListByCompany,\r\n            customerTypeDropLoading: state.PriceListReducer.listBtnLoading,\r\n\r\n            orderConfirmMsg: state.OrderReducer.orderConfirmMsg,\r\n            userAccess: state.Login.RoleAccessUpdateData,\r\n            pageField: state.CommonPageFieldReducer.pageFieldList,\r\n\r\n            supplier: state.CommonAPI_Reducer.vendorSupplierCustomer,\r\n            supplierDropLoading: state.CommonAPI_Reducer.vendorSupplierCustomerLoading,\r\n\r\n            gobutton_Add_invoice: state.InvoiceReducer.gobutton_Add,\r\n            goBtnloading: state.OrderReducer.goBtnLoading,\r\n            listBtnLoading: (state.OrderReducer.listBtnLoading\r\n                || state.InvoiceReducer.listBtnLoading\r\n                || state.PdfReportReducers.listBtnLoading\r\n                || state.OrderReducer.orderConfirmLoading\r\n                || state.InvoiceReducer.listBtnLoading\r\n                || state.GRNReducer.listBtnLoading\r\n                || state.PdfReportReducers.ReportBtnLoading),\r\n        })\r\n    );\r\n\r\n    const gobtnId = `gobtn-${subPageMode}`\r\n    const {\r\n        pageField,\r\n        GRNitem,\r\n        supplier,\r\n        makeIBInvoice,\r\n        orderApprovalMsg,\r\n        approvalDetail,\r\n        customerType,\r\n        orderConfirmMsg,\r\n        gobutton_Add_invoice,\r\n        customerTypeDropLoading,\r\n        supplierDropLoading,\r\n        unhideMsg\r\n    } = reducers;\r\n\r\n    const values = { ...state.values }\r\n    const { fieldLabel } = state;\r\n\r\n    const tableAction = {\r\n        getList: _act.getOrderListPage,\r\n        deleteId: _act.deleteOrderId,\r\n        postSucc: _act.saveOrderActionSuccess,\r\n        updateSucc: _act.updateOrderIdSuccess,\r\n        deleteSucc: _act.deleteOrderIdSuccess,\r\n    }\r\n\r\n\r\n\r\n    // Featch Modules List data  First Rendering\r\n    useLayoutEffect(() => {\r\n\r\n        let page_Id = '';\r\n        let page_Mode = mode.defaultList;\r\n        let masterPath = '';\r\n        let makeBtnShow = false;\r\n        let IBType = '';\r\n        let newBtnPath = '';\r\n        let makeBtnName = '';\r\n        let showAprovalBtn = false;\r\n\r\n        if (subPageMode === url.ORDER_LIST_1) {\r\n            page_Id = pageId.ORDER_LIST_1;\r\n            masterPath = url.ORDER_1;\r\n            newBtnPath = url.ORDER_1;\r\n        }\r\n        else if (subPageMode === url.ORDER_LIST_2) {\r\n            page_Id = pageId.ORDER_LIST_2\r\n            masterPath = url.ORDER_2;\r\n            newBtnPath = url.ORDER_2;\r\n            showAprovalBtn = true\r\n        }\r\n        else if (subPageMode === url.IB_ORDER_PO_LIST) {\r\n            page_Id = pageId.IB_ORDER_PO_LIST\r\n            masterPath = url.IB_ORDER;\r\n            newBtnPath = url.IB_ORDER;\r\n            IBType = \"IBPO\"\r\n        }\r\n        else if (subPageMode === url.IB_ORDER_SO_LIST) {\r\n            page_Id = pageId.IB_ORDER_SO_LIST\r\n            masterPath = url.IB_ORDER;\r\n            makeBtnShow = true;\r\n            makeBtnName = \"Make IBInvoice\"\r\n            IBType = \"IBSO\"\r\n        }\r\n        else if (subPageMode === url.ORDER_LIST_4) {\r\n            page_Id = pageId.ORDER_LIST_4\r\n            masterPath = url.ORDER_4;\r\n            page_Mode = mode.modeSTPList\r\n            newBtnPath = url.ORDER_4;\r\n            makeBtnShow = true;\r\n            makeBtnName = \"Make Invoice\"\r\n            showAprovalBtn = true                      //Showing  AprovalBtn  in sales order list\r\n\r\n        }\r\n        else if (subPageMode === url.IB_INVOICE_STP) {\r\n            page_Id = pageId.IB_INVOICE_STP\r\n            page_Mode = mode.modeSTPsave\r\n            makeBtnShow = true;\r\n            makeBtnName = \"Make Invoice\"\r\n            IBType = \"IBSO\"\r\n        }\r\n        else if (subPageMode === url.GRN_STP_1) {\r\n            page_Id = pageId.GRN_STP_1\r\n            page_Mode = mode.modeSTPsave\r\n            makeBtnShow = true;\r\n            makeBtnName = \"Make GRN\"\r\n        }\r\n        else if (subPageMode === url.GRN_STP_3) {\r\n            page_Id = pageId.GRN_STP_3\r\n            page_Mode = mode.modeSTPsave\r\n            makeBtnShow = true;\r\n            makeBtnName = \"Make GRN\"\r\n\r\n        }\r\n\r\n        setOtherState({ masterPath, makeBtnShow, newBtnPath, makeBtnName, IBType, showAprovalBtn })\r\n        setPageMode(page_Mode)\r\n        dispatch(_act.commonPageFieldListSuccess(null))\r\n        dispatch(_act.commonPageFieldList(page_Id))\r\n        // dispatch(_act.BreadcrumbShowCountlabel(`${\"Order Count\"} :0`))\r\n        if (!(_cfunc.loginSelectedPartyID() === 0)) {\r\n            dispatch(_act.GetVenderSupplierCustomer({ subPageMode, PartyID: _cfunc.loginSelectedPartyID() }))\r\n            goButtonHandler(\"event\", IBType)\r\n        }\r\n        dispatch(priceListByCompay_Action());\r\n\r\n        return () => {\r\n            dispatch(_act.commonPageFieldListSuccess(null))\r\n            dispatch(_act.getOrderListPageSuccess([]))//for clear privious order list  \r\n            dispatch(_act.orderSinglegetSuccess({ Status: false }))\r\n            dispatch(_act.GetVenderSupplierCustomerSuccess([]))\r\n            dispatch(priceListByCompay_ActionSuccess([]))\r\n        }\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (subPageMode === url.GRN_STP_3) {\r\n            dispatch(_act.BreadcrumbRadioButtonView(true));\r\n        }\r\n    }, [])\r\n\r\n\r\n    useEffect(() => {\r\n        if (pageField) {\r\n            const fieldArr = pageField.PageFieldList\r\n            comAddPageFieldFunc({ state, setState, fieldArr })\r\n        }\r\n    }, [pageField])\r\n\r\n    useEffect(() => {\r\n        if (GRNitem.Status === true && GRNitem.StatusCode === 200) {\r\n            history.push({\r\n                pathname: GRNitem.path,\r\n                page_Mode: GRNitem.page_Mode,\r\n            })\r\n        }\r\n    }, [GRNitem])\r\n\r\n    useEffect(() => {\r\n\r\n        if (makeIBInvoice.Status === true && makeIBInvoice.StatusCode === 200) {\r\n            history.push({\r\n                pathname: makeIBInvoice.path,\r\n                page_Mode: makeIBInvoice.page_Mode,\r\n            })\r\n        }\r\n    }, [makeIBInvoice]);\r\n\r\n    useEffect(() => {\r\n        if (gobutton_Add_invoice.Status === true && gobutton_Add_invoice.StatusCode === 200) {\r\n            history.push({\r\n                pathname: gobutton_Add_invoice.path,\r\n            })\r\n        }\r\n    }, [gobutton_Add_invoice]);\r\n\r\n    useEffect(() => {\r\n\r\n        if (orderConfirmMsg.Status === true && orderConfirmMsg.StatusCode === 200) {\r\n            dispatch(postOrderConfirms_API_Success({ Status: false }))\r\n            goButtonHandler(\"event\",)\r\n            customAlert({\r\n                Type: 1,\r\n                Message: orderConfirmMsg.Message,\r\n            })\r\n\r\n\r\n        } else if (orderApprovalMsg.Status === true) {\r\n            dispatch(postOrderConfirms_API_Success({ Status: false }))\r\n            customAlert({\r\n                Type: 2,\r\n                Message: JSON.stringify(orderConfirmMsg.Message),\r\n            })\r\n        }\r\n    }, [orderConfirmMsg]);\r\n\r\n    useEffect(() => {\r\n\r\n        orderApprovalMessage({ dispatch, orderApprovalMsg, goButtonHandler })\r\n\r\n    }, [orderApprovalMsg]);\r\n\r\n    useEffect(() => {\r\n        orderApprovalFunc({ dispatch, approvalDetail })\r\n    }, [approvalDetail]);\r\n\r\n    useEffect(() => {\r\n        if (unhideMsg.Status === true && unhideMsg.StatusCode === 200) {\r\n            dispatch(_act.hideInvoiceForGRFActionSuccess({ Status: false }));\r\n            goButtonHandler(\"event\")\r\n            customAlert({\r\n                Type: 1,\r\n                Message: unhideMsg.Message,\r\n            })\r\n        } else if (unhideMsg.Status === true) {\r\n            dispatch(_act.hideInvoiceForGRFActionSuccess({ Status: false }));\r\n            customAlert({\r\n                Type: 2,\r\n                Message: JSON.stringify(unhideMsg.Message),\r\n            })\r\n        }\r\n\r\n    }, [unhideMsg]);\r\n\r\n\r\n\r\n    const supplierOptions = supplier.map((i) => ({\r\n        value: i.id,\r\n        label: i.Name,\r\n    }));\r\n\r\n    supplierOptions.unshift({\r\n        value: \"\",\r\n        label: \" All\"\r\n    });\r\n\r\n    const customerTypeOptions = customerType.map((index) => ({\r\n        value: index.id,\r\n        label: index.Name,\r\n    }));\r\n\r\n    function oderAprovalBtnFunc({ editId, btnId }) {\r\n\r\n        // _cfunc.btnIsDissablefunc({ btnId, state: false })\r\n        let config = {}\r\n        config.btnId = btnId;\r\n        config.orderId = editId;\r\n        dispatch(getOrderApprovalDetailAction(config))\r\n    }\r\n\r\n    const makeBtnFunc = (list = [], btnId) => {\r\n\r\n        const obj = list[0]\r\n\r\n        const customer = {\r\n            value: obj.CustomerID,\r\n            label: obj.Customer,\r\n            GSTIN: obj.CustomerGSTIN,\r\n            IsTCSParty: obj.IsTCSParty,\r\n            ISCustomerPAN: obj.CustomerPAN\r\n        }\r\n        const jsonBody = JSON.stringify({\r\n            FromDate: obj.OrderDate,\r\n            Customer: obj.CustomerID,\r\n            Party: _cfunc.loginSelectedPartyID(),\r\n            OrderIDs: obj.id.toString(),\r\n        });\r\n\r\n        if (subPageMode === url.IB_INVOICE_STP) {\r\n            dispatch(_act.makeIB_InvoiceAction({\r\n                jsonBody, path: url.IB_INVOICE,\r\n                pageMode: mode.defaultsave,\r\n                customer,\r\n                btnId\r\n            }));\r\n        }\r\n        else if (subPageMode === url.ORDER_LIST_4) {\r\n            dispatch(_act.GoButtonForinvoiceAdd({\r\n                jsonBody,\r\n                btnId,\r\n                customer,\r\n                subPageMode: url.INVOICE_1,\r\n                path: url.INVOICE_1,\r\n                pageMode: mode.defaultsave,\r\n\r\n            }));\r\n        }\r\n        else {\r\n            var isGRNSelect = ''\r\n            var challanNo = ''\r\n            const grnRef = []\r\n            if (list.length > 0) {\r\n                list.forEach(ele => {\r\n                    if (ele.hasSelect) {\r\n                        grnRef.push({\r\n                            Invoice: (subPageMode === url.GRN_STP_3) ? ele.id : null,\r\n                            Order: !(subPageMode === url.GRN_STP_3) ? ele.POType === \"Challan\" ? '' : ele.id : null,\r\n                            ChallanNo: ele.FullOrderNumber,\r\n                            Inward: url.GRN_STP_3 ? true : false,\r\n                            Challan: ele.POType === \"Challan\" ? ele.id : ''\r\n                        });\r\n                        isGRNSelect = isGRNSelect.concat(`${ele.id},`)\r\n                        challanNo = challanNo.concat(`${ele.FullOrderNumber},`)\r\n                    }\r\n                });\r\n\r\n                if (isGRNSelect) {\r\n                    let path = (subPageMode === url.GRN_STP_3 ? url.GRN_ADD_3 : url.GRN_ADD_1)\r\n                    isGRNSelect = isGRNSelect.replace(/,*$/, '');//****** withoutLastComma  function */\r\n                    challanNo = challanNo.replace(/,*$/, '');           //****** withoutLastComma  function */\r\n\r\n                    let isMode = 1                               // define isMode for MakeBtn API\r\n\r\n                    if (list[0].POType === \"Challan\") {\r\n                        isMode = 2\r\n                    }\r\n                    else if (subPageMode === url.GRN_STP_3) {\r\n                        isMode = 3\r\n                    }\r\n                    const jsonBody = JSON.stringify({\r\n                        OrderIDs: isGRNSelect,\r\n                        Mode: isMode\r\n                    })\r\n\r\n                    dispatch(_act.makeGRN_Mode_1Action({ jsonBody, subPageMode, pageMode, path: path, grnRef, challanNo, btnId: `btn-makeBtn-${obj.id}` }))\r\n\r\n                } else {\r\n                    alert(\"Please Select Order1\")\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function editBodyfunc(config) {\r\n        const { rowData, btnId } = config;\r\n        _cfunc.btnIsDissablefunc({ btnId, state: true })\r\n        try {\r\n            const jsonBody = JSON.stringify({\r\n                Party: rowData.SupplierID,\r\n                Customer: rowData.CustomerID,\r\n                EffectiveDate: rowData.OrderDate,\r\n                OrderID: rowData.id,\r\n                RateParty: rowData.CustomerID,\r\n                OrderType: subPageMode === url.ORDER_4 ? order_Type.SaleOrder : order_Type.PurchaseOrder\r\n            })\r\n            dispatch(_act.editOrderId({ jsonBody, ...config }));\r\n        } catch (error) { _cfunc.btnIsDissablefunc({ btnId, state: false }) }\r\n    }\r\n\r\n    function downBtnFunc(config) {\r\n        config[\"ReportType\"] = report.order1;\r\n        dispatch(_act.getpdfReportdata(OrderPage_Edit_ForDownload_API, config))\r\n    }\r\n\r\n\r\n\r\n    async function hideBtnFunc(rowdata) {\r\n        const isHideValue = rowdata[0].isHideValue\r\n        const RowInvoiceId = rowdata[0].id\r\n        let config = { InvoiceId: RowInvoiceId, IsHide: isHideValue }\r\n\r\n\r\n        const isConfirmed = await customAlert({\r\n            Type: 7,\r\n            Message: \"Do you want To Unhide Invoice ?\",\r\n        });\r\n\r\n        if (isConfirmed) {\r\n            dispatch(_act.hideInvoiceForGRFAction(config))\r\n        }\r\n\r\n\r\n\r\n    }\r\n\r\n    function viewApprovalBtnFunc(config) {\r\n        dispatch(_act.viewOrderSingleget(config))\r\n    }\r\n\r\n    function goButtonHandler(event, IBType) {\r\n\r\n        _cfunc.btnIsDissablefunc({ btnId: gobtnId, state: true })\r\n        try {\r\n            if ((_cfunc.loginSelectedPartyID() === 0)) {\r\n                customAlert({ Type: 3, Message: \"Please Select Party\" });\r\n                return;\r\n            };\r\n            let filtersBody = {}\r\n            const isCustomerType = values.CustomerType.filter(i => !(i.value === '')).map(obj => obj.value).join(',');\r\n\r\n            const PO_filters = {\r\n                \"FromDate\": values.FromDate,\r\n                \"ToDate\": values.ToDate,\r\n                \"Supplier\": values.Supplier.value,\r\n                \"Customer\": _cfunc.loginSelectedPartyID(),\r\n                \"OrderType\": order_Type.PurchaseOrder,\r\n                \"CustomerType\": \"\",\r\n                \"IBType\": IBType ? IBType : otherState.IBType\r\n            }\r\n            const SO_filters = {\r\n                \"FromDate\": values.FromDate,\r\n                \"ToDate\": values.ToDate,\r\n                \"Supplier\": _cfunc.loginSelectedPartyID(),//Suppiler swipe\r\n                \"Customer\": values.Supplier.value,//customer swipe\r\n                \"OrderType\": order_Type.SaleOrder,\r\n                \"CustomerType\": isCustomerType,\r\n                \"IBType\": IBType ? IBType : otherState.IBType\r\n            }\r\n            const GRN_STP_3_filters = {\r\n                \"FromDate\": values.FromDate,\r\n                \"ToDate\": values.ToDate,\r\n                \"Supplier\": values.Supplier.value,\r\n                \"Customer\": _cfunc.loginSelectedPartyID(),\r\n                \"OrderType\": order_Type.InvoiceToGRN,\r\n                \"CustomerType\": '',\r\n                \"IBType\": IBType ? IBType : otherState.IBType\r\n            }\r\n            if (subPageMode === url.ORDER_LIST_4) {\r\n                filtersBody = JSON.stringify(SO_filters);\r\n            }\r\n            else if (subPageMode === url.GRN_STP_3) {\r\n                filtersBody = JSON.stringify(GRN_STP_3_filters);\r\n            }\r\n            else {\r\n                filtersBody = JSON.stringify(PO_filters);\r\n            }\r\n\r\n            dispatch(_act.getOrderListPage({ subPageMode, filtersBody, btnId: gobtnId }));\r\n\r\n        } catch (error) { _cfunc.btnIsDissablefunc({ btnId: gobtnId, state: false }) }\r\n    }\r\n\r\n    function fromdateOnchange(e, date) {\r\n        setState((i) => {\r\n            const a = { ...i }\r\n            a.values.FromDate = date;\r\n            a.hasValid.FromDate.valid = true\r\n            return a\r\n        })\r\n    }\r\n\r\n    function todateOnchange(e, date) {\r\n        setState((i) => {\r\n            const a = { ...i }\r\n            a.values.ToDate = date;\r\n            a.hasValid.ToDate.valid = true\r\n            return a\r\n        })\r\n    }\r\n\r\n    function supplierOnchange(e) {\r\n        setState((i) => {\r\n            const a = { ...i }\r\n            a.values.Supplier = e;\r\n            a.hasValid.Supplier.valid = true\r\n            return a\r\n        })\r\n    }\r\n\r\n    function customerTypeOnchange(e = []) {\r\n\r\n        if (e.length === 0) {\r\n            e = [{ value: \"\", label: \"All\" }]\r\n        } else {\r\n            e = e.filter(i => !(i.value === ''))\r\n        }\r\n        setState((i) => {\r\n            const a = { ...i }\r\n            a.values.CustomerType = e;\r\n            a.hasValid.CustomerType.valid = true\r\n            return a\r\n        })\r\n    }\r\n\r\n    const selectSaveBtnHandler = (row = []) => {\r\n\r\n\r\n        let ischeck = row.filter(i => (i.selectCheck))\r\n        if (!ischeck.length > 0) {\r\n            customAlert({\r\n                Type: 4,\r\n                Message: \"Please Select One Order\",\r\n            });\r\n            return\r\n        }\r\n        let idString = ischeck.map(obj => obj.id).join(',')\r\n        let jsonBody = { OrderIDs: idString }\r\n        dispatch(postOrderConfirms_API({ jsonBody }))\r\n    }\r\n\r\n    const HeaderContent = () => {\r\n        return (\r\n            <div className=\"px-2   c_card_filter text-black\" >\r\n                <div className=\"row\" >\r\n\r\n                    <Col lg={subPageMode === url.ORDER_LIST_4 ? 0 : 3} >\r\n                        <FormGroup className=\"mb- row mt-3 \" >\r\n                            <Label className=\"col-sm-5 p-2\"\r\n                                style={{ width: \"65px\" }}>\r\n                                {!(fieldLabel.FromDate === '') ? fieldLabel.FromDate : \"FromDate\"}\r\n                            </Label>\r\n                            <Col sm=\"8\">\r\n                                <C_DatePicker\r\n                                    options={{\r\n                                        altInput: true,\r\n                                        altFormat: \"d-m-Y\",\r\n                                        dateFormat: \"Y-m-d\",\r\n                                    }}\r\n                                    name='FromDate'\r\n                                    value={values.FromDate}\r\n                                    onChange={fromdateOnchange}\r\n                                />\r\n                            </Col>\r\n                        </FormGroup>\r\n                    </Col>\r\n\r\n                    <Col lg={subPageMode === url.ORDER_LIST_4 ? 0 : 3} >\r\n                        <FormGroup className=\"mb- row mt-3 \" >\r\n                            <Label className=\"col-sm-5 p-2\"\r\n                                style={{ width: \"65px\" }}>\r\n                                {!(fieldLabel.ToDate === '') ? fieldLabel.ToDate : \"ToDate\"}\r\n                            </Label>\r\n                            <Col sm=\"8\">\r\n                                <C_DatePicker\r\n                                    options={{\r\n                                        altInput: true,\r\n                                        altFormat: \"d-m-Y\",\r\n                                        dateFormat: \"Y-m-d\",\r\n                                    }}\r\n                                    name=\"ToDate\"\r\n                                    value={values.ToDate}\r\n                                    onChange={todateOnchange}\r\n                                />\r\n                            </Col>\r\n                        </FormGroup>\r\n                    </Col>\r\n\r\n                    {subPageMode === url.ORDER_LIST_4 ?\r\n                        <Col lg={3}>\r\n                            <FormGroup className=\"mb-1 row mt-3 \" >\r\n                                <Label className=\"col-sm p-2\"\r\n                                >\r\n                                    {!(fieldLabel.CustomerType === '') ? fieldLabel.CustomerType : \"Customer Type\"}\r\n                                </Label>\r\n                                <Col sm=\"8\">\r\n                                    <C_Select\r\n                                        name=\"CustomerType\"\r\n                                        classNamePrefix=\"select2-Customer\"\r\n                                        value={values.CustomerType}\r\n                                        options={customerTypeOptions}\r\n                                        onChange={customerTypeOnchange}\r\n                                        isMulti={true}\r\n                                        isLoading={customerTypeDropLoading}\r\n                                        styles={{\r\n                                            menu: provided => ({ ...provided, zIndex: 2 })\r\n                                        }}\r\n                                    />\r\n                                </Col>\r\n                            </FormGroup>\r\n                        </Col >\r\n                        :\r\n                        <Col sm='1' />\r\n                    }\r\n\r\n                    <Col lg={3}>\r\n                        <FormGroup className=\"mb-1 row mt-3 \" >\r\n                            <Label className=\"col-md-4 p-2\"\r\n                                style={{ width: \"90px\" }}>\r\n                                {!(fieldLabel.Supplier === '') ? fieldLabel.Supplier : \"Supplier\"}\r\n                            </Label>\r\n                            <Col sm=\"7\">\r\n                                <C_Select\r\n                                    name=\"Supplier\"\r\n                                    classNamePrefix=\"select2-Customer\"\r\n                                    value={values.Supplier}\r\n                                    options={supplierOptions}\r\n                                    onChange={supplierOnchange}\r\n                                    isLoading={supplierDropLoading}\r\n                                    styles={{\r\n                                        menu: provided => ({ ...provided, zIndex: 2 })\r\n                                    }}\r\n                                />\r\n                            </Col>\r\n                        </FormGroup>\r\n                    </Col >\r\n\r\n                    {/* <Col sm=\"1\" /> */}\r\n                    <Col sm=\"1\" className=\"mt-3 mb-2 \">\r\n                        <Go_Button loading={reducers.goBtnloading} id={gobtnId} onClick={goButtonHandler} />\r\n                    </Col>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    function partySelectButtonHandler() {\r\n        goButtonHandler()\r\n        dispatch(_act.GetVenderSupplierCustomer({ subPageMode, PartyID: _cfunc.loginSelectedPartyID() }));\r\n    }\r\n\r\n    function partyOnChngeButtonHandler() {\r\n        dispatch(_act.getOrderListPageSuccess([]));\r\n        dispatch(_act.GetVenderSupplierCustomerSuccess([]));\r\n        setState((i) => {\r\n            let a = { ...i }\r\n            a.values.CustomerType = [{ value: \"\", label: \"All\" }]\r\n            a.values.Supplier = { value: \"\", label: \"All\" }\r\n            a.hasValid.CustomerType.valid = true;\r\n            a.hasValid.Supplier.valid = true;\r\n            return a\r\n        })\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <PageLoadingSpinner isLoading={reducers.goBtnloading || !pageField} />\r\n\r\n            <div className=\"page-content\">\r\n                <PartyDropdown_Common pageMode={pageMode}\r\n                    goButtonHandler={partySelectButtonHandler}\r\n                    changeButtonHandler={partyOnChngeButtonHandler} />\r\n                {\r\n                    (pageField) ?\r\n                        <CommonPurchaseList\r\n                            action={tableAction}\r\n                            reducers={reducers}\r\n                            showBreadcrumb={false}\r\n                            masterPath={otherState.masterPath}\r\n                            newBtnPath={otherState.newBtnPath}\r\n                            makeBtnShow={otherState.makeBtnShow}\r\n                            pageMode={pageMode}\r\n                            HeaderContent={HeaderContent}\r\n                            viewApprovalBtnFunc={viewApprovalBtnFunc}\r\n                            goButnFunc={goButtonHandler}\r\n                            downBtnFunc={downBtnFunc}\r\n                            editBodyfunc={editBodyfunc}\r\n                            makeBtnFunc={makeBtnFunc}\r\n                            hideBtnFunc={hideBtnFunc}\r\n                            ButtonMsgLable={\"Order\"}\r\n                            deleteName={\"FullOrderNumber\"}\r\n                            makeBtnName={otherState.makeBtnName}\r\n                            MasterModal={Order}\r\n                            ViewModal={OrderView}\r\n                            oderAprovalBtnFunc={otherState.showAprovalBtn && oderAprovalBtnFunc}\r\n                            selectCheckParams={{\r\n                                isShow: (subPageMode === url.ORDER_LIST_4),\r\n                                selectSaveBtnHandler: selectSaveBtnHandler,\r\n                                selectSaveBtnLabel: \"Confirm\",\r\n                                selectHeaderLabel: \"Confirm\"\r\n                            }}\r\n                            totalAmountShow={true}\r\n                        />\r\n                        : null\r\n                }\r\n            </div>\r\n\r\n            <OrderView_Modal />{/** order view component */}\r\n\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default OrderList;","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\PartyItemsRedux\\saga.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\PartyItemsRedux\\reducer.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\CommonAPI\\SupplierRedux\\saga.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\PartySubPartyRedux\\saga.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\components\\VerticalLayout\\SidebarContent.js",["3295","3296","3297","3298","3299","3300","3301","3302"],"\r\n\r\nimport PropTypes from \"prop-types\";\r\nimport React, { useEffect, useRef, useCallback } from \"react\";\r\nimport FeatherIcon from \"feather-icons-react\";\r\nimport SimpleBar from \"simplebar-react\";\r\nimport { withTranslation } from \"react-i18next\";\r\nimport MetisMenu from \"metismenujs\";\r\nimport { useHistory, withRouter } from \"react-router-dom\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { roleAceessActionError } from \"../../store/actions\";\r\nimport { loginUserDetails } from \"../Common/CommonFunction\";\r\nimport * as urlRel from \"../../routes/urlRalations\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { customAlert } from \"../../CustomAlert/ConfirmDialog\";\r\nimport { afterloginOneTimeAPI } from \"../Common/AfterLoginApiFunc\";\r\n\r\nconst SidebarContent = (props) => {\r\n  const dispatch = useDispatch();\r\n  const ref = useRef();\r\n  const history = useHistory();\r\n\r\n  const {\r\n    RoleAccessData,\r\n    RoleAccessUpdateData,\r\n    roleAccesssForSidbarError = false,\r\n  } = useSelector((state) => ({\r\n    RoleAccessData: state.Login.roleAccessSidbarData,\r\n    RoleAccessUpdateData: state.Login.RoleAccessUpdateData,\r\n    roleAccesssForSidbarError: state.Login.roleAccesssForSidbarError,\r\n  }));\r\n\r\n  useEffect(async () => {\r\n    if (roleAccesssForSidbarError) {\r\n      // await customAlert({\r\n      //   Type: 2,\r\n      //   Message: `RoleAccess get Api Error `\r\n      // })\r\n\r\n      dispatch(roleAceessActionError(false))\r\n      history.push({ pathname: '/logout' })\r\n    }\r\n  }, [roleAccesssForSidbarError])\r\n\r\n  useEffect(() => {\r\n\r\n    if (RoleAccessUpdateData.length <= 0) {\r\n      let user = loginUserDetails()\r\n      if (user) {\r\n        //api call roleAceessAction Api,partysetting Api , Party Dropdown Api and set localstorage roleId ;\r\n        afterloginOneTimeAPI(user, dispatch);// all common function\r\n      };\r\n    }\r\n  }, [])\r\n\r\n\r\n  const activateParentDropdown = useCallback(item => {\r\n    item.classList.add(\"active\");\r\n    const parent = item.parentElement;\r\n    const parent2El = parent.childNodes[1];\r\n    if (parent2El && parent2El.id !== \"side-menu \") {\r\n      parent2El.classList.add(\"mm-show\");\r\n    }\r\n\r\n    if (parent) {\r\n      parent.classList.add(\"mm-active\");\r\n      const parent2 = parent.parentElement;\r\n\r\n      if (parent2) {\r\n        parent2.classList.add(\"mm-show\"); // ul tag\r\n\r\n        const parent3 = parent2.parentElement; // li tag\r\n\r\n        if (parent3) {\r\n          parent3.classList.add(\"mm-active\"); // li\r\n          parent3.childNodes[0].classList.add(\"mm-active\"); //a\r\n          const parent4 = parent3.parentElement; // ul\r\n          if (parent4) {\r\n            parent4.classList.add(\"mm-show\"); // ul\r\n            const parent5 = parent4.parentElement;\r\n            if (parent5) {\r\n              parent5.classList.add(\"mm-show\"); // li\r\n              parent5.childNodes[0].classList.add(\"mm-active\"); // a tag\r\n            }\r\n          }\r\n        }\r\n      }\r\n      scrollElement(item);\r\n      return false;\r\n    }\r\n    scrollElement(item);\r\n    return false;\r\n  }, [RoleAccessUpdateData.length <= 0]);\r\n\r\n  // Use ComponentDidMount and ComponentDidUpdate method symultaniously\r\n\r\n  useEffect(() => {\r\n    // const pathName = props.location.pathname;\r\n    let pathName = props.location.pathname\r\n    let userAcc = RoleAccessUpdateData.find((inx) => {\r\n      const path = inx.ActualPagePath.toLowerCase()\r\n      return (`/${path}` === (pathName.toLowerCase()))\r\n    })\r\n    if (userAcc === undefined) { }\r\n    else if (!userAcc.RoleAccess_IsShowOnMenu) {\r\n      pathName = urlRel[`${userAcc.ActualPagePath}`]\r\n    }\r\n\r\n    const initMenu = () => {\r\n      new MetisMenu(\"#side-menu\");\r\n      let matchingMenuItem = null;\r\n      const ul = document.getElementById(\"side-menu\");\r\n\r\n      const items = ul.getElementsByTagName(\"a\");\r\n      for (let i = 0; i < items.length; ++i) {\r\n        if (pathName === items[i].pathname) {\r\n          matchingMenuItem = items[i];\r\n          break;\r\n        }\r\n      }\r\n      if (matchingMenuItem) {\r\n        activateParentDropdown(matchingMenuItem);\r\n      }\r\n    };\r\n    initMenu();\r\n  }, [activateParentDropdown, RoleAccessUpdateData.length <= 0]);\r\n\r\n\r\n  useEffect(() => {\r\n    ref.current.recalculate();\r\n  });\r\n\r\n  function scrollElement(item) {\r\n    if (item) {\r\n      const currentPosition = item.offsetTop;\r\n      if (currentPosition > window.innerHeight) {\r\n        ref.current.getScrollElement().scrollTop = currentPosition - 300;\r\n      }\r\n    }\r\n  }\r\n\r\n  // const productMarginReport_Link_Onclick = () => {\r\n\r\n  //   const userDetails = loginUserDetails()\r\n  //   dispatch(getExcel_Button_API(userDetails.IsSCMPartyType === null ? 0 : userDetails.IsSCMPartyType, userDetails.Party_id))\r\n  // }\r\n\r\n  return (\r\n    <React.Fragment>\r\n\r\n      <SimpleBar style={{ maxHeight: \"100%\" }} ref={ref}>\r\n        <div id=\"sidebar-menu\">\r\n          <ul className=\"metismenu list-unstyled \" id=\"side-menu\">\r\n\r\n            {RoleAccessData.map((item) => {\r\n\r\n              if (item.ModuleName === \"Dashboard\") {\r\n                let isdashboard = ''\r\n                if (item.ModuleData.length > 0) { isdashboard = item.ModuleData[0] }\r\n                return (\r\n                  <li >\r\n                    <Link to={{ pathname: `/${isdashboard.ActualPagePath}` }}>\r\n                      <FeatherIcon icon={item.ModuleIcon} />\r\n                      <span>{props.t(isdashboard.ModuleName)}</span>\r\n                    </Link>\r\n                  </li >\r\n                )\r\n              }\r\n\r\n              else return (\r\n                <li >\r\n                  <Link to=\"/#\" className=\"has-arrow\">\r\n                    <FeatherIcon icon={item.ModuleIcon} />\r\n                    <span>{props.t(item.ModuleName)}</span>\r\n                  </Link>\r\n                  <ul className=\"sub-menu\">\r\n                    {item.ModuleData.map((index, j) => {\r\n                      if (index.RoleAccess_IsShowOnMenu === true) {\r\n                        // if (index.ActualPagePath === \"ProductMarginReport\") {\r\n                        //   return (\r\n                        //     <li>\r\n\r\n                        //       <div\r\n                        //         title={`Download ${index.Name}`}\r\n                        //         onClick={productMarginReport_Link_Onclick}>\r\n                        //         {props.t(index.Name)}\r\n                        //       </div>\r\n                        //     </li>\r\n                        //   )\r\n                        // }\r\n                        return (\r\n                          <li>\r\n                            <Link to={{ pathname: `/${index.ActualPagePath}` }}>\r\n                              {props.t(index.Name)}\r\n                            </Link>\r\n                          </li>\r\n                        )\r\n                      }\r\n                    })}\r\n                  </ul>\r\n                </li>\r\n              )\r\n            })}\r\n          </ul>\r\n        </div>\r\n      </SimpleBar>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nSidebarContent.propTypes = {\r\n  location: PropTypes.object,\r\n  t: PropTypes.any,\r\n};\r\n\r\nexport default withTranslation()(withRouter(SidebarContent));\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\PartySubPartyRedux\\action.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\PartyItemsRedux\\action.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\CategoryTypeRedux\\actions.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\ItemsRedux\\action.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\GroupRedux\\action.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\ModulesRedux\\actions.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\RoleAccessRedux\\actions.js",["3303","3304"],"import {\r\n\r\n  ADD_PAGE_HANDLER_FOR_ROLE_ACCESS_lIST_PAGE,\r\n  GET_ROLEACCESS_LIST_PAGE,\r\n  GET_ROLEACCESS_LIST_PAGE_SUCCESS,\r\n  GET_ROLE_ACCESS_LIST_FOR_ROLE_ACCESS_lIST_PAGE,\r\n  GET_ROLE_ACCESS_LIST_FOR_ROLE_ACCESS_lIST_PAGE_SUCCESS,\r\n  GO_BUTTON_HANDLER_FOR_ROLE_ACCESS_lIST_PAGE,\r\n  PAGE_DROPDOWN_FOR_ROLE_ACCESS_lIST,\r\n  PAGE_DROPDOWN_FOR_ROLE_ACCESS_lIST_SUCCESS,\r\n  SAVE_ROLE_ACCESS_ADD_ACTION,\r\n  SAVE_ROLE_ACCESS_ADD_ACTION_SUCCESS,\r\n  SAVE_COPY_ROLE_ACCESS_ACTION,\r\n  SAVE_COPY_ROLE_ACCESS_ACTION_SUCCESS,\r\n  DELETE_ROLE_ACCESS_lIST_SUCCESS,\r\n  DELETE_ROLE_ACCESS_lIST,\r\n  UPDATE_ROLE_ACCESS_lIST,\r\n  UPDATE_ROLE_ACCESS_lIST_SUCCESS,\r\n  EDIT_ROLE_ACCESS_lIST,\r\n  EDIT_ROLE_ACCESS_lIST_SUCCESS,\r\n  DELETE_ROLE_ACCESS_MASTER,\r\n  SET_TABLE_DATA_ROLE_ACCSS_ADD_PAGE_SUCCESS,\r\n  SET_TABLE_DATA_ROLE_ACCSS_ADD_PAGE,\r\n  ROLE_ACCESS_API_ERROR_ACTION,\r\n} from \"./actionType\";\r\n\r\n\r\nexport const GetRoleListForRoleAccessListPage = (id1, id2) => ({\r\n  type: GET_ROLE_ACCESS_LIST_FOR_ROLE_ACCESS_lIST_PAGE,\r\n  id1, id2,\r\n});\r\n\r\nexport const GetRoleListForRoleAccessListPage_Success = (data) => ({\r\n  type: GET_ROLE_ACCESS_LIST_FOR_ROLE_ACCESS_lIST_PAGE_SUCCESS,\r\n  payload: data,\r\n});\r\n\r\n\r\nexport const PageDropdownForRoleAccessList = (id1, id2) => ({\r\n  type: PAGE_DROPDOWN_FOR_ROLE_ACCESS_lIST,\r\n  id1, id2\r\n});\r\n\r\nexport const PageDropdownForRoleAccessList_Success = (data) => ({\r\n  type: PAGE_DROPDOWN_FOR_ROLE_ACCESS_lIST_SUCCESS,\r\n  payload: data,\r\n});\r\n\r\nexport const GO_Button_RoleAccess_AddPage_Action = (id1, id2, id3) => ({\r\n  type: GO_BUTTON_HANDLER_FOR_ROLE_ACCESS_lIST_PAGE,\r\n  id1, id2, id3,\r\n});\r\n\r\n\r\nexport const AddPageHandlerForRoleAccessListPage = (id) => ({\r\n  type: ADD_PAGE_HANDLER_FOR_ROLE_ACCESS_lIST_PAGE,\r\n  id,\r\n});\r\n\r\nexport const saveRoleAccessAddAction = (config = {}) => ({\r\n  type: SAVE_ROLE_ACCESS_ADD_ACTION,\r\n  config,\r\n});\r\n\r\nexport const saveRoleAccessAddActionSuccess = (resp) => ({\r\n  type: SAVE_ROLE_ACCESS_ADD_ACTION_SUCCESS,\r\n  payload: resp,\r\n});\r\n\r\n\r\n// For RoleAccess List Page\r\nexport const getRoleAccessListPage = (jsonbody) => ({\r\n  type: GET_ROLEACCESS_LIST_PAGE,\r\n  jsonbody,\r\n});\r\n\r\nexport const getRoleAccessListPageSuccess = (data) => ({\r\n  type: GET_ROLEACCESS_LIST_PAGE_SUCCESS,\r\n  payload: data,\r\n});\r\n\r\n// Copy RoleAccess For RoleAccess\r\nexport const saveCopyRoleAccessAction = (config = {}) => ({\r\n  type: SAVE_COPY_ROLE_ACCESS_ACTION,\r\n  config,\r\n});\r\n\r\nexport const saveCopyRoleAccessActionSuccess = (resp) => ({\r\n  type: SAVE_COPY_ROLE_ACCESS_ACTION_SUCCESS,\r\n  payload: resp,\r\n});\r\n\r\nexport const DeleteRoleAcess = (config = {}) => ({\r\n  type: DELETE_ROLE_ACCESS_lIST,\r\n  config,\r\n});\r\n\r\n\r\nexport const DeleteRoleAcessSuccess = (data) => ({\r\n  type: DELETE_ROLE_ACCESS_lIST_SUCCESS,\r\n  payload: data,\r\n});\r\n\r\nexport const EditRoleAcessAction = (config = {}) => ({\r\n  type: EDIT_ROLE_ACCESS_lIST,\r\n  config,\r\n});\r\n\r\n\r\nexport const EditRoleAcessActionSuccess = (resp) => ({\r\n  type: EDIT_ROLE_ACCESS_lIST_SUCCESS,\r\n  payload: resp,\r\n});\r\n\r\nexport const updateRoleAcessAction = (config = {}) => ({\r\n  type: UPDATE_ROLE_ACCESS_lIST,\r\n  config,\r\n});\r\n\r\n\r\nexport const updateRoleAcessActionSuccess = (resp) => ({\r\n  type: UPDATE_ROLE_ACCESS_lIST_SUCCESS,\r\n  payload: resp,\r\n});\r\n\r\n\r\nexport const setTableData_roleAccss_AddPageSuccess = (array = []) => ({\r\n  type: SET_TABLE_DATA_ROLE_ACCSS_ADD_PAGE_SUCCESS,\r\n  payload: array,\r\n});\r\n\r\n\r\nexport const RoleAccessApiErrorAction = () => ({\r\n  type: ROLE_ACCESS_API_ERROR_ACTION,\r\n})\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\UserRegistrationRedux\\actions.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\components\\CommonForBoth\\RightSidebar.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\layout\\actions.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\components\\CommonForBoth\\Menus\\LightDark.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\components\\CommonForBoth\\TopbarDropdown\\ProfileMenu.js",["3305","3306","3307","3308","3309"],"import React, { useState, useEffect } from \"react\"\r\nimport PropTypes from 'prop-types'\r\nimport {\r\n  Dropdown,\r\n  DropdownToggle,\r\n  DropdownMenu,\r\n  Modal,\r\n  Input,\r\n  FormGroup,\r\n  Label,\r\n  DropdownItem,\r\n} from \"reactstrap\"\r\n\r\n//i18n\r\nimport { withTranslation } from \"react-i18next\"\r\n// Redux\r\nimport { connect, useDispatch, useSelector } from \"react-redux\"\r\nimport { withRouter, Link, useHistory } from \"react-router-dom\"\r\n\r\n// users\r\nimport { initialFiledFunc, resetFunction } from \"../../Common/validationFunction\"\r\nimport { ChangePassword, ChangePassword_Succes } from \"../../../store/auth/changepassword/action\"\r\nimport { customAlert } from \"../../../CustomAlert/ConfirmDialog\"\r\nimport { passwordRgx } from \"../../../CustomValidateForm/index\";\r\nimport { loginCompanyName, loginIsSCMCompany, loginUserDetails } from \"../../Common/CommonFunction\"\r\n\r\nconst ProfileMenu = props => {\r\n\r\n\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n\r\n  const fileds = {\r\n    LoginName: \"\",\r\n    password: \"\",\r\n    newpassword: \"\"\r\n  }\r\n\r\n  // Declare a new state variable, which we'll call \"menu\"\r\n  const [menu, setMenu] = useState(false)\r\n\r\n  const [username, setusername] = useState(\"Admin\")\r\n  const [employeeName, setEmployeeName] = useState(\"Admin\")\r\n  const [modal_backdrop, setmodal_backdrop] = useState(false);\r\n  const [state, setState] = useState(() => initialFiledFunc(fileds))\r\n\r\n  const [currentPwd, setCurrentPwd] = useState(\"\");\r\n  const [newPwd, setNewPwd] = useState(\"\");\r\n  const [confirmPwd, setConfirmPwd] = useState(\"\");\r\n  const [passwordsMatch, setPasswordsMatch] = useState(false);\r\n\r\n  const [newPwdError, setNewPwdError] = useState(\"\");\r\n\r\n  const { user, postMsg, loading } = useSelector((state) => ({\r\n    loading: state.ChangePasswordReducer.loading,\r\n    user: state.Login.afterLoginUserDetails,\r\n    postMsg: state.ChangePasswordReducer.postMsg,\r\n  }))\r\n\r\n  useEffect(() => {\r\n\r\n    if (localStorage.getItem(\"EmployeeName\")) {\r\n      const employeeName = localStorage.getItem(\"EmployeeName\")\r\n      const userName = localStorage.getItem(\"UserName\")\r\n      setEmployeeName(employeeName)\r\n      setusername(userName)\r\n    }\r\n  }, [props.success, user])\r\n\r\n  useEffect(async () => {\r\n    if ((postMsg.Status === true) && (postMsg.StatusCode === 200)) {\r\n\r\n      dispatch(ChangePassword_Succes({ Status: false }))\r\n      setState(() => resetFunction(fileds, state))// Clear form values  \r\n      setmodal_backdrop(false)\r\n      customAlert({\r\n        Type: 1,\r\n        Message: postMsg.Message,\r\n      })\r\n\r\n    } else if\r\n      (postMsg.Status === true) {\r\n      dispatch(ChangePassword_Succes({ Status: false }))\r\n      customAlert({\r\n        Type: 3,\r\n        Message: JSON.stringify(postMsg.Message),\r\n      })\r\n    }\r\n  }, [postMsg])\r\n\r\n  function tog_backdrop() {\r\n    setmodal_backdrop(!modal_backdrop)\r\n    removeBodyCss()\r\n  }\r\n  function removeBodyCss() {\r\n    document.body.classList.add(\"no_padding\")\r\n  }\r\n\r\n  const currentpwdOnchange = (e) => {\r\n    setCurrentPwd(e.target.value)\r\n  }\r\n\r\n  const newpwdOnchange = (e) => {\r\n\r\n    let val = e.target.value\r\n    const result = passwordRgx.test(val);\r\n    if (!result) {\r\n      setNewPwdError(\"Invalid password format.\")\r\n    }\r\n    else {\r\n      setNewPwdError(\"\")\r\n\r\n    }\r\n    setNewPwd(e.target.value);\r\n    setConfirmPwd('');\r\n    setPasswordsMatch(false);\r\n  }\r\n\r\n  const confirmpwdOnchange = (e) => {\r\n\r\n    let val = e.target.value;\r\n    const result = passwordRgx.test(val);\r\n\r\n    if (!result) {\r\n      setNewPwdError(\"Invalid password format.\");\r\n    } else {\r\n      setNewPwdError(\"\");\r\n    }\r\n\r\n    if (newPwd === val) {\r\n      setConfirmPwd(val);\r\n      setPasswordsMatch(true);\r\n    } else {\r\n      setConfirmPwd(val);\r\n      setPasswordsMatch(false);\r\n    }\r\n  };\r\n\r\n  const onChangeDivisionHandler = () => {\r\n    history.push({ pathname: \"/division\" })\r\n  }\r\n\r\n  const SaveHandler = async (event) => {\r\n\r\n    event.preventDefault();\r\n\r\n    if ((newPwd.length < 3) || (newPwd.length < 8)) {\r\n      customAlert({\r\n        Type: 3,\r\n        Message: \"Set NewPassoword\",\r\n      });\r\n      return\r\n    }\r\n    else if (!passwordsMatch) {\r\n      customAlert({\r\n        Type: 3,\r\n        Message: \"Confirm does not match to NewPassword \",\r\n      });\r\n      return\r\n    }\r\n\r\n    const jsonBody = JSON.stringify({\r\n      LoginName: username,\r\n      password: currentPwd,\r\n      newpassword: newPwd\r\n    });\r\n\r\n    const isConfirmed = await customAlert({\r\n      Type: 7,\r\n      Message: \"Do you Want to Change Password ?\",\r\n    });\r\n\r\n    if (isConfirmed) {\r\n      dispatch(ChangePassword({ jsonBody }));\r\n\r\n    };\r\n  };\r\n  // const handleMouseEnter = () => {\r\n  //   debugger\r\n  //   document.getElementById('user-detail-div').style.display = 'block';\r\n  // };\r\n\r\n  // const handleMouseLeave = () => {\r\n  //   document.getElementById('user-detail-div').style.display = 'none';\r\n  // };\r\n\r\n  const [isMouseOver, setIsMouseOver] = useState(false);\r\n\r\n  const handleMouseEnter = () => {\r\n    setIsMouseOver(true);\r\n  };\r\n\r\n  const handleMouseLeave = () => {\r\n    setIsMouseOver(false);\r\n  };\r\n  let FooterDetails = loginUserDetails()\r\n  let CompanyName = loginCompanyName()\r\n  let IsSCMCompany = loginIsSCMCompany() === 1 ? \"IsSCM\" : \"Non-SCM\"\r\n  return (\r\n    <React.Fragment>\r\n      <from>\r\n        <Modal\r\n\r\n          isOpen={modal_backdrop}\r\n          toggle={() => {\r\n            tog_backdrop()\r\n          }}\r\n          backdrop={'static'}\r\n          id=\"staticBackdrop\"\r\n          className=\"modal-dialog-centered \"\r\n        >\r\n          <div className=\"modal-header\">\r\n            <h5 className=\"modal-title\" id=\"staticBackdropLabel\">Change Password</h5>\r\n            <button type=\"button\" className=\"btn-close\"\r\n              onClick={() => {\r\n                setmodal_backdrop(false)\r\n              }} aria-label=\"Close\"></button>\r\n          </div>\r\n          <div className=\"modal-body row\">\r\n\r\n\r\n            <div className=\" col col-7 text-black\">\r\n              <FormGroup className=\"mb-2 col col-sm-9 \">\r\n                <Label htmlFor=\"validationCustom01\"> Old Password </Label>\r\n                <Input\r\n                  // defaultValue={\"\"}\r\n                  type=\"password\"\r\n                  value={currentPwd}\r\n                  autoComplete=\"off\"\r\n                  autoFocus={true}\r\n                  onChange={currentpwdOnchange}\r\n                  placeholder=\"Enter Old Password\"\r\n                />\r\n\r\n              </FormGroup>\r\n\r\n              <FormGroup className=\"mb-3 col col-sm-9\">\r\n                <Label> New Password </Label>\r\n                <Input\r\n                  value={newPwd}\r\n                  type=\"text\"\r\n                  placeholder=\"Enter New Password\"\r\n                  autoComplete='off'\r\n                  className=\"form-control\"\r\n                  // autoFocus={true}\r\n                  onChange={newpwdOnchange}\r\n                />\r\n                {(newPwdError.length > 0) && (\r\n                  <span className=\"text-danger font-size-12\">{newPwdError}</span>\r\n                )}\r\n              </FormGroup>\r\n\r\n              <FormGroup className=\"mb-3 col col-sm-9\">\r\n                <Label> Confirm Password </Label>\r\n                <Input\r\n                  value={confirmPwd}\r\n                  type=\"text\"\r\n                  placeholder=\"Enter Confirm Password\"\r\n                  autoComplete=\"off\"\r\n                  // autoFocus={true}\r\n                  onChange={e => {\r\n                    confirmpwdOnchange(e);\r\n                  }}\r\n                />\r\n                {confirmPwd.length > 0 && (\r\n                  <span className={passwordsMatch ? \"text-success font-size-12\" : \"text-danger font-size-12\"}>\r\n                    {passwordsMatch ? \"Passwords match!\" : \"Passwords do not match.\"}\r\n                  </span>\r\n                )}\r\n              </FormGroup>\r\n            </div>\r\n            <div className=\"col col-1\">\r\n              <span className=\"text-danger\">\r\n                *Note\r\n              </span>\r\n            </div>\r\n\r\n            <div className=\"col col-3  font-size-14\">\r\n              <span>\r\n                must be 8-16 char and include at least one A-Z letter,\r\n                one a-z letter, one 0-9, and one special character (@$!%*?&).\r\n              </span>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"modal-footer\">\r\n            <button type=\"button\" className=\"btn btn-light\" onClick={() => {\r\n              setmodal_backdrop(false)\r\n            }}>Close</button>\r\n            {loading ? <button type=\"button\" className=\"btn btn-primary  \"\r\n              onClick={SaveHandler}\r\n            >\r\n              <div className=\"dot-pulse\"> <span> Change Password</span>     &nbsp;\r\n                <div className=\"bounce1\" style={{ background: \"white\" }}></div>\r\n                <div className=\"bounce2\" style={{ background: \"white\" }}></div>\r\n                <div className=\"bounce3\" style={{ background: \"white\" }}></div>\r\n              </div>\r\n            </button>\r\n              : <button type=\"button\" className=\"btn btn-primary w-20\"\r\n                onClick={SaveHandler}\r\n              >Change Password</button>}\r\n\r\n          </div>\r\n        </Modal>\r\n        {/* <div\r\n          id=\"user-detail-div\"\r\n          style={{ display: isMouseOver && !menu ? 'block' : 'none' }}\r\n          onMouseEnter={handleMouseEnter}\r\n          onMouseLeave={handleMouseLeave}\r\n        >\r\n          <div className=\"dropdown-menu-dark dropdown-menu-end dropdown-menu show\" style={{ padding: 'inherit' }}>\r\n            <div className=\"dropdown-item\"><label className=\"text-info\">Party</label> : <span>{FooterDetails.PartyName}</span></div>\r\n            <div className=\"dropdown-item\"><label className=\"text-info\">Role</label> : <span>{FooterDetails.RoleName}</span></div>\r\n            <div className=\"dropdown-item\"><label className=\"text-info\">Company</label> : <span>{CompanyName}&nbsp;&nbsp;({IsSCMCompany})</span></div>\r\n          </div>\r\n        </div> */}\r\n\r\n\r\n        <Dropdown\r\n          isOpen={menu}\r\n          toggle={() => setMenu(!menu)}\r\n          className=\"d-inline-block\"\r\n\r\n        >\r\n          <div\r\n            // onMouseEnter={handleMouseEnter}\r\n            // onMouseLeave={handleMouseLeave}\r\n          >\r\n            <DropdownToggle\r\n              className=\"btn header-item bg-soft-light border-start border-end\"\r\n              id=\"page-header-user-dropdown\"\r\n              tag=\"button\"\r\n\r\n            >\r\n\r\n              <span className=\" d-xl-inline-block ms-2 me-1\">{employeeName}</span>\r\n              <i className=\"mdi mdi-chevron-down d-none d-xl-inline-block\" />\r\n            </DropdownToggle>\r\n          </div>\r\n          <DropdownMenu className=\"dropdown-menu-end\">\r\n            <DropdownItem>\r\n          <div className=\"text-left\"><label className=\"text-info font-size-18\">{FooterDetails.PartyName}</label> </div>\r\n            <div className=\"mb-1\"><span className=\" text-muted\">Role</span> : <span className=\"text-black\">{FooterDetails.RoleName}</span></div>\r\n            <div className=\"\"><span>Company</span> : <span className=\"text-black\">{CompanyName}&nbsp;&nbsp;({IsSCMCompany})</span></div>\r\n            </DropdownItem>\r\n            <DropdownItem divider />\r\n\r\n            {localStorage.getItem(\"isMultipleDivision\") && //If division  then only\r\n              <DropdownItem>\r\n                <span onClick={onChangeDivisionHandler} className=\"dropdown-item\">\r\n                  <i className=\"bx bx-user font-size-16 align-middle me-1  text-primary\" />\r\n                  <span>{props.t(\"Change Division\")}</span>\r\n                </span>\r\n              </DropdownItem>}\r\n\r\n            <DropdownItem style={{ cursor: \"pointer\" }} onClick={() => {\r\n              tog_backdrop()\r\n            }} className=\"dropdown-item\">\r\n              <i className=\"fas fa-lock\" style={{ marginRight: \"7px\" }}></i>\r\n              <span>{props.t(\"Change Password\")}</span>\r\n            </DropdownItem >\r\n\r\n\r\n          \r\n              <Link to=\"/logout\" className=\"dropdown-item\" >\r\n                <i className=\"bx bx-power-off font-size-16 align-middle me-1 text-danger fw-bold\" />\r\n                <span className=\"\">{props.t(\"Logout\")}</span>\r\n              </Link>\r\n\r\n         \r\n          </DropdownMenu>\r\n        </Dropdown>\r\n\r\n      </from >\r\n    </React.Fragment >\r\n  )\r\n}\r\n\r\nProfileMenu.propTypes = {\r\n  success: PropTypes.any,\r\n  t: PropTypes.any\r\n}\r\n\r\nconst mapStatetoProps = state => {\r\n  const { error, success } = state.Profile\r\n  return { error, success }\r\n}\r\n\r\nexport default withRouter(\r\n  connect(mapStatetoProps, {})(withTranslation()(ProfileMenu))\r\n)\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\components\\CommonForBoth\\TopbarDropdown\\NotificationDropdown.js",["3310","3311"],"import React, { useState } from \"react\"\r\nimport PropTypes from 'prop-types'\r\nimport { Link } from \"react-router-dom\"\r\nimport { Dropdown, DropdownToggle, DropdownMenu, Row, Col } from \"reactstrap\"\r\nimport SimpleBar from \"simplebar-react\"\r\n\r\n//Import Icons\r\nimport FeatherIcon from \"feather-icons-react\";\r\n\r\n//Import images\r\nimport avatar3 from \"../../../assets/images/users/avatar-3.jpg\"\r\nimport avatar4 from \"../../../assets/images/users/avatar-4.jpg\"\r\n\r\n//i18n\r\nimport { withTranslation } from \"react-i18next\"\r\n\r\nconst NotificationDropdown = props => {\r\n  // Declare a new state variable, which we'll call \"menu\"\r\n  const [menu, setMenu] = useState(false)\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Dropdown\r\n        isOpen={menu}\r\n        toggle={() => setMenu(!menu)}\r\n        className=\"dropdown d-inline-block\"\r\n        tag=\"li\"\r\n      >\r\n        {/* <DropdownToggle\r\n          className=\"btn header-item noti-icon position-relative\"\r\n          tag=\"button\"\r\n          id=\"page-header-notifications-dropdown\"\r\n        >\r\n          <FeatherIcon\r\n            icon=\"bell\"\r\n            className=\"icon-lg\"\r\n          /> */}\r\n          {/* <span className=\"badge bg-danger rounded-pill\">5</span>\r\n        </DropdownToggle> */}\r\n\r\n        <DropdownMenu className=\"dropdown-menu-lg dropdown-menu-end p-0\">\r\n          <div className=\"p-3\">\r\n            <Row className=\"align-items-center\">\r\n              <Col>\r\n                <h6 className=\"m-0\"> {props.t(\"Notifications\")} </h6>\r\n              </Col>\r\n              <div className=\"col-auto\">\r\n                <Link to=\"#\" className=\"small\">\r\n                  {\" \"}\r\n                  View All\r\n                </Link>\r\n              </div>\r\n            </Row>\r\n          </div>\r\n\r\n          <SimpleBar style={{ height: \"230px\" }}>\r\n            <Link to=\"\" className=\"text-reset notification-item\">\r\n              <div className=\"d-flex\">\r\n                <div className=\"avatar-sm me-3\">\r\n                  <span className=\"avatar-title bg-primary rounded-circle font-size-16\">\r\n                    <i className=\"bx bx-cart\" />\r\n                  </span>\r\n                </div>\r\n                <div className=\"flex-grow-1\">\r\n                  <h6 className=\"mt-0 mb-1\">\r\n                    {props.t(\"Your order is placed\")}\r\n                  </h6>\r\n                  <div className=\"font-size-12 text-muted\">\r\n                    <p className=\"mb-1\">\r\n                      {props.t(\"If several languages coalesce the grammar\")}\r\n                    </p>\r\n                    <p className=\"mb-0\">\r\n                      <i className=\"mdi mdi-clock-outline\" />{\" \"}\r\n                      {props.t(\"3 min ago\")}{\" \"}\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </Link>\r\n            <Link to=\"\" className=\"text-reset notification-item\">\r\n              <div className=\"d-flex\">\r\n                <img\r\n                  src={avatar3}\r\n                  className=\"me-3 rounded-circle avatar-sm\"\r\n                  alt=\"user-pic\"\r\n                />\r\n                <div className=\"flex-grow-1\">\r\n                  <h6 className=\"mt-0 mb-1\">James Lemire</h6>\r\n                  <div className=\"font-size-12 text-muted\">\r\n                    <p className=\"mb-1\">\r\n                      {props.t(\"It will seem like simplified English\") + \".\"}\r\n                    </p>\r\n                    <p className=\"mb-0\">\r\n                      <i className=\"mdi mdi-clock-outline\" />\r\n                      {props.t(\"1 hours ago\")}{\" \"}\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </Link>\r\n            <Link to=\"\" className=\"text-reset notification-item\">\r\n              <div className=\"d-flex\">\r\n                <div className=\"avatar-sm me-3\">\r\n                  <span className=\"avatar-title bg-success rounded-circle font-size-16\">\r\n                    <i className=\"bx bx-badge-check\" />\r\n                  </span>\r\n                </div>\r\n                <div className=\"flex-grow-1\">\r\n                  <h6 className=\"mt-0 mb-1\">\r\n                    {props.t(\"Your item is shipped\")}\r\n                  </h6>\r\n                  <div className=\"font-size-12 text-muted\">\r\n                    <p className=\"mb-1\">\r\n                      {props.t(\"If several languages coalesce the grammar\")}\r\n                    </p>\r\n                    <p className=\"mb-0\">\r\n                      <i className=\"mdi mdi-clock-outline\" />{\" \"}\r\n                      {props.t(\"3 min ago\")}\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </Link>\r\n\r\n            <Link to=\"\" className=\"text-reset notification-item\">\r\n              <div className=\"d-flex\">\r\n                <img\r\n                  src={avatar4}\r\n                  className=\"me-3 rounded-circle avatar-sm\"\r\n                  alt=\"user-pic\"\r\n                />\r\n                <div className=\"flex-grow-1\">\r\n                  <h6 className=\"mt-0 mb-1\">Salena Layfield</h6>\r\n                  <div className=\"font-size-12 text-muted\">\r\n                    <p className=\"mb-1\">\r\n                      {props.t(\r\n                        \"As a skeptical Cambridge friend of mine occidental\"\r\n                      ) + \".\"}\r\n                    </p>\r\n                    <p className=\"mb-0\">\r\n                      <i className=\"mdi mdi-clock-outline\" />\r\n                      {props.t(\"1 hours ago\")}{\" \"}\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </Link>\r\n          </SimpleBar>\r\n          <div className=\"p-2 border-top d-grid\">\r\n            <Link\r\n              className=\"btn btn-sm btn-link font-size-14 btn-block text-center\"\r\n              to=\"#\"\r\n            >\r\n              <i className=\"mdi mdi-arrow-right-circle me-1\"></i>\r\n              {\" \"}\r\n              {props.t(\"View all\")}{\" \"}\r\n            </Link>\r\n          </div>\r\n        </DropdownMenu>\r\n      </Dropdown>\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nexport default withTranslation()(NotificationDropdown)\r\n\r\nNotificationDropdown.propTypes = {\r\n  t: PropTypes.any\r\n}","D:\\Rohit\\Git projects\\Manthan\\src\\components\\CommonForBoth\\TopbarDropdown\\LanguageDropdown.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\GSTRedux\\action.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Purchase\\OrderPageRedux\\actions.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Utilites\\Breadcrumb\\actions.js",["3312"],"import {\r\n  BREADCRUMB_SHOW_COUNT_LABLE,\r\n  COMMON_BREADCRUMB_ALL_DETAIL,\r\n  BREADCRUMB_ITEM_NAME,\r\n  BREADCRUMB_DOWN_BTN_DATA,\r\n  BREADCRUMB_REST,\r\n  BREADCRUMB_CHECK_RADIO_BUTTON,\r\n  BREADCRUMB_RADIO_BUTTON_VIEW,\r\n  BREADCRUMB_NON_DELETE_BUTTON,\r\n  BREADCRUMB_DELETE_BUTTON,\r\n} from \"./actionType\";\r\n\r\n\r\nexport const Breadcrumb_inputName = (data) => ({\r\n  type: BREADCRUMB_ITEM_NAME,\r\n  payload: data,\r\n});\r\n\r\nexport const BreadcrumbShowCountlabel = (label) => ({\r\n  type: BREADCRUMB_SHOW_COUNT_LABLE,\r\n  payload: label,\r\n});\r\n\r\nexport const CommonBreadcrumbDetails = (props) => ({\r\n  type: COMMON_BREADCRUMB_ALL_DETAIL,\r\n  payload: props,\r\n});\r\n\r\nexport const BreadcrumbDownBtndata = (data) => ({\r\n  type: BREADCRUMB_DOWN_BTN_DATA,\r\n  payload: data,\r\n});\r\n\r\nexport const BreadcrumbReset = (label) => {\r\n  return {\r\n    type: BREADCRUMB_REST,\r\n    payload: label,\r\n  }\r\n}\r\n\r\nexport const BreadcrumbNonDeleteButton = (config = {}) => {\r\n  return {\r\n    type: BREADCRUMB_NON_DELETE_BUTTON,\r\n    config\r\n  }\r\n}\r\n\r\nexport const BreadcrumbDeleteButton = (config = {}) => {\r\n  return {\r\n    type: BREADCRUMB_DELETE_BUTTON,\r\n    config\r\n  }\r\n}\r\n\r\nexport const BreadcrumbRadioButtonView = (IsView) => {\r\n  return {\r\n    type: BREADCRUMB_RADIO_BUTTON_VIEW,\r\n    IsView\r\n  }\r\n}\r\n\r\n// export const CommonBreadcrumbDetails_reducer = (props) => ({\r\n//   type: COMMON_BREADCRUMB_ALL_DETAIL_redux,\r\n//   payload: props,\r\n// });\r\n\r\n\r\n\r\n\r\n\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Utilites\\PageFiled\\actions.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\auth\\forgetpwd\\actions.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\auth\\login\\actions.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\auth\\profile\\actions.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\auth\\register\\actions.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\PartyItemsRedux\\actionType.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\helpers\\backend_helper.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\CommonAPI\\SupplierRedux\\actionType.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\PartySubPartyRedux\\actionType.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\GroupRedux\\actionType.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\UserRegistrationRedux\\actionType.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\CategoryTypeRedux\\actionTypes.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\ItemsRedux\\actionType.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\ModulesRedux\\actionType.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\RoleAccessRedux\\actionType.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\layout\\actionTypes.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\GSTRedux\\actionType.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Purchase\\OrderPageRedux\\actionType.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Utilites\\Breadcrumb\\actionType.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Utilites\\PageFiled\\actionType.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\auth\\forgetpwd\\actionTypes.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\auth\\login\\actionTypes.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\auth\\profile\\actionTypes.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\auth\\register\\actionTypes.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\CommonAPI\\SupplierRedux\\actions.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\common\\languages.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\constants\\layout.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Purchase\\Order\\OrderPageCalulation.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\helpers\\url_helper.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\GroupTypeRedux\\action.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\MarginMasterRedux\\action.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\MRPMasterRedux\\action.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\PartyRedux\\action.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\helpers\\api_helper.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\GroupTypeRedux\\actionType.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\MarginMasterRedux\\actionType.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\MRPMasterRedux\\actionTypes.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\PartyRedux\\actionTypes.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\CompanyGroupRedux\\action.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\PriceList\\action.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\CompanyGroupRedux\\actionType.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\CategoryRedux\\action.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\DriverRedux\\action.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\VehicleRedux\\action.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\EmployeeTypeRedux\\action.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\PriceList\\actionType.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\CategoryRedux\\actionTypes.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\DriverRedux\\actionType.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\VehicleRedux\\actionType.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\PartyTypeRedux\\action.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\RoleMasterRedux\\action.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\ItemPages\\ItemMaster\\MarginTab\\index.js",["3313"],"import React, { useEffect, useState } from 'react';\r\nimport { Button, Card, CardBody, Col, FormGroup, Input, Label, Row } from 'reactstrap';\r\nimport Select from \"react-select\";\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport MarginTable from './Table';\r\nimport { get_Party_ForDropDown, } from '../../../../../store/Administrator/ItemsRedux/action';\r\nimport { loginUserID, loginCompanyID } from '../../../../../components/Common/CommonFunction';\r\nimport { priceListByCompay_Action } from '../../../../../store/Administrator/PriceList/action';\r\nimport { customAlert } from '../../../../../CustomAlert/ConfirmDialog';\r\nimport { C_DatePicker } from '../../../../../CustomValidateForm';\r\n\r\nfunction Margin_Tab(props) {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const [priceList, setPriceList] = useState('');\r\n    const [partyName, setPartyName] = useState('');\r\n    const [effectiveDate, setEffectiveDate] = useState('');\r\n    const [margin, setMargin] = useState('');\r\n\r\n    const {\r\n        Party,\r\n        PriceList\r\n    } = useSelector((state) => ({\r\n        Party: state.ItemMastersReducer.Party,\r\n        PriceList: state.PriceListReducer.priceListByCompany,\r\n    }));\r\n\r\n    useEffect(() => {\r\n        dispatch(get_Party_ForDropDown());\r\n        dispatch(priceListByCompay_Action());\r\n    }, [dispatch]);\r\n\r\n\r\n    const Party_DropdownOptions = Party.map((data) => ({\r\n        value: data.id,\r\n        label: data.Name\r\n    }))\r\n\r\n    const PriceList_DropdownOptions = PriceList.map((data) => ({\r\n        value: data.id,\r\n        label: data.Name\r\n    }));\r\n\r\n    const PriceListHandler = (event) => {\r\n        setPriceList(event)\r\n    }\r\n\r\n    const EffectiveDateHandler = (e, date) => {\r\n        setEffectiveDate(date)\r\n    }\r\n\r\n    const PartyNameHandler = (event) => {\r\n        setPartyName(event)\r\n    }\r\n\r\n    const MarginHandler = (event) => {\r\n        setMargin(event.target.value)\r\n    }\r\n\r\n\r\n    const addRowsHandler = (data) => {\r\n\r\n        const val = {\r\n            PriceList: priceList.value,\r\n            PriceListName: priceList.label,\r\n            PartyName: partyName.label,\r\n            Party: partyName === \"\" ? \"\" : partyName.value,\r\n            EffectiveDate: effectiveDate,\r\n            Margin: margin,\r\n            CreatedBy: loginUserID(),\r\n            UpdatedBy: loginUserID(),\r\n            Company: loginCompanyID(),\r\n            CommonID: 0,\r\n            IsDeleted: 0,\r\n            IsAdd: true\r\n        };\r\n\r\n        if (!(priceList === \"\")\r\n            && !(margin === \"\")\r\n            && !(effectiveDate === \"\")\r\n        ) {\r\n            const totalTableData = props.tableData.length;\r\n            val.id = totalTableData + 1;\r\n            const updatedTableData = [...props.tableData];\r\n            updatedTableData.push(val);\r\n            props.func(updatedTableData)\r\n            clearState();\r\n\r\n        }\r\n        else { customAlert({ Type: 4, Message: \"Please Enter value\" }) }\r\n    };\r\n\r\n    const clearState = () => {\r\n        setPriceList('');\r\n        setPartyName('');\r\n        setEffectiveDate('');\r\n        setMargin('');\r\n    };\r\n\r\n    return (\r\n        <Row>\r\n            <Col md={12}  >\r\n                <Card className=\"text-black\">\r\n                    <CardBody className='c_card_body'>\r\n                        <Row className=\"mt-3\">\r\n                            <Col className=\" col col-11 \">\r\n                                <Row>\r\n                                    <FormGroup className=\" col col-sm-3 \" >\r\n                                        <Label >Price List</Label>\r\n                                        <Select\r\n                                            id={`dropPriceList-${0}`}\r\n                                            value={priceList}\r\n                                            options={PriceList_DropdownOptions}\r\n                                            onChange={PriceListHandler}\r\n                                        />\r\n                                    </FormGroup>\r\n\r\n                                    <FormGroup className=\"mb-3 col col-sm-3 \" >\r\n                                        <Label >Party Name</Label>\r\n                                        <Select\r\n                                            id={`dropPartyName-${0}`}\r\n                                            value={partyName}\r\n                                            options={Party_DropdownOptions}\r\n                                            onChange={PartyNameHandler}\r\n                                        />\r\n                                    </FormGroup>\r\n\r\n                                    <FormGroup className=\"mb-3 col col-sm-3 \">\r\n                                        <Label>Effective Date</Label>\r\n                                        <div id={`txtEffectiveDate${0}`} >\r\n                                            <C_DatePicker\r\n                                                id={`txtEffectiveDate${0}`}\r\n                                                value={effectiveDate}\r\n                                                placeholder=\"Please Enter EffectiveDate\"\r\n                                                onChange={EffectiveDateHandler}\r\n                                                options={{\r\n                                                    altInput: true,\r\n                                                    altFormat: \"d-m-Y\",\r\n                                                    dateFormat: \"Y-m-d\",\r\n                                                }}\r\n                                            />\r\n                                        </div>\r\n                                    </FormGroup>\r\n\r\n                                    <FormGroup className=\"mb-3 col col-sm-3 \" >\r\n                                        <Label >Margin (%)</Label>\r\n                                        <Input\r\n                                            type=\"text\"\r\n                                            id={`txtMargin${0}`}\r\n                                            value={margin}\r\n                                            placeholder=\"Please Enter Margin\"\r\n                                            autoComplete=\"off\"\r\n                                            onChange={MarginHandler}\r\n                                        />\r\n                                    </FormGroup>\r\n\r\n                                </Row>\r\n                            </Col>\r\n                            <Col md={1}>\r\n\r\n                                <Row className=\" mt-3\">\r\n                                    <Col >\r\n                                        <Button\r\n                                            className=\" button_add\"\r\n                                            color=\"btn btn-outline-primary border-2 font-size-12\"\r\n                                            type=\"button\"\r\n                                            onClick={addRowsHandler}\r\n                                        >\r\n                                            <i className=\"dripicons-plus mt-3\"> </i>\r\n                                        </Button>\r\n                                    </Col>\r\n                                </Row>\r\n                            </Col>\r\n                        </Row>\r\n                    </CardBody>\r\n                </Card>\r\n                <Row>\r\n                    <MarginTable tableData={props.tableData} func={props.func} />\r\n                </Row>\r\n            </Col>\r\n        </Row>\r\n    );\r\n}\r\n\r\nexport default Margin_Tab;\r\n\r\n\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\CompanyRedux\\actions.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Authentication\\CarouselPage.js",["3314","3315","3316"],"import React, { useState } from \"react\";\r\nimport { Carousel, CarouselItem, CarouselIndicators } from \"reactstrap\";\r\n\r\nimport img1 from \"../../assets/images/bhakarwadi image.jpg\";\r\nimport img2 from \"../../assets/images/users/avatar-2.jpg\";\r\nimport img3 from \"../../assets/images/users/avatar-3.jpg\";\r\n\r\nconst items = [\r\n  {\r\n    id: 1,\r\n    // img: img1,\r\n    // name: \"Richard Drews\",\r\n    // designation: \"Web Designer\",\r\n    description:\r\n    \"Established in 1950 is one of the leading manufacturers of Indian Sweets, Snacks and Savouries and Ready to Eat Products with presence in Retail, General Trade, Modern Trade and Export Markets\"\r\n  },\r\n  {\r\n    id: 2,\r\n    // img: img2,\r\n    // name: \"Rosanna French\",\r\n    // designation: \"Web Developer\",\r\n    description:\r\n    \"To become leaders in the Indian Dairy Industry, while retaining our Indian traditions and family values\"\r\n  },\r\n \r\n];\r\n\r\nconst CarouselPage = () => {\r\n  const [activeIndex, setActiveIndex] = useState(0);\r\n  const [animating, setAnimating] = useState(false);\r\n\r\n  const next = () => {\r\n    if (animating) return;\r\n    const nextIndex = activeIndex === items.length - 1 ? 0 : activeIndex + 1;\r\n    setActiveIndex(nextIndex);\r\n  };\r\n\r\n  const previous = () => {\r\n    if (animating) return;\r\n    const nextIndex = activeIndex === 0 ? items.length - 1 : activeIndex - 1;\r\n    setActiveIndex(nextIndex);\r\n  };\r\n\r\n  const goToIndex = (newIndex) => {\r\n    if (animating) return;\r\n    setActiveIndex(newIndex);\r\n  };\r\n\r\n  const slides = items.map(item => {\r\n    return (\r\n      <CarouselItem\r\n        tag=\"div\"\r\n        key={item.id}\r\n        onExiting={() => setAnimating(true)}\r\n        onExited={() => setAnimating(false)}\r\n      >\r\n        <div className=\"carousel-item active\">\r\n          <div className=\"testi-contain text-white\">\r\n            {/* <i className=\"bx bxs-quote-alt-left text-success display-6\"></i> */}\r\n            <h4 className=\"mt-4 fw-medium lh-base text-white\">\r\n              “{item.description}”\r\n            </h4>\r\n            <div className=\"mt-4 pt-3 pb-5\">\r\n              <div className=\"d-flex align-items-start\">\r\n                <div className=\"flex-shrink-0\">\r\n                  {/* <img\r\n                    src={item.img}\r\n                    className=\"avatar-md img-fluid rounded-circle\"\r\n                    alt=\"...\"\r\n                  /> */}\r\n                </div>\r\n                <div className=\"flex-grow-1 ms-3 mb-4\">\r\n                  <h5 className=\"font-size-18 text-white\">{item.name}</h5>\r\n                  <p className=\"mb-0 text-white-50\">{item.designation}</p>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </CarouselItem>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"col-xxl-9 col-lg-8 col-md-7\">\r\n        <div className=\"auth-bg pt-md-5 p-4 d-flex\">\r\n          <div className=\"bg-overlay bg-primary\"></div>\r\n          <ul className=\"bg-bubbles\">\r\n            <li></li>\r\n            <li></li>\r\n            <li></li>\r\n            <li></li>\r\n            <li></li>\r\n            <li></li>\r\n            <li></li>\r\n            <li></li>\r\n            <li></li>\r\n            <li></li>\r\n          </ul>\r\n          <div className=\"row justify-content-center align-items-center\">\r\n            <div className=\"col-xl-7\">\r\n              <div className=\"p-0 p-sm-4 px-xl-0\">\r\n                <div\r\n                  id=\"reviewcarouselIndicators\"\r\n                  className=\"carousel slide\"\r\n                  data-bs-ride=\"carousel\"\r\n                >\r\n                  <CarouselIndicators\r\n                    items={items}\r\n                    activeIndex={activeIndex}\r\n                    onClickHandler={goToIndex}\r\n                  />\r\n                  <Carousel\r\n                    activeIndex={activeIndex}\r\n                    next={next}\r\n                    previous={previous}\r\n                  >\r\n                    {slides}\r\n                  </Carousel>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default CarouselPage;\r\n\r\n\r\n\r\n\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\GSTRedux\\saga.js",["3317"],"import { call, put, takeLatest } from \"redux-saga/effects\";\r\nimport * as  apiCall from \"../../../helpers/backend_helper\";\r\nimport * as actionType from \"./actionType\";\r\nimport * as action from \"./action\";\r\nimport { listpageConcatDateAndTime } from \"../../../components/Common/CommonFunction\";\r\n\r\nfunction* save_GSTMaster_GenFunc({ config }) {\r\n  try {\r\n    const response = yield call(apiCall.Post_GSTMaster_API, config);\r\n    yield put(action.saveGSTMasterSuccess(response));\r\n  } catch (error) { yield put(action.GSTApiErrorAction()) }\r\n}\r\n\r\n//listpage\r\nfunction* get_GSTList_GenFunc() {\r\n\r\n  try {\r\n    const response = yield call(apiCall.GetGSTList_For_Listpage);\r\n    response.Data.map(i => {\r\n\r\n      //tranzaction date is only for fiterand page field but UI show transactionDateLabel\r\n      i[\"transactionDate\"] = i.CreatedOn;\r\n      i[\"transactionDateLabel\"] = listpageConcatDateAndTime(i.EffectiveDate, i.CreatedOn);\r\n    })\r\n    yield put(action.getGSTListSuccess(response.Data));\r\n  } catch (error) { yield put(action.GSTApiErrorAction()) }\r\n}\r\n\r\n// delete api for GST List\r\nfunction* delete_GSTList_ID_GenFunc({ config }) {\r\n  try {\r\n    const response = yield call(apiCall.delete_GSTList_API, config);\r\n    yield put(action.deleteGSTListId_Success(response));\r\n  } catch (error) { yield put(action.GSTApiErrorAction()) }\r\n\r\n}\r\n\r\nfunction* goButton_GST_GenFunc({ data }) {\r\n  const { jsonBody, pathname, btnmode, rowData } = data\r\n  try {\r\n    const response = yield call(apiCall.GoButton_Post_API_For_GSTMaster, jsonBody);\r\n    response.pageMode = btnmode\r\n    response.pathname = pathname\r\n    response.rowData = rowData\r\n    yield put(action.goButtonForGST_Master_Success(response));\r\n  } catch (error) { yield put(action.GSTApiErrorAction()) }\r\n}\r\n\r\n// delete api for GST Master\r\nfunction* delete_GSTMaster_ID_GenFunc({ id }) {\r\n\r\n  try {\r\n    const response = yield call(apiCall.GST_MasterPage_delete_API, id);\r\n    response[\"deletedId\"] = id\r\n    yield put(action.deleteGSTId_ForMaster_Success(response))\r\n  } catch (error) { yield put(action.GSTApiErrorAction()) }\r\n}\r\n\r\nfunction* GSTSaga() {\r\n  yield takeLatest(actionType.SAVE_GST_MASTER, save_GSTMaster_GenFunc);\r\n  yield takeLatest(actionType.GET_GST_LIST, get_GSTList_GenFunc);\r\n  yield takeLatest(actionType.DELETE_GST_LIST_ID, delete_GSTList_ID_GenFunc);\r\n  yield takeLatest(actionType.GO_BUTTON_FOR_GST_MASTER, goButton_GST_GenFunc);\r\n  yield takeLatest(actionType.DELETE_GST_ID_FOR_MASTER, delete_GSTMaster_ID_GenFunc);\r\n\r\n}\r\n\r\nexport default GSTSaga;\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\GroupRedux\\saga.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\MarginMasterRedux\\saga.js",["3318"],"import { call, put, takeLatest } from \"redux-saga/effects\";\r\nimport { listpageConcatDateAndTime } from \"../../../components/Common/CommonFunction\";\r\n// import {listpageConcatDateAndTime} from \"../../../components/Common/CommonFunction\";\r\nimport {\r\n  delete_MarginList_API,\r\n  GetMarginList_For_Listpage,\r\n  GoButton_Post_API_For_MarginMaster,\r\n  Margin_MasterPage_delete_API,\r\n  Post_MarginMaster_API,\r\n} from \"../../../helpers/backend_helper\";\r\nimport {\r\n  MarginApiErrorAction,\r\n  deleteIdForMarginMasterSuccess,\r\n  delete_MarginList_ID_Success,\r\n  getMarginListSuccess,\r\n  goButtonForMarginSuccess,\r\n  saveMarginMasterSuccess,\r\n} from \"./action\";\r\nimport {\r\n  DELETE_ID_FOR_MARGIN_MASTER,\r\n  DELETE_MARGIN_LIST_ID,\r\n  GET_MARGIN_LIST,\r\n  GO_BUTTON_FOR_MARGIN_MASTER,\r\n  SAVE_MARGIN_MASTER,\r\n} from \"./actionType\";\r\n\r\nfunction* post_Margin_GenFunc({ config }) {\r\n  try {\r\n    const response = yield call(Post_MarginMaster_API, config);\r\n    yield put(saveMarginMasterSuccess(response));\r\n  } catch (error) { yield put(MarginApiErrorAction()) }\r\n}\r\n\r\n//listpage\r\nfunction* get_Margin_GenFunc() {\r\n  try {\r\n    const response = yield call(GetMarginList_For_Listpage);\r\n    response.Data.map(i => {\r\n\r\n      //tranzaction date is only for fiterand page field but UI show transactionDateLabel\r\n      i[\"transactionDate\"] = i.CreatedOn;\r\n      i[\"transactionDateLabel\"] = listpageConcatDateAndTime(i.EffectiveDate, i.CreatedOn);\r\n    })\r\n    yield put(getMarginListSuccess(response.Data))\r\n  } catch (error) { yield put(MarginApiErrorAction()) }\r\n}\r\n\r\n//delete\r\nfunction* delete_Margin_GenFunc({ config }) {\r\n\r\n  try {\r\n    const response = yield call(delete_MarginList_API, config);\r\n    yield put(delete_MarginList_ID_Success(response));\r\n  } catch (error) { yield put(MarginApiErrorAction()) }\r\n}\r\n\r\nfunction* goButton_Margin_GenFunc({ data }) {\r\n  const { jsonBody, pathname, btnmode, rowData } = data\r\n  try {\r\n\r\n    const response = yield call(GoButton_Post_API_For_MarginMaster, jsonBody);\r\n    response.pageMode = btnmode\r\n    response.pathname = pathname\r\n    response.rowData = rowData\r\n    yield put(goButtonForMarginSuccess(response));\r\n  } catch (error) { yield put(MarginApiErrorAction()) }\r\n}\r\n\r\n// delete api Margin Master Page\r\n\r\nfunction* delete_Margin_Master_table_GenFunc({ id }) {\r\n  try {\r\n    \r\n    const response = yield call(Margin_MasterPage_delete_API, id);\r\n    response[\"deletedId\"] = id\r\n    yield put(deleteIdForMarginMasterSuccess(response));\r\n  } catch (error) { yield put(MarginApiErrorAction()) }\r\n}\r\n\r\nfunction* MarginMasterSaga() {\r\n  yield takeLatest(SAVE_MARGIN_MASTER, post_Margin_GenFunc);\r\n  yield takeLatest(GET_MARGIN_LIST, get_Margin_GenFunc);\r\n  yield takeLatest(DELETE_MARGIN_LIST_ID, delete_Margin_GenFunc);\r\n  yield takeLatest(GO_BUTTON_FOR_MARGIN_MASTER, goButton_Margin_GenFunc);\r\n  yield takeLatest(DELETE_ID_FOR_MARGIN_MASTER, delete_Margin_Master_table_GenFunc);\r\n}\r\nexport default MarginMasterSaga;\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\GroupTypeRedux\\saga.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\MRPMasterRedux\\saga.js",["3319"],"import { call, put, takeLatest } from \"redux-saga/effects\";\r\nimport * as  apiCall from \"../../../helpers/backend_helper\";\r\nimport * as actionType from \"./actionTypes\";\r\nimport * as action from \"./action\";\r\nimport { listpageConcatDateAndTime } from \"../../../components/Common/CommonFunction\";\r\n\r\nfunction* save_MRPMaster_GenFunc({ config }) {\r\n  try {\r\n    const response = yield call(apiCall.MRPMaster_Post_API, config);\r\n    yield put(action.saveMRPMasterSuccess(response));\r\n  } catch (error) { yield put(action.MRPApiErrorAction()) }\r\n}\r\n\r\n// List Page API\r\nfunction* get_MRPMaster_GenFunc() {\r\n  try {\r\n    const response = yield call(apiCall.MRPMaster_Get_API);\r\n    response.Data.map(i => {\r\n\r\n      //tranzaction date is only for fiterand page field but UI show transactionDateLabel\r\n      i[\"transactionDate\"] = i.CreatedOn;\r\n      i[\"transactionDateLabel\"] = listpageConcatDateAndTime(i.EffectiveDate, i.CreatedOn);\r\n    })\r\n    yield put(action.getMRPList_Success(response.Data))\r\n  } catch (error) { yield put(action.MRPApiErrorAction()) }\r\n}\r\n\r\n//delete\r\nfunction* delete_MRPList_Id_GenFunc({ config }) {\r\n  try {\r\n    const response = yield call(apiCall.MRPMaster_Delete_API_For_List, config);\r\n    yield put(action.deleteMRPList_Id_Success(response));\r\n  } catch (error) { yield put(action.MRPApiErrorAction()) }\r\n}\r\n\r\nfunction* goButton_MRPMaster_GenFunc({ data }) {\r\n  const { jsonBody, pathname, btnmode, rowData } = data\r\n  try {\r\n    const response = yield call(apiCall.MRPMaster_goButton_API, jsonBody);\r\n    response.pageMode = btnmode\r\n    response.pathname = pathname\r\n    response.rowData = rowData\r\n    yield put(action.GoButtonForMRP_MasterSuccess(response));\r\n  } catch (error) { yield put(action.MRPApiErrorAction()) }\r\n}\r\n\r\n// delete api MRP Master PageL\r\nfunction* delete_MRPMaster_Id_GenFunc({ id }) {\r\n  try {\r\n    const response = yield call(apiCall.MRPMaster_Delete_API_For_Master, id);\r\n    response[\"deletedId\"] = id\r\n    yield put(action.deleteMRPMaster_Id_Success(response));\r\n  } catch (error) { yield put(action.MRPApiErrorAction()) }\r\n}\r\n\r\nfunction* MRPMasterSaga() {\r\n  yield takeLatest(actionType.SAVE_MRP_MASTER, save_MRPMaster_GenFunc);\r\n  yield takeLatest(actionType.GO_BUTTON_FOR_MRP_MASTER, goButton_MRPMaster_GenFunc);\r\n  yield takeLatest(actionType.GET_MRP_LIST, get_MRPMaster_GenFunc);\r\n  yield takeLatest(actionType.DELETE_MRP_LIST, delete_MRPList_Id_GenFunc);\r\n  yield takeLatest(actionType.DELETE_MRP_MASTER_ID, delete_MRPMaster_Id_GenFunc);\r\n}\r\nexport default MRPMasterSaga;\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\PriceList\\saga.js",["3320"],"import { call, put, takeLatest } from \"redux-saga/effects\";\r\nimport { CommonConsole, loginCompanyID } from \"../../../components/Common/CommonFunction\";\r\nimport {\r\n  delete_PriceList_API,\r\n  get_PriceListByPartyType_API,\r\n  Save_PriceList_API,\r\n  edit_PriceList,\r\n  update_PriceList,\r\n  get_PriceListByCompay_API\r\n} from \"../../../helpers/backend_helper\";\r\nimport {\r\n  delete_PriceListSuccess,\r\n  priceListByPartyActionSuccess,\r\n  savePriceMasterActionSuccess,\r\n  editPriceListSuccess,\r\n  updatePriceListSuccess,\r\n  priceListByCompay_ActionSuccess,\r\n  priceList_ApiErrorAction\r\n} from \"./action\";\r\nimport {\r\n  DELETE_PRICE_LIST,\r\n  PRICE_LIST_BY_PARTY_ACTION,\r\n  POST_PRICE_LIST_DATA,\r\n  EDIT_PRICE_LIST,\r\n  UPDATE_PRICE_LIST,\r\n  PRICE_LIST_BY_COMPANY\r\n} from \"./actionType\";\r\n\r\nfunction* PriceList_ByParty_GenFunc({ partyType }) {\r\n  try {\r\n    const response = yield call(get_PriceListByPartyType_API, partyType);\r\n    yield put(priceListByPartyActionSuccess(response.Data));\r\n  } catch (error) { yield put(priceList_ApiErrorAction()) }\r\n}\r\n\r\n\r\nfunction* Save_PriceList_GenFunc({ config }) {\r\n  try {\r\n    const response = yield call(Save_PriceList_API, config);\r\n    yield put(savePriceMasterActionSuccess(response));\r\n  } catch (error) { yield put(priceList_ApiErrorAction()) }\r\n}\r\n\r\n\r\nfunction* get_PriceListPageByCompany_GenFunc() {//listpage\r\n  try {\r\n    const response = yield call(get_PriceListByCompay_API, loginCompanyID());\r\n    yield put(priceListByCompay_ActionSuccess(response.Data))\r\n  } catch (error) { yield put(priceList_ApiErrorAction()) }\r\n}\r\n\r\n\r\nfunction* delete_PriceList_GenFun({ config = {} }) {//delete\r\n  try {\r\n    const response = yield call(delete_PriceList_API, config);\r\n    yield put(delete_PriceListSuccess(response));\r\n  } catch (error) { yield put(priceList_ApiErrorAction()) }\r\n}\r\n\r\n\r\nfunction* Edit_PriceList__GenFunc({ config }) {// edit api\r\n\r\n  const { btnmode, PartyTypeName, PartyTypeId } = config;\r\n  try {\r\n    const response = yield call(edit_PriceList, config);\r\n    response.pageMode = btnmode\r\n    response.Data[\"PartyTypeName\"] = PartyTypeName\r\n    response.Data[\"PartyTypeId\"] = PartyTypeId\r\n    yield put(editPriceListSuccess(response));\r\n  } catch (error) { yield put(priceList_ApiErrorAction()) }\r\n}\r\n\r\n\r\nfunction* Update_PriceList_GenFunc({ config = {} }) {// update api\r\n  try {\r\n    const response = yield call(update_PriceList, config);\r\n    yield put(updatePriceListSuccess(response))\r\n  } catch (error) { yield put(priceList_ApiErrorAction()) }\r\n}\r\n\r\n\r\nfunction* PriceListSaga() {\r\n  yield takeLatest(POST_PRICE_LIST_DATA, Save_PriceList_GenFunc);\r\n  yield takeLatest(PRICE_LIST_BY_PARTY_ACTION, PriceList_ByParty_GenFunc);\r\n  yield takeLatest(DELETE_PRICE_LIST, delete_PriceList_GenFun);\r\n  yield takeLatest(EDIT_PRICE_LIST, Edit_PriceList__GenFunc);\r\n  yield takeLatest(UPDATE_PRICE_LIST, Update_PriceList_GenFunc);\r\n  yield takeLatest(PRICE_LIST_BY_COMPANY, get_PriceListPageByCompany_GenFunc);\r\n}\r\nexport default PriceListSaga;\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\CompanyGroupRedux\\saga.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\VehicleRedux\\saga.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\DriverRedux\\saga.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\CategoryRedux\\saga.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\CategoryTypeRedux\\saga.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\PartyTypeRedux\\saga.js",["3321"],"import { call, put, takeLatest } from \"redux-saga/effects\";\r\nimport {\r\n  CommonConsole,\r\n  loginJsonBody\r\n} from \"../../../components/Common/CommonFunction\";\r\nimport {\r\n  detelet_PartyType_List_Api,\r\n  edit_PartyType_List_Api,\r\n  get_PartyType_List_Api,\r\n  Save_Party_Type_API,\r\n  update_PartyType_List_Api\r\n} from \"../../../helpers/backend_helper\";\r\n\r\nimport * as action from \"./action\";\r\nimport * as actionType from \"./actionTypes\";\r\n\r\nfunction* save_Party_Type_GneFunc({ config }) {// post api\r\n\r\n  try {\r\n    const response = yield call(Save_Party_Type_API, config);\r\n    yield put(action.SavePartyTypeAPISuccess(response));\r\n  } catch (error) { yield put(action.PartyTypeApiErrorAction()) }\r\n}\r\n\r\nfunction* Get_PartyType_List_GneFunc() { // get api\r\n  try {\r\n\r\n    const jsonBody = JSON.stringify({ ...loginJsonBody(), \"id\": 0 });\r\n    const response = yield call(get_PartyType_List_Api, jsonBody);\r\n    yield put(action.getPartyTypelistSuccess(response.Data));\r\n  } catch (error) { yield put(action.PartyTypeApiErrorAction()) }\r\n}\r\n\r\nfunction* Delete_PartyType_ID_GneFunc({ config }) { // delete api \r\n  try {\r\n    const response = yield call(detelet_PartyType_List_Api, config);\r\n    yield put(action.deletePartyTypeIDSuccess(response))\r\n  } catch (error) { yield put(action.PartyTypeApiErrorAction()) }\r\n}\r\n\r\nfunction* Edit_PartyType_ID_GneFunc({ config }) { // edit api\r\n\r\n  const { btnmode, editId } = config;\r\n  const body = JSON.stringify({ ...loginJsonBody(), \"id\": editId });\r\n  config.jsonBody = body;\r\n  try {\r\n    const response = yield call(edit_PartyType_List_Api, config);\r\n    response.pageMode = btnmode\r\n    yield put(action.editPartyTypeSuccess(response));\r\n  } catch (error) { yield put(action.PartyTypeApiErrorAction()) }\r\n}\r\n\r\nfunction* Update_PartyType_ID_GneFunc({ config }) {// update api\r\n  try {\r\n    const response = yield call(update_PartyType_List_Api, config);\r\n    yield put(action.updatePartyTypeIDSuccess(response))\r\n  } catch (error) { yield put(action.PartyTypeApiErrorAction()) }\r\n}\r\n\r\nfunction* PartyTypeSaga() {\r\n  yield takeLatest(actionType.SAVE_PARTY_TYPE_API, save_Party_Type_GneFunc)\r\n  yield takeLatest(actionType.GET_PARTY_TYPE_LIST, Get_PartyType_List_GneFunc)\r\n  yield takeLatest(actionType.DELETE_PARTY_TYPE_ID, Delete_PartyType_ID_GneFunc)\r\n  yield takeLatest(actionType.EDIT_PARTY_TYPE_ID, Edit_PartyType_ID_GneFunc)\r\n  yield takeLatest(actionType.UPDATE_PARTY_TYPE_ID, Update_PartyType_ID_GneFunc)\r\n\r\n}\r\n\r\nexport default PartyTypeSaga;","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\EmployeeTypeRedux\\saga.js",["3322"],"import { call, put, takeEvery } from \"redux-saga/effects\";\r\nimport { CommonConsole, loginJsonBody } from \"../../../components/Common/CommonFunction\";\r\nimport { detelet_EmployeeType_List_Api, edit_EmployeeType_List_Api, Employee_Type_API, get_EmployeeType_List_Api, update_EmployeeType_List_Api } from \"../../../helpers/backend_helper\";\r\nimport { deleteEmployeeTypeIDSuccess, editEmployeeTypeSuccess, EmployeeTypeApiErrorAction, getEmployeeTypelistSuccess, PostEmployeeTypeSubmitSuccess, updateEmployeeTypeIDSuccess } from \"./action\";\r\nimport { DELETE_EMPLOYEE_TYPE_ID, EDIT_EMPLOYEE_TYPE_ID, GET_EMPLOYEE_TYPE_LIST, POST_EMPLOYEETYPE_SUBMIT, UPDATE_EMPLOYEE_TYPE_ID } from \"./actionTypes\";\r\n\r\nfunction* Post_EmployeeType_GneratorFunction({ config }) {           // post api\r\n\r\n  try {\r\n    const response = yield call(Employee_Type_API, config);\r\n    // response.Data = { id: 1, Name: \"label\" }\r\n    yield put(PostEmployeeTypeSubmitSuccess(response));\r\n  } catch (error) { yield put(EmployeeTypeApiErrorAction()) }\r\n}\r\n\r\nfunction* Get_EmployeeTypeList_GenratorFunction() {\r\n  const filters = JSON.stringify(loginJsonBody())   // only required CompanyID                 // get api\r\n  try {\r\n    const response = yield call(get_EmployeeType_List_Api, filters);\r\n    yield put(getEmployeeTypelistSuccess(response.Data));\r\n  } catch (error) { yield put(EmployeeTypeApiErrorAction()) }\r\n}\r\n\r\nfunction* Delete_EmployeeTypeList_ID_GenratorFunction({ config }) {         // delete api \r\n  try {\r\n    const response = yield call(detelet_EmployeeType_List_Api, config);\r\n    yield put(deleteEmployeeTypeIDSuccess(response))\r\n  } catch (error) { yield put(EmployeeTypeApiErrorAction()) }\r\n}\r\n\r\nfunction* Edit_EmployeeTypeList_ID_GenratorFunction({ config }) {         // edit api\r\n  const { btnmode } = config;\r\n  try {\r\n    const response = yield call(edit_EmployeeType_List_Api, config);\r\n    response.pageMode = btnmode\r\n    yield put(editEmployeeTypeSuccess(response));\r\n  } catch (error) { yield put(EmployeeTypeApiErrorAction()) }\r\n}\r\n\r\nfunction* Update_EmployeeTypeList_ID_GenratorFunction({ config }) {        // update api\r\n  try {\r\n    const response = yield call(update_EmployeeType_List_Api, config);\r\n    yield put(updateEmployeeTypeIDSuccess(response))\r\n  } catch (error) { yield put(EmployeeTypeApiErrorAction()) }\r\n}\r\n\r\nfunction* EmployeeTypeSaga() {\r\n  yield takeEvery(POST_EMPLOYEETYPE_SUBMIT, Post_EmployeeType_GneratorFunction)\r\n  yield takeEvery(GET_EMPLOYEE_TYPE_LIST, Get_EmployeeTypeList_GenratorFunction)\r\n  yield takeEvery(DELETE_EMPLOYEE_TYPE_ID, Delete_EmployeeTypeList_ID_GenratorFunction)\r\n  yield takeEvery(EDIT_EMPLOYEE_TYPE_ID, Edit_EmployeeTypeList_ID_GenratorFunction)\r\n  yield takeEvery(UPDATE_EMPLOYEE_TYPE_ID, Update_EmployeeTypeList_ID_GenratorFunction)\r\n\r\n}\r\n\r\nexport default EmployeeTypeSaga;","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\RoleAccessRedux\\saga.js",["3323"],"import { call, put, select, takeEvery, takeLatest } from \"redux-saga/effects\";\r\nimport {\r\n  RoleAccessAdd_AddPage_Button_Api,\r\n  RoleAccessAdd_Delete_Api,\r\n  RoleAccessAdd_RoleDropdown_Api,\r\n  RoleAccessAdd_List_Api,\r\n  RoleAccessAdd_GO_Button_Api,\r\n  RoleAccessAdd_PageDropdown_Api,\r\n  RoleAccessAdd_Save_Api,\r\n  RoleAccessCopy_Save_Api,\r\n\r\n} from \"../../../helpers/backend_helper\";\r\nimport {\r\n  ADD_PAGE_HANDLER_FOR_ROLE_ACCESS_lIST_PAGE,\r\n  DELETE_ROLE_ACCESS_lIST,\r\n  GET_ROLEACCESS_LIST_PAGE,\r\n  GET_ROLE_ACCESS_LIST_FOR_ROLE_ACCESS_lIST_PAGE,\r\n  GO_BUTTON_HANDLER_FOR_ROLE_ACCESS_lIST_PAGE,\r\n  PAGE_DROPDOWN_FOR_ROLE_ACCESS_lIST,\r\n  SAVE_COPY_ROLE_ACCESS_ACTION,\r\n  SAVE_ROLE_ACCESS_ADD_ACTION,\r\n} from \"./actionType\";\r\nimport {\r\n  getRoleAccessListPageSuccess,\r\n  GetRoleListForRoleAccessListPage_Success,\r\n  saveRoleAccessAddActionSuccess,\r\n  saveCopyRoleAccessActionSuccess,\r\n  DeleteRoleAcessSuccess,\r\n  setTableData_roleAccss_AddPageSuccess,\r\n  PageDropdownForRoleAccessList_Success,\r\n  RoleAccessApiErrorAction,\r\n} from \"./actions\";\r\nimport { btnIsDissablefunc, CommonConsole, loginJsonBody } from \"../../../components/Common/CommonFunction\";\r\n\r\n\r\n\r\nfunction* GetRoleAccessListForRoleAccessList_GenFunc({ id1, id2 }) {\r\n  try {\r\n    const response = yield call(RoleAccessAdd_RoleDropdown_Api, id1, id2);\r\n    yield put(GetRoleListForRoleAccessListPage_Success(response.Data));\r\n  } catch (error) {\r\n    yield put(RoleAccessApiErrorAction());\r\n    CommonConsole(error);\r\n  }\r\n}\r\n\r\n\r\nfunction* PageDropdownForRoleAccessList_GenFunc({ id1, id2 }) {\r\n  try {\r\n\r\n    const response = yield call(RoleAccessAdd_PageDropdown_Api, id1, id2);\r\n    yield put(PageDropdownForRoleAccessList_Success(response.Data));\r\n  } catch (error) {\r\n    yield put(RoleAccessApiErrorAction());\r\n    CommonConsole(error);\r\n  }\r\n}\r\n\r\nfunction* GoButtonHandlerForRoleAccessList_GenFunc({ id1, id2, id3 }) {\r\n\r\n  try {\r\n\r\n    const response = yield call(RoleAccessAdd_GO_Button_Api, id1, id2, id3);\r\n\r\n    const newArray = response.Data.map((i, k) => {\r\n      const { defaultSelectedValues, dynamicOptions } = defaultSelectOption(i);\r\n      i[\"defaultSelectedValues\"] = defaultSelectedValues;\r\n      i[\"dynamicOptions\"] = dynamicOptions;\r\n      return i\r\n    })\r\n    yield put(setTableData_roleAccss_AddPageSuccess(newArray));\r\n  } catch (error) {\r\n    yield put(RoleAccessApiErrorAction());\r\n    CommonConsole(error);\r\n  }\r\n}\r\n\r\nfunction* AddPageHandlerForRoleAccessList_GenFunc({ id }) {\r\n\r\n  try {\r\n    const response = yield call(RoleAccessAdd_AddPage_Button_Api, id);\r\n    const getState = (state) => state.RoleAccessReducer.AddPageTableDataRedux;\r\n    const tableList = yield select(getState);\r\n\r\n    response.Data.forEach(i => {\r\n      const { defaultSelectedValues, dynamicOptions } = defaultSelectOption(i);\r\n      i[\"defaultSelectedValues\"] = defaultSelectedValues;\r\n      i[\"dynamicOptions\"] = dynamicOptions;\r\n    });\r\n\r\n    let preArray = [...response.Data, ...tableList]\r\n    \r\n    yield put(setTableData_roleAccss_AddPageSuccess(preArray));\r\n  } catch (error) {\r\n\r\n    yield put(RoleAccessApiErrorAction());\r\n  }\r\n}\r\n\r\nfunction* saveRoleAccessAdd_GenFunc({ config }) {\r\n  try {\r\n    const response = yield call(RoleAccessAdd_Save_Api, config);\r\n    yield put(saveRoleAccessAddActionSuccess(response));\r\n  } catch (error) { yield put(RoleAccessApiErrorAction()); }\r\n}\r\n\r\nfunction* getList_RoleAccessList_GenFunc() { // get api \r\n  const JsonBody = JSON.stringify(loginJsonBody());\r\n  try {\r\n    const response = yield call(RoleAccessAdd_List_Api, JsonBody);\r\n    const newResp = response.Data.map((i, k) => {\r\n      i.id = k+1;\r\n      return i\r\n    })\r\n    yield put(getRoleAccessListPageSuccess(newResp));\r\n  } catch (error) {\r\n    yield put(RoleAccessApiErrorAction());\r\n    CommonConsole(error);\r\n  }\r\n}\r\n\r\n\r\nfunction* Delete_RoleAccessList_GenFunc({ config }) {// delete Api\r\n  try {\r\n    const response = yield call(RoleAccessAdd_Delete_Api, config);\r\n    yield put(DeleteRoleAcessSuccess(response));\r\n  } catch (error) {\r\n    yield put(RoleAccessApiErrorAction());\r\n    CommonConsole(error);\r\n  }\r\n}\r\n\r\n\r\nfunction* saveRoleAccessCopy_GenFun({ config }) {\r\n\r\n  try {\r\n    const response = yield call(RoleAccessCopy_Save_Api, config);\r\n    yield put(saveCopyRoleAccessActionSuccess(response));\r\n\r\n  } catch (error) {\r\n    yield put(RoleAccessApiErrorAction());\r\n    CommonConsole(error);\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default function* RoleAccessSaga() {\r\n  yield takeLatest(DELETE_ROLE_ACCESS_lIST, Delete_RoleAccessList_GenFunc);\r\n  yield takeLatest(PAGE_DROPDOWN_FOR_ROLE_ACCESS_lIST, PageDropdownForRoleAccessList_GenFunc);\r\n  yield takeLatest(GET_ROLE_ACCESS_LIST_FOR_ROLE_ACCESS_lIST_PAGE, GetRoleAccessListForRoleAccessList_GenFunc);\r\n  yield takeLatest(GO_BUTTON_HANDLER_FOR_ROLE_ACCESS_lIST_PAGE, GoButtonHandlerForRoleAccessList_GenFunc);\r\n  yield takeEvery(ADD_PAGE_HANDLER_FOR_ROLE_ACCESS_lIST_PAGE, AddPageHandlerForRoleAccessList_GenFunc);\r\n  yield takeLatest(SAVE_ROLE_ACCESS_ADD_ACTION, saveRoleAccessAdd_GenFunc);\r\n  yield takeLatest(SAVE_COPY_ROLE_ACCESS_ACTION, saveRoleAccessCopy_GenFun);\r\n  yield takeLatest(GET_ROLEACCESS_LIST_PAGE, getList_RoleAccessList_GenFunc);\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\nconst defaultSelectOption = (item) => {\r\n\r\n  const dynamicOptions = [];\r\n  const defaultSelectedValues = []\r\n\r\n  Object.keys(item).forEach(key => {\r\n\r\n    /************************************************************* */\r\n    if ((key === \"PageAccess_IsShowOnMenu\")) {\r\n\r\n      if (item.PageType === 2) {\r\n        // -1 stands for \"List\", -2 stands for \"Add\", and -3 stands for \"STP\".\r\n        dynamicOptions.push(\r\n          { value: -2, label: \"Add Page ShowOnMenu\", id: item[key], icon: <i className=\"fas fa-plus\"></i> },\r\n          { value: -1, label: \"List Page ShowOnMenu\", id: item[key], icon: <i className=\"fas fa-list\"></i> }\r\n        )\r\n\r\n      } else {\r\n        // -1 stands for \"List\", -2 stands for \"Add\", and -3 stands for \"STP\".\r\n        dynamicOptions.push({ value: -3, label: \"Page ShowOnMenu\", id: item[key], icon: <i className=\"fas fa-list\"></i> });\r\n      }\r\n    }\r\n    else if ((key.startsWith('PageAccess_') && (item[key] > 0))) {\r\n      const label = key.replace('PageAccess_', ''); // Remove the prefix\r\n      dynamicOptions.push({\r\n        value: item[key],\r\n        label: label,\r\n        icon: <i className={`fas fa-${label.toLowerCase()}`}></i>,\r\n      });\r\n    }\r\n\r\n    /************************************************************* */\r\n    if (((key === \"RoleAccess_IsShowOnMenuForList\") && (item[key] > 0))) {\r\n      // -1 stands for \"List\", -2 stands for \"Add\", and -3 stands for \"STP\".\r\n      if ((item.PageType === 3)) {\r\n        defaultSelectedValues.push({ value: -3, label: \"Page ShowOnMenu\", id: item[key], icon: <i className=\"fas fa-list\"></i> });\r\n      } else {\r\n        // -1 stands for \"List\", -2 stands for \"Add\", and -3 stands for \"STP\".\r\n        defaultSelectedValues.push(\r\n          { value: -1, label: \"List Page ShowOnMenu\", id: item[key], icon: <i className=\"fas fa-list\"></i> }\r\n        )\r\n      }\r\n    }\r\n    else if (((key === \"RoleAccess_IsShowOnMenuForMaster\") && (item[key] > 0) && (item.PageType === 2))) {\r\n      // -1 stands for \"List\", -2 stands for \"Add\", and -3 stands for \"STP\".\r\n      defaultSelectedValues.push(\r\n        { value: -2, label: \"Add Page ShowOnMenu\", id: item[key], icon: <i className=\"fas fa-plus\"></i> },\r\n      )\r\n    }\r\n\r\n    else if (\r\n      key.startsWith('RoleAccess_')\r\n      && (item[key] > 0)\r\n      && !(key === \"RoleAccess_IsShowOnMenu\")\r\n      && !(key === \"RoleAccess_IsShowOnMenuForList\")\r\n      && !(key === \"RoleAccess_IsShowOnMenuForMaster\")\r\n    ) {\r\n\r\n      const label = key.replace('RoleAccess_', ''); // Remove the prefix\r\n      defaultSelectedValues.push({\r\n        value: item[key],\r\n        label: label,\r\n      });\r\n    }\r\n    /************************************************************* */\r\n  });\r\n  defaultSelectedValues.sort((a, b) => a.value - b.value);\r\n  dynamicOptions.sort((a, b) => a.value - b.value);\r\n\r\n  return { defaultSelectedValues, dynamicOptions }\r\n\r\n}\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\PartyRedux\\saga.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\ItemsRedux\\saga.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\RoleMasterRedux\\saga.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\EmployeeTypeRedux\\actionTypes.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\UserRegistrationRedux\\saga.js",["3324","3325"],"import { call, put, takeLatest } from \"redux-saga/effects\";\r\nimport {\r\n  getEmployee_Dropdown_For_UserRegistration_API,\r\n  User_Component_PostMethod_API,\r\n  User_Component_GetMethod_API,\r\n  User_Component_Delete_Method_API,\r\n  User_Component_EditById_API,\r\n  User_Component_Update_API,\r\n  UserPartiesForUserMaster_API\r\n} from \"../../../helpers/backend_helper\";\r\nimport {\r\n  ADD_USER, GET_USER_LIST_FOR_USER,\r\n  DELETE_USER_ACTION,\r\n  EDIT_USER_ACTION,\r\n  UPDATE_USER_ACTION,\r\n  GET_USER_PARTIES_FOR_USER_MASTER,\r\n  GET_EMPLOYEE_FOR_USER_REGISTRATION\r\n} from './actionType'\r\nimport {\r\n  saveUserMasterActionSuccess,\r\n  getUserListSuccess,\r\n  userDeleteActionSuccess,\r\n  userEditActionSuccess,\r\n  userUpdateActionSuccess,\r\n  GetUserPartiesForUserMastePageSuccess,\r\n  getEmployeeForUseRegistrationSuccess,\r\n  UserApiErrorAction\r\n} from \"./actions\";\r\nimport { CommonConsole, loginJsonBody } from \"../../../components/Common/CommonFunction\";\r\n\r\n// employee dropdown list\r\nfunction* EmployeelistDropdown_GenFunc() {\r\n  try {\r\n    const response = yield call(getEmployee_Dropdown_For_UserRegistration_API);\r\n    yield put(getEmployeeForUseRegistrationSuccess(response.Data));\r\n  } catch (error) { yield put(UserApiErrorAction()) }\r\n}\r\n\r\n// post api\r\nfunction* user_save_GenFunc({ config }) {\r\n  try {\r\n    const response = yield call(User_Component_PostMethod_API, config);\r\n    yield put(saveUserMasterActionSuccess(response));\r\n  } catch (error) { yield put(UserApiErrorAction()) }\r\n\r\n}\r\n\r\nfunction* userList_GenFunc() { //  Get  Users list  for List page  POST_api\r\n  const filters = JSON.stringify(loginJsonBody())\r\n  try {\r\n    const response = yield call(User_Component_GetMethod_API, filters);\r\n    yield put(getUserListSuccess(response.Data));\r\n  } catch (error) { yield put(UserApiErrorAction()) }\r\n}\r\n\r\n// delete api \r\nfunction* Delete_UserList_GenFunc({ config }) {\r\n  try {\r\n    const response = yield call(User_Component_Delete_Method_API, config);\r\n    yield put(userDeleteActionSuccess(response))\r\n  } catch (error) { yield put(UserApiErrorAction()) }\r\n\r\n}\r\n\r\n// edit api\r\nfunction* Edit_UserList_GenFunc({ config }) {\r\n  const { btnmode } = config;\r\n  try {\r\n    const response = yield call(User_Component_EditById_API, config);\r\n    response.pageMode = btnmode\r\n    yield put(userEditActionSuccess(response));\r\n  } catch (error) { yield put(UserApiErrorAction()) }\r\n\r\n}\r\n\r\nfunction* Update_User_GenFunc({ config }) {\r\n  try {\r\n    const response = yield call(User_Component_Update_API, config);\r\n    yield put(userUpdateActionSuccess(response))\r\n  } catch (error) { yield put(UserApiErrorAction()) }\r\n}\r\n\r\nfunction* Get_UserPartiesForUserMaster_GenFunc({ editDetail }) {\r\n\r\n  const { id, editRole = [] } = editDetail\r\n  try {\r\n    const response = yield call(UserPartiesForUserMaster_API, id);\r\n    const rewRes = response.Data.map(i1 => {\r\n      let newRole = []\r\n      editRole.map(i2 => {\r\n        if (i2.Party === i1.Party_id) {\r\n          newRole = i2.PartyRoles.map(i3 => ({\r\n            value: i3.Role,\r\n            label: i3.RoleName\r\n          }));\r\n        }\r\n      })\r\n      const arr = {\r\n        PartyRoles: newRole,\r\n        Party: i1.Party_id,\r\n        PartyName: i1.PartyName\r\n      }\r\n      return arr\r\n    })\r\n    yield put(GetUserPartiesForUserMastePageSuccess(rewRes))\r\n\r\n  } catch (error) { yield put(UserApiErrorAction()) }\r\n\r\n}\r\n\r\nfunction* UserRegistrationSaga() {\r\n  yield takeLatest(GET_EMPLOYEE_FOR_USER_REGISTRATION, EmployeelistDropdown_GenFunc);\r\n  yield takeLatest(ADD_USER, user_save_GenFunc);\r\n  yield takeLatest(UPDATE_USER_ACTION, Update_User_GenFunc);\r\n  yield takeLatest(GET_USER_LIST_FOR_USER, userList_GenFunc)\r\n  yield takeLatest(DELETE_USER_ACTION, Delete_UserList_GenFunc)\r\n  yield takeLatest(EDIT_USER_ACTION, Edit_UserList_GenFunc)\r\n  yield takeLatest(GET_USER_PARTIES_FOR_USER_MASTER, Get_UserPartiesForUserMaster_GenFunc)\r\n\r\n}\r\nexport default UserRegistrationSaga;","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Purchase\\OrderPageRedux\\saga.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\CompanyRedux\\saga.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Utilites\\PageFiled\\saga.js",["3326"],"import { call, put, takeLatest } from \"redux-saga/effects\";\r\nimport { commonPageFiled_API } from \"../../../helpers/backend_helper\";\r\nimport { COMMON_PAGE_FILED, COMMON_PAGE_FILED_lIST } from \"./actionType\";\r\n\r\nimport {\r\n  commonPageFieldSuccess,\r\n  commonPageFieldListSuccess\r\n} from \"../../actions\"\r\nimport { customAlert } from \"../../../CustomAlert/ConfirmDialog\";\r\n\r\n\r\nfunction* commonPageFiled_GenFunc({ pageId }) {\r\n\r\n  try {\r\n    const response = yield call(commonPageFiled_API, pageId);\r\n\r\n    const { PageFieldMaster } = response.Data\r\n\r\n    if ((PageFieldMaster.length > 0)) {\r\n      yield put(commonPageFieldSuccess(response.Data));\r\n    }\r\n\r\n  } catch (error) { }\r\n}\r\nfunction* commonPageFiledList_GenFunc({ pageId }) {\r\n  try {\r\n\r\n    const response = yield call(commonPageFiled_API, pageId);\r\n    const { PageFieldMaster } = response.Data\r\n    if ((PageFieldMaster.length > 0)) {\r\n      yield put(commonPageFieldListSuccess(response.Data));\r\n    }\r\n  } catch (error) { }\r\n}\r\n\r\nfunction* CommonPageField_Saga() {\r\n  yield takeLatest(COMMON_PAGE_FILED, commonPageFiled_GenFunc);\r\n  yield takeLatest(COMMON_PAGE_FILED_lIST, commonPageFiledList_GenFunc);\r\n}\r\nexport default CommonPageField_Saga;\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\ModulesRedux\\saga.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\auth\\profile\\saga.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\layout\\saga.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\auth\\forgetpwd\\saga.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\auth\\login\\saga.js",["3327","3328"],"import { call, put, takeLatest } from \"redux-saga/effects\"\r\n\r\n// Login Redux States\r\nimport {\r\n  DIVISION_DROPDOWN_AFTER_LOGIN_ACTION,\r\n  GET_SUPER_ADMIN_API,\r\n  GET_USER_DETAILS_AFTER_LOGIN,\r\n  LOGIN_USER, LOGOUT_USER,\r\n  ROLE_ACCESS_API_CALL\r\n} from \"./actionTypes\"\r\nimport {\r\n  apiError, divisionDropdownSelectSuccess, getUserDetailsActionSuccess,\r\n  loginError_Action,\r\n  loginSuccess,\r\n  loginSuccessAction,\r\n  postSuperAdminSuccess,\r\n  RoleAccessUpdateSuccess,\r\n  roleAceessActionError,\r\n  roleAceessActionSuccess\r\n} from \"./actions\"\r\n\r\nimport {\r\n  divisionDropdown_Forlogin_ChangeDivisionPage_ApiCall,\r\n  getUserDetails_afterLogin_ApiCall,\r\n  post_SuperAdmin,\r\n  Python_FoodERP_postJwtLogin, RoleAccessApi_url, showPagesListOnPageAccess_DropDown_List,\r\n} from \"../../../helpers/backend_helper\"\r\nimport { customAlert } from \"../../../CustomAlert/ConfirmDialog\"\r\nimport { CommonConsole } from \"../../../components/Common/CommonFunction\"\r\n\r\nfunction* loginUser({ payload: { user } }) {\r\n  try {\r\n\r\n    const response = yield call(Python_FoodERP_postJwtLogin, {\r\n      LoginName: user.UserName,\r\n      password: user.Password\r\n    })\r\n\r\n    if (response.StatusCode === 200) {\r\n      yield put(loginSuccessAction(response))\r\n    } else {\r\n      yield put(loginError_Action(response.Message))\r\n\r\n    }\r\n  } catch (error) {\r\n    yield put(loginError_Action(\"Incorrect Password\"))\r\n  }\r\n}\r\nfunction* afterLoginUserDetails_genFun({ id }) {\r\n\r\n  try {\r\n    const response = yield call(getUserDetails_afterLogin_ApiCall, {\r\n      UserId: id,\r\n    })\r\n    if ((response.StatusCode === 200)) {\r\n      yield put(getUserDetailsActionSuccess(response.Data))\r\n    } else {\r\n      throw new Error('Exception message');\r\n    }\r\n    \r\n    yield put(getUserDetailsActionSuccess(response.Data))\r\n    localStorage.setItem(\"UserName\", (response.Data.UserName))\r\n    localStorage.setItem(\"Company\", response.Data.CompanyID)\r\n    localStorage.setItem(\"CompanyName\", response.Data.CompanyName)\r\n    localStorage.setItem(\"CompanyGroup\", response.Data.CompanyGroup)\r\n    localStorage.setItem(\"EmployeeID\", response.Data.EmployeeID)\r\n    localStorage.setItem(\"EmployeeName\", response.Data.EmployeeName)\r\n    if (response.Data.IsSCMCompany) {\r\n      localStorage.setItem(\"IsSCMCompany\", 1)\r\n    }\r\n    else {\r\n      localStorage.setItem(\"IsSCMCompany\", 0)\r\n    }\r\n    var employee = response.Data.EmployeeID;\r\n\r\n    const response2 = yield call(divisionDropdown_Forlogin_ChangeDivisionPage_ApiCall, employee,)\r\n    if ((response2.StatusCode === 200)) {\r\n      yield put(divisionDropdownSelectSuccess(response2.Data))\r\n    } else {\r\n      throw new Error('Exception message');\r\n    }\r\n\r\n  } catch (error) {\r\n    yield put(loginError_Action('Login Erorr...'))\r\n  }\r\n}\r\n\r\nfunction* logoutUser({ payload: { history } }) {\r\n  try {\r\n    history.push(\"/login\")\r\n  } catch (error) {\r\n    yield put(loginError_Action(error))\r\n  }\r\n}\r\nfunction* RoleAccessGenratorFunction({ party, employee, company }) {\r\n\r\n  try {\r\n    const PageAccessApi = yield call(showPagesListOnPageAccess_DropDown_List)\r\n\r\n    const RoleResponse = yield call(RoleAccessApi_url, party, employee, company);\r\n\r\n    \r\n\r\n    if (RoleResponse.Data.length > 0 && PageAccessApi.Data.length > 0) {\r\n      let arrayMain = [];\r\n      let objMain = {};\r\n      let arrayChild = [];\r\n      let objChild = {};\r\n      let all_DataInSinlgeArray = [];\r\n\r\n      RoleResponse.Data.forEach((parent) => {\r\n        objMain = parent;\r\n\r\n        parent.ModuleData.forEach((child) => {\r\n          objChild = child;\r\n\r\n          PageAccessApi.Data.forEach((page) => {\r\n            objChild[`RoleAccess_${page.Name}`] = false;\r\n          });\r\n\r\n          child.RolePageAccess.forEach((role) => {\r\n            objChild[`RoleAccess_${role.Name}`] = true;\r\n          });\r\n\r\n          arrayChild.push(objChild);\r\n          objChild = {};\r\n        });\r\n\r\n        // Sort child pages based on DisplayIndex in ascending order\r\n        arrayChild.sort((a, b) => a.DisplayIndex - b.DisplayIndex);\r\n\r\n        delete objMain.ModuleData;\r\n        objMain[\"ModuleData\"] = arrayChild;\r\n        arrayMain.push(objMain);\r\n\r\n        arrayChild = [];\r\n        objMain = {};\r\n      });\r\n\r\n      // Sort modules based on DisplayIndex in ascending order\r\n      arrayMain.sort((a, b) => a.DisplayIndex - b.DisplayIndex);\r\n\r\n      arrayMain.forEach((i) => {\r\n        i.ModuleData.forEach((index) => {\r\n          index.ModuleName = i.ModuleName;\r\n          all_DataInSinlgeArray.push(index);\r\n        });\r\n      });\r\n\r\n      yield put(roleAceessActionSuccess(arrayMain));\r\n      yield put(RoleAccessUpdateSuccess(all_DataInSinlgeArray));\r\n    }\r\n\r\n  } catch (error) {\r\n    yield put(roleAceessActionError(true))\r\n  }\r\n}\r\n\r\nfunction* Post_SuperAdmin_API_GenratorFunction() {\r\n  try {\r\n    const response = yield call(post_SuperAdmin);\r\n    yield put(postSuperAdminSuccess(response.Data));\r\n  } catch (error) {\r\n    customAlert({\r\n      Type: 4,\r\n      Status: true, Message: \"500 Error Message\",\r\n    });\r\n  }\r\n}\r\nfunction* DivisionDropDownOption_AfterLogin_genFun({ employeeID }) {\r\n  try {\r\n    const response = yield call(divisionDropdown_Forlogin_ChangeDivisionPage_ApiCall, employeeID,)\r\n    if ((response.StatusCode === 200)) {\r\n      yield put(divisionDropdownSelectSuccess(response.Data))\r\n    }\r\n  }\r\n  catch (error) {\r\n    yield put(loginError_Action(error));\r\n    CommonConsole(error);\r\n  }\r\n}\r\n\r\n\r\nfunction* authSaga() {\r\n  yield takeLatest(LOGIN_USER, loginUser)\r\n  yield takeLatest(GET_USER_DETAILS_AFTER_LOGIN, afterLoginUserDetails_genFun)\r\n  yield takeLatest(ROLE_ACCESS_API_CALL, RoleAccessGenratorFunction)\r\n  yield takeLatest(LOGOUT_USER, logoutUser)\r\n  yield takeLatest(GET_SUPER_ADMIN_API, Post_SuperAdmin_API_GenratorFunction)\r\n  yield takeLatest(DIVISION_DROPDOWN_AFTER_LOGIN_ACTION, DivisionDropDownOption_AfterLogin_genFun)\r\n\r\n\r\n}\r\n\r\nexport default authSaga\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\GSTRedux\\reducer.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\PartySubPartyRedux\\reducer.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\auth\\register\\saga.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\GroupRedux\\reducer.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\GroupTypeRedux\\reducer.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\MarginMasterRedux\\reducer.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\PriceList\\reducer.js",["3329"],"import { DELETE_PRICE_LIST_SUCCESS, PRICE_LIST_BY_PARTY_ACTION_SUCCESS, POST_PRICE_LIST_DATA_SUCCESS, EDIT_PRICE_LIST_SUCCESS, UPDATE_PRICE_LIST_SUCCESS, GET_PRICE_LIST_PAGE_SUCCESS, PRICE_LIST_BY_COMPANY_SUCCESS, PRICE_LIST_BY_COMPANY, PRICE_lIST_API_ERROR_ACTION, POST_PRICE_LIST_DATA, PRICE_LIST_BY_PARTY_ACTION } from \"./actionType\";\r\n\r\nconst INIT_STATE = {\r\n  postMsg: { Status: false },\r\n  priceListByPartyType: [],\r\n  priceListByCompany: [],\r\n  deleteMsg: { Status: false },\r\n  editData: { Status: false },\r\n  updateMessage: { Status: false },\r\n  listBtnLoading: false,\r\n  saveBtnloading: false,\r\n  priceListDropDownLoading: true\r\n}\r\n\r\nconst PriceListReducer = (state = INIT_STATE, action) => {\r\n  switch (action.type) {\r\n    // post api\r\n    case POST_PRICE_LIST_DATA:\r\n      return {\r\n        ...state,\r\n        saveBtnloading: true,\r\n      };\r\n    // post api\r\n    case POST_PRICE_LIST_DATA_SUCCESS:\r\n      return {\r\n        ...state,\r\n        saveBtnloading: false,\r\n        postMsg: action.payload,\r\n      };\r\n\r\n    // GET api\r\n    case PRICE_LIST_BY_PARTY_ACTION:\r\n      return {\r\n        ...state,\r\n        priceListDropDownLoading: true,\r\n      };\r\n\r\n    // GET api\r\n    case PRICE_LIST_BY_PARTY_ACTION_SUCCESS:\r\n      return {\r\n        ...state,\r\n        priceListByPartyType: action.payload,\r\n        priceListDropDownLoading: false,\r\n      };\r\n\r\n    // GET api\r\n    case PRICE_LIST_BY_COMPANY:\r\n      return {\r\n        ...state,\r\n        listBtnLoading: true,\r\n      };\r\n    // GET api\r\n    case PRICE_LIST_BY_COMPANY_SUCCESS:\r\n      return {\r\n        ...state,\r\n        listBtnLoading: false,\r\n        priceListByCompany: action.payload,\r\n      };\r\n\r\n    // DELETE api\r\n    case DELETE_PRICE_LIST_SUCCESS:\r\n      return {\r\n        ...state,\r\n        deleteMsg: action.payload,\r\n      };\r\n\r\n    case EDIT_PRICE_LIST_SUCCESS:\r\n      return {\r\n        ...state,\r\n        editData: action.payload,\r\n      };\r\n\r\n\r\n    case UPDATE_PRICE_LIST_SUCCESS:\r\n      return {\r\n        ...state,\r\n        updateMessage: action.payload,\r\n      };\r\n\r\n    case PRICE_lIST_API_ERROR_ACTION:\r\n      return {\r\n        ...state,\r\n        saveBtnloading: false,\r\n        listBtnLoading: false,\r\n        priceListDropDownLoading: false,\r\n      };\r\n\r\n\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\nexport default PriceListReducer;\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\MRPMasterRedux\\reducer.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\CompanyGroupRedux\\reducer.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\DriverRedux\\reducer.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\VehicleRedux\\reducer.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\CategoryRedux\\reducer.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\CategoryTypeRedux\\reducer.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\PartyTypeRedux\\reducer.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\EmployeeTypeRedux\\reducer.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\RoleAccessRedux\\reducer.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\ItemPages\\ItemMaster\\Division_Tab\\index.js",["3330"],"D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\ItemPages\\ItemMaster\\Category_Tab\\index.js",["3331","3332"],"D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\ItemPages\\ItemMaster\\Group_Tab\\index.js",["3333","3334","3335","3336","3337","3338"],"import React, { useEffect, useState } from \"react\";\r\nimport {\r\n    Button,\r\n    Card,\r\n    CardBody,\r\n    Col,\r\n    FormGroup,\r\n    Label,\r\n    Row,\r\n} from \"reactstrap\";\r\nimport Select from \"react-select\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { getGroupTypeslist } from \"../../../../../store/Administrator/GroupTypeRedux/action\";\r\nimport GroupTable from \"./Table\";\r\nimport {\r\n    get_Group_By_GroupType_ForDropDown,\r\n    get_Sub_Group_By_Group_ForDropDown,\r\n    get_Sub_Group_By_Group_ForDropDown_Success\r\n} from \"../../../../../store/Administrator/ItemsRedux/action\";\r\nimport { customAlert } from \"../../../../../CustomAlert/ConfirmDialog\";\r\nimport { C_Select } from \"../../../../../CustomValidateForm\";\r\n\r\nfunction GroupTab(props) {\r\n    const dispatch = useDispatch();\r\n    const [groupTypeDropdownSelect, setGroupTypeDropdownSelect] = useState(\"\");\r\n    const [groupDropdownSelect, setGroupDropdownSelect] = useState(\"\");\r\n    const [subGroupDropdownSelect, setSubGroupDropdownSelect] = useState(\"\");\r\n\r\n    const { GroupType, GroupList, SubGroupList, groupDropDownLoading, subgroupDropDownLoading} = useSelector((state) => ({\r\n        GroupType: state.GroupTypeReducer.GroupType,\r\n        GroupList: state.ItemMastersReducer.GroupList,\r\n        SubGroupList: state.ItemMastersReducer.SubGroupList,\r\n        groupDropDownLoading: state.ItemMastersReducer.groupDropDownLoading,\r\n        subgroupDropDownLoading: state.ItemMastersReducer.subgroupDropDownLoading,\r\n    }));\r\n\r\n    useEffect(() => {\r\n        dispatch(getGroupTypeslist());\r\n    }, [dispatch]);\r\n\r\n    const GroupType_DropdownOptions = GroupType.map((index) => ({\r\n        value: index.id,\r\n        label: index.Name,\r\n        IsReserved: index.IsReserved\r\n    }));\r\n\r\n    const Group_DropdownOptions = GroupList.map((index) => ({\r\n        value: index.id,\r\n        label: index.Name,\r\n    }));\r\n\r\n    const SubGroup_DropdownOptions = SubGroupList.map((index) => ({\r\n        value: index.id,\r\n        label: index.Name,\r\n    }));\r\n\r\n    const GroupType_Handler = (event) => {\r\n        const found = props.tableData.find(element => {\r\n            return element.GroupType == event.value\r\n        });\r\n        if (found == undefined) {\r\n            setGroupTypeDropdownSelect(event);\r\n            dispatch(get_Group_By_GroupType_ForDropDown(event.value))\r\n            dispatch(get_Sub_Group_By_Group_ForDropDown_Success([]))\r\n            setGroupDropdownSelect([]);\r\n            setSubGroupDropdownSelect([]);\r\n\r\n        }\r\n        else {\r\n            alert(`${event.label} Is Already Selected...!`)\r\n        }\r\n    };\r\n\r\n    const Group_Handler = (event) => {\r\n\r\n        const found = props.tableData.find(element => {\r\n            return element.Group == event.value\r\n        });\r\n        if (found == undefined) {\r\n            setGroupDropdownSelect(event);\r\n            dispatch(get_Sub_Group_By_Group_ForDropDown(event.value))\r\n            setSubGroupDropdownSelect([]);\r\n        }\r\n        else {\r\n            alert(`${event.label} Is Already Selected...!`)\r\n        }\r\n    };\r\n\r\n    const SubGroup_Handler = (event) => {\r\n        setSubGroupDropdownSelect(event);\r\n    };\r\n\r\n    const addRowsHandler = (e) => {\r\n        const val = {\r\n            GroupType: groupTypeDropdownSelect === \"\" ? \"\" : groupTypeDropdownSelect.value,\r\n            GroupTypeName: groupTypeDropdownSelect.label,\r\n            Group: groupDropdownSelect === \"\" ? \"\" : groupDropdownSelect.value,\r\n            GroupName: groupDropdownSelect.label,\r\n            SubGroup: subGroupDropdownSelect === \"\" ? \"\" : subGroupDropdownSelect.value,\r\n            SubGroupName: subGroupDropdownSelect.label,\r\n        };\r\n        if ((groupTypeDropdownSelect.value === undefined)) {\r\n            dispatch(\r\n                customAlert({\r\n                    Type: 4,\r\n                    Status: true,\r\n                    Message: \"Please Select GroupType value...!\",\r\n                    RedirectPath: false,\r\n                    PermissionAction: false,\r\n                })\r\n            );\r\n            return;\r\n        }\r\n        if ((groupDropdownSelect.value === undefined)) {\r\n            dispatch(\r\n                customAlert({\r\n                    Type: 4,\r\n                    Status: true,\r\n                    Message: \"Please Select Group value...!\",\r\n                    RedirectPath: false,\r\n                    PermissionAction: false,\r\n                })\r\n            );\r\n            return;\r\n        }\r\n        else {\r\n            const totalTableData = props.tableData.length;\r\n            val.id = totalTableData + 1;\r\n            const updatedTableData = [...props.tableData];\r\n            updatedTableData.push(val);\r\n            props.func(updatedTableData);\r\n            clearState();\r\n        }\r\n\r\n    };\r\n\r\n    const clearState = () => {\r\n        setGroupTypeDropdownSelect(\"\");\r\n        setGroupDropdownSelect(\"\");\r\n        setSubGroupDropdownSelect(\"\");\r\n    };\r\n\r\n    return (\r\n\r\n        <Row style={{ marginBottom: \"\" }}>\r\n\r\n            <Col md={12} >\r\n                <Card className=\"text-black\" >\r\n                    <CardBody className=\"c_card_body\">\r\n                        <Row className=\"mt-6\">\r\n                            <Col className=\"col-11 \">\r\n                                <Row>\r\n                                    <FormGroup className=\"col-sm-4 \">\r\n                                        <Label>Group Type</Label>\r\n                                        <Select\r\n                                            value={groupTypeDropdownSelect}\r\n                                            options={GroupType_DropdownOptions}\r\n                                            onChange={GroupType_Handler}\r\n                                            styles={{\r\n                                                menu: provided => ({ ...provided, zIndex: 2 })\r\n                                            }}\r\n                                        />\r\n                                    </FormGroup>\r\n\r\n                                    <FormGroup className=\" col col-sm-4 \">\r\n                                        <Label>Group</Label>\r\n                                        <C_Select\r\n                                            value={groupDropdownSelect}\r\n                                            options={Group_DropdownOptions}\r\n                                            onChange={Group_Handler}\r\n                                            isLoading={groupDropDownLoading}\r\n                                            styles={{\r\n                                                menu: provided => ({ ...provided, zIndex: 2 })\r\n                                            }}\r\n                                        />\r\n                                    </FormGroup>\r\n\r\n                                    <FormGroup className=\"mb-3 col col-sm-4 \">\r\n                                        <Label>Sub Group</Label>\r\n                                        <C_Select\r\n                                            value={subGroupDropdownSelect}\r\n                                            options={SubGroup_DropdownOptions}\r\n                                            isLoading={subgroupDropDownLoading}\r\n                                            onChange={SubGroup_Handler}\r\n                                            styles={{\r\n                                                menu: provided => ({ ...provided, zIndex: 2 })\r\n                                            }}\r\n                                        />\r\n                                    </FormGroup>\r\n\r\n                                </Row>\r\n                            </Col>\r\n                            <Col md={1}>\r\n                                <Row className=\"mt-3 \">\r\n                                    <Col >\r\n                                        <Button\r\n                                            className=\" button_add\"\r\n                                            color=\"btn btn-outline-primary border-2 font-size-12\"\r\n                                            type=\"button\"\r\n                                            onClick={addRowsHandler}\r\n                                        >\r\n                                            <i className=\"dripicons-plus\"></i>\r\n\r\n                                        </Button>\r\n                                    </Col>\r\n                                </Row>\r\n                            </Col>\r\n                        </Row>\r\n                    </CardBody>\r\n                </Card>\r\n                <Row>\r\n                    <GroupTable tableData={props.tableData} func={props.func} />\r\n                </Row>\r\n            </Col>\r\n        </Row>\r\n    );\r\n}\r\n\r\nexport default GroupTab;\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\ItemPages\\ItemMaster\\GST_Tab\\index.js",["3339"],"import React, { useState } from 'react';\r\nimport {\r\n    Button,\r\n    Card,\r\n    CardBody,\r\n    Col,\r\n    FormGroup,\r\n    Input,\r\n    Label,\r\n    Row\r\n} from 'reactstrap';\r\nimport GSTTable from './Table';\r\nimport { loginUserID, loginCompanyID } from '../../../../../components/Common/CommonFunction';\r\nimport { customAlert } from '../../../../../CustomAlert/ConfirmDialog';\r\nimport { C_DatePicker } from '../../../../../CustomValidateForm';\r\n\r\nfunction GSTTab(props) {\r\n\r\n    const [effectiveDate, setEffectiveDate] = useState('');\r\n    const [GST, setGST] = useState('');\r\n    const [HSNCode, setHSNCode] = useState('');\r\n\r\n    const EffectiveDateHandler = (e, date) => {\r\n        setEffectiveDate(date)\r\n    }\r\n\r\n    const addRowsHandler = (data) => {\r\n        const val = {\r\n            GSTPercentage: GST,\r\n            HSNCode: HSNCode,\r\n            EffectiveDate: effectiveDate,\r\n            CreatedBy: loginUserID(),\r\n            UpdatedBy: loginUserID(),\r\n            Company: loginCompanyID(),\r\n            CommonID: 0,\r\n            IsDeleted: 0,\r\n            IsAdd: true,\r\n        };\r\n\r\n        if (!(GST === \"\")\r\n            && !(HSNCode === \"\")\r\n            && !(effectiveDate === \"\")\r\n        ) {\r\n            const totalTableData = props.tableData.length;\r\n            val.id = totalTableData + 1;\r\n            const updatedTableData = [...props.tableData];\r\n            updatedTableData.push(val);\r\n            props.func(updatedTableData)\r\n            clearState();\r\n\r\n        }\r\n        else {\r\n            customAlert({ Type: 4, Message: \"Please Enter value\" })\r\n        }\r\n    };\r\n    const clearState = () => {\r\n        setGST('');\r\n        setHSNCode('');\r\n        setEffectiveDate('');\r\n    };\r\n\r\n    return (\r\n\r\n        <Row>\r\n            <Col md={12}  >\r\n                <Card className=\"text-black\">\r\n                    <CardBody className='c_card_body'>\r\n                        <Row>\r\n\r\n                            <FormGroup className=\"mb-3 col col-sm-3 \">\r\n                                <Label>Effective Date</Label>\r\n                                <div id={`txtEffectiveDate${0}`} >\r\n                                    <C_DatePicker\r\n                                        id={`txtEffectiveDate${0}`}\r\n                                        name=\"EffectiveDate\"\r\n                                        placeholder=\"Please Enter EffectiveDate\"\r\n                                        value={effectiveDate}\r\n                                        required={true}\r\n                                        onChange={EffectiveDateHandler}\r\n                                        options={{\r\n                                            altInput: true,\r\n                                            altFormat: \"d-m-Y\",\r\n                                            dateFormat: \"Y-m-d\",\r\n                                        }}\r\n                                    />\r\n                                </div>\r\n                            </FormGroup>\r\n\r\n                            <FormGroup className=\"mb-3 col col-sm-3 \" >\r\n                                <Label >GST</Label>\r\n                                <Input type=\"text\"\r\n                                    id={`txtGST${0}`}\r\n                                    value={GST}\r\n                                    placeholder=\"Please Enter GST\"\r\n                                    autoComplete=\"off\"\r\n                                    onChange={(event) => setGST(event.target.value)}\r\n                                />\r\n\r\n                            </FormGroup>\r\n\r\n                            <FormGroup className=\"mb-3 col col-sm-3 \" >\r\n                                <Label >HSNCode</Label>\r\n                                <Input type=\"text\"\r\n                                    id={`txtHSNCode${0}`}\r\n                                    value={HSNCode}\r\n                                    placeholder=\"Please Enter HSNCode\"\r\n                                    autoComplete=\"off\"\r\n                                    onChange={(event) => setHSNCode(event.target.value)}\r\n                                />\r\n\r\n                            </FormGroup>\r\n                            <Col md={1}>\r\n\r\n                                <Row className=\" mt-3\">\r\n                                    <Col >\r\n                                        <Button\r\n                                            className=\" button_add\"\r\n                                            color=\"btn btn-outline-primary border-2 font-size-12\"\r\n                                            type=\"button\"\r\n                                            onClick={addRowsHandler}\r\n                                        >\r\n                                            <i className=\"dripicons-plus mt-3\"> </i>\r\n                                        </Button>\r\n                                    </Col>\r\n                                </Row>\r\n                            </Col>\r\n                        </Row>\r\n                    </CardBody>\r\n                </Card>\r\n                <Row>\r\n                    <GSTTable tableData={props.tableData} func={props.func} />\r\n                </Row>\r\n            </Col>\r\n        </Row>\r\n    );\r\n}\r\n\r\nexport default GSTTab;\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\ItemPages\\ItemMaster\\MRP_Tab\\index.js",["3340"],"import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  Button,\r\n  Card,\r\n  CardBody,\r\n  Col,\r\n  Input,\r\n  Label,\r\n  Row,\r\n} from \"reactstrap\";\r\nimport Select from \"react-select\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport MRPTable from \"./Table\";\r\nimport {\r\n  get_Division_ForDropDown,\r\n  get_Party_ForDropDown,\r\n} from \"../../../../../store/Administrator/ItemsRedux/action\";\r\nimport { loginUserID, loginCompanyID, loginIsSCMCompany } from \"../../../../../components/Common/CommonFunction\";\r\nimport { customAlert } from \"../../../../../CustomAlert/ConfirmDialog\";\r\nimport { C_DatePicker } from \"../../../../../CustomValidateForm\";\r\n\r\nfunction MRPTab(props) {\r\n  const dispatch = useDispatch();\r\n  const IsSCMCompany = loginIsSCMCompany()\r\n\r\n  const [division, setDivision] = useState(\"\");\r\n  const [partyName, setPartyName] = useState(\"\");\r\n  const [effectiveDate, setEffectiveDate] = useState(\"\");\r\n  const [MRP, setMRP] = useState(\"\");\r\n\r\n  const { Party, Division } = useSelector((state) => ({\r\n    Division: state.ItemMastersReducer.Division,\r\n    Party: state.ItemMastersReducer.Party,\r\n  }));\r\n\r\n  useEffect(() => {\r\n    dispatch(get_Division_ForDropDown());\r\n    dispatch(get_Party_ForDropDown());\r\n  }, [dispatch]);\r\n\r\n  const Party_DropdownOptions = Party.map((data) => ({\r\n    value: data.id,\r\n    label: data.Name,\r\n  }));\r\n\r\n  const Division_DropdownOptions = Division.map((data) => ({\r\n    value: data.id,\r\n    label: data.Name,\r\n  }));\r\n\r\n  const DivisiontHandler = (event) => {\r\n    setDivision(event);\r\n  };\r\n\r\n  const EffectiveDateHandler = (e, date) => {\r\n    setEffectiveDate(date);\r\n  };\r\n\r\n  const PartyNameHandler = (event) => {\r\n    setPartyName(event);\r\n  };\r\n\r\n  const MRPHandler = (event) => {\r\n    setMRP(event.target.value);\r\n  };\r\n\r\n  const addRowsHandler = (e) => {\r\n\r\n    const val = {\r\n      Division: division === \"\" ? \"\" : division.value,\r\n      DivisionName: division.label,\r\n      PartyName: partyName.label,\r\n      Party: partyName === \"\" ? \"\" : partyName.value,\r\n      EffectiveDate: effectiveDate,\r\n      MRP: MRP,\r\n      CreatedBy: loginUserID(),\r\n      UpdatedBy: loginUserID(),\r\n      Company: loginCompanyID(),\r\n      IsDeleted: 0,\r\n      CommonID: 0,\r\n      IsAdd: true\r\n    };\r\n\r\n    if (!(effectiveDate === \"\") && !(MRP === \"\")) {\r\n      const totalTableData = props.tableData.length;\r\n      val.id = totalTableData + 1;\r\n      const updatedTableData = [...props.tableData];\r\n      updatedTableData.push(val);\r\n      props.func(updatedTableData);\r\n      clearState();\r\n    } else {\r\n      customAlert({ Type: 4, Message: \"Please Enter value\" })\r\n    }\r\n  };\r\n\r\n  const clearState = () => {\r\n    setDivision(\"\");\r\n    setPartyName(\"\");\r\n    setEffectiveDate(\"\");\r\n    setMRP(\"\");\r\n  };\r\n\r\n  return (\r\n    <Row>\r\n      <Col md={12}>\r\n        <Card className=\"text-black\">\r\n          <CardBody className=\"c_card_body\">\r\n            <Row className=\"mt-3\">\r\n              <Col className=\" col col-11 \">\r\n\r\n                <Row>\r\n                  {!(IsSCMCompany === 1) &&\r\n                    <> <div className=\" col col-sm-3 \">\r\n                      <Label>Division</Label>\r\n                      <Select\r\n                        id={`dropDivision-${0}`}\r\n                        value={division}\r\n                        styles={{\r\n                          menu: provided => ({ ...provided, zIndex: 2 })\r\n                        }}\r\n                        options={Division_DropdownOptions}\r\n                        onChange={DivisiontHandler}\r\n                      />\r\n                    </div>\r\n                      <div className=\"mb-3 col col-sm-3 \">\r\n                        <Label>Party Name</Label>\r\n                        <Select\r\n                          id={`dropPartyName-${0}`}\r\n                          value={partyName}\r\n                          styles={{\r\n                            menu: provided => ({ ...provided, zIndex: 2 })\r\n                          }}\r\n                          options={Party_DropdownOptions}\r\n                          onChange={PartyNameHandler}\r\n                        />\r\n                      </div>\r\n                    </>\r\n                  }\r\n\r\n                  <div className=\"mb-3 col col-sm-3 \">\r\n                    <Label>Effective Date</Label>\r\n                    <div id={`txtEffectiveDate${0}`}>\r\n                      <C_DatePicker\r\n                        id={`txtEffectiveDate${0}`}\r\n                        value={effectiveDate}\r\n                        placeholder=\"Please Enter EffectiveDate\"\r\n                        onChange={EffectiveDateHandler}\r\n                        options={{\r\n                          altInput: true,\r\n                          altFormat: \"d-m-Y\",\r\n                          dateFormat: \"Y-m-d\",\r\n                        }}\r\n                      />\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div className=\"mb-3 col col-sm-3 \">\r\n                    <Label>MRP</Label>\r\n                    <Input\r\n                      type=\"text\"\r\n                      id={`txtMRP${0}`}\r\n                      value={MRP}\r\n                      placeholder=\"Please Enter MRP\"\r\n                      onChange={MRPHandler}\r\n                    />\r\n                  </div>\r\n\r\n                </Row>\r\n              </Col>\r\n              <Col sm={1}>\r\n                <Row className=\" mt-3\">\r\n                  <Col >\r\n                    <Button\r\n\r\n                      //  className=\"btn btn-sm mt-1 mt-3 btn-light  btn-outline-primary  \"\r\n                      className=\" button_add\"\r\n                      color=\"btn btn-outline-primary border-2 font-size-12\"\r\n                      type=\"button\"\r\n                      onClick={addRowsHandler} >\r\n                      <i className=\"dripicons-plus\"></i>\r\n                    </Button>\r\n                  </Col>\r\n                </Row>\r\n              </Col>\r\n            </Row>\r\n          </CardBody>\r\n        </Card>\r\n        <Row>\r\n          <MRPTable tableData={props.tableData} func={props.func} />\r\n        </Row>\r\n      </Col>\r\n    </Row>\r\n  );\r\n}\r\n\r\nexport default MRPTab;\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\PartyTypeRedux\\actionTypes.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\RoleMasterRedux\\actionTypes.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\ItemPages\\ItemMaster\\MarginTab\\Table.js",["3341","3342"],"import React, { useEffect, useState } from 'react';\r\nimport { Button, Table, } from 'reactstrap';\r\nimport { Tbody, Thead } from 'react-super-responsive-table';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { deleteIdForMarginMaster, deleteIdForMarginMasterSuccess } from '../../../../../store/Administrator/MarginMasterRedux/action';\r\nimport { customAlert } from '../../../../../CustomAlert/ConfirmDialog';\r\n\r\nfunction MarginTable(props) {\r\n    const dispatch = useDispatch();\r\n\r\n    const {\r\n      deleteMsg,\r\n    } = useSelector((state) => ({\r\n      deleteMsg: state.MarginMasterReducer.deleteId_For_MarginMaster,\r\n    }));\r\n  \r\n   const onDeleteHandeler = (info) => {\r\n      if (info.IsAdd) {\r\n        var fil = props.tableData.filter((i) => {\r\n          return !(i.id === info.id);\r\n        });\r\n        props.func(fil);\r\n      }\r\n      else {\r\n        dispatch(\r\n          customAlert({\r\n            Type: 5,\r\n            Status: true,\r\n            Message: `Are you sure you want to delete this Margin\"`,\r\n            RedirectPath: false,\r\n            PermissionAction: deleteIdForMarginMaster,\r\n            ID: info.id,\r\n          })\r\n        );\r\n      }\r\n    };\r\n  \r\n    useEffect(() => {\r\n      if (deleteMsg.Status === true && deleteMsg.StatusCode === 200) {\r\n        dispatch(deleteIdForMarginMasterSuccess({ Status: false }));\r\n  \r\n        var fil = props.tableData.filter((i) => {\r\n          return !(i.id === deleteMsg.deletedId);\r\n        });\r\n        props.func(fil);\r\n  \r\n        dispatch(\r\n          customAlert({\r\n            Type: 1,\r\n            Status: true,\r\n            Message: deleteMsg.Message,\r\n          })\r\n        );\r\n      } else if (deleteMsg.Status === true) {\r\n        dispatch(deleteIdForMarginMasterSuccess({ Status: false }));\r\n        dispatch(\r\n          customAlert({\r\n            Type: 3,\r\n            Status: true,\r\n            Message: JSON.stringify(deleteMsg.Message),\r\n          })\r\n        );\r\n      }\r\n    }, [deleteMsg]);\r\n\r\n    const tableRows = props.tableData.map((info) => {\r\n        \r\n        return (\r\n            <tr>\r\n                {/* <td>{info.id}</td> */}\r\n                <td>{info.PriceListName}</td>\r\n                <td>{info.PartyName}</td>\r\n                <td>{info.EffectiveDate}</td>\r\n                <td>{info.Margin}</td>\r\n                <td>\r\n                    <Button\r\n                        className=\"badge badge-soft-danger font-size-12 btn btn-danger waves-effect waves-light w-xxs border border-light\"\r\n                        data-mdb-toggle=\"tooltip\" data-mdb-placement=\"top\" title=\"Delete Party Type\"\r\n                        onClick={(e) => {\r\n                            onDeleteHandeler(info);\r\n                        }}\r\n                    >\r\n                        <i className=\"mdi mdi-delete font-size-18\"></i>\r\n                    </Button>\r\n                </td>\r\n            </tr>\r\n        );\r\n    });\r\n\r\n    return (\r\n        <>\r\n            <div>\r\n                {props.tableData.length > 0 ?\r\n                    <Table className=\"table table-bordered table-hover\">\r\n                        <Thead>\r\n                            <tr>\r\n                                <th className=\"col col-sm-3\">Price List</th>\r\n                                <th className=\"col col-sm-3\">Party Name</th>\r\n                                <th className=\"col col-sm-3\">EffectiveDate</th>\r\n                                <th className=\"col col-sm-3\">Margin</th>\r\n                                <th className=\"col col-sm-3\">{\"Action\"}</th>\r\n                            </tr>\r\n                        </Thead>\r\n                        <Tbody>{tableRows}</Tbody>\r\n                    </Table>\r\n                    : null}\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default MarginTable;\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\CompanyRedux\\actionType.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\PartyRedux\\reducer.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\RoleMasterRedux\\reducer.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\ItemsRedux\\reducer.js",["3343"],"import {\r\n    DELETE_ITEM_ID,\r\n    DELETE_ITEM_ID_SUCCESS,\r\n    EDIT_ITEM_ID,\r\n    EDIT_ITEM_ID_SUCCESS,\r\n    GET_BASEUNIT_FOR_DROPDOWN_SUCCESS,\r\n    GET_BRANDTAG_API_SUCCESS,\r\n    GET_CATEGORYTYPE_FOR_DROPDOWN_SUCCESS,\r\n    GET_CATEGORY_BY_CATEGORYTYPE_FOR_DROPDOWN_API,\r\n    GET_CATEGORY_BY_CATEGORYTYPE_FOR_DROPDOWN_API_SUCCESS,\r\n    GET_DIVISION_FOR_DROPDOWN_SUCCESS,\r\n    GET_GROUP_BY_GROUPTYPE_FOR_DROPDOWN,\r\n    GET_GROUP_BY_GROUPTYPE_FOR_DROPDOWN_SUCCESS,\r\n    GET_IMAGETYPE_FOR_DROPDOWN_SUCCESS,\r\n    GET_ITEMTAG_API_SUCCESS,\r\n    GET_ITEM_GROUP_FOR_DROPDOWN_SUCCESS,\r\n    GET_ITEM_LIST_API,\r\n    GET_ITEM_LIST_API_SUCCESS,\r\n    GET_MRPTYPE_FOR_DROPDOWN_SUCCESS,\r\n    GET_PARTY_FOR_DROPDOWN_SUCCESS,\r\n    GET_PRICE_LIST_FOR_DROPDOWN_SUCCESS,\r\n    GET_SUB_GROUP_BY_GROUP_FOR_DROPDOWN,\r\n    GET_SUB_GROUP_BY_GROUP_FOR_DROPDOWN_SUCCESS,\r\n    ITEMS_API_ERROR_ACTION,\r\n    SAVE_ITEM_MASTER,\r\n    SAVE_ITEM_MASTER_SUCCESS,\r\n    UPDATE_ITEM_ID,\r\n    UPDATE_ITEM_ID_SUCCESS\r\n} from \"./actionType\";\r\n\r\n\r\nconst INIT_STATE = {\r\n    ItemList: [],\r\n    postMsg: { Status: false },\r\n    deleteRoleID: [],\r\n    deleteMsg: { Status: false },\r\n    editData: { Status: false },\r\n    updateMsg: { Status: false },\r\n    ItemGroupList: [],\r\n    BaseUnit: [],\r\n    ImageType: [],\r\n    MRPType: [],\r\n    Division: [],\r\n    Party: [],\r\n    GroupList: [],\r\n    CategoryType: [],\r\n    Category: [],\r\n    SubGroupList: [],\r\n    ItemTagList: [],\r\n    BrandTagList: [],\r\n    saveBtnloading: false,\r\n    listBtnLoading: false,\r\n    loading: false,\r\n    categotyDropDownLoading: false,\r\n    subgroupDropDownLoading: false,\r\n    groupDropDownLoading: false\r\n\r\n};\r\n\r\nconst ItemMastersReducer = (state = INIT_STATE, action) => {\r\n    switch (action.type) {\r\n        // get api\r\n\r\n        case GET_ITEM_LIST_API:\r\n            return {\r\n                ...state,\r\n                loading: true,\r\n            }\r\n\r\n        case GET_ITEM_LIST_API_SUCCESS:\r\n            return {\r\n                ...state,\r\n                ItemList: action.payload,\r\n                loading: false,\r\n\r\n            }\r\n\r\n        case GET_BASEUNIT_FOR_DROPDOWN_SUCCESS:\r\n            return {\r\n                ...state,\r\n                BaseUnit: action.payload,\r\n            }\r\n\r\n        // get group itms\r\n        case GET_ITEM_GROUP_FOR_DROPDOWN_SUCCESS:\r\n            return {\r\n                ...state,\r\n                ItemGroupList: action.payload,\r\n            }\r\n        // get itemTag success\r\n        case GET_ITEMTAG_API_SUCCESS:\r\n            return {\r\n                ...state,\r\n                ItemTagList: action.payload,\r\n            }\r\n        // get Brand tag\r\n        case GET_BRANDTAG_API_SUCCESS:\r\n            return {\r\n                ...state,\r\n                BrandTagList: action.payload,\r\n            }\r\n\r\n        case SAVE_ITEM_MASTER:\r\n            return {\r\n                ...state,\r\n                saveBtnloading: true,\r\n\r\n            };\r\n\r\n        case SAVE_ITEM_MASTER_SUCCESS:\r\n            return {\r\n                ...state,\r\n                postMsg: action.payload,\r\n                saveBtnloading: false,\r\n\r\n            };\r\n\r\n        // delete api\r\n\r\n        case DELETE_ITEM_ID:\r\n            return {\r\n                ...state,\r\n                listBtnLoading: action.config.btnId,\r\n            };\r\n\r\n        case DELETE_ITEM_ID_SUCCESS:\r\n            return {\r\n                ...state,\r\n                deleteMsg: action.payload,\r\n                listBtnLoading: false\r\n            };\r\n\r\n\r\n        // edit api\r\n        case EDIT_ITEM_ID:\r\n            return {\r\n                ...state,\r\n                listBtnLoading: action.config.btnId,\r\n            };\r\n\r\n        case EDIT_ITEM_ID_SUCCESS:\r\n            return {\r\n                ...state,\r\n                editData: action.payload,\r\n                listBtnLoading: false\r\n            };\r\n\r\n        // update api\r\n        case UPDATE_ITEM_ID:\r\n            return {\r\n                ...state,\r\n                saveBtnloading: true,\r\n\r\n            };\r\n\r\n        case UPDATE_ITEM_ID_SUCCESS:\r\n            return {\r\n                ...state,\r\n                updateMsg: action.payload,\r\n                saveBtnloading: false,\r\n\r\n            };\r\n\r\n        case GET_CATEGORYTYPE_FOR_DROPDOWN_SUCCESS:\r\n            return {\r\n                ...state,\r\n                CategoryType: action.payload,\r\n                Category: []\r\n            }\r\n\r\n        // case GET_CATEGORY_BY_CATEGORYTYPE_FOR_DROPDOWN_SUCCESS:\r\n        //     return {\r\n        //         ...state,\r\n        //         CategoryByCategoryType: action.payload,\r\n        //     }\r\n\r\n\r\n        case GET_IMAGETYPE_FOR_DROPDOWN_SUCCESS:\r\n            return {\r\n                ...state,\r\n                ImageType: action.payload,\r\n            }\r\n\r\n        case GET_MRPTYPE_FOR_DROPDOWN_SUCCESS:\r\n            return {\r\n                ...state,\r\n                MRPType: action.payload,\r\n            }\r\n        case GET_DIVISION_FOR_DROPDOWN_SUCCESS:\r\n            return {\r\n                ...state,\r\n                Division: action.payload,\r\n            }\r\n        case GET_PARTY_FOR_DROPDOWN_SUCCESS:\r\n            return {\r\n                ...state,\r\n                Party: action.payload,\r\n            }\r\n\r\n        case GET_GROUP_BY_GROUPTYPE_FOR_DROPDOWN:\r\n            return {\r\n                ...state,\r\n                groupDropDownLoading: true\r\n            }\r\n\r\n        case GET_GROUP_BY_GROUPTYPE_FOR_DROPDOWN_SUCCESS:\r\n            return {\r\n                ...state,\r\n                GroupList: action.payload,\r\n                groupDropDownLoading:false\r\n\r\n            }\r\n\r\n\r\n        case GET_SUB_GROUP_BY_GROUP_FOR_DROPDOWN:\r\n            return {\r\n                ...state,\r\n                subgroupDropDownLoading:true\r\n            }\r\n\r\n            case GET_SUB_GROUP_BY_GROUP_FOR_DROPDOWN_SUCCESS:\r\n                return {\r\n                    ...state,\r\n                    SubGroupList: action.payload,\r\n                    subgroupDropDownLoading:false\r\n                }\r\n    \r\n\r\n        case GET_CATEGORY_BY_CATEGORYTYPE_FOR_DROPDOWN_API:\r\n            return {\r\n                ...state,\r\n                categotyDropDownLoading: true\r\n            }\r\n\r\n        case GET_CATEGORY_BY_CATEGORYTYPE_FOR_DROPDOWN_API_SUCCESS:\r\n            return {\r\n                ...state,\r\n                Category: action.payload,\r\n                categotyDropDownLoading: false\r\n            }\r\n\r\n        case ITEMS_API_ERROR_ACTION:\r\n            return {\r\n                ...state,\r\n                saveBtnloading: false,\r\n                listBtnLoading: false,\r\n                loading: false,\r\n                categotyDropDownLoading: false,\r\n                subgroupDropDownLoading:false,\r\n                groupDropDownLoading:false\r\n            };\r\n\r\n        case \"RESET_ALL\":\r\n            return state = INIT_STATE;\r\n        default:\r\n            return state;\r\n    }\r\n};\r\nexport default ItemMastersReducer;\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\UserRegistrationRedux\\reducer.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\CommonAPI\\SupplierRedux\\reducer.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\CompanyRedux\\reducer.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Purchase\\OrderPageRedux\\reducer.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\ModulesRedux\\reducer.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Utilites\\PageFiled\\reducer.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Utilites\\Breadcrumb\\reducer.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\auth\\profile\\reducer.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\auth\\forgetpwd\\reducer.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\auth\\register\\reducer.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\auth\\login\\reducer.js",["3344","3345","3346","3347"],"import {\r\n  LOGIN_USER,\r\n  LOGIN_SUCCESS,\r\n  LOGOUT_USER,\r\n  LOGOUT_USER_SUCCESS,\r\n  API_ERROR,\r\n  ROLE_ACCESS_API_CALL_SUCCESS,\r\n  ROLE_ACCESS_API_UPDATE_SUCCESS,\r\n  GET_USER_DETAILS_AFTER_LOGIN_SUCCESS,\r\n  DIVISION_DROPDOWN_SUCCESS_AFTER_LOGIN,\r\n  GET_SUPER_ADMIN_API_SUCCESS,\r\n  LOGOUT_REST,\r\n  RESET_ROLE_ACCESS_ACTION,\r\n  ROLE_ACCESS_API_CALL_ERROR,\r\n  API_ERROR_SUCCESS,\r\n  GET_USER_DETAILS_AFTER_LOGIN,\r\n  LOGIN_ERROR_ACTION,\r\n  ROLE_ACCESS_API_CALL,\r\n  DIVISION_DROPDOWN_AFTER_LOGIN_ACTION_SCUCESS,\r\n  DIVISION_DROPDOWN_AFTER_LOGIN_ACTION\r\n} from \"./actionTypes\"\r\n\r\nconst initialState = {\r\n  loginError: null,\r\n  loading: false,\r\n  loginSuccess: { Status: false },\r\n  roleAccesssForSidbarError: false,\r\n  divisionOptionLoading: false,\r\n  roleAccessSidbarData: [],\r\n  RoleAccessUpdateData: [],\r\n  afterLoginUserDetails: {},\r\n  divisionDropdown: [],\r\n  SuperAdmin: []\r\n}\r\n\r\nconst Login = (state = initialState, action) => {\r\n\r\n  switch (action.type) {\r\n\r\n    case LOGIN_USER:\r\n      state = { ...state, loading: true, }\r\n      break;\r\n\r\n    case LOGIN_SUCCESS:\r\n      state = {\r\n        ...state,\r\n        loginSuccess: action.payload,\r\n      }\r\n      break;\r\n\r\n    case LOGIN_ERROR_ACTION:\r\n      state = {\r\n        ...state,\r\n        loading: false,\r\n        loginError: action.payload\r\n      }\r\n      break;\r\n\r\n\r\n    case API_ERROR_SUCCESS:\r\n      state = {\r\n        ...state,\r\n        loginError: null,\r\n        loading: false\r\n      }\r\n      break\r\n\r\n    case GET_USER_DETAILS_AFTER_LOGIN:\r\n      return {\r\n        ...state,\r\n        loading: true,\r\n        afterLoginUserDetails: action.payload,\r\n      }\r\n\r\n    case GET_USER_DETAILS_AFTER_LOGIN_SUCCESS:\r\n      return {\r\n        ...state,\r\n        afterLoginUserDetails: action.payload,\r\n      }\r\n\r\n\r\n    case DIVISION_DROPDOWN_AFTER_LOGIN_ACTION:\r\n      return {\r\n        ...state,\r\n        divisionOptionLoading: true,\r\n      }\r\n\r\n    case DIVISION_DROPDOWN_AFTER_LOGIN_ACTION_SCUCESS:\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        divisionOptionLoading: false,\r\n        divisionDropdown: action.payload,\r\n      }\r\n\r\n    case ROLE_ACCESS_API_CALL:\r\n      return {\r\n        ...state,\r\n        loading: true,\r\n      }\r\n\r\n    case ROLE_ACCESS_API_CALL_SUCCESS:\r\n\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        roleAccessSidbarData: action.payload,\r\n      }\r\n\r\n    case ROLE_ACCESS_API_UPDATE_SUCCESS:\r\n      return {\r\n        ...state,\r\n        RoleAccessUpdateData: action.payload,\r\n      }\r\n    case ROLE_ACCESS_API_CALL_ERROR:\r\n\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        roleAccesssForSidbarError: action.payload,\r\n      }\r\n\r\n    case GET_SUPER_ADMIN_API_SUCCESS:\r\n      return {\r\n        ...state,\r\n        SuperAdmin: action.payload,\r\n      }\r\n\r\n    case RESET_ROLE_ACCESS_ACTION:\r\n      return {\r\n        ...state,\r\n        roleAccessSidbarData: [],\r\n        RoleAccessUpdateData: []\r\n      }\r\n\r\n    case LOGOUT_REST:\r\n      return {\r\n        ...initialState,\r\n      }\r\n    default:\r\n      state = { ...state }\r\n      break;\r\n  }\r\n  return state\r\n}\r\n\r\nexport default Login\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\store\\layout\\reducer.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\helpers\\firebase_helper.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\components\\HorizontalLayout\\Footer.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\components\\HorizontalLayout\\Header.js",["3348","3349"],"import React, { useState } from \"react\"\r\nimport PropTypes from 'prop-types'\r\nimport ReactDrawer from 'react-drawer';\r\nimport 'react-drawer/lib/react-drawer.css';\r\nimport { connect, useSelector } from \"react-redux\"\r\n\r\nimport { Link } from \"react-router-dom\"\r\n\r\n//Import Icons\r\nimport FeatherIcon from \"feather-icons-react\";\r\n\r\n// Redux Store\r\nimport { showRightSidebarAction, toggleLeftmenu } from \"../../store/actions\"\r\n// reactstrap\r\nimport { Row, Col, Dropdown, DropdownToggle, DropdownMenu } from \"reactstrap\"\r\n\r\n// Import menuDropdown\r\nimport LanguageDropdown from \"../CommonForBoth/TopbarDropdown/LanguageDropdown\";\r\nimport NotificationDropdown from \"../CommonForBoth/TopbarDropdown/NotificationDropdown\";\r\nimport ProfileMenu from \"../CommonForBoth/TopbarDropdown/ProfileMenu\";\r\nimport RightSidebar from \"../CommonForBoth/RightSidebar\";\r\nimport LightDark from \"../CommonForBoth/Menus/LightDark\";\r\n\r\n\r\n// import images\r\nimport logo from \"../../assets/images/foodERP_logo.png\";\r\nimport github from \"../../assets/images/brands/github.png\"\r\nimport bitbucket from \"../../assets/images/brands/bitbucket.png\"\r\nimport dribbble from \"../../assets/images/brands/dribbble.png\"\r\nimport dropbox from \"../../assets/images/brands/dropbox.png\"\r\nimport mail_chimp from \"../../assets/images/brands/mail_chimp.png\"\r\nimport slack from \"../../assets/images/brands/slack.png\"\r\n\r\n//i18n\r\nimport { withTranslation } from \"react-i18next\"\r\n\r\n\r\nconst Header = props => {\r\n\r\n\r\n  const reducers = useSelector(\r\n    (state) => ({\r\n      userAccess: state.Login.RoleAccessUpdateData,\r\n      pageField: state.CommonPageFieldReducer.pageFieldList\r\n    })\r\n  );\r\n  const { pageField,userAccess=[] } = reducers\r\n\r\n  const { onChangeLayoutMode } = props;\r\n  const [isSearch, setSearch] = useState(false)\r\n  const [socialDrp, setsocialDrp] = useState(false)\r\n  const [position, setPosition] = useState();\r\n  const [open, setOpen] = useState(false);\r\n\r\n  const toggleTopDrawer = () => {\r\n    setPosition('right');\r\n    setOpen(!open)\r\n  }\r\n\r\n  const onDrawerClose = () => {\r\n    setOpen(false);\r\n  }\r\n\r\n\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <header id=\"page-topbar\">\r\n        <div className=\"navbar-header\">\r\n          <div className=\"d-flex\">\r\n            <div className=\"navbar-brand-box\">\r\n              <Link to=\"/dashboard\" className=\"logo logo-dark\">\r\n                <span className=\"logo-sm\">\r\n                  <img src={logo} alt=\"\" height=\"50\" />\r\n                </span>\r\n                <span className=\"logo-lg\">\r\n                  <img src={logo} alt=\"\" height=\"50\" />\r\n                  <span className=\"logo-txt\">FoodERP 2.0</span>\r\n                </span>\r\n              </Link>\r\n\r\n              <Link to=\"/dashboard\" className=\"logo logo-light\">\r\n                <span className=\"logo-sm\">\r\n                  <img src={logo} alt=\"\" height=\"50\" />\r\n                </span>\r\n                <span className=\"logo-lg\">\r\n                  <img src={logo} alt=\"\" height=\"50\" />\r\n                  <span className=\"logo-txt\">FoodERP 2.0</span>\r\n                </span>\r\n              </Link>\r\n            </div>\r\n\r\n            <button\r\n              type=\"button\"\r\n              className=\"btn btn-sm px-3 font-size-16 d-lg-none header-item\"\r\n              data-toggle=\"collapse\"\r\n              onClick={() => {\r\n                props.toggleLeftmenu(!props.leftMenu)\r\n              }}\r\n              data-target=\"#topnav-menu-content\"\r\n            >\r\n              <i className=\"fa fa-fw fa-bars\" />\r\n            </button>\r\n\r\n            <form className=\"app-search d-none d-lg-block\">\r\n              <div className=\"position-relative\">\r\n                <input type=\"text\" className=\"form-control\"\r\n                  placeholder=\"Search...\" />\r\n                <button className=\"btn btn-primary\" type=\"button\"><i\r\n                  className=\"bx bx-search-alt align-middle\"></i></button>\r\n              </div>\r\n            </form>\r\n          </div>\r\n\r\n          <div className=\"d-flex\">\r\n            <div className=\"dropdown d-inline-block d-lg-none ms-2\">\r\n              <button\r\n                type=\"button\"\r\n                className=\"btn header-item noti-icon \"\r\n                id=\"page-header-search-dropdown\"\r\n                onClick={() => setSearch(!isSearch)}\r\n              >\r\n                <i className=\"mdi mdi-magnify\" />\r\n              </button>\r\n              <div\r\n                className={\r\n                  isSearch\r\n                    ? \"dropdown-menu dropdown-menu-lg dropdown-menu-end p-0 show\"\r\n                    : \"dropdown-menu dropdown-menu-lg dropdown-menu-end p-0\"\r\n                }\r\n                aria-labelledby=\"page-header-search-dropdown\"\r\n              >\r\n                <form className=\"p-3\">\r\n                  <div className=\"form-group m-0\">\r\n                    <div className=\"input-group\">\r\n                      <input\r\n                        type=\"text\"\r\n                        className=\"form-control\"\r\n                        placeholder={props.t(\"Search\") + \"...\"}\r\n                        aria-label=\"Recipient's username\"\r\n                      />\r\n                      <div className=\"input-group-append\">\r\n                        <button className=\"btn btn-primary\" type=\"submit\">\r\n                          <i className=\"mdi mdi-magnify\" />\r\n                        </button>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </form>\r\n              </div>\r\n            </div>\r\n\r\n            <LanguageDropdown />\r\n\r\n            {/* light / dark mode */}\r\n            <LightDark layoutMode={props['layoutMode']} onChangeLayoutMode={onChangeLayoutMode} />\r\n\r\n            <Dropdown\r\n              className=\"d-none d-lg-inline-block ms-1\"\r\n              isOpen={socialDrp}\r\n              toggle={() => {\r\n                setsocialDrp(!socialDrp)\r\n              }}\r\n            >\r\n              <DropdownToggle\r\n                className=\"btn header-item noti-icon \"\r\n                caret\r\n                tag=\"button\"\r\n              >\r\n                <i className=\"bx bx-customize\" />\r\n              </DropdownToggle>\r\n              <DropdownMenu className=\"dropdown-menu-lg dropdown-menu-end\">\r\n                <div className=\"px-lg-2\">\r\n                  <Row className=\"no-gutters\">\r\n                    <Col>\r\n                      <Link className=\"dropdown-icon-item\" to=\"#\">\r\n                        <img src={github} alt=\"Github\" />\r\n                        <span>GitHub</span>\r\n                      </Link>\r\n                    </Col>\r\n                    <Col>\r\n                      <Link className=\"dropdown-icon-item\" to=\"#\">\r\n                        <img src={bitbucket} alt=\"bitbucket\" />\r\n                        <span>Bitbucket</span>\r\n                      </Link>\r\n                    </Col>\r\n                    <Col>\r\n                      <Link className=\"dropdown-icon-item\" to=\"#\">\r\n                        <img src={dribbble} alt=\"dribbble\" />\r\n                        <span>Dribbble</span>\r\n                      </Link>\r\n                    </Col>\r\n                  </Row>\r\n                  <Row className=\"no-gutters\">\r\n                    <Col>\r\n                      <Link className=\"dropdown-icon-item\" to=\"#\">\r\n                        <img src={dropbox} alt=\"dropbox\" />\r\n                        <span>Dropbox</span>\r\n                      </Link>\r\n                    </Col>\r\n                    <Col>\r\n                      <Link className=\"dropdown-icon-item\" to=\"#\">\r\n                        <img src={mail_chimp} alt=\"mail_chimp\" />\r\n                        <span>Mail Chimp</span>\r\n                      </Link>\r\n                    </Col>\r\n                    <Col>\r\n                      <Link className=\"dropdown-icon-item\" to=\"#\">\r\n                        <img src={slack} alt=\"slack\" />\r\n                        <span>Slack</span>\r\n                      </Link>\r\n                    </Col>\r\n                  </Row>\r\n                </div>\r\n              </DropdownMenu>\r\n            </Dropdown>\r\n\r\n            <NotificationDropdown />\r\n\r\n            <div className=\"dropdown d-inline-block\">\r\n              <button\r\n                onClick={toggleTopDrawer} disabled={open}\r\n                type=\"button\"\r\n                className=\"btn header-item noti-icon right-bar-toggle \"\r\n              >\r\n                <FeatherIcon\r\n                  icon=\"settings\"\r\n                  className=\"icon-lg\"\r\n                />\r\n              </button>\r\n            </div>\r\n\r\n            <ProfileMenu />\r\n\r\n          </div>\r\n        </div>\r\n      </header>\r\n      <ReactDrawer\r\n        open={open}\r\n        position={position}\r\n        onClose={onDrawerClose}\r\n      >\r\n        <RightSidebar onClose={onDrawerClose} onChangeLayoutMode={onChangeLayoutMode} />\r\n      </ReactDrawer>\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nHeader.propTypes = {\r\n  leftMenu: PropTypes.any,\r\n  showRightSidebar: PropTypes.any,\r\n  showRightSidebarAction: PropTypes.func,\r\n  t: PropTypes.any,\r\n  toggleLeftmenu: PropTypes.func\r\n}\r\n\r\nconst mapStatetoProps = state => {\r\n  return { ...state.Layout }\r\n}\r\n\r\nexport default connect(mapStatetoProps, {\r\n  showRightSidebarAction,\r\n  toggleLeftmenu,\r\n})(withTranslation()(Header))\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\components\\HorizontalLayout\\Navbar.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\ItemPages\\ItemMaster\\Division_Tab\\Table.js",["3350"],"D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\ItemPages\\ItemMaster\\Category_Tab\\Table.js",["3351"],"D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\ItemPages\\ItemMaster\\Group_Tab\\Table.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\ItemPages\\ItemMaster\\GST_Tab\\Table.js",["3352","3353"],"import React, { useEffect, useState } from 'react';\r\nimport { Button, Table, } from 'reactstrap';\r\nimport { Tbody, Thead } from 'react-super-responsive-table';\r\nimport { deleteGSTId_ForMaster, deleteGSTId_ForMaster_Success } from '../../../../../store/Administrator/GSTRedux/action';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { customAlert } from '../../../../../CustomAlert/ConfirmDialog';\r\n\r\nfunction GSTTable(props) {\r\n  \r\n  const dispatch = useDispatch();\r\n\r\n  const {\r\n    deleteMsg,\r\n  } = useSelector((state) => ({\r\n    deleteMsg: state.GSTReducer.deleteMsg,\r\n  }));\r\n\r\n  const onDeleteHandeler = (info) => {\r\n    if (info.IsAdd) {\r\n      var fil = props.tableData.filter((i) => {\r\n        return !(i.id === info.id);\r\n      });\r\n      props.func(fil);\r\n    }\r\n    else {\r\n      dispatch(\r\n        customAlert({\r\n          Type: 5,\r\n          Status: true,\r\n          Message: `Are you sure you want to delete this GST\"`,\r\n          RedirectPath: false,\r\n          PermissionAction: deleteGSTId_ForMaster,\r\n          ID: info.id,\r\n        })\r\n      );\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (deleteMsg.Status === true && deleteMsg.StatusCode === 200) {\r\n      dispatch(deleteGSTId_ForMaster_Success({ Status: false }));\r\n\r\n      var fil = props.tableData.filter((i) => {\r\n        return !(i.id === deleteMsg.deletedId);\r\n      });\r\n      props.func(fil);\r\n\r\n      dispatch(\r\n        customAlert({\r\n          Type: 1,\r\n          Status: true,\r\n          Message: deleteMsg.Message,\r\n        })\r\n      );\r\n    } else if (deleteMsg.Status === true) {\r\n      dispatch(deleteGSTId_ForMaster_Success({ Status: false }));\r\n      dispatch(\r\n        customAlert({\r\n          Type: 3,\r\n          Status: true,\r\n          Message: JSON.stringify(deleteMsg.Message),\r\n        })\r\n      );\r\n    }\r\n  }, [deleteMsg]);\r\n\r\n\r\n  const tableRows = props.tableData.map((info) => {\r\n\r\n    return (\r\n      <tr>\r\n        {/* <td>{info.id}</td> */}\r\n        <td>{info.EffectiveDate}</td>\r\n        <td>{info.GSTPercentage}</td>\r\n        <td>{info.HSNCode}</td>\r\n        <td>\r\n          <Button\r\n            className=\"badge badge-soft-danger font-size-12 btn btn-danger waves-effect waves-light w-xxs border border-light\"\r\n            data-mdb-toggle=\"tooltip\" data-mdb-placement=\"top\" title=\"Delete Party Type\"\r\n            onClick={(e) => {\r\n              onDeleteHandeler(info);\r\n            }}\r\n          >\r\n            <i className=\"mdi mdi-delete font-size-18\"></i>\r\n          </Button>\r\n        </td>\r\n      </tr>\r\n    );\r\n  });\r\n  return (\r\n    <>\r\n      <div>\r\n        {props.tableData.length > 0 ?\r\n          <Table className=\"table table-bordered table-hover\">\r\n            <Thead>\r\n              <tr>\r\n                <th className=\"col col-sm-3\">Effective Date</th>\r\n                <th className=\"col col-sm-3\">GST</th>\r\n                <th className=\"col col-sm-3\">HSN Code</th>\r\n                <th className=\"col col-sm-3\">{\"Action\"}</th>\r\n              </tr>\r\n            </Thead>\r\n            <Tbody>{tableRows}</Tbody>\r\n          </Table>\r\n          : null}\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default GSTTable;\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\ItemPages\\ItemMaster\\MRP_Tab\\Table.js",["3354","3355"],"import React, { useEffect, useState } from \"react\";\r\nimport { Button, Table } from \"reactstrap\";\r\nimport { Tbody, Thead } from \"react-super-responsive-table\";\r\nimport { deleteMRPMaster_Id, deleteMRPMaster_Id_Success } from \"../../../../../store/Administrator/MRPMasterRedux/action\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { loginIsSCMCompany } from \"../../../../../components/Common/CommonFunction\";\r\nimport { customAlert } from \"../../../../../CustomAlert/ConfirmDialog\";\r\n\r\nfunction MRPTable(props) {\r\n  const dispatch = useDispatch();\r\n  const IsSCMCompany = loginIsSCMCompany();\r\n\r\n  const hasSCMhide = (IsSCMCompany === 1 ? true : false)\r\n\r\n  const { deleteMsg, } = useSelector((state) => ({\r\n    deleteMsg: state.MRPMasterReducer.deleteIdForMRPMaster,\r\n  }));\r\n\r\n  const onDeleteHandeler = (info) => {\r\n    if (info.IsAdd) {\r\n      var fil = props.tableData.filter((i) => {\r\n        return !(i.id === info.id);\r\n      });\r\n      props.func(fil);\r\n    }\r\n    else {\r\n      dispatch(\r\n        customAlert({\r\n          Type: 5,\r\n          Status: true,\r\n          Message: `Are you sure you want to delete this MRP\"`,\r\n          RedirectPath: false,\r\n          PermissionAction: deleteMRPMaster_Id,\r\n          ID: info.id,\r\n        })\r\n      );\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (deleteMsg.Status === true && deleteMsg.StatusCode === 200) {\r\n      dispatch(deleteMRPMaster_Id_Success({ Status: false }));\r\n\r\n      var fil = props.tableData.filter((i) => {\r\n        return !(i.id === deleteMsg.deletedId);\r\n      });\r\n      props.func(fil);\r\n\r\n      dispatch(\r\n        customAlert({\r\n          Type: 1,\r\n          Status: true,\r\n          Message: deleteMsg.Message,\r\n        })\r\n      );\r\n    } else if (deleteMsg.Status === true) {\r\n      dispatch(deleteMRPMaster_Id_Success({ Status: false }));\r\n      dispatch(\r\n        customAlert({\r\n          Type: 3,\r\n          Status: true,\r\n          Message: JSON.stringify(deleteMsg.Message),\r\n        })\r\n      );\r\n    }\r\n  }, [deleteMsg]);\r\n\r\n\r\n  const tableRows = props.tableData.map((info) => {\r\n    return (\r\n      <tr>\r\n        {/* <td>{info.id}</td> */}\r\n        <td hidden={hasSCMhide}>{info.DivisionName}</td>\r\n        <td hidden={hasSCMhide}>{info.PartyName}</td>\r\n        <td>{info.EffectiveDate}</td>\r\n        <td>{info.MRP}</td>\r\n        <td>\r\n          <Button\r\n            className=\"badge badge-soft-danger font-size-12 btn btn-danger waves-effect waves-light w-xxs border border-light\"\r\n            data-mdb-toggle=\"tooltip\"\r\n            data-mdb-placement=\"top\"\r\n            title=\"Delete Party Type\"\r\n            onClick={(e) => {\r\n              onDeleteHandeler(info);\r\n            }}\r\n          >\r\n            <i className=\"mdi mdi-delete font-size-18\"></i>\r\n          </Button>\r\n        </td>\r\n      </tr>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <div>\r\n        {props.tableData.length > 0 ? (\r\n          <Table className=\"table table-bordered table-hover\">\r\n\r\n            <Thead>\r\n              <tr >\r\n                <th className=\"col col-sm-3\" hidden={hasSCMhide}>Division</th>\r\n                <th className=\"col col-sm-3\" hidden={hasSCMhide}>Party Name</th>\r\n                <th className=\"col col-sm-3\">Effective Date</th>\r\n                <th className=\"col col-sm-3\" >MRP</th>\r\n                <th className=\"col col-sm-3\">{\"Action\"}</th>\r\n              </tr>\r\n            </Thead>\r\n            <Tbody>{tableRows}</Tbody>\r\n          </Table>\r\n        ) : null}\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default MRPTable;\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\SubGroupPages\\SubGroupList.js",["3356"],"import React, { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport CommonListPage from \"../../../components/Common/CommonMasterListPage\";\r\nimport {\r\n  commonPageFieldList,\r\n  commonPageFieldListSuccess,\r\n} from \"../../../store/actions\";\r\nimport {\r\n  deleteSubGrouplistSuccess,\r\n  delete_SubGroupList_ID,\r\n  editSubGroupID,\r\n  getSubGroupList,\r\n  getSubGroupListSuccess,\r\n  saveSubGroupSuccess,\r\n  updateSubgroupIDSuccess\r\n} from \"../../../store/Administrator/SubGroupsRedux/action\";\r\nimport SubGroupMaster from \"./SubGroupMaster\";\r\nimport * as pageId from \"../../../routes/allPageID\"\r\nimport * as url from \"../../../routes/route_url\";\r\nimport { PageLoadingSpinner } from \"../../../components/Common/CommonButton\";\r\n\r\nconst SubGroupList = () => {\r\n\r\n  const dispatch = useDispatch();\r\n  const reducers = useSelector(\r\n    (state) => ({\r\n      listBtnLoading: state.SubGroupReducer.listBtnLoading,\r\n      goBtnLoading: state.SubGroupReducer.goBtnLoading,\r\n      tableList: state.SubGroupReducer.SubgroupList,\r\n      editData: state.SubGroupReducer.editData,\r\n      updateMsg: state.SubGroupReducer.updateMsg,\r\n      deleteMsg: state.SubGroupReducer.deleteMsg,\r\n      postMsg: state.SubGroupReducer.postMsg,\r\n      userAccess: state.Login.RoleAccessUpdateData,\r\n      pageField: state.CommonPageFieldReducer.pageFieldList\r\n    })\r\n  );\r\n\r\n  const action = {\r\n    getList: getSubGroupList,\r\n    editId: editSubGroupID,\r\n    deleteId: delete_SubGroupList_ID,\r\n    postSucc: saveSubGroupSuccess,\r\n    updateSucc: updateSubgroupIDSuccess,\r\n    deleteSucc: deleteSubGrouplistSuccess\r\n  }\r\n  useEffect(() => {\r\n    const page_Id = pageId.SUBGROUP_LIST\r\n    dispatch(commonPageFieldListSuccess(null))\r\n    dispatch(commonPageFieldList(page_Id))\r\n    dispatch(getSubGroupList());\r\n\r\n    return () => {\r\n      dispatch(getSubGroupListSuccess([]));\r\n      dispatch(commonPageFieldListSuccess(null))\r\n    }\r\n  }, []);\r\n\r\n  const { pageField, goBtnLoading } = reducers\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <PageLoadingSpinner isLoading={(goBtnLoading || !pageField)} />\r\n      {\r\n        (pageField) &&\r\n        <CommonListPage\r\n          action={action}\r\n          reducers={reducers}\r\n          MasterModal={SubGroupMaster}\r\n          masterPath={url.SUBGROUP}\r\n          ButtonMsgLable={\"SubGroup\"}\r\n          deleteName={\"Name\"}\r\n        />\r\n      }\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nexport default SubGroupList;\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\SubGroupPages\\SubGroupMaster.js",["3357","3358","3359","3360","3361","3362","3363","3364"],"import React, { useEffect, useState, } from \"react\";\r\nimport {\r\n    Card,\r\n    CardBody,\r\n    CardHeader,\r\n    Col,\r\n    Container,\r\n    FormGroup,\r\n    Input,\r\n    Label,\r\n    Row,\r\n} from \"reactstrap\";\r\nimport Select from \"react-select\";\r\nimport { MetaTags } from \"react-meta-tags\";\r\nimport {\r\n    Breadcrumb_inputName,\r\n    commonPageField,\r\n    commonPageFieldSuccess,\r\n    editSubGroupIDSuccess,\r\n    getGroupList,\r\n    getSubGroupList,\r\n    getSubGroupListSuccess,\r\n    saveSubGroupList,\r\n    saveSubGroupSuccess,\r\n    updateSubGroupID,\r\n    updateSubgroupIDSuccess\r\n} from \"../../../store/actions\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {\r\n    comAddPageFieldFunc,\r\n    formValid,\r\n    initialFiledFunc,\r\n    onChangeSelect,\r\n    onChangeText,\r\n    resetFunction,\r\n} from \"../../../components/Common/validationFunction\";\r\nimport { SaveButton } from \"../../../components/Common/CommonButton\";\r\nimport { breadcrumbReturnFunc, btnIsDissablefunc, loginUserID, metaTagLabel } from \"../../../components/Common/CommonFunction\";\r\nimport * as url from \"../../../routes/route_url\";\r\nimport * as pageId from \"../../../routes/allPageID\"\r\nimport * as mode from \"../../../routes/PageMode\";\r\nimport { customAlert } from \"../../../CustomAlert/ConfirmDialog\";\r\n\r\nconst SubGroupMaster = (props) => {\r\n\r\n    const history = useHistory()\r\n    const dispatch = useDispatch();\r\n\r\n    const fileds = {\r\n        id: \"\",\r\n        Name: \"\",\r\n        Group: \"\",\r\n        GroupName: \"\",\r\n        Sequence: \"\"\r\n    }\r\n\r\n    const [state, setState] = useState(() => initialFiledFunc(fileds))\r\n\r\n    const [EditData, setEditData] = useState({});\r\n    const [pageMode, setPageMode] = useState(mode.defaultsave);\r\n    const [modalCss, setModalCss] = useState(false);\r\n    const [userPageAccessState, setUserAccState] = useState('');\r\n    const [editCreatedBy, seteditCreatedBy] = useState(\"\");\r\n\r\n    //Access redux store Data /  'save_ModuleSuccess' action data\r\n    const {\r\n        postMsg,\r\n        groupList,\r\n        updateMsg,\r\n        pageField,\r\n        saveBtnloading,\r\n        userAccess } = useSelector((state) => ({\r\n            saveBtnloading: state.SubGroupReducer.saveBtnloading,\r\n            postMsg: state.SubGroupReducer.postMsg,\r\n            updateMsg: state.SubGroupReducer.updateMsg,\r\n            groupList: state.GroupReducer.groupList,\r\n            userAccess: state.Login.RoleAccessUpdateData,\r\n            pageField: state.CommonPageFieldReducer.pageField\r\n        }));\r\n\r\n    useEffect(() => {\r\n        const page_Id = pageId.SUBGROUP\r\n        dispatch(commonPageFieldSuccess(null));\r\n        dispatch(commonPageField(page_Id))\r\n        dispatch(getGroupList())\r\n        dispatch(getSubGroupList());\r\n    }, []);\r\n\r\n    const values = { ...state.values }\r\n    const { isError } = state;\r\n    const { fieldLabel } = state;\r\n\r\n    const location = { ...history.location }\r\n    const hasShowloction = location.hasOwnProperty(mode.editValue)\r\n    const hasShowModal = props.hasOwnProperty(mode.editValue)\r\n\r\n    // userAccess useEffect\r\n    useEffect(() => {\r\n        let userAcc = null;\r\n        let locationPath = location.pathname;\r\n\r\n        if (hasShowModal) {\r\n            locationPath = props.masterPath;\r\n        };\r\n\r\n        userAcc = userAccess.find((inx) => {\r\n            return (`/${inx.ActualPagePath}` === locationPath)\r\n        })\r\n\r\n        if (userAcc) {\r\n            setUserAccState(userAcc)\r\n            breadcrumbReturnFunc({ dispatch, userAcc });\r\n        };\r\n    }, [userAccess])\r\n\r\n\r\n    useEffect(() => {\r\n        \r\n        if ((hasShowloction || hasShowModal)) {\r\n\r\n            let hasEditVal = null\r\n            if (hasShowloction) {\r\n                setPageMode(location.pageMode)\r\n                hasEditVal = location.editValue\r\n            }\r\n            else if (hasShowModal) {\r\n                hasEditVal = props.editValue\r\n                setPageMode(props.pageMode)\r\n                setModalCss(true)\r\n            }\r\n\r\n            if (hasEditVal) {\r\n                setEditData(hasEditVal)\r\n\r\n                const { id, Name, Group, GroupName, Sequence } = hasEditVal\r\n                const { values, fieldLabel, hasValid, required, isError } = { ...state }\r\n\r\n                values.Name = Name;\r\n                values.id = id\r\n                values.Group = Group\r\n                values.GroupName = { label: GroupName, value: Group };\r\n                values.Sequence = Sequence\r\n\r\n                hasValid.id.valid = true;\r\n                hasValid.Name.valid = true;\r\n                hasValid.GroupName.valid = true;\r\n                hasValid.Group.valid = true;\r\n                hasValid.Sequence.valid = true\r\n\r\n                setState({ values, fieldLabel, hasValid, required, isError })\r\n                dispatch(Breadcrumb_inputName(hasEditVal.Name))\r\n                seteditCreatedBy(hasEditVal.CreatedBy)\r\n            }\r\n            dispatch(editSubGroupIDSuccess({ Status: false }))\r\n        }\r\n    }, [])\r\n\r\n    useEffect(async () => {\r\n\r\n        if ((postMsg.Status === true) && (postMsg.StatusCode === 200)) {\r\n            dispatch(saveSubGroupSuccess({ Status: false }))\r\n            setState(() => resetFunction(fileds, state))// Clear form values  \r\n            dispatch(Breadcrumb_inputName())\r\n\r\n            if (pageMode === \"other\") {\r\n                customAlert({\r\n                    Type: 1,\r\n                    Message: postMsg.Message,\r\n                })\r\n            }\r\n            else {\r\n                let isPermission = await customAlert({\r\n                    Type: 1,\r\n                    Status: true,\r\n                    Message: postMsg.Message,\r\n                })\r\n                if (isPermission) {\r\n                    history.push({ pathname: url.SUBGROUP_LIST })\r\n                }\r\n            }\r\n        }\r\n        else if (postMsg.Status === true) {\r\n            dispatch(getSubGroupListSuccess({ Status: false }))\r\n            customAlert({\r\n                Type: 4,\r\n                 Message: JSON.stringify(postMsg.Message),\r\n            })\r\n        }\r\n    }, [postMsg])\r\n\r\n    useEffect(() => {\r\n        if (updateMsg.Status === true && updateMsg.StatusCode === 200 && !modalCss) {\r\n            setState(() => resetFunction(fileds, state))// Clear form values  \r\n            history.push({\r\n                pathname: url.SUBGROUP_LIST,\r\n            })\r\n        } else if (updateMsg.Status === true && !modalCss) {\r\n            dispatch(updateSubgroupIDSuccess({ Status: false }));\r\n             customAlert({\r\n                Type: 3,\r\n                Message: JSON.stringify(updateMsg.Message),\r\n            })\r\n        }\r\n    }, [updateMsg, modalCss]);\r\n\r\n    useEffect(() => {\r\n        if (pageField) {\r\n            const fieldArr = pageField.PageFieldMaster\r\n            comAddPageFieldFunc({ state, setState, fieldArr })\r\n        }\r\n    }, [pageField])\r\n\r\n    const GroupValues = groupList.map((Data) => ({\r\n        value: Data.id,\r\n        label: Data.Name\r\n    }));\r\n\r\n    const SaveHandler = async (event) => {\r\n\r\n        event.preventDefault();\r\n        const btnId = event.target.id\r\n        try {\r\n            if (formValid(state, setState)) {\r\n                btnIsDissablefunc({ btnId, state: true })\r\n\r\n                const jsonBody = JSON.stringify({\r\n                    Name: values.Name,\r\n                    Group: values.GroupName.value,\r\n                    Sequence: values.Sequence,\r\n                    CreatedBy: loginUserID(),\r\n                    CreatedOn: \"2022-11-19T00:00:00\",\r\n                    UpdatedBy: loginUserID(),\r\n                    UpdatedOn: \"2022-11-19T00:00:00\"\r\n                });\r\n\r\n                if (pageMode === mode.edit) {\r\n                    dispatch(updateSubGroupID({ jsonBody, updateId: values.id, btnId }));\r\n                }\r\n                else {\r\n                    dispatch(saveSubGroupList({ jsonBody, btnId }));\r\n                }\r\n            }\r\n        } catch (e) { btnIsDissablefunc({ btnId, state: false }) }\r\n    };\r\n\r\n    // IsEditMode_Css is use of module Edit_mode (reduce page-content marging)\r\n    var IsEditMode_Css = ''\r\n    if ((modalCss) || (pageMode === \"dropdownAdd\")) { IsEditMode_Css = \"-5.5%\" };\r\n\r\n    if (!(userPageAccessState === '')) {\r\n        return (\r\n            <React.Fragment>\r\n                <div className=\"page-content\" style={{ marginTop: IsEditMode_Css }}>\r\n                    <Container fluid>\r\n                        <MetaTags>{metaTagLabel(userPageAccessState)}</MetaTags>\r\n\r\n                        <Card className=\"text-black\">\r\n                            <CardHeader className=\"card-header   text-black c_card_header\" >\r\n                                <h4 className=\"card-title text-black\">{userPageAccessState.PageDescription}</h4>\r\n                                <p className=\"card-title-desc text-black\">{userPageAccessState.PageDescriptionDetails}</p>\r\n                            </CardHeader>\r\n\r\n                            <CardBody className=\" vh-10 0 text-black\" >\r\n                                <form noValidate>\r\n                                    <Row className=\"\">\r\n                                        <Col md={12} style={{ height: \"9cm\" }}>\r\n                                            <Card>\r\n                                                <CardBody className=\"c_card_body\">\r\n\r\n                                                    <Row>\r\n                                                        <FormGroup className=\"mb-2 col col-sm-4 \">\r\n                                                            <Label htmlFor=\"validationCustom01\">{fieldLabel.Name} </Label>\r\n                                                            <Input\r\n                                                                name=\"Name\"\r\n                                                                id=\"txtName\"\r\n                                                                value={values.Name}\r\n                                                                type=\"text\"\r\n                                                                className={isError.Name.length > 0 ? \"is-invalid form-control\" : \"form-control\"}\r\n                                                                placeholder=\"Please Enter Name\"\r\n                                                                autoComplete='off'\r\n                                                                autoFocus={true}\r\n                                                                onChange={(event) => {\r\n                                                                    onChangeText({ event, state, setState })\r\n                                                                    dispatch(Breadcrumb_inputName(event.target.value))\r\n                                                                }}\r\n                                                            />\r\n                                                            {isError.Name.length > 0 && (\r\n                                                                <span className=\"invalid-feedback\">{isError.Name}</span>\r\n                                                            )}\r\n                                                        </FormGroup>\r\n                                                    </Row>\r\n\r\n                                                    <Row>\r\n                                                        <Col md=\"4\" >\r\n                                                            <FormGroup className=\"mb-3\">\r\n                                                                <Label htmlFor=\"validationCustom01\"> {fieldLabel.GroupName} </Label>\r\n                                                                <Col sm={12} >\r\n                                                                    <Select\r\n                                                                        name=\"GroupName\"\r\n                                                                        value={values.GroupName}\r\n                                                                        isSearchable={true}\r\n                                                                        className=\"react-dropdown\"\r\n                                                                        options={GroupValues}\r\n                                                                        onChange={(hasSelect, evn) => onChangeSelect({ hasSelect, evn, state, setState, })}\r\n                                                                        classNamePrefix=\"dropdown\"\r\n                                                                    />\r\n                                                                    {isError.GroupName.length > 0 && (\r\n                                                                        <span className=\"text-danger f-8\"><small>{isError.GroupName}</small></span>\r\n                                                                    )}\r\n                                                                </Col>\r\n                                                            </FormGroup>\r\n                                                        </Col>\r\n                                                    </Row>\r\n\r\n                                                    <Row>\r\n                                                        <FormGroup className=\"mb-2 col col-sm-4 \">\r\n                                                            <Label htmlFor=\"validationCustom01\">{fieldLabel.Sequence} </Label>\r\n                                                            <Input\r\n                                                                name=\"Sequence\"\r\n                                                                id=\"txtSequence\"\r\n                                                                value={values.Sequence}\r\n                                                                type=\"text\"\r\n                                                                className={isError.Sequence.length > 0 ? \"is-invalid form-control\" : \"form-control\"}\r\n                                                                placeholder=\"Please Enter Sequence\"\r\n                                                                autoComplete='off'\r\n                                                                onChange={(event) => {\r\n                                                                    onChangeText({ event, state, setState })\r\n                                                                }}\r\n                                                            />\r\n                                                            {isError.Sequence.length > 0 && (\r\n                                                                <span className=\"invalid-feedback\">{isError.Sequence}</span>\r\n                                                            )}\r\n                                                        </FormGroup>\r\n                                                    </Row>\r\n                                                    <FormGroup className=\"mt-1\">\r\n                                                        <Row>\r\n                                                            <Col sm={2}>\r\n                                                                <SaveButton pageMode={pageMode}\r\n                                                                    onClick={SaveHandler}\r\n                                                                    loading={saveBtnloading}\r\n                                                                    userAcc={userPageAccessState}\r\n                                                                    editCreatedBy={editCreatedBy}\r\n                                                                    module={\"GroupMaster\"}\r\n                                                                />\r\n                                                            </Col>\r\n                                                        </Row>\r\n                                                    </FormGroup>\r\n                                                </CardBody>\r\n                                            </Card>\r\n                                        </Col>\r\n                                    </Row>\r\n                                </form>\r\n                            </CardBody>\r\n                        </Card>\r\n                    </Container>\r\n                </div>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n    else {\r\n        return (\r\n            <React.Fragment></React.Fragment>\r\n        )\r\n    }\r\n};\r\n\r\nexport default SubGroupMaster\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\SubGroupsRedux\\action.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\SubGroupsRedux\\actionType.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\SubGroupsRedux\\saga.js",["3365"],"import { call, put, takeLatest } from \"redux-saga/effects\";\r\nimport {\r\n  SubGroupApiErrorAction,\r\n  deleteSubGrouplistSuccess,\r\n  editSubGroupIDSuccess,\r\n  getSubGroupListSuccess,\r\n  saveSubGroupSuccess,\r\n  updateSubgroupIDSuccess\r\n} from \"./action\";\r\nimport {\r\n  del_SubGroup_List_API,\r\n  edit_SubGroup_List_Api,\r\n  get_SubGroup_List_Api,\r\n  Post_SubGroupList_API,\r\n  update_SubGroup_List_Api\r\n} from \"../../../helpers/backend_helper\";\r\nimport {\r\n  DELETE_SUBGROUP_LIST_ID,\r\n  EDIT_SUBGROUPMASTER_ID,\r\n  GET_SUBGROUP_LIST,\r\n  SAVE_SUBGROUPLIST,\r\n  UPDATE_SUBGROUPMASTER_ID\r\n} from \"./actionType\";\r\nimport { CommonConsole } from \"../../../components/Common/CommonFunction\";\r\n\r\nfunction* save_Method_ForSubGroupMaster_GenFun({ config }) {          // Save API\r\n  try {\r\n    const response = yield call(Post_SubGroupList_API, config);\r\n    yield put(saveSubGroupSuccess(response));\r\n  } catch (error) { yield put(SubGroupApiErrorAction()) }\r\n\r\n}\r\n\r\nfunction* Get_SubGroup_List_genFunc() {                             // getList API\r\n  try {\r\n    const response = yield call(get_SubGroup_List_Api);\r\n    yield put(getSubGroupListSuccess(response.Data));\r\n  } catch (error) { yield put(SubGroupApiErrorAction()) }\r\n}\r\n\r\nfunction* Delete_SubGroupList_ID_GenratorFunction({ config }) {        // delete API\r\n  try {\r\n    const response = yield call(del_SubGroup_List_API, config);\r\n    yield put(deleteSubGrouplistSuccess(response))\r\n  } catch (error) { yield put(SubGroupApiErrorAction()) }\r\n}\r\n\r\nfunction* Edit_SubGrouplist_ID_GenratorFunction({ config }) {          // edit API \r\n  const { btnmode } = config;\r\n  try {\r\n    const response = yield call(edit_SubGroup_List_Api, config);\r\n    response.pageMode = btnmode;\r\n    yield put(editSubGroupIDSuccess(response));\r\n  } catch (error) { yield put(SubGroupApiErrorAction()) }\r\n}\r\n\r\nfunction* Update_SubGrouplist_ID_GenratorFunction({ config }) {        // update API\r\n  try {\r\n    const response = yield call(update_SubGroup_List_Api, config);\r\n    yield put(updateSubgroupIDSuccess(response))\r\n  } catch (error) { yield put(SubGroupApiErrorAction()) }\r\n}\r\n\r\nfunction* SubGroupSaga() {\r\n  yield takeLatest(SAVE_SUBGROUPLIST, save_Method_ForSubGroupMaster_GenFun)\r\n  yield takeLatest(GET_SUBGROUP_LIST, Get_SubGroup_List_genFunc)\r\n  yield takeLatest(DELETE_SUBGROUP_LIST_ID, Delete_SubGroupList_ID_GenratorFunction)\r\n  yield takeLatest(EDIT_SUBGROUPMASTER_ID, Edit_SubGrouplist_ID_GenratorFunction)\r\n  yield takeLatest(UPDATE_SUBGROUPMASTER_ID, Update_SubGrouplist_ID_GenratorFunction)\r\n}\r\n\r\nexport default SubGroupSaga;","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\SubGroupsRedux\\reducer.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\ItemPages\\ItemMaster\\Image_Tab\\Index.js",["3366","3367","3368"],"\r\nimport React, { useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport Select from 'react-select'\r\nimport { Button, Card, CardBody, Col, FormGroup, Input, Label, Row } from 'reactstrap'\r\nimport { customAlert } from '../../../../../CustomAlert/ConfirmDialog'\r\nimport {  get_ImageType_ForDropDown } from '../../../../../store/actions'\r\n\r\n\r\nexport default function Image(props) {\r\n    \r\n    const { ImageType = [] } = useSelector((state) => ({\r\n        ImageType: state.ItemMastersReducer.ImageType\r\n    }));\r\n\r\n    const { imageTable, setImageTable } = props.state\r\n    \r\n    const dispatch = useDispatch()\r\n\r\n    const imageTypes = ImageType.map((Data) => ({\r\n        value: Data.id,\r\n        label: Data.Name\r\n    }));\r\n\r\n    useEffect(() => {\r\n        if(imageTable.length===0){\r\n            addRowHandler() \r\n        }\r\n        dispatch(get_ImageType_ForDropDown());\r\n    }, []);\r\n\r\n    function addRowHandler(key) {\r\n        var newarr1 = [...imageTable, {\r\n            ImageType: { value: 0, label: \"select\" },\r\n            ImageUpload: \"\"\r\n        }]\r\n        setImageTable(newarr1)\r\n    }\r\n\r\n  \r\n\r\n    function deleteRowHandler(key) {\r\n            var removeElseArrray1 = imageTable.filter((i, k) => {\r\n                return !(k === key)\r\n            })\r\n            setImageTable(removeElseArrray1)\r\n        }\r\n\r\n    const onchangeHandler = async (event, key, type) => {\r\n            \r\n            const found1 = imageTable.find(element => {\r\n                return element.ImageType.value === event.value\r\n            });\r\n            if ((found1) && (type === \"ImageType\")) {\r\n                dispatch(\r\n                    customAlert({\r\n                        Type: 4,\r\n                        Status: true,\r\n                        Message: `${event.label} is alerady selected`,\r\n                        RedirectPath: false,\r\n                        PermissionAction: false,\r\n                    })\r\n                );\r\n                return;\r\n            }\r\n\r\n            var found = imageTable.find((i, k) => {\r\n                return (k === key)\r\n            })\r\n            let newSelectValue = ''\r\n\r\n            if (type === \"ImageType\") {\r\n\r\n                newSelectValue = {\r\n                    ImageType: event,\r\n                    ImageUpload: found.ImageUpload,\r\n                }\r\n            }\r\n            else if (type === 'ImageUpload') {\r\n                const file = event.target.files[0]\r\n                const base64 = await convertBase64(file);\r\n                newSelectValue = {\r\n                    ImageType: found.ImageType,\r\n                    ImageUpload: base64,\r\n                }\r\n            }\r\n            let newTabArr = imageTable.map((index, k) => {\r\n                return (k === key) ? newSelectValue : index\r\n            })\r\n            setImageTable(newTabArr)\r\n        }\r\n\r\n\r\n    const convertBase64 = (file) => {\r\n\r\n        return new Promise((resolve, reject) => {\r\n            const fileReader = new FileReader()\r\n            fileReader.readAsDataURL(file);\r\n\r\n            fileReader.onload = () => {\r\n                resolve(fileReader.result)\r\n\r\n            };\r\n            fileReader.onerror = (error) => {\r\n                reject(error)\r\n            }\r\n        })\r\n    }\r\n\r\n    return (\r\n        < div>\r\n            <Card className=\"text-black\">\r\n                <CardBody className='c_card_body'>\r\n\r\n                    {imageTable.map((index, key) => {\r\n\r\n                        return <Row className=\" col col-sm-12\" >\r\n                            <FormGroup className=\"mb-3 col col-sm-4 \" >\r\n                                <Label htmlFor=\"validationCustom21\">Image Type</Label>\r\n                                <Select\r\n                                    value={index.ImageType}\r\n                                    options={imageTypes}\r\n                                    onChange={(e) => { onchangeHandler(e, key, \"ImageType\") }}\r\n                                />\r\n                            </FormGroup>\r\n\r\n                            <FormGroup className=\"mb-3 col col-sm-4 \" >\r\n                                <Label >Upload</Label>\r\n                                <Input type=\"file\" className=\"form-control \"\r\n                                    name=\"image\"\r\n                                    id=\"file\"\r\n                                    accept=\".jpg, .jpeg, .png\"\r\n                                    onChange={(event) => { onchangeHandler(event, key, \"ImageUpload\") }}\r\n                                />\r\n                            </FormGroup>\r\n\r\n                            <Col md={2} >\r\n                                {(imageTable.length === key + 1) ?\r\n                                    <Row className=\" mt-3\">\r\n                                        <Col sm={1} className=\" mt-3\">\r\n                                            {(imageTable.length > 1)\r\n                                                ?\r\n                                                < i className=\"mdi mdi-trash-can d-block text-danger font-size-20\" onClick={() => {\r\n                                                    deleteRowHandler(key)\r\n                                                }} >\r\n                                                </i>\r\n                                                :\r\n                                                <Col sm={2} ></Col>\r\n                                            }\r\n\r\n                                        </Col>\r\n\r\n                                        <Col sm={3} style={{ marginLeft: \"17px\" }}>\r\n                                            <Button\r\n                                                className=\" button_add\"\r\n                                                color=\"btn btn-outline-primary border-2 font-size-12\"\r\n                                                type=\"button\"\r\n                                                onClick={() => { addRowHandler(key) }} >\r\n                                                <i className=\"dripicons-plus\"></i>\r\n                                            </Button>\r\n                                        </Col>\r\n                                    </Row>\r\n                                    :\r\n                                    <Row className=\"mt-3\">\r\n                                        < i className=\"mdi mdi-trash-can d-block text-danger font-size-20 mt-3\" onClick={() => {\r\n                                            deleteRowHandler(key)\r\n                                        }} >\r\n                                        </i>\r\n                                    </Row>\r\n\r\n                                }\r\n\r\n                            </Col>\r\n\r\n                            <a id=\"img\" href='#'> {(index.ImageUpload === \"\") ? null : < img id='images' src={index.ImageUpload} />} </a>\r\n\r\n                        </Row>\r\n                    })}\r\n                </CardBody>\r\n            </Card >\r\n        </div>\r\n    )\r\n}\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\ItemPages\\ItemMaster\\UnitConversion_Tab\\Index.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\TermsAndConditionsRedux\\reducer.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\TermsAndConditions\\TermsAndConditionsList.js",["3369"],"import React, { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport TermsAndConditionsMaster from \"./TermsAndConditionsMaster\";\r\nimport CommonListPage from \"../../../components/Common/CommonMasterListPage\";\r\nimport {\r\n  commonPageFieldList,\r\n  commonPageFieldListSuccess\r\n} from \"../../../store/actions\";\r\nimport {\r\n  saveTermAndConditionSuccess,\r\n  getTermAndCondition,\r\n  EditTermsAndCondtions,\r\n  DeleteTermsAndCondtions,\r\n  DeleteTermsAndCondtions_Success,\r\n  UpdateTermsAndCondtions_Success,\r\n  getTermAndCondition_Success\r\n} from \"../../../store/Administrator/TermsAndConditionsRedux/actions\";\r\nimport * as pageId from \"../../../routes/allPageID\"\r\nimport * as url from \"../../../routes/route_url\";\r\nimport { PageLoadingSpinner } from \"../../../components/Common/CommonButton\";\r\n\r\nconst TermsAndConditionsList = (props) => {\r\n\r\n  const dispatch = useDispatch();\r\n  const reducers = useSelector(\r\n    (state) => ({\r\n      listBtnLoading: state.TermsAndConditionsReducer.listBtnLoading,\r\n      goBtnLoading: state.TermsAndConditionsReducer.goBtnLoading,\r\n      tableList: state.TermsAndConditionsReducer.tableList,\r\n      postMsg: state.TermsAndConditionsReducer.PostData,\r\n      editData: state.TermsAndConditionsReducer.editData,\r\n      updateMsg: state.TermsAndConditionsReducer.updateMessage,\r\n      deleteMsg: state.TermsAndConditionsReducer.deleteMessage,\r\n      userAccess: state.Login.RoleAccessUpdateData,\r\n      pageField: state.CommonPageFieldReducer.pageFieldList\r\n    })\r\n  );\r\n\r\n  const action = {\r\n    getList: getTermAndCondition,\r\n    editId: EditTermsAndCondtions,\r\n    deleteId: DeleteTermsAndCondtions,\r\n    postSucc: saveTermAndConditionSuccess,\r\n    updateSucc: UpdateTermsAndCondtions_Success,\r\n    deleteSucc: DeleteTermsAndCondtions_Success\r\n  }\r\n\r\n  //useEffect : used for fetching data\r\n  useEffect(() => {\r\n    const page_Id = pageId.TERMS_AND_CONDITION_LIST\r\n    dispatch(commonPageFieldListSuccess(null))\r\n    dispatch(commonPageFieldList(page_Id))\r\n    dispatch(getTermAndCondition())\r\n\r\n    return () => {\r\n      dispatch(getTermAndCondition_Success([]));\r\n      dispatch(commonPageFieldListSuccess(null))\r\n    }\r\n  }, []);\r\n\r\n  const { pageField, goBtnLoading} = reducers\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <PageLoadingSpinner isLoading={(goBtnLoading || !pageField)} />\r\n      {\r\n        (pageField) &&\r\n        <CommonListPage\r\n          action={action}\r\n          reducers={reducers}\r\n          MasterModal={TermsAndConditionsMaster}\r\n          masterPath={url.TERMS_AND_CONDITION}\r\n          ButtonMsgLable={\"Terms & Conditions\"}\r\n          deleteName={\"Name\"}\r\n        />\r\n      }\r\n    </React.Fragment>\r\n  )\r\n}\r\nexport default TermsAndConditionsList;\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\TermsAndConditionsRedux\\saga.js",["3370"],"import { call, put, takeLatest } from \"redux-saga/effects\";\r\n\r\nimport {\r\n  saveTermAndConditionSuccess,\r\n  getTermAndCondition_Success,\r\n  DeleteTermsAndCondtions_Success,\r\n  EditTermsAndCondtions_Success,\r\n  UpdateTermsAndCondtions_Success,\r\n  TermsAndConditionsApiErrorAction\r\n} from \"./actions\";\r\n\r\nimport {\r\n  Post_TermsAndCondtions_Master_API,\r\n  get_TermsAndCondtionsList_API,\r\n  del_TermsAndCondtions_Master_API,\r\n  edit_TermsAndCondtions_Master_API,\r\n  update_TermsAndCondtions_Master_API\r\n} from \"../../../helpers/backend_helper\";\r\n\r\nimport {\r\n  POST_METHOD_HANDLER_FOR_TERMSANDCONDITIONS_MASTER_API,\r\n  GET_METHOD_FOR_TERMSANDCONDITIONSLIST_API,\r\n  DELETE_METHOD_FOR_TERMSANDCONDITIONSLIST_API,\r\n  EDIT_METHOD_FOR_TERMSANDCONDITIONSLIST_API,\r\n  UPDATE_METHOD_FOR_TERMSANDCONDITIONSLIST_API\r\n} from \"./actionTypes\";\r\n\r\nimport { CommonConsole } from \"../../../components/Common/CommonFunction\";\r\n\r\n\r\n// post api\r\nfunction* Save_Method_ForTermsAndCondtionsMaster_GenFun({ config }) {\r\n  try {\r\n    const response = yield call(Post_TermsAndCondtions_Master_API, config);\r\n    yield put(saveTermAndConditionSuccess(response));\r\n  } catch (error) { yield put(TermsAndConditionsApiErrorAction()) }\r\n}\r\n\r\n\r\n// Get List Page API\r\nfunction* Get_TermsAndCondtions_GenratorFunction() {\r\n  try {\r\n    const response = yield call(get_TermsAndCondtionsList_API);\r\n    yield put(getTermAndCondition_Success(response.Data));\r\n  } catch (error) { yield put(TermsAndConditionsApiErrorAction()) }\r\n}\r\n\r\n// delete api \r\nfunction* Delete_TermsAndCondtions_GenratorFunction({config }) {\r\n  try {\r\n    const response = yield call(del_TermsAndCondtions_Master_API, config);\r\n    yield put(DeleteTermsAndCondtions_Success(response))\r\n  } catch (error) { yield put(TermsAndConditionsApiErrorAction()) }\r\n}\r\n\r\n\r\n// edit api\r\nfunction* Edit_TermsAndCondtions_GenratorFunction({ config }) {\r\n  const { btnmode } = config;\r\n  try {\r\n    const response = yield call(edit_TermsAndCondtions_Master_API, config);\r\n    response.pageMode = btnmode;\r\n    yield put(EditTermsAndCondtions_Success(response));\r\n  } catch (error) { yield put(TermsAndConditionsApiErrorAction()) }\r\n}\r\n\r\n// update api\r\nfunction* update_TermsAndCondtions_GenratorFunction({ config }) {\r\n  \r\n  try {\r\n    const response = yield call(update_TermsAndCondtions_Master_API, config);\r\n    yield put(UpdateTermsAndCondtions_Success(response))\r\n  } catch (error) { yield put(TermsAndConditionsApiErrorAction()) }\r\n}\r\n\r\n\r\nfunction* TermsAndConditionsSaga() {\r\n  yield takeLatest(POST_METHOD_HANDLER_FOR_TERMSANDCONDITIONS_MASTER_API, Save_Method_ForTermsAndCondtionsMaster_GenFun)\r\n  yield takeLatest(GET_METHOD_FOR_TERMSANDCONDITIONSLIST_API, Get_TermsAndCondtions_GenratorFunction)\r\n  yield takeLatest(DELETE_METHOD_FOR_TERMSANDCONDITIONSLIST_API, Delete_TermsAndCondtions_GenratorFunction)\r\n  yield takeLatest(EDIT_METHOD_FOR_TERMSANDCONDITIONSLIST_API, Edit_TermsAndCondtions_GenratorFunction)\r\n  yield takeLatest(UPDATE_METHOD_FOR_TERMSANDCONDITIONSLIST_API, update_TermsAndCondtions_GenratorFunction)\r\n}\r\n\r\nexport default TermsAndConditionsSaga;","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\TermsAndConditions\\TermsAndConditionsMaster.js",["3371","3372","3373","3374","3375","3376","3377"],"import React, { useEffect, useState, } from \"react\";\r\nimport {\r\n    Card,\r\n    CardBody,\r\n    CardHeader,\r\n    Col,\r\n    Container,\r\n    FormGroup,\r\n    Input,\r\n    Label,\r\n    Row,\r\n} from \"reactstrap\";\r\nimport { MetaTags } from \"react-meta-tags\";\r\nimport {\r\n    commonPageField,\r\n    commonPageFieldSuccess\r\n} from \"../../../store/actions\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { Breadcrumb_inputName } from \"../../../store/Utilites/Breadcrumb/actions\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n    comAddPageFieldFunc,\r\n    formValid,\r\n    initialFiledFunc,\r\n    onChangeText,\r\n    resetFunction\r\n} from \"../../../components/Common/validationFunction\";\r\nimport { SaveButton } from \"../../../components/Common/CommonButton\";\r\nimport {\r\n    EditTermsAndCondtions_Success,\r\n    saveTermAndCondition,\r\n    saveTermAndConditionSuccess,\r\n    UpdateTermsAndCondtions,\r\n    UpdateTermsAndCondtions_Success\r\n} from \"../../../store/Administrator/TermsAndConditionsRedux/actions\";\r\nimport { breadcrumbReturnFunc, btnIsDissablefunc, loginUserID, metaTagLabel } from \"../../../components/Common/CommonFunction\";\r\nimport * as pageId from \"../../../routes/allPageID\"\r\nimport * as url from \"../../../routes/route_url\";\r\nimport * as mode from \"../../../routes/PageMode\";\r\nimport { customAlert } from \"../../../CustomAlert/ConfirmDialog\";\r\n\r\nconst TermsAndConditionsMaster = (props) => {\r\n\r\n    const history = useHistory()\r\n    const dispatch = useDispatch();\r\n\r\n    const fileds = {\r\n        id: \"\",\r\n        Name: \"\",\r\n        IsDefault: false\r\n    }\r\n    const [state, setState] = useState(() => initialFiledFunc(fileds))\r\n\r\n    const [modalCss, setModalCss] = useState(false);\r\n    const [pageMode, setPageMode] = useState(mode.defaultsave);\r\n    const [userPageAccessState, setUserAccState] = useState(123);\r\n    const [editCreatedBy, seteditCreatedBy] = useState(\"\");\r\n\r\n    //Access redux store Data /  'save_ModuleSuccess' action data\r\n    const { postMsg, updateMsg, pageField, userAccess, saveBtnloading } = useSelector((state) => ({\r\n        saveBtnloading: state.TermsAndConditionsReducer.saveBtnloading,\r\n        postMsg: state.TermsAndConditionsReducer.PostData,\r\n        updateMsg: state.TermsAndConditionsReducer.updateMessage,\r\n        userAccess: state.Login.RoleAccessUpdateData,\r\n        pageField: state.CommonPageFieldReducer.pageField\r\n    }));\r\n\r\n    useEffect(() => {\r\n        const page_Id = pageId.TERMS_AND_CONDITION\r\n        dispatch(commonPageFieldSuccess(null));\r\n        dispatch(commonPageField(page_Id))\r\n    }, []);\r\n\r\n    const values = { ...state.values }\r\n    const { isError } = state;\r\n    const { fieldLabel } = state;\r\n\r\n    const location = { ...history.location }\r\n    const hasShowloction = location.hasOwnProperty(mode.editValue)\r\n    const hasShowModal = props.hasOwnProperty(mode.editValue)\r\n\r\n    // userAccess useEffect\r\n    useEffect(() => {\r\n        let userAcc = null;\r\n        let locationPath = location.pathname;\r\n\r\n        if (hasShowModal) {\r\n            locationPath = props.masterPath;\r\n        };\r\n        userAcc = userAccess.find((inx) => {\r\n            return (`/${inx.ActualPagePath}` === locationPath)\r\n        })\r\n        if (userAcc) {\r\n            setUserAccState(userAcc)\r\n            breadcrumbReturnFunc({ dispatch, userAcc });\r\n        };\r\n    }, [userAccess])\r\n\r\n    //This UseEffect 'SetEdit' data and 'autoFocus' while this Component load First Time.\r\n    useEffect(() => {\r\n\r\n        if ((hasShowloction || hasShowModal)) {\r\n            let hasEditVal = null\r\n            if (hasShowloction) {\r\n                setPageMode(location.pageMode)\r\n                hasEditVal = location.editValue\r\n            }\r\n            else if (hasShowModal) {\r\n                hasEditVal = props.editValue\r\n                setPageMode(props.pageMode)\r\n                setModalCss(true)\r\n            }\r\n            if (hasEditVal) {\r\n\r\n                const { id, Name, IsDefault } = hasEditVal\r\n                const { values, fieldLabel, hasValid, required, isError } = { ...state }\r\n\r\n                values.id = id\r\n                values.Name = Name;\r\n                values.IsDefault = IsDefault;\r\n\r\n                hasValid.Name.valid = true;\r\n                hasValid.IsDefault.valid = true;\r\n\r\n                setState({ values, fieldLabel, hasValid, required, isError })\r\n                // dispatch(Breadcrumb_inputName(hasEditVal.Name))\r\n                seteditCreatedBy(hasEditVal.CreatedBy)\r\n\r\n            }\r\n            dispatch(EditTermsAndCondtions_Success({ Status: false }))\r\n        }\r\n    }, [])\r\n    useEffect(async () => {\r\n        if ((postMsg.Status === true) && (postMsg.StatusCode === 200)) {\r\n            dispatch(saveTermAndConditionSuccess({ Status: false }))\r\n            setState(() => resetFunction(fileds, state))// Clear form values \r\n            dispatch(Breadcrumb_inputName(''))\r\n\r\n            if (pageMode === \"other\") {\r\n                customAlert({\r\n                    Type: 1,\r\n                    Message: postMsg.Message,\r\n                })\r\n            }\r\n            else {\r\n                const promise = await customAlert({\r\n                    Type: 1,\r\n                    Message: postMsg.Message,\r\n                })\r\n                if (promise) {\r\n                    history.push({\r\n                        pathname: url.TERMS_AND_CONDITION_LIST,\r\n                    })\r\n                }\r\n            }\r\n\r\n\r\n        }\r\n        else if (postMsg.Status === true) {\r\n            dispatch(saveTermAndConditionSuccess({ Status: false }))\r\n            customAlert({\r\n                Type: 4,\r\n                 Message: JSON.stringify(postMsg.Message),\r\n            })\r\n        }\r\n    }, [postMsg])\r\n\r\n    useEffect(() => {\r\n\r\n        if (updateMsg.Status === true && updateMsg.StatusCode === 200 && !modalCss) {\r\n            setState(() => resetFunction(fileds, state)) // Clear form values \r\n            history.push({\r\n                pathname: url.TERMS_AND_CONDITION_LIST,\r\n            })\r\n        } else if (updateMsg.Status === true && !modalCss) {\r\n            dispatch(UpdateTermsAndCondtions_Success({ Status: false }));\r\n             customAlert({\r\n                Type: 3,\r\n                Message: JSON.stringify(updateMsg.Message),\r\n            })\r\n        }\r\n    }, [updateMsg, modalCss]);\r\n\r\n    useEffect(() => {\r\n        if (pageField) {\r\n            const fieldArr = pageField.PageFieldMaster\r\n            comAddPageFieldFunc({ state, setState, fieldArr })\r\n        }\r\n    }, [pageField])\r\n\r\n\r\n    const SaveHandler = async (event) => {\r\n        event.preventDefault();\r\n        const btnId = event.target.id\r\n        try {\r\n            if (formValid(state, setState)) {\r\n                btnIsDissablefunc({ btnId, state: true })\r\n\r\n                const jsonBody = JSON.stringify({\r\n                    Name: values.Name,\r\n                    IsDefault: values.IsDefault,\r\n                    CreatedBy: loginUserID(),\r\n                    UpdatedBy: loginUserID()\r\n                });\r\n\r\n                if (pageMode === mode.edit) {\r\n                    dispatch(UpdateTermsAndCondtions({ jsonBody, updateId: values.id, btnId }));\r\n                }\r\n                else {\r\n                    dispatch(saveTermAndCondition({ jsonBody, btnId }));\r\n                }\r\n            }\r\n        } catch (e) { btnIsDissablefunc({ btnId, state: false }) }\r\n    };\r\n\r\n    // IsEditMode_Css is use of module Edit_mode (reduce page-content marging)\r\n    var IsEditMode_Css = ''\r\n    if ((modalCss) || (pageMode === mode.dropdownAdd)) { IsEditMode_Css = \"-5.5%\" };\r\n\r\n    if (!(userPageAccessState === '')) {\r\n        return (\r\n            <React.Fragment>\r\n                <div className=\"page-content\" style={{ marginTop: IsEditMode_Css }}>\r\n                    <Container fluid>\r\n                        <MetaTags>{metaTagLabel(userPageAccessState)}</MetaTags>\r\n                        {/* <BreadcrumbNew userAccess={userAccess} pageId={pageId.TERMS_AND_CONDITION} /> */}\r\n                        <Card className=\"text-black\">\r\n                            <CardHeader className=\"card-header   text-black c_card_header\" >\r\n                                <h4 className=\"card-title text-black\">{userPageAccessState.PageDescription}</h4>\r\n                                <p className=\"card-title-desc text-black\">{userPageAccessState.PageDescriptionDetails}</p>\r\n                            </CardHeader>\r\n\r\n                            <CardBody className=\" vh-10 0 text-black\" style={{ backgroundColor: \"#whitesmoke\" }} >\r\n                                <form noValidate>\r\n                                    <Row className=\"\">\r\n                                        <Col md={12}>\r\n                                            <Card>\r\n                                                <CardBody className=\"c_card_body\">\r\n                                                    <Row>\r\n                                                        <FormGroup className=\"mb-2 col col-sm-4 \">\r\n                                                            <Label htmlFor=\"validationCustom01\">{fieldLabel.Name}</Label>\r\n                                                            <Input\r\n                                                                name=\"Name\"\r\n                                                                id=\"txtName\"\r\n                                                                value={values.Name}\r\n                                                                type=\"text\"\r\n                                                                className={isError.Name.length > 0 ? \"is-invalid form-control\" : \"form-control\"}\r\n                                                                placeholder=\"Please Enter Name\"\r\n                                                                autoComplete=\"off\"\r\n                                                                autoFocus={true}\r\n                                                                onChange={(event) => {\r\n                                                                    onChangeText({ event, state, setState })\r\n                                                                    // dispatch(Breadcrumb_inputName(event.target.value))\r\n                                                                }}\r\n                                                            />\r\n                                                            {isError.Name.length > 0 && (\r\n                                                                <span className=\"invalid-feedback\">{isError.Name}</span>\r\n                                                            )}\r\n                                                        </FormGroup>\r\n                                                        <Row>\r\n                                                            <FormGroup className=\"mb-2 col col-sm-3\">\r\n                                                                <Row className=\"justify-content-md-left\">\r\n                                                                    <Label className=\"col-sm-4 col-form-label\" >{fieldLabel.IsDefault}</Label>\r\n                                                                    <Col md={2} style={{ marginTop: '9px', marginLeft: \"1cm\" }} >\r\n\r\n                                                                        <div className=\"form-check form-switch form-switch-md mb-3\" >\r\n                                                                            <Input type=\"checkbox\" className=\"form-check-input\"\r\n                                                                                checked={values.IsDefault}\r\n                                                                                name=\"IsDefault\"\r\n                                                                                onChange={(e) => {\r\n                                                                                    setState((i) => {\r\n                                                                                        const a = { ...i }\r\n                                                                                        a.values.IsDefault = e.target.checked;\r\n                                                                                        return a\r\n                                                                                    })\r\n                                                                                }}\r\n                                                                            />\r\n                                                                        </div>\r\n                                                                    </Col>\r\n                                                                </Row>\r\n                                                            </FormGroup>\r\n                                                        </Row>\r\n                                                        <FormGroup className=\"mt-2\">\r\n                                                            <Row>\r\n                                                                <Col sm={2}>\r\n                                                                    <SaveButton\r\n                                                                        loading={saveBtnloading}\r\n                                                                        onClick={SaveHandler}\r\n                                                                        pageMode={pageMode}\r\n                                                                        userAcc={userPageAccessState}\r\n                                                                        editCreatedBy={editCreatedBy}\r\n                                                                        module={\"TermsAndCondtionsMaster\"}\r\n                                                                    />\r\n                                                                </Col>\r\n                                                            </Row>\r\n                                                        </FormGroup>\r\n                                                    </Row>\r\n                                                </CardBody>\r\n                                            </Card>\r\n                                        </Col>\r\n                                    </Row>\r\n                                </form>\r\n                            </CardBody>\r\n                        </Card>\r\n                    </Container>\r\n                </div>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n    else {\r\n        return (\r\n            <React.Fragment></React.Fragment>\r\n        )\r\n    }\r\n};\r\n\r\nexport default TermsAndConditionsMaster\r\n\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\TermsAndConditionsRedux\\actions.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Purchase\\Order\\OrderPageTermsTable.js",["3378"],"import React from 'react'\r\nimport { useSelector } from 'react-redux';\r\nimport { useLocation } from 'react-router-dom';\r\nimport Select from \"react-select\";\r\nimport { Table } from 'reactstrap';\r\nimport * as url from \"../../../routes/route_url\"\r\n\r\nexport default function OrderPageTermsTable(props,) {\r\n\r\n    const location = useLocation();\r\n    const { tableData = [] } = props;\r\n    const showCondition = ((location.pathname === url.ORDER_1) && (tableData.length > 0))\r\n\r\n    const { tableList, setfunc, privious = [] } = props;\r\n\r\n    const { termsAndConditions = [] } = useSelector((state) => ({\r\n        termsAndConditions: state.TermsAndConditionsReducer.TermsAndConditionsList,\r\n    }));\r\n\r\n    if (!showCondition) { return <></> }\r\n\r\n    const onChange = (e) => {\r\n        const find = tableList.find((i) => {\r\n            return (i.value === e.value)\r\n        });\r\n        if (find === undefined) {\r\n            setfunc(terms => [...terms, { label: e.label, value: e.value, IsDeleted: 0 }]);\r\n        } else {\r\n\r\n            setfunc(terms => terms.map((i) => {\r\n                if (i.value === e.value) {\r\n                    i.IsDeleted = 0\r\n                }\r\n                return i\r\n            }));\r\n        }\r\n    }\r\n    const ondelete = (i) => {\r\n\r\n        const find = privious.find((ele) => {\r\n            return (i.value === ele.id)\r\n        });\r\n\r\n        if (!(find === undefined)) {\r\n            setfunc(terms => {\r\n                const a = terms.map(ele => {\r\n                    if (ele.value === i.value) {\r\n                        ele.IsDeleted = 1\r\n                    }\r\n                    return ele\r\n                })\r\n                return a\r\n            })\r\n        }\r\n        else {\r\n            setfunc(terms => {\r\n                const a = terms.filter(ele => !(ele.value === i.value))\r\n                return a\r\n            })\r\n        }\r\n    }\r\n    const table = []\r\n    tableList.map((i, k) => {\r\n        if (i.IsDeleted === 0) {\r\n            table.push(i)\r\n        }\r\n    })\r\n\r\n\r\n    return (\r\n        <div style={{ minHeight: \"400px\", marginTop: \"-20px\" }}>\r\n            <div className=\"row mx-1 \" style={{\r\n                borderStyle: \"solid\",\r\n                borderColor: \"Gray\",\r\n                borderWidth: \"0.3px\",\r\n                borderRadius: \"7px\",\r\n                backgroundColor: \"#d4d4e9\",\r\n            }}>\r\n                <div className=\"col-3  pt-3 pb-3\">\r\n                    <Select\r\n                        options={\r\n                            termsAndConditions.map(i => ({\r\n                                value: i.id,\r\n                                label: i.Name\r\n                            }))\r\n                        }\r\n                        onChange={onChange}\r\n                    />\r\n                </div>\r\n                <div className=\" col-9 pt-3\" >\r\n\r\n\r\n\r\n                    <Table className='table  table-borderless table-hover  '>\r\n                        <tr>\r\n                            <th scope=\"col\">Terms and Condition</th>\r\n                            <th scope=\"col\">Action</th>\r\n                        </tr >\r\n                        {table.map((i, k) => (\r\n                            <tr className='bordered-gray' >\r\n                                <td className=\"px-2\" >\r\n                                    <spam className=\"form-label\">{k + 1}</spam>{i.label}</td>\r\n                                <td style={{ marginLeft: \"10cm\" }}>\r\n                                    <i className=\"mdi mdi-delete font-size-18 text-danger text-right\"\r\n                                        onClick={() => ondelete(i)}></i></td>\r\n                            </tr>\r\n                        )\r\n                        )}\r\n                    </Table>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\TermsAndConditionsRedux\\actionTypes.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Utilites\\PdfReport\\saga.js",["3379"],"import { call, put, takeEvery, takeLatest } from \"redux-saga/effects\";\r\nimport { GET_PDF_MULTIPLEINVOICE_DATA, GET_PDF_REPORT_DATA } from \"./actionType\";\r\n// import { Data } from \"./DemoData\";\r\n\r\nimport { getpdfReportdataError, getpdfReportdataSuccess, } from \"./actions\";\r\nimport { get_Group_List_Api } from \"../../../helpers/backend_helper\";\r\nimport { CommonConsole } from \"../../../components/Common/CommonFunction\";\r\nimport { dataGenrator } from \"../../../Reports/Invoice report a5/DemoData\";\r\n\r\n\r\nfunction* getpdfData_GenFunc({ urlpath, config }) {\r\n\r\n  try {\r\n\r\n    const response = yield call(urlpath, config);\r\n    response[\"ReportType\"] = config.ReportType\r\n    response.Data[\"ReportType\"] = config.ReportType\r\n    response.Data[\"Period\"] = config\r\n\r\n\r\n    if ((config.systemSetting) || (config.subPageMode)) {\r\n      response.Data[\"SettingData\"] = config.systemSetting\r\n      response.Data[\"subPageMode\"] = config.subPageMode;\r\n      response.Data[\"forceA5\"] = config.forceA5;\r\n    }\r\n\r\n    yield put(getpdfReportdataSuccess(response));\r\n\r\n  } catch (error) {\r\n    yield put(getpdfReportdataError())\r\n    CommonConsole(error)\r\n  }\r\n}\r\n\r\nfunction* GetMultipleinvoicereport_GenFunc({ API, jsonBody, ReportType, Id }) {\r\n\r\n  try {\r\n\r\n    // const response = yield call(MultipleInvoice_API, jsonBody);\r\n    const response = yield call(get_Group_List_Api, jsonBody);\r\n    // const response = Data;\r\n    response[\"ReportType\"] = ReportType\r\n    response.Data[\"ReportType\"] = ReportType\r\n    response[\"Data\"] = dataGenrator()\r\n    // yield put((response));\r\n    yield put(getpdfReportdataSuccess(response));\r\n\r\n\r\n  } catch (error) {\r\n    yield put(getpdfReportdataError())\r\n    CommonConsole(error)\r\n  }\r\n}\r\n\r\nfunction* pdfReport_Saga() {\r\n  yield takeLatest(GET_PDF_REPORT_DATA, getpdfData_GenFunc);\r\n  yield takeLatest(GET_PDF_MULTIPLEINVOICE_DATA, GetMultipleinvoicereport_GenFunc);\r\n\r\n}\r\nexport default pdfReport_Saga;\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Utilites\\PdfReport\\reducer.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Utilites\\PdfReport\\actions.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Utilites\\PdfReport\\actionType.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\Reports\\ReportIndex.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\Reports\\InvioceReport\\Page.js",["3380"],"import jsPDF from \"jspdf\";\r\nimport \"jspdf-autotable\";\r\nimport * as style from './ReportStyle';\r\nimport { compareGSTINState, loginSystemSetting } from \"../../components/Common/CommonFunction\";\r\nimport InvioceReporta5 from \"../Invoice report a5/Page\";\r\nimport axios from \"axios\";\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst pageHeder = (doc, data) => {\r\n    style.pageBorder(doc, data);\r\n    style.pageHeder(doc, data);     //Title\r\n    style.reportHeder1(doc, data);\r\n    style.reportHeder2(doc, data);\r\n    style.reportHeder3(doc, data);    //Invoice ID , Date\r\n    return true;\r\n};\r\n\r\nconst reportBody = (doc, data) => {\r\n    const isIGST = compareGSTINState(data.CustomerGSTIN, data.PartyGSTIN);\r\n    if (isIGST) {\r\n        style.tableBodyWithIGST(doc, data); //table Body\r\n    } else {\r\n        style.tableBody(doc, data);\r\n    }\r\n};\r\n\r\nfunction pageFooter(doc, data) {\r\n    style.pageFooter(doc, data);\r\n    style.reportFooter(doc, data);\r\n}\r\n\r\nconst invioceReport_A4 = async (data) => {\r\n\r\n\r\n\r\n\r\n    if (data.InvoiceUploads.length > 0) {\r\n\r\n\r\n        if (data.InvoiceUploads[0].QRCodeUrl !== null) {\r\n            data[\"isQR\"] = true;\r\n        } else {\r\n            data[\"isQR\"] = false;\r\n        }\r\n    }\r\n    var doc = new jsPDF('p', 'pt', 'a4');\r\n\r\n    if (data.InvoiceUploads.length > 0) {\r\n        try {\r\n            if (data.InvoiceUploads.length > 0) {\r\n                debugger\r\n                const url = data.InvoiceUploads[0].QRCodeUrl;\r\n                let desiredPart = null;\r\n                const urlObject = new URL(url);\r\n                desiredPart = urlObject.pathname;\r\n\r\n                if (urlObject.host !== \"pro.mastersindia.co\") {\r\n                    doc.addImage(url, 'JPEG', 323, 18, 83, 83);\r\n                } else {\r\n                    doc.addImage(`/E_invoiceQRCode${desiredPart}`, 'JPEG', 323, 18, 83, 83);\r\n\r\n                    const image = await loadImage(`/E_invoiceQRCode${desiredPart}`);\r\n                    debugger\r\n                    if (image) {\r\n                        doc.addImage(image.currentSrc, 'JPEG', 323, 18, 83, 83);\r\n                        console.log(image.currentSrc)\r\n                    } else {\r\n                        doc.text('Image Not Found', 323, 18);\r\n                    }\r\n                }\r\n\r\n            }\r\n\r\n        } catch (w) { }\r\n    }\r\n\r\n    function loadImage(url) {\r\n        return new Promise((resolve, reject) => {\r\n            const img = new Image();\r\n            img.onload = () => resolve(img);\r\n            img.onerror = () => reject();\r\n            img.src = url;\r\n        });\r\n    }\r\n    pageHeder(doc, data);\r\n    reportBody(doc, data);\r\n    pageFooter(doc, data);\r\n\r\n    doc.setProperties({\r\n        title: `InvoiceReport/${data.InvoiceDate}-${data.CustomerName} `\r\n    });\r\n\r\n    function generateSaveAndOpenPDFReport() {\r\n        const pdfUrl = URL.createObjectURL(doc.output('blob'));\r\n        window.open(pdfUrl);\r\n    }\r\n    generateSaveAndOpenPDFReport();\r\n}\r\n\r\nconst InvioceReport = (data) => {\r\n\r\n    const SettingData = loginSystemSetting();\r\n    data[\"SettingData\"] = SettingData;\r\n\r\n    if (SettingData.A4Print === \"1\" && !data.forceA5) {\r\n        invioceReport_A4(data)\r\n    } else {\r\n        InvioceReporta5(data)\r\n    }\r\n\r\n}\r\n\r\nexport default InvioceReport;\r\n\r\n\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\Reports\\InvioceReport\\ReportStyle.js",["3381","3382","3383"],"\r\nimport cbm_logo from \"../../assets/images/cbm_logo.png\"\r\nimport upi_qr_code from \"../../assets/images/upi_qr_code.png\"\r\nimport { CurrentTime, compareGSTINState, currentDate_dmy, date_dmy_func } from \"../../components/Common/CommonFunction\";\r\nimport { numberWithCommas, toWords } from \"../Report_common_function\";\r\nimport * as table from './TableData'\r\n\r\nlet initial_y = 0\r\n\r\nexport const pageBorder = (doc) => {\r\n\r\n    doc.setDrawColor(0, 0, 0);\r\n    doc.line(570, 16, 30, 16);//horizontal line (Top)\r\n    doc.line(30, 815, 30, 16);//vertical line (left)\r\n    doc.line(570, 815, 570, 16);//vertical line (Right)\r\n    doc.line(570, 815, 30, 815);//horizontal line (Bottom)   \r\n}\r\nexport const pageHeder = (doc, data) => {\r\n\r\n    // doc.addImage(cbm_logo, 'PNG', 33, 14, 85, 50)\r\n    doc.setDrawColor(0, 0, 0);\r\n    doc.line(408, 63, 408, 16);//vertical right 1\r\n    doc.line(570, data.isQR ? 103 : 63, 30, data.isQR ? 103 : 63)  //horizontal line 1 billby upper for repeat header\r\n    doc.addFont(\"Arial\", 'Normal')\r\n    doc.setFont('Arial')\r\n\r\n    doc.setFontSize(18)\r\n    if (data.isQR) {\r\n        doc.text('TAX INVOICE', 160, 55,)\r\n\r\n    } else {\r\n        doc.text('TAX INVOICE', 200, 45,)\r\n    }\r\n\r\n}\r\n\r\nexport const reportHeder1 = (doc, data) => {\r\n\r\n    debugger\r\n    let Y1 = 0\r\n    if (data.isQR) {\r\n        Y1 = 115;\r\n    } else {\r\n        Y1 = 75;\r\n    }\r\n\r\n    doc.setFont('Tahoma')\r\n    doc.setFontSize(11)\r\n    doc.setFont(undefined, 'bold')\r\n    doc.text(\"Billed by\", 80, Y1)  //bill by \r\n    doc.text('Billed to', 280, Y1) //billed to\r\n    doc.text('Details of Transport', 440, Y1)\r\n\r\n    doc.setDrawColor(0, 0, 0);\r\n    doc.line(570, data.isQR ? 103 : 63, 30, data.isQR ? 103 : 63) //horizontal line 1 billby upper\r\n    doc.line(570, 16, 30, 16);//horizontal line 2\r\n    doc.line(570, data.isQR ? 120 : 80, 30, data.isQR ? 120 : 80);//horizontal line 3\r\n\r\n    // doc.line(408, data.isQR ? 210 : 170, 408, 16);//vertical line header section billby \r\n    // doc.line(220, data.isQR ? 210 : 170, 220, data.isQR ? 103 : 63);//vertical  line header section billto\r\n\r\n    var BilledByStyle = {\r\n        didDrawCell: (data1) => {\r\n\r\n            const rowIdx = data1.row.index;\r\n            const colIdx = data1.column.index;\r\n            if (rowIdx === 0 && colIdx === 0) {\r\n                let x = data1.cursor.x + 2\r\n                let y = data1.cursor.y + 9\r\n                doc.setFontSize(8)\r\n                doc.setFont(undefined, 'bold')\r\n                doc.text('Party: ', x, y)\r\n            };\r\n            if (rowIdx === 1 && colIdx === 0) {\r\n\r\n                let x = data1.cursor.x + 2\r\n                let y = data1.cursor.y + 9\r\n                doc.setFontSize(8)\r\n                doc.setFont(undefined, 'bold')\r\n                doc.text('Address: ', x, y)\r\n            };\r\n            if (rowIdx === 2 && colIdx === 0) {\r\n\r\n                let x = data1.cursor.x + 2\r\n                let y = data1.cursor.y + 9\r\n                doc.setFontSize(8)\r\n                doc.setFont(undefined, 'bold')\r\n                doc.text('State: ', x, y)\r\n            };\r\n            if (rowIdx === 3 && colIdx === 0) {\r\n\r\n                let x = data1.cursor.x + 2\r\n                let y = data1.cursor.y + 9\r\n                doc.setFontSize(8)\r\n                doc.setFont(undefined, 'bold')\r\n                doc.text('GSTIN: ', x, y)\r\n            };\r\n            if (rowIdx === 4 && colIdx === 0) {\r\n\r\n                let x = data1.cursor.x + 2\r\n                let y = data1.cursor.y + 9\r\n                doc.setFontSize(8)\r\n                doc.setFont(undefined, 'bold')\r\n                doc.text('FSSAI No: ', x, y)\r\n            };\r\n            if (rowIdx === 5 && colIdx === 0) {\r\n\r\n                let x = data1.cursor.x + 2\r\n                let y = data1.cursor.y + 9\r\n                doc.setFontSize(8)\r\n                doc.setFont(undefined, 'bold')\r\n                doc.text('Mobile No: ', x, y)\r\n            };\r\n\r\n        },\r\n\r\n        margin: {\r\n            top: 45, left: 30, right: 35,\r\n        },\r\n        showHead: 'always',\r\n        theme: 'plain',\r\n        styles: {\r\n            overflow: 'linebreak',\r\n            fontSize: 8,\r\n            height: 0,\r\n        },\r\n        bodyStyles: {\r\n            columnWidth: 'wrap',\r\n            textColor: [30, 30, 30],\r\n            cellPadding: 2,\r\n            fontSize: 8,\r\n            fontStyle: 'normal',\r\n            lineColor: [0, 0, 0]\r\n        },\r\n        columnStyles: {\r\n            0: {\r\n                valign: \"top\",\r\n                columnWidth: 190,\r\n                halign: 'lfet',\r\n            }\r\n        },\r\n        tableLineColor: \"black\",\r\n\r\n        startY: data.isQR ? 120 : 80\r\n    };\r\n\r\n    var BilledToStyle = {\r\n        didDrawCell: (data1) => {\r\n\r\n            const rowIdx = data1.row.index;\r\n            const colIdx = data1.column.index;\r\n            if (rowIdx === 0 && colIdx === 0) {\r\n                let x = data1.cursor.x + 2\r\n                let y = data1.cursor.y + 9\r\n                doc.setFontSize(8)\r\n                doc.setFont(undefined, 'bold')\r\n                doc.text('Customer: ', x, y)\r\n            };\r\n            if (rowIdx === 1 && colIdx === 0) {\r\n\r\n                let x = data1.cursor.x + 2\r\n                let y = data1.cursor.y + 9\r\n                doc.setFontSize(8)\r\n                doc.setFont(undefined, 'bold')\r\n                doc.text('Address: ', x, y)\r\n            };\r\n            if (rowIdx === 2 && colIdx === 0) {\r\n\r\n                let x = data1.cursor.x + 2\r\n                let y = data1.cursor.y + 9\r\n                doc.setFontSize(8)\r\n                doc.setFont(undefined, 'bold')\r\n                doc.text('State: ', x, y)\r\n            };\r\n            if (rowIdx === 3 && colIdx === 0) {\r\n\r\n                let x = data1.cursor.x + 2\r\n                let y = data1.cursor.y + 9\r\n                doc.setFontSize(8)\r\n                doc.setFont(undefined, 'bold')\r\n                doc.text('GSTIN: ', x, y)\r\n            };\r\n            if (rowIdx === 4 && colIdx === 0) {\r\n\r\n                let x = data1.cursor.x + 2\r\n                let y = data1.cursor.y + 9\r\n                doc.setFontSize(8)\r\n                doc.setFont(undefined, 'bold')\r\n                doc.text('FSSAI No: ', x, y)\r\n            };\r\n            if (rowIdx === 5 && colIdx === 0) {\r\n\r\n                let x = data1.cursor.x + 2\r\n                let y = data1.cursor.y + 9\r\n                doc.setFontSize(8)\r\n                doc.setFont(undefined, 'bold')\r\n                doc.text('Mobile No: ', x, y)\r\n            };\r\n\r\n        },\r\n        margin: {\r\n            top: 45, left: 220, right: 35,\r\n        },\r\n        showHead: 'always',\r\n        theme: 'plain',\r\n        styles: {\r\n            overflow: 'linebreak',\r\n            fontSize: 8,\r\n            height: 0,\r\n        },\r\n        bodyStyles: {\r\n            columnWidth: 'wrap',\r\n            textColor: [30, 30, 30],\r\n            cellPadding: 2,\r\n            fontSize: 8,\r\n            fontStyle: 'normal',\r\n            lineColor: [0, 0, 0]\r\n        },\r\n        columnStyles: {\r\n            0: {\r\n                valign: \"top\",\r\n                columnWidth: 188,\r\n                halign: 'lfet',\r\n            },\r\n        },\r\n        tableLineColor: \"black\",\r\n        startY: data.isQR ? 120 : 80,\r\n    };\r\n\r\n    var DetailsOfTransportStyle = {\r\n        didDrawCell: (data1) => {\r\n\r\n            const rowIdx = data1.row.index;\r\n            const colIdx = data1.column.index;\r\n            if (rowIdx === 0 && colIdx === 0) {\r\n                let x = data1.cursor.x + 2\r\n                let y = data1.cursor.y + 9\r\n                doc.setFontSize(8)\r\n                doc.setFont(undefined, 'bold')\r\n                doc.text('PO No: ', x, y)\r\n            };\r\n            if (rowIdx === 1 && colIdx === 0) {\r\n\r\n                let x = data1.cursor.x + 2\r\n                let y = data1.cursor.y + 9\r\n                doc.setFontSize(8)\r\n                doc.setFont(undefined, 'bold')\r\n                doc.text('Driver Name: ', x, y)\r\n            };\r\n            if (rowIdx === 2 && colIdx === 0) {\r\n\r\n                let x = data1.cursor.x + 2\r\n                let y = data1.cursor.y + 9\r\n                doc.setFontSize(8)\r\n                doc.setFont(undefined, 'bold')\r\n                doc.text('Vehicle No: ', x, y)\r\n            };\r\n            if (rowIdx === 3 && colIdx === 0) {\r\n\r\n                let x = data1.cursor.x + 2\r\n                let y = data1.cursor.y + 9\r\n                doc.setFontSize(8)\r\n                doc.setFont(undefined, 'bold')\r\n                doc.text('E-way Bill: ', x, y)\r\n            };\r\n            if (rowIdx === 4 && colIdx === 0) {\r\n\r\n                let x = data1.cursor.x + 2\r\n                let y = data1.cursor.y + 9\r\n                doc.setFontSize(8)\r\n                doc.setFont(undefined, 'bold')\r\n                doc.text('ACK No: ', x, y)\r\n            };\r\n\r\n\r\n        },\r\n        margin: {\r\n            top: 45, left: 408, right: 35,\r\n        },\r\n        showHead: 'always',\r\n        theme: 'plain',\r\n        styles: {\r\n            overflow: 'linebreak',\r\n            fontSize: 8,\r\n            height: 0,\r\n        },\r\n        bodyStyles: {\r\n            columnWidth: 'wrap',\r\n            textColor: [30, 30, 30],\r\n            cellPadding: 2,\r\n            fontSize: 8,\r\n            fontStyle: 'normal',\r\n            lineColor: [0, 0, 0]\r\n        },\r\n        columnStyles: {\r\n            0: {\r\n                valign: \"top\",\r\n                columnWidth: 162,\r\n                halign: 'lfet',\r\n            },\r\n\r\n        },\r\n        tableLineColor: \"black\",\r\n\r\n        startY: data.isQR ? 120 : 80,\r\n\r\n    };\r\n\r\n    const priLength = () => {\r\n        let final_y = doc.previousAutoTable.finalY\r\n        if (final_y > initial_y) {\r\n            initial_y = final_y\r\n        }\r\n\r\n    }\r\n\r\n    let IRNNumberDetails = {\r\n        margin: {\r\n            top: 45, left: 408, right: 35,\r\n        },\r\n        showHead: 'always',\r\n        theme: 'grid',\r\n        styles: {\r\n            overflow: 'linebreak',\r\n            fontSize: 8,\r\n            height: 0,\r\n        },\r\n        bodyStyles: {\r\n            columnWidth: 'wrap',\r\n            textColor: [30, 30, 30],\r\n            cellPadding: 2,\r\n            fontSize: 8,\r\n            fontStyle: 'bold',\r\n            lineColor: [0, 0, 0]\r\n        },\r\n        columnStyles: {\r\n            0: {\r\n                valign: \"top\",\r\n                columnWidth: 162,\r\n                halign: 'lfet',\r\n            },\r\n\r\n        },\r\n        tableLineColor: \"black\",\r\n\r\n        startY: 50,\r\n\r\n    };\r\n    if (data.isQR) {\r\n        doc.autoTable(table.INR_NO, table.IRNNumberRow(data), IRNNumberDetails);\r\n    }\r\n\r\n    doc.autoTable(table.BilledBy, table.BilledByRow(data), BilledByStyle);\r\n    priLength()\r\n\r\n    doc.autoTable(table.BilledTo, table.BilledToRow(data), BilledToStyle);\r\n    priLength()\r\n\r\n    doc.autoTable(table.DetailsOfTransport, table.DetailsOfTransportRow(data), DetailsOfTransportStyle);\r\n    priLength()\r\n}\r\n\r\n\r\nexport const reportHeder2 = (doc, data) => {\r\n    doc.setFont('Tahoma')\r\n    doc.setFontSize(10)\r\n    doc.setFont(undefined, 'bold')\r\n    //     doc.text(`GSTIN:${data.PartyGSTIN}`, 38, 90)\r\n    //     doc.text(`GSTIN:${data.CustomerGSTIN}`, 238, 90)\r\n}\r\n\r\nexport const reportHeder3 = (doc, data) => {\r\n    var date = date_dmy_func(data.InvoiceDate)\r\n\r\n    doc.setFont('Tahoma')\r\n    doc.setFontSize(10)\r\n    doc.line(570, 33, 408, 33) //horizontal line 1 billby upper\r\n    // doc.line(570, 49, 408, 49) //horizontal line 1 billby upper\r\n\r\n    doc.setFont(undefined, 'bold')\r\n    doc.text(`Invoice No:   ${data.FullInvoiceNumber}`, 415, 27) //Invoice Id\r\n    doc.text(`Invoice Date: ${date}`, 415, 43) //Invoice date\r\n    // doc.text(`PONumber: ${data.InvoicesReferences[0].FullOrderNumber}`, 415, 60) //Invoice date\r\n\r\n\r\n\r\n}\r\n// original\r\n\r\nexport const reportFooter = (doc, data) => {\r\n\r\n    let stringNumber = toWords(Number(data.GrandTotal))\r\n    // doc.addImage(upi_qr_code, 'PNG', 359, 747, 75, 65)\r\n    doc.setDrawColor(0, 0, 0);\r\n    doc.line(570, 730, 30, 730);//horizontal line Footer 1\r\n    // doc.line(435, 745, 30, 745);//horizontal line Footer 2\r\n    // doc.line(360, 775, 30, 775);//horizontal line Footer 3\r\n    // doc.line(360, 795, 30, 795);//horizontal line Footer 3\r\n\r\n    doc.line(435, 730, 435, 815);//vertical right Sub Total\r\n    doc.line(340, 730, 340, 815);//vertical right Qr Code (1)\r\n    doc.setFont('Tahoma')\r\n\r\n    const a = data.InvoiceItems.map((data) => ({\r\n\r\n        CGST: Number(data.CGST),\r\n        SGST: Number(data.SGST),\r\n        BasicAmount: Number(data.BasicAmount),\r\n        Discount: Number(data.DiscountAmount),\r\n        IGST: Number(data.IGST)\r\n    }));\r\n    var totalCGST = 0;\r\n    var totalSGST = 0;\r\n    var TotalBasicAmount = 0;\r\n    var TotalDiscount = 0\r\n    var totalICGST = 0\r\n    a.forEach(arg => {\r\n        totalCGST += arg.CGST;\r\n        totalSGST += arg.SGST;\r\n        TotalBasicAmount += arg.BasicAmount;\r\n        TotalDiscount += arg.Discount;\r\n        totalICGST += arg.IGST\r\n\r\n    });\r\n    const TotalGST = totalCGST + totalSGST;\r\n    doc.setFontSize(8)\r\n\r\n\r\n\r\n    const isIGST = compareGSTINState(data.CustomerGSTIN, data.PartyGSTIN)\r\n    if (isIGST) {\r\n\r\n        doc.text(`Total Basic:`, 440, 748,)\r\n        doc.text(`${numberWithCommas(Number(TotalBasicAmount).toFixed(2))}`, 567, 748, 'right')\r\n\r\n        doc.text(`Total Disc:`, 440, 758,)\r\n        doc.text(` ${numberWithCommas(Number(TotalDiscount).toFixed(2))}`, 567, 758, 'right')\r\n\r\n        doc.text(`Total IGST:`, 440, 768,)\r\n        doc.text(`${numberWithCommas(Number(totalICGST).toFixed(2))}`, 567, 768, 'right')\r\n\r\n        doc.text(`Total GST:`, 440, 778,)\r\n        doc.text(` ${numberWithCommas(Number(TotalGST).toFixed(2))}`, 567, 778, 'right')\r\n\r\n        doc.text(`Round Off:`, 440, 788,)\r\n        doc.text(` ${numberWithCommas(Number(data.RoundOffAmount).toFixed(2))}`, 567, 788, 'right')\r\n\r\n        doc.text(`TCS Amount:`, 440, 798,)\r\n        doc.text(` ${numberWithCommas(Number(data.TCSAmount).toFixed(2))}`, 567, 798, 'right')\r\n\r\n\r\n\r\n    } else {\r\n\r\n        doc.text(`Total Basic:`, 440, 738,)\r\n        doc.text(`${numberWithCommas(Number(TotalBasicAmount).toFixed(2))}`, 567, 738, 'right')\r\n\r\n        doc.text(`Total Disc:`, 440, 748,)\r\n        doc.text(` ${numberWithCommas(Number(TotalDiscount).toFixed(2))}`, 567, 748, 'right')\r\n\r\n        doc.text(`Total CGST:`, 440, 758)\r\n        doc.text(`${numberWithCommas(Number(totalCGST).toFixed(2))}`, 567, 758, 'right')\r\n\r\n        doc.text(`Total SGST:`, 440, 768,)\r\n        doc.text(`${numberWithCommas(Number(totalSGST).toFixed(2))}`, 567, 768, 'right')\r\n\r\n        doc.text(`Total GST:`, 440, 778,)\r\n        doc.text(` ${numberWithCommas(Number(TotalGST).toFixed(2))}`, 567, 778, 'right')\r\n\r\n        doc.text(`Round Off:`, 440, 788,)\r\n        doc.text(` ${numberWithCommas(Number(data.RoundOffAmount).toFixed(2))}`, 567, 788, 'right')\r\n\r\n        doc.text(`TCS Amount:`, 440, 798,)\r\n        doc.text(` ${numberWithCommas(Number(data.TCSAmount).toFixed(2))}`, 567, 798, 'right')\r\n\r\n\r\n        let DetailsOfRupeesStyle = {\r\n\r\n            didDrawCell: (data1) => {\r\n                const rowIdx = data1.row.index;\r\n                const colIdx = data1.column.index;\r\n                if (rowIdx === 0 && colIdx === 0) {\r\n                    let x = data1.cursor.x + 2\r\n                    let y = data1.cursor.y + 8\r\n                    doc.setFontSize(8)\r\n                    doc.setFont(undefined, 'bold')\r\n                    doc.text('Rupees: ', x, y)\r\n                }\r\n            },\r\n\r\n            margin: {\r\n                top: 0, left: 30,\r\n            },\r\n            showHead: 'always',\r\n            theme: 'grid',\r\n            styles: {\r\n                overflow: 'linebreak',\r\n                fontSize: 8,\r\n                height: 0,\r\n            },\r\n            bodyStyles: {\r\n                columnWidth: 'wrap',\r\n                textColor: \"black\",\r\n                cellPadding: 1,\r\n                fontSize: 8,\r\n                lineColor: \"black\"\r\n            },\r\n            columnStyles: {\r\n                0: {\r\n                    valign: \"top\",\r\n                    columnWidth: 310,\r\n                    halign: 'lfet',\r\n                }\r\n\r\n            },\r\n            tableLineColor: \"black\",\r\n            startY: 730,\r\n\r\n        };\r\n\r\n        doc.autoTable(table.Ruppescolumn, table.RupeesRow(data), DetailsOfRupeesStyle,);\r\n\r\n        var DetailsOfBankStyle = {\r\n            didParseCell: (data1) => {\r\n                if (data.BankData.length > 0) {\r\n                    let BankData = data.BankData[0]\r\n                    if (data1.row.cells[0].raw === `Bank Name :${BankData.BankName}`) {\r\n                        data1.row.cells[0].colSpan = 3\r\n                    }\r\n                }\r\n            },\r\n\r\n\r\n            margin: {\r\n                top: 0, left: 30, right: 35,\r\n            },\r\n            showHead: 'always',\r\n            theme: 'grid',\r\n            headerStyles: { cellPadding: 1, },\r\n            styles: {\r\n                overflow: 'linebreak',\r\n                fontSize: 7,\r\n                height: 0,\r\n            },\r\n            bodyStyles: {\r\n                columnWidth: 'wrap',\r\n                textColor: [30, 30, 30],\r\n                cellPadding: 1,\r\n                fontSize: 7,\r\n                lineColor: [0, 0, 0]\r\n            },\r\n            columnStyles: {\r\n                0: {\r\n                    valign: \"top\",\r\n                    columnWidth: (data.BankData.length > 0) ? 90 : 30,\r\n                    halign: 'lfet',\r\n                },\r\n                1: {\r\n                    valign: \"top\",\r\n                    columnWidth: (data.BankData.length > 0) ? 90 : 300,\r\n                    halign: 'lfet',\r\n                },\r\n                2: {\r\n                    valign: \"top\",\r\n                    columnWidth: 130,\r\n                    halign: 'lfet',\r\n                },\r\n\r\n            },\r\n            tableLineColor: \"black\",\r\n\r\n            startY: doc.previousAutoTable.finalY,\r\n\r\n        };\r\n\r\n        doc.autoTable(table.Bankcolumn, table.BankRow(data), DetailsOfBankStyle,);\r\n\r\n        doc.setFontSize(9)\r\n        doc.setFont(undefined, 'Normal')\r\n\r\n        doc.text(`I/we hearby certify that food/foods mentioned in this invoice is/are warranted to be\r\n     of the nature and quantity which it/these purports to be `, 34, doc.previousAutoTable.finalY + (9),)\r\n        doc.line(340, doc.previousAutoTable.finalY + (24), 30, doc.previousAutoTable.finalY + (24)); //horizontal line (1)\r\n\r\n        doc.text(`Signature `, 280, 810,)\r\n        doc.text(`Prepared by :${data.PartyName} `, 35, 810,)\r\n\r\n    }\r\n\r\n\r\n    doc.setFont(undefined, 'Normal')\r\n    doc.setFontSize(10)\r\n    doc.setFont(undefined, 'bold')\r\n    doc.text(`Total Amount :`, 440, 812,)\r\n    const GrandTotal = Number(data.GrandTotal)\r\n\r\n    const Total = numberWithCommas((GrandTotal).toFixed(2))\r\n    doc.text(`${Total}`, 567, 812, 'right')\r\n    // doc.setFont(undefined, 'Normal')\r\n    // doc.setFont('Tahoma')\r\n    // doc.setFontSize(9)\r\n    // doc.setFont('Tahoma')\r\n    // doc.setFontSize(8)\r\n    // doc.setFont(\"Arimo\");\r\n    // doc.text(`I/we hearby certify that food/foods mentioned in this invoice is/are warranted to be\r\n    //      of the nature and quantity which it/these purports to be `, 34, 782)\r\n    // doc.setFontSize(10)\r\n    // doc.text(`Signature `, 280, 810,)\r\n    // doc.text(`Prepared by :${data.PartyName} `, 35, 810,)\r\n    // doc.setFontSize(8)\r\n\r\n    // doc.setFont(undefined, 'bold')\r\n    // doc.text(`Rupees:`, 33, 740,)\r\n    // doc.addFont(\"Arial\", 'Normal')\r\n    // doc.text(`${stringNumber}`, 65, 740,)\r\n\r\n}\r\n\r\n\r\n\r\nexport const tableBody = (doc, data) => {\r\n    var options = {\r\n        didParseCell: (data1) => {\r\n            if (data1.row.cells[9].raw === \"isaddition\") {\r\n                data1.row.cells[1].colSpan = 5\r\n                // data1.row.cells[3].colSpan = 5\r\n                data1.row.cells[8].colSpan = 2\r\n                data1.row.cells[10].colSpan = 2\r\n\r\n                data1.row.cells[1].styles.fontSize = 7\r\n                data1.row.cells[1].styles.halign = \"right\"    // Alignment for  cgst and Total in spanrow\r\n\r\n                data1.row.cells[8].styles.fontSize = 7\r\n                data1.row.cells[7].styles.fontSize = 7\r\n                data1.row.cells[10].styles.fontSize = 7\r\n                data1.row.cells[12].styles.fontSize = 7\r\n                data1.row.cells[1].styles.fontStyle = \"bold\"\r\n                data1.row.cells[8].styles.fontStyle = \"bold\"\r\n                data1.row.cells[7].styles.fontStyle = \"bold\"\r\n                data1.row.cells[10].styles.fontStyle = \"bold\"\r\n                data1.row.cells[12].styles.fontStyle = \"bold\"\r\n            }\r\n\r\n\r\n            if (data1.row.cells[1].raw === \"HSN Item Name\") {\r\n\r\n                let TotalBox = 0;\r\n                data.InvoiceItems.forEach((element, key) => {\r\n                    if (element.PrimaryUnitName === \"Box\") {\r\n                        TotalBox = Number(TotalBox) + Number(element.Quantity)\r\n                    }\r\n                })\r\n                if (TotalBox === 0) {\r\n                    data1.row.cells[1].text[0] = ` HSN Item Name (${data.TotalItemlength})`\r\n                } else {\r\n                    data1.row.cells[1].text[0] = ` HSN Item Name (${data.TotalItemlength})  (${TotalBox} Box)`\r\n                }\r\n\r\n                data1.row.cells[8].colSpan = 2\r\n                data1.row.cells[10].colSpan = 2\r\n            }\r\n            if (data1.row.cells[1].raw === \"Batch\") {\r\n                data1.row.cells[0].colSpan = 12\r\n\r\n            }\r\n        },\r\n\r\n        didDrawCell: (data1) => {\r\n            const rowIdx = data1.row.index;\r\n            const colIdx = data1.column.index;\r\n            if (rowIdx === 0 && colIdx === 8) {\r\n                if (data1.row.cells[8].raw === \"          CGST           %        Amount\") {\r\n\r\n                    const cellWidth = data1.cell.width;\r\n                    const cellHeight = data1.cell.height;\r\n                    const startX = data1.cell.x;\r\n                    const startY = data1.cell.y + cellHeight / 2;\r\n                    const endX = startX + cellWidth;\r\n                    const endY = startY;\r\n\r\n                    const startXVertical = data1.cell.x + cellWidth / 2;  // X-coordinate at the middle of the cell\r\n                    const startY1vertical = data1.cell.y + 9;\r\n                    const endYvertical = startY + cellHeight;\r\n\r\n                    doc.line(startXVertical - 5, startY1vertical + 1, startXVertical - 5, endYvertical + 1);  // Draw a vertical line\r\n                    doc.line(startX, startY, endX, endY);\r\n                }\r\n            }\r\n            if (rowIdx === 0 && colIdx === 10) {\r\n                if (data1.row.cells[10].raw === \"          SGST           %        Amount\") {\r\n\r\n                    const cellWidth = data1.cell.width;\r\n                    const cellHeight = data1.cell.height;\r\n                    const startX = data1.cell.x;\r\n                    const startY = data1.cell.y + cellHeight / 2;\r\n                    const endX = startX + cellWidth;\r\n                    const endY = startY;\r\n\r\n                    const startXVertical = data1.cell.x + cellWidth / 2;  // X-coordinate at the middle of the cell\r\n                    const startY1vertical = data1.cell.y + 9;\r\n                    const endYvertical = startY + cellHeight;\r\n\r\n                    doc.line(startXVertical - 5, startY1vertical + 1, startXVertical - 5, endYvertical + 1); // Draw a vertical line\r\n                    doc.line(startX, startY, endX, endY);\r\n                }\r\n            }\r\n\r\n        },\r\n        margin: {\r\n            left: 30, right: 25, top: 63,\r\n        },\r\n        theme: 'grid',\r\n        headerStyles: {\r\n            cellPadding: 2,\r\n            lineWidth: 0.3,\r\n            valign: 'top',\r\n            fontStyle: 'bold',\r\n            halign: 'center',    //'center' or 'right'\r\n            fillColor: \"white\",\r\n            textColor: \"black\", //Black     \r\n            fontSize: 7,\r\n            rowHeight: 10,\r\n            lineColor: \"black\"\r\n        },\r\n        bodyStyles: {\r\n            textColor: [30, 30, 30],\r\n            cellPadding: 3,\r\n            fontSize: 7,\r\n            columnWidth: 'wrap',\r\n            lineColor: [0, 0, 0],\r\n        },\r\n        columnStyles: {\r\n            0: {\r\n                valign: \"top\",\r\n                fontSize: 6,\r\n                columnWidth: 15,\r\n            },\r\n            1: {\r\n                valign: \"top\",\r\n                columnWidth: 137,\r\n            },\r\n            2: {\r\n                columnWidth: 50,\r\n                halign: 'right',\r\n            },\r\n            3: {\r\n                columnWidth: 28,\r\n                halign: 'right',\r\n            },\r\n            4: {\r\n                columnWidth: 33,\r\n                halign: 'right',\r\n            },\r\n            5: {\r\n                columnWidth: 35,\r\n                halign: 'right',\r\n            },\r\n            6: {\r\n                columnWidth: 35,\r\n                halign: 'right',\r\n            },\r\n\r\n            7: {\r\n                columnWidth: 45,\r\n                halign: 'right',\r\n            },\r\n            8: {\r\n                columnWidth: 24,\r\n                halign: 'right',\r\n            },\r\n            9: {\r\n                columnWidth: 34,\r\n                halign: 'right',\r\n            },\r\n            10: {\r\n                columnWidth: 24,\r\n                halign: 'right',\r\n            },\r\n            11: {\r\n                columnWidth: 34,\r\n                halign: 'right',\r\n            },\r\n            12: {\r\n                columnWidth: 46,\r\n                halign: 'right',\r\n            },\r\n        },\r\n        tableLineColor: \"black\",\r\n        startY: initial_y,\r\n    };\r\n\r\n    doc.line(408, data.isQR ? initial_y : initial_y, 408, 16);//vertical line header section billby \r\n    doc.line(220, data.isQR ? initial_y : initial_y, 220, data.isQR ? 103 : 63);//vertical  line header section billto\r\n\r\n    doc.autoTable(table.columns, table.Rows(data), options,);\r\n    const optionsTable4 = {\r\n        margin: {\r\n            left: 30, right: 30, bottom: 140\r\n        },\r\n    };\r\n    doc.autoTable(optionsTable4);\r\n\r\n}\r\n\r\nexport const tableBodyWithIGST = (doc, data) => {\r\n    var options = {\r\n\r\n        didParseCell: (data1) => {\r\n\r\n            if (data1.row.cells[9].raw === \"isaddition\") {\r\n                data1.row.cells[1].colSpan = 5\r\n                // data1.row.cells[3].colSpan = 5\r\n                data1.row.cells[8].colSpan = 2\r\n                // data1.row.cells[10].colSpan = 2\r\n\r\n                data1.row.cells[1].styles.fontSize = 7\r\n                data1.row.cells[1].styles.halign = \"right\"    // Alignment for  cgst and Total in spanrow\r\n\r\n                data1.row.cells[8].styles.fontSize = 7\r\n                data1.row.cells[7].styles.fontSize = 7\r\n                data1.row.cells[10].styles.fontSize = 7\r\n                // data1.row.cells[12].styles.fontSize = 7\r\n                data1.row.cells[1].styles.fontStyle = \"bold\"\r\n                data1.row.cells[8].styles.fontStyle = \"bold\"\r\n                data1.row.cells[7].styles.fontStyle = \"bold\"\r\n                data1.row.cells[10].styles.fontStyle = \"bold\"\r\n                // data1.row.cells[12].styles.fontStyle = \"bold\"\r\n            }\r\n\r\n            if (data1.row.cells[1].raw === \"HSN Item Name\") {\r\n                let TotalBox = 0;\r\n                data.InvoiceItems.forEach((element, key) => {\r\n                    if (element.PrimaryUnitName === \"Box\") {\r\n                        TotalBox = Number(TotalBox) + Number(element.Quantity)\r\n                    }\r\n                })\r\n\r\n                data1.row.cells[1].text[0] = ` HSN Item Name (${data.TotalItemlength})  (${TotalBox} Box)`\r\n                data1.row.cells[8].colSpan = 2\r\n            }\r\n\r\n            if (data1.row.cells[1].raw === \"Batch\") {\r\n                data1.row.cells[0].colSpan = 12\r\n\r\n            }\r\n        },\r\n\r\n\r\n        margin: {\r\n            left: 30, right: 25, top: 55\r\n        },\r\n        theme: 'grid',\r\n        headerStyles: {\r\n            cellPadding: 1,\r\n            lineWidth: 0.3,\r\n            valign: 'top',\r\n            fontStyle: 'bold',\r\n            halign: 'center',    //'center' or 'right'\r\n            fillColor: \"white\",\r\n            textColor: [0, 0, 0], //Black     \r\n            fontSize: 7,\r\n            rowHeight: 10,\r\n            lineColor: [0, 0, 0]\r\n        },\r\n        bodyStyles: {\r\n            textColor: [30, 30, 30],\r\n            cellPadding: 3,\r\n            fontSize: 7,\r\n            columnWidth: 'wrap',\r\n            lineColor: [0, 0, 0],\r\n        },\r\n        columnStyles: {\r\n            0: {\r\n                valign: \"top\",\r\n                fontSize: 6,\r\n                columnWidth: 15,\r\n            },\r\n            1: {\r\n                valign: \"top\",\r\n                columnWidth: 175,\r\n            },\r\n            2: {\r\n                columnWidth: 50,\r\n                halign: 'right',\r\n            },\r\n            3: {\r\n                columnWidth: 28,\r\n                halign: 'right',\r\n            },\r\n            4: {\r\n                columnWidth: 33,\r\n                halign: 'right',\r\n            },\r\n            5: {\r\n                columnWidth: 35,\r\n                halign: 'right',\r\n            },\r\n            6: {\r\n                columnWidth: 42,\r\n                halign: 'right',\r\n            },\r\n\r\n            7: {\r\n                columnWidth: 50,\r\n                halign: 'right',\r\n            },\r\n            8: {\r\n                columnWidth: 28,\r\n                halign: 'right',\r\n            },\r\n            9: {\r\n                columnWidth: 34,\r\n                halign: 'right',\r\n\r\n            },\r\n            10: {\r\n                columnWidth: 50,\r\n                halign: 'right',\r\n            },\r\n\r\n        },\r\n        tableLineColor: \"black\",\r\n        startY: initial_y,\r\n    };\r\n    doc.line(408, data.isQR ? initial_y : initial_y, 408, 16);//vertical line header section billby \r\n    doc.line(220, data.isQR ? initial_y : initial_y, 220, data.isQR ? 103 : 63);//vertical  line header section billto\r\n\r\n    doc.autoTable(table.columnsWithIGST, table.RowsWithIGST(data), options,);\r\n    const optionsTable4 = {\r\n        margin: {\r\n            left: 30, right: 30, bottom: 110\r\n        },\r\n    };\r\n\r\n    doc.autoTable(optionsTable4);\r\n}\r\n\r\n\r\nexport const pageFooter = (doc, data) => {\r\n\r\n\r\n    const pageCount = doc.internal.getNumberOfPages()\r\n    doc.setFont('helvetica', 'Normal')\r\n    doc.setFontSize(8)\r\n    for (var i = 1; i <= pageCount; i++) {\r\n        doc.setPage(i)\r\n        pageHeder(doc, data)\r\n        pageBorder(doc)\r\n        reportHeder3(doc, data)\r\n        doc.setFont('helvetica', 'Normal')\r\n        doc.text('Page ' + String(i) + ' of ' + String(pageCount), 520, 828,)\r\n\r\n        doc.text('Print Date :' + String(currentDate_dmy) + ' Time ' + String(CurrentTime()), 30, 828,)\r\n        console.log(\"aaa\", doc.internal.pageSize.height)\r\n    }\r\n}\r\n\r\n// original","D:\\Rohit\\Git projects\\Manthan\\src\\Reports\\OrderReport\\Page.js",["3384"],"import jsPDF from \"jspdf\";\r\nimport \"jspdf-autotable\";\r\nimport * as style from './ReportStyle'\r\nimport { Data } from \"./demo\";\r\nimport { compareGSTINState } from \"../../components/Common/CommonFunction\";\r\n\r\n\r\nvar pageHeder = function (doc, data) {\r\n    style.pageBorder(doc, data);\r\n    style.pageHeder(doc, data);\r\n    style.reportHeder1(doc, data);\r\n    style.reportHeder2(doc, data);\r\n    style.reportHeder3(doc, data);\r\n};\r\n\r\nfunction reportBody(doc, data) {\r\n\r\n    const isIGST = compareGSTINState(data.CustomerGSTIN, data.SupplierGSTIN)\r\n    if (isIGST) {\r\n        style.tableBodyWithIGST(doc, data);\r\n    } else {\r\n        style.tableBody(doc, data);\r\n    }\r\n}\r\n\r\nfunction pageFooter(doc, data) {\r\n    style.pageFooter(doc, data);\r\n    style.reportFooter(doc, data);\r\n}\r\n\r\nconst ordeRreport = (data) => {\r\n    var doc = new jsPDF('p', 'pt', 'a4');\r\n    pageHeder(doc, data);\r\n    reportBody(doc, data);\r\n    pageFooter(doc, data);\r\n    doc.setProperties({\r\n        title: `POReport/${data.OrderDate}-${data.CustomerName} `\r\n    });\r\n\r\n    function generateSaveAndOpenPDFReport() {\r\n        const pdfUrl = URL.createObjectURL(doc.output('blob'));\r\n        window.open(pdfUrl);\r\n    }\r\n    generateSaveAndOpenPDFReport();\r\n\r\n}\r\nexport default ordeRreport;","D:\\Rohit\\Git projects\\Manthan\\src\\Reports\\InvioceReport\\TableData.js",["3385","3386","3387","3388"],"import { numberWithCommas, toWords } from \"../Report_common_function\";\r\n\r\n\r\nexport const columns = [\r\n    \"SN\",\r\n    \"HSN Item Name\",\r\n    \"Quantity (UOM)\",\r\n    \"MRP\",\r\n    \"Rate\",\r\n    \"Discount\",\r\n    \"Discount Amount \",\r\n    \"Taxable Amount\",\r\n    \"          CGST           %        Amount\",\r\n    \"CGST Amount\",\r\n    \"          SGST           %        Amount\",\r\n    \"SGST Amount\",\r\n    \"Amount\",\r\n];\r\nexport const columnsWithIGST = [\r\n    \"SN\",\r\n    \"HSN Item Name\",\r\n    \"Quantity (UOM)\",\r\n    \"MRP\",\r\n    \"Rate\",\r\n    \"Discount\",\r\n    \"Discount Amount \",\r\n    \"Taxable Amount\",\r\n    \"          IGST           %        Amount\",\r\n    \"IGST Amount\",\r\n    \"Amount\",\r\n];\r\n\r\n\r\n\r\nexport const Footercolumn = [\r\n    \"\",\r\n]\r\nexport const INR_NO = [\r\n    \"INR_NO\",\r\n]\r\nexport const BilledBy = [\r\n    \"Billed by\",\r\n]\r\nexport const BilledTo = [\r\n    \"Billed by\",\r\n]\r\nexport const DetailsOfTransport = [\r\n    \"Billed by\",\r\n]\r\n\r\nexport const Ruppescolumn = [\r\n    \"\",\r\n]\r\n\r\nexport const Bankcolumn = [\r\n    \"\",\r\n    \"\",\r\n    \"\",\r\n]\r\n\r\nexport const Rows = (data) => {\r\n    const { InvoiceItems = [] } = data\r\n    InvoiceItems.sort((firstItem, secondItem) => firstItem.GSTPercentage - secondItem.GSTPercentage);\r\n    const returnArr = [];\r\n    let Gst = 0\r\n    let totalBasicAmount = 0\r\n    let totalCGst = 0\r\n    let totalSGst = 0\r\n    let totalAmount = 0\r\n    let totalQuantity = 0\r\n    let SrNO = 1\r\n    let TotalGst = 0\r\n    let GSTPercentage = 0\r\n\r\n    const groupedItems = InvoiceItems.reduce((accumulator, currentItem) => {\r\n\r\n\r\n        const { HSNCode, ItemName, MRP, Rate, Discount, CGST, SGST, Amount, DiscountAmount, BasicAmount, Quantity, UnitName, MRPValue, CGSTPercentage, SGSTPercentage, GSTPercentage, BatchCode, BatchDate, DiscountType, PrimaryUnitName } = currentItem;\r\n        let PcsinNumber = \"\"\r\n        let PcsinNumberUnit = \"\"\r\n        const pattern = /\\((.*?)\\)/;\r\n\r\n        if (currentItem.UnitName !== \"\") {\r\n            const matchFound = currentItem.UnitName.match(pattern);\r\n            const extractedText = matchFound[1];\r\n            console.log(extractedText); // Output: \"19.0 No\"\r\n            const match = extractedText.split(\" \")\r\n            PcsinNumber = match[0];\r\n            PcsinNumberUnit = match[1];\r\n\r\n        }\r\n        const key = ItemName + '_' + MRP;\r\n        if (accumulator[key]) {\r\n            accumulator[key].PcsinNumber += Number(PcsinNumber);\r\n            accumulator[key].DiscountAmount += Number(DiscountAmount);\r\n            accumulator[key].Quantity += Number(Quantity);\r\n            accumulator[key].BasicAmount += Number(BasicAmount);\r\n            accumulator[key].CGST += Number(CGST);\r\n            accumulator[key].SGST += Number(SGST);\r\n            accumulator[key].Amount += Number(Amount);\r\n            accumulator[key].BatchCode += BatchCode;\r\n            accumulator[key].BatchDate += BatchDate;\r\n            accumulator[key].quantityString += ` ,  ${BatchCode} ${BatchDate} `;\r\n        } else {\r\n            accumulator[key] = {\r\n                ItemName, HSNCode,\r\n                MRPValue, DiscountType, Rate, Discount, PcsinNumberUnit: PcsinNumberUnit, PcsinNumber: Number(PcsinNumber), CGST: Number(CGST), SGST: Number(SGST), Amount: Number(Amount), DiscountAmount: Number(DiscountAmount), BasicAmount: Number(BasicAmount), Quantity: Number(Quantity), UnitName, CGSTPercentage, SGSTPercentage, GSTPercentage, BatchDate, BatchCode: BatchCode, BatchDate: BatchDate, quantityString: `  ${BatchCode}  ${BatchDate}`, PrimaryUnitName\r\n            };\r\n        }\r\n        return accumulator;\r\n    }, {});\r\n\r\n    const TotalItemlength = Object.values(groupedItems).length;\r\n    data[\"TotalItemlength\"] = TotalItemlength;\r\n\r\n    Object.values(groupedItems).forEach((element, key) => {\r\n\r\n        let HSNcodes = \"\"\r\n        if (element.HSNCode) {\r\n\r\n            if (data.SettingData.HSNCodeDigit === \"1\") {\r\n                HSNcodes = element.HSNCode.slice(0, 4);\r\n            }\r\n            if (data.SettingData.HSNCodeDigit === \"2\") {\r\n                HSNcodes = element.HSNCode.slice(0, 6);\r\n            }\r\n            if (data.SettingData.HSNCodeDigit === \"3\") {\r\n                HSNcodes = element.HSNCode.slice(0, 8);\r\n            }\r\n        }\r\n        const tableitemRow = [\r\n            SrNO++,\r\n            `${HSNcodes} ${element.ItemName}`,\r\n            element.UnitName === \"\" ? `${parseFloat(element.Quantity)} ${element.PrimaryUnitName}   ${element.UnitName}` : `${parseFloat(element.Quantity)} ${element.PrimaryUnitName}(${element.PcsinNumber} ${element.PcsinNumberUnit})`,\r\n            `${numberWithCommas(Number(element.MRPValue).toFixed(2))}`,\r\n            `${numberWithCommas(Number(element.Rate).toFixed(2))}`,\r\n            `${parseFloat(element.Discount)} ${element.DiscountType === \"1\" ? \"Rs\" : \"%\"}`,\r\n            `${numberWithCommas(Number(element.DiscountAmount).toFixed(2))}`,\r\n            `${numberWithCommas(Number(element.BasicAmount).toFixed(2))}`,\r\n            `${Number(element.CGSTPercentage).toFixed(1)}%`,\r\n            `${numberWithCommas(Number(element.CGST).toFixed(2))}`,\r\n            `${Number(element.SGSTPercentage).toFixed(1)}%`,\r\n            `${numberWithCommas(Number(element.SGST).toFixed(2))}`,\r\n            `${numberWithCommas(Number(element.Amount).toFixed(2))}`,\r\n        ];\r\n\r\n        function totalLots() {\r\n            totalQuantity = Number(totalQuantity) + Number(element.Quantity)\r\n            totalCGst = Number(totalCGst) + Number(element.CGST)\r\n            totalSGst = Number(totalSGst) + Number(element.SGST)\r\n            totalAmount = Number(totalAmount) + Number(element.Amount)\r\n            totalBasicAmount = Number(totalBasicAmount) + Number(element.BasicAmount)\r\n            TotalGst = totalCGst + totalSGst;\r\n            GSTPercentage = Number(element.CGSTPercentage) + Number(element.SGSTPercentage)\r\n            let cgst = data[\"tableTot\"].TotalCGst\r\n            return ({ TotalCGst: Number(totalCGst) + Number(cgst) })\r\n\r\n        };\r\n\r\n\r\n        function totalrow() {\r\n\r\n            return [\r\n                \"\",\r\n                ` GST ${(parseFloat(GSTPercentage))}%  Total:${numberWithCommas(Number(TotalGst).toFixed(2))} `,\r\n                \" \",\r\n                ``,\r\n                \"\",\r\n                \"\",\r\n                ``,\r\n                `${numberWithCommas(Number(totalBasicAmount).toFixed(2))}`,\r\n                `${numberWithCommas(Number(totalCGst).toFixed(2))}`,\r\n                \"isaddition\",\r\n                `${numberWithCommas(Number(totalSGst).toFixed(2))}`,\r\n                \"\",\r\n                `${numberWithCommas(Number(totalAmount).toFixed(2))}`,\r\n            ];\r\n        };\r\n        const BatchRow = [\r\n            `Batch:  ${element.quantityString} `,\r\n            `Batch`,\r\n            \" \",\r\n            ``,\r\n            \"\",\r\n            \"\",\r\n            \"\",\r\n            \"\",\r\n            ``,\r\n            \"\",\r\n            ``,\r\n            \"\",\r\n            ``,\r\n        ]\r\n\r\n        if (Gst === 0) { Gst = element.GSTPercentage };\r\n        let aa = { TotalCGst: 0, totalSGst: 0 }\r\n        if (data[\"tableTot\"] === undefined) { data[\"tableTot\"] = aa }\r\n\r\n        if ((Gst === element.GSTPercentage)) {\r\n            data[\"tableTot\"] = totalLots()\r\n            returnArr.push(tableitemRow)\r\n\r\n        }\r\n\r\n\r\n        else {\r\n            returnArr.push(totalrow());\r\n            returnArr.push(tableitemRow);\r\n            totalBasicAmount = 0\r\n            totalCGst = 0\r\n            totalSGst = 0\r\n            totalAmount = 0\r\n            totalQuantity = 0\r\n\r\n            data[\"tableTot\"] = totalLots()\r\n            Gst = element.GSTPercentage;\r\n        }\r\n        if (data.SettingData.ShowBatchNoOnInvoicePrint === \"1\") {\r\n            returnArr.push((BatchRow))\r\n        }\r\n\r\n        if (key === Object.keys(groupedItems).length - 1) {\r\n\r\n            returnArr.push(totalrow());\r\n        }\r\n    })\r\n    return returnArr;\r\n}\r\n\r\nexport const RowsWithIGST = (data) => {\r\n\r\n    const { InvoiceItems = [] } = data\r\n    InvoiceItems.sort((firstItem, secondItem) => firstItem.GSTPercentage - secondItem.GSTPercentage);\r\n    const returnArr = [];\r\n    let Gst = 0\r\n    let totalBasicAmount = 0\r\n    let totalIGst = 0\r\n    let totalAmount = 0\r\n    let totalQuantity = 0\r\n    let SrNO = 1\r\n    let GSTPercentage = 0\r\n\r\n    const groupedItems = InvoiceItems.reduce((accumulator, currentItem) => {\r\n\r\n        const { HSNCode, ItemName, IGSTPercentage, MRP, Rate, Discount, CGST, SGST, Amount, DiscountAmount, BasicAmount, Quantity, UnitName, MRPValue, CGSTPercentage, SGSTPercentage, GSTPercentage, BatchCode, BatchDate, DiscountType, PrimaryUnitName, IGST } = currentItem;\r\n        const key = ItemName + '_' + MRP;\r\n        if (accumulator[key]) {\r\n            accumulator[key].DiscountAmount += Number(DiscountAmount);\r\n            accumulator[key].Quantity += Number(Quantity);\r\n            accumulator[key].BasicAmount += Number(BasicAmount);\r\n            accumulator[key].CGST += Number(CGST);\r\n            accumulator[key].IGST += Number(IGST);\r\n            accumulator[key].SGST += Number(SGST);\r\n            accumulator[key].Amount += Number(Amount);\r\n            accumulator[key].BatchCode += BatchCode;\r\n            accumulator[key].BatchDate += BatchDate;\r\n            accumulator[key].quantityString += ` ,  ${BatchCode} ${BatchDate} `;\r\n\r\n        } else {\r\n            accumulator[key] = {\r\n                ItemName, HSNCode,\r\n                MRPValue, IGSTPercentage, DiscountType, Rate, Discount, CGST: Number(CGST), SGST: Number(SGST), Amount: Number(Amount), DiscountAmount: Number(DiscountAmount), BasicAmount: Number(BasicAmount), Quantity: Number(Quantity), UnitName, CGSTPercentage, SGSTPercentage, GSTPercentage, BatchDate, BatchCode: BatchCode, BatchDate: BatchDate, quantityString: `  ${BatchCode}  ${BatchDate}`, PrimaryUnitName, IGST\r\n            };\r\n        }\r\n        return accumulator;\r\n    }, {});\r\n\r\n    Object.values(groupedItems).forEach((element, key) => {\r\n\r\n        let HSNcodes = \"\"\r\n        if (element.HSNCode) {\r\n            if (data.SettingData.HSNCodeDigit === \"1\") {\r\n                HSNcodes = element.HSNCode.slice(0, 4);\r\n            }\r\n            if (data.SettingData.HSNCodeDigit === \"2\") {\r\n                HSNcodes = element.HSNCode.slice(0, 6);\r\n            }\r\n            if (data.SettingData.HSNCodeDigit === \"3\") {\r\n                HSNcodes = element.HSNCode.slice(0, 8);\r\n            }\r\n        }\r\n        const tableitemRow = [\r\n            SrNO++,\r\n            `${HSNcodes} ${element.ItemName}`,\r\n            `${Number(element.Quantity).toFixed(2)} ${element.PrimaryUnitName}   ${element.UnitName}`,\r\n            `${numberWithCommas(Number(element.MRPValue).toFixed(2))}`,\r\n            `${numberWithCommas(Number(element.Rate).toFixed(2))}`,\r\n            `${element.Discount} ${element.DiscountType === \"1\" ? \"Rs\" : \"%\"}`,\r\n            `${numberWithCommas(Number(element.DiscountAmount).toFixed(2))}`,\r\n            `${numberWithCommas(Number(element.BasicAmount).toFixed(2))}`,\r\n            `${Number(element.IGSTPercentage).toFixed(1)}%`,\r\n            `${numberWithCommas(Number(element.IGST).toFixed(2))}`,\r\n            `${numberWithCommas(Number(element.Amount).toFixed(2))}`,\r\n        ];\r\n\r\n        function totalLots() {\r\n            totalQuantity = Number(totalQuantity) + Number(element.Quantity)\r\n            totalIGst = Number(totalIGst) + Number(element.IGST)\r\n            totalAmount = Number(totalAmount) + Number(element.Amount)\r\n            totalBasicAmount = Number(totalBasicAmount) + Number(element.BasicAmount)\r\n            GSTPercentage = Number(element.IGSTPercentage)\r\n\r\n\r\n        };\r\n\r\n\r\n        function totalrow() {\r\n\r\n            return [\r\n                \"\",\r\n                ` GST ${(parseFloat(GSTPercentage))}%  Total:${numberWithCommas(Number(totalIGst).toFixed(2))} `,\r\n                \" \",\r\n                ``,\r\n                \"\",\r\n                \"\",\r\n                ``,\r\n                `${numberWithCommas(Number(totalBasicAmount).toFixed(2))}`,\r\n                `${numberWithCommas(Number(totalIGst).toFixed(2))}`,\r\n                \"isaddition\",\r\n                `${numberWithCommas(Number(totalAmount).toFixed(2))}`,\r\n\r\n            ];\r\n        };\r\n        const BatchRow = [\r\n            `Batch:  ${element.quantityString} `,\r\n            `Batch`,\r\n            \" \",\r\n            ``,\r\n            \"\",\r\n            \"\",\r\n            \"\",\r\n            \"\",\r\n            ``,\r\n            \"\",\r\n            ``,\r\n        ]\r\n\r\n        if (Gst === 0) { Gst = element.GSTPercentage };\r\n        let aa = { TotalCGst: 0, totalSGst: 0 }\r\n        if (data[\"tableTot\"] === undefined) { data[\"tableTot\"] = aa }\r\n\r\n        if ((Gst === element.GSTPercentage)) {\r\n            data[\"tableTot\"] = totalLots()\r\n            returnArr.push(tableitemRow)\r\n\r\n        }\r\n\r\n\r\n        else {\r\n            returnArr.push(totalrow());\r\n            returnArr.push(tableitemRow);\r\n            totalBasicAmount = 0\r\n            totalAmount = 0\r\n            totalQuantity = 0\r\n\r\n            data[\"tableTot\"] = totalLots()\r\n            Gst = element.GSTPercentage;\r\n        }\r\n        if (data.SettingData.ShowBatchNoOnInvoicePrint === \"1\") {\r\n            returnArr.push((BatchRow))\r\n        }\r\n\r\n        if (key === Object.keys(groupedItems).length - 1) {\r\n\r\n            returnArr.push(totalrow());\r\n        }\r\n    })\r\n    return returnArr;\r\n}\r\n\r\n\r\nexport const BilledByRow = (data) => {\r\n\r\n    let PartyAddress = \"\"\r\n    if (Array.isArray(data.PartyAddress)) {\r\n        const filteredArray = data.PartyAddress.filter(obj => obj.IsDefault === true);\r\n        PartyAddress = filteredArray[0] === undefined ? \"\" : filteredArray[0].Address\r\n    } else {\r\n        PartyAddress = data.PartyAddress\r\n    }\r\n\r\n    var BilledByArray = [\r\n        [`            ${data.PartyName}`],\r\n        [`                 ${PartyAddress}`],\r\n        [`            ${data.PartyState}`],\r\n        [`              ${data.PartyGSTIN}`],\r\n        [`                   ${data.PartyFSSAINo}`],\r\n        [`                   ${data.PartyMobileNo}`],\r\n\r\n    ]\r\n    return BilledByArray;\r\n}\r\nexport const BilledToRow = (data) => {\r\n\r\n    let CustomerAddress = \"\"\r\n    if (Array.isArray(data.CustomerAddress)) {\r\n        const filteredArray = data.CustomerAddress.filter(obj => obj.IsDefault === true);\r\n        CustomerAddress = filteredArray[0] === undefined ? \"\" : filteredArray[0].Address\r\n    } else {\r\n        CustomerAddress = data.CustomerAddress\r\n    }\r\n    var BilledToArray = [\r\n        [`                   ${data.CustomerName}`],\r\n        [`                 ${CustomerAddress}`],\r\n        [`           ${data.CustomerState}`],\r\n        [`             ${data.CustomerGSTIN}`,],\r\n        [`                   ${data.CustomerFSSAINo}`],\r\n        [`                   ${data.CustomerMobileNo}`],\r\n    ]\r\n\r\n    return BilledToArray;\r\n}\r\nexport const DetailsOfTransportRow = (data) => {\r\n\r\n    let OrderNumber = \" \"\r\n    if (data.InvoicesReferences.length > 0) {\r\n\r\n        const PoNumber = data.InvoicesReferences.map(index => ({\r\n            SystemGenerate: index.FullOrderNumber,\r\n            Description: index.Description,\r\n        }));\r\n        if (PoNumber[0].Description === null) {\r\n            OrderNumber = PoNumber[0].SystemGenerate\r\n        } else {\r\n            OrderNumber = PoNumber[0].Description\r\n        }\r\n    }\r\n\r\n    let EwayData = \"\"\r\n    if (data.InvoiceUploads.length > 0) {\r\n        EwayData = data.InvoiceUploads[0]\r\n    }\r\n\r\n    var DetailsOfTransportArray = [\r\n        [`             ${OrderNumber}`],\r\n        [data.DriverName === null ? \"\" : `                        ${data.DriverName}`],\r\n        [`                     ${data.VehicleNo === null ? \"\" : data.VehicleNo}`],\r\n        [`                               ${(EwayData.EwayBillNo === undefined) || (EwayData.EwayBillNo === null) ? \"\" : EwayData.EwayBillNo}`],\r\n        [`               ${(EwayData.AckNo === undefined) || (EwayData.AckNo === null) ? \"\" : EwayData.AckNo}`]\r\n    ]\r\n\r\n    return DetailsOfTransportArray;\r\n}\r\n\r\n\r\nexport const BankRow = (data) => {\r\n\r\n    if (data.BankData.length > 0) {\r\n        let BankData = data.BankData[0]\r\n        var reportArray = [\r\n            [`A/C No: ${BankData.AccountNo}`, `IFSC Code: ${BankData.IFSC}`, `Branch: ${BankData.BranchName}`],\r\n            [`Bank Name :${BankData.BankName}`]\r\n        ]\r\n    } else {\r\n        var reportArray = [\r\n            [],\r\n            [, `Bank details not provided. Please update Bank details`]\r\n        ]\r\n    }\r\n\r\n    return reportArray;\r\n}\r\n\r\n\r\nexport const IRNNumberRow = (data) => {\r\n\r\n    if (data.isQR) {\r\n        const IRN_No = (data.InvoiceUploads[0].Irn === null ? \"\" : data.InvoiceUploads[0].Irn)\r\n\r\n        var IRNNumberArray = [\r\n            [`IRN No :${IRN_No}`],\r\n        ]\r\n\r\n    }\r\n\r\n    return IRNNumberArray;\r\n}\r\n\r\n\r\nexport const RupeesRow = (data) => {\r\n    let stringNumber = toWords(Number(data.GrandTotal))\r\n\r\n    var RupeesArray = [\r\n        [`                  ${stringNumber}`],\r\n\r\n    ]\r\n    return RupeesArray;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\Reports\\OrderReport\\ReportStyle.js",["3389"],"\r\nimport cbm_logo from \"../../assets/images/cbm_logo.png\"\r\nimport * as table from './TableData'\r\nimport { toWords, numberWithCommas } from \"../Report_common_function\";\r\nimport { CurrentTime, compareGSTINState, convertOnlyTimefunc, currentDate_dmy, date_dmy_func } from \"../../components/Common/CommonFunction\";\r\nimport { url } from \"../../routes\";\r\nlet initial_y = 0\r\n\r\n\r\nexport const pageBorder = (doc) => {\r\n    doc.setDrawColor(0, 0, 0);\r\n    doc.line(570, 16, 30, 16);//horizontal line (Top)\r\n    doc.line(30, 815, 30, 16);//vertical line (left)\r\n    doc.line(570, 815, 570, 16);//vertical line (Right)\r\n    doc.line(570, 815, 30, 815);//horizontal line (Bottom)    \r\n}\r\n\r\nexport const pageHeder = (doc, data) => {\r\n\r\n    doc.addImage(cbm_logo, 'PNG', 33, 14, 85, 50)\r\n    doc.addFont(\"Arial\", 'Normal')\r\n    doc.setFont('Arial')\r\n    doc.setFontSize(18)\r\n    if (data.subPageMode === url.ORDER_LIST_4) {\r\n        doc.text('SALES  ORDER', 180, 45,)\r\n    } else {\r\n        doc.text('PURCHASE ORDER', 180, 45,)\r\n\r\n    }\r\n}\r\n\r\nexport const reportHeder1 = (doc, data) => {\r\n    doc.setFont('Tahoma')\r\n    doc.setFontSize(11)\r\n    doc.setFont(undefined, 'bold')\r\n    doc.text(\"Supplier\", 80, 75)\r\n    doc.text('Customer', 280, 75)\r\n    doc.text('Shipping Address', 440, 75)\r\n    doc.setDrawColor(0, 0, 0);\r\n    doc.line(570, 63, 30, 63)  //Image below line  1\r\n    doc.line(570, 16, 30, 16);//horizontal line 2\r\n    doc.line(570, 80, 30, 80);//horizontal line 3\r\n    doc.line(30, 789, 30, 16);//vertical left 1\r\n\r\n    doc.line(570, 789, 570, 16);//vertical left 2\r\n    doc.line(408, 160, 408, 16);//vertical right 1\r\n    doc.line(220, 160, 220, 63);//vertical right 2\r\n\r\n    //Header Table Style \r\n    var BilledByStyle = {\r\n        didDrawCell: (data1) => {\r\n\r\n            const rowIdx = data1.row.index;\r\n            const colIdx = data1.column.index;\r\n            if (rowIdx === 0 && colIdx === 0) {\r\n                let x = data1.cursor.x + 2\r\n                let y = data1.cursor.y + 9\r\n                doc.setFontSize(8)\r\n                doc.setFont(undefined, 'bold')\r\n                doc.text('Supplier : ', x, y)\r\n            };\r\n            if (rowIdx === 1 && colIdx === 0) {\r\n\r\n                let x = data1.cursor.x + 2\r\n                let y = data1.cursor.y + 9\r\n                doc.setFontSize(8)\r\n                doc.setFont(undefined, 'bold')\r\n                doc.text('Address: ', x, y)\r\n            };\r\n\r\n            if (rowIdx === 2 && colIdx === 0) {\r\n\r\n                let x = data1.cursor.x + 2\r\n                let y = data1.cursor.y + 9\r\n                doc.setFontSize(8)\r\n                doc.setFont(undefined, 'bold')\r\n                doc.text('GSTIN: ', x, y)\r\n            };\r\n            if (rowIdx === 3 && colIdx === 0) {\r\n\r\n                let x = data1.cursor.x + 2\r\n                let y = data1.cursor.y + 9\r\n                doc.setFontSize(8)\r\n                doc.setFont(undefined, 'bold')\r\n                doc.text('FSSAI No: ', x, y)\r\n            };\r\n\r\n\r\n        },\r\n        margin: {\r\n            top: 45, left: 30, right: 35,\r\n        },\r\n        showHead: 'always',\r\n        theme: 'plain',\r\n        styles: {\r\n            overflow: 'linebreak',\r\n            fontSize: 8,\r\n            height: 0,\r\n        },\r\n        bodyStyles: {\r\n            columnWidth: 'wrap',\r\n            textColor: [30, 30, 30],\r\n            cellPadding: 2,\r\n            fontSize: 8,\r\n            fontStyle: 'normal',\r\n            lineColor: [0, 0, 0]\r\n        },\r\n        columnStyles: {\r\n            0: {\r\n                valign: \"top\",\r\n                columnWidth: 190,\r\n                halign: 'lfet',\r\n            }\r\n\r\n        },\r\n        tableLineColor: \"black\",\r\n\r\n        startY: 80,\r\n\r\n    };\r\n    var BilledToStyle = {\r\n        didDrawCell: (data1) => {\r\n\r\n            const rowIdx = data1.row.index;\r\n            const colIdx = data1.column.index;\r\n            if (rowIdx === 0 && colIdx === 0) {\r\n                let x = data1.cursor.x + 2\r\n                let y = data1.cursor.y + 9\r\n                doc.setFontSize(8)\r\n                doc.setFont(undefined, 'bold')\r\n                doc.text('Customer : ', x, y)\r\n            };\r\n            if (rowIdx === 1 && colIdx === 0) {\r\n                let x = data1.cursor.x + 2\r\n                let y = data1.cursor.y + 9\r\n                doc.setFontSize(8)\r\n                doc.setFont(undefined, 'bold')\r\n                doc.text('Address: ', x, y)\r\n            };\r\n\r\n            if (rowIdx === 2 && colIdx === 0) {\r\n                let x = data1.cursor.x + 2\r\n                let y = data1.cursor.y + 9\r\n                doc.setFontSize(8)\r\n                doc.setFont(undefined, 'bold')\r\n                doc.text('GSTIN: ', x, y)\r\n            };\r\n            if (rowIdx === 3 && colIdx === 0) {\r\n\r\n                let x = data1.cursor.x + 2\r\n                let y = data1.cursor.y + 9\r\n                doc.setFontSize(8)\r\n                doc.setFont(undefined, 'bold')\r\n                doc.text('FSSAI No: ', x, y)\r\n            };\r\n\r\n        },\r\n        margin: {\r\n            top: 45, left: 220, right: 35,\r\n        },\r\n        showHead: 'always',\r\n        theme: 'plain',\r\n        styles: {\r\n            overflow: 'linebreak',\r\n            fontSize: 8,\r\n            height: 0,\r\n        },\r\n        bodyStyles: {\r\n            columnWidth: 'wrap',\r\n            textColor: [30, 30, 30],\r\n            cellPadding: 2,\r\n            fontSize: 8,\r\n            fontStyle: 'normal',\r\n            lineColor: [0, 0, 0]\r\n        },\r\n        columnStyles: {\r\n            0: {\r\n                valign: \"top\",\r\n                columnWidth: 188,\r\n                halign: 'lfet',\r\n            },\r\n        },\r\n        tableLineColor: \"black\",\r\n        startY: 80,\r\n\r\n    };\r\n    var DetailsOfTransportStyle = {\r\n        didDrawCell: (data1) => {\r\n\r\n            const rowIdx = data1.row.index;\r\n            const colIdx = data1.column.index;\r\n            if (rowIdx === 0 && colIdx === 0) {\r\n                let x = data1.cursor.x + 2\r\n                let y = data1.cursor.y + 9\r\n                doc.setFontSize(8)\r\n                doc.setFont(undefined, 'bold')\r\n                doc.text('PO Type : ', x, y)\r\n            };\r\n            if (rowIdx === 1 && colIdx === 0) {\r\n\r\n                let x = data1.cursor.x + 2\r\n                let y = data1.cursor.y + 9\r\n                doc.setFontSize(8)\r\n                doc.setFont(undefined, 'bold')\r\n                doc.text('Customer: ', x, y)\r\n            };\r\n\r\n            if (rowIdx === 2 && colIdx === 0) {\r\n\r\n                let x = data1.cursor.x + 2\r\n                let y = data1.cursor.y + 9\r\n                doc.setFontSize(8)\r\n                doc.setFont(undefined, 'bold')\r\n                doc.text('Address: ', x, y)\r\n            };\r\n            if (rowIdx === 3 && colIdx === 0) {\r\n\r\n                let x = data1.cursor.x + 2\r\n                let y = data1.cursor.y + 9\r\n                doc.setFontSize(8)\r\n                doc.setFont(undefined, 'bold')\r\n                doc.text('FSSAI No: ', x, y)\r\n            };\r\n\r\n\r\n        },\r\n\r\n        margin: {\r\n            top: 45, left: 408, right: 35,\r\n        },\r\n        showHead: 'always',\r\n        theme: 'plain',\r\n        styles: {\r\n            overflow: 'linebreak',\r\n            fontSize: 8,\r\n            height: 0,\r\n        },\r\n        bodyStyles: {\r\n            columnWidth: 'wrap',\r\n            textColor: [30, 30, 30],\r\n            cellPadding: 2,\r\n            fontSize: 8,\r\n            fontStyle: 'normal',\r\n            lineColor: [0, 0, 0]\r\n        },\r\n        columnStyles: {\r\n            0: {\r\n                valign: \"top\",\r\n                columnWidth: 162,\r\n                halign: 'lfet',\r\n            },\r\n\r\n        },\r\n        tableLineColor: \"black\",\r\n\r\n        startY: 80,\r\n\r\n    };\r\n\r\n    // let initial_y = 0\r\n    const priLength = () => {\r\n\r\n        let final_y = doc.previousAutoTable.finalY\r\n        if (final_y > initial_y) {\r\n            initial_y = final_y\r\n        }\r\n\r\n    }\r\n\r\n    doc.autoTable(table.BilledBy, table.BilledByRow(data), BilledByStyle);\r\n    console.log(\"first\", doc.previousAutoTable.finalY)\r\n    priLength()\r\n\r\n    doc.autoTable(table.BilledTo, table.BilledToRow(data), BilledToStyle);\r\n    console.log(\"Second\", doc.previousAutoTable.finalY)\r\n    priLength()\r\n\r\n    doc.autoTable(table.DetailsOfTransport, table.DetailsOfTransportRow(data), DetailsOfTransportStyle);\r\n    console.log(\"third\", doc.previousAutoTable.finalY)\r\n    priLength()\r\n}\r\n\r\n\r\nexport const reportHeder2 = (doc, data) => {\r\n    doc.setFont('Tahoma')\r\n    doc.setFontSize(10)\r\n    doc.setFont(undefined, 'bold')\r\n}\r\n\r\n\r\nexport const reportHeder3 = (doc, data) => {\r\n\r\n    doc.setFont('Tahoma')\r\n    doc.setFontSize(9)\r\n    doc.setDrawColor(0, 0, 0);\r\n    doc.line(570, 30, 408, 30) //horizontal line 1 billby upper\r\n    doc.line(570, 45, 408, 45) //horizontal line 2 billby upper\r\n\r\n\r\n    doc.line(408, 65, 408, 16);//vertical right 1\r\n\r\n    doc.setFont(undefined, 'bold')\r\n    doc.text(`Order No: ${data.FullOrderNumber}`, 415, 25) //Invoice Id\r\n\r\n    var time = convertOnlyTimefunc(data.CreatedOn)\r\n\r\n    const dateOnly = data.CreatedOn.substring(0, 10);\r\n    var Orderdate = date_dmy_func(dateOnly)\r\n    doc.text(`Order Date: ${Orderdate}  ${time}`, 415, 40) //Invoice date\r\n    var DeliveryDate = date_dmy_func(data.OrderDate)                          ///   Delivery Date\r\n    doc.text(`Delivery Date: ${DeliveryDate}`, 415, 55) //Invoice date\r\n    doc.line(570, 63, 30, 63) //horizontal line 2 billby upper\r\n\r\n\r\n}\r\n\r\nexport const reportFooter = (doc, data) => {\r\n    var options1 = {\r\n        didParseCell: (data1) => {\r\n\r\n            if (data1.row.cells[0].raw === \"Terms And Condition\") {\r\n                data1.row.cells[0].styles.fontSize = 10\r\n                data1.row.cells[0].styles.fontStyle = \"bold\"\r\n            }\r\n\r\n        },\r\n        margin: {\r\n            top: 45, left: 35, right: 35, bottom: 10\r\n        },\r\n        showHead: 'always',\r\n        theme: 'plain',\r\n        styles: {\r\n            overflow: 'linebreak',\r\n            fontSize: 8,\r\n            height: 0,\r\n        },\r\n        bodyStyles: {\r\n            columnWidth: 'wrap',\r\n            textColor: [30, 30, 30],\r\n            cellPadding: 1,\r\n            fontSize: 8,\r\n            fontStyle: 'bold',\r\n            lineColor: [0, 0, 0]\r\n        },\r\n        columnStyles: {\r\n            0: {\r\n                valign: \"top\",\r\n                columnWidth: 395,\r\n                halign: 'lfet',\r\n            },\r\n\r\n        },\r\n        tableLineColor: \"black\",\r\n\r\n        startY: 765,\r\n\r\n    };\r\n\r\n    doc.autoTable(table.Footercolumn, table.ReportRows(data), options1);\r\n    doc.setFontSize(9)\r\n}\r\n\r\n\r\nexport const tableBody = (doc, data) => {\r\n    const tableRow = table.Rows(data);\r\n    console.log(tableRow)\r\n    const { OrderItem = [] } = data\r\n    var options = {\r\n        didParseCell: (data1) => {\r\n\r\n            if (data1.row.cells[8].raw === \"isaddition\") {\r\n                data1.row.cells[0].colSpan = 2\r\n                data1.row.cells[2].colSpan = 2\r\n                data1.row.cells[4].colSpan = 2\r\n\r\n                data1.row.cells[5].colSpan = 2\r\n                data1.row.cells[7].colSpan = 2\r\n                data1.row.cells[9].colSpan = 2\r\n\r\n                data1.row.cells[0].styles.halign = \"right\"\r\n\r\n\r\n                data1.row.cells[0].styles.fontSize = 7\r\n                data1.row.cells[4].styles.fontSize = 7\r\n                data1.row.cells[6].styles.fontSize = 7\r\n                data1.row.cells[7].styles.fontSize = 7\r\n                data1.row.cells[9].styles.fontSize = 7\r\n                data1.row.cells[11].styles.fontSize = 7\r\n                data1.row.cells[0].styles.fontStyle = \"bold\"\r\n                data1.row.cells[4].styles.fontStyle = \"bold\"\r\n                data1.row.cells[6].styles.fontStyle = \"bold\"\r\n                data1.row.cells[7].styles.fontStyle = \"bold\"\r\n                data1.row.cells[9].styles.fontStyle = \"bold\"\r\n                data1.row.cells[11].styles.fontStyle = \"bold\"\r\n            }\r\n            if (data1.row.cells[0].raw === \"HSN Item Name\") {\r\n                let TotalBox = 0;\r\n                OrderItem.forEach((element, key) => {\r\n                    if (element.PrimaryUnitName === \"Box\") {\r\n                        TotalBox = Number(TotalBox) + Number(element.Quantity)\r\n                    }\r\n                })\r\n\r\n                data1.row.cells[0].text[0] = ` HSN Item Name (${OrderItem.length})  (${TotalBox} Box)`\r\n                data1.row.cells[7].colSpan = 2\r\n                data1.row.cells[9].colSpan = 2\r\n            }\r\n        },\r\n        didDrawCell: (data1) => {\r\n            const rowIdx = data1.row.index;\r\n            const colIdx = data1.column.index;\r\n            if (rowIdx === 0 && colIdx === 7) {\r\n                if (data1.row.cells[7].raw === \"       CGST        %        Amount\") {\r\n\r\n                    const cellWidth = data1.cell.width;\r\n                    const cellHeight = data1.cell.height;\r\n                    const startX = data1.cell.x;\r\n                    const startY = data1.cell.y + cellHeight / 2;\r\n                    const endX = startX + cellWidth;\r\n                    const endY = startY;\r\n\r\n                    const startXVertical = data1.cell.x + cellWidth / 2;  // X-coordinate at the middle of the cell\r\n                    const startY1vertical = data1.cell.y + 9;\r\n                    const endYvertical = startY + cellHeight;\r\n\r\n                    doc.line(startXVertical - 4, startY1vertical + 2, startXVertical - 4, endYvertical + 2);  // Draw a vertical line\r\n                    doc.line(startX, startY, endX, endY);\r\n                }\r\n            }\r\n            if (rowIdx === 0 && colIdx === 9) {\r\n                if (data1.row.cells[9].raw === \"       SGST        %        Amount\") {\r\n\r\n                    const cellWidth = data1.cell.width;\r\n                    const cellHeight = data1.cell.height;\r\n                    const startX = data1.cell.x;\r\n                    const startY = data1.cell.y + cellHeight / 2;\r\n                    const endX = startX + cellWidth;\r\n                    const endY = startY;\r\n\r\n                    const startXVertical = data1.cell.x + cellWidth / 2;  // X-coordinate at the middle of the cell\r\n                    const startY1vertical = data1.cell.y + 9;\r\n                    const endYvertical = startY + cellHeight;\r\n\r\n                    doc.line(startXVertical - 4, startY1vertical + 2, startXVertical - 4, endYvertical + 2); // Draw a vertical line\r\n                    doc.line(startX, startY, endX, endY);\r\n                }\r\n            }\r\n\r\n        },\r\n        margin: {\r\n            left: 30, right: 25, top: 65\r\n        },\r\n        theme: 'grid',\r\n        headerStyles: {\r\n            cellPadding: 3,\r\n            lineWidth: 0.8,\r\n            valign: 'top',\r\n            fontStyle: 'bold',\r\n            halign: 'center',\r\n            fillColor: \"white\",\r\n            textColor: [0, 0, 0],\r\n            fontSize: 7,\r\n            rowHeight: 10,\r\n            lineColor: \"black\"\r\n        },\r\n        bodyStyles: {\r\n            columnWidth: 'wrap',\r\n            textColor: [30, 30, 30],\r\n            cellPadding: 5,\r\n            fontSize: 7,\r\n            lineColor: [6, 3, 1]\r\n        },\r\n        columnStyles: {\r\n            0: {\r\n                valign: \"top\",\r\n                columnWidth: 125,\r\n            },\r\n            1: {\r\n                columnWidth: 45,\r\n                halign: 'right',\r\n\r\n            },\r\n            2: {\r\n                columnWidth: 36,\r\n                halign: 'right',\r\n\r\n            },\r\n\r\n            3: {\r\n                columnWidth: 40,\r\n                halign: 'right',\r\n            },\r\n            4: {\r\n                columnWidth: 44,\r\n                halign: 'right',\r\n            },\r\n            5: {\r\n                columnWidth: 43,\r\n                halign: 'right',\r\n            },\r\n            6: {\r\n                columnWidth: 43,\r\n                halign: 'right',\r\n            },\r\n            7: {\r\n                columnWidth: 25,\r\n                halign: 'right',\r\n            },\r\n            8: {\r\n                columnWidth: 34,\r\n                halign: 'right',\r\n            },\r\n            9: {\r\n                columnWidth: 25,\r\n                fontStyle: 'bold',\r\n                halign: 'right',\r\n            },\r\n            10: {\r\n                columnWidth: 34,\r\n                fontStyle: 'bold',\r\n                halign: 'right',\r\n            },\r\n            11: {\r\n                columnWidth: 46,\r\n                fontStyle: 'bold',\r\n                halign: 'right',\r\n            },\r\n\r\n\r\n        },\r\n\r\n        tableLineColor: \"black\",\r\n        startY: initial_y,// 45,\r\n\r\n    };\r\n\r\n    doc.autoTable(table.columns, table.Rows(data), options);\r\n\r\n    const optionsTable4 = {\r\n        margin: {\r\n            left: 30, right: 30, bottom: 50\r\n        },\r\n    };\r\n\r\n    doc.autoTable(optionsTable4);\r\n\r\n    doc.autoTable({\r\n        html: '#table',\r\n        didParseCell(data) {\r\n            if (data.cell.row.index === 0) {\r\n                data.cell.styles.textColor = [255, 255, 255];\r\n                data.cell.styles.fillColor = '#FF5783';\r\n            }\r\n        }\r\n    })\r\n}\r\n\r\nexport const tableBodyWithIGST = (doc, data) => {\r\n    const tableRow = table.Rows(data);\r\n    console.log(tableRow)\r\n    const { OrderItem = [] } = data\r\n    //Body table  Css\r\n    var options = {\r\n        didParseCell: (data1) => {\r\n            if (data1.row.cells[8].raw === \"isaddition\") {\r\n                data1.row.cells[0].colSpan = 2\r\n                data1.row.cells[2].colSpan = 2\r\n                data1.row.cells[4].colSpan = 2\r\n                data1.row.cells[7].colSpan = 2\r\n\r\n\r\n                data1.row.cells[0].styles.halign = \"right\"\r\n                data1.row.cells[1].styles.halign = \"right\"\r\n                data1.row.cells[1].styles.fontStyle = \"bold\"\r\n\r\n\r\n                data1.row.cells[0].styles.fontSize = 8\r\n                data1.row.cells[2].styles.fontSize = 8\r\n                data1.row.cells[4].styles.fontSize = 8\r\n                data1.row.cells[6].styles.fontSize = 8\r\n                data1.row.cells[7].styles.fontSize = 8\r\n                data1.row.cells[9].styles.fontSize = 8\r\n\r\n\r\n\r\n\r\n                data1.row.cells[0].styles.fontStyle = \"bold\"\r\n                data1.row.cells[2].styles.fontStyle = \"bold\"\r\n                data1.row.cells[4].styles.fontStyle = \"bold\"\r\n                data1.row.cells[6].styles.fontStyle = \"bold\"\r\n                data1.row.cells[7].styles.fontStyle = \"bold\"\r\n                data1.row.cells[9].styles.fontStyle = \"bold\"\r\n\r\n\r\n\r\n\r\n\r\n            }\r\n            if (data1.row.cells[0].raw === \"HSN Item Name\") {\r\n\r\n                let TotalBox = 0;\r\n                OrderItem.forEach((element, key) => {\r\n                    if (element.PrimaryUnitName === \"Box\") {\r\n                        TotalBox = Number(TotalBox) + Number(element.Quantity)\r\n                    }\r\n                })\r\n\r\n                data1.row.cells[0].text[0] = ` HSN Item Name (${OrderItem.length})  (${TotalBox} Box)`\r\n                data1.row.cells[7].colSpan = 2\r\n            }\r\n\r\n\r\n\r\n        },\r\n        margin: {\r\n            left: 30, right: 25, top: 65\r\n        },\r\n        theme: 'grid',\r\n        headerStyles: {\r\n            cellPadding: 4,\r\n            lineWidth: 1,\r\n            valign: 'top',\r\n            fontStyle: 'bold',\r\n            halign: 'center',\r\n            fillColor: \"white\",\r\n            textColor: [0, 0, 0],\r\n            fontSize: 8,\r\n            rowHeight: 10,\r\n            lineColor: [0, 0, 0]\r\n        },\r\n        bodyStyles: {\r\n            columnWidth: 'wrap',\r\n            textColor: [30, 30, 30],\r\n            cellPadding: 2,\r\n            fontSize: 7,\r\n            // fontStyle: 'bold',\r\n            lineColor: [6, 3, 1]\r\n        },\r\n        columnStyles: {\r\n            0: {\r\n                valign: \"top\",\r\n                columnWidth: 140,\r\n            },\r\n            1: {\r\n                columnWidth: 55,\r\n                halign: 'left',\r\n\r\n            },\r\n            2: {\r\n                columnWidth: 40,\r\n                halign: 'right',\r\n            },\r\n            3: {\r\n                columnWidth: 40,\r\n                halign: 'right',\r\n            },\r\n            4: {\r\n                columnWidth: 50,\r\n                halign: 'right',\r\n            },\r\n            5: {\r\n                columnWidth: 43,\r\n                halign: 'right',\r\n            },\r\n            6: {\r\n                columnWidth: 45,\r\n                halign: 'right',\r\n            },\r\n            7: {\r\n                columnWidth: 26,\r\n                halign: 'right',\r\n            },\r\n            8: {\r\n                columnWidth: 40,\r\n                halign: 'right',\r\n            },\r\n            9: {\r\n                columnWidth: 61,\r\n                halign: 'right',\r\n            },\r\n\r\n\r\n\r\n\r\n        },\r\n\r\n        tableLineColor: \"black\",\r\n        startY: initial_y,// 45,\r\n\r\n    };\r\n\r\n    doc.autoTable(table.columnsWithIGST, table.RowsWithIGST(data), options);\r\n\r\n    const optionsTable4 = {\r\n        margin: {\r\n            left: 30, right: 30, bottom: 50\r\n        },\r\n    };\r\n\r\n    doc.autoTable(optionsTable4);\r\n\r\n    doc.autoTable({\r\n        html: '#table',\r\n        didParseCell(data) {\r\n            if (data.cell.row.index === 0) {\r\n                data.cell.styles.textColor = [255, 255, 255];\r\n                data.cell.styles.fillColor = '#FF5783';\r\n            }\r\n        }\r\n    })\r\n}\r\n\r\nexport const pageFooter = (doc, data) => {\r\n\r\n    const GrandTotal = Number(data.OrderAmount)\r\n    const Total = numberWithCommas((GrandTotal).toFixed(2))\r\n    let stringNumber = toWords(Number(GrandTotal))\r\n    // doc.addImage(upi_qr_code, 'PNG', 470, 750, 80, 60)\r\n    doc.setDrawColor(0, 0, 0);\r\n    doc.line(570, 735, 30, 735);//horizontal line Footer 2\r\n    // doc.line(570, 680, 30, 680);//horizontal line Footer 3\r\n    // doc.line(430, 700, 30, 700);//horizontal line Footer 3 Ruppe section\r\n    // doc.line(460, 745, 460, 815);//vertical right1 Qr Left 1\r\n    doc.line(430, 735, 430, 815);//vertical right1 Sub Total\r\n    doc.setFont('Tahoma')\r\n    doc.line(430, 750, 30, 750);//horizontal line (Bottom)\r\n\r\n    const a = data.OrderItem.map((data) => ({\r\n        CGST: Number(data.CGST),\r\n        SGST: Number(data.SGST),\r\n        BasicAmount: Number(data.BasicAmount),\r\n        IGST: Number(data.IGST),\r\n        DiscountAmount: Number(data.DiscountAmount),\r\n\r\n    }));\r\n    let totalCGST = 0;\r\n    let totalSGST = 0;\r\n    let TotalBasicAmount = 0;\r\n    let totalIGST = 0;\r\n    let totalDiscount = 0;\r\n\r\n    a.forEach(arg => {\r\n        totalCGST += arg.CGST;\r\n        totalSGST += arg.SGST;\r\n        TotalBasicAmount += arg.BasicAmount;\r\n        totalIGST += arg.IGST;\r\n        totalDiscount += arg.DiscountAmount;\r\n    });\r\n\r\n    const TotalGST = totalCGST + totalSGST;\r\n    // console.log(arr)\r\n\r\n    const isIGST = compareGSTINState(data.CustomerGSTIN, data.SupplierGSTIN)\r\n    if (isIGST) {\r\n        doc.setFontSize(8)\r\n        doc.text(`Total Basic:`, 434, 752,)\r\n        doc.text(`${numberWithCommas(Number(TotalBasicAmount).toFixed(2))}`, 568, 752, 'right')\r\n\r\n        doc.text(`Total Disc:`, 434, 762,)\r\n        doc.text(`${numberWithCommas(Number(totalDiscount).toFixed(2))}`, 568, 762, 'right')\r\n\r\n        doc.text(`Total IGST:`, 434, 772,)\r\n        doc.text(`${numberWithCommas(Number(totalIGST).toFixed(2))}`, 568, 772, 'right')\r\n\r\n        doc.text(`Total GST:`, 434, 782,)\r\n        doc.text(` ${numberWithCommas(Number(totalIGST).toFixed(2))}`, 568, 782, 'right')\r\n\r\n\r\n\r\n    } else {\r\n\r\n        doc.setFontSize(8)\r\n        doc.text(`Total Basic:`, 434, 752,)\r\n        doc.text(`${numberWithCommas(Number(TotalBasicAmount).toFixed(2))}`, 568, 752, 'right')\r\n\r\n        doc.text(`Total Disc:`, 434, 762,)\r\n        doc.text(`${numberWithCommas(Number(totalDiscount).toFixed(2))}`, 568, 762, 'right')\r\n\r\n        doc.text(`Total CGST:`, 434, 772,)\r\n        doc.text(`${numberWithCommas(Number(totalCGST).toFixed(2))}`, 568, 772, 'right')\r\n\r\n        doc.text(`Total SGST:`, 434, 782,)\r\n        doc.text(`${numberWithCommas(Number(totalSGST).toFixed(2))}`, 568, 782, 'right')\r\n\r\n        doc.text(`Total GST:`, 434, 792,)\r\n        doc.text(` ${numberWithCommas(Number(TotalGST).toFixed(2))}`, 568, 792, 'right')\r\n\r\n    }\r\n\r\n\r\n    doc.setFont(undefined, 'Normal')\r\n    doc.setFontSize(10)\r\n    doc.setFont(undefined, 'bold')\r\n    doc.text(`Order Amount:`, 433, 810,)\r\n    // const GrandTotal = Math.round(data.OrderAmount)\r\n    //  const GrandTotal = numberWithCommas((56784936).toFixed(2))\r\n    doc.text(`${Total}`, 568, 810, 'right')\r\n    doc.setFont(undefined, 'Normal')\r\n    doc.setFont('Tahoma')\r\n    doc.setFontSize(9)\r\n    doc.setFont('Tahoma')\r\n    doc.setFontSize(8)\r\n    const terms = data.OrderTermsAndCondition\r\n    doc.setFont(undefined, 'bold')\r\n    doc.setFontSize(10)\r\n    // doc.text(`Terms And Condition  `, 33, 775, \"justify\")\r\n    doc.setFont(undefined, 'Normal')\r\n    doc.setFontSize(9)\r\n\r\n\r\n\r\n    // doc.autoTable(terms);\r\n    // const slicedArray = terms.slice(0, 3);\r\n    // // doc.text(`${slicedArray[0]}`, 35, 793, \"justify\")\r\n    // doc.text(`${slicedArray[0] === undefined ? \"\" : slicedArray[0].TermsAndCondition}`, 33, 783, \"justify\")\r\n    // doc.text(`${slicedArray[1] === undefined ? \"\" : slicedArray[1].TermsAndCondition}`, 33, 793, \"justify\")\r\n    // doc.text(`${slicedArray[2] === undefined ? \"\" : slicedArray[2].TermsAndCondition}`, 33, 803, \"justify\")\r\n    // doc.text(`${slicedArray[3] === undefined ? \"\" : slicedArray[3].TermsAndCondition}`, 33, 813, \"justify\")\r\n\r\n    // doc.text(`${slicedArray[2]}`, 35, 813, \"justify\")\r\n    // doc.text(`Received By `, 180, 785,\"justify\")\r\n    doc.setFontSize(10)\r\n    // doc.text(`${data.SupplierName} `, 390, 785, \"justify\")\r\n    doc.setFontSize(10)\r\n    // doc.text(`${data.CustomerName} `, 175, 811,\"justify\")\r\n    doc.setFontSize(9)\r\n    // doc.text(`Signature `, 400, 811, \"justify\")\r\n    doc.setFont(\"Arimo\");\r\n    // doc.text(`I/we hearby certify that food/foods mentioned in this invoice is/are warranted to be of the nature and\r\n    // quantity whitch it/these purports to be `, 34, 760,)\r\n    // doc.text(`A/C No: 2715500356 IFSC Code:BKID00015422 `, 34, 710,)\r\n    // doc.text('Bank details ·sdSVvDsdgbvzdfbBzdf', 34, 725,)\r\n    // doc.text(`INR NO : 12547yfewyrt5675w6wer78sdf687s6d7f8676yse87fugh43 `, 34, 740)\r\n    doc.setFont(undefined, 'bold')\r\n    doc.text(`Rupees:`, 33, 747,)\r\n    doc.setFont(undefined, 'Normal')\r\n    doc.text(`${stringNumber}`, 65, 747,)\r\n\r\n    const pageCount = doc.internal.getNumberOfPages()\r\n    doc.setFont('helvetica', 'Normal')\r\n    // doc.setFontSize(8)\r\n    for (var i = 1; i <= pageCount; i++) {\r\n        doc.setPage(i)\r\n        pageHeder(doc, data)\r\n        pageBorder(doc)\r\n        reportHeder3(doc, data)\r\n        doc.setFont('helvetica', 'Normal')\r\n\r\n        doc.text('Print Date :' + String(currentDate_dmy) + 'Time' + String(CurrentTime()), 30, 828,)\r\n        doc.text('Page' + String(i) + ' of ' + String(pageCount), 500, 828,)\r\n\r\n    }\r\n}\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\Reports\\OrderReport\\TableData.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\routes\\allPageID.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\routes\\urlRalations.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\routes\\PageMode.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\components\\Common\\BreadcrumbNew.js",["3390","3391","3392","3393","3394"],"// import React, { useEffect, useState } from \"react\"\r\n// import { Row, Modal, Button, } from \"reactstrap\"\r\n// import { useHistory } from \"react-router-dom\";\r\n// import { useDispatch, useSelector } from \"react-redux\";\r\n// import { BreadcrumbReset } from \"../../store/Utilites/Breadcrumb/actions\";\r\n// import { AvForm, AvInput } from \"availity-reactstrap-validation\";\r\n// import * as XLSX from 'xlsx';\r\n\r\n// const BreadcrumbNew = () => {\r\n//   const history = useHistory();\r\n//   const dispatch = useDispatch();\r\n\r\n//   const [modal_scroll, setmodal_scroll] = useState(false);\r\n//   const [downListKey, setDownListKey] = useState([]);\r\n\r\n//   const [trueValues, setTrueValues] = useState({});\r\n\r\n//   let { showCountlabel = '', bredcrumbItemName = '', breadcrumbDetail } = useSelector((state) => ({\r\n//     showCountlabel: state.BreadcrumbReducer.showCountlabel,\r\n//     bredcrumbItemName: state.BreadcrumbReducer.bredcrumbItemName,\r\n//     breadcrumbDetail: state.BreadcrumbReducer.breadcrumbDetail,\r\n\r\n//   }));\r\n\r\n//   const {\r\n//     newBtnView = true,\r\n//     excelBtnView = true,\r\n//     pageHeading = '',\r\n//     CountLabel = true,\r\n//     newBtnPath = \"\",\r\n//     pageMode = \"\",\r\n//     downBtnData = [],\r\n//     defaultDownBtnData = {}\r\n//   } = breadcrumbDetail;\r\n\r\n//   // console.log(downListKey)\r\n\r\n//   // useEffect(() => {\r\n//   //   downListKey.splice(0, 0, 'SelectAll')\r\n//   // }, [downListKey])\r\n\r\n//   function tog_scroll() {\r\n//     setmodal_scroll(!modal_scroll);\r\n//     removeBodyCss();\r\n//   }\r\n\r\n//   function removeBodyCss() {\r\n//     document.body.classList.add(\"no_padding\");\r\n//   }\r\n\r\n//   const NewButtonHandeller = () => {\r\n//     history.push({\r\n//       pathname: newBtnPath,\r\n//       pageMode: pageMode\r\n//     })\r\n//   }\r\n\r\n//   useEffect(() => {\r\n//     dispatch(BreadcrumbReset())\r\n//   }, [history.location.pathname]);\r\n\r\n//   useEffect(() => {\r\n//     var keysValues = {}\r\n\r\n//     if (!(downBtnData === undefined)) {\r\n\r\n//       if ((downBtnData.length > 0)) {\r\n//         const propertyNames = Object.keys(downBtnData[0]);\r\n//         setDownListKey(propertyNames)\r\n\r\n//         keysValues = Object.keys(defaultDownBtnData).filter(k => defaultDownBtnData[k] === true)\r\n//         setTrueValues(keysValues)\r\n//       }\r\n//     }\r\n//   }, [downBtnData])\r\n\r\n//   const DownloadInExcelButtonHanler = (event, values) => {\r\n\r\n//     let list = []\r\n//     let object1 = {}\r\n//     var selectedValues = Object.keys(values);\r\n//     var filteredValues = selectedValues.filter(function (selectedValues) {\r\n//       return values[selectedValues]\r\n//     });\r\n//     downBtnData.map((index1) => {\r\n//       filteredValues.map((index2) => {\r\n//         if (index1.hasOwnProperty(index2)) {\r\n//           object1[index2] = index1[index2]\r\n//         }\r\n//       })\r\n//       list.push(object1)\r\n//       object1 = {}\r\n//     })\r\n//     const worksheet = XLSX.utils.json_to_sheet(list);\r\n//     const workbook = XLSX.utils.book_new();\r\n//     XLSX.utils.book_append_sheet(workbook, worksheet, \"Sheet1\");\r\n//     XLSX.writeFile(workbook, \"Excel File.xlsx\");\r\n//     setmodal_scroll(false)\r\n//   }\r\n\r\n//   // function OnChangeFunc(event, value, key) {\r\n\r\n//   //   var data = downListKey.map((i, key) => { return key })\r\n//   //   console.log(data)\r\n//   //   if (value === \"SelectAll\") {\r\n//   //     data.map((indx, key) => {\r\n//   //       document.getElementById(`chckbox${indx}`).checked = event\r\n//   //     })\r\n//   //   }\r\n//   // }\r\n\r\n//   function getScreenWidth() {\r\n//     return window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;\r\n//   }\r\n//   // const screenWidth = getScreenWidth();\r\n\r\n//   function ExcelCheckBox() {\r\n//     const arrDiv = []\r\n\r\n//     downListKey.forEach((index, key) => {\r\n\r\n//       arrDiv.push(\r\n//         <div className=\"row\" >\r\n//           <div className=\"col col-12\"  >\r\n//             <Row>\r\n//               <div className=\"col col-12 \" >\r\n//                 <AvInput\r\n//                   className=\" text-black checkbox-border-red\"\r\n//                   type=\"checkbox\"\r\n//                   id={`chckbox${key}`}\r\n//                   defaultChecked={trueValues.find((i) => {\r\n//                     return (index === i) ? true : false\r\n//                   })}\r\n//                   name={index}\r\n//                 // onChange={(e) => { OnChangeFunc(e.target.checked, index, key) }}\r\n//                 />&nbsp;&nbsp;&nbsp;\r\n//                 <label className=\"form-label text-black\"> {index} </label>\r\n//               </div>\r\n//             </Row>\r\n//           </div>\r\n//         </div>\r\n//       )\r\n//     })\r\n//     return arrDiv\r\n//   }\r\n\r\n//   return (\r\n//     <React.Fragment>\r\n//       <header id=\"page-topbar1\" style={{ zIndex: \"1\" }}  >\r\n//         <div className=\"navbar-header blur1\" style={{ paddingRight: \"-10px\", zIndex: \"-1\" }}>\r\n//           <div className=\"d-flex\" >\r\n//             <div className=\"navbar-brand-box d-none d-lg-block\" style={{ backgroundColor: \"white\" }} ></div> \r\n//             <div style={{ paddingLeft: \"7px\" }} >\r\n\r\n//               {\r\n//                 newBtnView ?\r\n//                   <div >\r\n//                     <button type=\"button\" className=\"btn btn-success\"\r\n//                       data-mdb-toggle=\"tooltip\" data-mdb-placement=\"top\" title=\"Create New\"\r\n//                       onClick={NewButtonHandeller}>\r\n//                       New\r\n//                     </button>\r\n//                     <label className=\"font-size-18 form-label text-black \" style={{ paddingLeft: \"7px\", }} >{pageHeading}</label>\r\n//                   </div>\r\n//                   :\r\n//                   <div>\r\n//                     <label className=\"font-size-18  col-ls-6 col-form-label text-black\" style={{ marginLeft: \"6px\" }}>\r\n//                       {pageHeading}</label>\r\n//                     {(bredcrumbItemName.length > 0) ?\r\n//                       <label className=\"font-size-24 form-label  text-nowrap bd-highlight text-primary\"\r\n//                         style={{ paddingLeft: \"7px\", color: \"#5156be\" }} >&nbsp;/&nbsp;{bredcrumbItemName}</label>\r\n//                       : null\r\n//                     }\r\n//                   </div>\r\n//               }\r\n//             </div>\r\n//           </div>\r\n\r\n//           <div className=\" d-flex  justify-content-end\"  >\r\n//             {excelBtnView ?\r\n//               <div className=\"px-2 \" style={{ marginTop: \"7px\" }}>\r\n//                 <Button\r\n//                   type=\"button\"\r\n//                   title=\"Download List\"\r\n//                   color=\"btn btn-sm btn-outline-primary \"\r\n//                   onClick={() => { tog_scroll(); }}\r\n//                   data-toggle=\"modal\"\r\n//                 >\r\n//                   <i className=\"bx bx-download font-size-14\" ></i>\r\n//                 </Button>\r\n//               </div>\r\n//               : null}\r\n//             {\r\n//               (((CountLabel) && (showCountlabel.length > 0))) ?\r\n//                 <div className=\"bg-dark text-center text-light external-event col-form-label  border border-Success rounded-2\"\r\n//                   style={{ width: \"100%\" }}>\r\n//                   <samp className=\"px-2 \">{showCountlabel}</samp>\r\n//                 </div>\r\n//                 :\r\n//                 null\r\n//             }\r\n//           </div>\r\n\r\n\r\n//         </div>\r\n//       </header>\r\n//       <Modal\r\n//         isOpen={modal_scroll}\r\n//         toggle={() => {\r\n//           tog_scroll();\r\n//         }}\r\n//         scrollable={true}\r\n//       >\r\n//         <div className=\"modal-header\">\r\n//           <h5 className=\"modal-title mt-0\">List</h5>\r\n\r\n//           <button\r\n//             type=\"button\"\r\n//             onClick={() => setmodal_scroll(false)}\r\n//             className=\"close\"\r\n//             data-dismiss=\"modal\"\r\n//             aria-label=\"Close\"\r\n//           >\r\n//             <span aria-hidden=\"true\">&times;</span>\r\n//           </button>\r\n//         </div>\r\n//         <div className=\"modal-body\">\r\n//           <AvForm onValidSubmit={(event, values) => { DownloadInExcelButtonHanler(event, values); }}>\r\n//             <ExcelCheckBox />\r\n\r\n//             <div className=\"modal-body\">\r\n//               <div className=\"modal-footer\">\r\n//                 <button\r\n//                   type=\"button\"\r\n//                   className=\"btn btn-secondary\"\r\n//                   onClick={() => setmodal_scroll(false)}\r\n//                 >\r\n//                   Cancel\r\n//                 </button>\r\n//                 <button type=\"submit\" className=\"btn btn-primary\" >\r\n//                   Download in Excel\r\n//                 </button>\r\n//               </div>\r\n//             </div>\r\n//           </AvForm>\r\n//         </div>\r\n//       </Modal>\r\n//     </React.Fragment >\r\n//   )\r\n\r\n// }\r\n\r\n\r\n// export default BreadcrumbNew\r\n\r\n\r\n\r\n\r\nimport React, { useEffect, useState } from \"react\"\r\nimport { Row, Modal, Button, Col, } from \"reactstrap\"\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  BreadcrumbDeleteButton,\r\n  BreadcrumbNonDeleteButton,\r\n  BreadcrumbReset\r\n} from \"../../store/Utilites/Breadcrumb/actions\";\r\nimport { AvForm, AvInput } from \"availity-reactstrap-validation\";\r\nimport * as XLSX from 'xlsx';\r\n\r\nconst BreadcrumbNew = () => {\r\n  const history = useHistory();\r\n  const dispatch = useDispatch();\r\n\r\n  const [modal_scroll, setmodal_scroll] = useState(false);\r\n  const [downListKey, setDownListKey] = useState([]);\r\n  const [trueValues, setTrueValues] = useState({});\r\n\r\n  let {\r\n    showCountlabel = '',\r\n    bredcrumbItemName = '',\r\n    breadcrumbDetail,\r\n    IsRadioButtonView,\r\n    radioButtonNonDelete,\r\n    radioButtonDelete\r\n  } = useSelector((state) => ({\r\n    showCountlabel: state.BreadcrumbReducer.showCountlabel,\r\n    bredcrumbItemName: state.BreadcrumbReducer.bredcrumbItemName,\r\n    breadcrumbDetail: state.BreadcrumbReducer.breadcrumbDetail,\r\n    IsRadioButtonView: state.BreadcrumbReducer.IsRadioButtonView,\r\n    radioButtonNonDelete: state.BreadcrumbReducer.radioButtonNonDelete,\r\n    radioButtonDelete: state.BreadcrumbReducer.radioButtonDelete,\r\n  }));\r\n\r\n  const {\r\n    newBtnView = true,\r\n    excelBtnView = true,\r\n    pageHeading = '',\r\n    CountLabel = true,\r\n    newBtnPath = \"\",\r\n    pageMode = \"\",\r\n    downBtnData = [],\r\n    defaultDownBtnData = {}\r\n  } = breadcrumbDetail;\r\n\r\n\r\n  function tog_scroll() {\r\n    setmodal_scroll(!modal_scroll);\r\n    removeBodyCss();\r\n  }\r\n\r\n  function removeBodyCss() {\r\n    document.body.classList.add(\"no_padding\");\r\n  }\r\n\r\n  const NewButtonHandeller = () => {\r\n    history.push({\r\n      pathname: newBtnPath,\r\n      pageMode: pageMode\r\n    })\r\n  }\r\n\r\n  useEffect(() => {\r\n    dispatch(BreadcrumbReset())\r\n    return () => {\r\n      dispatch(BreadcrumbNonDeleteButton(true));\r\n      dispatch(BreadcrumbDeleteButton(false));\r\n    }\r\n  }, [history.location.pathname]);\r\n\r\n  useEffect(() => {\r\n    var keysValues = {}\r\n\r\n    if (!(downBtnData === undefined)) {\r\n\r\n      if ((downBtnData.length > 0)) {\r\n        const propertyNames = Object.keys(downBtnData[0]);\r\n        setDownListKey(propertyNames)\r\n\r\n        keysValues = Object.keys(defaultDownBtnData).filter(k => defaultDownBtnData[k] === true)\r\n        setTrueValues(keysValues)\r\n      }\r\n    }\r\n  }, [downBtnData])\r\n\r\n  const DownloadInExcelButtonHanler = (event, values) => {\r\n\r\n    let list = []\r\n    let object1 = {}\r\n    var selectedValues = Object.keys(values);\r\n    var filteredValues = selectedValues.filter(function (selectedValues) {\r\n      return values[selectedValues]\r\n    });\r\n    downBtnData.map((index1) => {\r\n      filteredValues.map((index2) => {\r\n        if (index1.hasOwnProperty(index2)) {\r\n          object1[index2] = index1[index2]\r\n        }\r\n      })\r\n      list.push(object1)\r\n      object1 = {}\r\n    })\r\n    const worksheet = XLSX.utils.json_to_sheet(list);\r\n    const workbook = XLSX.utils.book_new();\r\n    XLSX.utils.book_append_sheet(workbook, worksheet, \"Sheet1\");\r\n    XLSX.writeFile(workbook, \"Excel File.xlsx\");\r\n    setmodal_scroll(false)\r\n  }\r\n\r\n\r\n\r\n  const nondeleteHandler = (event) => {\r\n    let CheckedValue = event.target.checked\r\n    if (!CheckedValue && !radioButtonDelete) {\r\n      event.target.checked = true\r\n      return;\r\n    }\r\n    dispatch(BreadcrumbNonDeleteButton(CheckedValue))\r\n\r\n  }\r\n\r\n  const deleteHandler = (event) => {\r\n    let CheckedValue = event.target.checked\r\n    if (!CheckedValue && !radioButtonNonDelete) {\r\n      event.target.checked = true\r\n      return;\r\n    }\r\n    dispatch(BreadcrumbDeleteButton(CheckedValue))\r\n  }\r\n\r\n  function ExcelCheckBox() {\r\n    const arrDiv = []\r\n\r\n    downListKey.forEach((index, key) => {\r\n\r\n      arrDiv.push(\r\n        <div className=\"row\" >\r\n          <div className=\"col col-12\"  >\r\n            <Row>\r\n              <div className=\"col col-12 \" >\r\n                <AvInput\r\n                  className=\" text-black checkbox-border-red\"\r\n                  type=\"checkbox\"\r\n                  id={`chckbox${key}`}\r\n                  defaultChecked={trueValues.find((i) => {\r\n                    return (index === i) ? true : false\r\n                  })}\r\n                  name={index}\r\n                />&nbsp;&nbsp;&nbsp;\r\n                <label className=\"form-label text-black\"> {index} </label>\r\n              </div>\r\n            </Row>\r\n          </div>\r\n        </div>\r\n      )\r\n    })\r\n    return arrDiv\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <header id=\"page-topbar1\" style={{ zIndex: \"1\" }}  >\r\n        <div className=\"navbar-header blur1\" style={{ paddingRight: \"-10px\", zIndex: \"-1\" }}>\r\n          <div className=\"d-flex\" >\r\n            <div className=\"navbar-brand-box d-none d-lg-block\" style={{ backgroundColor: \"white\" }} ></div>\r\n            <div style={{ paddingLeft: \"7px\" }} >\r\n\r\n              {\r\n                newBtnView ?\r\n                  <div  >\r\n                    <button type=\"button\" className=\"btn btn-success\"\r\n                      data-mdb-toggle=\"tooltip\" data-mdb-placement=\"top\" title=\"Create New\"\r\n                      onClick={NewButtonHandeller}>\r\n                      New\r\n                    </button>\r\n                    <label className=\"font-size-18 form-label text-black \" style={{ paddingLeft: \"7px\", }} >{pageHeading}</label>\r\n                  </div>\r\n                  :\r\n                  <div>\r\n                    <label className=\"font-size-18  col-ls-6 col-form-label text-black\" style={{ marginLeft: \"6px\" }}>\r\n                      {pageHeading}</label>\r\n                    {(bredcrumbItemName.length > 0) ?\r\n                      <label className=\"font-size-24 form-label  text-nowrap bd-highlight text-primary\"\r\n                        style={{ paddingLeft: \"7px\", color: \"#5156be\" }} >&nbsp;/&nbsp;{bredcrumbItemName}</label>\r\n                      : null\r\n                    }\r\n                  </div>\r\n              }\r\n            </div>\r\n          </div>\r\n\r\n\r\n          <div className=\" d-flex gap-2 justify-content-end\"  >\r\n\r\n            {(excelBtnView && !(downBtnData.length === 0)) ?\r\n              <div className=\"px-2 \" style={{ marginTop: \"7px\" }}>\r\n                <Button\r\n                  type=\"button\"\r\n                  title=\"Download List\"\r\n                  color=\"btn btn-sm btn-outline-primary \"\r\n                  onClick={() => { tog_scroll(); }}\r\n                  data-toggle=\"modal\"\r\n                >\r\n                  <i className=\"bx bx-download font-size-14\" ></i>\r\n                </Button>\r\n              </div>\r\n              : null}\r\n            {IsRadioButtonView ?\r\n              <div >\r\n                <div className=\"btn-group mt-1\"\r\n                  role=\"group\" aria-label=\"Basic checkbox toggle button group\">\r\n\r\n                  <input type=\"checkbox\"\r\n                    id='btncheckNonDeleted'\r\n                    className=\"btn-check\" autoComplete=\"off\"\r\n                    checked={radioButtonNonDelete}\r\n                    onChange={nondeleteHandler}\r\n                  />\r\n                  <label className=\"btn btn-outline-secondary\" htmlFor=\"btncheckNonDeleted\">NonDeleted</label>\r\n\r\n                  <input type=\"checkbox\" className=\"btn-check\"\r\n                    id='btncheckDeleted'\r\n                    autoComplete=\"off\"\r\n                    checked={radioButtonDelete}\r\n                    onChange={deleteHandler} />\r\n                  <label className=\"btn btn-outline-secondary\" htmlFor=\"btncheckDeleted\" > Deleted</label>\r\n\r\n                </div>\r\n              </div>\r\n              : null}\r\n            {\r\n              (((CountLabel) && (showCountlabel.length > 0))) ?\r\n                <div className=\"bg-dark text-center text-light external-event col-form-label border border-Success rounded-2\"\r\n                  style={{ width: \"100%\", marginBottom: \"7px\" }}>\r\n                  <samp className=\"px-2  \">{showCountlabel}</samp>\r\n                </div>\r\n                :\r\n                null\r\n            }\r\n          </div>\r\n\r\n\r\n        </div>\r\n      </header>\r\n      <Modal\r\n        isOpen={modal_scroll}\r\n        toggle={() => {\r\n          tog_scroll();\r\n        }}\r\n        scrollable={true}\r\n      >\r\n        <div className=\"modal-header\">\r\n          <h5 className=\"modal-title mt-0\">List</h5>\r\n\r\n          <button\r\n            type=\"button\"\r\n            onClick={() => setmodal_scroll(false)}\r\n            className=\"close\"\r\n            data-dismiss=\"modal\"\r\n            aria-label=\"Close\"\r\n          >\r\n            <span aria-hidden=\"true\">&times;</span>\r\n          </button>\r\n        </div>\r\n        <div className=\"modal-body\">\r\n          <AvForm onValidSubmit={(event, values) => { DownloadInExcelButtonHanler(event, values); }}>\r\n            <ExcelCheckBox />\r\n\r\n            <div className=\"modal-body\">\r\n              <div className=\"modal-footer\">\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"btn btn-secondary\"\r\n                  onClick={() => setmodal_scroll(false)}\r\n                >\r\n                  Cancel\r\n                </button>\r\n                <button type=\"submit\" className=\"btn btn-primary\" >\r\n                  Download in Excel\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </AvForm>\r\n        </div>\r\n      </Modal>\r\n    </React.Fragment >\r\n  )\r\n\r\n}\r\n\r\n\r\nexport default BreadcrumbNew\r\n\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\GeneralRedux\\saga.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\GeneralRedux\\reducer.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\GeneralPage\\GeneralList.js",["3395"],"import React, { useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport GeneralMaster from \"./GeneralMaster\";\r\nimport {\r\n    deleteGeneralIDSuccess,\r\n    delete_General_ID,\r\n    editGeneralID,\r\n    PostGenerallist,\r\n    SaveMethodForGeneralSuccess,\r\n    updateGeneralIDSuccess,\r\n    PostGenerallistSuccess\r\n} from \"../../../store/Administrator/GeneralRedux/action\";\r\nimport { commonPageFieldList, commonPageFieldListSuccess } from \"../../../store/actions\";\r\nimport CommonListPage from \"../../../components/Common/CommonMasterListPage\";\r\nimport * as pageId from \"../../../routes/allPageID\"\r\nimport * as url from \"../../../routes/route_url\";\r\nimport { loginCompanyID } from \"../../../components/Common/CommonFunction\";\r\nimport { PageLoadingSpinner} from \"../../../components/Common/CommonButton\";\r\n\r\n\r\nconst GeneralList = () => {\r\n\r\n    const dispatch = useDispatch();\r\n    const reducers = useSelector(\r\n        (state) => ({\r\n            listBtnLoading: state.GeneralReducer.listBtnLoading,\r\n            GoBtnlistloading: state.GeneralReducer.loading,\r\n            tableList: state.GeneralReducer.GeneralList,\r\n            editData: state.GeneralReducer.editData,\r\n            updateMsg: state.GeneralReducer.updateMessage,\r\n            deleteMsg: state.GeneralReducer.deleteMessage,\r\n            userAccess: state.Login.RoleAccessUpdateData,\r\n            postMsg: state.GeneralReducer.postMsg,\r\n            pageField: state.CommonPageFieldReducer.pageFieldList\r\n        })\r\n    );\r\n\r\n    const action = {\r\n        getList: PostGenerallist,\r\n        editId: editGeneralID,\r\n        deleteId: delete_General_ID,\r\n        postSucc: SaveMethodForGeneralSuccess,\r\n        updateSucc: updateGeneralIDSuccess,\r\n        deleteSucc: deleteGeneralIDSuccess\r\n    }\r\n\r\n    //  This UseEffect => Featch Modules List data  First Rendering\r\n    useEffect(() => {\r\n        const page_Id = pageId.GENERAL_LIST\r\n        dispatch(commonPageFieldListSuccess(null))\r\n        dispatch(commonPageFieldList(page_Id))\r\n        dispatch(PostGenerallist(getlistBody()));\r\n        return () => {\r\n            dispatch(PostGenerallistSuccess([]));\r\n            dispatch(commonPageFieldListSuccess(null))\r\n          }\r\n    }, []);\r\n\r\n    const { pageField, GoBtnlistloading } = reducers\r\n\r\n    function getlistBody() {\r\n        return JSON.stringify({\r\n            TypeID: 2,\r\n            Company: loginCompanyID(),\r\n        });\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <PageLoadingSpinner isLoading={(GoBtnlistloading || !pageField)} />\r\n            {\r\n                (pageField) &&\r\n                <CommonListPage\r\n                    action={action}\r\n                    reducers={reducers}\r\n                    MasterModal={GeneralMaster}\r\n                    masterPath={url.GENERAL}\r\n                    getListbodyFunc={getlistBody}\r\n                    ButtonMsgLable={\"General\"}\r\n                    deleteName={\"Name\"}\r\n                />\r\n\r\n            }\r\n\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default GeneralList;\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\GeneralPage\\GeneralMaster.js",["3396","3397","3398","3399","3400","3401","3402","3403"],"import React, { useEffect, useState } from \"react\";\r\nimport {\r\n    Card,\r\n    CardBody,\r\n    CardHeader,\r\n    Col,\r\n    Container,\r\n    FormGroup,\r\n    Input,\r\n    Label,\r\n    Row\r\n} from \"reactstrap\";\r\nimport Select from \"react-select\";\r\nimport { MetaTags } from \"react-meta-tags\";\r\nimport {\r\n    Breadcrumb_inputName,\r\n    commonPageField,\r\n    commonPageFieldSuccess\r\n} from \"../../../store/actions\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n    SaveMethodForGeneral,\r\n    SaveMethodForGeneralSuccess,\r\n    editGeneralIDSuccess,\r\n    updateGeneralID,\r\n    updateGeneralIDSuccess,\r\n    PostType,\r\n    PostTypeSuccess\r\n} from \"../../../store/Administrator/GeneralRedux/action\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {\r\n    comAddPageFieldFunc,\r\n    formValid,\r\n    initialFiledFunc,\r\n    onChangeSelect,\r\n    onChangeText,\r\n    resetFunction\r\n} from \"../../../components/Common/validationFunction\";\r\nimport { SaveButton } from \"../../../components/Common/CommonButton\";\r\nimport {\r\n    breadcrumbReturnFunc,\r\n    loginUserID,\r\n    loginCompanyID,\r\n    btnIsDissablefunc,\r\n    metaTagLabel\r\n} from \"../../../components/Common/CommonFunction\";\r\nimport * as url from \"../../../routes/route_url\";\r\nimport * as pageId from \"../../../routes/allPageID\"\r\nimport * as mode from \"../../../routes/PageMode\"\r\nimport { customAlert } from \"../../../CustomAlert/ConfirmDialog\";\r\n\r\nconst GeneralMaster = (props) => {\r\n\r\n    const history = useHistory()\r\n    const dispatch = useDispatch();\r\n\r\n    const fileds = {\r\n        id: \"\",\r\n        TypeName: \"\",\r\n        Name: \"\",\r\n        IsActive: true\r\n    }\r\n\r\n    const [state, setState] = useState(() => initialFiledFunc(fileds))\r\n\r\n    const [pageMode, setPageMode] = useState(mode.defaultsave);\r\n    const [modalCss, setModalCss] = useState(false);\r\n    const [userPageAccessState, setUserAccState] = useState(\"\");\r\n    const [editCreatedBy, seteditCreatedBy] = useState(\"\");\r\n\r\n    //Access redux store Data /  'save_ModuleSuccess' action data\r\n    const {\r\n        postMsg,\r\n        Type = [],\r\n        pageField,\r\n        updateMsg,\r\n        saveBtnloading,\r\n        userAccess } = useSelector((state) => ({\r\n            saveBtnloading: state.GeneralReducer.saveBtnloading,\r\n            postMsg: state.GeneralReducer.postMsg,\r\n            updateMsg: state.GeneralReducer.updateMessage,\r\n            Type: state.GeneralReducer.Type,\r\n            userAccess: state.Login.RoleAccessUpdateData,\r\n            pageField: state.CommonPageFieldReducer.pageField\r\n        }));\r\n\r\n    useEffect(() => {\r\n        const page_Id = pageId.GENERAL\r\n        dispatch(commonPageFieldSuccess(null));\r\n        dispatch(commonPageField(page_Id))\r\n        dispatch(PostTypeSuccess());\r\n    }, []);\r\n\r\n    const values = { ...state.values }\r\n    const { isError } = state;\r\n    const { fieldLabel } = state;\r\n\r\n    const location = { ...history.location }\r\n    const hasShowloction = location.hasOwnProperty(mode.editValue)\r\n    const hasShowModal = props.hasOwnProperty(mode.editValue)\r\n\r\n    // userAccess useEffect\r\n    useEffect(() => {\r\n        let userAcc = null;\r\n        let locationPath = location.pathname;\r\n\r\n        if (hasShowModal) {\r\n            locationPath = props.masterPath;\r\n        };\r\n\r\n        userAcc = userAccess.find((inx) => {\r\n            return (`/${inx.ActualPagePath}` === locationPath)\r\n        })\r\n\r\n        if (userAcc) {\r\n            setUserAccState(userAcc)\r\n            breadcrumbReturnFunc({ dispatch, userAcc });\r\n        };\r\n    }, [userAccess])\r\n\r\n    // This UseEffect 'SetEdit' data and 'autoFocus' while this Component load First Time.\r\n    useEffect(() => {\r\n\r\n        if ((hasShowloction || hasShowModal)) {\r\n\r\n            let hasEditVal = null\r\n            if (hasShowloction) {\r\n                setPageMode(location.pageMode)\r\n                hasEditVal = location.editValue\r\n            }\r\n            else if (hasShowModal) {\r\n                hasEditVal = props.editValue\r\n                setPageMode(props.pageMode)\r\n                setModalCss(true)\r\n            }\r\n\r\n            if (hasEditVal) {\r\n\r\n                const { id, Name, TypeName, TypeID, IsActive } = hasEditVal\r\n                const { values, fieldLabel, hasValid, required, isError } = { ...state }\r\n\r\n                hasValid.Name.valid = true;\r\n                hasValid.TypeName.valid = true;\r\n                hasValid.IsActive.valid = true;\r\n\r\n                values.id = id\r\n                values.Name = Name;\r\n                values.TypeName = { label: TypeName, value: TypeID };\r\n                values.IsActive = IsActive;\r\n\r\n                setState({ values, fieldLabel, hasValid, required, isError })\r\n                dispatch(Breadcrumb_inputName(hasEditVal.Name))\r\n                seteditCreatedBy(hasEditVal.CreatedBy)\r\n            }\r\n            dispatch(editGeneralIDSuccess({ Status: false }))\r\n        }\r\n    }, [])\r\n\r\n\r\n    useEffect(() => {\r\n        const jsonBody = JSON.stringify({\r\n            Company: loginCompanyID(),\r\n        });\r\n        dispatch(PostType(jsonBody));\r\n    }, []);\r\n\r\n    useEffect(async () => {\r\n        if ((postMsg.Status === true) && (postMsg.StatusCode === 200)) {\r\n            dispatch(SaveMethodForGeneralSuccess({ Status: false }))\r\n            setState(() => resetFunction(fileds, state)) //Clear form values \r\n            dispatch(Breadcrumb_inputName(''))\r\n\r\n            if (pageMode === \"other\") {\r\n                customAlert({\r\n                    Type: 1,\r\n                    Message: postMsg.Message,\r\n                })\r\n            }\r\n            else {\r\n                let isPermission = await customAlert({\r\n                    Type: 1,\r\n                    Status: true,\r\n                    Message: postMsg.Message,\r\n                })\r\n                if (isPermission) {\r\n                    history.push({ pathname: url.GENERAL_LIST })\r\n                }\r\n            }\r\n        }\r\n        else if (postMsg.Status === true) {\r\n            dispatch(SaveMethodForGeneralSuccess({ Status: false }))\r\n            customAlert({\r\n                Type: 4,\r\n                Message: JSON.stringify(postMsg.Message),\r\n            })\r\n        }\r\n    }, [postMsg])\r\n\r\n    useEffect(() => {\r\n        if (updateMsg.Status === true && updateMsg.StatusCode === 200 && !modalCss) {\r\n            setState(() => resetFunction(fileds, state)) // Clear form values \r\n            history.push({\r\n                pathname: url.GENERAL_LIST,\r\n            })\r\n        } else if (updateMsg.Status === true && !modalCss) {\r\n            dispatch(updateGeneralIDSuccess({ Status: false }));\r\n            dispatch(\r\n                customAlert({\r\n                    Type: 3,\r\n                    Message: JSON.stringify(updateMsg.Message),\r\n                  })\r\n            );\r\n        }\r\n    }, [updateMsg, modalCss]);\r\n\r\n    useEffect(() => {\r\n        if (pageField) {\r\n            const fieldArr = pageField.PageFieldMaster\r\n            comAddPageFieldFunc({ state, setState, fieldArr })\r\n        }\r\n    }, [pageField])\r\n\r\n    const TypeDropdownOptions = Type.map((i) => ({ label: i.Name, value: i.id }))\r\n\r\n    const SaveHandler = async (event) => {\r\n        event.preventDefault();\r\n        const btnId = event.target.id\r\n        try {\r\n            if (formValid(state, setState)) {\r\n                btnIsDissablefunc({ btnId, state: true })\r\n\r\n                const jsonBody = JSON.stringify({\r\n                    Name: values.Name,\r\n                    TypeID: values.TypeName.value,\r\n                    Company: loginCompanyID(),\r\n                    IsActive: values.IsActive,\r\n                    CreatedBy: loginUserID(),\r\n                    UpdatedBy: loginUserID()\r\n                });\r\n                if (pageMode === mode.edit) {\r\n                    dispatch(updateGeneralID({ jsonBody, updateId: values.id, btnId }));\r\n                }\r\n                else {\r\n                    dispatch(SaveMethodForGeneral({ jsonBody, btnId }));\r\n                }\r\n\r\n            }\r\n        } catch (e) { btnIsDissablefunc({ btnId, state: false }) }\r\n    };\r\n\r\n\r\n    // IsEditMode_Css is use of module Edit_mode (reduce page-content marging)\r\n    var IsEditMode_Css = ''\r\n    if ((modalCss) || (pageMode === mode.dropdownAdd)) { IsEditMode_Css = \"-5.5%\" };\r\n\r\n    if (!(userPageAccessState === '')) {\r\n        return (\r\n            <React.Fragment>\r\n                <MetaTags>{metaTagLabel(userPageAccessState)}</MetaTags>\r\n\r\n                <div className=\"page-content\" style={{ marginTop: IsEditMode_Css, height: \"18cm\" }}>\r\n                    <Container fluid>\r\n                        <Card className=\"text-black\">\r\n                            <CardHeader className=\"card-header   text-black c_card_header\" >\r\n                                <h4 className=\"card-title text-black\">{userPageAccessState.PageDescription}</h4>\r\n                                <p className=\"card-title-desc text-black\">{userPageAccessState.PageDescriptionDetails}</p>\r\n                            </CardHeader>\r\n\r\n                            <CardBody className=\" vh-10 0 text-black\" style={{ backgroundColor: \"#whitesmoke\" }} >\r\n                                <form noValidate>\r\n                                    \r\n                                    <Card>\r\n                                        <CardBody className=\"c_card_body\">\r\n                                           \r\n                                            <Row>\r\n                                                <Col md=\"4\" >\r\n                                                    <FormGroup className=\"mb-3\">\r\n                                                        <Label htmlFor=\"validationCustom01\"> {fieldLabel.TypeName} </Label>\r\n                                                        <Col sm={12} >\r\n                                                            <Select\r\n                                                                name=\"TypeName\"\r\n                                                                value={values.TypeName}\r\n                                                                autoFocus={true}\r\n                                                                isSearchable={true}\r\n                                                                isDisabled={(pageMode === \"edit\") ? true : false}\r\n                                                                className=\"react-dropdown\"\r\n                                                                classNamePrefix=\"dropdown\"\r\n                                                                options={TypeDropdownOptions}\r\n                                                                onChange={(hasSelect, evn) => onChangeSelect({ hasSelect, evn, state, setState, })}\r\n                                                            />\r\n                                                            {isError.TypeName.length > 0 && (\r\n                                                                <span className=\"text-danger f-8\"><small>{isError.TypeName}</small></span>\r\n                                                            )}\r\n                                                        </Col>\r\n                                                    </FormGroup>\r\n                                                </Col>\r\n                                            </Row>\r\n                                            <Row>\r\n                                                <FormGroup className=\"mb-2 col col-sm-4 \">\r\n                                                    <Label htmlFor=\"validationCustom01\">{fieldLabel.Name} </Label>\r\n                                                    <Input\r\n                                                        name=\"Name\"\r\n                                                        id=\"txtName\"\r\n                                                        value={values.Name}\r\n                                                        type=\"text\"\r\n                                                        className={isError.Name.length > 0 ? \"is-invalid form-control\" : \"form-control\"}\r\n                                                        placeholder=\"Please Enter Name\"\r\n                                                        autoComplete='off'\r\n                                                        onChange={(event) => {\r\n                                                            onChangeText({ event, state, setState })\r\n                                                            dispatch(Breadcrumb_inputName(event.target.value))\r\n                                                        }}\r\n                                                    />\r\n                                                    {isError.Name.length > 0 && (\r\n                                                        <span className=\"invalid-feedback\">{isError.Name}</span>\r\n                                                    )}\r\n                                                </FormGroup>\r\n                                            </Row>\r\n\r\n                                            <Row>\r\n                                                <FormGroup className=\"mb-2 col col-sm-5\">\r\n                                                    <Row className=\"justify-content-md-left\">\r\n                                                        <Label htmlFor=\"horizontal-firstname-input\" className=\"col-sm-3 col-form-label\">{fieldLabel.IsActive}</Label>\r\n                                                        <Col md={2} style={{ marginTop: '9px' }} >\r\n                                                            <div className=\"form-check form-switch form-switch-md mb-3\">\r\n                                                                <Input type=\"checkbox\" className=\"form-check-input\"\r\n                                                                    checked={values.IsActive}\r\n                                                                    name=\"IsActive\"\r\n                                                                    onChange={(e) => {\r\n                                                                        setState((i) => {\r\n                                                                            const a = { ...i }\r\n                                                                            a.values.IsActive = e.target.checked;\r\n                                                                            return a\r\n                                                                        })\r\n                                                                    }}\r\n                                                                />\r\n                                                            </div>\r\n                                                        </Col>\r\n                                                    </Row>\r\n                                                </FormGroup>\r\n                                            </Row>\r\n                                            \r\n                                            <FormGroup className=\"mt-1\">\r\n                                                <Row>\r\n                                                    <Col sm={2}>\r\n                                                        <SaveButton\r\n                                                            loading={saveBtnloading}\r\n                                                            pageMode={pageMode}\r\n                                                            onClick={SaveHandler}\r\n                                                            userAcc={userPageAccessState}\r\n                                                            editCreatedBy={editCreatedBy}\r\n                                                            module={\"GeneralMaster\"}\r\n                                                        />\r\n                                                    </Col>\r\n                                                </Row>\r\n                                            </FormGroup>\r\n                                        </CardBody>\r\n                                    </Card>\r\n                                  \r\n                                </form>\r\n                            </CardBody>\r\n                        </Card>\r\n                    </Container>\r\n                </div>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n    else {\r\n        return (\r\n            <React.Fragment></React.Fragment>\r\n        )\r\n    }\r\n};\r\n\r\nexport default GeneralMaster\r\n\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\GeneralRedux\\actionType.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\GeneralRedux\\action.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Sale\\Invoice\\Invoice.js",["3404","3405","3406","3407","3408","3409","3410","3411","3412","3413","3414","3415","3416","3417","3418"],"import React, { useEffect, useState, } from \"react\";\r\nimport {\r\n    Col,\r\n    FormGroup,\r\n    Input,\r\n    Label,\r\n    Row,\r\n    Table\r\n} from \"reactstrap\";\r\nimport { MetaTags } from \"react-meta-tags\";\r\nimport { BreadcrumbShowCountlabel, commonPageFieldSuccess, getpdfReportdata } from \"../../../store/actions\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { commonPageField } from \"../../../store/actions\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {\r\n    comAddPageFieldFunc,\r\n    formValid,\r\n    initialFiledFunc,\r\n    onChangeDate,\r\n    onChangeSelect,\r\n} from \"../../../components/Common/validationFunction\";\r\nimport Select from \"react-select\";\r\nimport { GotoInvoiceBtn, SaveAndDownloadPDF, SaveButton } from \"../../../components/Common/CommonButton\";\r\nimport {\r\n    updateBOMListSuccess\r\n} from \"../../../store/Production/BOMRedux/action\";\r\nimport * as mode from \"../../../routes/PageMode\";\r\nimport * as pageId from \"../../../routes/allPageID\"\r\nimport * as url from \"../../../routes/route_url\"\r\nimport {\r\n    GoButtonForinvoiceAdd,\r\n    GoButtonForinvoiceAddSuccess,\r\n    Uploaded_EInvoiceAction,\r\n    invoiceSaveAction,\r\n    invoiceSaveActionSuccess,\r\n    makeIB_InvoiceActionSuccess\r\n} from \"../../../store/Sales/Invoice/action\";\r\nimport { GetVenderSupplierCustomer, GetVenderSupplierCustomerSuccess } from \"../../../store/CommonAPI/SupplierRedux/actions\";\r\nimport { customAlert } from \"../../../CustomAlert/ConfirmDialog\";\r\nimport {\r\n    invoice_discountCalculate_Func,\r\n    innerStockCaculation,\r\n    orderQtyOnChange,\r\n    orderQtyUnit_SelectOnchange,\r\n    stockQtyOnChange,\r\n    settingBaseRoundOffAmountFunc\r\n} from \"./invoiceCaculations\";\r\nimport \"./invoice.scss\"\r\nimport * as _cfunc from \"../../../components/Common/CommonFunction\";\r\nimport { CInput, C_DatePicker, decimalRegx } from \"../../../CustomValidateForm\";\r\nimport { getVehicleList, getVehicleListSuccess } from \"../../../store/Administrator/VehicleRedux/action\";\r\nimport { Invoice_1_Edit_API_Singel_Get } from \"../../../helpers/backend_helper\";\r\nimport * as report from '../../../Reports/ReportIndex'\r\nimport CustomTable from \"../../../CustomTable2\";\r\n\r\nconst Invoice = (props) => {\r\n\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n    const currentDate_ymd = _cfunc.date_ymd_func();\r\n    const subPageMode = history.location.pathname\r\n    const systemSetting = _cfunc.loginSystemSetting();\r\n\r\n    const goBtnId = `ADDGoBtn${subPageMode}`\r\n    const saveBtnid = `saveBtn${subPageMode}`\r\n\r\n    const fileds = {\r\n        InvoiceDate: currentDate_ymd,\r\n        Customer: \"\",\r\n        VehicleNo: \"\"\r\n    }\r\n\r\n    const [state, setState] = useState(() => initialFiledFunc(fileds))\r\n    const [orderItemDetails, setOrderItemDetails] = useState([])\r\n    const [orderIDs, setOrderIDs] = useState([])\r\n\r\n    // for invoicer page heder dicount functionality useSate ************************************\r\n    const [discountValueAll, setDiscountValueAll] = useState(\"\");\r\n    const [discountTypeAll, setDiscountTypeAll] = useState({ value: 2, label: \" % \" });\r\n    const [discountDropOption] = useState([{ value: 1, label: \"Rs\" }, { value: 2, label: \"%\" }])\r\n    const [changeAllDiscount, setChangeAllDiscount] = useState(false)\r\n    const [forceReload, setForceReload] = useState(false)\r\n    // ****************************************************************************\r\n\r\n    const [modalCss] = useState(false);\r\n    const [pageMode] = useState(mode.defaultsave);\r\n    const [userPageAccessState, setUserAccState] = useState('');\r\n\r\n    const {\r\n        postMsg,\r\n        updateMsg,\r\n        pageField,\r\n        userAccess,\r\n        gobutton_Add = { Status: false },\r\n        vendorSupplierCustomer,\r\n        makeIBInvoice,\r\n        VehicleNumber,\r\n        goBtnloading,\r\n        saveBtnloading,\r\n        saveAndPdfBtnLoading,\r\n        commonPartyDropSelect\r\n    } = useSelector((state) => ({\r\n        postMsg: state.InvoiceReducer.postMsg,\r\n        updateMsg: state.BOMReducer.updateMsg,\r\n        userAccess: state.Login.RoleAccessUpdateData,\r\n        pageField: state.CommonPageFieldReducer.pageField,\r\n        customer: state.CommonAPI_Reducer.customer,\r\n        gobutton_Add: state.InvoiceReducer.gobutton_Add,\r\n        vendorSupplierCustomer: state.CommonAPI_Reducer.vendorSupplierCustomer,\r\n        VehicleNumber: state.VehicleReducer.VehicleList,\r\n        makeIBInvoice: state.InvoiceReducer.makeIBInvoice,\r\n        saveBtnloading: state.InvoiceReducer.saveBtnloading,\r\n        goBtnloading: state.InvoiceReducer.goBtnloading,\r\n        saveAndPdfBtnLoading: state.InvoiceReducer.saveAndPdfBtnLoading,\r\n        commonPartyDropSelect: state.CommonPartyDropdownReducer.commonPartyDropSelect\r\n    }));\r\n\r\n    const location = { ...history.location }\r\n    const hasShowModal = props.hasOwnProperty(\"editValue\")\r\n\r\n    const values = { ...state.values }\r\n    const { isError } = state;\r\n    const { fieldLabel } = state;\r\n\r\n    useEffect(() => {\r\n        dispatch(commonPageFieldSuccess(null));\r\n        dispatch(commonPageField(pageId.INVOICE_1))\r\n        dispatch(GoButtonForinvoiceAddSuccess([]))\r\n\r\n    }, []);\r\n\r\n    // Common Party Dropdown useEffect\r\n    useEffect(() => {\r\n\r\n        if (commonPartyDropSelect.value > 0) {\r\n            dispatch(getVehicleList({ ..._cfunc.loginJsonBody(), \"PartyID\": commonPartyDropSelect.value }));\r\n            dispatch(GetVenderSupplierCustomer({ subPageMode, RouteID: \"\", \"PartyID\": commonPartyDropSelect.value }));\r\n        }\r\n\r\n        return () => {\r\n            dispatch(GetVenderSupplierCustomerSuccess([]));\r\n            dispatch(getVehicleListSuccess([]));\r\n        }\r\n\r\n    }, [commonPartyDropSelect]);\r\n\r\n    // userAccess useEffect\r\n    useEffect(() => {\r\n        let userAcc = null;\r\n        let locationPath = location.pathname;\r\n\r\n        if (hasShowModal) {\r\n            locationPath = props.masterPath;\r\n        };\r\n        userAcc = userAccess.find((inx) => {\r\n            return (`/${inx.ActualPagePath}` === locationPath)\r\n        })\r\n\r\n        if (userAcc) {\r\n            setUserAccState(userAcc)\r\n            _cfunc.breadcrumbReturnFunc({ dispatch, userAcc });\r\n        };\r\n    }, [userAccess])\r\n\r\n    useEffect(async () => {\r\n        if (postMsg.Status === true && postMsg.StatusCode === 200) {\r\n            dispatch(invoiceSaveActionSuccess({ Status: false })); // Reset the status to false\r\n\r\n            //************************* / Fetch PDF report data if saveAndDownloadPdfMode is true /\r\n            if (postMsg.saveAndDownloadPdfMode) {\r\n                const config = {\r\n                    editId: postMsg.InvoiceID,\r\n                    ReportType: report.invoice,\r\n                };\r\n                dispatch(getpdfReportdata(Invoice_1_Edit_API_Singel_Get, config));\r\n            }\r\n\r\n            // ***************** Upload E-Invoice if AutoEInvoice and EInvoiceApplicable are both \"1\"  *****/\r\n            if (systemSetting.AutoEInvoice === \"1\" && systemSetting.EInvoiceApplicable === \"1\") {\r\n                let btnId = `btn-E-Invoice-Upload-${postMsg.InvoiceID}`;\r\n                try {\r\n                    dispatch(Uploaded_EInvoiceAction({ btnId, RowId: postMsg.InvoiceID, UserID: _cfunc.loginUserID() }));\r\n                } catch (error) { }\r\n            }\r\n\r\n            customAlert({\r\n                Type: 1,\r\n                Message: postMsg.Message,\r\n            });\r\n\r\n            // Redirect to appropriate page based on subPageMode\r\n            if (subPageMode === url.INVOICE_1) {\r\n                history.push({ pathname: url.INVOICE_LIST_1 });\r\n            } else if (subPageMode === url.IB_INVOICE) {\r\n                history.push({ pathname: url.IB_INVOICE_LIST });\r\n            }\r\n        } else if (postMsg.Status === true) {\r\n            // Show error alert message with the JSON stringified postMsg.Message\r\n            customAlert({\r\n                Type: 4,\r\n                Message: JSON.stringify(postMsg.Message),\r\n            });\r\n        }\r\n    }, [postMsg]);\r\n\r\n    useEffect(() => {\r\n\r\n        if ((updateMsg.Status === true) && (updateMsg.StatusCode === 200) && !(modalCss)) {\r\n            history.push({\r\n                pathname: url.MATERIAL_ISSUE_LIST,\r\n            })\r\n        } else if (updateMsg.Status === true && !modalCss) {\r\n            dispatch(updateBOMListSuccess({ Status: false }));\r\n            customAlert({\r\n                Type: 3,\r\n                Status: true,\r\n                Message: JSON.stringify(updateMsg.Message),\r\n            })\r\n        }\r\n    }, [updateMsg, modalCss]);\r\n\r\n    useEffect(() => {\r\n        if (pageField) {\r\n            const fieldArr = pageField.PageFieldMaster\r\n            comAddPageFieldFunc({ state, setState, fieldArr })\r\n        }\r\n    }, [pageField])\r\n\r\n    useEffect(() => {\r\n\r\n        if (makeIBInvoice.Status === true && makeIBInvoice.StatusCode === 200) {\r\n            setState((i) => {\r\n                const obj = { ...i }\r\n                obj.values.Customer = makeIBInvoice.customer;\r\n                obj.hasValid.Customer.valid = true;\r\n                return obj\r\n            })\r\n\r\n            dispatch(makeIB_InvoiceActionSuccess({ Status: false }))\r\n        }\r\n    }, [makeIBInvoice]);\r\n\r\n    useEffect(() => {\r\n\r\n        if (gobutton_Add.Status === true && gobutton_Add.StatusCode === 200) {\r\n            setState((i) => {\r\n                const obj = { ...i }\r\n                obj.values.Customer = gobutton_Add.customer;\r\n                obj.hasValid.Customer.valid = true;\r\n                return obj\r\n            })\r\n\r\n            setOrderItemDetails(gobutton_Add.Data.OrderItemDetails);\r\n\r\n            // **********************************************************\r\n            totalAmountCalcuationFunc(gobutton_Add.Data.OrderItemDetails)// show breadcrump tolat amount function//passs table array \r\n            //*********************************************************** */\r\n\r\n            setOrderIDs(gobutton_Add.Data.OrderIDs)\r\n            dispatch(GoButtonForinvoiceAddSuccess({ Status: false }))\r\n        }\r\n    }, [gobutton_Add]);\r\n\r\n    useEffect(() => _cfunc.tableInputArrowUpDounFunc(\"#table_Arrow\"), [orderItemDetails]);\r\n\r\n    const CustomerDropdown_Options = vendorSupplierCustomer.map((index) => ({\r\n        value: index.id,\r\n        label: index.Name,\r\n    }));\r\n\r\n    const VehicleNumber_Options = VehicleNumber.map((index) => ({\r\n        value: index.id,\r\n        label: index.VehicleNumber,\r\n    }));\r\n\r\n    const pagesListColumns = [\r\n        {//***************ItemName********************************************************************* */\r\n            text: \"Item Name\",\r\n            dataField: \"ItemName\",\r\n            attrs: (cell, row, rowIndex, colIndex) => ({ 'data-label': \"ItemName\", \"sticky-col\": \"true\" }),\r\n            // headerClasses: 'd-none d-sm-table-cell', // Hide on mobile\r\n            formatter: (cellContent, index1) => {\r\n                return (\r\n                    <>\r\n                        <div>\r\n                            <samp id={`ItemName${index1.id}`}>{index1.ItemName}</samp>\r\n                        </div>\r\n                        {\r\n                            (index1.StockInValid) ? <div><samp id={`StockInvalidMsg-${index1.id}`} style={{ color: \"red\" }}> {index1.StockInvalidMsg}</samp></div>\r\n                                : <></>\r\n                        }\r\n                    </>\r\n                )\r\n            },\r\n        },\r\n        {//***************Quantity********************************************************************* */\r\n            text: \"Quantity/Unit\",\r\n            dataField: \"\",\r\n            formatExtraData: { tableList: orderItemDetails },\r\n            attrs: (cell, row, rowIndex, colIndex) => ({ 'data-label': \"Quantity/Unit\" }),\r\n            formatter: (cellContent, index1, keys_, { tableList = [] }) => (\r\n                <>\r\n                    <div>\r\n                        <Input\r\n                            type=\"text\"\r\n                            disabled={pageMode === 'edit' ? true : false}\r\n                            id={`OrderQty-${index1.id}`}\r\n                            className=\"input\"\r\n                            style={{ textAlign: \"right\" }}\r\n                            key={index1.id}\r\n                            autoComplete=\"off\"\r\n                            defaultValue={index1.Quantity}\r\n                            onChange={(event) => {\r\n                                orderQtyOnChange(event, index1);\r\n                                totalAmountCalcuationFunc(tableList);\r\n                            }}\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        <div id=\"select\">\r\n                            <Select\r\n                                classNamePrefix=\"select2-selection\"\r\n                                id={\"ddlUnit\"}\r\n                                isDisabled={true}\r\n                                defaultValue={index1.default_UnitDropvalue}\r\n                                options={index1.UnitDetails.map(i => ({\r\n                                    \"label\": i.UnitName,\r\n                                    \"value\": i.UnitID,\r\n                                    \"ConversionUnit\": i.ConversionUnit,\r\n                                    \"Unitlabel\": i.Unitlabel,\r\n                                    \"BaseUnitQuantity\": i.BaseUnitQuantity,\r\n                                    \"BaseUnitQuantityNoUnit\": i.BaseUnitQuantityNoUnit,\r\n                                }))}\r\n                                onChange={(event) => {\r\n                                    orderQtyUnit_SelectOnchange(event, index1);\r\n                                    totalAmountCalcuationFunc(tableList);\r\n                                }}\r\n                            ></Select>\r\n                        </div>\r\n                    </div>\r\n                    <div >\r\n                        <span>Order-Qty :</span>\r\n                        <samp>{index1.OrderQty}</samp>\r\n                        <samp>{index1.UnitName}</samp>\r\n                    </div>\r\n                </>\r\n            ),\r\n        },\r\n        {//***************StockDetails********************************************************************* */\r\n            text: \"Stock Details\",\r\n            dataField: \"StockDetails\",\r\n            attrs: (cell, row, rowIndex, colIndex) => ({ 'data-label1': \"Stock Details\", \"stock-header\": \"true\" }),\r\n            headerStyle: { zIndex: \"2\" },\r\n            // classes: '_StockDetails-header',\r\n            formatExtraData: { tableList: orderItemDetails },\r\n            formatter: (cellContent, index1, keys_, { tableList = [] }) => (\r\n                <div className=\"table-responsive\">\r\n                    <table className=\"custom-table \">\r\n                        <thead >\r\n                            <tr>\r\n                                <th>BatchCode</th>\r\n                                <th>Stock Quantity</th>\r\n                                <th>Quantity</th>\r\n                                <th>Basic Rate</th>\r\n                                <th>MRP</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {cellContent.map((index2) => (\r\n                                <tr key={index1.id}>\r\n                                    <td data-label=\"BatchCode\">{index2.BatchCode}</td>\r\n                                    <td data-label=\"Stock Quantity\" style={{ textAlign: \"right\" }} >\r\n                                        <samp id={`ActualQuantity-${index1.id}-${index2.id}`}>{index2.ActualQuantity}</samp>\r\n                                    </td>\r\n                                    <td data-label='Quantity'>\r\n                                        <Input\r\n                                            type=\"text\"\r\n                                            disabled={pageMode === 'edit' ? true : false}\r\n                                            style={{ textAlign: \"right\" }}\r\n                                            key={`batchQty${index1.id}-${index2.id}`}\r\n                                            id={`batchQty${index1.id}-${index2.id}`}\r\n                                            defaultValue={index2.Qty}\r\n                                            onChange={(event) => {\r\n                                                stockQtyOnChange(event, index1, index2);\r\n                                                totalAmountCalcuationFunc(tableList);\r\n                                            }}\r\n                                        />\r\n                                    </td>\r\n                                    <td data-label='Basic Rate' style={{ textAlign: \"right\" }}>\r\n                                        <span id={`stockItemRate-${index1.id}-${index2.id}`}>{_cfunc.amountCommaSeparateFunc(Number(index2.Rate).toFixed(2))}</span>\r\n                                    </td>\r\n                                    <td data-label='MRP' style={{ textAlign: \"right\" }}>{index2.MRP}</td>\r\n                                </tr>\r\n                            ))}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            ),\r\n        },\r\n        {//***************Discount********************************************************************* */\r\n            text: \"Discount/unit\",\r\n            dataField: \"\",\r\n            attrs: (cell, row, rowIndex, colIndex) => ({ 'data-label': \"Discount/unit\" }),\r\n            formatExtraData: {\r\n                discountValueAll: discountValueAll,\r\n                discountTypeAll: discountTypeAll,\r\n                changeAllDiscount: changeAllDiscount,\r\n                forceReload: forceReload,\r\n                tableList: orderItemDetails\r\n            },\r\n            headerFormatter: () => {\r\n                return (\r\n                    <div className=\"\">\r\n                        {orderItemDetails.length <= 0 ?\r\n                            <div className=\"col col-3 mt-2\">\r\n                                <Label>Discount/unit</Label>\r\n                            </div>\r\n                            :\r\n                            <div className=\"row\">\r\n                                <div className=\" mt-n2 mb-n2\">\r\n                                    <Label>Discount/unit</Label>\r\n                                </div>\r\n                                <div className=\"col col-6\" style={{ width: \"100px\" }}>\r\n                                    <Select\r\n                                        type=\"text\"\r\n                                        defaultValue={discountTypeAll}\r\n                                        classNamePrefix=\"select2-selection\"\r\n                                        options={discountDropOption}\r\n                                        style={{ textAlign: \"right\" }}\r\n                                        onChange={(e) => {\r\n                                            setChangeAllDiscount(true);\r\n                                            setDiscountTypeAll(e);\r\n                                            setDiscountValueAll('');\r\n                                        }}\r\n                                    />\r\n                                </div>\r\n                                <div className=\"col col-6\" style={{ width: \"100px\" }}>\r\n                                    <CInput\r\n                                        type=\"text\"\r\n                                        className=\"input\"\r\n                                        style={{ textAlign: \"right\" }}\r\n                                        cpattern={decimalRegx}\r\n                                        value={discountValueAll}\r\n                                        onChange={(e) => {\r\n                                            let e_val = Number(e.target.value);\r\n\r\n                                            // Check if discount type is \"percentage\"\r\n                                            if (discountTypeAll.value === 2) {// Discount type 2 represents \"percentage\"\r\n                                                // Limit the input to the range of 0 to 100\r\n                                                if (e_val > 100) {\r\n                                                    e.target.value = 100; // Set the input value to 100 if it exceeds 100\r\n                                                } else if (!(e_val >= 0 && e_val < 100)) {\r\n                                                    e.target.value = \"\"; // Clear the input value if it is less than 0\r\n                                                }\r\n                                            }\r\n\r\n                                            setChangeAllDiscount(true);\r\n                                            setDiscountValueAll(e.target.value);\r\n                                        }}\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                        }\r\n                    </div>\r\n                );\r\n            },\r\n\r\n            classes: () => \"invoice-discount-row\",\r\n            formatter: (cellContent, index1, key, formatExtraData) => {\r\n                let { tableList, discountValueAll, discountTypeAll } = formatExtraData;\r\n\r\n                if (formatExtraData.changeAllDiscount) {\r\n                    index1.Discount = discountValueAll;\r\n                    index1.DiscountType = discountTypeAll.value;\r\n                    innerStockCaculation(index1);\r\n                    totalAmountCalcuationFunc(tableList);\r\n                }\r\n                if (!index1.DiscountType) { index1.DiscountType = discountTypeAll.value }\r\n\r\n                const defaultDiscountTypelabel =\r\n                    index1.DiscountType === 1 ? discountDropOption[0] : discountDropOption[1];\r\n\r\n                return (\r\n                    <>\r\n                        <div className=\"mb-2\">\r\n                            <div className=\"parent\">\r\n                                <div className=\"child\">\r\n                                    <label className=\"label\">Type&nbsp;&nbsp;&nbsp;</label>\r\n                                </div>\r\n                                <div className=\"child\">\r\n                                    <Select\r\n                                        id={`DicountType_${key}`}\r\n                                        classNamePrefix=\"select2-selection\"\r\n                                        key={`DicountType_${key}-${index1.id}`}\r\n                                        value={defaultDiscountTypelabel}\r\n                                        options={discountDropOption}\r\n                                        onChange={(e) => {\r\n                                            setChangeAllDiscount(false);\r\n                                            setForceReload(!forceReload);\r\n                                            index1.DiscountType = e.value;\r\n                                            index1.Discount = '';\r\n                                            innerStockCaculation(index1);\r\n                                            totalAmountCalcuationFunc(tableList);\r\n                                        }}\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div>\r\n                            <div className=\"parent\">\r\n                                <div className=\"child\">\r\n                                    <label className=\"label\">Value&nbsp;</label>\r\n                                </div>\r\n                                <div className=\"child\">\r\n                                    <CInput\r\n                                        className=\"input\"\r\n                                        id={`Dicount_${key}-${index1.id}`}\r\n                                        style={{ textAlign: \"right\" }}\r\n                                        type=\"text\"\r\n                                        value={index1.Discount}\r\n                                        cpattern={decimalRegx}\r\n                                        onChange={(e) => {\r\n\r\n                                            let e_val = Number(e.target.value);\r\n                                            // Check if discount type is \"percentage\"\r\n                                            if (index1.DiscountType === 2) { // Discount type 2 represents \"percentage\"\r\n                                                // Limit the input to the range of 0 to 100\r\n                                                if (e_val > 100) {\r\n                                                    e.target.value = 100; // Set the input value to 100 if it exceeds 100\r\n                                                } else if (!(e_val >= 0 && e_val < 100)) {\r\n                                                    e.target.value = ''; // Clear the input value if it is less than 0\r\n                                                }\r\n                                            }\r\n                                            index1.Discount = e.target.value;\r\n                                            setChangeAllDiscount(false);\r\n                                            setForceReload(!forceReload);\r\n                                            innerStockCaculation(index1);\r\n                                            totalAmountCalcuationFunc(tableList);\r\n                                        }}\r\n\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"bottom-div\">\r\n                            <span>Amount:</span>\r\n                            <samp id={`itemTotalAmount-${index1.id}`}>\r\n                                {_cfunc.amountCommaSeparateFunc(Number(index1.itemTotalAmount).toFixed(2))}\r\n                            </samp>\r\n                        </div>\r\n                    </>\r\n                );\r\n            },\r\n        },\r\n    ];\r\n\r\n    const totalAmountCalcuationFunc = (tableList = []) => {\r\n        const calcalateGrandTotal = settingBaseRoundOffAmountFunc(tableList)\r\n        //toLocaleString is convert comma saprate Amount\r\n        let count_label = `${\"Total Amount\"} :${_cfunc.amountCommaSeparateFunc(Number(calcalateGrandTotal.sumOfGrandTotal).toFixed(2))}`\r\n        dispatch(BreadcrumbShowCountlabel(count_label))\r\n    }\r\n\r\n    function InvoiceDateOnchange(y, v, e) {\r\n        dispatch(GoButtonForinvoiceAddSuccess([]))\r\n        onChangeDate({ e, v, state, setState })\r\n    };\r\n\r\n    function CustomerOnchange(hasSelect,) {\r\n\r\n        setState((i) => {\r\n            const v1 = { ...i }\r\n            v1.values.Customer = hasSelect\r\n            v1.hasValid.Customer.valid = true\r\n            return v1\r\n        })\r\n    };\r\n\r\n    function goButtonHandler(makeIBInvoice) {\r\n        const btnId = goBtnId;\r\n        _cfunc.btnIsDissablefunc({ btnId, state: true })\r\n\r\n        try {\r\n            const jsonBody = JSON.stringify({\r\n                FromDate: values.InvoiceDate,\r\n                Customer: makeIBInvoice ? makeIBInvoice.customer.value : values.Customer.value,\r\n                Party: commonPartyDropSelect.value,\r\n                OrderIDs: \"\"\r\n            });\r\n            dispatch(GoButtonForinvoiceAdd({ subPageMode, jsonBody, btnId }));\r\n\r\n        } catch (e) { _cfunc.btnIsDissablefunc({ btnId, state: false }) }\r\n    };\r\n\r\n    const SaveHandler = async (event) => {\r\n\r\n        event.preventDefault();\r\n        const btnId = event.target.id\r\n        const saveAndDownloadPdfMode = btnId.substring(0, 21) === \"SaveAndDownloadPdfBtn\";\r\n\r\n        const validMsg = []\r\n        const invoiceItems = []\r\n\r\n        // IsComparGstIn= compare Supplier and Customer are Same State by GSTIn Number\r\n        let IsComparGstIn = { GSTIn_1: values.Customer.GSTIN, GSTIn_2: _cfunc.loginUserGSTIN() }\r\ndebugger\r\n        orderItemDetails.forEach((index) => {\r\n            if (index.StockInValid) {\r\n                validMsg.push({ [index.ItemName]:` ${index.StockInvalidMsg}.`})\r\n                return\r\n            };\r\n\r\n            let isSameMRPinStock = ''; //this is check is Enterd stock Quantity is Same MRP\r\n            index.StockDetails.forEach((ele) => {\r\n\r\n                if (Number(ele.Qty) > 0) {\r\n\r\n                    if ((isSameMRPinStock === \"\") && !(isSameMRPinStock === false)) {//this is check is Enterd stock Quantity is Same MRP\r\n                        isSameMRPinStock = parseFloat(ele.MRP)\r\n                    } else if (isSameMRPinStock !== parseFloat(ele.MRP)) {\r\n                        isSameMRPinStock = false\r\n                    }\r\n                    if (!Number(ele.Rate) > 0) {//** */ rate validation check  */\r\n                        validMsg.push({ [index.ItemName]: \" Rate not available.\" })\r\n                        return\r\n                    };\r\n\r\n                    //**calculate Amount ,Discount Amount based on Discound type */\r\n\r\n                    const calculate = invoice_discountCalculate_Func(ele, index, IsComparGstIn)\r\n\r\n                    invoiceItems.push({\r\n                        \"Item\": index.Item,\r\n                        \"Unit\": index.default_UnitDropvalue.value,\r\n                        \"BatchCode\": ele.BatchCode,\r\n                        \"Quantity\": Number(ele.Qty).toFixed(3),\r\n                        \"BatchDate\": ele.BatchDate,\r\n                        \"BatchID\": ele.id,\r\n                        \"BaseUnitQuantity\": Number(ele.BaseUnitQuantity).toFixed(3),\r\n                        \"LiveBatch\": ele.LiveBatche,\r\n                        \"MRP\": ele.LiveBatcheMRPID,\r\n                        \"MRPValue\": ele.MRP,//changes\r\n                        \"Rate\": Number(ele.Rate).toFixed(2),\r\n\r\n                        \"GST\": ele.LiveBatcheGSTID,\r\n                        \"CGST\": Number(calculate.CGST_Amount).toFixed(2),\r\n                        \"SGST\": Number(calculate.SGST_Amount).toFixed(2),\r\n                        \"IGST\": Number(calculate.IGST_Amount).toFixed(2),\r\n\r\n                        \"GSTPercentage\": calculate.GST_Percentage,\r\n                        \"CGSTPercentage\": calculate.CGST_Percentage,\r\n                        \"SGSTPercentage\": calculate.SGST_Percentage,\r\n                        \"IGSTPercentage\": calculate.IGST_Percentage,\r\n\r\n                        \"BasicAmount\": Number(calculate.discountBaseAmt).toFixed(2),\r\n                        \"GSTAmount\": Number(calculate.roundedGstAmount).toFixed(2),\r\n                        \"Amount\": Number(calculate.roundedTotalAmount).toFixed(2),\r\n\r\n                        \"TaxType\": 'GST',\r\n                        \"DiscountType\": index.DiscountType,\r\n                        \"Discount\": Number(index.Discount) || 0,\r\n                        \"DiscountAmount\": Number(calculate.disCountAmt).toFixed(2),\r\n                    })\r\n                }\r\n            })\r\n\r\n            if (isSameMRPinStock === false) {\r\n                validMsg.push({ [index.ItemName]:\" Multiple MRP’S Invoice not allowed.\"})\r\n                return\r\n            };\r\n        })\r\n\r\n        if (validMsg.length > 0) {\r\n            customAlert({\r\n                Type: 4,\r\n                Message: validMsg,\r\n            })\r\n            return\r\n        }\r\n\r\n        if (!(invoiceItems.length > 0)) {\r\n            customAlert({\r\n                Type: 4,\r\n                Message: \"Please Enter One Item Quantity\",\r\n            })\r\n            return\r\n        }\r\n\r\n        //**grand total and Tcs Round Off calculations  */ \r\n        const calcalateGrandTotal = settingBaseRoundOffAmountFunc(orderItemDetails)//Pass Table Data \r\n\r\n        const forInvoice_1_json = () => ({  //** Json Body Generate For Invoice_1  Start+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/\r\n            InvoiceDate: values.InvoiceDate,\r\n            InvoiceItems: invoiceItems,\r\n            InvoicesReferences: orderIDs.map(i => ({ Order: i }))\r\n        });\r\n\r\n        const forIB_Invoice_json = async () => ({   //**   Json Body Generate For IB_Invoice  +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/\r\n            IBChallanDate: values.InvoiceDate,\r\n            IBChallanItems: invoiceItems,\r\n            IBChallansReferences: await orderIDs.map(i => ({ Demand: i }))\r\n        });\r\n\r\n        const for_common_json = () => ({  //**  Json Body Generate Common for Both +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\r\n            CustomerGSTTin: values.Customer.GSTIN,\r\n            GrandTotal: calcalateGrandTotal.sumOfGrandTotal,\r\n            RoundOffAmount: calcalateGrandTotal.RoundOffAmount,\r\n            TCSAmount: calcalateGrandTotal.TCS_Amount,\r\n            Customer: values.Customer.value,\r\n            Vehicle: values.VehicleNo.value ? values.VehicleNo.value : \"\",\r\n            Party: commonPartyDropSelect.value,\r\n            CreatedBy: _cfunc.loginUserID(),\r\n            UpdatedBy: _cfunc.loginUserID(),\r\n        });\r\n\r\n        try {\r\n\r\n            if (formValid(state, setState)) {\r\n                _cfunc.btnIsDissablefunc({ btnId, state: true })\r\n                let jsonBody;  //json body decleration \r\n                if (subPageMode === url.INVOICE_1) {\r\n                    jsonBody = JSON.stringify({ ...for_common_json(), ...forInvoice_1_json() });\r\n                } else if (subPageMode === url.IB_INVOICE) {\r\n                    jsonBody = JSON.stringify({ ...for_common_json(), ...forIB_Invoice_json() });\r\n                }\r\n                // +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\r\n                if (pageMode === mode.edit) {\r\n                    return\r\n                }\r\n                else {\r\n                    dispatch(invoiceSaveAction({ subPageMode, jsonBody, btnId, saveAndDownloadPdfMode }));\r\n                }\r\n            }\r\n        } catch (e) { _cfunc.CommonConsole(\"invode save Handler\", e) }\r\n\r\n    }\r\n\r\n    if (!(userPageAccessState === '')) {\r\n        return (\r\n            <React.Fragment>\r\n                <MetaTags>{_cfunc.metaTagLabel(userPageAccessState)}</MetaTags>\r\n\r\n                <div className=\"page-content\" >\r\n\r\n                    <form noValidate>\r\n                        <Col className=\"px-2 mb-1 c_card_filter header text-black\" sm={12}>\r\n\r\n                            <div className=\"row\" >\r\n                                <Col sm=\"4\" className=\"\">\r\n                                    <FormGroup className=\"mb- row mt-3 \" >\r\n                                        <Label className=\"col-sm-8 p-2\" style={{ width: \"83px\" }}>{fieldLabel.InvoiceDate}</Label>\r\n                                        <Col sm=\"7\">\r\n                                            <C_DatePicker\r\n                                                name=\"InvoiceDate\"\r\n                                                value={values.InvoiceDate}\r\n                                                id=\"myInput11\"\r\n                                                disabled={(orderItemDetails.length > 0 || pageMode === \"edit\") ? true : false}\r\n                                                onChange={InvoiceDateOnchange}\r\n                                            />\r\n                                            {isError.InvoiceDate.length > 0 && (\r\n                                                <span className=\"invalid-feedback\">{isError.InvoiceDate}</span>\r\n                                            )}\r\n                                        </Col>\r\n                                    </FormGroup>\r\n                                </Col>\r\n\r\n                                <Col sm=\"4\" className=\"\">\r\n                                    <FormGroup className=\"mb- row mt-3 \" >\r\n                                        <Label className=\"col-sm-6 p-2\"\r\n                                            style={{ width: \"65px\" }}>{fieldLabel.Customer}</Label>\r\n                                        <Col sm=\"7\">\r\n                                            <Select\r\n\r\n                                                name=\"Customer\"\r\n                                                value={values.Customer}\r\n                                                isSearchable={true}\r\n                                                isDisabled={orderItemDetails.length > 0 ? true : false}\r\n                                                id={'customerselect'}\r\n                                                className=\"react-dropdown\"\r\n                                                classNamePrefix=\"dropdown\"\r\n                                                options={CustomerDropdown_Options}\r\n                                                onChange={CustomerOnchange}\r\n                                                styles={{ menu: provided => ({ ...provided, zIndex: 3 }) }}\r\n                                            />\r\n                                            {isError.Customer.length > 0 && (\r\n                                                <span className=\"text-danger f-8\"><small>{isError.Customer}</small></span>\r\n                                            )}\r\n                                        </Col>\r\n                                    </FormGroup>\r\n                                </Col>\r\n\r\n                                <Col sm=\"4\" className=\"\">\r\n                                    <FormGroup className=\"mb- row mt-3 \" >\r\n                                        <Label className=\"col-sm-5 p-2\"\r\n                                            style={{ width: \"65px\" }}>{fieldLabel.VehicleNo}</Label>\r\n                                        <Col sm=\"7\">\r\n                                            <Select\r\n                                                name=\"VehicleNo\"\r\n                                                value={values.VehicleNo}\r\n                                                isSearchable={true}\r\n                                                id={'VehicleNoselect'}\r\n                                                className=\"react-dropdown\"\r\n                                                classNamePrefix=\"dropdown\"\r\n                                                options={VehicleNumber_Options}\r\n                                                onChange={(hasSelect, evn) => {\r\n                                                    onChangeSelect({ hasSelect, evn, state, setState })\r\n                                                }}\r\n                                                styles={{ menu: provided => ({ ...provided, zIndex: 3 }) }}\r\n                                            />\r\n                                            {isError.VehicleNo.length > 0 && (\r\n                                                <span className=\"text-danger f-8\"><small>{isError.VehicleNo}</small></span>\r\n                                            )}\r\n                                        </Col>\r\n                                    </FormGroup>\r\n                                </Col>\r\n                            </div>\r\n                        </Col>\r\n                        <div className=\"mb-1\">\r\n                            <CustomTable\r\n                                keyField={\"id\"}\r\n                                data={orderItemDetails}\r\n                                columns={pagesListColumns}\r\n                                id=\"table_Arrow\"\r\n                                classes={\"table  table-bordered \"}\r\n                                noDataIndication={\r\n                                    <div className=\"text-danger text-center \">\r\n                                        Items Not available\r\n                                    </div>\r\n                                }\r\n                                onDataSizeChange={(e) => {\r\n                                    _cfunc.tableInputArrowUpDounFunc(\"#table_Arrow\")\r\n                                }}\r\n                            />\r\n                        </div>\r\n                        {\r\n                            (orderItemDetails.length > 0) ? <div className=\"row save1\" style={{ paddingBottom: 'center' }}>\r\n                                <Col>\r\n                                    <SaveButton\r\n                                        loading={saveBtnloading}\r\n                                        id={saveBtnid}\r\n                                        pageMode={pageMode}\r\n                                        userAcc={userPageAccessState}\r\n                                        onClick={SaveHandler}\r\n                                        forceDisabled={saveAndPdfBtnLoading}\r\n                                    />\r\n                                </Col>\r\n                                {\r\n                                    (pageMode === mode.defaultsave) ?\r\n                                        <Col>\r\n                                            <SaveAndDownloadPDF\r\n                                                loading={saveAndPdfBtnLoading}\r\n                                                pageMode={pageMode}\r\n                                                id={saveBtnid}\r\n                                                userAcc={userPageAccessState}\r\n                                                onClick={SaveHandler}\r\n                                                forceDisabled={saveBtnloading}\r\n                                            />\r\n                                        </Col> : null}\r\n                            </div>\r\n                                : <div className=\"row save1\"></div>\r\n                        }\r\n                    </form>\r\n                </div>\r\n\r\n            </React.Fragment >\r\n        );\r\n    }\r\n    else {\r\n        return (\r\n            <React.Fragment></React.Fragment>\r\n        )\r\n    }\r\n};\r\n\r\nexport default Invoice","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\Page-Pages\\PageFieldMaster\\index.js",["3419","3420","3421","3422","3423","3424"],"import React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { getControlTypes, getFieldValidations, getFieldValidationsForALLType } from '../../../../store/actions';\r\nimport {\r\n    Button,\r\n    Col,\r\n    Input,\r\n    Label,\r\n    Row,\r\n    Table,\r\n} from \"reactstrap\";\r\nimport Select from \"react-select\";\r\nimport { Tbody, Thead } from \"react-super-responsive-table\";\r\nimport { C_Select } from '../../../../CustomValidateForm';\r\n\r\nfunction PageFieldMasterTab(props) {\r\n    const dispatch = useDispatch();\r\n    const { pageFieldTabTable, setPageFieldTabTable } = props;\r\n\r\n    const {\r\n        ControlTypes,\r\n        fieldValidationLoading,\r\n        fieldValidationsALLType = [],\r\n    } = useSelector((state) => ({\r\n        ControlTypes: state.H_Pages.ControlTypes,\r\n        fieldValidationLoading: state.H_Pages.fieldValidationDropDownLoading,\r\n        fieldValidationsALLType: state.H_Pages.fieldValidationsALLType,\r\n    }));\r\n\r\n\r\n    const controlTypesOptions = ControlTypes.map((controlType) => ({\r\n        value: controlType.id,\r\n        label: controlType.Name,\r\n    }));\r\n\r\n    const addNewRow = () => {\r\n        const newRow = {\r\n            ControlID: '',\r\n            FieldLabel: '',\r\n            ControlType: { label: \"select...\", value: 0 },\r\n            FieldValidation: { label: \"select...\", value: 0 },\r\n            InValidMsg: '',\r\n            IsCompulsory: false,\r\n            DefaultSort: 0,\r\n            FieldSequence: '',\r\n            ShowInListPage: false,\r\n            Alignment: '',\r\n            ListPageSeq: '',\r\n            ShowInDownload: false,\r\n            DownloadDefaultSelect: false,\r\n        };\r\n        setPageFieldTabTable([...pageFieldTabTable, newRow]);\r\n    };\r\n\r\n    const deleteRow = (key) => {\r\n        const updatedTable = pageFieldTabTable.filter((_, index) => index !== key);\r\n        setPageFieldTabTable(updatedTable);\r\n    };\r\n\r\n    const toggleSort = (key) => {\r\n        const updatedTable = pageFieldTabTable.map((item, index) => {\r\n            if (index === key) {\r\n                item.DefaultSort = item.DefaultSort === 1 ? 2 : 1;\r\n            }\r\n            return item;\r\n        });\r\n\r\n        setPageFieldTabTable(updatedTable);\r\n    };\r\n\r\n\r\n\r\n    function validtionOptionAssing(controlType) {\r\n        let validationOptions = fieldValidationsALLType.find(item => item.type === controlType)?.data || []\r\n        return validationOptions.map(item => ({ value: item.id, label: item.Name }));\r\n    }\r\n\r\n    const handleFieldChange = (event, type = '', key) => {\r\n        setPageFieldTabTable((prevTable) => {\r\n            return prevTable.map((item, index) => {\r\n                if (index === key) {\r\n                    if (type === \"ControlType\") {\r\n                        item.ControlType = event;\r\n                        item.InValidMsg = event.value === 4 ? '' : item.InValidMsg;\r\n                        item.FieldValidation = \"\";\r\n                        item.validationOptions = validtionOptionAssing(event.value);\r\n                    } else if (type === \"DefaultSort\") {\r\n                        item.DefaultSort = event ? 1 : 0;\r\n                    } else if (type === \"ShowInDownload\" && !event) {\r\n                        item[type] = event;\r\n                        item.DownloadDefaultSelect = false;\r\n                    } else {\r\n                        item[type] = event;\r\n                    }\r\n                } else if (type === \"DefaultSort\") {\r\n                    item.DefaultSort = 0;\r\n                }\r\n\r\n                return item;\r\n            });\r\n        });\r\n    };\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className=\"table-rep-plugin mx-n4\">\r\n                <div className=\"table-responsive\" data-pattern=\"priority-columns\">\r\n                    <Table className=\"table table-bordered\">\r\n                        <Thead>\r\n                            <tr className=\"colorhead\">\r\n                                <th className=\"thsticky colorhead\">Control ID/Field Label</th>\r\n                                <th>Control Type/Is Compulsory</th>\r\n                                <th>Validation/InValid Msg</th>\r\n                                <th>In List Page</th>\r\n                                <th>List Page Seq/Align</th>\r\n                                <th>In Download</th>\r\n                                <th className=\"col col-sm-1\">Action</th>\r\n                            </tr>\r\n                        </Thead>\r\n                        <Tbody>\r\n                            {pageFieldTabTable.map((TableValue, key) => (\r\n                                <tr key={key}>\r\n                                    <td className='thsticky'>\r\n                                        <div className='mb-1 d-flex'>\r\n                                            <Input\r\n                                                type=\"text\"\r\n                                                id={`ControlID${key}`}\r\n                                                placeholder='Enter Control ID'\r\n                                                autoComplete=\"off\"\r\n                                                value={TableValue.ControlID}\r\n                                                onChange={(e) => handleFieldChange(e.target.value, \"ControlID\", key)}\r\n                                            />\r\n                                        </div>\r\n                                        <div className='sticky'>\r\n                                            <Input\r\n                                                className='sticky'\r\n                                                type=\"text\"\r\n                                                placeholder='Enter Field Label'\r\n                                                id={`FieldLabel${key}`}\r\n                                                autoComplete=\"off\"\r\n                                                value={TableValue.FieldLabel}\r\n                                                onChange={(e) => handleFieldChange(e.target.value, \"FieldLabel\", key)}\r\n                                            />\r\n                                        </div>\r\n                                    </td>\r\n                                    <td>\r\n                                        <div className='mb-1'>\r\n                                            <Select\r\n                                                id={`ControlType-${key}`}\r\n                                                value={TableValue.ControlType}\r\n                                                placeholder='Select ControlType'\r\n                                                options={controlTypesOptions}\r\n                                                onChange={(selectedOption) => handleFieldChange(selectedOption, \"ControlType\", key)}\r\n                                            />\r\n                                        </div>\r\n                                        <div className='d-flex'>\r\n                                            <div>\r\n                                                <Input\r\n                                                    type=\"checkbox\"\r\n                                                    id={`IsCompulsory${key}`}\r\n                                                    disabled={TableValue.ControlType.value === 4}\r\n                                                    checked={TableValue.ControlType.value === 4 ? false : TableValue.IsCompulsory}\r\n                                                    onChange={(e) => handleFieldChange(e.target.checked, \"IsCompulsory\", key)}\r\n                                                />\r\n                                            </div>\r\n                                            <div><Label> &nbsp;&nbsp;Compulsory</Label></div>\r\n                                        </div>\r\n                                    </td>\r\n                                    <td>\r\n                                        <div className='mb-1'>\r\n                                            <C_Select\r\n                                                id={`FieldValidation-${key}`}\r\n                                                autoComplete=\"off\"\r\n                                                value={TableValue.FieldValidation}\r\n                                                placeholder='Select Field Validation'\r\n                                                isLoading={fieldValidationLoading}\r\n                                                options={TableValue.validationOptions || []}\r\n                                                onChange={(selectedOption) => handleFieldChange(selectedOption, \"FieldValidation\", key)}\r\n                                            />\r\n                                        </div>\r\n                                        <div >\r\n                                            <Input\r\n                                                type=\"text\"\r\n                                                id={`InValidMsg${key}`}\r\n                                                autoComplete=\"off\"\r\n                                                placeholder='Enter Validation Msg'\r\n                                                disabled={TableValue.ControlType.value === 4}\r\n                                                value={TableValue.InValidMsg}\r\n                                                onChange={(e) => handleFieldChange(e.target.value, \"InValidMsg\", key)}\r\n                                            />\r\n                                        </div>\r\n\r\n                                    </td>\r\n                                    <td>\r\n                                        <div className='mb-1 d-flex'>\r\n                                            <div>\r\n                                                <Input\r\n                                                    type=\"checkbox\"\r\n                                                    id={`ShowInListPage${key}`}\r\n                                                    checked={TableValue.ShowInListPage}\r\n                                                    onChange={(e) => handleFieldChange(e.target.checked, \"ShowInListPage\", key)}\r\n                                                />\r\n                                            </div>\r\n                                            <div><Label>&nbsp;&nbsp;Show</Label></div>\r\n\r\n                                        </div>\r\n                                        <div className=\"d-flex\">\r\n\r\n                                            <div className='d-flex'>\r\n                                                <Input\r\n                                                    type=\"radio\"\r\n                                                    name={`btnradio${key}`}\r\n                                                    value={`DefaultSort${key}`}\r\n                                                    id={`DefaultSort${key}`}\r\n                                                    disabled={!TableValue.ShowInListPage}\r\n                                                    checked={TableValue.DefaultSort}\r\n                                                    onChange={(e) => handleFieldChange(e.target.checked, \"DefaultSort\", key)}\r\n                                                />\r\n                                                {TableValue.DefaultSort > 0 && (\r\n                                                    <div>\r\n                                                        <i\r\n                                                            className=\"bx bx-caret-up font-size-20 text-danger\"\r\n                                                            style={{ display: TableValue.DefaultSort === 1 ? \"block\" : \"none\" }}\r\n                                                            onClick={() => toggleSort(key)}\r\n                                                        />\r\n                                                        <i\r\n                                                            className=\"bx bx-caret-down font-size-20 text-danger\"\r\n                                                            style={{ display: TableValue.DefaultSort === 2 ? \"block\" : \"none\" }}\r\n                                                            onClick={() => toggleSort(key)}\r\n                                                        />\r\n                                                    </div>\r\n                                                )}\r\n                                            </div>\r\n                                            <div><Label>&nbsp;&nbsp;Sort</Label></div>\r\n\r\n                                        </div>\r\n\r\n\r\n                                    </td>\r\n\r\n                                    <td>\r\n                                        <div className='mb-1'>\r\n                                            <Input\r\n                                                autoComplete=\"off\"\r\n                                                type=\"text\"\r\n                                                id={`ListPageSeq${key}`}\r\n                                                placeholder='Enter Sequence'\r\n                                                value={pageFieldTabTable[key].ListPageSeq}\r\n                                                onChange={(e) => handleFieldChange(e.target.value, \"ListPageSeq\", key)}>\r\n\r\n                                            </Input>\r\n                                        </div>\r\n                                        <div >\r\n                                            <Input\r\n                                                autoComplete=\"off\"\r\n                                                type=\"text\"\r\n                                                id={`Alignment${key}`}\r\n                                                placeholder='Enter Alignment'\r\n                                                value={pageFieldTabTable[key].Alignment}\r\n                                                onChange={(e) => handleFieldChange(e.target.value, \"Alignment\", key)}>\r\n\r\n                                            </Input>\r\n                                        </div>\r\n                                    </td>\r\n\r\n\r\n                                    <td>\r\n                                        <div className='mb-1 d-flex'>\r\n                                            <div>\r\n                                                <Input\r\n                                                    type=\"checkbox\"\r\n                                                    id={`ShowInDownload${key}`}\r\n                                                    defaultChecked={TableValue.ShowInDownload}\r\n                                                    onChange={(e) => handleFieldChange(e.target.checked, \"ShowInDownload\", key)}\r\n                                                />\r\n                                            </div>\r\n                                            <div><Label> &nbsp;&nbsp;Show</Label></div>\r\n\r\n                                        </div>\r\n                                        <div className='d-flex'>\r\n                                            <div>\r\n                                                <Input\r\n                                                    type=\"checkbox\"\r\n                                                    id={`DownloadDefaultSelect${key}`}\r\n                                                    disabled={!TableValue.ShowInDownload}\r\n                                                    checked={TableValue.DownloadDefaultSelect}\r\n                                                    onChange={(e) => handleFieldChange(e.target.checked, \"DownloadDefaultSelect\", key)}\r\n                                                />\r\n                                            </div>\r\n\r\n                                            <div><Label> &nbsp;&nbsp;Default</Label></div>\r\n                                        </div>\r\n                                    </td>\r\n                                    <td>\r\n                                        {pageFieldTabTable.length === key + 1 ? (\r\n                                            <Row>\r\n                                                <Col md={6} className=\"mt-3\">\r\n                                                    {pageFieldTabTable.length > 0 && (\r\n                                                        <i\r\n                                                            className=\"mdi mdi-trash-can d-block text-danger font-size-20\"\r\n                                                            onClick={() => deleteRow(key)}\r\n                                                        />\r\n                                                    )}\r\n                                                </Col>\r\n                                                <Col md={6}>\r\n                                                    <div className=\"d-flex justify-content-center mt-3\">\r\n                                                        <Button\r\n                                                            className=\"btn btn-success btn-sm\"\r\n                                                            type=\"button\"\r\n                                                            onClick={() => addNewRow()}\r\n                                                        ><i className=\"dripicons-plus\" />\r\n                                                        </Button>\r\n                                                    </div>\r\n                                                </Col>\r\n                                            </Row>\r\n                                        ) : (\r\n                                            <i\r\n                                                className=\"mdi mdi-trash-can d-block text-danger font-size-20\"\r\n                                                onClick={() => deleteRow(key)}\r\n                                            />\r\n                                        )}\r\n                                    </td>\r\n                                </tr>\r\n                            ))}\r\n                        </Tbody>\r\n                    </Table>\r\n                    {pageFieldTabTable.length === 0 && (\r\n                        <div className=\"d-flex justify-content-center mt-3\">\r\n                            <Button\r\n                                type=\"button\"\r\n                                onClick={addNewRow}\r\n                                className=\"btn btn-success btn-sm\"\r\n                            > Add New Row\r\n                                <i className=\"dripicons-plus\" />\r\n                            </Button>\r\n                        </div>\r\n                    )}\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default PageFieldMasterTab;\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Sales\\Invoice\\reducer.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Sales\\Invoice\\action.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Sales\\Invoice\\saga.js",["3425"],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Sales\\Invoice\\actionType.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\components\\Common\\C-Varialbes.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Sale\\Invoice\\InvoiceList.js",["3426","3427","3428","3429","3430","3431","3432","3433","3434","3435","3436","3437","3438","3439","3440","3441"],"import React, { useEffect, useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport {\r\n    BreadcrumbShowCountlabel,\r\n    commonPageFieldList,\r\n    commonPageFieldListSuccess,\r\n} from \"../../../store/actions\";\r\nimport CommonPurchaseList from \"../../../components/Common/CommonPurchaseList\"\r\nimport { Col, FormGroup, Label, Modal, Row } from \"reactstrap\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { GetVenderSupplierCustomer, GetVenderSupplierCustomerSuccess } from \"../../../store/CommonAPI/SupplierRedux/actions\";\r\nimport { Go_Button, PageLoadingSpinner } from \"../../../components/Common/CommonButton\";\r\nimport * as report from '../../../Reports/ReportIndex'\r\nimport * as url from \"../../../routes/route_url\";\r\nimport * as pageId from \"../../../routes/allPageID\"\r\nimport * as mode from \"../../../routes/PageMode\"\r\nimport { Invoice_1_Edit_API_Singel_Get } from \"../../../helpers/backend_helper\";\r\nimport { getpdfReportdata } from \"../../../store/Utilites/PdfReport/actions\";\r\nimport * as _cfunc from \"../../../components/Common/CommonFunction\";\r\nimport {\r\n    Cancel_EInvoiceSuccess,\r\n    Cancel_EwayBillSuccess,\r\n    InvoiceSendToScm,\r\n    InvoiceSendToScmSuccess,\r\n    UpdateVehicleInvoice_Action,\r\n    UpdateVehicleInvoice_Success,\r\n    Uploaded_EInvoiceSuccess,\r\n    Uploaded_EwayBillSuccess,\r\n    deleteInvoiceId,\r\n    deleteInvoiceIdSuccess,\r\n    invoiceListGoBtnfilter,\r\n    invoiceListGoBtnfilterSucccess\r\n} from \"../../../store/Sales/Invoice/action\";\r\nimport { makeInward } from \"../../../store/Inter Branch/InwardRedux/action\";\r\nimport { C_DatePicker, C_Select } from \"../../../CustomValidateForm\";\r\nimport { customAlert } from \"../../../CustomAlert/ConfirmDialog\";\r\nimport PartyDropdown_Common from \"../../../components/Common/PartyDropdown\";\r\nimport { getVehicleList } from \"../../../store/Administrator/VehicleRedux/action\";\r\n\r\nconst InvoiceList = () => {\r\n\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n    const currentDate_ymd = _cfunc.date_ymd_func();\r\n\r\n    const [pageMode, setPageMode] = useState(url.ORDER_LIST_1)\r\n    const [subPageMode, setSubPageMode] = useState(history.location.pathname);\r\n    const [hederFilters, setHederFilters] = useState({ todate: currentDate_ymd, fromdate: currentDate_ymd, supplierSelect: { value: '', label: \"All\" } });\r\n    const [otherState, setOtherState] = useState({ masterPath: '', makeBtnShow: false, newBtnPath: '', IBType: '' });\r\n    const [VehicleNoDropdown, setVehicleNoDropdown] = useState('')\r\n    const [modal, setmodal] = useState(false);\r\n    const [vehicleErrorMsg, setvehicleErrorMsg] = useState(false);\r\n    const [InvoiceID, setInvoiceID] = useState(\"\");\r\n\r\n    const reducers = useSelector(\r\n        (state) => ({\r\n            tableList: state.InvoiceReducer.Invoicelist,\r\n            postMsg: state.OrderReducer.postMsg,\r\n            editData: state.InvoiceReducer.editData,\r\n            updateMsg: state.OrderReducer.updateMsg,\r\n            deleteMsg: state.InvoiceReducer.deleteMsg,\r\n            userAccess: state.Login.RoleAccessUpdateData,\r\n            supplier: state.CommonAPI_Reducer.vendorSupplierCustomer,\r\n            supplierDropLoading: state.CommonAPI_Reducer.vendorSupplierCustomerLoading,\r\n            GRNitem: state.GRNReducer.GRNitem,\r\n            pageField: state.CommonPageFieldReducer.pageFieldList,\r\n            goBtnloading: state.InvoiceReducer.goBtnloading,\r\n            Uploaded_EInvoice: state.InvoiceReducer.Uploaded_EInvoice,\r\n            Uploaded_EwayBill: state.InvoiceReducer.Uploaded_EwayBill,\r\n            Cancel_EInvoice: state.InvoiceReducer.Cancel_EInvoice,\r\n            Cancel_EwayBill: state.InvoiceReducer.Cancel_EwayBill,\r\n            VehicleNumber: state.VehicleReducer.VehicleList,\r\n            Update_Vehicle_Invoice: state.InvoiceReducer.Update_Vehicle_Invoice,\r\n\r\n            sendToScmMsg: state.InvoiceReducer.sendToScmMsg,\r\n\r\n            listBtnLoading: (state.InvoiceReducer.listBtnLoading || state.PdfReportReducers.ReportBtnLoading)\r\n        })\r\n    );\r\n\r\n    const {\r\n        pageField,\r\n        supplier,\r\n        Uploaded_EInvoice,\r\n        Uploaded_EwayBill,\r\n        Cancel_EInvoice,\r\n        Cancel_EwayBill,\r\n        supplierDropLoading,\r\n        VehicleNumber,\r\n        Update_Vehicle_Invoice,\r\n        sendToScmMsg\r\n    } = reducers;\r\n\r\n    const {\r\n        fromdate,\r\n        todate,\r\n        supplierSelect\r\n    } = hederFilters;\r\n\r\n    const action = {\r\n        deleteId: deleteInvoiceId,\r\n        deleteSucc: deleteInvoiceIdSuccess\r\n    }\r\n\r\n    // Featch Modules List data  First Rendering\r\n    useEffect(() => {\r\n\r\n        let page_Id = '';\r\n        let page_Mode = mode.defaultList;\r\n        let masterPath = '';\r\n        let IBType = '';\r\n        let newBtnPath = false;\r\n        let makeBtnShow = false;\r\n\r\n        if (subPageMode === url.INVOICE_LIST_1) {\r\n            page_Id = pageId.INVOICE_LIST_1\r\n            masterPath = url.INVOICE_1\r\n            newBtnPath = url.INVOICE_1\r\n        }\r\n        else if (subPageMode === url.IB_INVOICE_LIST) {\r\n            page_Id = pageId.IB_INVOICE_LIST;\r\n            masterPath = url.IB_INVOICE\r\n            newBtnPath = url.IB_INVOICE_STP\r\n            IBType = \"IBInvoice\"\r\n        }\r\n        else if (subPageMode === url.IB_GRN_LIST) {\r\n            page_Id = pageId.IB_GRN_LIST;\r\n            masterPath = url.IB_INVOICE\r\n            IBType = \"IBGRN\"\r\n        }\r\n        else if (subPageMode === url.IB_INWARD_STP) {\r\n            page_Id = pageId.IB_INWARD_STP\r\n            page_Mode = mode.modeSTPsave\r\n            makeBtnShow = true;\r\n            IBType = \"IBGRN\"\r\n        }\r\n        setSubPageMode(subPageMode)\r\n        setOtherState({ masterPath, makeBtnShow, newBtnPath, IBType })\r\n        setPageMode(page_Mode)\r\n        dispatch(commonPageFieldListSuccess(null))\r\n        dispatch(commonPageFieldList(page_Id))\r\n        // dispatch(BreadcrumbShowCountlabel(`${\"Count\"} :0`))\r\n        dispatch(GetVenderSupplierCustomer({ subPageMode, PartyID: _cfunc.loginSelectedPartyID() }))\r\n\r\n        setmodal(false);\r\n        if (!(_cfunc.loginSelectedPartyID() === 0)) {\r\n            goButtonHandler(\"event\", IBType)\r\n        }\r\n        return () => {\r\n            dispatch(UpdateVehicleInvoice_Success([]));\r\n            dispatch(invoiceListGoBtnfilterSucccess([]));\r\n        }\r\n\r\n    }, [dispatch]);\r\n\r\n    useEffect(() => {    // Vehicle Update against Invoice Id\r\n        if (Update_Vehicle_Invoice.Status === true && Update_Vehicle_Invoice.StatusCode === 200) {\r\n            dispatch(UpdateVehicleInvoice_Success([]));\r\n            setInvoiceID('');\r\n            setVehicleNoDropdown('');\r\n            setvehicleErrorMsg(false);\r\n            goButtonHandler(\"event\");\r\n            setmodal(false);\r\n            customAlert({\r\n                Type: 1,\r\n                Message: JSON.stringify(Update_Vehicle_Invoice.Message),\r\n            })\r\n        }\r\n\r\n        else if (Update_Vehicle_Invoice.Status === true) {\r\n            dispatch(UpdateVehicleInvoice_Success([]))\r\n            setmodal(false);\r\n            customAlert({\r\n                Type: 3,\r\n                Message: JSON.stringify(Update_Vehicle_Invoice.Message),\r\n            })\r\n        }\r\n    }, [Update_Vehicle_Invoice]);\r\n\r\n\r\n\r\n\r\n    useEffect(() => {    // Vehicle Update against Invoice Id\r\n        if (sendToScmMsg.Status === true && sendToScmMsg.StatusCode === 200) {\r\n            dispatch(InvoiceSendToScmSuccess({ Status: false }));\r\n            customAlert({\r\n                Type: 1,\r\n                Message: JSON.stringify(sendToScmMsg.Message),\r\n            })\r\n        } else if (sendToScmMsg.Status === true && sendToScmMsg.StatusCode === 204) {\r\n            dispatch(InvoiceSendToScmSuccess({ Status: false }));\r\n            customAlert({\r\n                Type: 3,\r\n                Message: JSON.stringify(sendToScmMsg.Message),\r\n            })\r\n        }\r\n    }, [sendToScmMsg]);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    useEffect(() => {   // Uploaded EInvoice useEffect \r\n        if (Uploaded_EInvoice.Status === true && Uploaded_EInvoice.StatusCode === 200) {\r\n            dispatch(Uploaded_EInvoiceSuccess({ Status: false }))\r\n            goButtonHandler(\"event\")\r\n            customAlert({\r\n                Type: 1,\r\n                Message: JSON.stringify(Uploaded_EInvoice.Message),\r\n            })\r\n        }\r\n\r\n        else if (Uploaded_EInvoice.Status === true) {\r\n            dispatch(Uploaded_EInvoiceSuccess({ Status: false }))\r\n            customAlert({\r\n                Type: 3,\r\n                Message: JSON.stringify(Uploaded_EInvoice.Message),\r\n            })\r\n        }\r\n    }, [Uploaded_EInvoice]);\r\n\r\n    useEffect(() => {   // Uploaded E-way Bill useEffect \r\n\r\n        if ((Uploaded_EwayBill.Status === true) && (Uploaded_EwayBill.StatusCode === 200)) {\r\n            dispatch(Uploaded_EwayBillSuccess({ Status: false }))\r\n            goButtonHandler(\"event\")\r\n            customAlert({\r\n                Type: 1,\r\n                Message: JSON.stringify(Uploaded_EwayBill.Message),\r\n            })\r\n        }\r\n\r\n        else if (Uploaded_EwayBill.Status === true) {\r\n            dispatch(Uploaded_EwayBillSuccess({ Status: false }))\r\n            customAlert({\r\n                Type: 3,\r\n                Message: JSON.stringify(Uploaded_EwayBill.Message),\r\n            })\r\n            return\r\n        }\r\n    }, [Uploaded_EwayBill]);\r\n\r\n    useEffect(async () => {   // Uploaded Cancel E-Invoice useEffect \r\n\r\n        if (Cancel_EInvoice.Status === true && Cancel_EInvoice.StatusCode === 200) {\r\n            dispatch(Cancel_EInvoiceSuccess({ Status: false }))\r\n            goButtonHandler(\"event\")\r\n            customAlert({\r\n                Type: 1,\r\n                Message: Cancel_EInvoice.Message,\r\n            })\r\n            return\r\n        }\r\n\r\n        else if (Cancel_EInvoice.Status === true) {\r\n            dispatch(Cancel_EInvoiceSuccess({ Status: false }))\r\n            customAlert({\r\n                Type: 3,\r\n                Message: JSON.stringify(Cancel_EInvoice.Message),\r\n            })\r\n            return\r\n        }\r\n    }, [Cancel_EInvoice]);\r\n\r\n    useEffect(async () => {    // Uploaded Cancel E-way Bill useEffect \r\n\r\n        if (Cancel_EwayBill.Status === true && Cancel_EwayBill.StatusCode === 200) {\r\n            dispatch(Cancel_EwayBillSuccess({ Status: false }))\r\n            goButtonHandler(\"event\")\r\n            customAlert({\r\n                Type: 1,\r\n                Message: Cancel_EwayBill.Message,\r\n            })\r\n            return\r\n        }\r\n        else if (Cancel_EwayBill.Status === true) {\r\n            dispatch(Cancel_EwayBillSuccess({ Status: false }))\r\n            customAlert({\r\n                Type: 3,\r\n                Message: JSON.stringify(Cancel_EwayBill.Message),\r\n            })\r\n            return\r\n        }\r\n    }, [Cancel_EwayBill]);\r\n\r\n    const supplierOptions = supplier.map((i) => ({\r\n        value: i.id,\r\n        label: i.Name,\r\n    }));\r\n\r\n    supplierOptions.unshift({\r\n        value: \"\",\r\n        label: \" All\"\r\n    });\r\n\r\n    const VehicleNumber_Options = VehicleNumber.map((index) => ({\r\n        value: index.id,\r\n        label: index.VehicleNumber,\r\n    }));\r\n\r\n    function downBtnFunc(config) {\r\n\r\n        config[\"ReportType\"] = report.invoice;\r\n        dispatch(getpdfReportdata(Invoice_1_Edit_API_Singel_Get, config))\r\n    }\r\n\r\n    function goButtonHandler(event, IBType) {\r\n\r\n        try {\r\n            if (_cfunc.loginSelectedPartyID() === 0) {\r\n                customAlert({ Type: 3, Message: \"Please Select Party\" });\r\n                return;\r\n            };\r\n            const filtersBody = JSON.stringify({\r\n                FromDate: fromdate,\r\n                ToDate: todate,\r\n                Customer: supplierSelect.value === \"\" ? '' : supplierSelect.value,\r\n                Party: _cfunc.loginSelectedPartyID(),\r\n                IBType: IBType ? IBType : otherState.IBType\r\n            });\r\n\r\n            dispatch(invoiceListGoBtnfilter({ subPageMode, filtersBody }));\r\n\r\n        } catch (error) { _cfunc.CommonConsole(error) }\r\n    }\r\n\r\n    function fromdateOnchange(e, date) {\r\n        let newObj = { ...hederFilters }\r\n        newObj.fromdate = date\r\n        setHederFilters(newObj)\r\n    }\r\n\r\n    function todateOnchange(e, date) {\r\n        let newObj = { ...hederFilters }\r\n        newObj.todate = date\r\n        setHederFilters(newObj)\r\n    }\r\n\r\n    function supplierOnchange(e) {\r\n        let newObj = { ...hederFilters }\r\n        newObj.supplierSelect = e\r\n        setHederFilters(newObj);\r\n    }\r\n\r\n    const partySelectButtonHandler = (e) => {\r\n        goButtonHandler()\r\n        dispatch(GetVenderSupplierCustomer({ subPageMode, PartyID: _cfunc.loginSelectedPartyID() }));\r\n    }\r\n\r\n    function partySelectOnChangeHandler() {\r\n        dispatch(invoiceListGoBtnfilterSucccess([]));\r\n        dispatch(GetVenderSupplierCustomerSuccess([]));\r\n        let newObj = { ...hederFilters }\r\n        newObj.supplierSelect = { value: '', label: \"All\" }\r\n        setHederFilters(newObj)\r\n    }\r\n\r\n    function VehicleOnChangeHandler(e) {\r\n        setVehicleNoDropdown(e)\r\n        setvehicleErrorMsg(false);\r\n    }\r\n\r\n    function toggleModal() {\r\n        setmodal(!modal);\r\n        setVehicleNoDropdown('')\r\n        setvehicleErrorMsg(false);\r\n    };\r\n\r\n    const makeBtnFunc = (list = {}, btnId) => {\r\n        const config = { makeInwardId: list[0].id, btnId }\r\n        dispatch(makeInward(config))\r\n        history.push({\r\n            pathname: url.INWARD,\r\n        })\r\n    };\r\n    //Added For send To Scm Button \r\n    function sendToScmBtnFunc(config) {\r\n\r\n        const InvoiceID = config.rowData.id\r\n        const jsonBody = JSON.stringify({ Invoice: InvoiceID })\r\n        const btnId = config.btnId\r\n        dispatch(InvoiceSendToScm({ jsonBody, btnId }))\r\n    }\r\n\r\n    const HeaderContent = () => {\r\n        return (\r\n            <div className=\"px-2   c_card_filter text-black\" >\r\n                <div className=\"row\" >\r\n\r\n                    <Col sm=\"3\" className=\"\">\r\n                        <FormGroup className=\"mb- row mt-3 \" >\r\n                            <Label className=\"col-sm-5 p-2\"\r\n                                style={{ width: \"83px\" }}>From Date</Label>\r\n                            <Col sm=\"7\">\r\n                                <C_DatePicker\r\n                                    name='fromdate'\r\n                                    value={fromdate}\r\n                                    onChange={fromdateOnchange}\r\n                                />\r\n                            </Col>\r\n                        </FormGroup>\r\n                    </Col>\r\n                    <Col sm=\"3\" className=\"\">\r\n                        <FormGroup className=\"mb- row mt-3 \" >\r\n                            <Label className=\"col-sm-5 p-2\"\r\n                                style={{ width: \"65px\" }}>To Date</Label>\r\n                            <Col sm=\"7\">\r\n                                <C_DatePicker\r\n                                    name=\"todate\"\r\n                                    value={todate}\r\n                                    onChange={todateOnchange}\r\n                                />\r\n                            </Col>\r\n                        </FormGroup>\r\n                    </Col>\r\n\r\n                    <Col sm=\"5\">\r\n                        <FormGroup className=\"mb-2 row mt-3 \" >\r\n                            <Label className=\"col-md-4 p-2\"\r\n                                style={{ width: \"115px\" }}>Customer</Label>\r\n                            <Col sm=\"5\">\r\n                                <C_Select\r\n                                    classNamePrefix=\"react-select\"\r\n                                    value={supplierSelect}\r\n                                    options={supplierOptions}\r\n                                    onChange={supplierOnchange}\r\n                                    isLoading={supplierDropLoading}\r\n                                    styles={{\r\n                                        menu: provided => ({ ...provided, zIndex: 2 })\r\n                                    }}\r\n                                />\r\n                            </Col>\r\n                        </FormGroup>\r\n                    </Col >\r\n\r\n                    <Col sm=\"1\" className=\"mt-3 \">\r\n                        <Go_Button onClick={goButtonHandler}\r\n                            loading={reducers.goBtnloading} />\r\n                    </Col>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    function e_WayBill_ActionsBtnFunc(rowData) {\r\n\r\n        const { VehicleNo = '', id } = rowData\r\n        if (VehicleNo === null) {\r\n            setmodal(true);\r\n            dispatch(getVehicleList())\r\n            setInvoiceID(id)\r\n        }\r\n    }\r\n\r\n    const updateVehicleInvoice = () => {\r\n\r\n        if (VehicleNoDropdown === \"\") {\r\n            setvehicleErrorMsg(true);\r\n        } else {\r\n            const invoiceAndVehicleID = {\r\n                Invoiceid: InvoiceID,\r\n                vehicleid: VehicleNoDropdown.value,\r\n            };\r\n            dispatch(UpdateVehicleInvoice_Action(invoiceAndVehicleID));\r\n        }\r\n    };\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <PageLoadingSpinner isLoading={reducers.listBtnLoading || !pageField} />\r\n            <div className=\"page-content\">\r\n                <PartyDropdown_Common pageMode={pageMode}\r\n                    goButtonHandler={partySelectButtonHandler}\r\n                    changeButtonHandler={partySelectOnChangeHandler} />\r\n                {\r\n                    (pageField) ?\r\n                        <CommonPurchaseList\r\n                            action={action}\r\n                            reducers={reducers}\r\n                            showBreadcrumb={false}\r\n                            masterPath={otherState.masterPath}\r\n                            newBtnPath={otherState.newBtnPath}\r\n                            makeBtnShow={otherState.makeBtnShow}\r\n                            pageMode={pageMode}\r\n                            goButnFunc={goButtonHandler}\r\n                            downBtnFunc={downBtnFunc}\r\n                            HeaderContent={HeaderContent}\r\n                            makeBtnFunc={makeBtnFunc}\r\n                            sendToScmBtnFunc={sendToScmBtnFunc}\r\n                            ButtonMsgLable={\"Invoice\"}\r\n                            deleteName={\"FullInvoiceNumber\"}\r\n                            makeBtnName={\"Make GRN\"}\r\n                            filters={hederFilters}\r\n                            forceNewBtnView={false}\r\n                            e_WayBill_ActionsBtnFunc={e_WayBill_ActionsBtnFunc}\r\n                            totalAmountShow={true}\r\n                        />\r\n                        : null\r\n                }\r\n\r\n                <Modal\r\n                    isOpen={modal}\r\n                    toggle={toggleModal}\r\n                    centered={true}\r\n                >\r\n                    <div className=\"modal-header\" style={{ position: \"relative\" }}>\r\n                        <h5 className=\"modal-title mt-0 align-middle\">Please Select Vehicle Number</h5>\r\n                        <button\r\n                            type=\"button\"\r\n                            onClick={toggleModal}\r\n                            className=\"close\"\r\n                            data-dismiss=\"modal\"\r\n                            aria-label=\"Close\"\r\n                        >\r\n                            <span aria-hidden=\"true\">&times;</span>\r\n                        </button>\r\n                    </div>\r\n                    <div className=\"modal-body\">\r\n                        <Row >\r\n                            <Col sm=\"8\" className=\"\">\r\n                                <FormGroup className=\"mb- row mt-1 \" >\r\n                                    <Label className=\"col-sm-6 p-2 text-black\"\r\n                                        style={{ width: \"65px\" }}>VehicleNo</Label>\r\n                                    <Col sm=\"8\">\r\n                                        <C_Select\r\n                                            name=\"VehicleNo\"\r\n                                            value={VehicleNoDropdown}\r\n                                            isSearchable={true}\r\n                                            id={'VehicleNoselect'}\r\n                                            className=\"card-header align-items-center d-flex\"\r\n                                            classNamePrefix=\"dropdown\"\r\n                                            options={VehicleNumber_Options}\r\n                                            onChange={(e) => { VehicleOnChangeHandler(e) }}\r\n                                            styles={{\r\n                                                menu: (provided) => ({\r\n                                                    ...provided,\r\n                                                    zIndex: 5,\r\n                                                    maxHeight: \"80px\", // Set a fixed height for the dropdown\r\n                                                    overflowY: \"auto\", // Add a scrollbar if the content exceeds the height\r\n                                                }),\r\n                                            }}\r\n                                        />\r\n                                        {(vehicleErrorMsg) && (\r\n                                            <span className=\"text-danger f-8\"><small>Please Select Vehicle Number</small></span>\r\n                                        )}\r\n\r\n                                    </Col>\r\n                                </FormGroup>\r\n                            </Col>\r\n                        </Row>\r\n                        <div className=\"modal-footer\">\r\n                            <button\r\n                                type=\"button\"\r\n                                className=\"btn btn-secondary\"\r\n                                onClick={toggleModal}\r\n                            >\r\n                                Cancel\r\n                            </button>\r\n                            <button\r\n                                type=\"submit\"\r\n                                className=\"btn btn-primary\"\r\n                                onClick={updateVehicleInvoice}>\r\n                                Update\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </Modal>\r\n            </div>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default InvoiceList;","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Inter Branch\\Inward\\Inward.js",["3442","3443","3444"],"import React, { useEffect, useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport {\r\n    Col,\r\n    FormGroup,\r\n    Input,\r\n    Label,\r\n    Row,\r\n    Table\r\n} from \"reactstrap\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { MetaTags } from \"react-meta-tags\";\r\nimport { Tbody, Thead } from \"react-super-responsive-table\";\r\nimport paginationFactory, { PaginationListStandalone, PaginationProvider } from \"react-bootstrap-table2-paginator\";\r\nimport ToolkitProvider from \"react-bootstrap-table2-toolkit\";\r\nimport BootstrapTable from \"react-bootstrap-table-next\";\r\nimport { postInward, postInwardSuccess } from \"../../../store/Inter Branch/InwardRedux/action\";\r\nimport  {mode,url} from \"../../../routes/index\";\r\nimport { SaveButton } from \"../../../components/Common/CommonButton\";\r\nimport * as _cfunc from \"../../../components/Common/CommonFunction\";\r\nimport { C_DatePicker } from \"../../../CustomValidateForm\";\r\nimport { customAlert } from \"../../../CustomAlert/ConfirmDialog\";\r\n\r\nconst Inward = (props) => {\r\n\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n    const currentDate_ymd = _cfunc.date_ymd_func();\r\n\r\n    const [userPageAccessState, setUserAccState] = useState('');\r\n    const [InwardDate, setInwardDate] = useState(currentDate_ymd);\r\n    const [pageMode] = useState(mode.defaultsave);\r\n    const {\r\n        postMsg,\r\n        userAccess,\r\n        InwardData\r\n    } = useSelector((state) => ({\r\n        InwardData: state.InwardReducer.makeInward,\r\n        postMsg: state.InwardReducer.postMsg,\r\n        userAccess: state.Login.RoleAccessUpdateData,\r\n    }));\r\n\r\n    const { InvoiceItems = [], PartyName = '', InvoiceNumber = '', id = '' } = InwardData\r\n\r\n    useEffect(() => {\r\n        let userAcc = null;\r\n        let locationPath = location.pathname;\r\n\r\n        if (hasShowModal) { locationPath = props.masterPath; };\r\n\r\n        userAcc = userAccess.find((inx) => {\r\n            return (`/${inx.ActualPagePath}` === locationPath)\r\n        })\r\n\r\n        if (userAcc) {\r\n            setUserAccState(userAcc)\r\n            _cfunc.breadcrumbReturnFunc({ dispatch, userAcc });\r\n        };\r\n    }, [userAccess])\r\n\r\n    const location = { ...history.location }\r\n    const hasShowModal = props.hasOwnProperty(mode.editValue)\r\n\r\n    useEffect(() => {\r\n        if ((postMsg.Status === true) && (postMsg.StatusCode === 200)) {\r\n            dispatch(postInwardSuccess({ Status: false }))\r\n            dispatch(customAlert({\r\n                Type: 1,\r\n                Status: true,\r\n                Message: postMsg.Message,\r\n                RedirectPath: url.INWARD_LIST,\r\n            }))\r\n\r\n        } else if (postMsg.Status === true) {\r\n            dispatch(postInwardSuccess({ Status: false }))\r\n            dispatch(customAlert({\r\n                Type: 4,\r\n                Status: true,\r\n                Message: JSON.stringify(postMsg.Message),\r\n                RedirectPath: false,\r\n                AfterResponseAction: false\r\n            }));\r\n        }\r\n    }, [postMsg])\r\n\r\n\r\n    function InwardDateOnchange(e, date) {\r\n        setInwardDate(date)\r\n    };\r\n\r\n    const saveHandeller = (e, values) => {\r\n\r\n        const arr = InvoiceItems.map(i => ({\r\n            Item: i.Item,\r\n            Quantity: i.Quantity,\r\n            MRP: i.MRP,\r\n            ReferenceRate: i.Rate,\r\n            Rate: i.Rate,\r\n            Unit: i.Unit,\r\n            BaseUnitQuantity: i.BaseUnitQuantity,\r\n            GST: i.GSTPercentage,\r\n            BasicAmount: i.BasicAmount,\r\n            GSTAmount: parseFloat(i.GSTAmount).toFixed(2),\r\n            Amount: i.Amount,\r\n            CGST: i.CGST,\r\n            SGST: i.SGST,\r\n            IGST: i.IGST,\r\n            CGSTPercentage: i.CGSTPercentage,\r\n            SGSTPercentage: i.SGSTPercentage,\r\n            IGSTPercentage: i.IGSTPercentage,\r\n            BatchDate: i.BatchDate,\r\n            BatchCode: i.BatchCode,\r\n            DiscountType: i.DiscountType,\r\n            Discount: i.Discount,\r\n            DiscountAmount: i.DiscountAmount,\r\n            TaxType: i.TaxType\r\n        }))\r\n\r\n        const jsonBody = JSON.stringify({\r\n            IBInwardDate: InwardDate,\r\n            IBInwardNumber: InwardData.InvoiceNumber,\r\n            FullIBInwardNumber: InwardData.FullInvoiceNumber,\r\n            GrandTotal: InwardData.GrandTotal,\r\n            CreatedBy: _cfunc.loginUserID(),\r\n            UpdatedBy: _cfunc.loginUserID(),\r\n            Customer: InwardData.Customer,\r\n            Supplier: InwardData.Party,\r\n            InterBranchInwardItems: arr,\r\n            InterBranchInwardReferences: [{\r\n                IBChallan: id\r\n            }]\r\n        });\r\n\r\n\r\n        if (pageMode === mode.edit) {\r\n        } else {\r\n\r\n            dispatch(postInward(jsonBody))\r\n        }\r\n    }\r\n\r\n    const pagesListColumns = [\r\n        {\r\n            text: \"Item Name\",\r\n            dataField: \"ItemName\",\r\n        },\r\n        {\r\n            text: \"Batch Code\",\r\n            dataField: \"\",\r\n            formatter: (cellContent, user) => (\r\n\r\n                <>\r\n                    <Table className=\"table table-bordered table-responsive mb-1\">\r\n                        <Thead>\r\n                            <tr>\r\n                                <th>Batch Code </th>\r\n                                <th>Quantity</th>\r\n                            </tr>\r\n                        </Thead>\r\n                        <Tbody>\r\n                            {InvoiceItems.map((index) => {\r\n\r\n                                return (\r\n                                    < tr >\r\n                                        <td>\r\n                                            <div style={{ width: \"150px\" }}>\r\n                                                <Label>\r\n                                                    {index.BatchCode}\r\n                                                </Label>\r\n                                            </div>\r\n                                        </td>\r\n                                        <td>\r\n                                            <div style={{ width: \"120px\", textAlign: \"right\" }}>\r\n                                                <Label >\r\n                                                    {index.BaseUnitQuantity}\r\n                                                </Label>\r\n                                            </div>\r\n                                        </td>\r\n\r\n                                    </tr>\r\n                                )\r\n                            })}\r\n                        </Tbody>\r\n                    </Table>\r\n                </>\r\n            ),\r\n        },\r\n\r\n        {\r\n            text: \"Quantity\",\r\n            dataField: \"BaseUnitQuantity\",\r\n        },\r\n        {\r\n            text: \"Unit\",\r\n            dataField: \"UnitName\",\r\n        },\r\n    ];\r\n\r\n    const pageOptions = {\r\n        sizePerPage: 10,\r\n        totalSize: InvoiceItems.length,\r\n        custom: true,\r\n    };\r\n\r\n    return (\r\n        <React.Fragment>\r\n           <MetaTags>{_cfunc.metaTagLabel(userPageAccessState)}</MetaTags>\r\n\r\n            <div className=\"page-content\">\r\n\r\n                <div className=\"px-2   c_card_filter text-black\" >\r\n                    <div className=\"row\" >\r\n                        <Col sm=\"4\" className=\"\">\r\n                            <FormGroup className=\" row mt-3 \" >\r\n                                <Label className=\"col-sm-5 p-2\"\r\n                                    style={{ width: \"83px\" }}>From Date</Label>\r\n                                <Col sm=\"7\">\r\n                                    <C_DatePicker\r\n                                        style={{ userselect: \"all\" }}\r\n                                        id=\"orderdate\"\r\n                                        name=\"orderdate\"\r\n                                        value={InwardDate}\r\n                                        onChange={InwardDateOnchange}\r\n                                    />\r\n                                </Col>\r\n                            </FormGroup>\r\n                        </Col>\r\n\r\n                        <Col sm=\"4\" className=\"\">\r\n                            <FormGroup className=\" row mt-3 \" >\r\n                                <Label className=\"col-sm-5 p-2\"\r\n                                    style={{ width: \"83px\" }}>Division</Label>\r\n                                <Col sm=\"7\">\r\n                                    <Input type=\"text\"\r\n                                        defaultValue={PartyName}\r\n                                        placeholder='Enter Division'\r\n                                    />\r\n                                </Col>\r\n                            </FormGroup>\r\n                        </Col>\r\n\r\n                        <Col sm=\"4\" className=\"\">\r\n                            <FormGroup className=\" row mt-3 \" >\r\n                                <Label className=\"col-sm- p-2\"\r\n                                    style={{ width: \"83px\" }}>Invoice Number</Label>\r\n                                <Col sm=\"7\">\r\n                                    <Input type=\"text\"\r\n                                        defaultValue={InvoiceNumber}\r\n                                        placeholder='Enter Challan No.'\r\n                                    />\r\n                                </Col>\r\n                            </FormGroup>\r\n                        </Col>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"mt-1\">\r\n                    <PaginationProvider pagination={paginationFactory(pageOptions)}>\r\n                        {({ paginationProps, paginationTableProps }) => (\r\n                            <ToolkitProvider\r\n                                keyField={\"id\"}\r\n                                data={InvoiceItems}\r\n                                columns={pagesListColumns}\r\n                                search\r\n                            >\r\n                                {(toolkitProps) => (\r\n                                    <React.Fragment>\r\n                                        <Row>\r\n                                            <Col xl=\"12\">\r\n                                                <div className=\"table-responsive\">\r\n                                                    <BootstrapTable\r\n                                                        keyField={\"id\"}\r\n                                                        id=\"table_Arrow\"\r\n                                                        responsive\r\n                                                        bordered={false}\r\n                                                        striped={false}\r\n                                                        classes={\"table  table-bordered\"}\r\n                                                        {...toolkitProps.baseProps}\r\n                                                        {...paginationTableProps}\r\n                                                        noDataIndication={\r\n                                                            <div className=\"text-danger text-center \">\r\n                                                                Items Not available\r\n                                                            </div>}\r\n                                                    />\r\n                                                </div>\r\n                                            </Col>\r\n                                        </Row>\r\n                                        <Row className=\"align-items-md-center mt-30\">\r\n                                            <Col className=\"pagination pagination-rounded justify-content-end mb-2\">\r\n                                                <PaginationListStandalone {...paginationProps} />\r\n                                            </Col>\r\n                                        </Row>\r\n                                    </React.Fragment>\r\n                                )}\r\n                            </ToolkitProvider>\r\n                        )}\r\n\r\n                    </PaginationProvider>\r\n                </div>\r\n                <div className=\"row save1\" style={{ paddingBottom: 'center', marginTop: \"-30px\" }}>\r\n                    <SaveButton pageMode={pageMode}\r\n                        userAcc={userPageAccessState}\r\n                        module={\"Inward\"} onClick={saveHandeller}\r\n                    />\r\n                </div>\r\n            </div>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default Inward;","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Inter Branch\\InwardRedux\\saga.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Inter Branch\\Inward\\InwardList.js",["3445","3446","3447","3448","3449","3450","3451"],"import React, { useEffect, useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport Select from \"react-select\";\r\nimport { Col, FormGroup, Label } from \"reactstrap\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport * as url from \"../../../routes/route_url\";\r\nimport * as pageId from \"../../../routes/allPageID\"\r\nimport * as mode from \"../../../routes/PageMode\"\r\nimport Inward from \"./Inward\";\r\nimport CommonPurchaseList from \"../../../components/Common/CommonPurchaseList\";\r\nimport { BreadcrumbShowCountlabel, commonPageFieldList, commonPageFieldListSuccess } from \"../../../store/actions\";\r\nimport { deleteInwardId, deleteInwardIdSuccess, getInwardListPage } from \"../../../store/Inter Branch/InwardRedux/action\";\r\nimport { currentDate_ymd, loginPartyID } from \"../../../components/Common/CommonFunction\";\r\nimport {  GetVenderSupplierCustomer } from \"../../../store/CommonAPI/SupplierRedux/actions\";\r\nimport { Go_Button } from \"../../../components/Common/CommonButton\";\r\nimport { C_DatePicker } from \"../../../CustomValidateForm\";\r\n\r\nconst InwardList = () => {\r\n\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n\r\n    const subPageMode = history.location.pathname\r\n\r\n    const [pageMode, setpageMode] = useState(mode.defaultList)\r\n    const [inwardlistFiltersState, setInwardlistFilter] = useState({ todate: currentDate_ymd, fromdate: currentDate_ymd, SupplierSelect: { value: '', label: \"All\" } });\r\n\r\n    const reducers = useSelector(\r\n        (state) => ({\r\n            tableList: state.InwardReducer.InwardList,\r\n            deleteMsg: state.InwardReducer.deleteMsg,\r\n            updateMsg: state.BOMReducer.updateMsg,\r\n            postMsg: state.OrderReducer.postMsg,\r\n            editData: state.BOMReducer.editData,\r\n            // InwardlistFilter: state.InwardReducer.InwardlistFilter,\r\n            supplier: state.CommonAPI_Reducer.vendorSupplierCustomer,\r\n            userAccess: state.Login.RoleAccessUpdateData,\r\n            pageField: state.CommonPageFieldReducer.pageFieldList\r\n        })\r\n    );\r\n\r\n    const { userAccess, pageField,  supplier } = reducers;\r\n    const { fromdate, todate, SupplierSelect } = inwardlistFiltersState;\r\n    const page_Id = pageId.INWARD_LIST\r\n\r\n    const action = {\r\n        getList: getInwardListPage,\r\n        editId: () => { },\r\n        deleteId: deleteInwardId,\r\n        postSucc: postMessage,\r\n        updateSucc: () => { },\r\n        deleteSucc: deleteInwardIdSuccess\r\n    }\r\n\r\n    // Featch Modules List data  First Rendering\r\n    useEffect(() => {\r\n        dispatch(commonPageFieldListSuccess(null))\r\n        dispatch(commonPageFieldList(page_Id))\r\n        // dispatch(BreadcrumbShowCountlabel(`${\"Inward Count\"} :0`))\r\n        dispatch(GetVenderSupplierCustomer({ subPageMode, RouteID: \"\" }))\r\n        goButtonHandler(true)\r\n\r\n    }, []);\r\n\r\n    const SupplierOptions = supplier.map((i) => ({\r\n        value: i.id,\r\n        label: i.Name,\r\n    }));\r\n\r\n    SupplierOptions.unshift({\r\n        value: \"\",\r\n        label: \" All\"\r\n    });\r\n\r\n\r\n    const goButtonHandler = () => {\r\n        const jsonBody = JSON.stringify({\r\n            FromDate: fromdate,\r\n            ToDate: todate,\r\n            Customer: loginPartyID(),\r\n            Supplier: SupplierSelect.value,\r\n        });\r\n        dispatch(getInwardListPage(jsonBody));\r\n    }\r\n\r\n    function fromdateOnchange(e, date) {\r\n        let newObj = { ...inwardlistFiltersState }\r\n        newObj.fromdate = date\r\n        setInwardlistFilter(newObj)\r\n    }\r\n\r\n    function todateOnchange(e, date) {\r\n        let newObj = { ...inwardlistFiltersState }\r\n        newObj.todate = date\r\n        setInwardlistFilter(newObj)\r\n    }\r\n\r\n    function SupplierOnchange(e) {\r\n        let newObj = { ...inwardlistFiltersState }\r\n        newObj.SupplierSelect = e\r\n        setInwardlistFilter({ ...newObj })\r\n    }\r\n    return (\r\n        <React.Fragment>\r\n\r\n            <div className=\"page-content\">\r\n\r\n                <div className=\"px-2 c_card_header text-black\" >\r\n                    <div className=\"px-2   c_card_filter text-black\" >\r\n                        <div className=\"row\" >\r\n                            <Col sm=\"3\" className=\"\">\r\n                                <FormGroup className=\"mb- row mt-3 \" >\r\n                                    <Label className=\"col-sm-5 p-2\"\r\n                                        style={{ width: \"83px\" }}>From Date</Label>\r\n                                    <Col sm=\"7\">\r\n                                        <C_DatePicker\r\n                                            name='fromdate'\r\n                                            value={fromdate}\r\n                                            onChange={fromdateOnchange}\r\n                                        />\r\n                                    </Col>\r\n                                </FormGroup>\r\n                            </Col>\r\n                            <Col sm=\"3\" className=\"\">\r\n                                <FormGroup className=\"mb- row mt-3 \" >\r\n                                    <Label className=\"col-sm-5 p-2\"\r\n                                        style={{ width: \"65px\" }}>To Date</Label>\r\n                                    <Col sm=\"7\">\r\n                                        <C_DatePicker\r\n                                            name=\"todate\"\r\n                                            value={todate}\r\n                                            onChange={todateOnchange}\r\n                                        />\r\n                                    </Col>\r\n                                </FormGroup>\r\n                            </Col>\r\n\r\n                            <Col sm=\"5\">\r\n                                <FormGroup className=\"mb-2 row mt-3 \" >\r\n                                    <Label className=\"col-md-4 p-2\"\r\n\r\n                                        style={{ width: \"115px\" }}>Supplier</Label>\r\n                                    <Col sm=\"5\">\r\n                                        <Select\r\n                                            classNamePrefix=\"select2-Customer\"\r\n                                            value={SupplierSelect}\r\n                                            options={SupplierOptions}\r\n                                            onChange={SupplierOnchange}\r\n                                        />\r\n                                    </Col>\r\n                                </FormGroup>\r\n                            </Col >\r\n\r\n                            <Col sm=\"1\" className=\"mt-3 \">\r\n                                <Go_Button onClick={goButtonHandler} />\r\n                            </Col>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                {\r\n                    (pageField) ?\r\n                        <CommonPurchaseList\r\n                            action={action}\r\n                            reducers={reducers}\r\n                            showBreadcrumb={false}\r\n                            masterPath={Inward}\r\n                            newBtnPath={url.IB_INWARD_STP}\r\n                            makeBtnShow={false}\r\n                            ButtonMsgLable={\"Inward\"}\r\n                            deleteName={\"IBInwardNumber\"}\r\n                            pageMode={pageMode}\r\n                            goButnFunc={goButtonHandler}\r\n                            filters={inwardlistFiltersState}\r\n                        />\r\n                        : null\r\n                }\r\n            </div>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default InwardList;","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Inter Branch\\InwardRedux\\reducer.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Inter Branch\\InwardRedux\\action.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Inter Branch\\InwardRedux\\actionType.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\Reports\\InvioceReport\\DemoData.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\Reports\\StockReport\\Page.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\Reports\\StockReport\\ReportStyle.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\Reports\\StockReport\\DemoData.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\Reports\\StockReport\\TableData.js",["3452"],"import { numberWithCommas } from \"../Report_common_function\";\r\nimport { date_dmy_func } from \"../../components/Common/CommonFunction\";\r\n\r\nexport const columns = [\r\n    \"Group Name\",\r\n    \"Sub Group Name\",\r\n    \"Item Name\",\r\n    \"Opening balance\",\r\n    \"GRN Inward\",\r\n    \"SalesReturn \",\r\n    \"Sale\",\r\n    \"Purchase Return\",\r\n    \"Closing balance\",\r\n    \"Actual Stock\",\r\n    \"Unit\"\r\n\r\n];\r\n\r\nexport const PageHedercolumns = [\r\n    \"Billed by\",\r\n    \"Billed to\",\r\n    ''\r\n]\r\n\r\nexport const Rows = (data) => {\r\n    const { StockDetails = [] } = data\r\n    StockDetails.sort((firstItem, secondItem) => firstItem.GSTPercentage - secondItem.GSTPercentage);\r\n    const returnArr = [];\r\n    let Item = 0\r\n    let TotalOpeningBalance = 0\r\n    let TotalClosingBalance = 0\r\n    let TotalGRNInward = 0\r\n    let TotalSalesReturn = 0\r\n    let TotalSale = 0\r\n    let TotalPurchaseReturn = 0\r\n    let TotalActualStock = 0\r\n\r\n\r\n\r\n    StockDetails.forEach((element, key) => {\r\n        const tableitemRow = [\r\n            `${element.GroupName}`,\r\n            `${element.SubGroupName}`,\r\n            `${element.ItemName}`,\r\n            `${numberWithCommas(Number(element.OpeningBalance).toFixed(2))}`,\r\n            `${numberWithCommas(Number(element.GRNInward).toFixed(2))}`,\r\n            `${numberWithCommas(Number(element.SalesReturn).toFixed(2))}`,\r\n            `${numberWithCommas(Number(element.Sale).toFixed(2))}`,\r\n            `${numberWithCommas(Number(element.PurchaseReturn).toFixed(2))}`,\r\n            `${numberWithCommas(Number(element.ClosingBalance).toFixed(2))}`,\r\n            `${numberWithCommas(Number(element.ActualStock).toFixed(2))}`,\r\n            `${element.UnitName}`,\r\n\r\n        ];\r\n\r\n        function totalLots() {\r\n            TotalOpeningBalance = Number(TotalOpeningBalance) + Number(element.OpeningBalance)\r\n            TotalClosingBalance = Number(TotalClosingBalance) + Number(element.ClosingBalance)\r\n            TotalGRNInward = Number(TotalGRNInward) + Number(element.GRNInward)\r\n            TotalSalesReturn = Number(TotalSalesReturn) + Number(element.SalesReturn)\r\n            TotalSale = Number(TotalSale) + Number(element.Sale)\r\n            TotalPurchaseReturn = Number(TotalPurchaseReturn) + Number(element.PurchaseReturn)\r\n            TotalActualStock = Number(TotalActualStock) + Number(element.ActualStock)\r\n\r\n        };\r\n\r\n        function totalrow() {\r\n            return [\r\n                `Total`,\r\n                ``,\r\n                ``,\r\n                `${numberWithCommas(Number(TotalOpeningBalance).toFixed(2))}`,\r\n                `${numberWithCommas(Number(TotalGRNInward).toFixed(2))}`,\r\n                `${numberWithCommas(Number(TotalSalesReturn).toFixed(2))}`,\r\n                `${numberWithCommas(Number(TotalSale).toFixed(2))}`,\r\n                `${numberWithCommas(Number(TotalPurchaseReturn).toFixed(2))}`,\r\n                `${numberWithCommas(Number(TotalClosingBalance).toFixed(2))}`,\r\n                `${numberWithCommas(Number(TotalActualStock).toFixed(2))}`,\r\n                ,\r\n\r\n            ];\r\n        };\r\n\r\n        if (Item === 0) { Item = element.Item };\r\n        if ((Item === element.Item)) {\r\n            // returnArr.push(totalrow());\r\n            // returnArr.push(materialRow());\r\n            returnArr.push(tableitemRow);\r\n            data[\"tableTot\"] = totalLots()\r\n\r\n        }\r\n        if (key === StockDetails.length - 1) {\r\n            returnArr.push(totalrow());\r\n        }\r\n    })\r\n    return returnArr;\r\n}\r\n\r\n\r\nexport const ReportHederRows = (data) => {\r\n    var reportArray = [\r\n        [`From Date:  ${date_dmy_func(data.FromDate)}`,],\r\n        [`To Date:      ${date_dmy_func(data.ToDate)}`],\r\n    ]\r\n    return reportArray;\r\n}","D:\\Rohit\\Git projects\\Manthan\\src\\CustomAlert\\ConfirmDialog.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\CustomAlert\\ConfirmContextProvider.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\CustomAlert\\reducer.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\CustomAlert\\useConfirm.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\CustomAlert\\ConfirmContext.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Inventory\\ChallanRedux\\reducer.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Inventory\\ChallanRedux\\saga.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Inventory\\ChallanRedux\\actions.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Inventory\\ChallanRedux\\actionType.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Production\\ProductionReissueRedux\\reducer.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Production\\ProductionReissueRedux\\saga.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Production\\ProductionReissueRedux\\actionType.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Production\\ProductionReissueRedux\\actions.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Production\\Material_Issue\\Material_Issue_List.js",["3453","3454","3455","3456","3457"],"import React, { useEffect, useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { BreadcrumbShowCountlabel, commonPageFieldList, commonPageFieldListSuccess, } from \"../../../store/actions\";\r\nimport CommonPurchaseList from \"../../../components/Common/CommonPurchaseList\"\r\nimport { Button, Col, FormGroup, Label } from \"reactstrap\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { date_ymd_func} from \"../../../components/Common/CommonFunction\";\r\nimport MaterialIssueMaster from \"./Material_IssueMaster\";\r\nimport {\r\n    deleteMaterialIssueId,\r\n    deleteMaterialIssueIdSuccess,\r\n    editMaterialIssueId,\r\n    getMaterialIssueListPage,\r\n} from \"../../../store/Production/Matrial_Issue/action\";\r\nimport { mode, url, pageId } from \"../../../routes/index\";\r\nimport { updateWorkOrderListSuccess } from \"../../../store/Production/WorkOrder/action\";\r\nimport { C_DatePicker } from \"../../../CustomValidateForm\";\r\n\r\nconst MaterialIssueList = () => {\r\n\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n    const currentDate_ymd = date_ymd_func();\r\n\r\n    const [hederFilters, setHederFilters] = useState({ fromdate: currentDate_ymd, todate: currentDate_ymd, })\r\n\r\n    const reducers = useSelector(\r\n        (state) => ({\r\n            tableList: state.MaterialIssueReducer.materialIssueList,\r\n            deleteMsg: state.MaterialIssueReducer.deleteMsg,\r\n            updateMsg: state.WorkOrderReducer.updateMsg,\r\n            postMsg: state.OrderReducer.postMsg,\r\n            editData: state.MaterialIssueReducer.editData,\r\n            produtionMake: state.ProductionReducer.produtionMake,\r\n            userAccess: state.Login.RoleAccessUpdateData,\r\n            pageField: state.CommonPageFieldReducer.pageFieldList,\r\n        })\r\n    );\r\n\r\n    const {  pageField, produtionMake } = reducers;\r\n    const { fromdate, todate } = hederFilters;\r\n\r\n    const hasPagePath = history.location.pathname;\r\n    const pageMode = (hasPagePath === url.PRODUCTION_STP) ? mode.modeSTPsave : mode.defaultList;\r\n    const page_Id = (hasPagePath === url.PRODUCTION_STP) ? pageId.PRODUCTION_STP : pageId.MATERIAL_ISSUE_LIST;\r\n\r\n    const action = {\r\n        getList: getMaterialIssueListPage,\r\n        editId: editMaterialIssueId,\r\n        deleteId: deleteMaterialIssueId,\r\n        postSucc: postMessage,\r\n        updateSucc: updateWorkOrderListSuccess,\r\n        deleteSucc: deleteMaterialIssueIdSuccess,\r\n    }\r\n\r\n    // Featch Modules List data  First Rendering\r\n    useEffect(() => {\r\n        // setpageMode(page_mode)\r\n        // dispatch(BreadcrumbShowCountlabel(`${\"Material Issue Count\"} :0`))\r\n        dispatch(commonPageFieldListSuccess(null))\r\n        dispatch(commonPageFieldList(page_Id))\r\n        goButtonHandler(true)\r\n\r\n    }, []);\r\n\r\n\r\n    useEffect(() => {\r\n        if (produtionMake.Status === true && produtionMake.StatusCode === 406) {\r\n            history.push({\r\n                pathname: produtionMake.path,\r\n                pageMode: produtionMake.pageMode,\r\n            })\r\n        }\r\n    }, [produtionMake]);\r\n\r\n    const makeBtnFunc = (list = {}) => {\r\n        \r\n        const obj = { ...list[0], EstimatedQuantity: list[0].LotQuantity }\r\n        history.push({\r\n            pathname: url.PRODUCTION_MASTER,\r\n            editValue: obj,\r\n            pageMode: mode.modeSTPsave\r\n        })\r\n    };\r\n\r\n    const goButtonHandler = () => {\r\n        const jsonBody = JSON.stringify({\r\n            FromDate: fromdate,\r\n            ToDate: todate,\r\n        });\r\n        dispatch(getMaterialIssueListPage(jsonBody));\r\n    };\r\n\r\n    function fromdateOnchange(e, date) {\r\n        let newObj = { ...hederFilters }\r\n        newObj.fromdate = date\r\n        setHederFilters(newObj)\r\n    }\r\n\r\n    function todateOnchange(e, date) {\r\n        let newObj = { ...hederFilters }\r\n        newObj.todate = date\r\n        setHederFilters(newObj)\r\n    };\r\n\r\n    return (\r\n        <React.Fragment>\r\n          \r\n\r\n            <div className=\"page-content\">\r\n\r\n                <div className=\"px-2  c_card_header text-black\" >\r\n                    <div className=\" row\" >\r\n                        <Col sm=\"5\" >\r\n                            <FormGroup className=\" row mt-3 \" >\r\n                                <Label className=\"col-sm-5 p-2\"\r\n                                    style={{ width: \"83px\" }}>From Date</Label>\r\n                                <Col sm=\"6\">\r\n                                    <C_DatePicker\r\n                                        name='fromdate'\r\n                                        value={fromdate}\r\n                                        onChange={fromdateOnchange}\r\n                                    />\r\n                                </Col>\r\n                            </FormGroup>\r\n                        </Col>\r\n                        <Col sm=\"5\">\r\n                            <FormGroup className=\" mb-1 row mt-3 \" >\r\n                                <Label className=\"col-sm-1 p-2\"\r\n                                    style={{ width: \"65px\", marginRight: \"0.4cm\" }}>To Date</Label>\r\n                                <Col sm=\"6 \">\r\n                                    <C_DatePicker\r\n                                        name=\"todate\"\r\n                                        value={todate}\r\n                                        onChange={todateOnchange}\r\n                                    />\r\n                                </Col>\r\n                            </FormGroup>\r\n                        </Col>\r\n\r\n                        <Col sm=\"1\" className=\"mx-4 \">\r\n                            <Button type=\"button\" color=\"btn btn-outline-success border-2 font-size-12 m-3  \"\r\n                                onClick={() => goButtonHandler()}\r\n                            >Go</Button>\r\n                        </Col>\r\n                    </div>\r\n                </div>\r\n                {\r\n                    (pageField) ?\r\n                        <CommonPurchaseList\r\n                            action={action}\r\n                            reducers={reducers}\r\n                            showBreadcrumb={false}\r\n                            MasterModal={MaterialIssueMaster}\r\n                            masterPath={url.MATERIAL_ISSUE}\r\n                            newBtnPath={url.MATERIAL_ISSUE_STP}\r\n                            ButtonMsgLable={\"Material Issue\"}\r\n                            deleteName={\"ItemName\"}\r\n                            pageMode={pageMode}\r\n                            goButnFunc={goButtonHandler}\r\n                            makeBtnFunc={makeBtnFunc}\r\n                            makeBtnShow={pageMode === mode.defaultList ? false : true}\r\n                            makeBtnName={\"Make Production\"}\r\n                        />\r\n                        : null\r\n                }\r\n            </div>\r\n\r\n\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default MaterialIssueList;","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Production\\Production\\ProductionMaster.js",["3458","3459","3460","3461","3462","3463","3464","3465","3466"],"import {\r\n    Col,\r\n    FormGroup,\r\n    Input,\r\n    Label,\r\n    Row,\r\n} from \"reactstrap\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport Select from \"react-select\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { MetaTags } from \"react-meta-tags\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {  commonPageField, commonPageFieldSuccess } from \"../../../store/actions\";\r\nimport { SaveButton } from \"../../../components/Common/CommonButton\";\r\nimport { breadcrumbReturnFunc, btnIsDissablefunc, currentDate_ymd, metaTagLabel } from \"../../../components/Common/CommonFunction\";\r\nimport {\r\n    comAddPageFieldFunc,\r\n    formValid, initialFiledFunc,\r\n    onChangeDate,\r\n    onChangeSelect,\r\n    onChangeText,\r\n    resetFunction\r\n} from \"../../../components/Common/validationFunction\";\r\nimport {\r\n    edit_ProductionIdSuccess,\r\n    getUnitIDForProdunction,\r\n    getUnitIDForProdunctionSuccess,\r\n    Save_Production,\r\n    Save_ProductionSuccess,\r\n    update_ProductionIdSuccess\r\n} from \"../../../store/Production/ProductionRedux/actions\";\r\nimport { getMaterialIssueListPage } from \"../../../store/Production/Matrial_Issue/action\";\r\nimport * as pageId from \"../../../routes/allPageID\";\r\nimport * as url from \"../../../routes/route_url\";\r\nimport * as mode from \"../../../routes/PageMode\";\r\nimport { C_DatePicker } from \"../../../CustomValidateForm\";\r\nimport { customAlert } from \"../../../CustomAlert/ConfirmDialog\";\r\n\r\nconst ProductionMaster = (props) => {\r\n\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n\r\n    const [modalCss, setModalCss] = useState(false);\r\n    const [pageMode, setPageMode] = useState(mode.defaultsave);\r\n    const [userPageAccessState, setUserAccState] = useState('');\r\n    const [UnitNamefromPageMod_2, setUnitNamefromPageMod_2] = useState('');\r\n\r\n    const fileds = {\r\n        id: \"\",\r\n        ProductionDate: currentDate_ymd,\r\n        NumberOfLot: \"\",\r\n        EstimatedQuantity: \"\",\r\n        ActualQuantity: \"\",\r\n        PrintedBatchCode: \"\",\r\n        BestBefore: \"\",\r\n        Remark: \"\",\r\n        ItemName: \"\",\r\n        UnitName: \"\"\r\n    }\r\n    const [state, setState] = useState(initialFiledFunc(fileds))\r\n\r\n    const {\r\n        postMsg,\r\n        userAccess,\r\n        updateMsg,\r\n        pageField,\r\n        itemsDrop,\r\n        UnitDropdown\r\n    } = useSelector((state) => ({\r\n        supplierAddress: state.CommonAPI_Reducer.supplierAddress,\r\n        postMsg: state.ProductionReducer.postMsg,\r\n        updateMsg: state.ProductionReducer.updateMsg,\r\n        UnitDropdown: state.ProductionReducer.unit,\r\n        itemsDrop: state.MaterialIssueReducer.materialIssueList,\r\n        userAccess: state.Login.RoleAccessUpdateData,\r\n        pageField: state.CommonPageFieldReducer.pageField,\r\n    }));\r\n\r\n    useEffect(() => {\r\n        dispatch(getUnitIDForProdunctionSuccess([]))\r\n        dispatch(commonPageFieldSuccess(null));\r\n        dispatch(commonPageField(pageId.PRODUCTION_LIST))\r\n    }, []);\r\n\r\n    const location = { ...history.location }\r\n    const hasShowloction = location.hasOwnProperty(mode.editValue)\r\n    const hasShowModal = props.hasOwnProperty(mode.editValue)\r\n\r\n    const values = { ...state.values }\r\n    const { isError } = state;\r\n    const { fieldLabel } = state;\r\n\r\n    useEffect(() => {\r\n        if ((hasShowloction || hasShowModal)) {\r\n            let hasEditVal = null\r\n            let insidePageMode = null;\r\n            if (hasShowloction) {\r\n                setPageMode(location.pageMode)\r\n                insidePageMode = location.pageMode;\r\n                hasEditVal = location.editValue\r\n            }\r\n            else if (hasShowModal) {\r\n                hasEditVal = props.editValue\r\n                insidePageMode = props.pageMode;\r\n                setPageMode(props.pageMode)\r\n                setModalCss(true)\r\n            }\r\n\r\n            if (hasEditVal) {\r\n\r\n                // }\r\n                // \r\n                // // let mode2Data = props.location\r\n                // // const MaterialProductionaData = Object.assign({}, mode2Data.MaterialProductionaData)\r\n                // if (mode2Data.pageMode === mode.modeSTPsave) {\r\n                const { Item, ItemName, UnitName, Unit, id,\r\n                    EstimatedQuantity = 0,\r\n                    BestBefore = '',\r\n                    Remark = \"\", PrintedBatchCode = '',\r\n                    NumberOfLot = 0, ActualQuantity = '',\r\n                    ProductionDate = currentDate_ymd } = hasEditVal;\r\n\r\n                setUnitNamefromPageMod_2(UnitName)\r\n                setState(ele => {\r\n                    const i = { ...ele };\r\n\r\n                    i.values.ItemName = {\r\n                        label: ItemName,\r\n                        value: Item\r\n                    }\r\n                    i.values.UnitName = {\r\n                        label: UnitName,\r\n                        value: Unit\r\n                    }\r\n                    i.values.id = id;\r\n\r\n                    i.values.ProductionDate = ProductionDate;\r\n                    i.values.EstimatedQuantity = EstimatedQuantity;//EstimatedQuantity===LoQuantity\r\n                    i.values.NumberOfLot = NumberOfLot;      //NumberOfLot===NumberOfLot\r\n                    i.values.ActualQuantity = ActualQuantity;\r\n                    i.values.BestBefore = BestBefore;\r\n                    i.values.PrintedBatchCode = PrintedBatchCode;\r\n                    i.values.Remark = Remark;\r\n\r\n                    i.hasValid.id.valid = true\r\n                    i.hasValid.ActualQuantity.valid = true\r\n                    i.hasValid.ProductionDate.valid = true\r\n                    i.hasValid.ItemName.valid = true\r\n                    i.hasValid.EstimatedQuantity.valid = true\r\n                    i.hasValid.NumberOfLot.valid = true\r\n                    return i\r\n                })\r\n\r\n                if (insidePageMode === mode.modeSTPsave) {\r\n                    const jsonBody = JSON.stringify({\r\n                        Item: Item\r\n                    });\r\n                    dispatch(getUnitIDForProdunction(jsonBody));\r\n                }\r\n                else if (insidePageMode === mode.edit || insidePageMode === mode.view) {\r\n                    dispatch(edit_ProductionIdSuccess({ Status: false }))\r\n                }\r\n            }\r\n\r\n        } else {\r\n            const jsonBody = JSON.stringify({\r\n                FromDate: \"2022-11-01\", //from datehardrd code value is compulsory\r\n                ToDate: currentDate_ymd,\r\n            });\r\n            dispatch(getMaterialIssueListPage(jsonBody));\r\n        }\r\n    }, []);\r\n\r\n    // userAccess useEffect\r\n    useEffect(() => {\r\n        let userAcc = null;\r\n        let locationPath = location.pathname;\r\n        if (hasShowModal) {\r\n            locationPath = props.masterPath;\r\n        };\r\n        userAcc = userAccess.find((inx) => {\r\n            return (`/${inx.ActualPagePath}` === locationPath)\r\n        })\r\n        if (userAcc) {\r\n            setUserAccState(userAcc)\r\n            breadcrumbReturnFunc({ dispatch, userAcc });\r\n\r\n        };\r\n    }, [userAccess]);\r\n\r\n    useEffect(async () => {\r\n        if ((postMsg.Status === true) && (postMsg.StatusCode === 200)) {\r\n            dispatch(Save_ProductionSuccess({ Status: false }))\r\n            setState(() => resetFunction(fileds, state))// Clear form values  \r\n            dispatch(customAlert({\r\n                Type: 1,\r\n                Status: true,\r\n                Message: postMsg.Message,\r\n                RedirectPath: url.PRODUCTION_LIST,\r\n            }))\r\n        } else if (postMsg.Status === true) {\r\n            dispatch(Save_ProductionSuccess({ Status: false }))\r\n            dispatch(customAlert({\r\n                Type: 4,\r\n                Status: true,\r\n                Message: JSON.stringify(postMsg.Message),\r\n                RedirectPath: false,\r\n                AfterResponseAction: false\r\n            }));\r\n        }\r\n    }, [postMsg]);\r\n\r\n    useEffect(() => {\r\n        if (updateMsg.Status === true && updateMsg.StatusCode === 200 && !modalCss) {\r\n            // setState(() => resetFunction(fileds, state))// Clear form values  \r\n            history.push({\r\n                pathname: url.PRODUCTION_LIST,\r\n            })\r\n        } else if (updateMsg.Status === true && !modalCss) {\r\n            dispatch(update_ProductionIdSuccess({ Status: false }));\r\n             customAlert({\r\n                Type: 3,\r\n                Message: JSON.stringify(updateMsg.Message),\r\n            })\r\n        }\r\n    }, [updateMsg, modalCss]);\r\n\r\n    useEffect(() => {\r\n        if (pageField) {\r\n            const fieldArr = pageField.PageFieldMaster\r\n            comAddPageFieldFunc({ state, setState, fieldArr })\r\n        }\r\n    }, [pageField]);\r\n\r\n    const ItemDropdown_Options = itemsDrop.map((index) => ({\r\n        value: index.id,\r\n        label: index.ItemName,\r\n    }));\r\n\r\n    const SaveHandler = async (event) => {\r\n        event.preventDefault();\r\n        const btnId = event.target.id\r\n        try {\r\n            if (formValid(state, setState)) {\r\n                btnIsDissablefunc({ btnId, state: true })\r\n                const jsonBody = JSON.stringify({\r\n                    ProductionMaterialIssue: [\r\n                        {\r\n                            MaterialIssue: values.id,\r\n                        }\r\n                    ],\r\n                    ProductionDate: values.ProductionDate,\r\n                    EstimatedQuantity: values.EstimatedQuantity,\r\n                    NumberOfLot: values.NumberOfLot,\r\n                    ActualQuantity: parseFloat(values.ActualQuantity).toFixed(3),\r\n                    BatchDate: \"2022-12-17\",\r\n                    BatchCode: \"aa\",\r\n                    StoreLocation: \"aa\",\r\n                    PrintedBatchCode: values.PrintedBatchCode,\r\n                    BestBefore: values.BestBefore,\r\n                    Remark: values.Remark,\r\n                    CreatedBy: 1,\r\n                    UpdatedBy: 1,\r\n                    Company: 1,\r\n                    Division: 4,\r\n                    GST: 8,\r\n                    Unit: values.UnitName.value,\r\n                    MRP: \"\",\r\n                    Rate: 55,\r\n                    Item: values.ItemName.value,\r\n                });\r\n\r\n                dispatch(Save_Production({ jsonBody, btnId }));\r\n            }\r\n        } catch (e) {btnIsDissablefunc({ btnId, state: false }) }\r\n    };\r\n\r\n\r\n    // const SaveHandler = (event) => {\r\n    //     event.preventDefault();\r\n    //     if (formValid(state, setState)) {\r\n\r\n    //         const jsonBody = JSON.stringify({\r\n    //             ProductionMaterialIssue: [\r\n    //                 {\r\n    //                     MaterialIssue: values.id,\r\n    //                 }\r\n    //             ],\r\n    //             ProductionDate: values.ProductionDate,\r\n    //             EstimatedQuantity: values.EstimatedQuantity,\r\n    //             NumberOfLot: values.NumberOfLot,\r\n    //             ActualQuantity: parseFloat(values.ActualQuantity).toFixed(3),\r\n    //             BatchDate: \"2022-12-17\",\r\n    //             BatchCode: \"aa\",\r\n    //             StoreLocation: \"aa\",\r\n    //             PrintedBatchCode: values.PrintedBatchCode,\r\n    //             BestBefore: values.BestBefore,\r\n    //             Remark: values.Remark,\r\n    //             CreatedBy: 1,\r\n    //             UpdatedBy: 1,\r\n    //             Company: 1,\r\n    //             Division: 4,\r\n    //             GST: 8,\r\n    //             Unit: values.UnitName.value,\r\n    //             MRP: \"\",\r\n    //             Rate: 55,\r\n    //             Item: values.ItemName.value,\r\n    //         });\r\n    //         dispatch(Save_Production(jsonBody));\r\n    //     }\r\n    // };\r\n\r\n    if (!(userPageAccessState === \"\")) {\r\n        return (\r\n            <React.Fragment>\r\n                 <MetaTags>{metaTagLabel(userPageAccessState)}</MetaTags>\r\n                <div className=\"page-content\" style={{ marginBottom: \"16cm\" }} >\r\n\r\n                    <form onSubmit={SaveHandler} noValidate>\r\n                        <div className=\"px-2 mb-1  c_card_header \"  >\r\n                            <Row>\r\n                                <Col sm={5}>\r\n                                    <FormGroup className=\" row mt-2 \" >\r\n                                        <Label className=\"col-sm-4 p-2\"\r\n                                            style={{ width: \"170px\" }}>{fieldLabel.ProductionDate}</Label>\r\n                                        <Col sm=\"7\">\r\n                                            <C_DatePicker\r\n                                                name=\"ProductionDate\"\r\n                                                value={values.ProductionDate}\r\n                                                disabled={pageMode === mode.modeSTPsave || pageMode === mode.view ? true : false}\r\n                                                onChange={(y, v, e) => { onChangeDate({ e, v, state, setState }) }}\r\n                                            />\r\n\r\n                                            {isError.ProductionDate.length > 0 && (\r\n                                                <span className=\"text-danger f-8\"><small>{isError.ProductionDate}</small></span>\r\n                                            )}\r\n                                        </Col>\r\n                                    </FormGroup>\r\n\r\n                                    <FormGroup className=\" row  \" >\r\n                                        <Label className=\"col-sm-4 p-2\"\r\n                                            style={{ width: \"170px\" }}>{fieldLabel.EstimatedQuantity} </Label>\r\n                                        <Col md=\"7\">\r\n                                            < Input\r\n                                                disabled\r\n                                                name=\"EstimatedQuantity\"\r\n                                                type=\"text\"\r\n                                                className=\"text-end\"\r\n                                                placeholder=\"Enter EstimatedQuantity\"\r\n                                                value={`${values.EstimatedQuantity ? values.EstimatedQuantity : \"0\"}   Lot(${values.NumberOfLot ? values.NumberOfLot : \"1\"})`}\r\n                                                autoComplete=\"off\"\r\n                                                style={{ backgroundColor: \"white\" }}\r\n                                                onChange={(event) => {\r\n                                                    onChangeText({ event, state, setState })\r\n                                                }}\r\n                                            />\r\n                                        </Col>\r\n                                        <div className=\"col col-1\">\r\n                                            <Label style={{ marginTop: '7px', width: \"72px\", marginLeft: '-23px' }}>\r\n                                                {UnitNamefromPageMod_2}\r\n                                            </Label>\r\n                                        </div>\r\n                                    </FormGroup>\r\n\r\n                                    <FormGroup className=\"row  \" >\r\n                                        <Label className=\"col-sm-4 p-2\"\r\n                                            style={{ width: \"170px\" }}>{fieldLabel.ActualQuantity}</Label>\r\n                                        <Col md=\"7\">\r\n                                            <Input\r\n                                                type=\"text\"\r\n                                                name=\"ActualQuantity\"\r\n                                                value={values.ActualQuantity}\r\n                                                disabled={pageMode === mode.view ? true : false}\r\n\r\n                                                className=\"text-end\"\r\n                                                placeholder=\"Enter ActualQuantity\"\r\n                                                autoComplete=\"off\"\r\n                                                onChange={(event) => {\r\n                                                    onChangeText({ event, state, setState })\r\n                                                }}\r\n                                            />\r\n                                            {isError.ActualQuantity.length > 0 && (\r\n                                                <span className=\"text-danger f-8\"><small>{isError.ActualQuantity}</small></span>\r\n                                            )}\r\n                                        </Col>\r\n                                    </FormGroup>\r\n\r\n                                    <FormGroup className=\" row\" >\r\n                                        <Label className=\"col-sm-4 p-2\"\r\n                                            style={{ width: \"170px\" }}>{fieldLabel.BestBefore}</Label>\r\n                                        <Col md=\"7\">\r\n                                            <C_DatePicker\r\n                                                name=\"BestBefore\"\r\n                                                value={values.BestBefore}\r\n                                                disabled={pageMode === mode.view ? true : false}\r\n                                                onChange={(y, v, e) => { onChangeDate({ e, v, state, setState }) }}\r\n                                            />\r\n                                        </Col>\r\n                                    </FormGroup>\r\n                                </Col>\r\n\r\n                                <Col sm={5}>\r\n                                    <FormGroup className=\" row mt-2\" >\r\n                                        <Label className=\"col-md-4 p-2\"\r\n                                            style={{ width: \"170px\" }}>{fieldLabel.ItemName}</Label>\r\n                                        <Col md=\"7\">\r\n                                            <Select\r\n                                                isDisabled={true}\r\n                                                name=\"Name\"\r\n                                                value={values.ItemName}\r\n                                                options={ItemDropdown_Options}\r\n                                                onChange={(hasSelect, evn) => {\r\n                                                    onChangeSelect({ hasSelect, evn, state, setState });\r\n                                                }}\r\n                                            />\r\n                                            {isError.id.length > 0 && (\r\n                                                <span className=\"text-danger f-8\"><small>{isError.id}</small></span>\r\n                                            )}\r\n                                        </Col>\r\n                                    </FormGroup>\r\n\r\n                                    <br></br>\r\n                                    <br></br>\r\n\r\n                                    <FormGroup className=\" row\" >\r\n                                        <Label className=\"col-md-4 p-2\"\r\n                                            style={{ width: \"170px\" }}>{fieldLabel.UnitName}</Label>\r\n                                        <Col md=\"7\">\r\n                                            <Select\r\n                                                isDisabled={pageMode === mode.view ? true : false}\r\n                                                name=\"UnitName\"\r\n                                                value={values.UnitName}\r\n                                                options={UnitDropdown}\r\n                                                onChange={(hasSelect, evn) => {\r\n                                                    onChangeSelect({ hasSelect, evn, state, setState });\r\n                                                }\r\n                                                }\r\n                                            />\r\n                                            {isError.id.length > 0 && (\r\n                                                <span className=\"text-danger f-8\"><small>{isError.id}</small></span>\r\n                                            )}\r\n                                        </Col>\r\n                                    </FormGroup>\r\n\r\n                                    <FormGroup className=\" row  \" >\r\n                                        <Label className=\"col-md-4 p-2\"\r\n                                            style={{ width: \"170px\" }}>{fieldLabel.PrintedBatchCode}</Label>\r\n                                        <Col md=\"7\">\r\n                                            <Input\r\n                                                type=\"text\"\r\n                                                name=\"PrintedBatchCode\"\r\n                                                value={values.PrintedBatchCode}\r\n                                                disabled={pageMode === mode.view ? true : false}\r\n\r\n                                                placeholder=\"Enter PrintedBatchCode\"\r\n                                                autoComplete=\"off\"\r\n                                                onChange={(event) => {\r\n                                                    onChangeText({ event, state, setState })\r\n                                                }}\r\n                                            />\r\n                                            {isError.PrintedBatchCode.length > 0 && (\r\n                                                <span className=\"text-danger f-8\"><small>{isError.PrintedBatchCode}</small></span>\r\n                                            )}\r\n                                        </Col>\r\n                                    </FormGroup>\r\n                                </Col>\r\n\r\n                                <FormGroup className=\" row \" >\r\n                                    <Label className=\"col-sm-4 p-2\"\r\n                                        style={{ width: \"168px\" }}>{fieldLabel.Remark}</Label>\r\n                                    <Col md=\"3\">\r\n                                        <Input\r\n                                            type=\"text\"\r\n                                            name=\"Remark\"\r\n                                            value={values.Remark}\r\n                                            disabled={pageMode === mode.view ? true : false}\r\n\r\n                                            placeholder=\"Enter Remark\"\r\n                                            autoComplete=\"off\"\r\n                                            onChange={(event) => {\r\n                                                onChangeText({ event, state, setState })\r\n                                            }}\r\n                                        />\r\n                                        {isError.Remark.length > 0 && (\r\n                                            <span className=\"text-danger f-8\"><small>{isError.Remark}</small></span>\r\n                                        )}\r\n                                    </Col>\r\n                                </FormGroup>\r\n\r\n                            </Row>\r\n                        </div>\r\n\r\n                        <div className=\"px-2 mb-1 mt-n3\" style={{ marginRight: '-28px', marginLeft: \"-8px\" }}>\r\n                            <Row>\r\n                                <FormGroup>\r\n                                    <Col sm={2} style={{ marginLeft: \"\", marginTop: \"20px\" }}>\r\n                                        <SaveButton pageMode={pageMode}\r\n                                            userAcc={userPageAccessState}\r\n                                            module={\"ProductionMaster\"}\r\n                                        />\r\n                                    </Col>\r\n                                </FormGroup >\r\n                            </Row>\r\n                        </div>\r\n                    </form>\r\n                </div >\r\n            </React.Fragment >\r\n        )\r\n    } else {\r\n        return null\r\n    }\r\n}\r\nexport default ProductionMaster;","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Production\\ProductionRe-Issue\\PrductionReIssueAdd.js",["3467","3468","3469","3470","3471","3472","3473","3474","3475","3476","3477","3478","3479","3480","3481","3482","3483"],"import React, { useEffect, useState, } from \"react\";\r\nimport {\r\n    Col,\r\n    FormGroup,\r\n    Input,\r\n    Label,\r\n    Row,\r\n    Table\r\n} from \"reactstrap\";\r\nimport { MetaTags } from \"react-meta-tags\";\r\nimport { Breadcrumb_inputName, commonPageFieldSuccess } from \"../../../store/actions\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {  commonPageField } from \"../../../store/actions\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {\r\n    comAddPageFieldFunc,\r\n    formValid,\r\n    initialFiledFunc,\r\n    onChangeDate,\r\n} from \"../../../components/Common/validationFunction\";\r\nimport Select from \"react-select\";\r\nimport { Change_Button, Go_Button, SaveButton } from \"../../../components/Common/CommonButton\";\r\nimport {\r\n    saveBOMMasterSuccess,\r\n    updateBOMListSuccess\r\n} from \"../../../store/Production/BOMRedux/action\";\r\nimport {\r\n    breadcrumbReturnFunc,\r\n    date_dmy_func,\r\n    loginUserID, currentDate_ymd,\r\n    loginCompanyID,\r\n    loginPartyID,\r\n    metaTagLabel\r\n}\r\n from \"../../../components/Common/CommonFunction\";\r\nimport {\r\n    goButtonForMaterialIssue_Master_Action,\r\n    goButtonForMaterialIssue_Master_ActionSuccess,\r\n    SaveMaterialIssueSuccess\r\n} from \"../../../store/Production/Matrial_Issue/action\";\r\nimport paginationFactory, { PaginationListStandalone, PaginationProvider } from \"react-bootstrap-table2-paginator\";\r\nimport ToolkitProvider from \"react-bootstrap-table2-toolkit\";\r\nimport BootstrapTable from \"react-bootstrap-table-next\";\r\nimport { Tbody, Thead } from \"react-super-responsive-table\";\r\nimport * as mode from \"../../../routes/PageMode\";\r\nimport * as pageId from \"../../../routes/allPageID\"\r\nimport * as url from \"../../../routes/route_url\"\r\nimport { countlabelFunc } from \"../../../components/Common/CommonPurchaseList\";\r\nimport {\r\n    Save_Production_ReIssue,\r\n    Save_Production_ReIssueSuccess,\r\n    makeBtnProduction_ReIssue_STP_actionSuccess,\r\n} from \"../../../store/Production/ProductionReissueRedux/actions\";\r\nimport * as _cfunc from \"../../../components/Common/CommonFunction\";\r\nimport { C_DatePicker } from \"../../../CustomValidateForm\";\r\nimport { customAlert } from \"../../../CustomAlert/ConfirmDialog\";\r\n\r\nconst ProductionReIssueAdd = (props) => {\r\n\r\n    const dispatch = useDispatch();\r\n    const history = useHistory()\r\n\r\n    const fileds = {\r\n        ProductionReIssueDate: currentDate_ymd,\r\n        ItemName: [],\r\n    }\r\n\r\n    const [state, setState] = useState(() => initialFiledFunc(fileds))\r\n    const [modalCss, setModalCss] = useState(false);\r\n    const [pageMode, setPageMode] = useState(mode.defaultsave);\r\n    const [userPageAccessState, setUserAccState] = useState('');\r\n    const [goButtonList, setGoButtonList] = useState([]);\r\n    const [itemOption, setItemOption] = useState([]);\r\n\r\n    //Access redux store Data /  'save_ModuleSuccess' action data\r\n    const {\r\n        postMsg,\r\n        updateMsg,\r\n        pageField,\r\n        userAccess,\r\n        makeProductionReIssue,\r\n    } = useSelector((state) => ({\r\n        postMsg: state.ProductionReIssueReducer.postMsg,\r\n        updateMsg: state.ProductionReIssueReducer.updateMsg,\r\n        userAccess: state.Login.RoleAccessUpdateData,\r\n        pageField: state.CommonPageFieldReducer.pageField,\r\n        ItemsList: state.ProductionReIssueReducer.WorkOrderList,\r\n        makeProductionReIssue: state.ProductionReIssueReducer.makeProductionReIssue\r\n    }));\r\n    //****************************************************************** */\r\n    useEffect(() => {\r\n        const page_Id = pageId.PRODUCTION_REISSUE\r\n        dispatch(goButtonForMaterialIssue_Master_ActionSuccess([]))\r\n        dispatch(commonPageFieldSuccess(null));\r\n        dispatch(commonPageField(page_Id))\r\n    }, []);\r\n    //****************************************************************** */\r\n\r\n    const location = { ...history.location }\r\n    const hasShowloction = location.hasOwnProperty(mode.editValue)\r\n    const hasShowModal = props.hasOwnProperty(mode.editValue)\r\n\r\n    const values = { ...state.values }\r\n    const { isError } = state;\r\n    const { fieldLabel } = state;\r\n    //****************************************************************** */\r\n\r\n    // userAccess useEffect\r\n    useEffect(() => {\r\n        let userAcc = null;\r\n        let locationPath = location.pathname;\r\n\r\n        if (hasShowModal) {\r\n            locationPath = props.masterPath;\r\n        };\r\n\r\n        userAcc = userAccess.find((inx) => {\r\n            return (`/${inx.ActualPagePath}` === locationPath)\r\n        })\r\n\r\n        if (userAcc) {\r\n            setUserAccState(userAcc)\r\n            breadcrumbReturnFunc({ dispatch, userAcc });\r\n\r\n        };\r\n    }, [userAccess]);\r\n    //****************************************************************** */\r\n\r\n    useEffect(() => {\r\n\r\n        if ((makeProductionReIssue.Status === true) && (makeProductionReIssue.StatusCode === 200)) {\r\n\r\n            const arr = makeProductionReIssue.Data.map((index) => ({\r\n                value: index.Item,\r\n                label: index.ItemName,\r\n                data: index,\r\n                productionId: makeProductionReIssue.productionId\r\n            }))\r\n\r\n            setItemOption(arr)\r\n            setPageMode(makeProductionReIssue.pageMode)\r\n            setGoButtonList(makeProductionReIssue.Data)\r\n            dispatch(makeBtnProduction_ReIssue_STP_actionSuccess({ Status: false }))\r\n            const { Items } = makeProductionReIssue\r\n            setState((i) => {\r\n                i.values.ItemName = { value: Items.value, label: Items.label };\r\n                return i\r\n            })\r\n        }\r\n\r\n    }, [makeProductionReIssue])\r\n    //****************************************************************** */\r\n\r\n    // useEffect(() => {\r\n    //     \r\n    //     if ((hasShowloction || hasShowModal)) {\r\n\r\n    //         let hasEditVal = null\r\n    //         let insidePageMode = null\r\n    //         if (hasShowloction) {\r\n    //             insidePageMode = location.pageMode;\r\n    //             setPageMode(location.pageMode)\r\n    //             hasEditVal = location[mode.editValue]\r\n    //         }\r\n    //         else if (hasShowModal) {\r\n    //             hasEditVal = props[mode.editValue]\r\n    //             insidePageMode = props.pageMode;\r\n    //             setPageMode(props.pageMode)\r\n    //             setModalCss(true)\r\n    //         }\r\n\r\n    //         if (hasEditVal) {\r\n    //             \r\n    //             // setItemselect(hasEditVal)\r\n    //             const { id, Item, ItemName, WorkDate, EstimatedOutputQty, NumberOfLot, MaterialIssueItems = [] } = hasEditVal\r\n    //             // const { BatchesData = [] } = MaterialIssueItems\r\n    //             setState((i) => {\r\n    //                 i.values.MaterialIssueDate = currentDate_ymd\r\n    //                 i.values.ItemName = { value: Item, label: ItemName, Item: Item, NoLot: NumberOfLot, lotQty: EstimatedOutputQty };\r\n    //                 i.values.NumberOfLot = NumberOfLot;\r\n    //                 i.values.LotQuantity = EstimatedOutputQty;\r\n    //                 i.hasValid.ItemName.valid = true;\r\n    //                 i.hasValid.MaterialIssueDate.valid = true;\r\n    //                 i.hasValid.NumberOfLot.valid = true;\r\n    //                 i.hasValid.LotQuantity.valid = true;\r\n    //                 return i\r\n    //             })\r\n    //             // ++++++++++++++++++++++++++**Dynamic go Button API Call method+++++++++++++++++\r\n\r\n    //             if (insidePageMode === mode.modeSTPsave) {\r\n    //                 const jsonBody = JSON.stringify({\r\n    //                     WorkOrder: id,\r\n    //                     Item: Item,\r\n    //                     Company: loginCompanyID(),\r\n    //                     Party: loginPartyID(),\r\n    //                     Quantity: parseInt(EstimatedOutputQty)\r\n    //                 });\r\n    //                 dispatch(goButtonForMaterialIssue_Master_Action(jsonBody));\r\n    //             } else if (insidePageMode === mode.view) {\r\n    //                 dispatch(goButtonForMaterialIssue_Master_ActionSuccess(MaterialIssueItems))\r\n    //                 dispatch(editMaterialIssueIdSuccess({ Status: false }))\r\n    //             }\r\n\r\n    //         }\r\n    //     }\r\n    // }, [])\r\n    //****************************************************************** */\r\n\r\n    useEffect(async () => {\r\n\r\n        if ((postMsg.Status === true) && (postMsg.StatusCode === 200)) {\r\n            dispatch(Save_Production_ReIssueSuccess({ Status: false }))\r\n            setGoButtonList([])\r\n            if (pageMode === mode.dropdownAdd) {\r\n                customAlert({\r\n                    Type: 1,\r\n                    Message: postMsg.Message,\r\n                })\r\n            }\r\n            else {\r\n                let isPermission = await customAlert({\r\n                    Type: 1,\r\n                    Status: true,\r\n                    Message: postMsg.Message,\r\n                })\r\n                if (isPermission) {\r\n                    history.push({ pathname: url.PRODUCTION_REISSUE_LIST })\r\n                }\r\n            }\r\n        }\r\n        else if (postMsg.Status === true) {\r\n\r\n            dispatch(SaveMaterialIssueSuccess({ Status: false }))\r\n            dispatch(saveBOMMasterSuccess({ Status: false }))\r\n            customAlert({\r\n                Type: 4,\r\n                 Message: JSON.stringify(postMsg.Message),\r\n            })\r\n        }\r\n    }, [postMsg])\r\n    //****************************************************************** */\r\n\r\n    useEffect(() => {\r\n\r\n        if ((updateMsg.Status === true) && (updateMsg.StatusCode === 200) && !(modalCss)) {\r\n            history.push({\r\n                pathname: url.MATERIAL_ISSUE_LIST,\r\n            })\r\n        } else if (updateMsg.Status === true && !modalCss) {\r\n            dispatch(updateBOMListSuccess({ Status: false }));\r\n             customAlert({\r\n                Type: 3,\r\n                Message: JSON.stringify(updateMsg.Message),\r\n            })\r\n        }\r\n    }, [updateMsg, modalCss]);\r\n    //****************************************************************** */\r\n\r\n    useEffect(() => {\r\n        if (pageField) {\r\n            const fieldArr = pageField.PageFieldMaster\r\n            comAddPageFieldFunc({ state, setState, fieldArr })\r\n        }\r\n    }, [pageField]);\r\n\r\n\r\n    useEffect(() => _cfunc.tableInputArrowUpDounFunc(\"#table_Arrow\"), [goButtonList]);\r\n\r\n    //****************************************************************** */\r\n    const pagesListColumns = [\r\n        {\r\n            text: \"Item Name\",\r\n            dataField: \"ItemName\",\r\n            formatter: (cellContent, index) => {\r\n                return (\r\n                    <>\r\n                        <div><samp id={`ItemName${index.id}`}>{cellContent}</samp></div>\r\n                        <div><samp id={`ItemNameMsg${index.id}`} style={{ color: \"red\" }}></samp></div>\r\n                    </>\r\n                )\r\n            },\r\n            style: (cellContent, user,) => {\r\n\r\n                let Stock = user.BatchesData.map((index) => {\r\n                    return index.BaseUnitQuantity\r\n                })\r\n                var TotalStock = 0;\r\n                Stock.forEach(x => {\r\n                    TotalStock += parseFloat(x);\r\n                });\r\n                var OrderQty = parseFloat(user.Quantity)\r\n                if (OrderQty > TotalStock) {\r\n                    return {\r\n                        color: \"red\",\r\n                    };\r\n                }\r\n            },\r\n        },\r\n\r\n        {\r\n            text: \"Work Order Qty\",\r\n            // dataField: \"Quantity\",\r\n            formatter: (cellContent, index, k) => {\r\n\r\n                return (<div>\r\n                    <Input id={`OrderQty${index.id}`}\r\n                        onChange={(e) => {\r\n                            index.Quantity = Number(e.target.value)\r\n                            stockDistributeFunc(index)\r\n                        }}> </Input>\r\n                </div>)\r\n            },\r\n        },\r\n        {\r\n            text: \"Unit\",\r\n            dataField: \"UnitName\",\r\n        },\r\n        {\r\n            text: \"Batch Code\",\r\n            dataField: \"BatchesData\",\r\n\r\n            formatter: (cellContent, user) => (\r\n                <>\r\n                    <Table className=\"table table-bordered table-responsive mb-1\">\r\n                        <Thead>\r\n                            <tr>\r\n                                <th>Batch Code </th>\r\n                                <th>Supplier BatchCode</th>\r\n                                <th>Batch Date</th>\r\n                                <th>Stock Quantity</th>\r\n                                <th>Quantity</th>\r\n                            </tr>\r\n                        </Thead>\r\n                        <Tbody>\r\n                            {cellContent.map((index) => {\r\n\r\n                                return (\r\n                                    < tr >\r\n                                        <td>\r\n                                            <div style={{ width: \"150px\" }}>\r\n                                                <Label>\r\n                                                    {index.SystemBatchCode}\r\n                                                </Label>\r\n                                            </div>\r\n                                        </td>\r\n                                        <td>\r\n                                            <div style={{ width: \"150px\" }}>\r\n                                                <Label>\r\n                                                    {index.BatchCode}\r\n                                                </Label>\r\n                                            </div>\r\n                                        </td>\r\n                                        <td>\r\n                                            <div style={{ width: \"100px\" }}>\r\n                                                <Label>\r\n                                                    {date_dmy_func(index.BatchDate)}\r\n                                                </Label>\r\n                                            </div>\r\n                                        </td>\r\n                                        <td>\r\n                                            <div style={{ width: \"120px\", textAlign: \"right\" }}>\r\n                                                <Label\r\n                                                // onKeyDown={(e) => handleKeyDown(e, goButtonList)}\r\n                                                >\r\n                                                    {index.BaseUnitQuantity}\r\n                                                </Label>\r\n                                            </div>\r\n                                        </td>\r\n                                        <td>\r\n                                            <div style={{ width: \"150px\" }}>\r\n                                                <Input\r\n                                                    type=\"text\"\r\n                                                    key={`stock${user.id}-${index.id}`}\r\n                                                    disabled={pageMode === mode.view ? true : false}\r\n                                                    id={`stock${user.id}-${index.id}`}\r\n                                                    style={{ textAlign: \"right\" }}\r\n                                                    defaultValue={index.Qty}\r\n                                                    autoComplete='off'\r\n                                                    onChange={(event) => handleChange(event, user, index)}\r\n                                                ></Input>\r\n                                            </div>\r\n                                        </td>\r\n                                    </tr>\r\n                                )\r\n                            })}\r\n                        </Tbody>\r\n                    </Table>\r\n                </>\r\n            ),\r\n        },\r\n\r\n    ]\r\n    //****************************************************************** */\r\n    const pageOptions = {\r\n        sizePerPage: 10,\r\n        totalSize: goButtonList.length,\r\n        custom: true,\r\n    };\r\n    //****************************************************************** */\r\n\r\n    function goButtonHandler(e) {\r\n        // event.preventDefault();\r\n        if (state.values.LotQuantity === \"0\") {\r\n            alert(\"Quantity Can Not be 0\")\r\n        } else\r\n            if (formValid(state, setState)) {\r\n\r\n                const jsonBody = JSON.stringify({\r\n                    WorkOrder: values.ItemName.value,\r\n                    Item: values.ItemName.Item,\r\n                    Company: loginCompanyID(),\r\n                    Party: loginPartyID(),\r\n                    Quantity: parseInt(values.LotQuantity)\r\n                });\r\n\r\n                dispatch(goButtonForMaterialIssue_Master_Action(jsonBody));\r\n            }\r\n    }\r\n    //****************************************************************** */\r\n    function stockDistributeFunc(index) {\r\n\r\n        const v1 = index.Quantity;\r\n        let orderqty = Number(v1);\r\n\r\n        index.BatchesData = index.BatchesData.map(i2 => {\r\n\r\n            let stockqty = Number(i2.BaseUnitQuantity);\r\n\r\n            if ((orderqty > stockqty) && !(orderqty === 0)) {\r\n                orderqty = orderqty - stockqty\r\n                i2.Qty = stockqty.toFixed(3)\r\n            } else if ((orderqty <= stockqty) && (orderqty > 0)) {\r\n                i2.Qty = orderqty.toFixed(3)\r\n                orderqty = 0\r\n            }\r\n            else {\r\n                i2.Qty = 0;\r\n            }\r\n            try {\r\n                document.getElementById(`stock${index.id}-${i2.id}`).value = i2.Qty\r\n            } catch (e) { }\r\n            return i2\r\n        });\r\n\r\n        const t1 = (v1 * index.ConversionUnit);\r\n        const t2 = index.StockUnit;\r\n        const t3 = index.StockTotal;\r\n\r\n        if (t1 > t3) {\r\n            try {\r\n                document.getElementById(`OrderQty${index.id}`).value = t3.toFixed(3)\r\n            } catch (e) { }\r\n        };\r\n        try {\r\n            index.StockInValid = false\r\n            index.StockInvalidMsg = null\r\n            document.getElementById(`ItemNameMsg${index.id}`).style.display = \"none\";\r\n        } catch (e) { };\r\n        // try {\r\n        //     document.getElementById(`stocktotal${index.id}`).innerText = `Total:${t1} ${t2}`\r\n        // } catch (e) { };\r\n\r\n    };\r\n    //****************************************************************** */\r\n\r\n    function ItemOnchange(event) {\r\n        dispatch(Breadcrumb_inputName(event.label))\r\n        setState((i) => {\r\n            i.values.ItemName = event\r\n            i.hasValid.ItemName.valid = true;\r\n            i.hasValid.ProductionReIssueDate.valid = true;\r\n            return i\r\n        })\r\n        setGoButtonList([{ ...event.data, ...{ productionId: event.productionId } }])\r\n    }\r\n    //****************************************************************** */\r\n\r\n    const handleChange = (event, index1, index2) => {\r\n\r\n        let input = event.target.value\r\n\r\n        let result = /^\\d*(\\.\\d{0,3})?$/.test(input);\r\n        let val1 = 0;\r\n        if (result) {\r\n            let v1 = Number(index2.BaseUnitQuantity);\r\n            let v2 = Number(input)\r\n            if (v1 >= v2) { val1 = input }\r\n            else { val1 = v1 };\r\n\r\n        } else if (((index2.Qty >= 0) && (!(input === '')))) {\r\n            val1 = index2.Qty\r\n        } else {\r\n            val1 = 0\r\n        }\r\n\r\n        event.target.value = val1;\r\n\r\n        let Qtysum = 0\r\n        index1.BatchesData.forEach((i) => {\r\n            if (!(i.id === index2.id)) {\r\n                Qtysum = Number(Qtysum) + Number(i.Qty)\r\n            }\r\n        });\r\n\r\n        Qtysum = Number(Qtysum) + Number(val1);\r\n        index2.Qty = val1;\r\n        let diffrence = Math.abs(index1.Quantity - Qtysum);\r\n\r\n        if ((Qtysum === index1.Quantity)) {\r\n            try {\r\n                document.getElementById(`ItemName${index1.id}`).style.color = \"\"\r\n                document.getElementById(`ItemNameMsg${index1.id}`).innerText = ''\r\n                index1[\"invalid\"] = false\r\n                index1[\"invalidMsg\"] = ''\r\n\r\n            } catch (e) { }\r\n        } else {\r\n            try {\r\n                const msg = (Qtysum > index1.Quantity) ? (`Excess Quantity ${diffrence} ${index1.UnitName}`)\r\n                    : (`Short Quantity ${diffrence} ${index1.UnitName}`)\r\n                index1[\"invalid\"] = true;\r\n                index1[\"invalidMsg\"] = msg;\r\n\r\n                document.getElementById(`ItemNameMsg${index1.id}`).innerText = msg;\r\n            } catch (e) { }\r\n        }\r\n    };\r\n    //****************************************************************** */\r\n\r\n    const SaveHandler = async (event) => {\r\n        event.preventDefault();\r\n        const validMsg = []\r\n        let production_Id = ''\r\n        const productionReIssue_Item = []\r\n        // goButtonList map function start +++++++++++++++++++++++++++++++++++++\r\n        await goButtonList.map((index) => {\r\n\r\n            var TotalStock = 0;\r\n            index.BatchesData.map(i => {\r\n                TotalStock += Number(i.BaseUnitQuantity);\r\n            });\r\n\r\n            var OrderQty = Number(index.Quantity)\r\n            if (OrderQty > TotalStock) {\r\n                {\r\n                    validMsg.push(`${index.ItemName}:Item is Out Of Stock`);\r\n                };\r\n            }\r\n            let a = index[\"invalid\"]\r\n            if (a) {\r\n                validMsg.push(`${index.ItemName}:${index[\"invalidMsg\"]}`);\r\n            };\r\n\r\n            function batch(ele) {  // batch wise calcution start++++++++++++++++++++++++++\r\n                productionReIssue_Item.push({\r\n                    Item: index.Item,\r\n                    Unit: index.Unit,\r\n                    IssueQuantity: index.Quantity,\r\n                    BatchCode: ele.BatchCode,\r\n                    BatchDate: ele.BatchDate,\r\n                    SystemBatchDate: ele.SystemBatchDate,\r\n                    SystemBatchCode: ele.SystemBatchCode,\r\n                    ProductionReIssue: parseInt(ele.Qty),\r\n                    BatchID: ele.id,\r\n                    LiveBatchID: ele.LiveBatchID\r\n                })\r\n            }                      // batch wise calcution end++++++++++++++++++++++++++++\r\n\r\n            index.BatchesData.map((ele) => {\r\n                if (Number(ele.Qty) > 0) {\r\n                    batch(ele)\r\n                }\r\n            })\r\n\r\n            production_Id = index.productionId;\r\n        })\r\n        // goButtonList map function end++++++++++++++++++++++++++++\r\n\r\n        if (formValid(state, setState)) { // formValid  ++++++++++++++++++++++++++++\r\n            if (validMsg.length > 0) {\r\n                dispatch(customAlert({\r\n                    Type: 4,\r\n                    Status: true,\r\n                    Message: JSON.stringify(validMsg),\r\n                    RedirectPath: false,\r\n                    AfterResponseAction: false\r\n                }));\r\n                return\r\n            }\r\n\r\n            const jsonBody = JSON.stringify({\r\n                Date: values.ProductionReIssueDate,\r\n                ProductionID: production_Id,\r\n                ProductionItem: values.ItemName.value,\r\n                ProductionReIssueItems: productionReIssue_Item,\r\n                CreatedBy: loginUserID(),\r\n                UpdatedBy: loginUserID(),\r\n                Company: loginCompanyID(),\r\n                Party: loginPartyID(),\r\n            }\r\n            );\r\n\r\n            if (pageMode === mode.edit) {\r\n            }\r\n            else {\r\n                dispatch(Save_Production_ReIssue(jsonBody));\r\n            }\r\n\r\n        };\r\n    }\r\n    //****************************************************************** */\r\n\r\n    if (!(userPageAccessState === '')) {\r\n        return (\r\n            <React.Fragment>\r\n                <MetaTags>{metaTagLabel(userPageAccessState)}</MetaTags>\r\n                <div className=\"page-content\" >\r\n\r\n                    <form onSubmit={SaveHandler} noValidate>\r\n                        <Col className=\"px-2 mb-1 c_card_filter header text-black\" sm={12}>\r\n                            <Row>\r\n                                <Col className=\" mt-1 row\" sm={11} >\r\n                                    <Col sm=\"6\">\r\n                                        <FormGroup className=\"row mt-2  \">\r\n                                            <Label className=\"mt-1\" style={{ width: \"150px\" }}>{fieldLabel.ProductionReIssueDate} </Label>\r\n                                            <Col sm=\"7\">\r\n                                                <C_DatePicker\r\n                                                    name=\"ProductionReIssueDate\"\r\n                                                    value={values.ProductionReIssueDate}\r\n                                                    onChange={(y, v, e) => { onChangeDate({ e, v, state, setState }) }}\r\n                                                />\r\n                                                {isError.ProductionReIssueDate.length > 0 && (\r\n                                                    <span className=\"invalid-feedback\">{isError.ProductionReIssueDate}</span>\r\n                                                )}\r\n                                            </Col>\r\n                                        </FormGroup>\r\n                                    </Col>\r\n\r\n                                    <Col sm=\"6\">\r\n                                        <FormGroup className=\"row mt-2 \">\r\n                                            <Label className=\"mt-2\" style={{ width: \"100px\" }}> {fieldLabel.ItemName} </Label>\r\n                                            <Col sm={7}>\r\n                                                <Select\r\n                                                    name=\"ItemName\"\r\n                                                    value={values.ItemName}\r\n                                                    isDisabled={goButtonList.length > 0 ? true : false}\r\n                                                    isSearchable={true}\r\n                                                    className=\"react-dropdown\"\r\n                                                    classNamePrefix=\"dropdown\"\r\n                                                    options={itemOption}\r\n                                                    onChange={ItemOnchange}\r\n                                                />\r\n                                                {isError.ItemName.length > 0 && (\r\n                                                    <span className=\"text-danger f-8\"><small>{isError.ItemName}</small></span>\r\n                                                )}\r\n                                            </Col>\r\n                                        </FormGroup>\r\n                                    </Col >\r\n\r\n\r\n                                </Col>\r\n                                <Col sm={1} className=\"mt-2 mb-2\">\r\n                                    {(pageMode === mode.modeSTPsave) ?\r\n                                        (goButtonList.length === 0) ?\r\n                                            < Go_Button onClick={(e) => goButtonHandler()} />\r\n                                            :\r\n                                            <Change_Button onClick={(e) => setGoButtonList([])} />\r\n                                        : null\r\n                                    }\r\n                                </Col>\r\n                                <Col>\r\n                                </Col>\r\n                            </Row>\r\n                        </Col>\r\n\r\n                        <PaginationProvider pagination={paginationFactory(pageOptions)}>\r\n                            {({ paginationProps, paginationTableProps }) => (\r\n                                <ToolkitProvider\r\n                                    keyField={\"id\"}\r\n                                    data={goButtonList}\r\n                                    columns={pagesListColumns}\r\n                                    search\r\n                                >\r\n                                    {(toolkitProps) => (\r\n                                        <React.Fragment>\r\n                                            <Row>\r\n                                                <Col xl=\"12\">\r\n                                                    <div className=\"table-responsive\">\r\n                                                        <BootstrapTable\r\n                                                            keyField={\"id\"}\r\n                                                            id=\"table_Arrow\"\r\n                                                            responsive\r\n                                                            bordered={false}\r\n                                                            striped={false}\r\n                                                            classes={\"table  table-bordered\"}\r\n                                                            {...toolkitProps.baseProps}\r\n                                                            {...paginationTableProps}\r\n                                                        />\r\n                                                        {countlabelFunc(toolkitProps, paginationProps, dispatch, \"Material Issue\")}\r\n                                                        {/* {mySearchProps(toolkitProps.searchProps, pageField.id)} */}\r\n                                                    </div>\r\n                                                </Col>\r\n                                            </Row>\r\n                                            <Row className=\"align-items-md-center mt-30\">\r\n                                                <Col className=\"pagination pagination-rounded justify-content-end mb-2\">\r\n                                                    <PaginationListStandalone {...paginationProps} />\r\n                                                </Col>\r\n                                            </Row>\r\n                                        </React.Fragment>\r\n                                    )}\r\n                                </ToolkitProvider>\r\n                            )}\r\n\r\n                        </PaginationProvider>\r\n\r\n                        {goButtonList.length > 0 ? <FormGroup>\r\n                            <Col sm={2} style={{ marginLeft: \"-40px\" }} className={\"row save1\"}>\r\n                                <SaveButton pageMode={pageMode}\r\n                                    //   onClick={onsave}\r\n                                    userAcc={userPageAccessState}\r\n                                    module={\"Material Issue\"}\r\n                                />\r\n                            </Col>\r\n                        </FormGroup > : null}\r\n                    </form>\r\n                </div>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n    else {\r\n        return (\r\n            <React.Fragment></React.Fragment>\r\n        )\r\n    }\r\n};\r\n\r\nexport default ProductionReIssueAdd\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Production\\Material_Issue\\Material_IssueMaster.js",["3484","3485","3486","3487","3488","3489","3490","3491","3492","3493","3494","3495","3496","3497","3498","3499","3500"],"import React, { useEffect, useState, } from \"react\";\r\nimport {\r\n    Col,\r\n    FormGroup,\r\n    Input,\r\n    Label,\r\n    Row,\r\n    Table\r\n} from \"reactstrap\";\r\nimport { MetaTags } from \"react-meta-tags\";\r\nimport { Breadcrumb_inputName, commonPageFieldSuccess } from \"../../../store/actions\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { commonPageField } from \"../../../store/actions\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {\r\n    comAddPageFieldFunc,\r\n    formValid,\r\n    initialFiledFunc,\r\n    onChangeDate,\r\n    onChangeSelect,\r\n} from \"../../../components/Common/validationFunction\";\r\nimport Select from \"react-select\";\r\nimport { Change_Button, Go_Button, SaveButton } from \"../../../components/Common/CommonButton\";\r\nimport {\r\n    saveBOMMasterSuccess,\r\n    updateBOMListSuccess\r\n} from \"../../../store/Production/BOMRedux/action\";\r\nimport {\r\n    editMaterialIssueIdSuccess,\r\n    goButtonForMaterialIssue_Master_Action,\r\n    goButtonForMaterialIssue_Master_ActionSuccess,\r\n    saveMaterialIssue, SaveMaterialIssueSuccess\r\n} from \"../../../store/Production/Matrial_Issue/action\";\r\nimport paginationFactory, { PaginationListStandalone, PaginationProvider } from \"react-bootstrap-table2-paginator\";\r\nimport ToolkitProvider from \"react-bootstrap-table2-toolkit\";\r\nimport BootstrapTable from \"react-bootstrap-table-next\";\r\nimport { Tbody, Thead } from \"react-super-responsive-table\";\r\nimport { mode, pageId, url } from \"../../../routes/index\";\r\nimport { countlabelFunc } from \"../../../components/Common/CommonPurchaseList\";\r\nimport * as _cfunc from \"../../../components/Common/CommonFunction\";\r\nimport { C_DatePicker } from \"../../../CustomValidateForm\";\r\nimport { customAlert } from \"../../../CustomAlert/ConfirmDialog\";\r\n\r\nconst MaterialIssueMaster = (props) => {\r\n\r\n    const dispatch = useDispatch();\r\n    const history = useHistory()\r\n    const currentDate_ymd = _cfunc.date_ymd_func();\r\n\r\n    const fileds = {\r\n        MaterialIssueDate: currentDate_ymd,\r\n        ItemName: \"\",\r\n        NumberOfLot: \"\",\r\n        LotQuantity: \"\",\r\n    }\r\n\r\n    const [state, setState] = useState(() => initialFiledFunc(fileds))\r\n\r\n    const [modalCss, setModalCss] = useState(false);\r\n    const [pageMode, setPageMode] = useState(mode.defaultsave);\r\n    const [userPageAccessState, setUserAccState] = useState('');\r\n    const [Itemselect, setItemselect] = useState([])\r\n    const [Itemselectonchange, setItemselectonchange] = useState(\"\");\r\n    const [goButtonList, setGoButtonList] = useState([]);\r\n\r\n    const {\r\n        postMsg,\r\n        updateMsg,\r\n        pageField,\r\n        userAccess,\r\n        Items,\r\n        GoButton = []\r\n    } = useSelector((state) => ({\r\n        postMsg: state.MaterialIssueReducer.postMsg,\r\n        updateMsg: state.BOMReducer.updateMsg,\r\n        userAccess: state.Login.RoleAccessUpdateData,\r\n        pageField: state.CommonPageFieldReducer.pageField,\r\n        Items: state.WorkOrderReducer.WorkOrderList,\r\n        GoButton: state.MaterialIssueReducer.GoButton\r\n    }));\r\n\r\n    const { Data = [] } = GoButton\r\n    useEffect(() => {\r\n        const page_Id = pageId.MATERIAL_ISSUE\r\n        dispatch(goButtonForMaterialIssue_Master_ActionSuccess([]))\r\n        dispatch(commonPageFieldSuccess(null));\r\n        dispatch(commonPageField(page_Id))\r\n    }, []);\r\n\r\n    const location = { ...history.location }\r\n\r\n    const hasShowloction = location.hasOwnProperty(mode.editValue)\r\n    const hasShowModal = props.hasOwnProperty(mode.editValue)\r\n\r\n    const values = { ...state.values }\r\n    const { isError } = state;\r\n    const { fieldLabel } = state;\r\n\r\n    useEffect(() => {\r\n        let userAcc = null;\r\n        let locationPath = location.pathname;\r\n\r\n        if (hasShowModal) {\r\n            locationPath = props.masterPath;\r\n        };\r\n\r\n        userAcc = userAccess.find((inx) => {\r\n            return (`/${inx.ActualPagePath}` === locationPath)\r\n        })\r\n\r\n        if (userAcc) {\r\n            setUserAccState(userAcc)\r\n            _cfunc.breadcrumbReturnFunc({ dispatch, userAcc });\r\n\r\n        };\r\n    }, [userAccess])\r\n\r\n    useEffect(() => {\r\n\r\n        if ((GoButton.Status === true) && (GoButton.StatusCode === 200)) {\r\n\r\n            const { ListData, Data } = GoButton\r\n            const { id, Item, ItemName, Unit, Quantity, NumberOfLot, Bom, } = ListData\r\n            setState((i) => {\r\n                i.values.MaterialIssueDate = currentDate_ymd\r\n                i.values.ItemName = { value: id, label: ItemName, Item: Item, NoLot: NumberOfLot, lotQty: Quantity };\r\n                i.values.NumberOfLot = NumberOfLot;\r\n                i.values.LotQuantity = Quantity;\r\n                i.hasValid.ItemName.valid = true;\r\n                i.hasValid.MaterialIssueDate.valid = true;\r\n                i.hasValid.NumberOfLot.valid = true;\r\n                i.hasValid.LotQuantity.valid = true;\r\n                return i\r\n            })\r\n            setItemselect({ Item: Item, Unit: Unit, id: id, Bom: Bom })\r\n            setGoButtonList(Data)\r\n        }\r\n    }, [GoButton])\r\n\r\n    useEffect(() => {\r\n\r\n        if ((hasShowloction || hasShowModal)) {\r\n\r\n            let hasEditVal = null\r\n            let insidePageMode = null\r\n            if (hasShowloction) {\r\n                insidePageMode = location.pageMode;\r\n                setPageMode(location.pageMode)\r\n                hasEditVal = location[mode.editValue]\r\n            }\r\n            else if (hasShowModal) {\r\n                hasEditVal = props[mode.editValue]\r\n                insidePageMode = props.pageMode;\r\n                setPageMode(props.pageMode)\r\n                setModalCss(true)\r\n            }\r\n\r\n            if (hasEditVal) {\r\n\r\n                setItemselect(hasEditVal)\r\n                const { id, Item, ItemName, LotQuantity, NumberOfLot, MaterialIssueItems = [] } = hasEditVal\r\n                setState((i) => {\r\n                    i.values.MaterialIssueDate = currentDate_ymd\r\n                    i.values.ItemName = { value: id, label: ItemName, Item: Item, NoLot: NumberOfLot, lotQty: LotQuantity };\r\n                    i.values.NumberOfLot = NumberOfLot;\r\n                    i.values.LotQuantity = LotQuantity;\r\n                    i.hasValid.ItemName.valid = true;\r\n                    i.hasValid.MaterialIssueDate.valid = true;\r\n                    i.hasValid.NumberOfLot.valid = true;\r\n                    i.hasValid.LotQuantity.valid = true;\r\n                    return i\r\n                })\r\n                // ++++++++++++++++++++++++++**Dynamic go Button API Call method+++++++++++++++++\r\n\r\n\r\n                if (insidePageMode === mode.view) {\r\n                    dispatch(goButtonForMaterialIssue_Master_ActionSuccess(MaterialIssueItems))\r\n                    setGoButtonList(MaterialIssueItems)\r\n                }\r\n                dispatch(editMaterialIssueIdSuccess({ Status: false }))\r\n            }\r\n        }\r\n    }, [])\r\n\r\n    useEffect(async () => {\r\n        if ((postMsg.Status === true) && (postMsg.StatusCode === 200)) {\r\n            dispatch(SaveMaterialIssueSuccess({ Status: false }))\r\n            dispatch(goButtonForMaterialIssue_Master_ActionSuccess([]))\r\n            dispatch(saveBOMMasterSuccess({ Status: false }))\r\n            if (pageMode === mode.dropdownAdd) {\r\n                customAlert({\r\n                    Type: 1,\r\n                    Message: postMsg.Message,\r\n                })\r\n            }\r\n            else {\r\n                let isPermission = await customAlert({\r\n                    Type: 1,\r\n                    Status: true,\r\n                    Message: postMsg.Message,\r\n                })\r\n                if (isPermission) {\r\n                    history.push({ pathname: url.MATERIAL_ISSUE_LIST })\r\n                }\r\n            }\r\n        }\r\n        else if (postMsg.Status === true) {\r\n\r\n            dispatch(SaveMaterialIssueSuccess({ Status: false }))\r\n            dispatch(saveBOMMasterSuccess({ Status: false }))\r\n            customAlert({\r\n                Type: 4,\r\n                Message: JSON.stringify(postMsg.Message),\r\n            })\r\n        }\r\n    }, [postMsg])\r\n\r\n    useEffect(() => {\r\n\r\n        if ((updateMsg.Status === true) && (updateMsg.StatusCode === 200) && !(modalCss)) {\r\n            // setState(() => resetFunction(fileds, state))// Clear form values \r\n            history.push({\r\n                pathname: url.MATERIAL_ISSUE_LIST,\r\n            })\r\n        } else if (updateMsg.Status === true && !modalCss) {\r\n            dispatch(updateBOMListSuccess({ Status: false }));\r\n            customAlert({\r\n                Type: 3,\r\n                Message: JSON.stringify(updateMsg.Message),\r\n            })\r\n\r\n        }\r\n    }, [updateMsg, modalCss]);\r\n\r\n    useEffect(() => {\r\n        if (pageField) {\r\n            const fieldArr = pageField.PageFieldMaster\r\n            comAddPageFieldFunc({ state, setState, fieldArr })\r\n        }\r\n    }, [pageField]);\r\n\r\n    useEffect(() => _cfunc.tableInputArrowUpDounFunc(\"#table_Arrow\"), [goButtonList]);\r\n\r\n    const ItemDropdown_Options = Items.map((index) => ({\r\n        value: index.id,\r\n        label: index.ItemName,\r\n        Quantity: index.Quantity,\r\n        Item: index.Item,\r\n        BomID: index.Bom,\r\n        Unit: index.Unit,\r\n        NumberOfLot: index.NumberOfLot\r\n    }));\r\n\r\n    const pagesListColumns = [\r\n        {\r\n            text: \"Item Name\",\r\n            dataField: \"ItemName\",\r\n            formatter: (cellContent, user) => {\r\n                return (\r\n                    <>\r\n                        <div><samp id={`ItemName${user.id}`}>{cellContent}</samp></div>\r\n                        <div><samp id={`ItemNameMsg${user.id}`} style={{ color: \"red\" }}></samp></div>\r\n                    </>\r\n\r\n                )\r\n            },\r\n            style: (cellContent, user,) => {\r\n\r\n                let Stock = user.BatchesData.map((index) => {\r\n                    return index.BaseUnitQuantity\r\n                })\r\n                var TotalStock = 0;\r\n                Stock.forEach(x => {\r\n                    TotalStock += parseFloat(x);\r\n                });\r\n                var OrderQty = parseFloat(user.Quantity)\r\n                if (OrderQty > TotalStock) {\r\n                    return {\r\n                        color: \"red\",\r\n\r\n                    };\r\n                }\r\n            },\r\n        },\r\n\r\n        {\r\n            text: \"Work Order Qty\",\r\n            dataField: \"Quantity\",\r\n        },\r\n        {\r\n            text: \"Unit\",\r\n            dataField: \"UnitName\",\r\n        },\r\n        {\r\n            text: \"Batch Code\",\r\n            dataField: \"BatchesData\",\r\n\r\n            formatter: (cellContent, user) => (\r\n                <>\r\n                    <Table className=\"table table-bordered table-responsive mb-1\">\r\n                        <Thead>\r\n                            <tr>\r\n                                <th>Batch Code </th>\r\n                                <th>Supplier BatchCode</th>\r\n                                <th>Batch Date</th>\r\n                                <th>Stock Quantity</th>\r\n                                <th>Quantity</th>\r\n                            </tr>\r\n                        </Thead>\r\n                        <Tbody>\r\n                            {cellContent.map((index) => {\r\n\r\n                                return (\r\n                                    < tr >\r\n                                        <td>\r\n                                            <div style={{ width: \"150px\" }}>\r\n                                                <Label>\r\n                                                    {index.SystemBatchCode}\r\n                                                </Label>\r\n                                            </div>\r\n                                        </td>\r\n                                        <td>\r\n                                            <div style={{ width: \"150px\" }}>\r\n                                                <Label>\r\n                                                    {index.BatchCode}\r\n                                                </Label>\r\n                                            </div>\r\n                                        </td>\r\n                                        <td>\r\n                                            <div style={{ width: \"100px\" }}>\r\n                                                <Label>\r\n                                                    {_cfunc.date_dmy_func(index.BatchDate)}\r\n                                                </Label>\r\n                                            </div>\r\n                                        </td>\r\n                                        <td>\r\n                                            <div style={{ width: \"120px\", textAlign: \"right\" }}>\r\n                                                <Label\r\n                                                >\r\n                                                    {index.BaseUnitQuantity}\r\n                                                </Label>\r\n                                            </div>\r\n                                        </td>\r\n                                        <td>\r\n                                            <div style={{ width: \"150px\" }}>\r\n                                                <Input\r\n                                                    type=\"text\"\r\n                                                    key={`stock${user.id}-${index.id}`}\r\n                                                    disabled={pageMode === mode.view ? true : false}\r\n                                                    id={`stock${user.id}-${index.id}`}\r\n                                                    style={{ textAlign: \"right\" }}\r\n                                                    defaultValue={index.Qty}\r\n                                                    autoComplete='off'\r\n                                                    onChange={(event) => handleChange(event, user, index)}\r\n                                                ></Input>\r\n                                            </div>\r\n                                        </td>\r\n                                    </tr>\r\n                                )\r\n                            })}\r\n                        </Tbody>\r\n                    </Table>\r\n                </>\r\n            ),\r\n        },\r\n\r\n    ]\r\n\r\n    const pageOptions = {\r\n        sizePerPage: 10,\r\n        totalSize: Data.length,\r\n        custom: true,\r\n    };\r\n\r\n    function ItemOnchange(hasSelect, evn) {\r\n        onChangeSelect({ hasSelect, evn, state, setState });\r\n        dispatch(Breadcrumb_inputName(hasSelect.label))\r\n        dispatch(goButtonForMaterialIssue_Master_ActionSuccess([]))\r\n        setState((i) => {\r\n            i.values.ItemName = hasSelect\r\n            i.values.NumberOfLot = hasSelect.NumberOfLot;\r\n            i.values.LotQuantity = hasSelect.Quantity;\r\n            i.hasValid.NumberOfLot.valid = true;\r\n            i.hasValid.LotQuantity.valid = true;\r\n            i.hasValid.MaterialIssueDate.valid = true;\r\n            return i\r\n        })\r\n    }\r\n\r\n    function goButtonHandler(event) {\r\n        event.preventDefault();\r\n        if (state.values.LotQuantity === \"0\") {\r\n            alert(\"Quantity Can Not be 0\")\r\n        } else\r\n            if (formValid(state, setState)) {\r\n                const jsonBody = JSON.stringify({\r\n                    WorkOrder: values.ItemName.value,\r\n                    Item: values.ItemName.Item,\r\n                    Company: _cfunc.loginCompanyID(),\r\n                    Party: _cfunc.loginPartyID(),\r\n                    Quantity: parseInt(values.LotQuantity)\r\n                });\r\n                const body = { jsonBody, pageMode }\r\n                dispatch(goButtonForMaterialIssue_Master_Action(body));\r\n            }\r\n    }\r\n\r\n    function ItemOnchange(e) {\r\n        dispatch(goButtonForMaterialIssue_Master_ActionSuccess([]))\r\n        setItemselectonchange(e)\r\n        setState((i) => {\r\n            i.values.ItemName = {\r\n                value: e.value,\r\n                label: e.label,\r\n                Item: e.Item,\r\n                NoLot: e.NumberOfLot,\r\n                lotQty: e.Quantity\r\n            };\r\n            i.values.NumberOfLot = e.NumberOfLot;\r\n            i.values.LotQuantity = e.Quantity;\r\n            i.hasValid.NumberOfLot.valid = true;\r\n            i.hasValid.LotQuantity.valid = true;\r\n            i.hasValid.ItemName.valid = true;\r\n            return i\r\n        })\r\n    }\r\n\r\n    function Quantitychange(event) {\r\n\r\n        dispatch(goButtonForMaterialIssue_Master_ActionSuccess([]))\r\n        let value1 = Math.max('', Math.min(Itemselectonchange.value > 0 ?\r\n            Itemselectonchange.Quantity :\r\n            Itemselect.Quantity, Number(event.target.value)));\r\n        event.target.value = value1\r\n        if (event.target.value === \"NaN\") {\r\n            value1 = 0\r\n        }\r\n        // onChangeText({ event, state, setState });\r\n        setState((i) => {\r\n            i.values.LotQuantity = value1\r\n            // i.hasValid.NumberOfLot.valid = true;\r\n            i.hasValid.LotQuantity.valid = true;\r\n            return i\r\n        })\r\n    }\r\n\r\n    function NumberOfLotchange(event) {\r\n        dispatch(goButtonForMaterialIssue_Master_ActionSuccess([]))\r\n        let value1 = Math.max('', Math.min(Itemselect.NumberOfLot, Number(event.target.value)));\r\n        event.target.value = value1\r\n        if ((event.target.value === \"NaN\")) {\r\n            value1 = 0\r\n        }\r\n        // onChangeText({ event, state, setState });\r\n        setState((i) => {\r\n            i.values.NumberOfLot = value1\r\n            i.hasValid.NumberOfLot.valid = true;\r\n            // i.hasValid.LotQuantity.valid = true;\r\n            return i\r\n        })\r\n    }\r\n\r\n    const handleChange = (event, index1, index2) => {\r\n\r\n        let input = event.target.value\r\n        let result = /^\\d*(\\.\\d{0,3})?$/.test(input);\r\n        let val1 = 0;\r\n        if (result) {\r\n            let v1 = Number(index2.BaseUnitQuantity);\r\n            let v2 = Number(input)\r\n            if (v1 >= v2) { val1 = input }\r\n            else { val1 = v1 };\r\n\r\n        } else if (((index2.Qty >= 0) && (!(input === '')))) {\r\n            val1 = index2.Qty\r\n        } else {\r\n            val1 = 0\r\n        }\r\n\r\n        event.target.value = val1;\r\n\r\n        let Qtysum = 0\r\n        index1.BatchesData.forEach((i) => {\r\n            if (!(i.id === index2.id)) {\r\n                Qtysum = Number(Qtysum) + Number(i.Qty)\r\n            }\r\n        });\r\n\r\n        Qtysum = Number(Qtysum) + Number(val1);\r\n        index2.Qty = val1;\r\n        let diffrence = Math.abs(index1.Quantity - Qtysum);\r\n\r\n        if ((Qtysum === index1.Quantity)) {\r\n            try {\r\n                document.getElementById(`ItemName${index1.id}`).style.color = \"\"\r\n                document.getElementById(`ItemNameMsg${index1.id}`).innerText = ''\r\n                index1[\"invalid\"] = false\r\n                index1[\"invalidMsg\"] = ''\r\n\r\n            } catch (e) { }\r\n        } else {\r\n            try {\r\n                const msg = (Qtysum > index1.Quantity) ? (`Excess Quantity ${diffrence} ${index1.UnitName}`)\r\n                    : (`Short Quantity ${diffrence} ${index1.UnitName}`)\r\n                index1[\"invalid\"] = true;\r\n                index1[\"invalidMsg\"] = msg;\r\n\r\n                document.getElementById(`ItemNameMsg${index1.id}`).innerText = msg;\r\n            } catch (e) { }\r\n        }\r\n    };\r\n\r\n    const SaveHandler = async (event) => {\r\n        event.preventDefault();\r\n        const btnId = event.target.id\r\n        const validMsg = []\r\n        const materialIssueItems = []\r\n        let ox = await goButtonList.map((index) => {\r\n            var TotalStock = 0;\r\n            index.BatchesData.map(i => {\r\n                TotalStock += Number(i.BaseUnitQuantity);\r\n            });\r\n\r\n            var OrderQty = Number(index.Quantity)\r\n            if (OrderQty > TotalStock) {\r\n                {\r\n                    validMsg.push(`${index.ItemName}:Item is Out Of Stock`);\r\n                };\r\n            }\r\n            let a = index[\"invalid\"]\r\n            if (a) {\r\n                validMsg.push(`${index.ItemName}:${index[\"invalidMsg\"]}`);\r\n            };\r\n\r\n            function batch(ele) {\r\n                materialIssueItems.push({\r\n                    Item: index.Item,\r\n                    Unit: index.Unit,\r\n                    WorkOrderQuantity: index.Quantity,\r\n                    BatchCode: ele.BatchCode,\r\n                    BatchDate: ele.BatchDate,\r\n                    SystemBatchDate: ele.SystemBatchDate,\r\n                    SystemBatchCode: ele.SystemBatchCode,\r\n                    IssueQuantity: parseInt(ele.Qty),\r\n                    BatchID: ele.id,\r\n                    LiveBatchID: ele.LiveBatchID\r\n                })\r\n            }\r\n            index.BatchesData.map((ele) => {\r\n                // \r\n                if (Number(ele.Qty) > 0) {\r\n                    batch(ele)\r\n                }\r\n            })\r\n        })\r\n        try {\r\n            if (formValid(state, setState)) {\r\n                if (validMsg.length > 0) {\r\n                    dispatch(customAlert({\r\n                        Type: 4,\r\n                        Status: true,\r\n                        Message: JSON.stringify(validMsg),\r\n                        RedirectPath: false,\r\n                        AfterResponseAction: false\r\n                    }));\r\n                    return\r\n                }\r\n                _cfunc.btnIsDissablefunc({ btnId, state: true })\r\n\r\n                const jsonBody = JSON.stringify({\r\n                    MaterialIssueDate: values.MaterialIssueDate,\r\n                    NumberOfLot: values.NumberOfLot,\r\n                    LotQuantity: values.LotQuantity,\r\n                    CreatedBy: _cfunc.loginUserID(),\r\n                    UpdatedBy: _cfunc.loginUserID(),\r\n                    Company: _cfunc.loginCompanyID(),\r\n                    Party: _cfunc.loginPartyID(),\r\n                    Item: Itemselect.Item,\r\n                    Unit: Itemselect.Unit,\r\n                    MaterialIssueItems: materialIssueItems,\r\n                    MaterialIssueWorkOrder: [\r\n                        {\r\n                            WorkOrder: Itemselect.id,\r\n                            Bom: Itemselect.Bom\r\n                        }\r\n                    ]\r\n                }\r\n                );\r\n                if (pageMode === mode.edit) {\r\n                }\r\n                else {\r\n                    dispatch(saveMaterialIssue(jsonBody));\r\n                }\r\n            }\r\n        } catch (e) { _cfunc.btnIsDissablefunc({ btnId, state: false }) }\r\n    };\r\n\r\n\r\n    if (!(userPageAccessState === '')) {\r\n        return (\r\n            <React.Fragment>\r\n                <MetaTags>{_cfunc.metaTagLabel(userPageAccessState)}</MetaTags>\r\n\r\n                <div className=\"page-content\" >\r\n                    <form >\r\n                        <Col className=\"px-2 mb-1 c_card_filter header text-black\" sm={12}>\r\n                            <Row>\r\n                                <Col className=\" mt-1 row\" sm={11} >\r\n                                    <Col sm=\"6\">\r\n                                        <FormGroup className=\"row mt-2  \">\r\n                                            <Label className=\"mt-1\" style={{ width: \"150px\" }}>{fieldLabel.MaterialIssueDate} </Label>\r\n                                            <Col sm=\"7\">\r\n                                                <C_DatePicker\r\n                                                    name=\"MaterialIssueDate\"\r\n                                                    value={values.MaterialIssueDate}\r\n                                                    onChange={(y, v, e) => { onChangeDate({ e, v, state, setState }) }}\r\n                                                />\r\n                                                {isError.MaterialIssueDate.length > 0 && (\r\n                                                    <span className=\"invalid-feedback\">{isError.MaterialIssueDate}</span>\r\n                                                )}\r\n                                            </Col>\r\n                                        </FormGroup>\r\n                                    </Col>\r\n\r\n                                    <Col sm=\"6\">\r\n                                        <FormGroup className=\"row mt-2 \">\r\n                                            <Label className=\"mt-2\" style={{ width: \"100px\" }}> {fieldLabel.ItemName} </Label>\r\n                                            <Col sm={7}>\r\n                                                <Select\r\n                                                    name=\"ItemName\"\r\n                                                    value={values.ItemName}\r\n                                                    isDisabled={Data.length > 0 ? true : false}\r\n                                                    isSearchable={true}\r\n                                                    className=\"react-dropdown\"\r\n                                                    classNamePrefix=\"dropdown\"\r\n                                                    options={ItemDropdown_Options}\r\n                                                    onChange={ItemOnchange}\r\n                                                />\r\n                                                {isError.ItemName.length > 0 && (\r\n                                                    <span className=\"text-danger f-8\"><small>{isError.ItemName}</small></span>\r\n                                                )}\r\n                                            </Col>\r\n                                        </FormGroup>\r\n                                    </Col >\r\n                                    <Col sm=\"6\">\r\n                                        <FormGroup className=\"mb-2 mt-2 row  \" style={{ marginTop: \"\" }}>\r\n                                            <Label className=\"mt-1\" style={{ width: \"150px\" }}> {fieldLabel.NumberOfLot} </Label>\r\n                                            <Col sm={7}>\r\n                                                <Input\r\n                                                    style={{ textAlign: \"right\" }}\r\n                                                    name=\"NumberOfLot\"\r\n                                                    value={values.NumberOfLot}\r\n                                                    disabled={(Data.length > 0) ? true : false}\r\n                                                    type=\"text\"\r\n                                                    className={isError.NumberOfLot.length > 0 ? \"is-invalid form-control\" : \"form-control\"}\r\n                                                    placeholder=\"Please Enter Number Of Lots\"\r\n                                                    autoComplete='off'\r\n                                                    onChange={NumberOfLotchange}\r\n                                                />\r\n\r\n                                            </Col>\r\n                                        </FormGroup>\r\n                                    </Col>\r\n\r\n                                    <Col sm=\"6\">\r\n                                        <FormGroup className=\"mb-1 mt-2  row\" >\r\n                                            <Label className=\"mt-2\" style={{ width: \"100px\" }}> {fieldLabel.LotQuantity} </Label>\r\n                                            <Col sm={7}>\r\n                                                <Input\r\n                                                    style={{ textAlign: \"right\" }}\r\n                                                    name=\"LotQuantity\"\r\n                                                    value={values.LotQuantity}\r\n                                                    disabled={(Data.length > 0) ? true : false}\r\n                                                    type=\"text\"\r\n                                                    className={isError.LotQuantity.length > 0 ? \"is-invalid form-control\" : \"form-control\"}\r\n                                                    placeholder=\"Please Enter LotQuantity\"\r\n                                                    autoComplete='off'\r\n                                                    onChange={Quantitychange}\r\n\r\n                                                />\r\n                                            </Col>\r\n                                            <div className=\"col col-1\">\r\n                                                <Label style={{ marginTop: '7px', width: \"72px\", marginLeft: '-23px' }}>\r\n                                                    {Itemselect.UnitName}\r\n                                                </Label>\r\n                                            </div>\r\n                                        </FormGroup>\r\n                                    </Col>\r\n\r\n                                </Col>\r\n                                <Col sm={1} className=\"mt-2\">\r\n                                    {pageMode === mode.defaultsave ?\r\n                                        (Data.length === 0) ?\r\n                                            < Go_Button onClick={(e) => goButtonHandler()} />\r\n                                            :\r\n                                            <Change_Button onClick={(e) => dispatch(goButtonForMaterialIssue_Master_ActionSuccess([]))} />\r\n                                        : null\r\n                                    }\r\n                                </Col>\r\n\r\n                                <Col>\r\n                                </Col>\r\n                            </Row>\r\n                        </Col>\r\n\r\n                        <PaginationProvider pagination={paginationFactory(pageOptions)}>\r\n                            {({ paginationProps, paginationTableProps }) => (\r\n                                <ToolkitProvider\r\n                                    keyField={\"id\"}\r\n                                    data={goButtonList}\r\n                                    columns={pagesListColumns}\r\n                                    search\r\n                                >\r\n                                    {(toolkitProps) => (\r\n                                        <React.Fragment>\r\n                                            <Row>\r\n                                                <Col xl=\"12\">\r\n                                                    <div className=\"table-responsive\">\r\n                                                        <BootstrapTable\r\n                                                            keyField={\"id\"}\r\n                                                            id=\"table_Arrow\"\r\n                                                            responsive\r\n                                                            bordered={false}\r\n                                                            striped={false}\r\n                                                            classes={\"table  table-bordered\"}\r\n                                                            {...toolkitProps.baseProps}\r\n                                                            {...paginationTableProps}\r\n                                                        />\r\n                                                        {countlabelFunc(toolkitProps, paginationProps, dispatch, \"Material Issue\")}\r\n                                                    </div>\r\n                                                </Col>\r\n                                            </Row>\r\n                                            <Row className=\"align-items-md-center mt-30\">\r\n                                                <Col className=\"pagination pagination-rounded justify-content-end mb-2\">\r\n                                                    <PaginationListStandalone {...paginationProps} />\r\n                                                </Col>\r\n                                            </Row>\r\n                                        </React.Fragment>\r\n                                    )}\r\n                                </ToolkitProvider>\r\n                            )}\r\n\r\n                        </PaginationProvider>\r\n                        {goButtonList.length > 0 ? <FormGroup>\r\n                            <Col sm={2} style={{ marginLeft: \"-40px\" }} className={\"row save1\"}>\r\n                                <SaveButton pageMode={pageMode}\r\n                                    onClick={SaveHandler}\r\n                                    userAcc={userPageAccessState}\r\n                                    module={\"Material Issue\"}\r\n                                />\r\n                            </Col>\r\n                        </FormGroup > : null}\r\n\r\n                    </form>\r\n                </div>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n    else {\r\n        return (\r\n            <React.Fragment></React.Fragment>\r\n        )\r\n    }\r\n};\r\n\r\nexport default MaterialIssueMaster\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Production\\WorkOrder\\WorkOrderList.js",["3501","3502","3503","3504","3505"],"import React, { useEffect, useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { BreadcrumbShowCountlabel, commonPageFieldList, commonPageFieldListSuccess, } from \"../../../store/actions\";\r\nimport CommonPurchaseList from \"../../../components/Common/CommonPurchaseList\"\r\nimport { Button, Col, FormGroup, Label } from \"reactstrap\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { date_ymd_func,  loginCompanyID, loginPartyID } from \"../../../components/Common/CommonFunction\";\r\nimport {\r\n    deleteWorkOrderId,\r\n    deleteWorkOrderIdSuccess,\r\n    editWorkOrderList,\r\n    getWorkOrderListPage,\r\n    updateWorkOrderListSuccess,\r\n} from \"../../../store/Production/WorkOrder/action\";\r\nimport WorkOrder from \"./WorkOrder\";\r\nimport { mode, url, pageId } from \"../../../routes/index\"\r\nimport { goButtonForMaterialIssue_Master_Action } from \"../../../store/Production/Matrial_Issue/action\";\r\nimport { C_DatePicker } from \"../../../CustomValidateForm\";\r\n\r\nconst WorkOrderList = () => {\r\n\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n    const currentDate_ymd = date_ymd_func();\r\n\r\n    const hasPagePath = history.location.pathname\r\n\r\n    const [pageMode, setpageMode] = useState(mode.defaultList)\r\n    const [hederFilters, setHederFilters] = useState({ fromdate: currentDate_ymd, todate: currentDate_ymd, })\r\n    const reducers = useSelector(\r\n        (state) => ({\r\n            tableList: state.WorkOrderReducer.WorkOrderList,\r\n            deleteMsg: state.WorkOrderReducer.deleteMsg,\r\n            updateMsg: state.WorkOrderReducer.updateMsg,\r\n            postMsg: state.OrderReducer.postMsg,\r\n            editData: state.WorkOrderReducer.editData,\r\n            userAccess: state.Login.RoleAccessUpdateData,\r\n            pageField: state.CommonPageFieldReducer.pageFieldList,\r\n            makeProductionReIssue: state.MaterialIssueReducer.GoButton\r\n        })\r\n    );\r\n\r\n    const { pageField, makeProductionReIssue } = reducers;\r\n    const { fromdate, todate } = hederFilters\r\n    const page_Id = (hasPagePath === url.MATERIAL_ISSUE_STP) ? pageId.MATERIAL_ISSUE_STP : pageId.WORK_ORDER_LIST;\r\n    const page_mode = (hasPagePath === url.MATERIAL_ISSUE_STP) ? mode.modeSTPsave : mode.defaultList;\r\n\r\n    const action = {\r\n        getList: getWorkOrderListPage,\r\n        editId: editWorkOrderList,\r\n        deleteId: deleteWorkOrderId,\r\n        postSucc: postMessage,\r\n        updateSucc: updateWorkOrderListSuccess,\r\n        deleteSucc: deleteWorkOrderIdSuccess\r\n    }\r\n\r\n    useEffect(() => {\r\n        setpageMode(page_mode)\r\n        // dispatch(BreadcrumbShowCountlabel(`${\"Work Order Count\"} :0`))\r\n        dispatch(commonPageFieldListSuccess(null))\r\n        dispatch(commonPageFieldList(page_Id))\r\n        goButtonHandler(true)\r\n\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n\r\n        if (makeProductionReIssue.Status === true && makeProductionReIssue.StatusCode === 200) {\r\n            history.push({\r\n                pathname: makeProductionReIssue.path,\r\n                page_Mode: makeProductionReIssue.pageMode,\r\n            })\r\n        }\r\n    }, [makeProductionReIssue])\r\n\r\n    const goButtonHandler = () => {\r\n        const jsonBody = JSON.stringify({\r\n            FromDate: fromdate,\r\n            ToDate: todate,\r\n        });\r\n        dispatch(getWorkOrderListPage(jsonBody));\r\n    }\r\n\r\n    function fromdateOnchange(e, date) {\r\n        let newObj = { ...hederFilters }\r\n        newObj.fromdate = date\r\n        setHederFilters(newObj)\r\n    }\r\n\r\n    function todateOnchange(e, date) {\r\n        let newObj = { ...hederFilters }\r\n        newObj.todate = date\r\n        setHederFilters(newObj)\r\n    }\r\n\r\n\r\n    const makeBtnFunc = (list = []) => {\r\n\r\n        var jsonData = list[0]\r\n        try {\r\n            const jsonBody = JSON.stringify({\r\n                WorkOrder: jsonData.id,\r\n                Item: jsonData.Item,\r\n                Company: loginCompanyID(),\r\n                Party: loginPartyID(),\r\n                Quantity: parseInt(jsonData.Quantity)\r\n            })\r\n            const body = { jsonBody, pageMode, path: url.MATERIAL_ISSUE, ListData: list[0] }\r\n            dispatch(goButtonForMaterialIssue_Master_Action(body))\r\n\r\n        } catch (e) { }\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"page-content\">\r\n\r\n\r\n                <div className=\"px-2   c_card_header text-black\"  >\r\n                    <div className=\"row\" >\r\n                        <Col sm=\"5\" >\r\n                            <FormGroup className=\" row mt-3 \" >\r\n                                <Label className=\"col-sm-5 p-2\"\r\n                                    style={{ width: \"83px\" }}>From Date</Label>\r\n                                <Col sm=\"6\">\r\n                                    <C_DatePicker\r\n                                        name='fromdate'\r\n                                        value={fromdate}\r\n                                        onChange={fromdateOnchange}\r\n                                    />\r\n                                </Col>\r\n                            </FormGroup>\r\n                        </Col>\r\n                        <Col sm=\"5\">\r\n                            <FormGroup className=\" mb-1 row mt-3 \" >\r\n                                <Label className=\"col-sm-1 p-2\"\r\n                                    style={{ width: \"65px\", marginRight: \"0.4cm\" }}>To Date</Label>\r\n                                <Col sm=\"6 \">\r\n                                    <C_DatePicker\r\n                                        name=\"todate\"\r\n                                        value={todate}\r\n                                        onChange={todateOnchange}\r\n                                    />\r\n                                </Col>\r\n                            </FormGroup>\r\n                        </Col>\r\n\r\n                        <Col sm=\"1\" className=\"mx-4 \">\r\n                            <Button type=\"button\" color=\"btn btn-outline-success border-2 font-size-12 m-3  \"\r\n                                onClick={() => goButtonHandler()}\r\n                            >Go</Button>\r\n                        </Col>\r\n                    </div>\r\n                </div>\r\n                {\r\n                    (pageField) ?\r\n                        <CommonPurchaseList\r\n                            action={action}\r\n                            reducers={reducers}\r\n                            showBreadcrumb={false}\r\n                            MasterModal={WorkOrder}\r\n                            masterPath={url.WORK_ORDER}\r\n                            newBtnPath={url.WORK_ORDER}\r\n                            ButtonMsgLable={\"Work Order\"}\r\n                            deleteName={\"ItemName\"}\r\n                            pageMode={pageMode}\r\n                            goButnFunc={goButtonHandler}\r\n                            makeBtnFunc={makeBtnFunc}\r\n                            makeBtnShow={pageMode === mode.defaultList ? false : true}\r\n                            makeBtnName={\"Make Material Issue\"}\r\n                        />\r\n                        : null\r\n                }\r\n            </div>\r\n\r\n\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default WorkOrderList;","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Production\\WorkOrder\\WorkOrder.js",["3506","3507","3508","3509","3510","3511","3512","3513","3514","3515","3516","3517","3518","3519"],"import React, { useEffect, useState, } from \"react\";\r\nimport {\r\n    Col,\r\n    FormGroup,\r\n    Input,\r\n    Label,\r\n    Row\r\n} from \"reactstrap\";\r\nimport { MetaTags } from \"react-meta-tags\";\r\nimport { Breadcrumb_inputName, commonPageFieldSuccess } from \"../../../store/actions\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {  commonPageField } from \"../../../store/actions\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {\r\n    comAddPageFieldFunc,\r\n    initialFiledFunc,\r\n    onChangeDate,\r\n    onChangeSelect,\r\n    onChangeText,\r\n} from \"../../../components/Common/validationFunction\";\r\nimport Select from \"react-select\";\r\nimport { Change_Button, Go_Button, SaveButton } from \"../../../components/Common/CommonButton\";\r\nimport {\r\n    breadcrumbReturnFunc,\r\n    loginUserID,\r\n    currentDate_ymd,\r\n    loginCompanyID,\r\n    loginPartyID,\r\n    btnIsDissablefunc,\r\n    metaTagLabel\r\n} from \"../../../components/Common/CommonFunction\";\r\nimport {\r\n    editWorkOrderListSuccess,\r\n    getBOMList,\r\n    postGoButtonForWorkOrder_Master,\r\n    postGoButtonForWorkOrder_MasterSuccess,\r\n    SaveWorkOrderMaster,\r\n    SaveWorkOrderMasterSuccess,\r\n    updateWorkOrderList,\r\n} from \"../../../store/Production/WorkOrder/action\";\r\nimport paginationFactory, { PaginationListStandalone, PaginationProvider } from \"react-bootstrap-table2-paginator\";\r\nimport ToolkitProvider from \"react-bootstrap-table2-toolkit\";\r\nimport BootstrapTable from \"react-bootstrap-table-next\";\r\nimport * as pageId from \"../../../routes//allPageID\";\r\nimport * as url from \"../../../routes/route_url\";\r\nimport * as mode from \"../../../routes/PageMode\";\r\nimport { countlabelFunc } from \"../../../components/Common/CommonPurchaseList\";\r\nimport { mySearchProps } from \"../../../components/Common/SearchBox/MySearch\";\r\nimport * as _cfunc from \"../../../components/Common/CommonFunction\";\r\nimport { C_DatePicker } from \"../../../CustomValidateForm\";\r\nimport { customAlert } from \"../../../CustomAlert/ConfirmDialog\";\r\n\r\nconst goBtnID1 = \"workOrdergoBtnID1\"\r\nconst changeBtnID1 = \"workOrderchangeBtnID1\"\r\nconst saveBtnID1 = \"workOrdersaveBtnID1\"\r\nconst updateBtnID1 = \"workOrderupdateBtnID1\"\r\n\r\nconst WorkOrder = (props) => {\r\n\r\n    const dispatch = useDispatch();\r\n    const history = useHistory()\r\n\r\n    const [EditData, setEditData] = useState({});\r\n    const [modalCss, setModalCss] = useState(false);\r\n    const [pageMode, setPageMode] = useState(mode.defaultsave);\r\n    const [userPageAccessState, setUserAccState] = useState('');\r\n    const [itemselect, setItemselect] = useState(\"\")\r\n\r\n    const fileds = {\r\n        id: \"\",\r\n        WorkOrderDate: '',\r\n        ItemName: [],\r\n        NumberOfLot: \"\",\r\n        Quantity: \"\",\r\n        StockQuantity: \"0\",\r\n        EstimatedOutputQty: \"\"\r\n    }\r\n\r\n    const [state, setState] = useState(() => initialFiledFunc(fileds))\r\n\r\n    //Access redux store Data /  'save_ModuleSuccess' action data\r\n    const {\r\n        postMsg,\r\n        updateMsg,\r\n        pageField,\r\n        userAccess,\r\n        Items,\r\n        GoButton\r\n    } = useSelector((state) => ({\r\n        postMsg: state.WorkOrderReducer.postMsg,\r\n        updateMsg: state.WorkOrderReducer.updateMsg,\r\n        userAccess: state.Login.RoleAccessUpdateData,\r\n        pageField: state.CommonPageFieldReducer.pageField,\r\n        GetItemUnits: state.BOMReducer.GetItemUnits,\r\n        Items: state.WorkOrderReducer.BOMList,\r\n        GoButton: state.WorkOrderReducer.GoButton\r\n    }));\r\n\r\n    const { BOMItems = [], EstimatedOutputQty = '', id = '', Item = '', Unit = '' } = GoButton\r\n\r\n    const location = { ...history.location }\r\n    const hasShowloction = location.hasOwnProperty(mode.editValue)\r\n    const hasShowModal = props.hasOwnProperty(mode.editValue)\r\n\r\n    const values = { ...state.values }\r\n    const { isError } = state;\r\n    const { fieldLabel } = state;\r\n\r\n    useEffect(() => {\r\n        const page_Id = pageId.WORK_ORDER\r\n        dispatch(postGoButtonForWorkOrder_MasterSuccess([]))\r\n        dispatch(commonPageFieldSuccess(null));\r\n        dispatch(commonPageField(page_Id))\r\n\r\n    }, []);\r\n\r\n    // userAccess useEffect\r\n    useEffect(() => {\r\n        let userAcc = null;\r\n        let locationPath = location.pathname;\r\n\r\n        if (hasShowModal) {\r\n            locationPath = props.masterPath;\r\n        };\r\n\r\n        userAcc = userAccess.find((inx) => {\r\n            return (`/${inx.ActualPagePath}` === locationPath)\r\n        })\r\n\r\n        if (userAcc) {\r\n            setUserAccState(userAcc)\r\n            breadcrumbReturnFunc({ dispatch, userAcc });\r\n\r\n        };\r\n    }, [userAccess])\r\n\r\n    useEffect(() => {\r\n\r\n        if ((hasShowloction || hasShowModal)) {\r\n            let hasEditVal = null\r\n            if (hasShowloction) {\r\n                setPageMode(location.pageMode)\r\n                hasEditVal = location.editValue\r\n            }\r\n            else if (hasShowModal) {\r\n                hasEditVal = props.editValue\r\n                setPageMode(props.pageMode)\r\n                setModalCss(true)\r\n            }\r\n\r\n            if (hasEditVal) {\r\n                setEditData(hasEditVal);\r\n                const { id, WorkOrderDate, Item, ItemName, NumberOfLot, Stock\r\n                    , Quantity, EstimatedOutputQty, Bom, Party } = hasEditVal\r\n                const { values, fieldLabel, hasValid, required, isError } = { ...state }\r\n                hasValid.id.valid = true;\r\n                hasValid.WorkOrderDate.valid = true;\r\n                hasValid.EstimatedOutputQty.valid = true;\r\n                hasValid.Quantity.valid = true;\r\n                hasValid.NumberOfLot.valid = true;\r\n                hasValid.ItemName.valid = true;\r\n\r\n                values.id = id\r\n                values.WorkOrderDate = WorkOrderDate;\r\n                values.EstimatedOutputQty = EstimatedOutputQty;\r\n                values.Quantity = Quantity;\r\n                values.NumberOfLot = NumberOfLot;\r\n                values.StockQuantity = Stock;\r\n                values.ItemName = { label: ItemName, value: Item };\r\n\r\n                const jsonBody = JSON.stringify({\r\n                    Item: Item,\r\n                    Bom: Bom,\r\n                    Quantity: parseFloat(Quantity),\r\n                    Party: Party\r\n                });\r\n                dispatch(postGoButtonForWorkOrder_Master(jsonBody));\r\n\r\n                setState({ values, fieldLabel, hasValid, required, isError })\r\n                dispatch(editWorkOrderListSuccess({ Status: false }))\r\n                dispatch(Breadcrumb_inputName(hasEditVal.ItemName))\r\n            }\r\n        }\r\n    }, [])\r\n\r\n    useEffect(async () => {\r\n        if ((postMsg.Status === true) && (postMsg.StatusCode === 200)) {\r\n            dispatch(SaveWorkOrderMasterSuccess({ Status: false }))\r\n            if (pageMode === mode.dropdownAdd) {\r\n                customAlert({\r\n                    Type: 1,\r\n                    Message: postMsg.Message,\r\n                })\r\n            }\r\n            else {\r\n                let isPermission = await customAlert({\r\n                    Type: 1,\r\n                    Status: true,\r\n                    Message: postMsg.Message,\r\n                })\r\n                if (isPermission) {\r\n                    history.push({ pathname: url.WORK_ORDER_LIST })\r\n                }\r\n            }\r\n        }\r\n        else if (postMsg.Status === true) {\r\n            dispatch(SaveWorkOrderMasterSuccess({ Status: false }))\r\n            dispatch(customAlert({\r\n                Type: 4,\r\n                 Message: JSON.stringify(postMsg.Message),\r\n            })\r\n            )\r\n        }\r\n    }, [postMsg])\r\n\r\n    useEffect(() => _cfunc.tableInputArrowUpDounFunc(\"#table_Arrow\"), [BOMItems]);\r\n\r\n    useEffect(() => {\r\n\r\n        if ((updateMsg.Status === true) && (updateMsg.StatusCode === 200) && !(modalCss)) {\r\n            // setState(() => resetFunction(fileds, state))// Clear form values  \r\n            history.push({\r\n                pathname: url.WORK_ORDER_LIST,\r\n            })\r\n        } else if (updateMsg.Status === true && !modalCss) {\r\n             customAlert({\r\n                Type: 3,\r\n                Message: JSON.stringify(updateMsg.Message),\r\n            })\r\n        }\r\n    }, [updateMsg, modalCss]);\r\n\r\n    useEffect(() => {\r\n        if (pageField) {\r\n            const fieldArr = pageField.PageFieldMaster\r\n            comAddPageFieldFunc({ state, setState, fieldArr })\r\n        }\r\n    }, [pageField])\r\n\r\n    let filterItems = Items.filter((index) => {\r\n        return index.IsActive === true\r\n    })\r\n\r\n    useEffect(() => {\r\n        const jsonBody = JSON.stringify({\r\n            FromDate: \"2022-12-01\",\r\n            ToDate: currentDate_ymd,\r\n            Company: loginCompanyID(),\r\n            Party: loginPartyID()\r\n        });\r\n        dispatch(getBOMList(jsonBody));\r\n    }, [])\r\n\r\n    const ItemDropdown_Options = filterItems.map((index) => ({\r\n        value: index.id,\r\n        label: index.ItemName,\r\n        ItemID: index.Item,\r\n        Unit: index.Unit,\r\n        UnitName: index.UnitName,\r\n        EstimatedOutputQty: index.EstimatedOutputQty,\r\n        StockQty: index.StockQty\r\n    }));\r\n\r\n    const pagesListColumns = [\r\n        {\r\n            text: \"Item Name\",\r\n            dataField: \"ItemName\",\r\n        },\r\n        {\r\n            text: \"Stock Quantity\",\r\n            dataField: \"StockQuantity\",\r\n        },\r\n        {\r\n            text: \"BomQuantity\",\r\n            dataField: \"BomQuantity\",\r\n        },\r\n        {\r\n            text: \"Quantity\",\r\n            dataField: \"Quantity\",\r\n\r\n            formatter: (cellContent, user) => (\r\n                <>\r\n                    <div style={{ justifyContent: 'center' }} >\r\n                        <Col>\r\n                            <FormGroup className=\" col col-sm-4 \">\r\n                                <Input\r\n                                    id=\"\"\r\n                                    type=\"text\"\r\n                                    // disabled={true}\r\n                                    // defaultValue={cellContent.toPrecision(5)}\r\n                                    defaultValue={parseFloat(cellContent).toFixed(3)}\r\n                                    className=\"col col-sm text-center\"\r\n                                    onChange={(e) => QuantityHandler(e, user)}\r\n                                />\r\n                            </FormGroup>\r\n                        </Col>\r\n                    </div>\r\n\r\n                </>\r\n            ),\r\n        },\r\n        {\r\n            text: \"UnitName\",\r\n            dataField: \"UnitName\",\r\n\r\n        },\r\n    ];\r\n\r\n    const pageOptions = {\r\n        sizePerPage: 10,\r\n        totalSize: GoButton.length,\r\n        custom: true,\r\n    };\r\n\r\n    const QuantityHandler = (event, user) => {\r\n\r\n        // user[\"Quantity\"] = event.target.value\r\n        let val = event.target.value;\r\n        const result = /^-?([0-9]*\\.?[0-9]+|[0-9]+\\.?[0-9]*)$/.test(val);\r\n        if ((result) && (parseFloat(event.target.value).toFixed(3))) {\r\n            user.Quantity = event.target.value;\r\n        }\r\n        else if (val === \"\") {\r\n            user.Quantity = event.target.value;\r\n        }\r\n        else {\r\n            event.target.value = user.Quantity\r\n        }\r\n\r\n    }\r\n\r\n    function ItemOnchange(e) {\r\n        dispatch(postGoButtonForWorkOrder_MasterSuccess([]))\r\n        setItemselect(e)\r\n        setState((i) => {\r\n            i.values.NumberOfLot = \"1\";\r\n            i.values.Quantity = e.EstimatedOutputQty;\r\n            i.hasValid.NumberOfLot.valid = true;\r\n            i.hasValid.Quantity.valid = true;\r\n            return i\r\n        })\r\n    }\r\n\r\n    function NumberOfLotchange(e) {\r\n\r\n        dispatch(postGoButtonForWorkOrder_MasterSuccess([]))\r\n        let qty = ''\r\n        if (pageMode === mode.edit) {\r\n            qty = e * EditData.EstimatedOutputQty;\r\n        }\r\n        else {\r\n            qty = e * itemselect.EstimatedOutputQty\r\n        }\r\n        setState((i) => {\r\n            i.values.NumberOfLot = e;\r\n            i.values.Quantity = qty;\r\n            i.hasValid.NumberOfLot.valid = true;\r\n            i.hasValid.Quantity.valid = true;\r\n            return i\r\n        })\r\n    }\r\n\r\n    function Quantitychange(e) {\r\n        dispatch(postGoButtonForWorkOrder_MasterSuccess([]))\r\n        state.hasValid.Quantity.valid = true\r\n        let NumberLot = e / itemselect.EstimatedOutputQty\r\n        if (Number.isInteger(NumberLot)) {\r\n            setState((i) => {\r\n                i.values.NumberOfLot = NumberLot;\r\n                i.values.Quantity = e;\r\n                i.hasValid.NumberOfLot.valid = true;\r\n                i.hasValid.Quantity.valid = true;\r\n                return i\r\n            })\r\n        }\r\n        else {\r\n            setState((i) => {\r\n                i.values.NumberOfLot = \"1.000\";\r\n                i.values.Quantity = e;\r\n                i.hasValid.NumberOfLot.valid = true;\r\n                i.hasValid.Quantity.valid = true;\r\n                return i\r\n            })\r\n        }\r\n    }\r\n\r\n    const goButtonHandler = (event) => {\r\n\r\n        const jsonBody = JSON.stringify({\r\n            Item: (pageMode === mode.edit ? EditData.Item : values.ItemName.ItemID),\r\n            Bom: (pageMode === mode.edit ? EditData.Bom : values.ItemName.value),\r\n            Quantity: parseFloat(values.Quantity),\r\n            Party: loginPartyID()\r\n        });\r\n        dispatch(postGoButtonForWorkOrder_Master(jsonBody, goBtnID1));\r\n    }\r\n\r\n    const SaveHandler = async (event) => {\r\n        \r\n        event.preventDefault();\r\n        const btnId = event.target.id\r\n        try {\r\n             {\r\n                btnIsDissablefunc({ btnId, state: true })\r\n                const WorkOrderItems = BOMItems.map((index) => ({\r\n                    Item: index.Item,\r\n                    Unit: index.Unit,\r\n                    BomQuantity: index.BomQuantity,\r\n                    Quantity: index.Quantity,\r\n                }))\r\n                const jsonBody = JSON.stringify({\r\n                    WorkOrderDate: values.WorkOrderDate,\r\n                    Item: (pageMode === mode.edit ? Item : values.ItemName.ItemID),\r\n                    Bom: (pageMode === mode.edit ? id : values.ItemName.value),\r\n                    Unit: (pageMode === mode.edit ? Unit : values.ItemName.Unit),\r\n                    NumberOfLot: values.NumberOfLot,\r\n                    Quantity: parseFloat(values.Quantity).toFixed(3),\r\n                    Company: loginCompanyID(),\r\n                    Party: loginPartyID(),\r\n                    CreatedBy: loginUserID(),\r\n                    UpdatedBy: loginUserID(),\r\n                    WorkOrderItems: WorkOrderItems\r\n                });\r\n                if (pageMode === mode.edit) {\r\n                    dispatch(updateWorkOrderList({ jsonBody, updateId: values.id, btnId }));\r\n                }\r\n                else {\r\n                    \r\n                    dispatch(SaveWorkOrderMaster({ jsonBody, btnId }));\r\n                }\r\n            }\r\n        } catch (e) { btnIsDissablefunc({ btnId, state: false }) }\r\n    };\r\n\r\n    \r\n    if (!(userPageAccessState === '')) {\r\n        return (\r\n            <React.Fragment>\r\n                <MetaTags>{metaTagLabel(userPageAccessState)}</MetaTags>\r\n                <div className=\"page-content\" style={{ marginBottom: \"200px\" }}>\r\n                    <form  noValidate>\r\n                        <div className=\"px-2 mb-1 c_card_filter text-black\" >\r\n                            <Row>\r\n                                <Col sm={11}>\r\n                                    <div className=\"row\">\r\n                                        <div className=\"col col-6\">\r\n                                            <FormGroup className=\" row  mt-2\" >\r\n                                                <Label className=\"mt-1\"\r\n                                                    style={{ width: \"130px\" }}>{fieldLabel.WorkOrderDate}</Label>\r\n                                                <div className=\"col-6\">\r\n                                                    <C_DatePicker\r\n                                                        style={{ userselect: \"all\" }}\r\n                                                        name=\"WorkOrderDate\"\r\n                                                        value={values.WorkOrderDate}\r\n                                                        disabled={(BOMItems.length > 0) || (pageMode === mode.edit) ? true : false}\r\n                                                        onChange={(y, v, e) => { onChangeDate({ e, v, state, setState }) }}\r\n                                                        onReady={(y, v, e) => { onChangeDate({ e, v, state, setState }) }}\r\n                                                    />\r\n                                                    {isError.WorkOrderDate.length > 0 && (\r\n                                                        <span className=\"invalid-feedback\">{isError.WorkOrderDate}</span>\r\n                                                    )}\r\n                                                </div>\r\n                                            </FormGroup>\r\n                                        </div >\r\n                                        <div className=\"col col-6\" >\r\n                                            <FormGroup className=\" row  mt-2\" >\r\n                                                <Label className=\"mt-1\"\r\n                                                    style={{ width: \"150px\" }}>{fieldLabel.ItemName} </Label>\r\n                                                <div className=\"col col-6 sm-1\">\r\n                                                    <Select\r\n                                                        name=\"ItemName\"\r\n                                                        value={values.ItemName}\r\n                                                        isSearchable={true}\r\n                                                        isDisabled={(BOMItems.length > 0) ? true : false}\r\n                                                        className=\"react-dropdown\"\r\n                                                        classNamePrefix=\"dropdown\"\r\n                                                        options={ItemDropdown_Options}\r\n                                                        onChange={(hasSelect, evn) => {\r\n                                                            onChangeSelect({ hasSelect, evn, state, setState });\r\n                                                            ItemOnchange(hasSelect)\r\n                                                            dispatch(Breadcrumb_inputName(hasSelect.label))\r\n                                                        }\r\n                                                        }\r\n                                                    />\r\n                                                    {isError.ItemName.length > 0 && (\r\n                                                        <span className=\"text-danger f-8\"><small>{isError.ItemName}</small></span>\r\n                                                    )}\r\n                                                </div>\r\n                                            </FormGroup>\r\n                                        </div >\r\n                                    </div>\r\n\r\n                                    <div className=\"row\">\r\n                                        <div className=\"col col-6\">\r\n                                            <FormGroup className=\" row mt-1\" >\r\n                                                <Label className=\"mt-1\"\r\n                                                    style={{ width: \"130px\" }}>{fieldLabel.StockQuantity}\r\n                                                </Label>\r\n                                                <div className=\"col-6 \">\r\n                                                    <Input\r\n                                                        value={pageMode === mode.edit ?\r\n                                                            EditData.Stock : itemselect.StockQty\r\n                                                        }\r\n                                                        disabled={true}\r\n                                                        className=\"text-end\"\r\n                                                    // placeholder=\"Please Enter Stock Quantity\"\r\n                                                    />\r\n                                                </div>\r\n                                                <div className=\"col col-2\">\r\n                                                    <Label style={{ marginTop: '5px', width: \"72px\", marginLeft: '-15px' }}>\r\n                                                        {pageMode === mode.edit ? EditData.UnitName : itemselect.UnitName}</Label>\r\n                                                </div>\r\n                                            </FormGroup>\r\n                                        </div >\r\n\r\n                                        <div className=\"col col-6\" >\r\n                                            <FormGroup className=\" row mt-1\" >\r\n                                                <Label className=\"mt-1\"\r\n                                                    style={{ width: \"150px\" }}>\r\n                                                    {fieldLabel.EstimatedOutputQty}\r\n                                                </Label>\r\n                                                <div className=\"col-6\">\r\n                                                    <Input\r\n                                                        value={pageMode === mode.edit ?\r\n                                                            EditData.EstimatedOutputQty : itemselect.EstimatedOutputQty ?\r\n                                                                itemselect.EstimatedOutputQty : \"\"}\r\n                                                        disabled={true}\r\n                                                        className=\"text-end\"\r\n                                                        // placeholder=\"Please Enter Estimated Output Qty\"\r\n                                                        autoComplete='off'\r\n                                                    />\r\n                                                </div>\r\n                                                <div className=\"col col-1\">\r\n                                                    <Label style={{ marginTop: '7px', width: \"72px\", marginLeft: '-23px' }}>\r\n                                                        {pageMode === mode.edit ? EditData.UnitName : itemselect.UnitName}</Label>\r\n                                                </div>\r\n                                            </FormGroup>\r\n\r\n\r\n                                        </div >\r\n\r\n                                    </div>\r\n\r\n                                    <div className=\"row  \">\r\n                                        <div className=\"col col-6\">\r\n                                            <FormGroup className=\" row  mt-1 mb-2 \" >\r\n                                                <Label className=\"mt-1\"\r\n                                                    style={{ width: \"130px\" }}>{fieldLabel.NumberOfLot}</Label>\r\n                                                <div className=\"col col-6\">\r\n                                                    <Input\r\n                                                        name=\"NumberOfLot\"\r\n                                                        value={values.NumberOfLot}\r\n                                                        type=\"text\"\r\n                                                        disabled={(BOMItems.length > 0) ? true : false}\r\n                                                        className={isError.NumberOfLot.length > 0 ? \"is-invalid form-control text-end\" : \"form-control text-end\"}\r\n                                                        placeholder=\"Please Enter Number Of Lot\"\r\n                                                        autoComplete='off'\r\n                                                        onChange={(event) => {\r\n                                                            onChangeText({ event, state, setState })\r\n                                                            NumberOfLotchange(event.target.value)\r\n                                                        }}\r\n                                                    />\r\n                                                    {isError.NumberOfLot.length > 0 && (\r\n                                                        <span className=\"invalid-feedback\">{isError.NumberOfLot}</span>\r\n                                                    )}\r\n                                                </div>\r\n                                            </FormGroup>\r\n                                        </div >\r\n\r\n                                        <div className=\"col col-6\">\r\n                                            <FormGroup className=\" row mt-1 mb-2\" >\r\n                                                <Label className=\"mt-1\"\r\n                                                    style={{ width: \"150px\" }}>{fieldLabel.Quantity}</Label>\r\n                                                <div className=\"col col-6 \">\r\n                                                    <Input\r\n                                                        style={{ textAlign: \"right\" }}\r\n                                                        name=\"Quantity\"\r\n                                                        value={`${values.Quantity}`}\r\n                                                        disabled={(BOMItems.length > 0) ? true : false}\r\n                                                        type=\"text\"\r\n                                                        className={isError.Quantity.length > 0 ? \"is-invalid form-control text-end\" : \"form-control text-end\"}\r\n                                                        placeholder=\"Please Enter Quantity\"\r\n                                                        autoComplete='off'\r\n                                                        onChange={(event) => {\r\n                                                            onChangeText({ event, state, setState })\r\n                                                            Quantitychange(event.target.value)\r\n                                                        }}\r\n\r\n                                                    />\r\n                                                    {isError.Quantity.length > 0 && (\r\n                                                        <span className=\"invalid-feedback\">{isError.Quantity}</span>\r\n                                                    )}\r\n                                                </div>\r\n                                                <div className=\"col col-1\">\r\n                                                    <Label style={{ marginTop: '7px', width: \"72px\", marginLeft: '-23px' }}>\r\n                                                        {pageMode === mode.edit ? EditData.UnitName : itemselect.UnitName}</Label>\r\n                                                </div>\r\n                                                {/* <div className=\"col col-1\">\r\n                                            <Button\r\n                                                color=\"btn btn-outline-success border-2 font-size-12 \" style={{ marginTop: '3px' }}\r\n                                                onClick={(e) => goButtonHandler(e)}\r\n                                            >Go</Button>\r\n                                        </div> */}\r\n\r\n                                            </FormGroup>\r\n                                        </div >\r\n                                    </div>\r\n                                </Col>\r\n\r\n                                <Col sm={1}>\r\n                                    <div className=\"col col-1 mt-2\">\r\n                                        {pageMode === mode.defaultsave ?\r\n                                            (BOMItems.length === 0) ?\r\n                                                < Go_Button id={goBtnID1} onClick={(e) => goButtonHandler()} />\r\n                                                :\r\n                                                <Change_Button id={changeBtnID1}\r\n                                                    onClick={(e) => dispatch(postGoButtonForWorkOrder_MasterSuccess([]))} />\r\n                                            : null\r\n                                        }\r\n                                    </div>\r\n                                </Col>\r\n\r\n                            </Row>\r\n                        </div>\r\n\r\n                        {BOMItems.length > 0 ?\r\n                            <PaginationProvider pagination={paginationFactory(pageOptions)}>\r\n                                {({ paginationProps, paginationTableProps }) => (\r\n                                    <ToolkitProvider\r\n                                        keyField={\"id\"}\r\n                                        data={BOMItems}\r\n                                        columns={pagesListColumns}\r\n                                        search\r\n                                    >\r\n                                        {(toolkitProps) => (\r\n                                            <React.Fragment>\r\n                                                <Row>\r\n                                                    <Col xl=\"12\">\r\n                                                        <div className=\"table-responsive\">\r\n                                                            <BootstrapTable\r\n                                                                keyField={\"id\"}\r\n                                                                id=\"table_Arrow\"\r\n                                                                responsive\r\n                                                                bordered={false}\r\n                                                                striped={false}\r\n                                                                classes={\"table  table-bordered\"}\r\n                                                                {...toolkitProps.baseProps}\r\n                                                                {...paginationTableProps}\r\n                                                            />\r\n                                                            {countlabelFunc(toolkitProps, paginationProps, dispatch, \"WorkOrder\")}\r\n                                                            {mySearchProps(toolkitProps.searchProps, pageField.id)}\r\n                                                            <div>\r\n                                                                <label >EstimatedOutputQty :&nbsp;&nbsp;\r\n                                                                    <span style={{ color: \"#000000\" }}>\r\n                                                                        {`${EstimatedOutputQty} ${pageMode === mode.edit ? EditData.UnitName : itemselect.UnitName}`}\r\n                                                                    </span>\r\n                                                                </label>\r\n                                                            </div>\r\n                                                        </div>\r\n                                                    </Col>\r\n                                                </Row>\r\n                                                <Row className=\"align-items-md-center mt-30\">\r\n                                                    <Col className=\"pagination pagination-rounded justify-content-end mb-2\">\r\n                                                        <PaginationListStandalone {...paginationProps} />\r\n                                                    </Col>\r\n                                                </Row>\r\n                                            </React.Fragment>\r\n                                        )}\r\n                                    </ToolkitProvider>\r\n                                )}\r\n\r\n                            </PaginationProvider>\r\n                            : <></>}\r\n\r\n                        {BOMItems.length > 0 ? <FormGroup style={{ marginTop: \"-25px\" }}>\r\n                            <Row >\r\n                                <Col sm={2} className=\"mt-n4\">\r\n                                    <SaveButton pageMode={pageMode}\r\n                                        onClick={SaveHandler}\r\n                                        userAcc={userPageAccessState}\r\n                                        module={\"WorkOrder\"}\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n                        </FormGroup >\r\n                            : null\r\n                        }\r\n\r\n                    </form>\r\n                </div>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n    else {\r\n        return (\r\n            <React.Fragment></React.Fragment>\r\n        )\r\n    }\r\n};\r\n\r\nexport default WorkOrder","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Production\\Production\\ProductionList.js",["3520","3521","3522","3523","3524","3525"],"import React, { useEffect, useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { BreadcrumbShowCountlabel, commonPageFieldList, commonPageFieldListSuccess, } from \"../../../store/actions\";\r\nimport CommonPurchaseList from \"../../../components/Common/CommonPurchaseList\"\r\nimport { Button, Col, FormGroup, Label } from \"reactstrap\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { date_ymd_func, loginPartyID } from \"../../../components/Common/CommonFunction\";\r\nimport {\r\n    updateWorkOrderListSuccess\r\n} from \"../../../store/Production/WorkOrder/action\";\r\nimport {\r\n    delete_ProductionId,\r\n    delete_ProductionIdSuccess,\r\n    edit_ProductionId,\r\n    getProductionListPage,\r\n    Productionlistfilters\r\n} from \"../../../store/Production/ProductionRedux/actions\"\r\nimport * as report from '../../../Reports/ReportIndex'\r\nimport * as pageId from \"../../../routes/allPageID\"\r\nimport * as mode from \"../../../routes/PageMode\"\r\nimport * as url from \"../../../routes/route_url\"\r\nimport { getpdfReportdata } from \"../../../store/Utilites/PdfReport/actions\";\r\nimport { production_Edit_API } from \"../../../helpers/backend_helper\";\r\nimport ProductionMaster from \"./ProductionMaster\";\r\nimport { makeBtnProduction_ReIssue_STP_action } from \"../../../store/Production/ProductionReissueRedux/actions\";\r\nimport { C_DatePicker } from \"../../../CustomValidateForm\";\r\n\r\nconst ProductionList = () => {\r\n\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n    const currentDate_ymd = date_ymd_func();\r\n\r\n    const [subPageMode] = useState(history.location.pathname);\r\n    const [pageMode, setPageMode] = useState(mode.defaultList);\r\n    const [otherState, setOtherState] = useState({ masterPath: '', makeBtnShow: false, newBtnPath: '' });\r\n    const [hederFilters, setHederFilters] = useState({ fromdate: currentDate_ymd, todate: currentDate_ymd })\r\n    const reducers = useSelector(\r\n        (state) => ({\r\n            tableList: state.ProductionReducer.ProductionList,\r\n            deleteMsg: state.ProductionReducer.deleteMsg,\r\n            updateMsg: state.WorkOrderReducer.updateMsg,\r\n            postMsg: state.OrderReducer.postMsg,\r\n            editData: state.ProductionReducer.editData,\r\n            userAccess: state.Login.RoleAccessUpdateData,\r\n            pageField: state.CommonPageFieldReducer.pageFieldList,\r\n            makeProductionReIssue: state.ProductionReIssueReducer.makeProductionReIssue,\r\n        })\r\n    );\r\n\r\n    const action = {\r\n        editId: edit_ProductionId,\r\n        deleteId: delete_ProductionId,\r\n        postSucc: postMessage,\r\n        updateSucc: updateWorkOrderListSuccess,\r\n        deleteSucc: delete_ProductionIdSuccess\r\n    }\r\n\r\n    useEffect(() => {\r\n\r\n        let page_Id = '';\r\n        let page_Mode = mode.defaultList;\r\n        let masterPath = '';\r\n        let newBtnPath = '';\r\n        let makeBtnShow = false;\r\n\r\n        if (subPageMode === url.PRODUCTION_LIST) {\r\n            page_Id = pageId.PRODUCTION_LIST;\r\n            masterPath = url.PRODUCTION_MASTER;\r\n            newBtnPath = url.PRODUCTION_STP;\r\n        }\r\n\r\n        else if (subPageMode === url.PRODUCTION_REISSUE_STP) {\r\n            page_Id = pageId.PRODUCTION_REISSUE_STP\r\n            page_Mode = mode.modeSTPsave\r\n            makeBtnShow = true;\r\n        }\r\n\r\n        setOtherState({ masterPath, makeBtnShow, newBtnPath })\r\n        setPageMode(page_Mode)\r\n        dispatch(commonPageFieldListSuccess(null))\r\n        dispatch(commonPageFieldList(page_Id))\r\n        // dispatch(BreadcrumbShowCountlabel(`${\"Production Count\"} :0`))\r\n        goButtonHandler(true)\r\n    }, []);\r\n\r\n    const { pageField, makeProductionReIssue } = reducers;\r\n    const { fromdate, todate } = hederFilters\r\n\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        if (makeProductionReIssue.Status === true && makeProductionReIssue.StatusCode === 200) {\r\n            history.push({\r\n                pathname: makeProductionReIssue.path,\r\n                page_Mode: makeProductionReIssue.pageMode,\r\n            })\r\n        }\r\n    }, [makeProductionReIssue])\r\n\r\n    function downBtnFunc(row) {\r\n        var ReportType = report.Stock;   //Stock\r\n        dispatch(getpdfReportdata(production_Edit_API, ReportType, row.id))\r\n    }\r\n\r\n    const goButtonHandler = (onload = false) => {\r\n        let FromDate\r\n        let ToDate\r\n        if (onload) {\r\n            FromDate = currentDate_ymd;\r\n            ToDate = currentDate_ymd;\r\n        } else {\r\n            ToDate = todate;\r\n            FromDate = fromdate;\r\n        }\r\n        const jsonBody = JSON.stringify({\r\n            FromDate: FromDate,\r\n            ToDate: ToDate,\r\n        });\r\n\r\n        dispatch(getProductionListPage(jsonBody));\r\n    }\r\n\r\n    function fromdateOnchange(e, date) {\r\n        let newObj = { ...hederFilters }\r\n        newObj.fromdate = date;\r\n        setHederFilters(newObj);\r\n    }\r\n\r\n    function todateOnchange(e, date) {\r\n        let newObj = { ...hederFilters }\r\n        newObj.todate = date;\r\n        setHederFilters(newObj);\r\n    }\r\n\r\n    const makeBtnFunc = (list = []) => {\r\n\r\n        var Items = { value: list[0].Item, label: list[0].ItemName }\r\n        try {\r\n            const jsonBody = JSON.stringify({\r\n                ProductionID: list[0].id,\r\n                PartyID: loginPartyID()\r\n            })\r\n            const body = { jsonBody, pageMode, path: url.PRODUCTION_REISSUE, productionId: list[0].id, Items: Items }\r\n            dispatch(makeBtnProduction_ReIssue_STP_action(body))\r\n\r\n        } catch (e) { }\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"page-content\">\r\n\r\n                <div className=\"px-2  c_card_header\"  >\r\n                    <div className=\"row\" >\r\n                        <Col sm=\"5\" >\r\n                            <FormGroup className=\" row mt-3 \" >\r\n                                <Label className=\"col-sm-5 p-2\"\r\n                                    style={{ width: \"83px\" }}>From Date</Label>\r\n                                <Col sm=\"6\">\r\n                                    <C_DatePicker\r\n                                        name='fromdate'\r\n                                        onChange={fromdateOnchange}\r\n                                    />\r\n                                </Col>\r\n                            </FormGroup>\r\n                        </Col>\r\n                        <Col sm=\"5\">\r\n                            <FormGroup className=\" mb-1 row mt-3 \" >\r\n                                <Label className=\"col-sm-1 p-2\"\r\n                                    style={{ width: \"65px\", marginRight: \"0.4cm\" }}>To Date</Label>\r\n                                <Col sm=\"6 \">\r\n                                    <C_DatePicker\r\n                                        name=\"todate\"\r\n                                        onChange={todateOnchange}\r\n                                    />\r\n                                </Col>\r\n                            </FormGroup>\r\n                        </Col>\r\n                        <Col sm=\"1\" className=\"mx-4 \">\r\n                            <Button type=\"button\" color=\"btn btn-outline-success border-2 font-size-12 m-3  \"\r\n                                onClick={() => goButtonHandler()}\r\n                            >Go</Button>\r\n                        </Col>\r\n                    </div>\r\n                </div>\r\n                {\r\n                    (pageField) ?\r\n                        <CommonPurchaseList\r\n                            action={action}\r\n                            reducers={reducers}\r\n                            showBreadcrumb={false}\r\n                            masterPath={otherState.masterPath}\r\n                            newBtnPath={otherState.newBtnPath}\r\n                            makeBtnShow={otherState.makeBtnShow}\r\n                            pageMode={pageMode}\r\n                            goButnFunc={goButtonHandler}\r\n                            downBtnFunc={downBtnFunc}\r\n                            makeBtnFunc={makeBtnFunc}\r\n\r\n                            makeBtnName={\"make ReIssue\"}\r\n                            ButtonMsgLable={\"Production\"}\r\n                            deleteName={\"ItemName\"}\r\n                            MasterModal={ProductionMaster}\r\n\r\n                        />\r\n                        : null\r\n                }\r\n            </div>\r\n        </React.Fragment>\r\n    )\r\n}\r\nexport default ProductionList;","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Production\\BOM\\BOMList\\BOMList.js",["3526","3527","3528","3529","3530","3531","3532","3533","3534"],"import React, { useEffect, useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport {\r\n    BreadcrumbShowCountlabel,\r\n    commonPageFieldList,\r\n    commonPageFieldListSuccess\r\n} from \"../../../../store/actions\";\r\nimport CommonPurchaseList from \"../../../../components/Common/CommonPurchaseList\"\r\nimport {  BIllOf_MATERIALS_LIST } from \"../../../../routes/route_url\";\r\nimport { Button, Col, FormGroup, Label } from \"reactstrap\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useMemo } from \"react\";\r\nimport {\r\n    \r\n    deleteBOMId,\r\n    deleteBOMIdSuccess,\r\n    editBOMList,\r\n    getBOMListPage,\r\n    updateBOMListSuccess\r\n} from \"../../../../store/Production/BOMRedux/action\";\r\nimport BOMMaster from \"../BOMMaster/BOMIndex\";\r\nimport * as pageId from \"../../../../routes//allPageID\";\r\nimport * as url from \"../../../../routes/route_url\";\r\nimport { C_DatePicker } from \"../../../../CustomValidateForm\";\r\nimport * as _cfunc from \"../../../../components/Common/CommonFunction\";\r\n\r\n\r\nconst BOMList = () => {\r\n\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n    const currentDate_ymd = _cfunc.date_ymd_func();\r\n\r\n\r\n    const hasPagePath = history.location.pathname\r\n\r\n    const [pageMode, setpageMode] = useState(BIllOf_MATERIALS_LIST)\r\n    const [userAccState, setUserAccState] = useState('');\r\n    const [hederFilters, setHederFilters] = useState({ fromdate: currentDate_ymd, todate: currentDate_ymd, venderSelect: { value: '', label: \"All\" } })\r\n\r\n    const reducers = useSelector(\r\n        (state) => ({\r\n            tableList: state.BOMReducer.BOMList,\r\n            deleteMsg: state.BOMReducer.deleteMsg,\r\n            updateMsg: state.BOMReducer.updateMsg,\r\n            postMsg: state.OrderReducer.postMsg,\r\n            editData: state.BOMReducer.editData,\r\n            bomlistFilters: state.BOMReducer.bomlistFilters,\r\n            userAccess: state.Login.RoleAccessUpdateData,\r\n            pageField: state.CommonPageFieldReducer.pageFieldList\r\n        })\r\n    );\r\n\r\n    const { userAccess, pageField, tableList, bomlistFilters } = reducers;\r\n    // const { fromdate, todate } = bomlistFilters;\r\n    const { fromdate, todate, venderSelect } = hederFilters;\r\n\r\n\r\n    const action = {\r\n        getList: getBOMListPage,\r\n        editId: editBOMList,\r\n        deleteId: deleteBOMId,\r\n        postSucc: postMessage,\r\n        updateSucc: updateBOMListSuccess,\r\n        deleteSucc: deleteBOMIdSuccess\r\n    }\r\n\r\n    // Featch Modules List data  First Rendering\r\n    useEffect(() => {\r\n        const page_Id = pageId.BIllOf_MATERIALS_LIST\r\n        setpageMode(hasPagePath)\r\n        dispatch(commonPageFieldListSuccess(null))\r\n        dispatch(commonPageFieldList(page_Id))\r\n        // dispatch(BreadcrumbShowCountlabel(`${\"BOM Count\"} :0`))\r\n        goButtonHandler(true)\r\n\r\n    }, []);\r\n\r\n \r\n    useEffect(() => {\r\n        const pageId = 70\r\n        let userAcc = userAccess.find((inx) => {\r\n            return (inx.id === pageId)\r\n        })\r\n        if (!(userAcc === undefined)) {\r\n            setUserAccState(userAcc)\r\n        }\r\n    }, [userAccess])\r\n\r\n    const goButtonHandler = () => {\r\n        const jsonBody = JSON.stringify({\r\n            FromDate: fromdate,\r\n            ToDate: todate,\r\n            Company: _cfunc.loginCompanyID(),\r\n            Party:_cfunc.loginPartyID(),\r\n        });\r\n        dispatch(getBOMListPage(jsonBody));\r\n    }\r\n\r\n    function fromdateOnchange(e, date) {\r\n        let newObj = { ...hederFilters }\r\n        newObj.fromdate = date\r\n        setHederFilters(newObj)\r\n    }\r\n\r\n    function todateOnchange(e, date) {\r\n        let newObj = { ...hederFilters }\r\n        newObj.todate = date\r\n        setHederFilters(newObj)\r\n    }\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"page-content\">\r\n          \r\n                <div className=\"px-2   c_card_header text-black\" >\r\n                    <div className=\"row\">\r\n                        <Col sm=\"5\">\r\n                            <FormGroup className=\" row mt-3 \" >\r\n                                <Label className=\"col-sm-5 p-2\"\r\n                                    style={{ width: \"83px\" }}>From Date</Label>\r\n                                <Col sm=\"6\">\r\n                                    <C_DatePicker\r\n                                        name='fromdate'\r\n                                        value={fromdate}\r\n                                        onChange={fromdateOnchange}\r\n                                    />\r\n                                </Col>\r\n                            </FormGroup>\r\n                        </Col>\r\n\r\n                        <Col sm=\"5\" className=\"\">\r\n                            <FormGroup className=\"mb- row mt-3 \" >\r\n                                <Label className=\"col-sm-5 p-2\"\r\n                                    style={{ width: \"65px\", marginRight: \"0.4cm\" }}>To Date</Label>\r\n                                <Col sm=\"6 \">\r\n                                    <C_DatePicker\r\n                                        name=\"todate\"\r\n                                        value={todate}\r\n                                        onChange={todateOnchange}\r\n                                    />\r\n                                </Col>\r\n                            </FormGroup>\r\n                        </Col>\r\n\r\n                        <Col sm=\"1\" className=\"mx-4 \">\r\n                            <Button type=\"button\" color=\"btn btn-outline-success border-2 font-size-12 m-3  \"\r\n                                onClick={() => goButtonHandler()}\r\n                            >Go</Button>\r\n                        </Col>\r\n                    </div>\r\n                </div>\r\n                {\r\n                    (pageField) ?\r\n                        <CommonPurchaseList\r\n                            action={action}\r\n                            reducers={reducers}\r\n                            showBreadcrumb={false}\r\n                            MasterModal={BOMMaster}\r\n                            masterPath={url.BIllOf_MATERIALS}\r\n                            newBtnPath={url.BIllOf_MATERIALS}\r\n                            ButtonMsgLable={\"BOM\"}\r\n                            deleteName={\"ItemName\"}\r\n                            pageMode={pageMode}\r\n                            goButnFunc={goButtonHandler}\r\n                        />\r\n                        : null\r\n                }\r\n            </div>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default BOMList;","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Production\\ProductionRe-Issue\\ProductionReIssueList.js",["3535","3536","3537","3538","3539","3540","3541","3542"],"import React, { useEffect, useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { Button, Col, FormGroup, Label } from \"reactstrap\";\r\nimport { useHistory } from \"react-router-dom\"\r\nimport { currentDate_ymd } from \"../../../components/Common/CommonFunction\";\r\nimport * as report from '../../../Reports/ReportIndex';\r\nimport * as pageId from \"../../../routes/allPageID\";\r\nimport * as mode from \"../../../routes/PageMode\";\r\nimport * as url from \"../../../routes/route_url\";\r\nimport {\r\n    delete_Production_ReIssueId, delete_Production_ReIssueIdSuccess,\r\n    edit_Production_ReIssueId, getProduction_ReIssueListPage,\r\n    Save_Production_ReIssueSuccess,\r\n    update_Production_ReIssueIdSuccess\r\n}\r\nfrom \"../../../store/Production/ProductionReissueRedux/actions\";\r\nimport { commonPageFieldList } from \"../../../store/actions\";\r\nimport { getpdfReportdata } from \"../../../store/Utilites/PdfReport/actions\";\r\nimport { production_Edit_API } from \"../../../helpers/backend_helper\";\r\nimport CommonPurchaseList from \"../../../components/Common/CommonPurchaseList\";\r\nimport ProductionReIssueAdd from \"./PrductionReIssueAdd\";\r\nimport { C_DatePicker } from \"../../../CustomValidateForm\";\r\n\r\n\r\nconst ProductionReIssueList = () => {\r\n\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n    const [subPageMode, setSubPageMode] = useState(history.location.pathname);\r\n    const [pageMode, setPageMode] = useState(mode.defaultList);\r\n    const [otherState, setOtherState] = useState({ masterPath: url.PRODUCTION_REISSUE, makeBtnShow: false, newBtnPath: url.PRODUCTION_REISSUE_STP });\r\n\r\n    const [userAccState, setUserAccState] = useState('');;\r\n    const [todate, settodate] = useState(currentDate_ymd);\r\n    const [fromdate, setfromdate] = useState(currentDate_ymd);\r\n\r\n    const reducers = useSelector(\r\n        (state) => ({\r\n            tableList: state.ProductionReIssueReducer.productionReIssueList,\r\n            deleteMsg: state.ProductionReIssueReducer.deleteMsg,\r\n            updateMsg: state.ProductionReIssueReducer.updateMsg,\r\n            postMsg: state.ProductionReIssueReducer.postMsg,\r\n            editData: state.ProductionReIssueReducer.editData,\r\n            productionFilter: state.ProductionReIssueReducer.productionReIssueFilter,\r\n            userAccess: state.Login.RoleAccessUpdateData,\r\n            pageField: state.CommonPageFieldReducer.pageFieldList,\r\n        })\r\n    );\r\n\r\n    const action = {\r\n        getList: getProduction_ReIssueListPage,\r\n        editId: edit_Production_ReIssueId,\r\n        deleteId: delete_Production_ReIssueId,\r\n        postSucc: Save_Production_ReIssueSuccess,\r\n        updateSucc: update_Production_ReIssueIdSuccess,\r\n        deleteSucc: delete_Production_ReIssueIdSuccess\r\n    }\r\n\r\n    // Featch Modules List data  First Rendering\r\n    useEffect(() => {\r\n        dispatch(commonPageFieldList(pageId.PRODUCTION_REISSUE_LIST))\r\n        goButtonHandler(true)\r\n    }, []);\r\n\r\n    const { userAccess, pageField } = reducers;\r\n\r\n    useEffect(() => {\r\n\r\n        let userAcc = userAccess.find((inx) => {\r\n            return (inx.id === pageId.PRODUCTION_REISSUE_LIST)\r\n        })\r\n        if (!(userAcc === undefined)) {\r\n            setUserAccState(userAcc)\r\n        }\r\n    }, [userAccess])\r\n\r\n    function downBtnFunc(row) {\r\n        var ReportType = report.Stock;   //Stock\r\n        dispatch(getpdfReportdata(production_Edit_API, ReportType, row.id))\r\n    }\r\n\r\n    const goButtonHandler = (onload = false) => {\r\n        // let FromDate\r\n        // let ToDate\r\n        // if (onload) {\r\n        //     FromDate = currentDate_ymd;\r\n        //     ToDate = currentDate_ymd;\r\n        // } else {\r\n        //     ToDate = todate;\r\n        //     FromDate = fromdate;\r\n        // }\r\n        // \r\n        const jsonBody = JSON.stringify({\r\n            FromDate: fromdate,\r\n            ToDate: todate,\r\n        });\r\n\r\n        dispatch(getProduction_ReIssueListPage(jsonBody));\r\n    }\r\n    function fromdateOnchange(e, date) {\r\n        setfromdate(date)\r\n        // let newObj = { ...productionReIssueFilter }\r\n        // newObj.fromdate = date\r\n        // dispatch(ProductionReIssuelistfilters(newObj))\r\n    }\r\n    function todateOnchange(e, date) {\r\n        settodate(date)\r\n\r\n        // let newObj = { ...productionReIssueFilter }\r\n        // newObj.todate = date\r\n        // dispatch(ProductionReIssuelistfilters(newObj))\r\n    }\r\n    return (\r\n\r\n        <React.Fragment>\r\n            <div className=\"page-content\">\r\n\r\n                <div className=\"px-2  c_card_header\">\r\n                    <div className=\"row\" >\r\n                        <Col sm=\"5\" >\r\n                            <FormGroup className=\" row mt-3 \" >\r\n                                <Label className=\"col-sm-5 p-2\"\r\n                                    style={{ width: \"83px\" }}>From Date</Label>\r\n                                <Col sm=\"6\">\r\n                                    <C_DatePicker\r\n                                        name='fromdate'\r\n                                        onChange={fromdateOnchange}\r\n                                    />\r\n                                </Col>\r\n                            </FormGroup>\r\n                        </Col>\r\n                        <Col sm=\"5\">\r\n                            <FormGroup className=\" mb-1 row mt-3 \" >\r\n                                <Label className=\"col-sm-1 p-2\"\r\n                                    style={{ width: \"65px\", marginRight: \"0.4cm\" }}>To Date</Label>\r\n                                <Col sm=\"6 \">\r\n                                    <C_DatePicker\r\n                                        name=\"todate\"\r\n                                        onChange={todateOnchange}\r\n                                    />\r\n                                </Col>\r\n                            </FormGroup>\r\n                        </Col>\r\n                        <Col sm=\"1\" className=\"mx-4 \">\r\n                            <Button type=\"button\" color=\"btn btn-outline-success border-2 font-size-12 m-3  \"\r\n                                onClick={() => goButtonHandler()}\r\n                            >Go</Button>\r\n                        </Col>\r\n                    </div>\r\n                </div>\r\n                {\r\n                    (pageField) ?\r\n                        <CommonPurchaseList\r\n                            action={action}\r\n                            reducers={reducers}\r\n                            showBreadcrumb={false}\r\n                            masterPath={otherState.masterPath}\r\n                            newBtnPath={otherState.newBtnPath}\r\n                            makeBtnShow={otherState.makeBtnShow}\r\n                            pageMode={pageMode}\r\n                            goButnFunc={goButtonHandler}\r\n                            downBtnFunc={downBtnFunc}\r\n                            ButtonMsgLable={\"ProductionReIssue\"}\r\n                            deleteName={\"ItemName\"}\r\n                            MasterModal={ProductionReIssueAdd}\r\n\r\n                        />\r\n                        : null\r\n                }\r\n            </div>\r\n        </React.Fragment>\r\n    )\r\n}\r\nexport default ProductionReIssueList;","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Inventory\\GRN\\GRNList.js",["3543","3544","3545","3546","3547","3548","3549"],"import React, { useEffect, useLayoutEffect, useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { Col, FormGroup, Label } from \"reactstrap\";\r\nimport Select from \"react-select\";\r\nimport CommonPurchaseList from \"../../../components/Common/CommonPurchaseList\";\r\nimport { date_ymd_func, loginSelectedPartyID } from \"../../../components/Common/CommonFunction\";\r\nimport { mode, url, pageId } from \"../../../routes/index\"\r\nimport * as _act from \"../../../store/actions\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { Go_Button, PageLoadingSpinner } from \"../../../components/Common/CommonButton\";\r\nimport GRNAdd from \"./GRNAdd\";\r\nimport { C_DatePicker } from \"../../../CustomValidateForm\";\r\nimport PartyDropdown_Common from \"../../../components/Common/PartyDropdown\";\r\nimport { customAlert } from \"../../../CustomAlert/ConfirmDialog\";\r\n\r\nconst GRNList = () => {\r\n\r\n    const history = useHistory();\r\n    const dispatch = useDispatch();\r\n    const currentDate_ymd = date_ymd_func();\r\n\r\n    const [subPageMode, setSubPageMode] = useState(history.location.pathname);\r\n    const [pageMode, setPageMode] = useState(mode.defaultList);\r\n    const [otherState, setOtherState] = useState({\r\n        masterPath: '',\r\n        makeBtnShow: false, makeBtnShow: '', makeBtnName: '', IBType: '', orderType: ''\r\n    });\r\n    const [hederFilters, setHederFilters] = useState({ fromdate: currentDate_ymd, todate: currentDate_ymd, venderSelect: { value: '', label: \"All\" } })\r\n\r\n    const reducers = useSelector(\r\n        (state) => ({\r\n            loading: state.GRNReducer.loading,\r\n            listBtnLoading: state.GRNReducer.listBtnLoading,\r\n            customer: state.CommonAPI_Reducer.vendorSupplierCustomer,\r\n            tableList: state.GRNReducer.GRNList,\r\n            deleteMsg: state.GRNReducer.deleteMsg,\r\n            updateMsg: state.GRNReducer.updateMsg,\r\n            postMsg: state.GRNReducer.postMsg,\r\n            editData: state.GRNReducer.editData,\r\n            userAccess: state.Login.RoleAccessUpdateData,\r\n            pageField: state.CommonPageFieldReducer.pageFieldList,\r\n            makeChallan: state.ChallanReducer.makeChallan,\r\n\r\n        })\r\n    );\r\n\r\n    const gobtnId = `gobtn-${subPageMode}`\r\n    const { pageField, customer, makeChallan } = reducers;\r\n    const { fromdate, todate, venderSelect } = hederFilters;\r\n\r\n    const action = {\r\n        editId: _act.editGRNAction,\r\n        deleteId: _act.deleteGRNId,\r\n        postSucc: _act.saveGRNSuccess,\r\n        updateSucc: _act.updateGRNIdSuccess,\r\n        deleteSucc: _act.deleteGRNIdSuccess\r\n    }\r\n\r\n\r\n\r\n    useLayoutEffect(() => {\r\n        let page_Id = '';\r\n        let page_Mode = mode.defaultList;\r\n        let masterPath = '';\r\n        let makeBtnShow = false\r\n        let newBtnPath = ''\r\n        if (subPageMode === url.GRN_LIST_1) {\r\n            page_Id = pageId.GRN_LIST_1;\r\n            masterPath = url.GRN_ADD_1;\r\n            newBtnPath = url.GRN_STP_1;\r\n            page_Mode = mode.modeSTPList\r\n            makeBtnShow = false;\r\n        }\r\n        else if (subPageMode === url.GRN_LIST_3) {\r\n            page_Id = pageId.GRN_LIST_3;\r\n            masterPath = url.GRN_ADD_3;\r\n            newBtnPath = url.GRN_STP_3;\r\n            page_Mode = mode.modeSTPList\r\n            makeBtnShow = false;\r\n        }\r\n        setSubPageMode(subPageMode)\r\n        setOtherState({ masterPath, makeBtnShow, newBtnPath })\r\n        setPageMode(page_Mode)\r\n        dispatch(_act.commonPageFieldListSuccess(null))\r\n        dispatch(_act.commonPageFieldList(page_Id))\r\n\r\n        if (!(loginSelectedPartyID() === 0)) {\r\n            dispatch(_act.GetVenderSupplierCustomer({ PartyID: loginSelectedPartyID(), subPageMode, RouteID: \"\" }))\r\n            goButtonHandler()\r\n        }\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (makeChallan.Status === true && makeChallan.StatusCode === 200) {\r\n            dispatch(_act.makeChallanActionSuccess({ Status: false }))\r\n            history.push({\r\n                pathname: makeChallan.path,\r\n                page_Mode: makeChallan.page_Mode,\r\n            })\r\n        }\r\n\r\n    }, [makeChallan])\r\n\r\n    const venderOptions = customer.map((i) => ({\r\n        value: i.id,\r\n        label: i.Name,\r\n    }));\r\n\r\n    venderOptions.unshift({\r\n        value: \"\",\r\n        label: \" All\"\r\n    });\r\n\r\n    const makeBtnFunc = (list = []) => {\r\n\r\n        const id = list[0].id\r\n        const makeBody = JSON.stringify({\r\n            GRN: id,\r\n        });\r\n        dispatch(_act.makeChallanAction({ makeBody, pageMode: mode.modeSTPsave, path: url.CHALLAN_LIST }))\r\n    };\r\n\r\n    function goButtonHandler() {\r\n        try {\r\n            if (loginSelectedPartyID() === 0) {\r\n                customAlert({ Type: 3, Message: \"Please Select Party\" });\r\n                return;\r\n            };\r\n            const filtersBody = JSON.stringify({\r\n                FromDate: fromdate,\r\n                ToDate: todate,\r\n                Supplier: venderSelect === \"\" ? '' : venderSelect.value,\r\n                Party: loginSelectedPartyID(),\r\n            });\r\n            dispatch(_act.getGRNListPage({ filtersBody }));\r\n        } catch (error) { }\r\n    }\r\n\r\n    function fromdateOnchange(e, date) {\r\n        let newObj = { ...hederFilters }\r\n        newObj.fromdate = date\r\n        setHederFilters(newObj)\r\n    }\r\n\r\n    function todateOnchange(e, date) {\r\n        let newObj = { ...hederFilters }\r\n        newObj.todate = date\r\n        setHederFilters(newObj)\r\n    }\r\n\r\n    function venderOnchange(e) {\r\n        let newObj = { ...hederFilters }\r\n        newObj.venderSelect = e\r\n        setHederFilters(newObj)\r\n    }\r\n\r\n    const HeaderContent = () => {\r\n        return <div className=\"px-2  c_card_filter text-black \" >\r\n            <div className=\"row\">\r\n                <div className=\" row\">\r\n                    <Col sm=\"3\" className=\"\">\r\n                        <FormGroup className=\"mb- row mt-3 \" >\r\n                            <Label className=\"col-sm-5 p-2\"\r\n                                style={{ width: \"83px\" }}>From Date</Label>\r\n                            <Col sm=\"7\">\r\n                                <C_DatePicker\r\n                                    name='fromdate'\r\n                                    value={fromdate}\r\n                                    onChange={fromdateOnchange}\r\n                                />\r\n                            </Col>\r\n                        </FormGroup>\r\n                    </Col>\r\n                    <Col sm=\"3\" className=\"\">\r\n                        <FormGroup className=\"mb- row mt-3 \" >\r\n                            <Label className=\"col-sm-5 p-2\"\r\n                                style={{ width: \"65px\" }}>To Date</Label>\r\n                            <Col sm=\"7\">\r\n                                <C_DatePicker\r\n                                    nane='todate'\r\n                                    value={todate}\r\n                                    onChange={todateOnchange}\r\n                                />\r\n                            </Col>\r\n                        </FormGroup>\r\n                    </Col>\r\n\r\n                    <Col sm=\"5\">\r\n                        <FormGroup className=\"mb-2 row mt-3 \" >\r\n                            <Label className=\"col-md-4 p-2\"\r\n                                style={{ width: \"115px\" }}>Supplier Name</Label>\r\n                            <Col md=\"5\">\r\n                                <Select\r\n                                    value={venderSelect}\r\n                                    classNamePrefix=\"select2-Customer\"\r\n                                    options={venderOptions}\r\n                                    onChange={venderOnchange}\r\n                                    styles={{\r\n                                        menu: provided => ({ ...provided, zIndex: 2 })\r\n                                    }}\r\n                                />\r\n                            </Col>\r\n                        </FormGroup>\r\n                    </Col >\r\n\r\n                    <Col sm=\"1\" className=\"mt-3 \">\r\n                        <Go_Button\r\n                            id={gobtnId}\r\n                            loading={reducers.loading}\r\n                            onClick={goButtonHandler}\r\n                        />\r\n                    </Col>\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n    }\r\n\r\n    const partySelectButtonHandler = () => {\r\n        goButtonHandler()\r\n        dispatch(_act.GetVenderSupplierCustomer({ PartyID: loginSelectedPartyID(), subPageMode, RouteID: \"\" }))\r\n    }\r\n\r\n    function partyOnChngeButtonHandler() {\r\n        dispatch(_act.getGRNListPageSuccess([]));\r\n        let newObj = { ...hederFilters }\r\n        newObj.venderSelect = { value: '', label: \"All\" }\r\n        setHederFilters(newObj)\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <PageLoadingSpinner isLoading={reducers.loading || !pageField} />\r\n            <div className=\"page-content\">\r\n                <PartyDropdown_Common pageMode={pageMode}\r\n                    goButtonHandler={partySelectButtonHandler}\r\n                    changeButtonHandler={partyOnChngeButtonHandler} />\r\n\r\n                {\r\n                    (pageField) ?\r\n                        <CommonPurchaseList\r\n                            action={action}\r\n                            reducers={reducers}\r\n                            showBreadcrumb={false}\r\n                            masterPath={otherState.masterPath}\r\n                            newBtnPath={otherState.newBtnPath}\r\n                            makeBtnShow={otherState.makeBtnShow}\r\n                            pageMode={pageMode}\r\n                            goButnFunc={goButtonHandler}\r\n                            HeaderContent={HeaderContent}\r\n                            makeBtnFunc={makeBtnFunc}\r\n                            ButtonMsgLable={\"GRN\"}\r\n                            deleteName={\"FullGRNNumber\"}\r\n                            makeBtnName={otherState.makeBtnName}\r\n                            MasterModal={GRNAdd}\r\n                            totalAmountShow={true}\r\n                        />\r\n                        : null\r\n                }\r\n\r\n            </div>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default GRNList;","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Inventory\\Challan\\ChallanList.js",["3550","3551","3552","3553","3554"],"import React, { useEffect, useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { BreadcrumbReset, commonPageFieldList, commonPageFieldListSuccess, } from \"../../../store/actions\";\r\nimport { Button, Col, FormGroup, Label } from \"reactstrap\";\r\nimport Select from \"react-select\";\r\nimport CommonPurchaseList from \"../../../components/Common/CommonPurchaseList\";\r\nimport { GetVender } from \"../../../store/CommonAPI/SupplierRedux/actions\";\r\nimport { date_ymd_func, loginPartyID } from \"../../../components/Common/CommonFunction\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { deleteChallanId, deleteChallanIdSuccess, challanList_ForListPage, } from \"../../../store/Inventory/ChallanRedux/actions\";\r\nimport { makeGRN_Mode_1Action } from \"../../../store/Inventory/GRNRedux/actions\";\r\nimport Challan from \"./Challan\";\r\nimport { C_DatePicker } from \"../../../CustomValidateForm\";\r\nimport { url, mode, pageId } from \"../../../routes/index\"\r\nimport { PageLoadingSpinner } from \"../../../components/Common/CommonButton\";\r\n\r\nconst ChallanList = () => {\r\n\r\n    const history = useHistory();\r\n    const dispatch = useDispatch();\r\n    const currentDate_ymd = date_ymd_func();\r\n\r\n    const [subPageMode, setSubPageMode] = useState(history.location.pathname);\r\n    const [pageMode, setPageMode] = useState(mode.defaultList);\r\n    const [otherState, setOtherState] = useState({ masterPath: '', makeBtnShow: false, newBtnPath: '' });\r\n    const [hederFilters, setHederFilters] = useState({ fromdate: currentDate_ymd, todate: currentDate_ymd, venderSelect: { value: '', label: \"All\" } })\r\n    const reducers = useSelector(\r\n        (state) => ({\r\n            vender: state.CommonAPI_Reducer.vender,\r\n            tableList: state.ChallanReducer.ChallanList,\r\n            goBtnLoading: state.ChallanReducer.goBtnLoading,\r\n            deleteMsg: state.ChallanReducer.deleteMsg,\r\n            updateMsg: state.GRNReducer.updateMsg,\r\n            postMsg: state.GRNReducer.postMsg,\r\n            editData: state.GRNReducer.editData,\r\n            makeGRN: state.GRNReducer.GRNitem,\r\n            userAccess: state.Login.RoleAccessUpdateData,\r\n            pageField: state.CommonPageFieldReducer.pageFieldList,\r\n        })\r\n    );\r\n    const { pageField, vender, makeGRN } = reducers;\r\n    const { fromdate, todate, venderSelect } = hederFilters;\r\n\r\n    const action = {\r\n        deleteId: deleteChallanId,\r\n        deleteSucc: deleteChallanIdSuccess\r\n    }\r\n\r\n    // Featch Modules List data  First Rendering\r\n    useEffect(() => {\r\n        let page_Id = '';\r\n        let page_Mode = mode.defaultList;\r\n        let masterPath = '';\r\n        let makeBtnShow = false\r\n        let newBtnPath = ''\r\n\r\n\r\n        if (subPageMode === url.CHALLAN_LIST) {\r\n            page_Id = pageId.CHALLAN_LIST;\r\n            masterPath = url.CHALLAN;\r\n            newBtnPath = url.CHALLAN;\r\n            page_Mode = mode.modeSTPList\r\n            makeBtnShow = true;\r\n        }\r\n        setOtherState({ masterPath, makeBtnShow, newBtnPath })\r\n        setPageMode(page_Mode)\r\n        dispatch(commonPageFieldListSuccess(null))\r\n        dispatch(commonPageFieldList(page_Id))\r\n        dispatch(GetVender())\r\n        goButtonHandler()\r\n        dispatch(BreadcrumbReset())\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (makeGRN.Status === true && makeGRN.StatusCode === 200) {\r\n            history.push({\r\n                pathname: makeGRN.path,\r\n                page_Mode: makeGRN.page_Mode,\r\n            })\r\n        }\r\n    }, [makeGRN])\r\n\r\n    const venderOptions = vender.map((i) => ({\r\n        value: i.id,\r\n        label: i.Name,\r\n    }));\r\n\r\n    venderOptions.unshift({\r\n        value: \"\",\r\n        label: \" All\"\r\n    });\r\n\r\n    const makeBtnFunc = (list = []) => {\r\n\r\n        const challanNo = list[0].FullChallanNumber\r\n        const grnRef = [{\r\n            Challan: list[0].id,\r\n            Inward: false\r\n        }];\r\n\r\n        const jsonBody = JSON.stringify({\r\n            OrderIDs: list[0].id.toString(),\r\n            Mode: 2 // mode when challan to make GRN\r\n        })\r\n        dispatch(makeGRN_Mode_1Action({ jsonBody, pageMode: mode.modeSTPsave, grnRef, path: url.GRN_ADD_1, challanNo }))\r\n    };\r\n\r\n    function goButtonHandler() {\r\n        const jsonBody = JSON.stringify({\r\n            FromDate: fromdate,\r\n            ToDate: todate,\r\n            Party: loginPartyID(),\r\n            Customer: venderSelect === \"\" ? '' : venderSelect.value,\r\n        });\r\n        dispatch(challanList_ForListPage(jsonBody));\r\n    }\r\n\r\n    function fromdateOnchange(e, date) {\r\n        let newObj = { ...hederFilters }\r\n        newObj.fromdate = date\r\n        setHederFilters(newObj)\r\n    }\r\n\r\n    function todateOnchange(e, date) {\r\n        let newObj = { ...hederFilters }\r\n        newObj.todate = date\r\n        setHederFilters(newObj)\r\n    }\r\n\r\n    function venderOnchange(e) {\r\n        let newObj = { ...hederFilters }\r\n        newObj.venderSelect = e\r\n        setHederFilters(newObj)\r\n    }\r\n\r\n    return (\r\n\r\n        <React.Fragment>\r\n            <PageLoadingSpinner isLoading={reducers.goBtnLoading || !pageField} />\r\n            <div className=\"page-content\">\r\n\r\n                <div className=\"px-2  c_card_filter text-black \" >\r\n                    <div className=\"row\">\r\n                        <div className=\" row\">\r\n                            <Col sm=\"3\" className=\"\">\r\n                                <FormGroup className=\"mb- row mt-3 \" >\r\n                                    <Label className=\"col-sm-5 p-2\"\r\n                                        style={{ width: \"83px\" }}>From Date</Label>\r\n                                    <Col sm=\"7\">\r\n                                        <C_DatePicker\r\n                                            name='fromdate'\r\n                                            value={fromdate}\r\n                                            onChange={fromdateOnchange}\r\n                                        />\r\n                                    </Col>\r\n                                </FormGroup>\r\n                            </Col>\r\n                            <Col sm=\"3\" className=\"\">\r\n                                <FormGroup className=\"mb- row mt-3 \" >\r\n                                    <Label className=\"col-sm-5 p-2\"\r\n                                        style={{ width: \"65px\" }}>To Date</Label>\r\n                                    <Col sm=\"7\">\r\n                                        <C_DatePicker\r\n                                            nane='todate'\r\n                                            value={todate}\r\n                                            onChange={todateOnchange}\r\n                                        />\r\n                                    </Col>\r\n                                </FormGroup>\r\n                            </Col>\r\n\r\n                            <Col sm=\"5\">\r\n                                <FormGroup className=\"mb-2 row mt-3 \" >\r\n                                    <Label className=\"col-md-4 p-2\"\r\n                                        style={{ width: \"115px\" }}>Customer</Label>\r\n                                    <Col md=\"5\">\r\n                                        <Select\r\n                                            value={venderSelect}\r\n                                            classNamePrefix=\"select2-Customer\"\r\n                                            options={venderOptions}\r\n                                            onChange={venderOnchange}\r\n                                        />\r\n                                    </Col>\r\n                                </FormGroup>\r\n                            </Col >\r\n\r\n                            <Col sm=\"1\" className=\"mt-3 \">\r\n                                <Button type=\"button\" color=\"btn btn-outline-success border-2 font-size-12 \"\r\n                                    onClick={() => goButtonHandler()}\r\n                                >Go</Button>\r\n                            </Col>\r\n                        </div>\r\n\r\n                    </div>\r\n                </div>\r\n                {\r\n                    (pageField) ?\r\n                        <CommonPurchaseList\r\n                            action={action}\r\n                            reducers={reducers}\r\n                            showBreadcrumb={false}\r\n                            masterPath={otherState.masterPath}\r\n                            newBtnPath={otherState.newBtnPath}\r\n                            makeBtnShow={otherState.makeBtnShow}\r\n                            pageMode={pageMode}\r\n                            goButnFunc={goButtonHandler}\r\n                            makeBtnFunc={makeBtnFunc}\r\n                            ButtonMsgLable={\"challan\"}\r\n                            makeBtnName={\"Make GRN\"}\r\n                            deleteName={\"FullGRNNumber\"}\r\n                            MasterModal={Challan}\r\n                        />\r\n                        : null\r\n                }\r\n\r\n            </div>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default ChallanList;","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Inventory\\GRN\\GRNAdd.js",["3555","3556","3557","3558","3559","3560","3561","3562","3563","3564","3565"],"\r\nimport Select from \"react-select\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n    Button, Col, Dropdown, DropdownMenu, DropdownToggle, Input, Label, Row, FormGroup\r\n} from \"reactstrap\";\r\nimport { MetaTags } from \"react-meta-tags\";\r\nimport ToolkitProvider from \"react-bootstrap-table2-toolkit\";\r\nimport BootstrapTable from \"react-bootstrap-table-next\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport FeatherIcon from \"feather-icons-react\";\r\n\r\nimport { orderCalculateFunc } from \"../../Purchase/Order/OrderPageCalulation\";\r\nimport { SaveButton } from \"../../../components/Common/CommonButton\";\r\nimport { mySearchProps } from \"../../../components/Common/SearchBox/MySearch\";\r\n\r\nimport { mode, url, pageId } from \"../../../routes/index\";\r\nimport { customAlert } from \"../../../CustomAlert/ConfirmDialog\";\r\nimport * as _cfunc from \"../../../components/Common/CommonFunction\";\r\nimport * as _act from \"../../../store/actions\";\r\n\r\nimport { C_DatePicker } from \"../../../CustomValidateForm\";\r\nimport { initialFiledFunc } from \"../../../components/Common/validationFunction\";\r\nimport { useLayoutEffect } from \"react\";\r\nimport { pageFieldUseEffect, saveMsgUseEffect, table_ArrowUseEffect, userAccessUseEffect } from \"../../../components/Common/CommonUseEffect\";\r\n\r\nlet initialTableData = []\r\n\r\nconst GRNAdd = (props) => {\r\n\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n    const currentDate_ymd = _cfunc.date_ymd_func();\r\n\r\n    const [pageMode, setPageMode] = useState(mode.defaultsave);\r\n    const [userPageAccessState, setUserAccState] = useState('');\r\n\r\n    const fileds = {\r\n        GRNDate: currentDate_ymd,\r\n    }\r\n\r\n    const [state, setState] = useState(() => initialFiledFunc(fileds))\r\n\r\n    const [grnDate, setgrnDate] = useState(currentDate_ymd);\r\n    const [orderAmount, setOrderAmount] = useState(0);\r\n    const [grnDetail, setGrnDetail] = useState({});\r\n    const [grnItemList, setgrnItemList] = useState([]);\r\n    const [openPOdrp, setopenPOdrp] = useState(false);\r\n    const [openPOdata, setopenPOdata] = useState([]);\r\n    const [invoiceNo, setInvoiceNo] = useState('');\r\n    const [editCreatedBy, seteditCreatedBy] = useState(\"\");\r\n    const [EditData, setEditData] = useState({});\r\n\r\n    const {\r\n        items,\r\n        postMsg,\r\n        userAccess,\r\n        pageField,\r\n        saveBtnloading,\r\n    } = useSelector((state) => ({\r\n        saveBtnloading: state.GRNReducer.saveBtnloading,\r\n        items: state.GRNReducer.GRNitem,\r\n        postMsg: state.GRNReducer.postMsg,\r\n        updateMsg: state.GRNReducer.updateMsg,\r\n        userAccess: state.Login.RoleAccessUpdateData,\r\n        pageField: state.CommonPageFieldReducer.pageField\r\n    }));\r\n\r\n    useLayoutEffect(() => {\r\n        dispatch(_act.commonPageFieldSuccess(null));\r\n        dispatch(_act.commonPageField(pageId.GRN_ADD_1))\r\n    }, [])\r\n\r\n    const values = { ...state.values }\r\n    const location = { ...history.location }\r\n    const hasShowloction = location.hasOwnProperty(mode.editValue)\r\n    const hasShowModal = props.hasOwnProperty(mode.editValue)\r\n\r\n    useEffect(() => userAccessUseEffect({ // userAccess common useEffect \r\n        props,\r\n        userAccess,\r\n        dispatch,\r\n        setUserAccState,\r\n    }), [userAccess]);\r\n\r\n    useEffect(() => saveMsgUseEffect({// saveMsgUseEffect common useEffect \r\n        postMsg, pageMode,\r\n        history, dispatch,\r\n        postSuccss: _act.saveGRNSuccess,\r\n        listPath: url.GRN_LIST_1\r\n    }), [postMsg]);\r\n\r\n    useEffect(() => pageFieldUseEffect({// useEffect common pagefield for master\r\n        state,\r\n        setState,\r\n        pageField\r\n    }), [pageField]);\r\n\r\n    useEffect(() => table_ArrowUseEffect(\"#table_Arrow\"), [grnItemList]);\r\n\r\n    useEffect(() => {\r\n        if ((items.Status === true) && (items.StatusCode === 200)) {\r\n            const grnItems = items.Data\r\n\r\n            grnItems.OrderItem.forEach((ele, k) => {\r\n                ele.id = k + 1;\r\n                ele[\"poQuantity\"] = ele.Quantity\r\n                ele[\"Quantity\"] = ''\r\n                ele[\"poAmount\"] = ele.Amount\r\n                ele[\"Amount\"] = 0\r\n                ele[\"BatchDate\"] = currentDate_ymd\r\n                ele[\"BatchCode\"] = '0'\r\n                ele[\"delbtn\"] = false\r\n\r\n            });\r\n            initialTableData = []\r\n            const grnDetails = { ...grnItems }\r\n\r\n            initialTableData = grnDetails.OrderItem;\r\n            setgrnItemList(initialTableData)\r\n            grnDetails.OrderItem = []\r\n\r\n            setInvoiceNo(grnItems.InvoiceNumber)\r\n            setGrnDetail(grnDetails)\r\n            const myArr = grnDetails.challanNo.split(\",\");\r\n            myArr.map(i => ({ Name: i, hascheck: false }))\r\n            setopenPOdata(grnDetails.GRNReferences)\r\n            items.Status = false\r\n            dispatch(_act.makeGRN_Mode_1ActionSuccess(items))\r\n\r\n            dispatch(_act.BreadcrumbShowCountlabel(`${\"GRN Amount\"} :${grnItems.OrderAmount}`))\r\n        }\r\n\r\n    }, [items])\r\n\r\n    useEffect(() => {\r\n        if ((hasShowloction || hasShowModal)) {\r\n            let hasEditVal = null\r\n            if (hasShowloction) {\r\n                setPageMode(location.pageMode)\r\n                hasEditVal = location.editValue\r\n            }\r\n            else if (hasShowModal) {\r\n                hasEditVal = props.editValue\r\n                setPageMode(props.pageMode)\r\n            }\r\n\r\n            if (hasEditVal) {\r\n\r\n                setEditData(hasEditVal);\r\n\r\n                const { GRNItems = [], GRNReferences = [], InvoiceNumber } = hasEditVal;\r\n\r\n                let ChallanNo1 = ''\r\n\r\n                GRNReferences.forEach(ele => {\r\n                    ChallanNo1 = ChallanNo1.concat(`${ele.ChallanNo},`)\r\n                });\r\n                ChallanNo1 = ChallanNo1.replace(/,*$/, '');\r\n\r\n                setInvoiceNo(InvoiceNumber)\r\n                setGrnDetail(ChallanNo1);\r\n                setgrnItemList(GRNItems)\r\n                dispatch(_act.editGRNIdSuccess({ Status: false }))\r\n                dispatch(_act.Breadcrumb_inputName(hasEditVal.ItemName))\r\n                seteditCreatedBy(hasEditVal.CreatedBy)\r\n            }\r\n        }\r\n    }, [])\r\n\r\n\r\n    function val_onChange(val, row, type) {\r\n\r\n        if (type === \"qty\") {\r\n            row[\"Quantity\"] = val;\r\n        }\r\n        else {\r\n            row[\"Rate\"] = val\r\n        }\r\n        const calculate = orderCalculateFunc(row)// change\r\n        row[\"Amount\"] = calculate.roundedTotalAmount\r\n        try {\r\n            document.getElementById(`abc${row.id}`).innerText = calculate.roundedTotalAmount\r\n\r\n        }\r\n        catch { alert(\"`abc${row.id}`\") }\r\n\r\n        let sum = 0\r\n        grnItemList.forEach(ind => {\r\n            sum = sum + parseFloat(ind.Amount)\r\n        });\r\n        setOrderAmount(sum.toFixed(2))\r\n        dispatch(_act.BreadcrumbShowCountlabel(`${\"GRN Amount\"} :${sum.toFixed(2)}`))\r\n    }\r\n\r\n    const tableColumnsMode_1 = [\r\n        {//------------- ItemName column ----------------------------------\r\n            text: \"Item Name\",\r\n            dataField: \"ItemName\",\r\n\r\n            formatter: (value, row) => {\r\n                return (<div className=\" mt-2\">\r\n                    <span key={row.id}>{value}</span>\r\n                </div>)\r\n            }\r\n        },\r\n\r\n        {//------------- Quntity first column ----------------------------------\r\n            text: \"PO-Qty\",\r\n            dataField: \"poQuantity\",\r\n            hidden: pageMode === mode.view ? true : false,\r\n            formatter: (value, row, k) => {\r\n                return (\r\n                    <div className=\"text-end\" >\r\n                        <samp key={row.id} className=\"font-asian\"> {value}</samp>\r\n                    </div>\r\n                )\r\n            },\r\n            headerStyle: () => {\r\n                return { width: '100px', textAlign: 'center', text: \"end\" };\r\n            }\r\n        },\r\n\r\n        {//  ------------Quntity column -----------------------------------  \r\n            text: \"GRN-Qty\",\r\n            dataField: \"\",\r\n\r\n            formatter: (value, row, k) => {\r\n                try {\r\n                    document.getElementById(`Quantity${k}`).value = row.Quantity\r\n                } catch (e) { }\r\n                return (\r\n                    <span >\r\n                        <Input type=\"text\"\r\n                            id={`Quantity${row.id}`}\r\n                            defaultValue={row.Quantity}\r\n                            className=\"text-end\"\r\n                            autoComplete=\"off\"\r\n                            key={row.id}\r\n                            disabled={pageMode === mode.view ? true : false}\r\n                            onChange={(e) => {\r\n                                const val = e.target.value\r\n                                let isnum = /^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)?([eE][+-]?[0-9]+)?$/.test(val);\r\n                                if ((isnum) || (val === '')) {\r\n                                    val_onChange(val, row, \"qty\")\r\n                                } else {\r\n                                    document.getElementById(`Quantity${row.id}`).value = row.Quantity\r\n                                }\r\n                            }}\r\n                        />\r\n                    </span>\r\n                )\r\n            },\r\n            headerStyle: () => {\r\n                return { width: '130px', textAlign: 'center' };\r\n            }\r\n        },\r\n\r\n        {  //------------- Unit column ----------------------------------\r\n            text: \"Unit\",\r\n            dataField: \"\",\r\n            formatter: (value, row) => {\r\n\r\n                if (row.UnitDetails === undefined) {\r\n                    row[\"UnitDetails\"] = []\r\n                }\r\n                if (row.UnitName === undefined) {\r\n                    row[\"Unit\"] = row.UnitDetails[0].Unit\r\n                    row[\"UnitName\"] = row.UnitDetails[0].UnitName\r\n                    row[\"BaseUnitQuantity\"] = row.UnitDetails[0].BaseUnitQuantity\r\n                }\r\n                return (\r\n                    <Select\r\n                        classNamePrefix=\"select2-selection\"\r\n                        id={\"ddlUnit\"}\r\n                        key={row.id}\r\n                        isDisabled={pageMode === mode.view ? true : false}\r\n                        defaultValue={{ value: row.Unit, label: row.UnitName }}\r\n                        options={\r\n                            row.UnitDetails.map(i => ({\r\n                                label: i.UnitName,\r\n                                value: i.Unit,\r\n                                baseUnitQty: i.BaseUnitQuantity\r\n                            }))\r\n                        }\r\n                        onChange={e => {\r\n                            row[\"Unit\"] = e.value;\r\n                            row[\"UnitName\"] = e.label\r\n                            row[\"BaseUnitQuantity\"] = e.baseUnitQty\r\n                        }}\r\n                    >\r\n                    </Select >\r\n                )\r\n            },\r\n            headerStyle: (colum, colIndex) => {\r\n                return { width: '150px', textAlign: 'center' };\r\n            }\r\n        },\r\n\r\n        {  //-------------MRP column ----------------------------------\r\n            text: \"MRP\",\r\n            dataField: \"\",\r\n            formatter: (value, row, k) => {\r\n                return (\r\n                    <span className=\"text-right\" >\r\n                        <Input\r\n\r\n                            type=\"text\"\r\n                            className=\" text-end\"\r\n                            defaultValue={row.MRP}\r\n\r\n                            id={`MRP${row.id}`}\r\n                            autoComplete=\"off\"\r\n                            key={row.id}\r\n                            disabled={true}\r\n                            // disabled={pageMode === mode.view ? true : false}\r\n                            onChange={(e) => {\r\n                                const val = e.target.value\r\n                                let isnum = /^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)?([eE][+-]?[0-9]+)?$/.test(val);\r\n                                if ((isnum) || (val === '')) {\r\n                                    row.MRP = val;\r\n                                } else {\r\n                                    document.getElementById(`MRP${row.id}`).value = row.Quantity\r\n                                }\r\n                            }}\r\n                        />\r\n                    </span>\r\n                )\r\n            },\r\n\r\n            headerStyle: (colum, colIndex) => {\r\n                return { width: '100px', textAlign: 'center' };\r\n            }\r\n        },\r\n\r\n        {  //-------------Rate column ----------------------------------\r\n            text: \"Basic Rate\",\r\n            dataField: \"\",\r\n            formatter: (value, row, k) => {\r\n                if (row.Rate === undefined) { row[\"Rate\"] = 0 }\r\n                if (row.Amount === undefined) { row[\"Amount\"] = 0 }\r\n                return (\r\n                    <span className=\"text-right\" >\r\n                        <Input\r\n                            key={row.id}\r\n                            type=\"text\"\r\n                            id={`Ratey${k}`}\r\n                            className=\" text-end\"\r\n                            defaultValue={row.Rate}\r\n                            autoComplete=\"off\"\r\n                            disabled={(row.GST === '') || (pageMode === mode.view) ? true : false}\r\n                            onChange={e => {\r\n                                row[\"Rate\"] = e.target.value;\r\n                                const qty = document.getElementById(`Quantity${row.id}`)\r\n                                const val = e.target.value\r\n                                if (val > 0) {\r\n                                    val_onChange(val, row, \"rate\")\r\n                                    qty.disabled = false\r\n                                } else {\r\n                                    val_onChange(0, row, \"rate\")\r\n                                    qty.disabled = true\r\n                                }\r\n                            }}\r\n                        />\r\n                    </span>\r\n                )\r\n            },\r\n\r\n            headerStyle: (colum, colIndex) => {\r\n                return { width: '100px', textAlign: 'center' };\r\n            }\r\n        },\r\n\r\n        {//------------- ItemName column ----------------------------------\r\n            text: \"Amount\",\r\n            dataField: \"\",\r\n            // sort: true,\r\n            formatter: (value, row, k) => (\r\n                <div className=\"row mt-1\" >\r\n                    <div className=\"text-end \">\r\n                        <samp key={row.id} id={`abc${row.id}`}>{row.Amount}</samp>\r\n                    </div>\r\n                </div>\r\n            ),\r\n            headerStyle: (colum, colIndex) => {\r\n                return { width: '100px', textAlign: 'center', text: \"center\" };\r\n            }\r\n        },\r\n\r\n        {//------------- Batch Code column ----------------------------------\r\n            text: \"BatchCode\",\r\n            dataField: \"\",\r\n            // sort: true,\r\n            formatter: (value, row, k) => {\r\n\r\n                try {\r\n                    document.getElementById(`Batch${row.id}`).value = row.BatchCode\r\n                } catch (e) { }\r\n                return (\r\n                    <Input type=\"text\"\r\n                        key={row.id}\r\n                        id={`Batch${row.id}`}\r\n                        placeholder=\"Batch Code...\"\r\n                        className=\"text-end \"\r\n                        disabled={(pageMode === mode.view) ? true : false}\r\n                        defaultValue={row.BatchCode}\r\n                        onChange={e => { row[\"BatchCode\"] = e.target.value }}\r\n                        autoComplete=\"off\"\r\n                    />\r\n                )\r\n            },\r\n\r\n            headerStyle: (colum, colIndex) => {\r\n                return { width: '130px', textAlign: 'center', text: \"center\" };\r\n            }\r\n        },\r\n\r\n        {//------------- Batch Date column ----------------------------------\r\n            text: \"Batch Date\",\r\n            dataField: \"\",\r\n            formatter: (value, row, k) => {\r\n                try {\r\n                    document.getElementById(`BatchDate${k}`).value = row.BatchDate\r\n                } catch (e) { }\r\n                return (\r\n                    <C_DatePicker\r\n                        id={`BatchDate${k}`}\r\n                        key={row.id}\r\n                        value={row.BatchDate}\r\n                        data-enable-time\r\n                        disabled={(pageMode === mode.view) ? true : false}\r\n                        onChange={(e, date) => { row.BatchDate = date }}\r\n                    />\r\n                )\r\n            },\r\n            headerStyle: (colum, colIndex) => {\r\n                return { width: '130px', textAlign: 'center', text: \"center\" };\r\n            }\r\n        },\r\n\r\n        {//------------- Action column ----------------------------------\r\n            text: \"Action\",\r\n            dataField: \"\",\r\n            hidden: (pageMode === mode.view) ? true : false,\r\n            formatter: (value, row, k, a, v) => (\r\n                <div className=\"d-flex justify-Content-center mt-2\" >\r\n                    <div> <Button\r\n                        type=\"button\"\r\n                        data-mdb-toggle=\"tooltip\" data-mdb-placement=\"top\"\r\n                        onClick={(e) => copybtnOnclick(row)}\r\n                        className=\"badge badge-soft-primary font-size-12 btn btn-primary\r\n                     waves-effect waves-light w-xxs border border-light\"\r\n                    >\r\n                        <i className=\"bx bxs-copy font-size-8 \"></i>\r\n                    </Button ></div>\r\n\r\n                    <div >\r\n                        {row.delbtn ? <div >\r\n                            <Button\r\n                                // style={pageMode==='edit'? 'Block' :\"None\"}\r\n\r\n                                type=\"button\"\r\n                                data-mdb-toggle=\"tooltip\" data-mdb-placement=\"top\"\r\n                                onClick={(e) => deletebtnOnclick(row)}\r\n                                className=\"badge badge-soft-danger font-size-12 btn btn-danger\r\n                                      waves-effect waves-light w-xxs border border-light\"\r\n                            >\r\n                                <i class=\"mdi mdi-delete font-size-8 \"></i>\r\n                            </Button >\r\n                        </div>\r\n                            : null}\r\n\r\n                    </div>\r\n                </div>\r\n\r\n            ),\r\n            headerStyle: (colum, colIndex) => {\r\n                return { width: '30px', textAlign: 'center', text: \"center\" };\r\n            }\r\n        },\r\n    ];\r\n\r\n    const defaultSorted = [\r\n        {\r\n            dataField: \"Name\", // if dataField is not match to any column you defined, it will be ignored.\r\n            order: \"asc\", // desc or asc\r\n        },\r\n    ];\r\n\r\n    const pageOptions = {\r\n        sizePerPage: (grnItemList.length + 2),\r\n        totalSize: 0,\r\n        custom: true,\r\n    };\r\n\r\n    const copybtnOnclick = (r) => {\r\n        const id = r.id\r\n        const newArr = []\r\n        let list = [...initialTableData];\r\n\r\n        list.forEach(element => {\r\n\r\n            if (element.id < id) {\r\n                newArr.push(element)\r\n            }\r\n            else if (element.id === id) {\r\n                newArr.push(element);\r\n                const ele = { ...element }\r\n                ele.id = element.id + 1\r\n                ele.delbtn = true\r\n                ele.Quantity = 0\r\n                newArr.push(ele)\r\n            }\r\n            else {\r\n                const ele1 = { ...element }\r\n                ele1.id = element.id + 1\r\n                newArr.push(ele1)\r\n            }\r\n        });\r\n\r\n        initialTableData = newArr\r\n        setgrnItemList(newArr)\r\n\r\n    }\r\n\r\n    const deletebtnOnclick = (r) => {\r\n        const list = [...initialTableData];\r\n        const newArr = list.filter(i => { return (!(i.id === r.id)) })\r\n        initialTableData = newArr\r\n        setgrnItemList(newArr)\r\n    }\r\n\r\n    const saveHandeller = (event) => {\r\n\r\n        event.preventDefault();\r\n\r\n        const btnId = event.target.id\r\n        _cfunc.btnIsDissablefunc({ btnId, state: true })\r\n\r\n        function returnFunc() {\r\n            _cfunc.btnIsDissablefunc({ btnId, state: false })\r\n        }\r\n        try {\r\n            const itemArr = []\r\n            const isvalidMsg = [];\r\n\r\n            grnItemList.forEach(i => {\r\n\r\n                const calculated = orderCalculateFunc(i)// amount calculation function \r\n\r\n                const arr = {\r\n                    Item: i.Item,\r\n                    Quantity: i.Quantity,\r\n                    MRP: i.MRP,\r\n                    ReferenceRate: i.Rate,\r\n                    Rate: i.Rate,\r\n                    Unit: i.Unit,\r\n                    BaseUnitQuantity: i.BaseUnitQuantity,\r\n                    BatchDate: i.BatchDate,\r\n                    BatchCode: i.BatchCode,\r\n\r\n                    GST: i.GST,\r\n                    CGST: calculated.CGST_Amount,\r\n                    SGST: calculated.SGST_Amount,\r\n                    IGST: calculated.IGST_Amount,\r\n                    GSTPercentage: calculated.GST_Percentage,\r\n                    CGSTPercentage: calculated.CGST_Percentage,\r\n                    SGSTPercentage: calculated.SGST_Percentage,\r\n                    IGSTPercentage: calculated.IGST_Percentage,\r\n                    BasicAmount: calculated.basicAmount,\r\n                    GSTAmount: calculated.roundedGstAmount,\r\n                    Amount: calculated.roundedTotalAmount,\r\n                    TaxType: 'GST',\r\n                    DiscountType: i.DiscountType,\r\n                    Discount: Number(i.Discount) || 0,\r\n                    DiscountAmount: Number(calculated.disCountAmt).toFixed(2),\r\n\r\n                }\r\n\r\n\r\n                let isfound = itemArr.filter(ind => {\r\n                    return ind.Item === i.Item\r\n                })\r\n\r\n                if (isfound.length > 0) {\r\n                    let dubli = isfound.filter(ele => {\r\n                        let condition = ((i.Rate === ele.Rate) && (i.BatchDate === ele.BatchDate) && (i.BatchCode === ele.BatchCode) && (i.Unit === ele.Unit))\r\n                        return condition\r\n                    })\r\n\r\n                    if ((i.Quantity > 0)) {\r\n\r\n                        if (dubli.length === 0) {\r\n                            itemArr.push(arr)\r\n                        } else {\r\n                            isvalidMsg.push(`${i.ItemName}:  This Item  Is Dublicate...`)\r\n                        }\r\n                    }\r\n                } else if ((i.Quantity > 0)) {\r\n                    itemArr.push(arr)\r\n                }\r\n\r\n            })\r\n\r\n            if (invoiceNo.length === 0) {\r\n\r\n                customAlert({\r\n                    Type: 3,\r\n                    Message: \"Please Enter Invoice Number\",\r\n                })\r\n                return returnFunc()\r\n            }\r\n            if (itemArr.length === 0) {\r\n\r\n                customAlert({\r\n                    Type: 3,\r\n                    Message: \"Please Enter One Item Quantity\",\r\n                })\r\n                return returnFunc()\r\n            }\r\n            if (isvalidMsg.length > 0) {\r\n\r\n                customAlert({\r\n                    Type: 3,\r\n                    Message: isvalidMsg,\r\n                })\r\n                return returnFunc()\r\n            }\r\n\r\n            const jsonBody = JSON.stringify({\r\n                GRNDate: grnDate,\r\n                Customer: grnDetail.Customer,\r\n                GRNNumber: 1,\r\n                GrandTotal: Number(orderAmount).toFixed(2),\r\n                Party: grnDetail.Supplier,\r\n                InvoiceNumber: invoiceNo,\r\n                CreatedBy: _cfunc.loginUserID(),\r\n                UpdatedBy: 1,\r\n                GRNItems: itemArr,\r\n                GRNReferences: openPOdata,\r\n            });\r\n\r\n            if (pageMode === mode.edit) {\r\n\r\n                returnFunc()\r\n            } else {\r\n\r\n                dispatch(_act.saveGRNAction({ jsonBody, btnId }))\r\n            }\r\n\r\n        } catch (error) { returnFunc() }\r\n    }\r\n\r\n    if (!(userPageAccessState === \"\")) {\r\n        return (\r\n            <React.Fragment>\r\n                <MetaTags>{_cfunc.metaTagLabel(userPageAccessState)}</MetaTags>\r\n                <div className=\"page-content\" >\r\n\r\n                    <div className=\"px-2 mb-1  c_card_header \" >\r\n                        <Row>\r\n                            <Col sm={5}>\r\n\r\n                                <FormGroup className=\" row mt-2 \" >\r\n                                    <Label className=\"col-sm-4 p-2\"\r\n                                        style={{ width: \"130px\" }}>GRN Date</Label>\r\n                                    <Col sm=\"7\">\r\n                                        <C_DatePicker\r\n                                            name=\"GRNDate\"\r\n                                            value={values.GRNDate}\r\n                                            disabled={(pageMode === mode.view) ? true : false}\r\n                                            onChange={(e, date) => { setgrnDate(date) }}\r\n                                        />\r\n                                    </Col>\r\n                                </FormGroup>\r\n\r\n                                <FormGroup className=\" row  \" >\r\n                                    <Label className=\"col-md-4 p-2\"\r\n                                        style={{ width: \"130px\" }}>Supplier Name</Label>\r\n                                    <Col md=\"7\">\r\n                                        < Input\r\n                                            style={{ backgroundColor: \"white\" }}\r\n                                            type=\"text\"\r\n                                            value={pageMode === mode.view ? EditData.CustomerName : grnDetail.SupplierName}\r\n                                            disabled={pageMode === mode.view ? true : false} />\r\n                                    </Col>\r\n                                </FormGroup>\r\n\r\n                                <FormGroup className=\" row \" >\r\n                                    <Label className=\"col-md-4 p-2\"\r\n                                        style={{ width: \"130px\" }}>PO Number</Label>\r\n                                    <Col sm=\"7\">\r\n                                        <Input type=\"text\"\r\n                                            style={{ backgroundColor: \"white\" }}\r\n                                            disabled={pageMode === mode.view ? true : false}\r\n                                            value={pageMode === mode.view ? grnDetail : grnDetail.challanNo}\r\n                                            placeholder=\"Enter Challan No\" />\r\n                                    </Col>\r\n                                </FormGroup>\r\n                            </Col>\r\n                            <Col sm={5}>\r\n                                <FormGroup className=\" row mt-2\" >\r\n                                    <Label className=\"col-md-4 p-2\"\r\n                                        style={{ width: \"130px\" }}>Invoice Date</Label>\r\n                                    <Col md=\"7\">\r\n                                        <C_DatePicker\r\n                                            disabled={true}\r\n                                        />\r\n                                    </Col>\r\n                                </FormGroup>\r\n                                <FormGroup className=\"mb-2 row  \" >\r\n                                    <Label className=\"col-md-4 p-2\"\r\n                                        style={{ width: \"130px\" }}>Invoice No</Label>\r\n                                    <Col md=\"7\">\r\n                                        <Input\r\n                                            type=\"text\"\r\n                                            style={{ backgroundColor: \"white\" }}\r\n                                            value={invoiceNo}\r\n                                            placeholder=\"Enter Invoice No\"\r\n                                            disabled={pageMode === mode.view ? true : false}\r\n                                            onChange={(e) => setInvoiceNo(e.target.value)}\r\n                                        />\r\n                                    </Col>\r\n                                </FormGroup>\r\n\r\n\r\n                                <FormGroup className=\"mb-2 row  \" >\r\n                                    <Label className=\"col-md-4 p-2\"\r\n                                        style={{ width: \"130px\" }}>Close PO</Label>\r\n                                    <Col md=\"7\" style={{ marginLeft: \"-14px\" }}>\r\n                                        {\r\n                                            openPOdata.length === 1 ?\r\n                                                <Input\r\n                                                    type=\"checkbox\"\r\n                                                    style={{ paddingTop: \"7px\" }}\r\n                                                    placeholder=\"Enter Invoice No\"\r\n                                                    disabled={pageMode === mode.view ? true : false}\r\n                                                    onChange={(e) => openPOdata[0].Inward = e.target.checked}\r\n                                                />\r\n                                                :\r\n                                                <Dropdown\r\n                                                    className=\"d-none d-lg-inline-block ms-1\"\r\n\r\n                                                    isOpen={openPOdrp}\r\n                                                    toggle={() => {\r\n                                                        setopenPOdrp(!openPOdrp)\r\n                                                    }}\r\n                                                >\r\n                                                    <DropdownToggle\r\n                                                        className=\"btn header-item noti-icon mt-n2 mb-n3 \"\r\n                                                        tag=\"button\"\r\n                                                    >\r\n                                                        <FeatherIcon\r\n                                                            icon=\"square\"\r\n                                                            className=\"icon-sm text-primary\"\r\n                                                        />\r\n                                                    </DropdownToggle>\r\n                                                    <DropdownMenu className=\"dropdown-menu-lg dropdown-menu-custom\"  >\r\n                                                        <Row className=\"row  g-0 \" >\r\n                                                            {openPOdata.map((index, key) => {\r\n                                                                return (\r\n                                                                    <Col className=\"col col-6 dropdown-icon-item-custom  text-black \"\r\n                                                                    >\r\n                                                                        <li onClick={e => {\r\n                                                                            openPOdata[key].Inward = !openPOdata[key].Inward\r\n                                                                            document.getElementById(`hasInwardCheck${key}`).checked = openPOdata[key].Inward;\r\n                                                                        }} >\r\n                                                                            <Row className=\"row \">\r\n                                                                                <Col className=\" col user-select \">\r\n                                                                                    <li>\r\n                                                                                        <Label className=\"\" >{index.ChallanNo}</Label>\r\n                                                                                    </li>\r\n                                                                                </Col>\r\n\r\n                                                                                <Col className=\" col  mt-2\" style={{ paddingLeft: \"inherit\" }}>\r\n                                                                                    <Input\r\n                                                                                        id={`hasInwardCheck${key}`}\r\n                                                                                        className=\"col col-2 text-black \"\r\n                                                                                        type=\"checkbox\"\r\n                                                                                        defaultChecked={openPOdata[key].Inward}\r\n                                                                                    />\r\n                                                                                </Col>\r\n                                                                            </Row>\r\n                                                                        </li>\r\n                                                                    </Col>\r\n                                                                )\r\n                                                            })}\r\n                                                        </Row>\r\n\r\n                                                    </DropdownMenu>\r\n                                                </Dropdown>\r\n                                        }\r\n                                    </Col>\r\n                                </FormGroup>\r\n\r\n                            </Col>\r\n                        </Row>\r\n                    </div>\r\n\r\n                    <ToolkitProvider\r\n                        keyField=\"id\"\r\n                        defaultSorted={defaultSorted}\r\n                        data={grnItemList}\r\n                        columns={tableColumnsMode_1}\r\n                        search\r\n                    >\r\n                        {(toolkitProps,) => (\r\n                            <React.Fragment>\r\n                                <Row>\r\n                                    <Col xl=\"12\">\r\n                                        <div className=\"table table-Rresponsive\">\r\n                                            <BootstrapTable\r\n                                                responsive\r\n                                                id=\"table_Arrow\"\r\n                                                bordered={false}\r\n                                                striped={false}\r\n                                                classes={\"table  table-bordered table-hover\"}\r\n                                                noDataIndication={\r\n                                                    <div className=\"text-danger text-center \">\r\n                                                        Items Not available\r\n                                                    </div>\r\n                                                }\r\n                                                {...toolkitProps.baseProps}\r\n                                            />\r\n                                            {mySearchProps(toolkitProps.searchProps)}\r\n                                        </div>\r\n                                    </Col>\r\n                                </Row>\r\n\r\n                            </React.Fragment>\r\n                        )}\r\n                    </ToolkitProvider>\r\n\r\n                    {\r\n                        (grnItemList.length > 0) ?\r\n                            <div className=\"row save1\" style={{ paddingBottom: 'center', marginTop: \"-30px\" }}>\r\n                                <SaveButton pageMode={pageMode}\r\n                                    loading={saveBtnloading}\r\n                                    editCreatedBy={editCreatedBy}\r\n                                    userAcc={userPageAccessState}\r\n                                    module={\"GRN\"} onClick={saveHandeller}\r\n                                />\r\n                            </div>\r\n                            :\r\n                            <div className=\"row save1\"></div>\r\n                    }\r\n                </div >\r\n\r\n            </React.Fragment >\r\n        )\r\n    } else {\r\n        return null\r\n    }\r\n\r\n}\r\nexport default GRNAdd\r\n\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Production\\BOM\\BOMMaster\\BOMIndex.js",["3566","3567","3568","3569","3570","3571","3572","3573"],"import React, { useEffect, useState } from \"react\";\r\nimport {\r\n    Col,\r\n    FormGroup,\r\n    Input,\r\n    Label,\r\n    Row\r\n} from \"reactstrap\";\r\nimport { MetaTags } from \"react-meta-tags\";\r\nimport { Breadcrumb_inputName, commonPageFieldSuccess, getItemList } from \"../../../../store/actions\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { commonPageField } from \"../../../../store/actions\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {\r\n    comAddPageFieldFunc,\r\n    formValid,\r\n    initialFiledFunc,\r\n    onChangeDate,\r\n    onChangeSelect,\r\n    onChangeText,\r\n} from \"../../../../components/Common/validationFunction\";\r\nimport Select from \"react-select\";\r\nimport { SaveButton } from \"../../../../components/Common/CommonButton\";\r\nimport ItemTab from \"./ItemQuantityTab\";\r\nimport {\r\n    editBOMListSuccess,\r\n    saveBOMMaster,\r\n    saveBOMMasterSuccess,\r\n    updateBOMList,\r\n    updateBOMListSuccess\r\n} from \"../../../../store/Production/BOMRedux/action\";\r\nimport * as pageId from \"../../../../routes//allPageID\";\r\nimport * as url from \"../../../../routes/route_url\";\r\nimport * as mode from \"../../../../routes/PageMode\";\r\nimport { C_DatePicker } from \"../../../../CustomValidateForm\";\r\nimport * as _cfunc from \"../../../../components/Common/CommonFunction\";\r\nimport { customAlert } from \"../../../../CustomAlert/ConfirmDialog\";\r\n\r\nconst BOMMaster = (props) => {\r\n\r\n    const dispatch = useDispatch();\r\n    const history = useHistory()\r\n\r\n    const [EditData, setEditData] = useState({});\r\n    const [modalCss, setModalCss] = useState(false);\r\n    const [pageMode, setPageMode] = useState(mode.defaultsave);\r\n    const [userPageAccessState, setUserAccState] = useState('');\r\n    const [ItemTabDetails, setItemTabDetails] = useState([])\r\n    const [editCreatedBy, seteditCreatedBy] = useState(\"\");\r\n    const [ItemUnitOptions, setItemUnitOptions] = useState([]);\r\n    const [ItemUnitOnEditData, setItemUnitOnEditData] = useState([]);\r\n\r\n    const fileds = {\r\n        id: \"\",\r\n        BomDate: \"\",\r\n        ItemName: \"\",\r\n        EstimatedOutputQty: \"\",\r\n        UnitName: \"\",\r\n        Comment: \"\",\r\n        IsActive: true,\r\n        IsVDCItem: false,\r\n    }\r\n\r\n    const [state, setState] = useState(initialFiledFunc(fileds))\r\n\r\n    //Access redux store Data /  'save_ModuleSuccess' action data\r\n    const {\r\n        postMsg,\r\n        updateMsg,\r\n        pageField,\r\n        userAccess,\r\n        Items,\r\n    } = useSelector((state) => ({\r\n        postMsg: state.BOMReducer.PostData,\r\n        updateMsg: state.BOMReducer.updateMsg,\r\n        userAccess: state.Login.RoleAccessUpdateData,\r\n        pageField: state.CommonPageFieldReducer.pageField,\r\n        Items: state.ItemMastersReducer.ItemList,\r\n    }));\r\n\r\n    useEffect(() => {\r\n        const page_Id = pageId.BIllOf_MATERIALS\r\n        dispatch(commonPageFieldSuccess(null));\r\n        dispatch(commonPageField(page_Id))\r\n        dispatch(getItemList())\r\n    }, []);\r\n\r\n    const location = { ...history.location }\r\n    const hasShowloction = location.hasOwnProperty(mode.editValue)\r\n    const hasShowModal = props.hasOwnProperty(mode.editValue)\r\n\r\n    const values = { ...state.values }\r\n    const { isError } = state;\r\n    const { fieldLabel } = state;\r\n\r\n    // userAccess useEffect\r\n    useEffect(() => {\r\n        let userAcc = null;\r\n        let locationPath = location.pathname;\r\n        if (hasShowModal) {\r\n            locationPath = props.masterPath;\r\n        };\r\n        userAcc = userAccess.find((inx) => {\r\n            return (`/${inx.ActualPagePath}` === locationPath)\r\n        })\r\n        if (userAcc) {\r\n            setUserAccState(userAcc)\r\n            _cfunc.breadcrumbReturnFunc({ dispatch, userAcc });\r\n\r\n        };\r\n    }, [userAccess])\r\n\r\n    //This UseEffect 'SetEdit' data and 'autoFocus' while this Component load First Time.\r\n    useEffect(() => {\r\n        if ((hasShowloction || hasShowModal)) {\r\n            let hasEditVal = null\r\n            if (hasShowloction) {\r\n                setPageMode(location.pageMode)\r\n                hasEditVal = location.editValue\r\n            }\r\n            else if (hasShowModal) {\r\n                hasEditVal = props.editValue\r\n                setPageMode(props.pageMode)\r\n                setModalCss(true)\r\n            }\r\n\r\n            if (hasEditVal) {\r\n                let ItemUnits = hasEditVal.ParentUnitDetails.map((data) => ({\r\n                    value: data.Unit,\r\n                    label: data.UnitName\r\n                }))\r\n                setItemUnitOnEditData(ItemUnits)\r\n                // setItemUnitOptions(ItemUnits)\r\n                setEditData(hasEditVal);\r\n                const { id, BomDate, Item, ItemName, Unit, UnitName, EstimatedOutputQty, Comment, IsActive, IsVDCItem } = hasEditVal\r\n                const { values, fieldLabel, hasValid, required, isError } = { ...state }\r\n                hasValid.id.valid = true;\r\n                hasValid.BomDate.valid = true;\r\n                hasValid.ItemName.valid = true;\r\n                hasValid.UnitName.valid = true;\r\n                hasValid.EstimatedOutputQty.valid = true;\r\n                hasValid.Comment.valid = true;\r\n                hasValid.IsActive.valid = true;\r\n                hasValid.IsVDCItem.valid = true;\r\n\r\n                values.id = id\r\n                values.BomDate = BomDate;\r\n                values.EstimatedOutputQty = EstimatedOutputQty;\r\n                values.Comment = Comment;\r\n                values.IsActive = IsActive;\r\n                values.ItemName = { label: ItemName, value: Item };\r\n                values.UnitName = { label: UnitName, value: Unit };\r\n                values.IsVDCItem = IsVDCItem;\r\n                setItemTabDetails(hasEditVal.BOMItems)\r\n                setState({ values, fieldLabel, hasValid, required, isError })\r\n                dispatch(editBOMListSuccess({ Status: false }))\r\n                dispatch(Breadcrumb_inputName(hasEditVal.ItemName))\r\n                seteditCreatedBy(hasEditVal.CreatedBy)\r\n            }\r\n        }\r\n    }, [])\r\n\r\n    useEffect(async () => {\r\n        if ((postMsg.Status === true) && (postMsg.StatusCode === 200)) {\r\n            dispatch(saveBOMMasterSuccess({ Status: false }))\r\n            // setState(() => resetFunction(fileds, state))// Clear form values  \r\n            dispatch(Breadcrumb_inputName(''))\r\n\r\n            if (pageMode === mode.dropdownAdd) {\r\n                customAlert({\r\n                    Type: 1,\r\n                    Message: postMsg.Message,\r\n                })\r\n            }\r\n            else {\r\n                let isPermission = await customAlert({\r\n                    Type: 1,\r\n                    Status: true,\r\n                    Message: postMsg.Message,\r\n                })\r\n                if (isPermission) {\r\n                    history.push({ pathname: url.BIllOf_MATERIALS_LIST })\r\n                }\r\n            }\r\n        }\r\n        else if (postMsg.Status === true) {\r\n            dispatch(saveBOMMasterSuccess({ Status: false }))\r\n            customAlert({\r\n                Type: 4,\r\n                 Message: JSON.stringify(postMsg.Message),\r\n            })\r\n        }\r\n    }, [postMsg])\r\n\r\n    useEffect(() => {\r\n\r\n        if ((updateMsg.Status === true) && (updateMsg.StatusCode === 200) && !(modalCss)) {\r\n            // setState(() => resetFunction(fileds, state))// Clear form values  \r\n            history.push({\r\n                pathname: url.BIllOf_MATERIALS_LIST,\r\n            })\r\n        } else if ((updateMsg.Status === true) && (updateMsg.StatusCode === 100) && !(modalCss)) {\r\n            dispatch(updateBOMListSuccess({ Status: false }));\r\n            customAlert({\r\n                Type: 6, Status: true,\r\n                Message: JSON.stringify(updateMsg.Message),\r\n                PermissionFunction: PermissionFunction,\r\n\r\n            })\r\n        }\r\n        else if (updateMsg.Status === true && !modalCss) {\r\n            dispatch(updateBOMListSuccess({ Status: false }));\r\n\r\n            customAlert({\r\n                Type: 3,\r\n                Message: JSON.stringify(updateMsg.Message),\r\n            })\r\n        }\r\n    }, [updateMsg, modalCss]);\r\n\r\n    useEffect(() => {\r\n\r\n        if (pageField) {\r\n            const fieldArr = pageField.PageFieldMaster\r\n            comAddPageFieldFunc({ state, setState, fieldArr })\r\n        }\r\n    }, [pageField])\r\n\r\n    const ItemDropdown_Options = Items.map((index) => ({\r\n        value: index.id,\r\n        label: index.Name,\r\n    }));\r\n\r\n    function PermissionFunction() {\r\n        let event = { preventDefault: () => { } }\r\n        SaveHandler({ event, mode: true })\r\n    }\r\n\r\n    function Items_Dropdown_Handler(e) {\r\n        setItemTabDetails([])\r\n        let Item = Items.filter((index) => {\r\n            return index.id === e.value\r\n        })\r\n        let ItemUnits = Item[0].UnitDetails.map((data) => ({\r\n            value: data.id,\r\n            label: data.UnitName\r\n        }))\r\n\r\n        setItemUnitOptions(ItemUnits)\r\n\r\n        setState((i) => {\r\n            i.values.UnitName = \"\";\r\n            i.hasValid.UnitName.valid = false\r\n            return i\r\n        })\r\n    }\r\n\r\n    const SaveHandler = async (event) => {\r\n        event.preventDefault();\r\n        const btnId = event.target.id\r\n        const BOMItems = ItemTabDetails.map((index) => ({\r\n            Item: index.Item,\r\n            Quantity: index.Quantity,\r\n            Unit: index.Unit\r\n        }))\r\n\r\n        try {\r\n            if (formValid(state, setState)) {\r\n                _cfunc.btnIsDissablefunc({ btnId, state: true })\r\n                let BOMrefID = 0\r\n                if ((pageMode === mode.edit)) {\r\n                    BOMrefID = EditData.id\r\n                };\r\n\r\n                const jsonBody = JSON.stringify({\r\n                    BomDate: values.BomDate,\r\n                    EstimatedOutputQty: values.EstimatedOutputQty,\r\n                    Comment: values.Comment,\r\n                    IsActive: values.IsActive,\r\n                    Item: values.ItemName.value,\r\n                    Unit: values.UnitName.value,\r\n                    CreatedBy: _cfunc.loginUserID(),\r\n                    Company: _cfunc.loginCompanyID(),\r\n                    BOMItems: BOMItems,\r\n                    IsVDCItem: values.IsVDCItem,\r\n                    ReferenceBom: BOMrefID\r\n                });\r\n                if (BOMItems.length === 0) {\r\n                    customAlert({\r\n                        Type: 4,\r\n                        Status: true,\r\n                        Message: \"At Least One Matrial data Add in the table\",\r\n                        RedirectPath: false,\r\n                        PermissionAction: false,\r\n                    })\r\n\r\n                    return;\r\n                }\r\n                if (pageMode === mode.edit) {\r\n                    dispatch(updateBOMList({ jsonBody, updateId: `${EditData.id}/${EditData.Company}`, btnId }));\r\n                }\r\n                else {\r\n                    dispatch(saveBOMMaster({ jsonBody, btnId }));\r\n                }\r\n            }\r\n        } catch (e) { _cfunc.btnIsDissablefunc({ btnId, state: false }) }\r\n    };\r\n\r\n    if (!(userPageAccessState === '')) {\r\n        return (\r\n            <React.Fragment>\r\n                <MetaTags>{_cfunc.metaTagLabel(userPageAccessState)}</MetaTags>\r\n                <div className=\"page-content\" style={{ marginBottom: \"5cm\" }}>\r\n\r\n                    <form noValidate>\r\n                        <div className=\"px-2 c_card_filter header text-black\" >\r\n                            <div className=\" row  \">\r\n                                <Col sm=\"6\">\r\n                                    <FormGroup className=\"mb-2 row mt-2  \">\r\n                                        <Label className=\"mt-2\" style={{ width: \"115px\" }}>{fieldLabel.BomDate} </Label>\r\n                                        <Col sm=\"7\">\r\n                                            <C_DatePicker\r\n                                                name=\"BomDate\"\r\n                                                value={values.BomDate}\r\n                                                disabled={pageMode === mode.edit ? true : false}\r\n                                                onChange={(y, v, e) => { onChangeDate({ e, v, state, setState }) }}\r\n                                                onReady={(y, v, e) => { onChangeDate({ e, v, state, setState }) }}\r\n                                            />\r\n                                            {isError.BomDate.length > 0 && (\r\n                                                <span className=\"invalid-feedback\">{isError.BomDate}</span>\r\n                                            )}\r\n                                        </Col>\r\n                                    </FormGroup>\r\n                                </Col>\r\n\r\n                                <Col sm=\"6\">\r\n                                    <FormGroup className=\"mb-2 row mt-2 \">\r\n                                        <Label className=\"mt-2\" style={{ width: \"115px\" }}> {fieldLabel.ItemName} </Label>\r\n                                        <Col sm={7}>\r\n                                            <Select\r\n                                                name=\"ItemName\"\r\n                                                value={values.ItemName}\r\n                                                isSearchable={true}\r\n                                                className=\"react-dropdown\"\r\n                                                classNamePrefix=\"dropdown\"\r\n                                                options={ItemDropdown_Options}\r\n                                                onChange={(hasSelect, evn) => {\r\n                                                    onChangeSelect({ hasSelect, evn, state, setState });\r\n                                                    Items_Dropdown_Handler(hasSelect);\r\n                                                    dispatch(Breadcrumb_inputName(hasSelect.label))\r\n                                                }\r\n                                                }\r\n                                            />\r\n                                            {isError.ItemName.length > 0 && (\r\n                                                <span className=\"text-danger f-8\"><small>{isError.ItemName}</small></span>\r\n                                            )}\r\n                                        </Col>\r\n                                    </FormGroup>\r\n                                </Col>\r\n\r\n                                <Col sm=\"6\">\r\n                                    <FormGroup className=\"mb-2 row \">\r\n                                        <Label className=\"mt-2\" style={{ width: \"115px\" }} >{fieldLabel.EstimatedOutputQty} </Label>\r\n                                        <Col sm=\"7\">\r\n                                            <Input\r\n                                                style={{ textAlign: \"right\" }}\r\n                                                name=\"EstimatedOutputQty\"\r\n                                                value={values.EstimatedOutputQty}\r\n                                                type=\"text\"\r\n                                                className={isError.EstimatedOutputQty.length > 0 ? \"is-invalid form-control\" : \"form-control\"}\r\n                                                placeholder=\"Please Enter EstimatedOutputQty\"\r\n                                                autoComplete='off'\r\n                                                onChange={(event) => {\r\n                                                    onChangeText({ event, state, setState })\r\n                                                }}\r\n                                            />\r\n                                            {isError.EstimatedOutputQty.length > 0 && (\r\n                                                <span className=\"invalid-feedback\">{isError.EstimatedOutputQty}</span>\r\n                                            )}\r\n                                        </Col>\r\n                                    </FormGroup>\r\n                                </Col>\r\n\r\n                                <Col sm=\"6\">\r\n                                    <FormGroup className=\"mb-2 row  \">\r\n                                        <Label className=\"mt-2\" style={{ width: \"115px\" }}> {fieldLabel.UnitName} </Label>\r\n                                        <Col sm={7}>\r\n                                            <Select\r\n                                                name=\"UnitName\"\r\n                                                value={values.UnitName}\r\n                                                isSearchable={true}\r\n                                                className=\"react-dropdown\"\r\n                                                classNamePrefix=\"dropdown\"\r\n                                                options={pageMode === mode.edit ? ItemUnitOnEditData : ItemUnitOptions}\r\n                                                onChange={(hasSelect, evn) => onChangeSelect({ hasSelect, evn, state, setState, })}\r\n                                            />\r\n                                            {isError.UnitName.length > 0 && (\r\n                                                <span className=\"text-danger f-8\"><small>{isError.UnitName}</small></span>\r\n                                            )}\r\n                                        </Col>\r\n                                    </FormGroup>\r\n                                </Col>\r\n\r\n                                <Col sm=\"6\">\r\n                                    <FormGroup className=\"mb-2 row  \">\r\n                                        <Label className=\"mt-2\" style={{ width: \"115px\" }} >{fieldLabel.Comment} </Label>\r\n                                        <Col sm=\"7\">\r\n                                            <Input\r\n                                                name=\"Comment\"\r\n                                                value={values.Comment}\r\n                                                type=\"text\"\r\n                                                className={isError.Comment.length > 0 ? \"is-invalid form-control\" : \"form-control\"}\r\n                                                placeholder=\"Please Enter Comment\"\r\n                                                autoComplete='off'\r\n                                                onChange={(event) => {\r\n                                                    onChangeText({ event, state, setState })\r\n                                                }}\r\n                                            />\r\n                                            {isError.Comment.length > 0 && (\r\n                                                <span className=\"invalid-feedback\">{isError.Comment}</span>\r\n                                            )}\r\n                                        </Col>\r\n                                    </FormGroup>\r\n                                </Col>\r\n\r\n                                <Col sm=\"6\">\r\n                                    <FormGroup className=\" row \">\r\n                                        <Row className=\"justify-content-md-left\">\r\n                                            <Label className=\"col-sm-6 col-form-label mt-2\" style={{ width: \"115px\" }} >{fieldLabel.IsActive}</Label>\r\n                                            <Col md={7} style={{ marginTop: '10px' }} >\r\n\r\n                                                <div className=\"form-check form-switch form-switch-md mb-3\">\r\n                                                    <Input type=\"checkbox\" className=\"form-check-input\"\r\n                                                        checked={values.IsActive}\r\n                                                        name=\"IsActive\"\r\n                                                        onChange={(e) => {\r\n                                                            setState((i) => {\r\n                                                                const a = { ...i }\r\n                                                                a.values.IsActive = e.target.checked;\r\n                                                                return a\r\n                                                            })\r\n                                                        }}\r\n                                                    />\r\n                                                </div>\r\n                                            </Col>\r\n                                        </Row>\r\n                                    </FormGroup>\r\n                                </Col>\r\n\r\n                                <Col sm=\"6\">\r\n                                    <FormGroup className=\" row \">\r\n                                        <Row className=\"justify-content-md-left\">\r\n                                            <Label className=\"col-sm-6 col-form-label mt-2\" style={{ width: \"115px\" }} >IsVDCItem</Label>\r\n                                            <Col md={7} style={{ marginTop: '10px' }} >\r\n\r\n                                                <div className=\"form-check form-switch form-switch-md mb-3\">\r\n                                                    <Input type=\"checkbox\" className=\"form-check-input\"\r\n                                                        checked={values.IsVDCItem}\r\n                                                        name=\"IsVDCItem\"\r\n                                                        onChange={(e) => {\r\n                                                            setState((i) => {\r\n                                                                const a = { ...i }\r\n                                                                a.values.IsVDCItem = e.target.checked;\r\n                                                                return a\r\n                                                            })\r\n                                                        }}\r\n                                                    />\r\n                                                </div>\r\n                                            </Col>\r\n                                        </Row>\r\n                                    </FormGroup>\r\n                                </Col>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"px-2 mb-1 mt-n3\" style={{ marginRight: '-28px', marginLeft: \"-8px\" }}>\r\n                            <Row>\r\n                                <Row className=\"mt-3\">\r\n                                    <Col className=\" col col-12\">\r\n                                        <ItemTab tableData={ItemTabDetails} func={setItemTabDetails} />\r\n                                    </Col>\r\n                                </Row>\r\n\r\n                                <FormGroup>\r\n                                    <Col sm={2} style={{ marginLeft: \"9px\" }}>\r\n                                        <SaveButton\r\n                                            pageMode={pageMode}\r\n                                            onClick={SaveHandler}\r\n                                            userAcc={userPageAccessState}\r\n                                            editCreatedBy={editCreatedBy}\r\n                                            module={\"BOMMaster\"}\r\n                                        />\r\n                                    </Col>\r\n                                </FormGroup >\r\n                            </Row>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n    else {\r\n        return (\r\n            <React.Fragment></React.Fragment>\r\n        )\r\n    }\r\n};\r\n\r\nexport default BOMMaster\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Production\\BOMRedux\\saga.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Production\\WorkOrder\\saga.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Production\\Matrial_Issue\\saga.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Production\\ProductionRedux\\saga.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Inventory\\Challan\\Challan.js",["3574","3575","3576","3577","3578","3579","3580","3581","3582","3583","3584","3585","3586","3587","3588","3589","3590"],"import React, { useEffect, useState, } from \"react\";\r\nimport {\r\n    Col,\r\n    FormGroup,\r\n    Input,\r\n    Label,\r\n    Row,\r\n    Table\r\n} from \"reactstrap\";\r\nimport { MetaTags } from \"react-meta-tags\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {\r\n    comAddPageFieldFunc,\r\n    initialFiledFunc,\r\n    onChangeDate,\r\n} from \"../../../components/Common/validationFunction\";\r\nimport Select from \"react-select\";\r\nimport { Change_Button, Go_Button, SaveButton } from \"../../../components/Common/CommonButton\";\r\nimport paginationFactory, { PaginationListStandalone, PaginationProvider } from \"react-bootstrap-table2-paginator\";\r\nimport ToolkitProvider from \"react-bootstrap-table2-toolkit\";\r\nimport BootstrapTable from \"react-bootstrap-table-next\";\r\nimport { Tbody, Thead } from \"react-super-responsive-table\";\r\nimport { url, mode } from \"../../../routes/index\"\r\nimport { GetVender, } from \"../../../store/CommonAPI/SupplierRedux/actions\";\r\nimport {\r\n    challanItemForDropdown,\r\n    GoButtonForChallanAdd,\r\n    GoButtonForChallanAddSuccess,\r\n    saveChallan_ChallanAdd\r\n} from \"../../../store/Inventory/ChallanRedux/actions\";\r\nimport { customAlert } from \"../../../CustomAlert/ConfirmDialog\";\r\nimport { Amount, basicAmount, orderCalculateFunc, roundedGstAmount } from \"../../Purchase/Order/OrderPageCalulation\";\r\nimport * as _cfunc from \"../../../components/Common/CommonFunction\";\r\nimport { C_DatePicker } from \"../../../CustomValidateForm\";\r\n\r\nconst Challan = (props) => {\r\n\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n    const currentDate_ymd = _cfunc.date_ymd_func()\r\n    const subPageMode = history.location.pathname\r\n    const saveBtnid = `saveBtn${subPageMode}`\r\n\r\n    const fileds = {\r\n        ChallanDate: currentDate_ymd,\r\n        Party: \"\",\r\n        Item: ''\r\n    }\r\n\r\n    const [state, setState] = useState(() => initialFiledFunc(fileds))\r\n    const [modalCss, setModalCss] = useState(false);\r\n    const [pageMode, setPageMode] = useState(mode.defaultsave);\r\n    const [userPageAccessState, setUserAccState] = useState('');\r\n    const [showAllStockState, setShowAllStockState] = useState(true);\r\n\r\n    //Access redux store Data /  'save_ModuleSuccess' action data\r\n    const {\r\n        postMsg,\r\n        updateMsg,\r\n        pageField,\r\n        userAccess,\r\n        GoButton = [],\r\n        vender,\r\n        challanitems\r\n    } = useSelector((state) => ({\r\n        challanitems: state.ChallanReducer.challanitems,\r\n        GoButton: state.ChallanReducer.GoButton,\r\n        vender: state.CommonAPI_Reducer.vender,\r\n        postMsg: state.InvoiceReducer.postMsg,\r\n        updateMsg: state.BOMReducer.updateMsg,\r\n        userAccess: state.Login.RoleAccessUpdateData,\r\n        pageField: state.CommonPageFieldReducer.pageField,\r\n    }));\r\n\r\n    const location = { ...history.location }\r\n    const hasShowloction = location.hasOwnProperty(mode.editValue)\r\n    const hasShowModal = props.hasOwnProperty(mode.editValue)\r\n\r\n    const values = { ...state.values }\r\n    const { isError } = state;\r\n    const { fieldLabel } = state;\r\n\r\n    // userAccess useEffect\r\n    useEffect(() => {\r\n        let userAcc = null;\r\n        let locationPath = location.pathname;\r\n\r\n        if (hasShowModal) {\r\n            locationPath = props.masterPath;\r\n        };\r\n\r\n        userAcc = userAccess.find((inx) => {\r\n            return (`/${inx.ActualPagePath}` === locationPath)\r\n        })\r\n\r\n        if (userAcc) {\r\n            setUserAccState(userAcc)\r\n            _cfunc.breadcrumbReturnFunc({ dispatch, userAcc });\r\n\r\n        };\r\n    }, [userAccess])\r\n\r\n    // This UseEffect 'SetEdit' data and 'autoFocus' while this Component load First Time.\r\n    useEffect(() => {\r\n        if ((hasShowloction || hasShowModal)) {\r\n\r\n            let hasEditVal = null\r\n            if (hasShowloction) {\r\n                setPageMode(location.pageMode)\r\n                hasEditVal = location.editValue\r\n            }\r\n            else if (hasShowModal) {\r\n\r\n                hasEditVal = props.editValue\r\n                setPageMode(props.pageMode)\r\n                setModalCss(true)\r\n            }\r\n\r\n            if (hasEditVal) {\r\n\r\n                const { Customer, CustomerName, } = hasEditVal\r\n                const { values, hasValid, } = { ...state }\r\n                hasValid.Customer.valid = true;\r\n                values.Customer = { label: CustomerName, value: Customer };\r\n            }\r\n        }\r\n    }, []);\r\n\r\n    useEffect(async () => {\r\n\r\n        if ((postMsg.Status === true) && (postMsg.StatusCode === 200)) {\r\n\r\n            if (pageMode === mode.dropdownAdd) {\r\n                customAlert({\r\n                    Type: 1,\r\n                    Message: postMsg.Message,\r\n                })\r\n            }\r\n            else {\r\n                let isPermission = await customAlert({\r\n                    Type: 1,\r\n                    Status: true,\r\n                    Message: postMsg.Message,\r\n                })\r\n                if (isPermission) {\r\n                    history.push({ pathname: url.IN })\r\n                }\r\n            }\r\n        }\r\n        else if (postMsg.Status === true) {\r\n            customAlert({\r\n                Type: 4,\r\n                 Message: JSON.stringify(postMsg.Message),\r\n            })\r\n        }\r\n    }, [postMsg])\r\n\r\n    useEffect(() => {\r\n\r\n        if ((updateMsg.Status === true) && (updateMsg.StatusCode === 200) && !(modalCss)) {\r\n            history.push({\r\n                pathname: url.MATERIAL_ISSUE_LIST,\r\n            })\r\n        } else if (updateMsg.Status === true && !modalCss) {\r\n             customAlert({\r\n                Type: 3,\r\n                Message: JSON.stringify(updateMsg.Message),\r\n            })\r\n        }\r\n    }, [updateMsg, modalCss]);\r\n\r\n    useEffect(() => {\r\n        const jsonBody = JSON.stringify({\r\n            Company: _cfunc.loginCompanyID()\r\n        });\r\n        dispatch(challanItemForDropdown(jsonBody))\r\n        dispatch(GetVender())\r\n        dispatch(GoButtonForChallanAddSuccess([]))\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (pageField) {\r\n            const fieldArr = pageField.PageFieldMaster\r\n            comAddPageFieldFunc({ state, setState, fieldArr })\r\n        }\r\n    }, [pageField])\r\n\r\n    useEffect(() => {\r\n        if (pageField) {\r\n            const fieldArr = pageField.PageFieldMaster\r\n            comAddPageFieldFunc({ state, setState, fieldArr })\r\n        }\r\n    }, [pageField]);\r\n\r\n    useEffect(() => _cfunc.tableInputArrowUpDounFunc(\"#table_Arrow\"), [GoButton]);\r\n\r\n    const venderOptions = vender.map((i) => ({\r\n        value: i.id,\r\n        label: i.Name,\r\n    }));\r\n    const ItemsOption = challanitems.map((i) => ({\r\n        value: i.id,\r\n        label: i.Name,\r\n    }));\r\n\r\n    const pagesListColumns = [\r\n\r\n        {//***************ItemName********************************************************************* */\r\n            text: \"Item Name\",\r\n            dataField: \"ItemName\",\r\n            headerFormatter: (cell, index1 = [], k) => {\r\n                return (\r\n                    <div className=\"width-100\">Item Name</div>)\r\n            },\r\n            formatter: (cellContent, index1) => {\r\n\r\n                return (\r\n                    <>\r\n                        <div><samp id={`ItemName${index1.id}`}>{values.Item.label}</samp></div>\r\n                        {(index1.StockInValid) ? <div><samp id={`StockInvalidMsg${index1.id}`} style={{ color: \"red\" }}> {index1.StockInvalidMsg}</samp></div>\r\n                            : <></>}\r\n                    </>\r\n                )\r\n            },\r\n\r\n        },\r\n        {//***************Quantity********************************************************************* */\r\n            text: \"Quantity\",\r\n            dataField: \"\",\r\n            headerFormatter: (cell, index1 = [], k) => {\r\n                return (\r\n                    <div className=\"width-60\">Quantity</div>)\r\n            },\r\n            formatter: (cellContent, user) => (\r\n                <div >\r\n                    <Input type=\"text\"\r\n                        style={{ textAlign: \"right\" }}\r\n                        placeholder=\"Enter Quantity\"\r\n                        onChange={(event) => orderQtyOnChange(event, user)}\r\n                    ></Input>\r\n                </div>\r\n\r\n            )\r\n        },\r\n\r\n        {//***************StockDetails********************************************************************* */\r\n\r\n            text: \"Stock Details\",\r\n            dataField: \"StockDetails\",\r\n            headerFormatter: (cell, index1 = [], k) => {\r\n\r\n                return (\r\n                    <div className=\"d-flex flex-content-start\">\r\n                        <div style={{ paddingLeft: \"1px\", paddingTop: \"1px\" }}>\r\n                            <samp > Stock Details</samp>\r\n                        </div>\r\n\r\n                    </div>\r\n                )\r\n            },\r\n\r\n            formatter: (cellContent, index1) => (\r\n\r\n                <div>\r\n                    <div key={`plus-circle-icon${index1.id}`}>\r\n                        {\r\n                            (index1.StockTotal > 0) ?\r\n                                <>\r\n                                    <samp key={`plus-circle${index1.id}`} id={`plus-circle${index1.id}`}\r\n                                        style={{\r\n                                            display: showAllStockState ? \"none\" : \"block\"\r\n                                        }}\r\n                                    >\r\n                                        <samp style={{ fontWeight: \"bold\", textShadow: 1, marginLeft: \"20px\" }}>\r\n                                            {`Total Stock:${index1.StockTotal}`}</samp>\r\n                                    </samp>\r\n                                </>\r\n                                : <samp style={{ fontWeight: \"bold\", textShadow: 1, }}>{ }</samp>\r\n                        }\r\n                    </div >\r\n                    <Table className=\"table table-bordered table-responsive mb-1\" >\r\n                        <Thead  >\r\n                            <tr className=\"\" style={{ zIndex: -3 }}>\r\n                                <th className=\"\">SystemBatchCode </th>\r\n                                <th className=\"\" >BatchCode</th>\r\n                                <th className=\"\" >Batch Date</th>\r\n                                <th className=\"\">\r\n                                    <div>\r\n                                        <samp >Quantity</samp>\r\n                                    </div>\r\n                                </th>\r\n                                <th className=\"\" >\r\n                                    <div>\r\n                                        <samp >Rate</samp>\r\n                                    </div>\r\n                                </th>\r\n                            </tr>\r\n\r\n                        </Thead>\r\n                        <Tbody  >\r\n                            {cellContent.map((index1) => {\r\n                                return (\r\n                                    < tr  >\r\n                                        <td>\r\n                                            <div style={{ width: \"150px\" }}>\r\n                                                {index1.SystemBatchCode}\r\n                                            </div>\r\n                                        </td>\r\n                                        <td>\r\n                                            <div style={{ width: \"150px\" }}>\r\n                                                {index1.BatchCode}\r\n                                            </div>\r\n                                        </td>\r\n                                        <td>\r\n                                            <div style={{ width: \"100px\" }}>\r\n                                                {_cfunc.date_dmy_func(index1.BatchDate)}\r\n                                            </div>\r\n                                        </td>\r\n                                        <td>\r\n                                            <div style={{ width: \"120px\", textAlign: \"right\" }}>\r\n                                                {`${index1.BaseUnitQuantity} `}\r\n                                            </div>\r\n                                        </td>\r\n\r\n                                        <td>\r\n                                            <div style={{ width: \"120px\", textAlign: \"right\" }}>\r\n                                                {`${index1.Rate} `}\r\n                                            </div>\r\n                                        </td>\r\n                                    </tr>\r\n                                )\r\n                            })}\r\n                        </Tbody>\r\n                    </Table></div>\r\n            ),\r\n        },\r\n    ];\r\n\r\n    const pageOptions = {\r\n        sizePerPage: 10,\r\n        custom: true,\r\n    };\r\n\r\n\r\n    function ChallanDateOnchange(y, v, e) {\r\n        onChangeDate({ e, v, state, setState })\r\n    };\r\n\r\n    function partyOnChange(hasSelect, evn) {\r\n        setState((i) => {\r\n            const v1 = { ...i }\r\n            v1.values.Party = hasSelect\r\n            v1.hasValid.Party.valid = true\r\n            return v1\r\n        })\r\n        dispatch(GoButtonForChallanAddSuccess([]))\r\n    };\r\n    function itemOnChange(hasSelect, evn) {\r\n\r\n        setState((i) => {\r\n            const v1 = { ...i }\r\n            v1.values.Item = hasSelect\r\n            v1.hasValid.Item.valid = true\r\n            return v1\r\n        })\r\n        dispatch(GoButtonForChallanAddSuccess([]))\r\n    };\r\n\r\n    function stockDistributeFunc(index) {\r\n\r\n        const v1 = index.Quantity;\r\n        let orderqty = Number(v1) * Number(index.ConversionUnit);\r\n\r\n        index.StockDetails = index.StockDetails.map(i2 => {\r\n\r\n            let stockqty = Number(i2.BaseUnitQuantity);\r\n\r\n            if ((orderqty > stockqty) && !(orderqty === 0)) {\r\n                orderqty = orderqty - stockqty\r\n                i2.Qty = stockqty.toFixed(3)\r\n            } else if ((orderqty <= stockqty) && (orderqty > 0)) {\r\n                i2.Qty = orderqty.toFixed(3)\r\n                orderqty = 0\r\n            }\r\n            else {\r\n                i2.Qty = 0;\r\n            }\r\n            try {\r\n                document.getElementById(`batchQty${index.id}-${i2.id}`).value = i2.Qty\r\n            } catch (e) { }\r\n            return i2\r\n        });\r\n\r\n        const t1 = (v1 * index.ConversionUnit);\r\n        const t2 = index.StockUnit;\r\n        const t3 = index.StockTotal;\r\n\r\n        if (t1 > t3) {\r\n            try {\r\n                document.getElementById(`OrderQty${index.id}`).value = t3.toFixed(3)\r\n            } catch (e) { }\r\n        };\r\n        try {\r\n            index.StockInValid = false\r\n            index.StockInvalidMsg = null\r\n            document.getElementById(`StockInvalidMsg${index.id}`).style.display = \"none\";\r\n        } catch (e) { };\r\n        try {\r\n            document.getElementById(`stocktotal${index.id}`).innerText = `Total:${t1} ${t2}`\r\n        } catch (e) { };\r\n\r\n    };\r\n\r\n    function orderQtyOnChange(event, index) {\r\n\r\n        let input = event.target.value\r\n        let result = /^\\d*(\\.\\d{0,3})?$/.test(input);\r\n\r\n        setState((i) => {\r\n            const v1 = { ...i }\r\n            v1.values.Quantity = input\r\n            return v1\r\n        })\r\n        stockDistributeFunc(index)\r\n    };\r\n\r\n    function goButtonHandler(event) {\r\n\r\n        const validMsg = []\r\n        if (!(values.Item.value)) {\r\n            validMsg.push({ Item: \"Please Select Item\" })\r\n        };\r\n        if (!(values.Party.value)) {\r\n            validMsg.push({ Party: \"Please Select Party\" })\r\n        };\r\n        if (validMsg.length > 0) {\r\n            customAlert({\r\n                Type: 3,\r\n                Message: validMsg\r\n            })\r\n            return\r\n        } else {\r\n            const jsonBody = JSON.stringify({\r\n                Party: _cfunc.loginPartyID(),\r\n                Item: values.Item.value\r\n            });\r\n            dispatch(GoButtonForChallanAdd(jsonBody));\r\n        }\r\n    };\r\n\r\n    const saveHandeller = (e,) => {\r\n        const itemArr = []\r\n        let grand_total = 0;\r\n\r\n        const isvalidMsg = [];\r\n\r\n        GoButton[0].StockDetails.forEach(i => {\r\n            i[\"Quantity\"] = values.Quantity\r\n\r\n            const calculate = orderCalculateFunc(i)// amount calculation function \r\n\r\n            grand_total = grand_total + Number(calculate.roundedTotalAmount)\r\n            const arr = {\r\n                Item: values.Item.value,\r\n                Quantity: values.Quantity,\r\n                Unit: i.UnitName.id,\r\n                BaseUnitQuantity: i.BaseUnitQuantity,\r\n                MRP: i.MRP,\r\n                ReferenceRate: \"100.00\",\r\n                Rate: i.Rate,\r\n                BasicAmount: calculate.basicAmount,\r\n                TaxType: \"GST\",\r\n                GST: i.GST,\r\n                GSTPercentage: i.GSTPercentage,\r\n                HSNCode: i.HSNCode,\r\n                GSTAmount: calculate.roundedGstAmount,\r\n                Amount: calculate.roundedTotalAmount,\r\n                DiscountType: \"0\",\r\n                Discount: \"0.00\",\r\n                DiscountAmount: \"0.00\",\r\n                CGST: calculate.CGST_Amount,\r\n                SGST: calculate.SGST_Amount,\r\n                IGST: 0,\r\n                CGSTPercentage: (i.GSTPercentage / 2),\r\n                SGSTPercentage: (i.GSTPercentage / 2),\r\n                IGSTPercentage: 0,\r\n                BatchDate: i.BatchDate,\r\n                BatchCode: i.BatchCode,\r\n                SystemBatchDate: i.SystemBatchDate,\r\n                SystemBatchCode: i.SystemBatchCode,\r\n                BatchID: i.id,\r\n            }\r\n            if ((i.GSTPercentage > 0)) {\r\n                itemArr.push(arr)\r\n            }\r\n\r\n        })\r\n\r\n        if (isvalidMsg.length > 0) {\r\n            customAlert({\r\n                Type: 3,\r\n                Message: isvalidMsg,\r\n            })\r\n            return\r\n        }\r\n        const jsonBody = JSON.stringify({\r\n            GRN: \"\",\r\n            ChallanDate: values.ChallanDate,\r\n            Party: _cfunc.loginPartyID(),\r\n            GrandTotal: grand_total,\r\n            Customer: values.Party.value,\r\n            CreatedBy: _cfunc.loginUserID(),\r\n            UpdatedBy: _cfunc.loginUserID(),\r\n            RoundOffAmount: Math.round(grand_total),\r\n            ChallanItems: itemArr,\r\n\r\n        });\r\n\r\n        dispatch(saveChallan_ChallanAdd(jsonBody))\r\n    }\r\n\r\n    if (!(userPageAccessState === '')) {\r\n        return (\r\n            <React.Fragment>\r\n                <MetaTags>{_cfunc.metaTagLabel(userPageAccessState)}</MetaTags>\r\n\r\n                <div className=\"page-content\" >\r\n\r\n                    <form noValidate>\r\n                        <Col className=\"px-2 mb-1 c_card_filter header text-black\" sm={12}>\r\n                            <Row>\r\n                                <Col className=\" mt-1 row \" sm={12} >\r\n                                    <Col sm={3}>\r\n                                        <FormGroup className=\"row mt-2 mb-3  \">\r\n                                            <Label className=\"mt-1\" style={{ width: \"110px\" }}>Challan Date </Label>\r\n                                            <Col sm={7}>\r\n                                                <C_DatePicker\r\n                                                    name=\"ChallanDate\"\r\n                                                    value={values.ChallanDate}\r\n                                                    id=\"myInput11\"\r\n                                                    disabled={(GoButton.length > 0 || pageMode === \"edit\") ? true : false}\r\n                                                    onChange={ChallanDateOnchange}\r\n                                                />\r\n                                                {isError.ChallanDate.length > 0 && (\r\n                                                    <span className=\"invalid-feedback\">{isError.ChallanDate}</span>\r\n                                                )}\r\n                                            </Col>\r\n                                        </FormGroup>\r\n                                    </Col>\r\n\r\n                                    <Col sm={3}>\r\n                                        <FormGroup className=\"row mt-2 mb-3 \">\r\n                                            <Label className=\"mt-2\" style={{ width: \"80px\" }}> Party </Label>\r\n                                            <Col sm={8}>\r\n                                                <Select\r\n                                                    name=\"Customer\"\r\n                                                    value={values.Party}\r\n                                                    isSearchable={true}\r\n                                                    isDisabled={GoButton.length > 0 ? true : false}\r\n                                                    id={'customerselect'}\r\n                                                    className=\"react-dropdown\"\r\n                                                    classNamePrefix=\"dropdown\"\r\n                                                    options={venderOptions}\r\n                                                    onChange={partyOnChange}\r\n                                                />\r\n                                                {isError.Party.length > 0 && (\r\n                                                    <span className=\"text-danger f-8\"><small>{isError.Party}</small></span>\r\n                                                )}\r\n                                            </Col>\r\n                                        </FormGroup>\r\n                                    </Col >\r\n                                    <Col sm={3}>\r\n                                        <FormGroup className=\"row mt-2 mb-3 \">\r\n                                            <Label className=\"mt-2\" style={{ width: \"80px\" }}> Item </Label>\r\n                                            <Col sm={8} >\r\n                                                <Select\r\n                                                    name=\"Item\"\r\n                                                    value={values.Item}\r\n                                                    isSearchable={true}\r\n                                                    id={'customerselect'}\r\n                                                    className=\"react-dropdown\"\r\n                                                    classNamePrefix=\"dropdown\"\r\n                                                    options={ItemsOption}\r\n                                                    onChange={itemOnChange}\r\n\r\n                                                />\r\n                                                {isError.Item.length > 0 && (\r\n                                                    <span className=\"text-danger f-8\"><small>{isError.Item}</small></span>\r\n                                                )}\r\n                                            </Col>\r\n                                        </FormGroup>\r\n                                    </Col >\r\n                                    <Col sm={2} className=\"mt-2\">\r\n                                        {pageMode === mode.defaultsave ?\r\n                                            (GoButton.length === 0) ?\r\n                                                < Go_Button onClick={(e) => goButtonHandler()} />\r\n                                                :\r\n                                                <Change_Button onClick={(e) => dispatch(GoButtonForChallanAddSuccess([]))} />\r\n                                            : null\r\n                                        }\r\n                                    </Col>\r\n                                </Col>\r\n                            </Row>\r\n                        </Col>\r\n                        <PaginationProvider pagination={paginationFactory(pageOptions)}>\r\n                            {({ paginationProps, paginationTableProps }) => (\r\n                                <ToolkitProvider\r\n                                    keyField={\"id\"}\r\n                                    data={GoButton}\r\n                                    columns={pagesListColumns}\r\n                                    search\r\n                                >\r\n                                    {(toolkitProps) => (\r\n                                        <React.Fragment>\r\n                                            <Row>\r\n                                                <Col xl=\"12\">\r\n                                                    <div className=\"table-responsive\">\r\n                                                        <BootstrapTable\r\n                                                            keyField={\"id\"}\r\n                                                            id=\"table_Arrow\"\r\n                                                            responsive\r\n                                                            bordered={false}\r\n                                                            striped={false}\r\n                                                            classes={\"table  table-bordered\"}\r\n                                                            noDataIndication={\r\n                                                                <div className=\"text-danger text-center \">\r\n                                                                    Items Not available\r\n                                                                </div>\r\n                                                            }\r\n                                                            {...toolkitProps.baseProps}\r\n                                                            {...paginationTableProps}\r\n                                                        />\r\n                                                    </div>\r\n                                                </Col>\r\n                                            </Row>\r\n                                            <Row className=\"align-items-md-center mt-30\">\r\n                                                <Col className=\"pagination pagination-rounded justify-content-end mb-2\">\r\n                                                    <PaginationListStandalone {...paginationProps} />\r\n                                                </Col>\r\n                                            </Row>\r\n                                        </React.Fragment>\r\n                                    )}\r\n                                </ToolkitProvider>\r\n                            )}\r\n\r\n                        </PaginationProvider>\r\n\r\n                        {GoButton.length > 0 ? <FormGroup>\r\n                            <Col sm={2} style={{ marginLeft: \"-40px\" }} className={\"row save1\"}>\r\n                                <SaveButton pageMode={pageMode}\r\n                                    onClick={saveHandeller}\r\n                                    id={saveBtnid}\r\n                                    userAcc={userPageAccessState}\r\n                                />\r\n                            </Col>\r\n                        </FormGroup > : null}\r\n                    </form>\r\n                </div>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n    else {\r\n        return (\r\n            <React.Fragment></React.Fragment>\r\n        )\r\n    }\r\n};\r\n\r\nexport default Challan;\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Inventory\\GRNRedux\\saga.js",["3591"],"import { call, put, takeLatest } from \"redux-saga/effects\";\r\nimport {\r\n  GrnApiErrorAction,\r\n  deleteGRNIdSuccess,\r\n  editGRNIdSuccess,\r\n  getGRNListPageSuccess,\r\n  hideInvoiceForGRFActionSuccess,\r\n  makeGRN_Mode_1ActionSuccess,\r\n  saveGRNSuccess,\r\n  updateGRNIdSuccess,\r\n} from \"./actions\";\r\nimport {\r\n  GRN_delete_API,\r\n  GRN_Edit_API,\r\n  GRN_get_API, GRN_Make_API, GRN_Post_API,\r\n  GRN_update_API,\r\n  Hide_Invoice_For_GRN_API,\r\n} from \"../../../helpers/backend_helper\";\r\nimport {\r\n  DELETE_GRN_FOR_GRN_PAGE,\r\n  EDIT_GRN_FOR_GRN_PAGE,\r\n  MAKE_GRN_MODE_1_ACTION,\r\n  GET_GRN_LIST_PAGE,\r\n  SAVE_GRN_FROM_GRN_PAGE_ACTION,\r\n  UPDATE_GRN_ID_FROM_GRN_PAGE,\r\n  HIDE_INVOICE_FOR_GRN_ACTION,\r\n} from \"./actionType\";\r\nimport * as _cfunc from \"../../../components/Common/CommonFunction\";\r\nimport { url } from \"../../../routes\";\r\n\r\nfunction* saveGRNGenFunc({ config }) {            // Save GRN  genrator function\r\n  try {\r\n    const response = yield call(GRN_Post_API, config);\r\n    yield put(saveGRNSuccess(response));\r\n  } catch (error) { yield put(GrnApiErrorAction()) }\r\n}\r\n\r\n\r\nfunction* DeleteGRNGenFunc({ config }) {            // Delete GRN  genrator function\r\n  try {\r\n    const response = yield call(GRN_delete_API, config);\r\n    yield put(deleteGRNIdSuccess(response));\r\n  } catch (error) { yield put(GrnApiErrorAction()) }\r\n}\r\n\r\nfunction* Edit_GRN_GenratorFunction({ config }) { // Edit  GRN  genrator function\r\n  try {\r\n    const { btnmode } = config;\r\n    const response = yield call(GRN_Edit_API, config);\r\n    response.pageMode = btnmode\r\n    response.Data = response.Data[0];\r\n    yield put(editGRNIdSuccess(response));\r\n  } catch (error) { yield put(GrnApiErrorAction()) }\r\n}\r\n\r\nfunction* UpdateGRNGenFunc({ config }) {             // Upadte GRN  genrator function\r\n  try {\r\n    const response = yield call(GRN_update_API, config);\r\n    yield put(updateGRNIdSuccess(response))\r\n  } catch (error) { yield put(GrnApiErrorAction()) }\r\n}\r\n\r\nfunction* GRNListfilterGerFunc({ config }) {          // Grn_List filter  genrator function\r\n  try {\r\n    const response = yield call(GRN_get_API, config);\r\n    const newList = yield response.Data.map((i) => {\r\n      i[\"recordsAmountTotal\"] = i.GrandTotal;  // Breadcrumb Count total\r\n      i.GrandTotal = _cfunc.amountCommaSeparateFunc(i.GrandTotal) //  GrandTotal show with commas\r\n\r\n      //tranzaction date is only for fiterand page field but UI show transactionDateLabel\r\n      i[\"transactionDate\"] = i.CreatedOn;\r\n      i[\"transactionDateLabel\"] = _cfunc.listpageConcatDateAndTime(i.GRNDate, i.CreatedOn);\r\n      return i\r\n    })\r\n    yield put(getGRNListPageSuccess(newList))\r\n  } catch (error) { yield put(GrnApiErrorAction()) }\r\n}\r\n\r\nfunction* HideInvoiceForGRNGenFunc({ config }) {             // Upadte GRN  genrator function\r\n  try {\r\n    const response = yield call(Hide_Invoice_For_GRN_API, config);\r\n    yield put(hideInvoiceForGRFActionSuccess(response))\r\n  } catch (error) { yield put(GrnApiErrorAction()) }\r\n}\r\n\r\nfunction* makeGRN_Mode1_GenFunc({ config }) {\r\n  // Make_GRN Items  genrator function\r\n  \r\n  const { pageMode = '', path = '', grnRef = [], challanNo = '' } = config\r\n  try {\r\n    const response = yield call(GRN_Make_API, config);\r\n\r\n\r\n      response.Data.OrderItem.forEach(index => {\r\n\r\n        index[\"GSToption\"] = index.GSTDropdown.map(i => ({ value: i.GST, label: i.GSTPercentage, }));\r\n        index[\"MRPOps\"] = index.MRPDetails.map(i => ({ label: i.MRPValue, value: i.MRP }));\r\n        const deFaultValue = index[\"MRPOps\"].reduce((maxObj, obj) => {\r\n          return obj.value > maxObj.value ? obj : maxObj;\r\n        }, { value: -Infinity });\r\n\r\n        index[\"MRPValue\"] = deFaultValue?.label;\r\n        index[\"MRP\"] = deFaultValue?.value;\r\n\r\n        if (index.GST === null) {\r\n          const deFaultValue = index.GSTDropdown.filter(i => i.GSTPercentage === index.GSTPercentage);\r\n          index[\"GSTPercentage\"] = deFaultValue[0]?.GSTPercentage\r\n          index[\"GST\"] = deFaultValue[0]?.GST;\r\n\r\n        } else {\r\n          const deFaultValue = index.GSTDropdown.filter(i => i.GST === index.GST);\r\n          index[\"GSTPercentage\"] = deFaultValue[0]?.GSTPercentage;\r\n          index[\"GST\"] = deFaultValue[0]?.GST;\r\n        }\r\n\r\n      })\r\n\r\n      response.Data.OrderItem.sort(function (a, b) {\r\n        if (a.Item > b.Item) { return 1; }\r\n        else if (a.Item < b.Item) { return -1; }\r\n        return 0;\r\n      });\r\n\r\n  \r\n    response[\"pageMode\"] = pageMode;\r\n    response[\"path\"] = path; //Pagepath\r\n    response.Data[\"GRNReferences\"] = grnRef;\r\n    response.Data[\"challanNo\"] = challanNo;\r\n    yield put(makeGRN_Mode_1ActionSuccess(response))\r\n\r\n  } catch (error) { yield put(GrnApiErrorAction()) }\r\n}\r\n// \r\n\r\nfunction* GRNSaga() {\r\n\r\n  yield takeLatest(HIDE_INVOICE_FOR_GRN_ACTION, HideInvoiceForGRNGenFunc);\r\n  yield takeLatest(MAKE_GRN_MODE_1_ACTION, makeGRN_Mode1_GenFunc);\r\n  yield takeLatest(SAVE_GRN_FROM_GRN_PAGE_ACTION, saveGRNGenFunc);\r\n  yield takeLatest(EDIT_GRN_FOR_GRN_PAGE, Edit_GRN_GenratorFunction);\r\n  yield takeLatest(UPDATE_GRN_ID_FROM_GRN_PAGE, UpdateGRNGenFunc)\r\n  yield takeLatest(DELETE_GRN_FOR_GRN_PAGE, DeleteGRNGenFunc);\r\n  yield takeLatest(GET_GRN_LIST_PAGE, GRNListfilterGerFunc);\r\n}\r\n\r\nexport default GRNSaga;\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Inventory\\GRNRedux\\reducer.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Production\\ProductionRedux\\reducer.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Production\\WorkOrder\\reducer.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Production\\Matrial_Issue\\reducer.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Production\\BOMRedux\\reducer.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Production\\BOMRedux\\action.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Inventory\\GRNRedux\\actions.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Production\\BOMRedux\\actionTypes.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Production\\BOM\\BOMMaster\\ItemQuantityTab\\index.js",["3592","3593"],"import React, { useEffect, useState } from 'react';\r\nimport {\r\n    Button,\r\n    Card,\r\n    CardBody,\r\n    Col,\r\n    FormGroup,\r\n    Input,\r\n    Label,\r\n    Row\r\n} from 'reactstrap';\r\nimport Select from \"react-select\";\r\nimport {  getBaseUnit_ForDropDown, getItemList } from '../../../../../store/actions';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport BOMTable from './Table';\r\nimport { customAlert } from '../../../../../CustomAlert/ConfirmDialog';\r\n\r\nfunction ItemTab(props) {\r\n\r\n    const dispatch = useDispatch();\r\n    const [contentItemSelect, setContentItemSelect] = useState('');\r\n    const [Quantity, setQuantity] = useState('');\r\n    const [unitSelect, setUnitSelect] = useState('');\r\n    const [ItemUnitOptions, setItemUnitOptions] = useState([]);\r\n\r\n    const { Items } = useSelector((state) => ({\r\n        Items: state.ItemMastersReducer.ItemList,\r\n    }));\r\n\r\n    useEffect(() => {\r\n        dispatch(getItemList())\r\n        dispatch(getBaseUnit_ForDropDown());\r\n    }, [dispatch]);\r\n\r\n    const ItemDropdown_Options = Items.map((index) => ({\r\n        value: index.id,\r\n        label: index.Name,\r\n    }));\r\n\r\n    function ContentItem_Handler(e) {\r\n        \r\n        setUnitSelect('')\r\n        setContentItemSelect(e)\r\n        let Item = Items.filter((index) => {\r\n            return index.id === e.value\r\n        })\r\n        let ItemUnits = Item[0].UnitDetails.map((data) => ({\r\n            value: data.id,\r\n            label: data.UnitName\r\n        }))\r\n        setItemUnitOptions(ItemUnits)\r\n\r\n    }\r\n\r\n    const Unit_Handler = (event) => {\r\n        setUnitSelect(event);\r\n    };\r\n    const addRowsHandler = (data) => {\r\n        const invalidMsg1 = []\r\n\r\n        if ((contentItemSelect === \"\")) {\r\n            invalidMsg1.push(`Content Item Is Required`)\r\n        }\r\n        if (Quantity === \"\") {\r\n            invalidMsg1.push(`Item Quantity Is Required`)\r\n        };\r\n        if ((unitSelect === \"\")) {\r\n            invalidMsg1.push(`Unit Is Required`)\r\n        };\r\n        \r\n        if ((contentItemSelect === \"\")\r\n            || (unitSelect === \"\")\r\n            || (Quantity === \"\")\r\n        ) {\r\n\r\n                customAlert({\r\n                    Type: 4,\r\n                    Status: true,\r\n                    Message: JSON.stringify(invalidMsg1),\r\n                    RedirectPath: false,\r\n                    PermissionAction: false,\r\n                })\r\n            \r\n            return;\r\n        }\r\n        const val = {\r\n            Item: contentItemSelect.value,\r\n            ItemName: contentItemSelect.label,\r\n            Unit: unitSelect.value,\r\n            UnitName: unitSelect.label,\r\n            Quantity: Quantity,\r\n        };\r\n\r\n\r\n        const totalTableData = props.tableData.length;\r\n        val.id = totalTableData + 1;\r\n        const updatedTableData = [...props.tableData];\r\n        updatedTableData.push(val);\r\n        props.func(updatedTableData)\r\n        clearState();\r\n\r\n\r\n\r\n    }\r\n    const clearState = () => {\r\n        setContentItemSelect('');\r\n        setQuantity('');\r\n        setUnitSelect('');\r\n    };\r\n\r\n    const handleChange = event => {\r\n        \r\n        let val = event.target.value\r\n        const result = /^-?([0-9]*\\.?[0-9]+|[0-9]+\\.?[0-9]*)$/.test(val);\r\n        if (result) {\r\n            setQuantity(val);\r\n        }\r\n        else if (val === \"\") {\r\n            setQuantity(val)\r\n        }\r\n        else {\r\n            event.target.value = \"\"\r\n        }\r\n    };\r\n\r\n\r\n    return (\r\n        <Row>\r\n            <Col  >\r\n\r\n                <div className=\"px-2  mb-1 c_card_body text-black mt-1\" style={{ width: \"100%\" }}>\r\n                    <div className=\"row\">\r\n                        <div className=\" row\">\r\n                            <Col sm=\"3\" >\r\n                                <FormGroup className=\" row mt-3 \" >\r\n                                    <Label className=\"col-sm-4 p-2\"\r\n                                    >Content Item</Label>\r\n                                    <Col sm=\"7\">\r\n                                        <Select\r\n                                            value={contentItemSelect}\r\n                                            options={ItemDropdown_Options}\r\n                                            onChange={ContentItem_Handler}\r\n                                        />\r\n                                    </Col>\r\n                                </FormGroup>\r\n                            </Col>\r\n\r\n                            <Col sm=\"3\" >\r\n                                <FormGroup className=\" row mt-3 \" >\r\n                                    <Label className=\"col-sm-4 p-2\"\r\n                                    >Item Quantity</Label>\r\n                                    <Col sm=\"7\">\r\n                                        <Input\r\n                                            type=\"text\"\r\n                                            className='text-end'\r\n                                            value={Quantity}\r\n                                            placeholder=\"Please Enter Quantity\"\r\n                                            autoComplete=\"off\"\r\n                                            onChange={handleChange}\r\n                                        />\r\n                                    </Col>\r\n                                </FormGroup>\r\n                            </Col>\r\n\r\n                            <Col sm=\"3\" className=\"\">\r\n                                <FormGroup className=\"mb- row mt-3 \" >\r\n                                    <Label className=\"col-sm-2 p-2\"\r\n                                    >Unit</Label>\r\n                                    <Col sm=\"7\">\r\n                                        <Select\r\n                                            value={unitSelect}\r\n                                            options={ItemUnitOptions}\r\n                                            onChange={Unit_Handler}\r\n                                        />\r\n                                    </Col>\r\n                                </FormGroup>\r\n                            </Col>\r\n\r\n                            <Col sm=\"1\" className=\"mt-3 \">\r\n                                <Button type=\"button\" color=\"btn btn-outline-primary border-1 font-size-11 text-center\"\r\n                                    onClick={addRowsHandler}\r\n                                >        <i className=\"dripicons-plus pt-2 \"> </i>Add</Button>\r\n                            </Col>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <Row>\r\n                    <BOMTable tableData={props.tableData} func={props.func} />\r\n                </Row>\r\n            </Col>\r\n        </Row>\r\n    );\r\n}\r\nexport default ItemTab;\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Production\\WorkOrder\\action.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Production\\ProductionRedux\\actions.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Production\\Matrial_Issue\\action.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Production\\WorkOrder\\actionTypes.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Production\\ProductionRedux\\actionType.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Production\\Matrial_Issue\\actionType.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Inventory\\GRNRedux\\actionType.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Production\\BOM\\BOMMaster\\ItemQuantityTab\\Table.js",["3594","3595","3596"],"import React, { useEffect, useState } from 'react';\r\nimport { Button, Col, Input, Table, } from 'reactstrap';\r\nimport { Tbody, Thead } from 'react-super-responsive-table';\r\n\r\nfunction BOMTable(props) {\r\n\r\n  const onDeleteHandeler = (ele) => {\r\n\r\n    if (!(ele === 0)) {\r\n      var fil = props.tableData.filter((i) => {\r\n        return !(i.id === ele.id);\r\n      });\r\n      props.func(fil);\r\n    }\r\n  };\r\n\r\n  const handleChange = (event, info) => {\r\n \r\n    // let val = event.target.value\r\n    // const result = /^-?([0-9]*\\.?[0-9]+|[0-9]+\\.?[0-9]*)$/.test(val);\r\n    // if (result) {\r\n    //     setQuantity(val);\r\n    // }\r\n    // else if (val === \"\") {\r\n    //     setQuantity(val)\r\n    // }\r\n    // else {\r\n    //     event.target.value = \"\"\r\n    // }\r\n    let val = event.target.value\r\n    const result = /^-?([0-9]*\\.?[0-9]+|[0-9]+\\.?[0-9]*)$/.test(val);\r\n    if (result) {\r\n      info.Quantity = event.target.value;\r\n    }\r\n    else if (val === \"\") {\r\n      info.Quantity = event.target.value;\r\n    }\r\n    else {\r\n      event.target.value = info.Quantity\r\n    }\r\n  };\r\n\r\n  const tableRows = props.tableData.map((info, key) => {\r\n\r\n    return (\r\n      <tr>\r\n        <td>{info.ItemName}</td>\r\n        <td>\r\n          <div className='text-center' style={{ width: \"150px\" }}>\r\n            <Input type=\"text\"\r\n              key={info.id}\r\n              style={{ width: '140px', textAlign: 'center' }}\r\n              className=\"text-end\"\r\n              defaultValue={info.Quantity}\r\n              onChange={(event) => handleChange(event, info)}\r\n            >\r\n            </Input>\r\n          </div>\r\n        </td>\r\n        <td>{info.UnitName}</td>\r\n        <td>\r\n          <Button\r\n            className=\"badge badge-soft-danger font-size-12 btn btn-danger waves-effect waves-light w-xxs border border-light\"\r\n            data-mdb-toggle=\"tooltip\" data-mdb-placement=\"top\" title=\"Delete Party Type\"\r\n            onClick={(e) => {\r\n              onDeleteHandeler(info);\r\n            }}\r\n          >\r\n            <i className=\"mdi mdi-delete font-size-18\"></i>\r\n          </Button>\r\n        </td>\r\n      </tr>\r\n    );\r\n  });\r\n  return (\r\n    <>\r\n      <div>\r\n        <Table className=\"table table-bordered table-hover mb-2\">\r\n          <Thead>\r\n            <tr>\r\n              <th className=\"col col-sm-3\">Item</th>\r\n              <th className=\"col col-sm-3\">Quantity </th>\r\n              <th className=\"col col-sm-3\">Unit</th>\r\n              <th className=\"col col-sm-3\">{\"Action\"}</th>\r\n            </tr>\r\n          </Thead>\r\n          <Tbody>{tableRows}</Tbody>\r\n          {props.tableData.length > 0 ?\r\n            <></>\r\n            :\r\n            <tr className=\"text-danger text-center mt-4 \"\r\n              style={{\r\n                marginTop: \"25px\",\r\n                marginBottom: \"12px\"\r\n              }}>\r\n              <td colspan=\"4\">Items Not available</td>\r\n            </tr>\r\n\r\n          }\r\n        </Table>\r\n\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default BOMTable;\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\RoutesRedux\\reducer.js",["3597"],"import { Fade } from \"reactstrap\";\r\nimport {\r\n  DELETE_ROUTES_ID,\r\n  DELETE_ROUTES_ID_SUCCESS,\r\n  EDIT_ROUTES_ID,\r\n  EDIT_ROUTES_ID_SUCCESS,\r\n  GET_ROUTES_LIST,\r\n  GET_ROUTES_LIST_SUCCESS,\r\n  ROUTES_API_ERROR_ACTION,\r\n  SAVE_ROUTES_MASTER,\r\n  SAVE_ROUTES_MASTER_API_SUCCESS,\r\n  UPDATE_ROUTES_ID,\r\n  UPDATE_ROUTES_ID_SUCCESS\r\n} from \"./actionTypes\";\r\n\r\nconst INIT_STATE = {\r\n  PostData: { Status: false },\r\n  RoutesList: [],\r\n  deleteMessage: { Status: false },\r\n  editData: { Status: false },\r\n  updateMessage: { Status: false },\r\n  saveBtnloading: false,\r\n  listBtnLoading: false,\r\n  goBtnLoading:false\r\n}\r\n\r\nconst RoutesReducer = (state = INIT_STATE, action) => {\r\n  switch (action.type) {\r\n\r\n    case SAVE_ROUTES_MASTER:\r\n      return {\r\n        ...state,\r\n        saveBtnloading: true,\r\n\r\n      }\r\n    case SAVE_ROUTES_MASTER_API_SUCCESS:\r\n      return {\r\n        ...state,\r\n        PostData: action.payload,\r\n        saveBtnloading: false,\r\n\r\n      }\r\n\r\n    // list api\r\n\r\n    case GET_ROUTES_LIST:\r\n      return {\r\n        ...state,\r\n        goBtnLoading: true,\r\n      }\r\n\r\n\r\n    case GET_ROUTES_LIST_SUCCESS:\r\n      return {\r\n        ...state,\r\n        goBtnLoading: false,\r\n        RoutesList: action.payload,\r\n\r\n      }\r\n\r\n      case DELETE_ROUTES_ID:\r\n      return {\r\n        ...state,\r\n        listBtnLoading: action.config.btnId,\r\n      };\r\n\r\n    case DELETE_ROUTES_ID_SUCCESS:\r\n      return {\r\n        ...state,\r\n        deleteMessage: action.payload,\r\n        listBtnLoading:false\r\n      };\r\n\r\n      case EDIT_ROUTES_ID:\r\n      return {\r\n        ...state,\r\n        listBtnLoading: action.config.btnId,\r\n      };\r\n\r\n    case EDIT_ROUTES_ID_SUCCESS:\r\n      return {\r\n        ...state,\r\n        editData: action.payload,\r\n        listBtnLoading:false\r\n      };\r\n\r\n    // update api\r\n    case UPDATE_ROUTES_ID:\r\n      return {\r\n        ...state,\r\n        saveBtnloading: true,\r\n      };\r\n\r\n    case UPDATE_ROUTES_ID_SUCCESS:\r\n      return {\r\n        ...state,\r\n        updateMessage: action.payload,\r\n        saveBtnloading: false,\r\n      };\r\n\r\n    case ROUTES_API_ERROR_ACTION:\r\n      return {\r\n        ...state,\r\n        saveBtnloading: false,\r\n        listBtnLoading: false,\r\n        goBtnLoading:false\r\n      };\r\n\r\n\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport default RoutesReducer  ","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\RoutesRedux\\saga.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\RoutesPages\\RoutesList.js",["3598","3599","3600","3601","3602"],"import React, { useEffect, useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport RoutesMaster from \"./RoutesMaster\";\r\nimport { commonPageFieldList, commonPageFieldListSuccess } from \"../../../store/actions\";\r\nimport * as pageId from \"../../../routes/allPageID\"\r\nimport * as url from \"../../../routes/route_url\";\r\nimport {\r\n  deleteRoutesID_Success,\r\n  deleteRoutesID,\r\n  editRoutesID,\r\n  SaveRoutesMasterSuccess,\r\n  GetRoutesList,\r\n  updateRoutesIDSuccess,\r\n  GetRoutesListSuccess\r\n} from \"../../../store/Administrator/RoutesRedux/actions\";\r\nimport { loginCompanyID, loginSelectedPartyID } from \"../../../components/Common/CommonFunction\";\r\nimport CommonPurchaseList from \"../../../components/Common/CommonPurchaseList\";\r\nimport PartyDropdown_Common from \"../../../components/Common/PartyDropdown\";\r\nimport { PageLoadingSpinner } from \"../../../components/Common/CommonButton\";\r\nimport { customAlert } from \"../../../CustomAlert/ConfirmDialog\";\r\nimport NewCommonPartyDropdown from \"../../../components/Common/NewCommonPartyDropdown\";\r\nimport { mode } from \"../../../routes\";\r\n\r\nconst RoutesList = (props) => {\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const [pageMode] = useState(mode.defaultList);\r\n\r\n  const reducers = useSelector(\r\n    (state) => ({\r\n      goBtnLoading: state.RoutesReducer.goBtnLoading,\r\n      listBtnLoading: state.RoutesReducer.listBtnLoading,\r\n      tableList: state.RoutesReducer.RoutesList,\r\n      postMsg: state.RoutesReducer.PostData,\r\n      editData: state.RoutesReducer.editData,\r\n      updateMsg: state.RoutesReducer.updateMessage,\r\n      deleteMsg: state.RoutesReducer.deleteMessage,\r\n      userAccess: state.Login.RoleAccessUpdateData,\r\n      pageField: state.CommonPageFieldReducer.pageFieldList,\r\n      commonPartyDropSelect: state.CommonPartyDropdownReducer.commonPartyDropSelect\r\n    })\r\n  );\r\n\r\n  const { pageField, goBtnLoading, commonPartyDropSelect } = reducers;\r\n\r\n  const action = {\r\n    getList: GetRoutesList,\r\n    editId: editRoutesID,\r\n    deleteId: deleteRoutesID,\r\n    postSucc: SaveRoutesMasterSuccess,\r\n    updateSucc: updateRoutesIDSuccess,\r\n    deleteSucc: deleteRoutesID_Success,\r\n  }\r\n\r\n  //  This UseEffect => Featch Modules List data  First Rendering\r\n  useEffect(() => {\r\n    const page_Id = pageId.ROUTES_LIST\r\n    dispatch(commonPageFieldListSuccess(null))\r\n    dispatch(commonPageFieldList(page_Id))\r\n    return () => {\r\n      dispatch(GetRoutesListSuccess([]));\r\n    }\r\n  }, []);\r\n\r\n  // Common Party Dropdown useEffect\r\n  useEffect(() => {\r\n    if (commonPartyDropSelect.value > 0) {\r\n      goButtonHandler()\r\n    }\r\n    return () => {\r\n      dispatch(GetRoutesListSuccess([]));\r\n    }\r\n  }, [commonPartyDropSelect]);\r\n\r\n  const goButtonHandler = () => {\r\n\r\n    try {\r\n      if (commonPartyDropSelect.value === 0) {\r\n        customAlert({ Type: 3, Message: \"Please Select Party\" });\r\n        return;\r\n      };\r\n      const jsonBody = JSON.stringify({\r\n        CompanyID: loginCompanyID(),\r\n        PartyID: commonPartyDropSelect.value,\r\n      });\r\n\r\n      dispatch(GetRoutesList(jsonBody));\r\n    } catch (error) { }\r\n    return\r\n  };\r\n\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <PageLoadingSpinner isLoading={(goBtnLoading || !pageField)} />\r\n      <div className=\"page-content\">\r\n\r\n        <NewCommonPartyDropdown />\r\n        {\r\n          (pageField) &&\r\n          <div className=\"mt-n1\">\r\n            <CommonPurchaseList\r\n              action={action}\r\n              reducers={reducers}\r\n              showBreadcrumb={false}\r\n              MasterModal={RoutesMaster}\r\n              masterPath={url.ROUTES}\r\n              newBtnPath={url.ROUTES}\r\n              ButtonMsgLable={\"Routes\"}\r\n              deleteName={\"Name\"}\r\n              goButnFunc={goButtonHandler}\r\n            />\r\n          </div>\r\n\r\n        }\r\n      </div>\r\n\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nexport default RoutesList;\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\RoutesPages\\RoutesMaster.js",["3603","3604","3605","3606","3607","3608","3609","3610","3611"],"import React, { useEffect, useState, } from \"react\";\r\nimport {\r\n    Card,\r\n    CardBody,\r\n    CardHeader,\r\n    Col,\r\n    Container,\r\n    FormGroup,\r\n    Input,\r\n    Label,\r\n    Row\r\n} from \"reactstrap\";\r\nimport { MetaTags } from \"react-meta-tags\";\r\nimport { commonPageField, commonPageFieldSuccess } from \"../../../store/actions\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { Breadcrumb_inputName } from \"../../../store/Utilites/Breadcrumb/actions\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n    SaveRoutesMaster,\r\n    SaveRoutesMasterSuccess,\r\n    editRoutesIDSuccess,\r\n    updateRoutesID,\r\n    GetRoutesListSuccess,\r\n    updateRoutesIDSuccess,\r\n} from \"../../../store/Administrator/RoutesRedux/actions\";\r\nimport {\r\n    comAddPageFieldFunc,\r\n    formValid,\r\n    initialFiledFunc,\r\n    onChangeText,\r\n    resetFunction\r\n} from \"../../../components/Common/validationFunction\";\r\nimport { SaveButton } from \"../../../components/Common/CommonButton\";\r\nimport {\r\n    breadcrumbReturnFunc,\r\n    loginCompanyID,\r\n    loginPartyID,\r\n    loginUserID,\r\n    btnIsDissablefunc,\r\n    metaTagLabel,\r\n    loginSelectedPartyID,\r\n\r\n} from \"../../../components/Common/CommonFunction\";\r\nimport * as url from \"../../../routes/route_url\";\r\nimport * as pageId from \"../../../routes/allPageID\"\r\nimport * as mode from \"../../../routes/PageMode\"\r\nimport PartyDropdown_Common from \"../../../components/Common/PartyDropdown\";\r\nimport { customAlert } from \"../../../CustomAlert/ConfirmDialog\";\r\n\r\nconst RoutesMaster = (props) => {\r\n\r\n    const history = useHistory();\r\n    const dispatch = useDispatch();\r\n\r\n    const fileds = {\r\n        id: \"\",\r\n        Name: \"\",\r\n        Party: \"\",\r\n        IsActive: false,\r\n        Sunday: false,\r\n        Monday: false,\r\n        Tuesday: false,\r\n        Wednesday: false,\r\n        Thursday: false,\r\n        Friday: false,\r\n        Saturday: false,\r\n    }\r\n\r\n    const [state, setState] = useState(() => initialFiledFunc(fileds))\r\n\r\n    const [modalCss, setModalCss] = useState(false);\r\n    const [pageMode, setPageMode] = useState(mode.defaultsave);\r\n    const [userPageAccessState, setUserAccState] = useState(123);\r\n    const [editCreatedBy, seteditCreatedBy] = useState(\"\");\r\n\r\n    //Access redux store Data /  'save_ModuleSuccess' action data\r\n    const { postMsg,\r\n        updateMsg,\r\n        pageField,\r\n        saveBtnloading,\r\n        userAccess } = useSelector((state) => ({\r\n            saveBtnloading: state.RoutesReducer.saveBtnloading,\r\n            postMsg: state.RoutesReducer.PostData,\r\n            updateMsg: state.RoutesReducer.updateMessage,\r\n            userAccess: state.Login.RoleAccessUpdateData,\r\n            pageField: state.CommonPageFieldReducer.pageField\r\n        }));\r\n\r\n    useEffect(() => {\r\n        const page_Id = pageId.ROUTES\r\n        dispatch(commonPageFieldSuccess(null));\r\n        dispatch(commonPageField(page_Id))\r\n    }, []);\r\n\r\n    const values = { ...state.values }\r\n    const { isError } = state;\r\n    const { fieldLabel } = state;\r\n\r\n    const location = { ...history.location }\r\n    const hasShowloction = location.hasOwnProperty(mode.editValue)\r\n    const hasShowModal = props.hasOwnProperty(mode.editValue)\r\n\r\n    // userAccess useEffect\r\n    useEffect(() => {\r\n        let userAcc = null;\r\n        let locationPath = location.pathname;\r\n\r\n        if (hasShowModal) {\r\n            locationPath = props.masterPath;\r\n        };\r\n\r\n        userAcc = userAccess.find((inx) => {\r\n            return (`/${inx.ActualPagePath}` === locationPath)\r\n        })\r\n\r\n        if (userAcc) {\r\n            setUserAccState(userAcc)\r\n            breadcrumbReturnFunc({ dispatch, userAcc });\r\n        };\r\n    }, [userAccess])\r\n\r\n    //This UseEffect 'SetEdit' data and 'autoFocus' while this Component load First Time.\r\n    useEffect(() => {\r\n\r\n        if ((hasShowloction || hasShowModal)) {\r\n\r\n            let hasEditVal = null\r\n            if (hasShowloction) {\r\n                setPageMode(location.pageMode)\r\n                hasEditVal = location.editValue\r\n            }\r\n            else if (hasShowModal) {\r\n                hasEditVal = props.editValue\r\n                setPageMode(props.pageMode)\r\n                setModalCss(true)\r\n            }\r\n\r\n            if (hasEditVal) {\r\n\r\n                const { id, Name, IsActive, Party, PartyName, Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday } = hasEditVal\r\n                const { values, fieldLabel, hasValid, required, isError } = { ...state }\r\n\r\n                values.id = id;\r\n                values.Party = { value: Party, label: PartyName }\r\n                values.Name = Name;\r\n                values.IsActive = IsActive\r\n                values.Sunday = Sunday\r\n                values.Monday = Monday\r\n                values.Tuesday = Tuesday\r\n                values.Wednesday = Wednesday\r\n                values.Thursday = Thursday\r\n                values.Friday = Friday\r\n                values.Saturday = Saturday\r\n\r\n                hasValid.Party.valid = true;\r\n                hasValid.Name.valid = true;\r\n                hasValid.IsActive.valid = true;\r\n                hasValid.Sunday.valid = true;\r\n                hasValid.Monday.valid = true;\r\n                hasValid.Tuesday.valid = true;\r\n                hasValid.Wednesday.valid = true;\r\n                hasValid.Thursday.valid = true;\r\n                hasValid.Friday.valid = true;\r\n                hasValid.Saturday.valid = true;\r\n\r\n                setState({ values, fieldLabel, hasValid, required, isError })\r\n                dispatch(Breadcrumb_inputName(hasEditVal.Name))\r\n                seteditCreatedBy(hasEditVal.CreatedBy)\r\n            }\r\n            dispatch(editRoutesIDSuccess({ Status: false }))\r\n        }\r\n    }, [])\r\n\r\n    useEffect(async () => {\r\n\r\n        if ((postMsg.Status === true) && (postMsg.StatusCode === 200)) {\r\n            dispatch(SaveRoutesMasterSuccess({ Status: false }))\r\n            setState(() => resetFunction(fileds, state)) // Clear form values \r\n            dispatch(Breadcrumb_inputName(''))\r\n            if (pageMode === \"other\") {\r\n                customAlert({\r\n                    Type: 1,\r\n                    Message: postMsg.Message,\r\n                })\r\n            }\r\n\r\n            else {\r\n                let isPermission = await customAlert({\r\n                    Type: 1,\r\n                    Status: true,\r\n                    Message: postMsg.Message,\r\n                })\r\n                if (isPermission) {\r\n                    history.push({ pathname: url.ROUTES_LIST })\r\n                }\r\n            }\r\n        }\r\n\r\n        else if (postMsg.Status === true) {\r\n            dispatch(GetRoutesListSuccess({ Status: false }))\r\n            customAlert({\r\n                Type: 4,\r\n                Message: JSON.stringify(postMsg.Message),\r\n            })\r\n        }\r\n    }, [postMsg])\r\n\r\n    useEffect(() => {\r\n\r\n        if (updateMsg.Status === true && updateMsg.StatusCode === 200 && !modalCss) {\r\n            setState(() => resetFunction(fileds, state)) // Clear form values \r\n            history.push({\r\n                pathname: url.ROUTES_LIST,\r\n            })\r\n        }\r\n\r\n        else if (updateMsg.Status === true && !modalCss) {\r\n            dispatch(updateRoutesIDSuccess({ Status: false }));\r\n            customAlert({\r\n                Type: 3,\r\n                Message: JSON.stringify(updateMsg.Message),\r\n            })\r\n        }\r\n    }, [updateMsg, modalCss]);\r\n\r\n    useEffect(() => {\r\n\r\n        if (pageField) {\r\n            const fieldArr = pageField.PageFieldMaster\r\n            comAddPageFieldFunc({ state, setState, fieldArr })\r\n        }\r\n    }, [pageField])\r\n\r\n\r\n    const SaveHandler = async (event) => {\r\n\r\n        event.preventDefault();\r\n        const btnId = event.target.id\r\n\r\n        try {\r\n            if ((loginSelectedPartyID() === 0)) {\r\n                customAlert({ Type: 3, Message: \"Please Select Party\" });\r\n                return;\r\n            };\r\n            if (formValid(state, setState)) {\r\n                btnIsDissablefunc({ btnId, state: true })\r\n\r\n                const jsonBody = JSON.stringify({\r\n                    Name: values.Name,\r\n                    IsActive: values.IsActive,\r\n                    Party: loginSelectedPartyID(),\r\n                    Sunday: values.Sunday,\r\n                    Monday: values.Monday,\r\n                    Tuesday: values.Tuesday,\r\n                    Wednesday: values.Wednesday,\r\n                    Thursday: values.Thursday,\r\n                    Friday: values.Friday,\r\n                    Saturday: values.Saturday,\r\n                    Company: loginCompanyID(),\r\n                    CreatedBy: loginUserID(),\r\n                    UpdatedBy: loginUserID()\r\n                });\r\n\r\n                if (pageMode === mode.edit) {\r\n                    dispatch(updateRoutesID({ jsonBody, updateId: values.id, btnId }));\r\n                }\r\n\r\n                else {\r\n                    dispatch(SaveRoutesMaster({ jsonBody, btnId }));\r\n                }\r\n            }\r\n        } catch (e) { btnIsDissablefunc({ btnId, state: false }) }\r\n    };\r\n\r\n    // IsEditMode_Css is use of module Edit_mode (reduce page-content marging)\r\n    var IsEditMode_Css = ''\r\n    if ((modalCss) || (pageMode === mode.dropdownAdd)) { IsEditMode_Css = \"-5.5%\" };\r\n\r\n    if (!(userPageAccessState === '')) {\r\n        return (\r\n            <React.Fragment>\r\n                <MetaTags>{metaTagLabel(userPageAccessState)}</MetaTags>\r\n\r\n                <div className=\"page-content\" style={{ marginTop: IsEditMode_Css }}>\r\n                    <PartyDropdown_Common pageMode={pageMode} />\r\n\r\n                    <Container fluid>\r\n                        <Card className=\"text-black\" style={{ marginTop: \"3px\" }}>\r\n                            <CardHeader className=\"card-header   text-black c_card_header\">\r\n                                <h4 className=\"card-title text-black\">{userPageAccessState.PageDescription}</h4>\r\n                                <p className=\"card-title-desc text-black\">{userPageAccessState.PageDescriptionDetails}</p>\r\n                            </CardHeader>\r\n\r\n                            <CardBody className=\" vh-10 0 text-black\" style={{ backgroundColor: \"#whitesmoke\" }} >\r\n                                <form noValidate>\r\n                                    <Row className=\"\">\r\n                                        <Col md={12}>\r\n                                            <Card>\r\n                                                <CardBody className=\"c_card_body\">\r\n                                                    <Row>\r\n                                                        <FormGroup className=\"mb-2 col col-sm-4 \">\r\n                                                            <Label htmlFor=\"validationCustom01\">{fieldLabel.Name}</Label>\r\n                                                            <Input\r\n                                                                name=\"Name\"\r\n                                                                id=\"txtName\"\r\n                                                                value={values.Name}\r\n                                                                type=\"text\"\r\n                                                                className={isError.Name.length > 0 ? \"is-invalid form-control\" : \"form-control\"}\r\n                                                                placeholder=\"Please Enter Name\"\r\n                                                                autoComplete=\"off\"\r\n                                                                autoFocus={true}\r\n                                                                onChange={(event) => {\r\n                                                                    onChangeText({ event, state, setState })\r\n                                                                    dispatch(Breadcrumb_inputName(event.target.value))\r\n                                                                }}\r\n                                                            />\r\n                                                            {isError.Name.length > 0 && (\r\n                                                                <span className=\"invalid-feedback\">{isError.Name}</span>\r\n                                                            )}\r\n                                                        </FormGroup>\r\n                                                    </Row>\r\n\r\n                                                    <Col>\r\n                                                        <FormGroup className=\"mt-2 col col-sm-4 \">\r\n                                                            <Label htmlFor=\"validationCustom01\" >{fieldLabel.Sunday}</Label>\r\n                                                            <Input\r\n                                                                style={{ marginLeft: \"53px\" }}\r\n                                                                type=\"checkbox\"\r\n                                                                className=\"p-1\"\r\n                                                                name=\"Sunday\"\r\n                                                                checked={values.Sunday}\r\n                                                                onChange={(e) => {\r\n                                                                    setState((i) => {\r\n                                                                        const a = { ...i }\r\n                                                                        a.values.Sunday = e.target.checked;\r\n                                                                        return a\r\n                                                                    })\r\n                                                                }}\r\n                                                            >\r\n                                                            </Input>\r\n                                                        </FormGroup>\r\n\r\n\r\n                                                        <FormGroup className=\"mt-2 col col-sm-4 \">\r\n                                                            <Label htmlFor=\"validationCustom01\">{fieldLabel.Monday}</Label>\r\n                                                            <Input\r\n                                                                style={{ marginLeft: \"51px\" }}\r\n                                                                type=\"checkbox\"\r\n                                                                className=\"p-1\"\r\n                                                                name=\"Monday\"\r\n                                                                checked={values.Monday}\r\n                                                                onChange={(e) => {\r\n                                                                    setState((i) => {\r\n                                                                        const a = { ...i }\r\n                                                                        a.values.Monday = e.target.checked;\r\n                                                                        return a\r\n                                                                    })\r\n                                                                }}\r\n                                                            >\r\n                                                            </Input>\r\n                                                        </FormGroup>\r\n\r\n\r\n                                                        <FormGroup className=\"mt-2 col col-sm-4 \">\r\n                                                            <Label htmlFor=\"validationCustom01\">{fieldLabel.Tuesday}</Label>\r\n                                                            <Input\r\n                                                                style={{ marginLeft: \"49px\" }}\r\n                                                                type=\"checkbox\"\r\n                                                                className=\"p-1\"\r\n                                                                name=\"Tuesday\"\r\n                                                                checked={values.Tuesday}\r\n                                                                onChange={(e) => {\r\n                                                                    setState((i) => {\r\n                                                                        const a = { ...i }\r\n                                                                        a.values.Tuesday = e.target.checked;\r\n                                                                        return a\r\n                                                                    })\r\n                                                                }}\r\n                                                            >\r\n                                                            </Input>\r\n                                                        </FormGroup>\r\n\r\n\r\n                                                        <FormGroup className=\"mt-2 col col-sm-4 \">\r\n                                                            <Label htmlFor=\"validationCustom01\">{fieldLabel.Wednesday}</Label>\r\n                                                            <Input\r\n                                                                style={{ marginLeft: \"28px\" }}\r\n                                                                type=\"checkbox\"\r\n                                                                className=\"p-1\"\r\n                                                                name=\"Wednesday\"\r\n                                                                checked={values.Wednesday}\r\n                                                                onChange={(e) => {\r\n                                                                    setState((i) => {\r\n                                                                        const a = { ...i }\r\n                                                                        a.values.Wednesday = e.target.checked;\r\n                                                                        return a\r\n                                                                    })\r\n                                                                }}\r\n                                                            >\r\n                                                            </Input>\r\n                                                        </FormGroup>\r\n\r\n\r\n                                                        <FormGroup className=\"mt-2 col col-sm-4 \">\r\n                                                            <Label htmlFor=\"validationCustom01\">{fieldLabel.Thursday}</Label>\r\n                                                            <Input\r\n                                                                style={{ marginLeft: \"43px\" }}\r\n                                                                type=\"checkbox\"\r\n                                                                className=\"p-1\"\r\n                                                                name=\"Thursday\"\r\n                                                                checked={values.Thursday}\r\n                                                                onChange={(e) => {\r\n                                                                    setState((i) => {\r\n                                                                        const a = { ...i }\r\n                                                                        a.values.Thursday = e.target.checked;\r\n                                                                        return a\r\n                                                                    })\r\n                                                                }}\r\n                                                            >\r\n                                                            </Input>\r\n                                                        </FormGroup>\r\n\r\n                                                        <FormGroup className=\"mt-2 col col-sm-4 \">\r\n                                                            <Label htmlFor=\"validationCustom01\">{fieldLabel.Friday}</Label>\r\n                                                            <Input\r\n                                                                style={{ marginLeft: \"62px\" }}\r\n                                                                type=\"checkbox\"\r\n                                                                className=\"p-1\"\r\n                                                                name=\"Friday\"\r\n                                                                checked={values.Friday}\r\n                                                                onChange={(e) => {\r\n                                                                    setState((i) => {\r\n                                                                        const a = { ...i }\r\n                                                                        a.values.Friday = e.target.checked;\r\n                                                                        return a\r\n                                                                    })\r\n                                                                }}\r\n                                                            >\r\n                                                            </Input>\r\n                                                        </FormGroup>\r\n\r\n                                                        <FormGroup className=\"mt-2 col col-sm-4 \">\r\n                                                            <Label htmlFor=\"validationCustom01\">{fieldLabel.Saturday}</Label>\r\n                                                            <Input\r\n                                                                style={{ marginLeft: \"43px\" }}\r\n                                                                type=\"checkbox\"\r\n                                                                className=\"p-1\"\r\n                                                                name=\"Saturday\"\r\n                                                                checked={values.Saturday}\r\n                                                                onChange={(e) => {\r\n                                                                    setState((i) => {\r\n                                                                        const a = { ...i }\r\n                                                                        a.values.Saturday = e.target.checked;\r\n                                                                        return a\r\n                                                                    })\r\n                                                                }}\r\n                                                            >\r\n                                                            </Input>\r\n                                                        </FormGroup>\r\n                                                    </Col>\r\n\r\n                                                    <Row>\r\n                                                        <FormGroup className=\"mt-2 col col-sm-5\">\r\n                                                            <Row className=\"justify-content-md-left\">\r\n                                                                <Label htmlFor=\"horizontal-firstname-input\" className=\"col-sm-3 col-form-label\">{fieldLabel.IsActive}</Label>\r\n                                                                <Col md={2} style={{ marginTop: '9px' }} >\r\n                                                                    <div className=\"form-check form-switch form-switch-md mb-3\">\r\n                                                                        <Input type=\"checkbox\" className=\"form-check-input\"\r\n                                                                            checked={values.IsActive}\r\n                                                                            name=\"IsActive\"\r\n                                                                            onChange={(e) => {\r\n                                                                                setState((i) => {\r\n                                                                                    const a = { ...i }\r\n                                                                                    a.values.IsActive = e.target.checked;\r\n                                                                                    return a\r\n                                                                                })\r\n                                                                            }}\r\n                                                                        />\r\n                                                                    </div>\r\n                                                                </Col>\r\n                                                            </Row>\r\n                                                        </FormGroup>\r\n                                                    </Row>\r\n\r\n                                                    <FormGroup className=\"mt-2\">\r\n                                                        <Row>\r\n                                                            <Col sm={2}>\r\n                                                                <SaveButton pageMode={pageMode}\r\n                                                                    loading={saveBtnloading}\r\n                                                                    onClick={SaveHandler}\r\n                                                                    userAcc={userPageAccessState}\r\n                                                                    editCreatedBy={editCreatedBy}\r\n                                                                    module={\"RoutesMaster\"}\r\n                                                                />\r\n                                                            </Col>\r\n                                                        </Row>\r\n                                                    </FormGroup>\r\n                                                </CardBody>\r\n                                            </Card>\r\n                                        </Col>\r\n                                    </Row>\r\n                                </form>\r\n                            </CardBody>\r\n                        </Card>\r\n                    </Container>\r\n                </div>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n    else {\r\n        return (\r\n            <React.Fragment></React.Fragment>\r\n        )\r\n    }\r\n};\r\n\r\nexport default RoutesMaster\r\n\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\RoutesRedux\\actionTypes.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\RoutesRedux\\actions.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\Reports\\Van Loading Party Wise InvoiceList\\Page.js",["3612"],"import jsPDF from \"jspdf\";\r\nimport \"jspdf-autotable\";\r\nimport * as style from './ReportStyle'\r\nimport { Data } from \"./DemoData\";\r\nimport { date_dmy_func } from \"../../components/Common/CommonFunction\";\r\n\r\nvar pageHeder = function (doc, data) {\r\n    style.pageBorder(doc, data);\r\n    style.pageHeder(doc, data);     //Title\r\n    style.reportHeder1(doc, data);\r\n    style.reportHeder2(doc, data);\r\n    style.reportHeder3(doc, data);    //Invoice ID , Date  \r\n\r\n};\r\nfunction reportBody(doc, data) {\r\n    style.tableBody(doc, data);\r\n}\r\nfunction pageFooter(doc, data) {\r\n    style.pageFooter(doc, data);\r\n    //     style.reportFooter(doc,data);\r\n}\r\n\r\nconst VanLoadingSheet = (data) => {\r\n\r\n    var doc = new jsPDF('p', 'pt', 'a4');\r\n    pageHeder(doc, data);\r\n    reportBody(doc, data);\r\n    pageFooter(doc, data);\r\n    doc.setProperties({\r\n        title: `Loading Sheet Report ${date_dmy_func(data.PartyDetails.Date)} Party(${data.PartyDetails.Party}) `\r\n    });\r\n\r\n    function generateSaveAndOpenPDFReport() {\r\n        const pdfUrl = URL.createObjectURL(doc.output('blob'));\r\n        const options = { filename: `LoadingSheet_Report/${data.PartyDetails.Date}-${data.PartyDetails.Party}` }\r\n        window.open(pdfUrl, options);\r\n    }\r\n    generateSaveAndOpenPDFReport();\r\n\r\n    // return(<></>);\r\n}\r\nexport default VanLoadingSheet;","D:\\Rohit\\Git projects\\Manthan\\src\\Reports\\Van Loading Party Wise InvoiceList\\ReportStyle.js",["3613","3614","3615"],"\r\nimport reportHederPng from \"../../assets/images/reportHeder.png\"\r\nimport upi_qr_code from \"../../assets/images/upi_qr_code.png\"\r\nimport { date_dmy_func, convertOnlyTimefunc, CurrentTime, currentDate_dmy } from \"../../components/Common/CommonFunction\";\r\nimport * as table from './TableData'\r\n\r\nexport const pageBorder = (doc) => {\r\n    doc.line(570, 10, 30, 10);//horizontal line (Top)\r\n    doc.line(30, 815, 30, 10);//vertical line (left)\r\n    doc.line(570, 815, 570, 10);//vertical line (Right)\r\n    doc.line(570, 815, 30, 815);//horizontal line (Bottom)   \r\n}\r\nexport const pageHeder = (doc, data) => {\r\n\r\n    doc.addFont(\"Arial\", 'Normal')\r\n    doc.setFont('Arial')\r\n    doc.setFontSize(15)\r\n    doc.text('Van Loading Sheet SKU Wise Summary', 100, 40,)\r\n}\r\nexport const pageHeder1 = (doc, data) => {\r\n    doc.addFont(\"Arial\", 'Normal')\r\n    doc.setFont('Arial')\r\n    doc.setFontSize(15)\r\n    doc.text('Van Loading Party Wise Invoice List', 100, 40,)\r\n}\r\nexport const reportHeder1 = (doc, data) => {\r\n\r\n    doc.setFont('Tahoma')\r\n    doc.setFontSize(11)\r\n    doc.setFont(undefined, 'bold')\r\n    const Party = data.PartyDetails.Party\r\n    doc.text(`*** ${Party} ***`, 300, 75, 'center')  //bill by \r\n    doc.line(570, 60, 30, 60) //horizontal line 1 billby upper\r\n    doc.line(570, 10, 30, 10);//horizontal line 2\r\n    doc.line(570, 80, 30, 80);//horizontal line 3\r\n    doc.line(570, 100, 30, 100);//horizontal line middle address routes \r\n    doc.line(30, 789, 30, 10);//vertical left 1\r\n    doc.line(570, 789, 570, 10);//vertical left 2\r\n    doc.line(408, 60, 408, 10);//vertical right 1\r\n\r\n    var options3 = {\r\n        didParseCell: (data1) => {\r\n\r\n            if (data1.row.cells[0].raw === \"Address:\") {\r\n                data1.row.cells[0].styles.fontStyle = \"bold\"\r\n                data1.row.cells[1].colSpan = 5\r\n            }\r\n            if (data1.row.cells[0].raw === \"Routes:\") {\r\n                data1.row.cells[0].styles.fontStyle = \"bold\"\r\n                data1.row.cells[2].styles.fontStyle = \"bold\"\r\n                data1.row.cells[4].styles.fontStyle = \"bold\"\r\n            }\r\n        },\r\n\r\n        margin: {\r\n            left: 30,\r\n        },\r\n        showHead: 'always',\r\n        theme: 'plain',\r\n        styles: {\r\n            overflow: 'linebreak',\r\n            fontSize: 8,\r\n        },\r\n\r\n        bodyStyles: {\r\n            columnWidth: 'wrap',\r\n            textColor: [30, 30, 30],\r\n            cellPadding: 3,\r\n            fontSize: 9,\r\n            lineColor: [0, 0, 0]\r\n        },\r\n        columnStyles: {\r\n            0: {\r\n                valign: \"top\",\r\n                columnWidth: 45,\r\n                halign: 'lfet',\r\n            },\r\n\r\n            1: {\r\n                columnWidth: 100,\r\n                halign: 'left',\r\n            },\r\n            2: {\r\n                valign: \"top\",\r\n                columnWidth: 65,\r\n                halign: 'right',\r\n            },\r\n            3: {\r\n                columnWidth: 140,\r\n                halign: 'left',\r\n            },\r\n            4: {\r\n                columnWidth: 60,\r\n                halign: 'right',\r\n            },\r\n            5: {\r\n                columnWidth: 120,\r\n                halign: 'left',\r\n            },\r\n\r\n\r\n\r\n\r\n        },\r\n        tableLineColor: \"black\",\r\n        startY: 85\r\n    };\r\n    doc.autoTable(table.PageHedercolumns, table.ReportHederRows(doc, data), options3);\r\n    const YAxis = doc.previousAutoTable.finalY\r\n    doc.line(570, YAxis, 30, YAxis);\r\n\r\n}\r\n\r\nexport const reportHeder2 = (doc, data) => {\r\n    doc.setFont('Tahoma')\r\n    doc.setFontSize(10)\r\n    doc.setFont(undefined, 'bold')\r\n\r\n}\r\n\r\nexport const reportHeder3 = (doc, data) => {\r\n\r\n    doc.setFont('Tahoma')\r\n    doc.setFontSize(10)\r\n    doc.line(570, 35, 408, 35) //horizontal line 1 billby upper\r\n    doc.setFont(undefined, 'bold')\r\n    doc.text(`Loading No:${data.PartyDetails.LoadingSheetNo}`, 415, 30) //Invoice Id\r\n    var date = date_dmy_func(data.PartyDetails.Date)\r\n    var time = convertOnlyTimefunc(data.CreatedOn)\r\n    doc.text(`Loading Date:${date} `, 415, 50) //Invoice date\r\n    doc.setFontSize(11)\r\n}\r\n// original\r\nexport const tableBody = (doc, data) => {\r\n    const tableRow = table.Rows(data);\r\n    console.log(tableRow)\r\n    var options = {\r\n        didParseCell: (data1) => {\r\n\r\n            if (data1.row.cells[1].raw === \"Total\") {\r\n                data1.row.cells[1].styles.fontStyle = \"bold\"\r\n\r\n                data1.row.cells[3].styles.fontStyle = \"bold\"\r\n                data1.row.cells[5].styles.fontStyle = \"bold\"\r\n\r\n\r\n                data1.row.cells[1].styles.fontSize = 9\r\n                data1.row.cells[3].styles.fontSize = 9\r\n                data1.row.cells[5].styles.fontSize = 9\r\n\r\n            }\r\n        },\r\n\r\n        margin: {\r\n            left: 30, right: 25,\r\n        },\r\n        theme: 'grid',\r\n        headerStyles: {\r\n            cellPadding: 4,\r\n            lineWidth: 1,\r\n            valign: 'top',\r\n            fontStyle: 'bold',\r\n            halign: 'center',\r\n            fillColor: \"white\",\r\n            textColor: [0, 0, 0],\r\n            fontSize: 8,\r\n            rowHeight: 10,\r\n            lineColor: [0, 0, 0]\r\n        },\r\n        bodyStyles: {\r\n            textColor: [30, 30, 30],\r\n            cellPadding: 3,\r\n            fontSize: 7,\r\n            columnWidth: 'wrap',\r\n            lineColor: [0, 0, 0],\r\n        },\r\n        columnStyles: {\r\n            0: {\r\n                valign: \"top\",\r\n                columnWidth: 20,\r\n            },\r\n            1: {\r\n                columnWidth: 200,\r\n                // halign: 'right',\r\n\r\n            },\r\n            2: {\r\n                columnWidth: 80,\r\n                halign: 'right',\r\n            },\r\n            3: {\r\n                columnWidth: 80,\r\n                halign: 'right',\r\n            },\r\n            4: {\r\n                columnWidth: 80,\r\n                halign: 'right',\r\n            },\r\n\r\n            5: {\r\n                columnWidth: 80,\r\n                halign: 'right',\r\n            },\r\n\r\n\r\n        },\r\n        tableLineColor: \"black\",\r\n        startY: doc.autoTableEndPosY(45),// 45,\r\n    };\r\n    var options1 = {\r\n        didParseCell: (data1) => {\r\n\r\n            if (data1.row.cells[1].raw === \"Total\") {\r\n                data1.row.cells[1].styles.fontStyle = \"bold\"\r\n                data1.row.cells[3].styles.fontStyle = \"bold\"\r\n                data1.row.cells[4].styles.fontStyle = \"bold\"\r\n                data1.row.cells[6].styles.fontStyle = \"bold\"\r\n                data1.row.cells[7].styles.fontStyle = \"bold\"\r\n\r\n                data1.row.cells[1].styles.fontSize = 9\r\n                data1.row.cells[3].styles.fontSize = 9\r\n                data1.row.cells[4].styles.fontSize = 9\r\n                data1.row.cells[6].styles.fontSize = 9\r\n                data1.row.cells[7].styles.fontSize = 9\r\n            }\r\n        },\r\n\r\n        margin: {\r\n            left: 30, right: 25,//200 bottom\r\n        },\r\n        theme: 'grid',\r\n        headerStyles: {\r\n            cellPadding: 4,\r\n            lineWidth: 1,\r\n            valign: 'top',\r\n            fontStyle: 'bold',\r\n            halign: 'center',\r\n            fillColor: \"white\",\r\n            textColor: [0, 0, 0], //Black     \r\n            fontSize: 8,\r\n            rowHeight: 10,\r\n            lineColor: [0, 0, 0]\r\n        },\r\n        bodyStyles: {\r\n            textColor: [30, 30, 30],\r\n            cellPadding: 3,\r\n            fontSize: 7,\r\n            columnWidth: 'wrap',\r\n            lineColor: [0, 0, 0],\r\n        },\r\n        columnStyles: {\r\n            0: {\r\n                valign: \"top\",\r\n                columnWidth: 20,\r\n            },\r\n            1: {\r\n                columnWidth: 80,\r\n                // halign: 'right',\r\n\r\n            },\r\n            2: {\r\n                columnWidth: 70,\r\n                halign: 'right',\r\n            },\r\n            3: {\r\n                columnWidth: 120,\r\n                // halign: 'right',\r\n            },\r\n            4: {\r\n                columnWidth: 50,\r\n                halign: 'right',\r\n            },\r\n            // 5: {\r\n            //     columnWidth: 50,\r\n            //     halign: 'right',\r\n            // },\r\n            6: {\r\n                columnWidth: 40,\r\n                halign: 'right',\r\n            },\r\n            7: {\r\n                columnWidth: 60,\r\n                halign: 'right',\r\n            },\r\n            // 8: {\r\n            //     columnWidth: 50,\r\n            //     halign: 'right',\r\n            // },\r\n        },\r\n        tableLineColor: \"black\",\r\n        startY: doc.autoTableEndPosY(45),// 45,\r\n    };\r\n\r\n    doc.autoTable(table.columns, table.Rows(data), options);\r\n    doc.addPage();\r\n    pageBorder(doc, data);\r\n    pageHeder1(doc, data);     //Title\r\n    reportHeder1(doc, data);\r\n    reportHeder2(doc, data);\r\n    reportHeder3(doc, data);\r\n    doc.autoTable(table.columns1, table.Rows1(data), options1);\r\n    // Auto table for footer\r\n    const optionsTable4 = {\r\n        margin: {\r\n            left: 30, right: 30, bottom: 100\r\n        },\r\n        showHead: 'never',\r\n    };\r\n\r\n    doc.autoTable(optionsTable4);\r\n\r\n    doc.autoTable({\r\n        html: '#table',\r\n        didParseCell(data) {\r\n            if (data.cell.row.index === 0) {\r\n                data.cell.styles.textColor = [255, 255, 255];\r\n                data.cell.styles.fillColor = '#FF5783';\r\n            }\r\n        }\r\n    })\r\n\r\n\r\n}\r\nexport const pageFooter = (doc, data) => {\r\n\r\n\r\n    const pageCount = doc.internal.getNumberOfPages()\r\n    doc.setFont('helvetica', 'Normal')\r\n    doc.setFontSize(8)\r\n    for (var i = 1; i <= pageCount; i++) {\r\n        doc.setPage(i)\r\n        doc.setFont('helvetica', 'Normal')\r\n        doc.text('Page ' + String(i) + ' of ' + String(pageCount), 520, 828,)\r\n\r\n        doc.text('Print Date :' + String(currentDate_dmy) + ' Time ' + String(CurrentTime()), 30, 828,)\r\n        console.log(\"aaa\", doc.internal.pageSize.height)\r\n    }\r\n}\r\n\r\n\r\n\r\n// original","D:\\Rohit\\Git projects\\Manthan\\src\\Reports\\Van Loading Party Wise InvoiceList\\DemoData.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\Reports\\Van Loading Party Wise InvoiceList\\TableData.js",["3616","3617"],"import { date_dmy_func } from \"../../components/Common/CommonFunction\";\r\n\r\nexport const columns = [\r\n    \"SR No.\",\r\n    \"ItemName\",\r\n    \"MRP\",\r\n    \"Box\",\r\n    \"Pcs\",\r\n    \"Quantity\",\r\n\r\n];\r\nexport const columns1 = [\r\n    \"SR No.\",\r\n    \"Invoice Date\",\r\n    \"Invoice Number\",\r\n    \"Party Name\",\r\n    \"Amount\",\r\n    \"Cash \",\r\n    \"Cheque\",\r\n    \"Credit\",\r\n    \"Online RTGS/M Wallet\",\r\n];\r\n\r\nexport const PageHedercolumns = [\r\n    \"Billed by\",\r\n    \"Billed to\",\r\n    \"\",\r\n    '',\r\n    \"\",\r\n    \"\"\r\n]\r\n\r\nexport const Rows = (data) => {\r\n    const { InvoiceItems = [] } = data\r\n    const returnArr = [];\r\n    let TotalMRP = 0\r\n    let TotalBox = 0\r\n    let TotalPcs = 0\r\n    let TotalQuantity = 0\r\n    let SrNO = 1\r\n\r\n\r\n    const groupedItems = InvoiceItems.reduce((accumulator, currentItem) => {\r\n\r\n        const { ItemName, MRP, BatchCode, Box, Outer, Quantity, UnitName, MRPValue, PiecesQuantity, BoxQuantity } = currentItem;\r\n        const key = ItemName + '_' + MRP;\r\n        if (accumulator[key]) {\r\n            accumulator[key].PiecesQuantity += Number(PiecesQuantity);\r\n            accumulator[key].Quantity += Number(Quantity);\r\n            accumulator[key].BoxQuantity += Number(BoxQuantity);\r\n\r\n\r\n        } else {\r\n            accumulator[key] = { ItemName, MRPValue, BatchCode, Box, Outer, Quantity: Number(Quantity), UnitName, PiecesQuantity: Number(PiecesQuantity), BoxQuantity: Number(BoxQuantity) };\r\n        }\r\n        return accumulator;\r\n    }, {});\r\n\r\n    InvoiceItems.forEach((element, key) => {\r\n\r\n        const tableitemRow = [\r\n            SrNO++,\r\n            element.ItemName,\r\n            element.MRPValue,\r\n            Number(element.BoxQty).toFixed(2),\r\n            Number(element.PiecesQty).toFixed(2),\r\n            Number(element.QtyInNo).toFixed(2),\r\n        ];\r\n\r\n        function totalLots() {\r\n            TotalMRP = Number(TotalMRP) + Number(element.MRPValue)\r\n            TotalBox = Number(TotalBox) + Number(element.BoxQty)\r\n            TotalPcs = Number(TotalPcs) + Number(element.PiecesQty)\r\n            TotalQuantity = Number(TotalQuantity) + Number(element.QtyInNo)\r\n        };\r\n\r\n        function totalrow() {\r\n            return [\r\n                \" \",\r\n                \"Total\",\r\n                \"\",\r\n                `${Number(TotalBox).toFixed(2)}`,\r\n                ` `,\r\n                `${Number(TotalQuantity).toFixed(2)}`,\r\n            ];\r\n        };\r\n        returnArr.push(tableitemRow);\r\n        data[\"tableTot\"] = totalLots()\r\n\r\n\r\n        if (key === InvoiceItems.length - 1) {\r\n            returnArr.push(totalrow());\r\n        }\r\n    })\r\n    return returnArr;\r\n}\r\n\r\nexport const Rows1 = (data) => {\r\n    const { InvoiceParent = [] } = data\r\n    const returnArr = [];\r\n    let Gst = 0\r\n    let TotalAmount = 0\r\n    let SrNO = 1\r\n\r\n    InvoiceParent.forEach((element, key) => {\r\n        const tableitemRow = [\r\n            SrNO++,\r\n            date_dmy_func(element.InvoiceDate),\r\n            element.FullInvoiceNumber,\r\n            element.CustomerName,\r\n            element.GrandTotal,\r\n            element.Cash,\r\n            element.Cheque,\r\n            element.Credit,\r\n            element.OnlineRTGS,\r\n        ];\r\n\r\n        function totalLots() {\r\n            TotalAmount = Number(TotalAmount) + Number(element.GrandTotal)\r\n\r\n        };\r\n\r\n        function totalrow() {\r\n            return [\r\n                \" \",\r\n                \"Total\",\r\n                \"\",\r\n                ``,\r\n                `${Number(TotalAmount).toFixed(2)}`,\r\n                \"\",\r\n                ``,\r\n                ``,\r\n\r\n\r\n            ];\r\n        };\r\n        returnArr.push(tableitemRow);\r\n        data[\"tableTot\"] = totalLots()\r\n\r\n        if (key === InvoiceParent.length - 1) {\r\n            returnArr.push(totalrow());\r\n        }\r\n    })\r\n    return returnArr;\r\n}\r\n\r\n\r\nexport const ReportHederRows = (doc, data) => {\r\n\r\n    const Address = data.PartyDetails.PartyAddress\r\n    const Routes = data.PartyDetails.RouteName\r\n    const DriverName = data.PartyDetails.DriverName\r\n    const VehicleNo = data.PartyDetails.VehicleNo\r\n\r\n    var reportArray = [\r\n        [\"Address:\", `${Address}`,],\r\n        [\"Routes:\", `${Routes} `, \" DriverName:\", `${DriverName}`, \"Vehicle No:\", `${VehicleNo}`],\r\n    ]\r\n    return reportArray;\r\n} ","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\SalesManRedux\\reducer.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\SalesManPages\\SalesManMaster.js",["3618","3619","3620","3621","3622","3623","3624","3625","3626"],"import React, { useEffect, useState, } from \"react\";\r\nimport {\r\n    Card,\r\n    CardBody,\r\n    CardHeader,\r\n    Col,\r\n    Container,\r\n    FormGroup,\r\n    Input,\r\n    Label,\r\n    Row,\r\n} from \"reactstrap\";\r\nimport { MetaTags } from \"react-meta-tags\";\r\nimport { commonPageField, commonPageFieldSuccess } from \"../../../store/actions\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { Breadcrumb_inputName } from \"../../../store/Utilites/Breadcrumb/actions\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n    saveSalesManMaster,\r\n    saveSalesManMasterSuccess,\r\n    editSalesManIDSuccess,\r\n    updateSalesManID,\r\n    getSalesManlistSuccess,\r\n    updateSalesManIDSuccess,\r\n} from \"../../../store/Administrator/SalesManRedux/actions\";\r\nimport {\r\n    comAddPageFieldFunc,\r\n    formValid,\r\n    initialFiledFunc,\r\n    onChangeSelect,\r\n    onChangeText,\r\n    resetFunction\r\n} from \"../../../components/Common/validationFunction\";\r\nimport Select from \"react-select\";\r\nimport { SaveButton } from \"../../../components/Common/CommonButton\";\r\nimport {\r\n    breadcrumbReturnFunc,\r\n    loginCompanyID,\r\n    loginPartyID,\r\n    loginUserID,\r\n    btnIsDissablefunc,\r\n    metaTagLabel,\r\n    loginSelectedPartyID,\r\n    loginJsonBody,\r\n\r\n} from \"../../../components/Common/CommonFunction\";\r\nimport * as url from \"../../../routes/route_url\";\r\nimport * as pageId from \"../../../routes/allPageID\"\r\nimport * as mode from \"../../../routes/PageMode\"\r\nimport { GetRoutesList, GetRoutesListSuccess } from \"../../../store/Administrator/RoutesRedux/actions\";\r\nimport PartyDropdown_Common from \"../../../components/Common/PartyDropdown\";\r\nimport { customAlert } from \"../../../CustomAlert/ConfirmDialog\";\r\n\r\nconst SalesManMaster = (props) => {\r\n\r\n    const history = useHistory();\r\n    const dispatch = useDispatch();\r\n\r\n    const fileds = {\r\n        id: \"\",\r\n        Name: \"\",\r\n        MobileNo: \"\",\r\n        Party: '',\r\n        SalesmanRoute: [],\r\n        IsActive: false\r\n    }\r\n\r\n    const [state, setState] = useState(() => initialFiledFunc(fileds))\r\n    const [modalCss, setModalCss] = useState(false);\r\n    const [pageMode, setPageMode] = useState(mode.defaultsave);\r\n    const [userPageAccessState, setUserAccState] = useState(123);\r\n    const [editCreatedBy, seteditCreatedBy] = useState(\"\");\r\n\r\n    //Access redux store Data /  'save_ModuleSuccess' action data\r\n    const { postMsg,\r\n        updateMsg,\r\n        pageField,\r\n        RoutesList,\r\n        saveBtnloading,\r\n        userAccess } = useSelector((state) => ({\r\n            saveBtnloading: state.SalesManReducer.saveBtnloading,\r\n            postMsg: state.SalesManReducer.PostData,\r\n            updateMsg: state.SalesManReducer.updateMessage,\r\n            RoutesList: state.RoutesReducer.RoutesList,\r\n            userAccess: state.Login.RoleAccessUpdateData,\r\n            pageField: state.CommonPageFieldReducer.pageField\r\n        }));\r\n\r\n    useEffect(() => {\r\n        const page_Id = pageId.SALESMAN\r\n        dispatch(commonPageFieldSuccess(null));\r\n        dispatch(commonPageField(page_Id))\r\n        dispatch(GetRoutesList())\r\n    }, []);\r\n\r\n    const values = { ...state.values }\r\n    const { isError } = state;\r\n    const { fieldLabel } = state;\r\n\r\n    const location = { ...history.location }\r\n    const hasShowloction = location.hasOwnProperty(mode.editValue)\r\n    const hasShowModal = props.hasOwnProperty(mode.editValue)\r\n\r\n    // userAccess useEffect\r\n    useEffect(() => {\r\n        let userAcc = null;\r\n        let locationPath = location.pathname;\r\n\r\n        if (hasShowModal) {\r\n            locationPath = props.masterPath;\r\n        };\r\n\r\n        userAcc = userAccess.find((inx) => {\r\n            return (`/${inx.ActualPagePath}` === locationPath)\r\n        })\r\n\r\n        if (userAcc) {\r\n            setUserAccState(userAcc)\r\n            breadcrumbReturnFunc({ dispatch, userAcc });\r\n        };\r\n    }, [userAccess])\r\n\r\n    //This UseEffect 'SetEdit' data and 'autoFocus' while this Component load First Time.\r\n    useEffect(() => {\r\n\r\n        if ((hasShowloction || hasShowModal)) {\r\n\r\n            let hasEditVal = null\r\n            if (hasShowloction) {\r\n                setPageMode(location.pageMode)\r\n                hasEditVal = location.editValue\r\n            }\r\n            else if (hasShowModal) {\r\n                hasEditVal = props.editValue\r\n                setPageMode(props.pageMode)\r\n                setModalCss(true)\r\n            }\r\n\r\n            if (hasEditVal) {\r\n\r\n                const routeArr = hasEditVal.SalesmanRoute.map((data) => ({\r\n                    value: data.Route,\r\n                    label: data.Name\r\n                }))\r\n\r\n                const { id, Name, IsActive, MobileNo, Party, PartyName } = hasEditVal\r\n                const { values, fieldLabel, hasValid, required, isError } = { ...state }\r\n                values.Name = Name;\r\n                values.id = id;\r\n                values.MobileNo = MobileNo;\r\n                values.IsActive = IsActive\r\n                values.SalesmanRoute = routeArr;\r\n                values.Party = { value: Party, label: PartyName }\r\n\r\n                hasValid.Party.valid = true;\r\n                hasValid.Name.valid = true;\r\n                hasValid.IsActive.valid = true;\r\n                hasValid.MobileNo.valid = true;\r\n                hasValid.SalesmanRoute.valid = true;\r\n\r\n                setState({ values, fieldLabel, hasValid, required, isError })\r\n                dispatch(Breadcrumb_inputName(hasEditVal.Name))\r\n                seteditCreatedBy(hasEditVal.CreatedBy)\r\n            }\r\n            dispatch(editSalesManIDSuccess({ Status: false }))\r\n        }\r\n    }, [])\r\n\r\n    useEffect(async () => {\r\n\r\n        if ((postMsg.Status === true) && (postMsg.StatusCode === 200)) {\r\n            dispatch(saveSalesManMasterSuccess({ Status: false }))\r\n            setState(() => resetFunction(fileds, state)) // Clear form values \r\n            dispatch(Breadcrumb_inputName(''))\r\n            if (pageMode === \"other\") {\r\n                customAlert({\r\n                    Type: 1,\r\n                    Message: postMsg.Message,\r\n                })\r\n            }\r\n            else {\r\n                let isPermission = await customAlert({\r\n                    Type: 1,\r\n                    Status: true,\r\n                    Message: postMsg.Message,\r\n                })\r\n                if (isPermission) {\r\n                    history.push({ pathname: url.SALESMAN_LIST })\r\n                }\r\n            }\r\n        }\r\n        else if (postMsg.Status === true) {\r\n            dispatch(getSalesManlistSuccess({ Status: false }))\r\n            customAlert({\r\n                Type: 4,\r\n                Message: JSON.stringify(postMsg.Message),\r\n            })\r\n        }\r\n    }, [postMsg])\r\n\r\n    useEffect(() => {\r\n        if (updateMsg.Status === true && updateMsg.StatusCode === 200 && !modalCss) {\r\n            setState(() => resetFunction(fileds, state)) // Clear form values \r\n            history.push({\r\n                pathname: url.SALESMAN_LIST,\r\n            })\r\n        } else if (updateMsg.Status === true && !modalCss) {\r\n            dispatch(updateSalesManIDSuccess({ Status: false }));\r\n            customAlert({\r\n                Type: 3,\r\n                Message: JSON.stringify(updateMsg.Message),\r\n            })\r\n        }\r\n    }, [updateMsg, modalCss]);\r\n\r\n    useEffect(() => {\r\n        if (pageField) {\r\n            const fieldArr = pageField.PageFieldMaster\r\n            comAddPageFieldFunc({ state, setState, fieldArr })\r\n        }\r\n    }, [pageField])\r\n\r\n    const RoutesListOptions = RoutesList.map((index) => ({\r\n        value: index.id,\r\n        label: index.Name,\r\n        IsActive: index.IsActive\r\n    }));\r\n\r\n    const RouteName_Options = RoutesListOptions.filter((index) => {\r\n        return index.IsActive === true\r\n    });\r\n\r\n    const partySelectButtonHandler = (e) => {\r\n        const jsonBody = JSON.stringify({\r\n            ...loginJsonBody(),\r\n            PartyID: loginSelectedPartyID(),\r\n        });\r\n        dispatch(GetRoutesList(jsonBody));\r\n    }\r\n\r\n    function partySelectOnChangeHandler() {\r\n        dispatch(GetRoutesListSuccess([]));\r\n        setState((i) => {\r\n            let a = { ...i }\r\n            a.values.SalesmanRoute = []\r\n            a.hasValid.SalesmanRoute.valid = true;\r\n            return a\r\n        })\r\n    }\r\n\r\n    const SaveHandler = async (event) => {\r\n\r\n        event.preventDefault();\r\n        const btnId = event.target.id\r\n        try {\r\n            if ((loginSelectedPartyID() === 0)) {\r\n                customAlert({ Type: 3, Message: \"Please Select Party\" });\r\n                return;\r\n            };\r\n            if (formValid(state, setState)) {\r\n                btnIsDissablefunc({ btnId, state: true })\r\n\r\n                const routeArr = values.SalesmanRoute.map((i) => ({\r\n                    Route: i.value,\r\n                }))\r\n\r\n                const jsonBody = JSON.stringify({\r\n                    Name: values.Name,\r\n                    MobileNo: values.MobileNo,\r\n                    IsActive: values.IsActive,\r\n                    Party: loginSelectedPartyID(),\r\n                    SalesmanRoute: routeArr,\r\n                    Company: loginCompanyID(),\r\n                    CreatedBy: loginUserID(),\r\n                    UpdatedBy: loginUserID()\r\n                });\r\n\r\n                if (pageMode === mode.edit) {\r\n                    dispatch(updateSalesManID({ jsonBody, updateId: values.id, btnId }));\r\n                }\r\n                else {\r\n                    dispatch(saveSalesManMaster({ jsonBody, btnId }));\r\n                }\r\n            }\r\n        } catch (e) { btnIsDissablefunc({ btnId, state: false }) }\r\n    };\r\n\r\n    // IsEditMode_Css is use of module Edit_mode (reduce page-content marging)\r\n    var IsEditMode_Css = ''\r\n    if ((modalCss) || (pageMode === mode.dropdownAdd)) { IsEditMode_Css = \"-5.5%\" };\r\n\r\n    if (!(userPageAccessState === '')) {\r\n        return (\r\n            <React.Fragment>\r\n                <MetaTags>{metaTagLabel(userPageAccessState)}</MetaTags>\r\n\r\n                <div className=\"page-content\" style={{ marginTop: IsEditMode_Css }}>\r\n                    <PartyDropdown_Common pageMode={pageMode}\r\n                        goButtonHandler={partySelectButtonHandler}\r\n                        changeButtonHandler={partySelectOnChangeHandler}\r\n                    />\r\n\r\n                    <Container fluid>\r\n                        <Card className=\"text-black\" style={{ marginTop: \"3px\" }}>\r\n                            <CardHeader className=\"card-header   text-black c_card_header\">\r\n                                <h4 className=\"card-title text-black\">{userPageAccessState.PageDescription}</h4>\r\n                                <p className=\"card-title-desc text-black\">{userPageAccessState.PageDescriptionDetails}</p>\r\n                            </CardHeader>\r\n\r\n                            <CardBody className=\" vh-10 0 text-black\" style={{ backgroundColor: \"#whitesmoke\" }} >\r\n                                <form noValidate>\r\n                                    <Row className=\"\">\r\n                                        <Col md={12}>\r\n                                            <Card>\r\n                                                <CardBody className=\"c_card_body\">\r\n                                                    <Row>\r\n                                                        <FormGroup className=\"mb-2 col col-sm-4 \">\r\n                                                            <Label htmlFor=\"validationCustom01\">{fieldLabel.Name}</Label>\r\n                                                            <Input\r\n                                                                name=\"Name\"\r\n                                                                id=\"txtName\"\r\n                                                                value={values.Name}\r\n                                                                type=\"text\"\r\n                                                                className={isError.Name.length > 0 ? \"is-invalid form-control\" : \"form-control\"}\r\n                                                                placeholder=\"Please Enter Name\"\r\n                                                                autoComplete=\"off\"\r\n                                                                autoFocus={true}\r\n                                                                onChange={(event) => {\r\n                                                                    onChangeText({ event, state, setState })\r\n                                                                    dispatch(Breadcrumb_inputName(event.target.value))\r\n                                                                }}\r\n                                                            />\r\n                                                            {isError.Name.length > 0 && (\r\n                                                                <span className=\"invalid-feedback\">{isError.Name}</span>\r\n                                                            )}\r\n                                                        </FormGroup>\r\n                                                    </Row>\r\n                                                    <Row>\r\n                                                        <FormGroup className=\"mt-2 col col-sm-4 \">\r\n                                                            <Label htmlFor=\"validationCustom01\">Mobile Number </Label>\r\n                                                            <Input\r\n                                                                name=\"MobileNo\"\r\n                                                                value={values.MobileNo}\r\n                                                                type=\"text\"\r\n                                                                className={isError.MobileNo.length > 0 ? \"is-invalid form-control\" : \"form-control\"}\r\n                                                                placeholder=\"Please Enter Mobile\"\r\n                                                                autoComplete='off'\r\n                                                                onChange={(event) => {\r\n                                                                    onChangeText({ event, state, setState })\r\n                                                                }}\r\n                                                            />\r\n                                                            {isError.MobileNo.length > 0 && (\r\n                                                                <span className=\"invalid-feedback\">{isError.MobileNo}</span>\r\n                                                            )}\r\n                                                        </FormGroup>\r\n                                                    </Row>\r\n\r\n                                                    <Row>\r\n                                                        <FormGroup className=\"mt-2 col col-sm-4\">\r\n                                                            <Label htmlFor=\"validationCustom01\"> {fieldLabel.SalesmanRoute} </Label>\r\n                                                            <Select\r\n                                                                name=\"SalesmanRoute\"\r\n                                                                isMulti={true}\r\n                                                                value={values.SalesmanRoute}\r\n                                                                isSearchable={true}\r\n                                                                className=\"react-dropdown\"\r\n                                                                classNamePrefix=\"dropdown\"\r\n                                                                options={RouteName_Options}\r\n                                                                onChange={(hasSelect, evn) => onChangeSelect({ hasSelect, evn, state, setState, })}\r\n                                                            />\r\n                                                            {isError.SalesmanRoute.length > 0 && (\r\n                                                                <span className=\"text-danger f-8\"><small>{isError.SalesmanRoute}</small></span>\r\n                                                            )}\r\n                                                        </FormGroup>\r\n                                                    </Row>\r\n\r\n                                                    <Row>\r\n                                                        <FormGroup className=\"mt-2 col col-sm-5\">\r\n                                                            <Row className=\"justify-content-md-left\">\r\n                                                                <Label htmlFor=\"horizontal-firstname-input\" className=\"col-sm-3 col-form-label\">{fieldLabel.IsActive}</Label>\r\n                                                                <Col md={2} style={{ marginTop: '9px' }} >\r\n                                                                    <div className=\"form-check form-switch form-switch-md mb-3\">\r\n                                                                        <Input type=\"checkbox\" className=\"form-check-input\"\r\n                                                                            checked={values.IsActive}\r\n                                                                            name=\"IsActive\"\r\n                                                                            onChange={(e) => {\r\n                                                                                setState((i) => {\r\n                                                                                    const a = { ...i }\r\n                                                                                    a.values.IsActive = e.target.checked;\r\n                                                                                    return a\r\n                                                                                })\r\n                                                                            }}\r\n                                                                        />\r\n                                                                    </div>\r\n                                                                </Col>\r\n                                                            </Row>\r\n                                                        </FormGroup>\r\n                                                    </Row>\r\n\r\n                                                    <FormGroup className=\"mt-2\">\r\n                                                        <Row>\r\n                                                            <Col sm={2}>\r\n                                                                <SaveButton pageMode={pageMode}\r\n                                                                    loading={saveBtnloading}\r\n                                                                    onClick={SaveHandler}\r\n                                                                    userAcc={userPageAccessState}\r\n                                                                    editCreatedBy={editCreatedBy}\r\n                                                                    module={\"SalesManMaster\"}\r\n                                                                />\r\n                                                            </Col>\r\n                                                        </Row>\r\n                                                    </FormGroup>\r\n\r\n                                                </CardBody>\r\n                                            </Card>\r\n                                        </Col>\r\n                                    </Row>\r\n                                </form>\r\n                            </CardBody>\r\n                        </Card>\r\n                    </Container>\r\n                </div>\r\n            </React.Fragment >\r\n        );\r\n    }\r\n    else {\r\n        return (\r\n            <React.Fragment></React.Fragment>\r\n        )\r\n    }\r\n};\r\n\r\nexport default SalesManMaster\r\n\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\SalesManPages\\SalesManList.js",["3627","3628","3629","3630"],"import React, { useEffect, useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport SalesManMaster from \"./SalesManMaster\";\r\nimport { commonPageFieldList, commonPageFieldListSuccess } from \"../../../store/actions\";\r\nimport * as pageId from \"../../../routes/allPageID\"\r\nimport * as url from \"../../../routes/route_url\";\r\nimport {\r\n    deleteSalesManID_Success,\r\n    deleteSalesManID,\r\n    editSalesManID,\r\n    saveSalesManMasterSuccess,\r\n    getSalesManlist,\r\n    updateSalesManIDSuccess,\r\n    getSalesManlistSuccess\r\n} from \"../../../store/Administrator/SalesManRedux/actions\";\r\nimport { loginJsonBody, loginSelectedPartyID } from \"../../../components/Common/CommonFunction\";\r\nimport CommonPurchaseList from \"../../../components/Common/CommonPurchaseList\";\r\nimport PartyDropdown_Common from \"../../../components/Common/PartyDropdown\";\r\nimport { PageLoadingSpinner } from \"../../../components/Common/CommonButton\";\r\nimport { customAlert } from \"../../../CustomAlert/ConfirmDialog\";\r\n\r\nconst SalesManList = (props) => {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const reducers = useSelector(\r\n        (state) => ({\r\n            goBtnLoading: state.SalesManReducer.goBtnLoading,\r\n            listBtnLoading: state.SalesManReducer.listBtnLoading,\r\n            tableList: state.SalesManReducer.SalesManList,\r\n            postMsg: state.SalesManReducer.PostData,\r\n            editData: state.SalesManReducer.editData,\r\n            updateMsg: state.SalesManReducer.updateMessage,\r\n            deleteMsg: state.SalesManReducer.deleteMessage,\r\n            userAccess: state.Login.RoleAccessUpdateData,\r\n            pageField: state.CommonPageFieldReducer.pageFieldList\r\n        })\r\n    );\r\n\r\n    const { pageField, goBtnLoading, tableList } = reducers;\r\n\r\n    const action = {\r\n        getList: getSalesManlist,\r\n        editId: editSalesManID,\r\n        deleteId: deleteSalesManID,\r\n        postSucc: saveSalesManMasterSuccess,\r\n        updateSucc: updateSalesManIDSuccess,\r\n        deleteSucc: deleteSalesManID_Success,\r\n    }\r\n\r\n    //  This UseEffect => Featch Modules List data  First Rendering\r\n    useEffect(() => {\r\n        const page_Id = pageId.SALESMAN_LIST\r\n        dispatch(commonPageFieldListSuccess(null))\r\n        dispatch(commonPageFieldList(page_Id))\r\n        if (!(loginSelectedPartyID() === 0)) {\r\n            goButtonHandler()\r\n        }\r\n        return () => {\r\n            dispatch(getSalesManlistSuccess([]));\r\n            dispatch(commonPageFieldListSuccess(null))\r\n        }\r\n    }, []);\r\n\r\n    const goButtonHandler = () => {\r\n        try {\r\n            const loginParty = loginSelectedPartyID();\r\n            if (loginParty === 0) {\r\n                customAlert({ Type: 3, Message: \"Please Select Party\" });\r\n                return;\r\n            };\r\n            dispatch(getSalesManlist({\r\n                ...loginJsonBody(),\r\n                PartyID: loginSelectedPartyID()\r\n            }));\r\n        } catch (error) { }\r\n        return\r\n    };\r\n\r\n    const partyOnChngeButtonHandler = (e) => {\r\n        dispatch(getSalesManlistSuccess([]));\r\n    }\r\n\r\n    return (\r\n\r\n        <React.Fragment>\r\n            <PageLoadingSpinner isLoading={(goBtnLoading || !pageField)} />\r\n            <div className=\"page-content\">\r\n                <PartyDropdown_Common \r\n                    goBtnLoading={goBtnLoading}\r\n                    goButtonHandler={goButtonHandler}\r\n                    changeButtonHandler={partyOnChngeButtonHandler}\r\n                />\r\n                {\r\n                    (pageField) &&\r\n                    <>\r\n                        <div className=\"mt-n1\">\r\n                            <CommonPurchaseList\r\n                                action={action}\r\n                                reducers={reducers}\r\n                                showBreadcrumb={false}\r\n                                MasterModal={SalesManMaster}\r\n                                masterPath={url.SALESMAN}\r\n                                newBtnPath={url.SALESMAN}\r\n                                ButtonMsgLable={\"SalesMan\"}\r\n                                deleteName={\"Name\"}\r\n                                goButnFunc={goButtonHandler}\r\n                            />\r\n                        </div>\r\n                    </>\r\n                }\r\n            </div>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default SalesManList;\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\SalesManRedux\\saga.js",["3631"],"import { call, put, takeLatest } from \"redux-saga/effects\";\r\nimport {\r\n    deleteSalesManID_Success,\r\n    editSalesManIDSuccess,\r\n    saveSalesManMasterSuccess,\r\n    getSalesManlistSuccess,\r\n    updateSalesManIDSuccess,\r\n    SalesManApiErrorAction\r\n} from \"./actions\";\r\nimport {\r\n    SalesMan_Delete_API,\r\n    SalesMan_Edit_API,\r\n    SalesMan_Get_API,\r\n    SalesMan_Post_API,\r\n    SalesMan_Update_API\r\n} from \"../../../helpers/backend_helper\";\r\nimport {\r\n    DELETE_SALESMAN_ID,\r\n    EDIT_SALESMAN_ID,\r\n    GET_SALESMAN_LIST,\r\n    SAVE_SALES_MAN_MASTER,\r\n    UPDATE_SALESMAN_ID\r\n} from \"./actionTypes\";\r\nimport { CommonConsole, loginJsonBody } from \"../../../components/Common/CommonFunction\";\r\n\r\nfunction* save_SalesMan_Master_GenFun({ config = {} }) {\r\n    try {\r\n        const response = yield call(SalesMan_Post_API, config);\r\n        yield put(saveSalesManMasterSuccess(response));\r\n    } catch (error) { yield put(SalesManApiErrorAction()) }\r\n}\r\n\r\nfunction* Post_SalesMan_List_GenratorFunction({ jsonBody }) {\r\n    \r\n    const filters = (!jsonBody ? JSON.stringify(loginJsonBody()) : jsonBody);// required only PartyID and CompanyID\r\n    try {\r\n        const response = yield call(SalesMan_Get_API, filters);\r\n        yield put(getSalesManlistSuccess(response.Data));\r\n    } catch (error) { yield put(SalesManApiErrorAction()) }\r\n}\r\n\r\nfunction* Edit_SalesMan_ID_GenratorFunction({ config = {} }) {\r\n    const { btnmode } = config;\r\n    try {\r\n        const response = yield call(SalesMan_Edit_API, config);\r\n        response.pageMode = btnmode\r\n        yield put(editSalesManIDSuccess(response));\r\n    } catch (error) { yield put(SalesManApiErrorAction()) }\r\n}\r\n\r\nfunction* Update_SalesMan_ID_GenratorFunction({ config = {} }) {\r\n    try {\r\n        const response = yield call(SalesMan_Update_API, config);\r\n        yield put(updateSalesManIDSuccess(response))\r\n    } catch (error) { yield put(SalesManApiErrorAction()) }\r\n}\r\n\r\nfunction* Delete_SalesMan_ID_GenratorFunction({ config = {} }) {\r\n    try {\r\n        const response = yield call(SalesMan_Delete_API, config);\r\n        yield put(deleteSalesManID_Success(response))\r\n    } catch (error) { yield put(SalesManApiErrorAction()) }\r\n}\r\n\r\nfunction* SalesManSaga() {\r\n    yield takeLatest(SAVE_SALES_MAN_MASTER, save_SalesMan_Master_GenFun)\r\n    yield takeLatest(GET_SALESMAN_LIST, Post_SalesMan_List_GenratorFunction)\r\n    yield takeLatest(DELETE_SALESMAN_ID, Delete_SalesMan_ID_GenratorFunction)\r\n    yield takeLatest(EDIT_SALESMAN_ID, Edit_SalesMan_ID_GenratorFunction)\r\n    yield takeLatest(UPDATE_SALESMAN_ID, Update_SalesMan_ID_GenratorFunction)\r\n}\r\n\r\nexport default SalesManSaga;","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\SalesManRedux\\actionTypes.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\SalesManRedux\\actions.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\CreditLimitRedux\\saga.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\CreditLimitRedux\\reducer.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\CreditPages\\CreditLimitList.js",[],["3632","3633"],"D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\CreditPages\\CreditLimitMaster.js",["3634","3635","3636","3637","3638","3639","3640","3641","3642","3643","3644","3645","3646","3647","3648"],"import {\r\n    Card,\r\n    CardBody,\r\n    CardHeader,\r\n    Col,\r\n    Container,\r\n    FormGroup,\r\n    Input,\r\n    Label,\r\n    Row\r\n} from \"reactstrap\";\r\nimport { MetaTags } from \"react-meta-tags\";\r\nimport { BreadcrumbShowCountlabel, Breadcrumb_inputName, commonPageFieldSuccess } from \"../../../store/actions\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { AlertState, commonPageField } from \"../../../store/actions\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {\r\n    comAddPageFieldFunc,\r\n    formValid,\r\n    initialFiledFunc,\r\n} from \"../../../components/Common/validationFunction\";\r\nimport Select from \"react-select\";\r\nimport { Go_Button, SaveButton } from \"../../../components/Common/CommonButton\";\r\nimport {\r\n    breadcrumbReturnFunc,\r\n    btnIsDissablefunc,\r\n    loginPartyID,\r\n    metaTagLabel\r\n} from \"../../../components/Common/CommonFunction\";\r\nimport paginationFactory, { PaginationListStandalone, PaginationProvider } from \"react-bootstrap-table2-paginator\";\r\nimport ToolkitProvider from \"react-bootstrap-table2-toolkit\";\r\nimport BootstrapTable from \"react-bootstrap-table-next\";\r\nimport * as pageId from \"../../../routes//allPageID\";\r\nimport * as url from \"../../../routes/route_url\";\r\nimport * as mode from \"../../../routes/PageMode\";\r\nimport { countlabelFunc } from \"../../../components/Common/CommonPurchaseList\";\r\nimport { mySearchProps } from \"../../../components/Common/SearchBox/MySearch\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { GetRoutesList } from \"../../../store/Administrator/RoutesRedux/actions\";\r\nimport {\r\n    GoButton_For_CreditLimit_Add,\r\n    GoButton_For_CreditLimit_AddSuccess,\r\n    postCreditLimit,\r\n    postCreditLimitSuccess\r\n} from \"../../../store/Administrator/CreditLimitRedux/actions\";\r\nimport * as commonFunc from \"../../../components/Common/CommonFunction\";\r\n\r\n\r\nconst CreditLimitMaster = (props) => {\r\n\r\n    const dispatch = useDispatch();\r\n    const history = useHistory()\r\n    const [modalCss, setModalCss] = useState(false);\r\n    const [pageMode, setPageMode] = useState(mode.defaultsave);\r\n    const [userPageAccessState, setUserAccState] = useState('');\r\n    const [RouteSelect, setRouteSelect] = useState([]);\r\n\r\n    const fileds = {\r\n        id: \"\",\r\n        RoutesName: \"\"\r\n    }\r\n    const [state, setState] = useState(() => initialFiledFunc(fileds))\r\n\r\n    //Access redux store Data /  'save_ModuleSuccess' action data\r\n    const {\r\n        postMsg,\r\n        updateMsg,\r\n        pageField,\r\n        userAccess,\r\n        RoutesList,\r\n        Data\r\n    } = useSelector((state) => ({\r\n        postMsg: state.CreditLimitReducer.postMsg,\r\n        userAccess: state.Login.RoleAccessUpdateData,\r\n        pageField: state.CommonPageFieldReducer.pageField,\r\n        Routes: state.CreditLimitReducer.Routes,\r\n        Data: state.CreditLimitReducer.goButtonCreditLimit,\r\n        RoutesList: state.RoutesReducer.RoutesList,\r\n    }));\r\n\r\n    const location = { ...history.location }\r\n    const hasShowloction = location.hasOwnProperty(mode.editValue)\r\n    const hasShowModal = props.hasOwnProperty(mode.editValue)\r\n\r\n    const values = { ...state.values }\r\n    const { isError } = state;\r\n    const { fieldLabel } = state;\r\n\r\n    useEffect(() => {\r\n        dispatch(GoButton_For_CreditLimit_AddSuccess([]))\r\n        const page_Id = pageId.CREDITLIMIT\r\n        dispatch(commonPageFieldSuccess(null));\r\n        dispatch(commonPageField(page_Id))\r\n        dispatch(GetRoutesList());\r\n    }, []);\r\n\r\n    // userAccess useEffect\r\n    useEffect(() => {\r\n        let userAcc = null;\r\n        let locationPath = location.pathname;\r\n        if (hasShowModal) {\r\n            locationPath = props.masterPath;\r\n        };\r\n        userAcc = userAccess.find((inx) => {\r\n            return (`/${inx.ActualPagePath}` === locationPath)\r\n        })\r\n        if (userAcc) {\r\n            setUserAccState(userAcc)\r\n            breadcrumbReturnFunc({ dispatch, userAcc });\r\n        };\r\n    }, [userAccess])\r\n\r\n    useEffect(() => {\r\n        if ((postMsg.Status === true) && (postMsg.StatusCode === 200) && !(pageMode === \"dropdownAdd\")) {\r\n            dispatch(postCreditLimitSuccess({ Status: false }))\r\n            dispatch(GoButton_For_CreditLimit_AddSuccess([]))\r\n            setRouteSelect('')\r\n            dispatch(Breadcrumb_inputName(''))\r\n\r\n            if (pageMode === mode.dropdownAdd) {\r\n                dispatch(AlertState({\r\n                    Type: 1,\r\n                    Status: true,\r\n                    Message: postMsg.Message,\r\n                }))\r\n            }\r\n            else {\r\n                dispatch(AlertState({\r\n                    Type: 1,\r\n                    Status: true,\r\n                    Message: postMsg.Message,\r\n                    RedirectPath: url.CREDITLIMIT,\r\n\r\n                }))\r\n            }\r\n        }\r\n        else if ((postMsg.Status === true) && !(pageMode === \"dropdownAdd\")) {\r\n            dispatch(postCreditLimitSuccess({ Status: false }))\r\n            dispatch(AlertState({\r\n                Type: 4,\r\n                Status: true,\r\n                Message: JSON.stringify(postMsg.Message),\r\n                RedirectPath: false,\r\n                AfterResponseAction: false\r\n            }));\r\n        }\r\n    }, [postMsg.Status])\r\n\r\n    useEffect(() => {\r\n        if (pageField) {\r\n            const fieldArr = pageField.PageFieldMaster\r\n            comAddPageFieldFunc({ state, setState, fieldArr })\r\n        }\r\n    }, [pageField])\r\n\r\n    useEffect(() => {\r\n        dispatch(BreadcrumbShowCountlabel(`${\" Credit Limit Count\"} :${Data.length}`))\r\n    }, [Data])\r\n\r\n    useEffect(commonFunc.tableInputArrowUpDounFunc(\"#table_Arrow\"), [Data]);\r\n\r\n    const RoutesDropdown_options = RoutesList.map((index) => ({\r\n        value: index.id,\r\n        label: index.Name,\r\n    }));\r\n\r\n    const goButtonHandler = (event) => {\r\n\r\n        if (RouteSelect.value === undefined) {\r\n            {\r\n                dispatch(\r\n                    AlertState({\r\n                        Type: 4,\r\n                        Status: true,\r\n                        Message: \"Please Select Route\",\r\n                    })\r\n                );\r\n                return;\r\n            }\r\n        }\r\n        const jsonBody = JSON.stringify({\r\n            Party: loginPartyID(),\r\n            Route: RouteSelect.value\r\n        });\r\n        dispatch(GoButton_For_CreditLimit_Add(jsonBody));\r\n    }\r\n\r\n    function CreditlimitHandler(event, user) {\r\n\r\n        let val = event.target.value;\r\n        const result = /^-?([0-9]*\\.?[0-9]+|[0-9]+\\.?[0-9]*)$/.test(val);\r\n        if ((result) && (parseFloat(event.target.value).toFixed(3))) {\r\n            user.Creditlimit = event.target.value;\r\n        }\r\n        else if (val === \"\") {\r\n            user.Creditlimit = event.target.value;\r\n        }\r\n        else {\r\n            event.target.value = user.Creditlimit\r\n        }\r\n    }\r\n\r\n    const pagesListColumns = [\r\n        {\r\n            text: \"SubPartyName\",\r\n            dataField: \"SubPartyName\",\r\n        },\r\n        {\r\n            text: \"Creditlimit\",\r\n            dataField: \"Creditlimit\",\r\n            formatter: (cellContent, user) => (\r\n                <>\r\n                    <div style={{ justifyContent: 'center' }} >\r\n                        <Col>\r\n                            <FormGroup className=\" col col-sm-4 \">\r\n                                <Input\r\n                                    id=\"\"\r\n                                    type=\"text\"\r\n                                    defaultValue={user.Creditlimit}\r\n                                    className=\"col col-sm text-center\"\r\n                                    onChange={(e) => CreditlimitHandler(e, user)}\r\n                                />\r\n                            </FormGroup>\r\n                        </Col>\r\n                    </div>\r\n\r\n                </>\r\n            ),\r\n        },\r\n    ];\r\n\r\n    const pageOptions = {\r\n        sizePerPage: 10,\r\n        totalSize: Data.length,\r\n        custom: true,\r\n    };\r\n\r\n    const SaveHandler = async (event) => {\r\n\r\n        event.preventDefault();\r\n        const btnId = event.target.id\r\n        try {\r\n            if (formValid(state, setState)) {\r\n                btnIsDissablefunc({ btnId, state: true })\r\n                const data = Data.map((index) => ({\r\n                    id: index.id,\r\n                    Party: index.Party,\r\n                    SubParty: index.SubParty,\r\n                    Creditlimit: index.Creditlimit,\r\n                }))\r\n\r\n                const Find = data.filter((index) => {\r\n                    return !(index.Creditlimit === '')\r\n                })\r\n                const jsonBody = JSON.stringify({\r\n                    Data: Find\r\n                })\r\n                dispatch(postCreditLimit({ jsonBody, btnId }));\r\n\r\n            }\r\n        } catch (e) { btnIsDissablefunc({ btnId, state: false }) }\r\n    };\r\n\r\n    // IsEditMode_Css is use of module Edit_mode (reduce page-content marging)\r\n    var IsEditMode_Css = ''\r\n    if ((modalCss) || (pageMode === mode.dropdownAdd)) { IsEditMode_Css = \"-5.5%\" };\r\n\r\n    if (!(userPageAccessState === '')) {\r\n        return (\r\n            <React.Fragment>\r\n                <MetaTags>{metaTagLabel(userPageAccessState)}</MetaTags>\r\n\r\n                <div className=\"page-content\" style={{ marginTop: IsEditMode_Css, height: \"18cm\" }}>\r\n                    <Container fluid>\r\n                        <Card className=\"text-black\">\r\n                            <CardHeader className=\"card-header   text-black c_card_header\" >\r\n                                <h4 className=\"card-title text-black\">{userPageAccessState.PageDescription}</h4>\r\n                                <p className=\"card-title-desc text-black\">{userPageAccessState.PageDescriptionDetails}</p>\r\n                            </CardHeader>\r\n\r\n                            <CardBody className=\" vh-10 0 text-black\" style={{ backgroundColor: \"#whitesmoke\" }} >\r\n                                <form noValidate>\r\n                                    <Row className=\"\">\r\n                                        <Col md={12}>\r\n                                            <Card>\r\n                                                <CardBody className=\"c_card_body\">\r\n                                                    <Row>\r\n                                                        <Row>\r\n                                                            <Col md=\"4\" >\r\n                                                                <FormGroup className=\" row  mt-2\" >\r\n                                                                    <Label className=\"mt-1\"\r\n                                                                        style={{ width: \"150px\" }}>Routes </Label>\r\n                                                                    <div className=\"col col-6 sm-1\">\r\n                                                                        <Select\r\n                                                                            name=\"RoutesName\"\r\n                                                                            value={RouteSelect}\r\n                                                                            isSearchable={true}\r\n                                                                            // isDisabled={(Data.length > 0) ? true : false}\r\n                                                                            className=\"react-dropdown\"\r\n                                                                            classNamePrefix=\"dropdown\"\r\n                                                                            options={RoutesDropdown_options}\r\n                                                                            onChange={(e) => { setRouteSelect(e) }}\r\n                                                                        />\r\n                                                                        {/* {isError.RoutesName.length > 0 && (\r\n                                                                            <span className=\"text-danger f-8\"><small>{isError.RoutesName}</small></span>\r\n                                                                        )} */}\r\n                                                                    </div>\r\n                                                                </FormGroup>\r\n                                                            </Col>\r\n\r\n\r\n                                                            <Col sm={1}>\r\n                                                                <div className=\"col col-1 mt-2\">\r\n                                                                    < Go_Button onClick={(e) => goButtonHandler()} />\r\n\r\n                                                                </div>\r\n                                                            </Col>\r\n                                                        </Row>\r\n                                                    </Row>\r\n                                                </CardBody>\r\n                                            </Card>\r\n                                        </Col>\r\n                                    </Row>\r\n\r\n                                    <PaginationProvider\r\n                                        pagination={paginationFactory(pageOptions)}\r\n                                    >\r\n                                        {({ paginationProps, paginationTableProps }) => (\r\n                                            <ToolkitProvider\r\n                                                keyField=\"id\"\r\n                                                data={Data}\r\n                                                columns={pagesListColumns}\r\n                                                search\r\n                                            >\r\n                                                {toolkitProps => (\r\n                                                    <React.Fragment>\r\n                                                        <div className=\"table\">\r\n                                                            <BootstrapTable\r\n                                                                keyField={\"id\"}\r\n                                                                id=\"table_Arrow\"\r\n                                                                bordered={true}\r\n                                                                striped={false}\r\n                                                                noDataIndication={<div className=\"text-danger text-center \">Creditlimit Not available</div>}\r\n                                                                classes={\"table align-middle table-nowrap table-hover\"}\r\n                                                                headerWrapperClasses={\"thead-light\"}\r\n\r\n                                                                {...toolkitProps.baseProps}\r\n                                                                {...paginationTableProps}\r\n                                                            />\r\n                                                            {countlabelFunc(toolkitProps, paginationProps, dispatch, \"MRP\")}\r\n                                                            {mySearchProps(toolkitProps.searchProps)}\r\n                                                        </div>\r\n\r\n                                                        <Row className=\"align-items-md-center mt-30\">\r\n                                                            <Col className=\"pagination pagination-rounded justify-content-end mb-2\">\r\n                                                                <PaginationListStandalone\r\n                                                                    {...paginationProps}\r\n                                                                />\r\n                                                            </Col>\r\n                                                        </Row>\r\n                                                    </React.Fragment>\r\n                                                )\r\n                                                }\r\n                                            </ToolkitProvider>\r\n                                        )\r\n                                        }\r\n\r\n                                    </PaginationProvider>\r\n\r\n                                    {Data.length > 0 ? <FormGroup style={{ marginTop: \"-25px\" }}>\r\n                                        <Row >\r\n                                            <Col sm={2} className=\"mt-n4\">\r\n                                                <SaveButton pageMode={pageMode}\r\n                                                    onClick={SaveHandler}\r\n                                                    userAcc={userPageAccessState}\r\n                                                    module={\"CreditLimitMaster\"}\r\n                                                />\r\n                                            </Col>\r\n                                        </Row>\r\n                                    </FormGroup >\r\n                                        : null\r\n                                    }\r\n                                </form>\r\n                            </CardBody>\r\n                        </Card>\r\n                    </Container>\r\n                </div>\r\n            </React.Fragment >\r\n        );\r\n    }\r\n    else {\r\n        return (\r\n            <React.Fragment></React.Fragment>\r\n        )\r\n    }\r\n};\r\n\r\nexport default CreditLimitMaster\r\n\r\n",["3649","3650"],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\CreditLimitRedux\\actions.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\CreditLimitRedux\\actionTypes.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\Reports\\Invoice report a5\\Page.js",["3651","3652","3653"],"// import jsPDF from \"jspdf\";\r\n// import \"jspdf-autotable\";\r\n// import * as style from './ReportStyle'\r\n// import { Data1, dataGenrator } from \"./DemoData\";\r\n// import { compareGSTINState } from \"../../components/Common/CommonFunction\";\r\n// import { E_invoiceQRCode } from \"../../helpers/other_domain_api\";\r\n\r\n// var pageHeder = function (doc, data) {\r\n\r\n//     style.pageBorder(doc, data);                           // Page Border\r\n//     style.pageHeder(doc, data);                            // Report Title \r\n//     style.reportHeder1(doc, data);\r\n//     style.reportHeder2(doc, data);\r\n//     style.reportHeder3(doc, data);                          //Invoice ID , Date \r\n// };\r\n\r\n// function reportBody(doc, data) {\r\n//     const isIGST = compareGSTINState(data.CustomerGSTIN, data.PartyGSTIN)\r\n//     if (isIGST) {\r\n//         style.tableBodyWithIGST(doc, data);                 //table Body\r\n//     } else {\r\n//         style.tableBody(doc, data);\r\n//     }\r\n\r\n// }\r\n// function pageFooter(doc, data, islast, array) {\r\n//     style.reportFooter(doc, data);                           //Report Footer\r\n//     style.pageFooter(doc, data, islast, array);              //page Footer\r\n// }\r\n\r\n// const InvioceReporta5 = async (data) => {\r\n\r\n//     var doc = new jsPDF('l', 'pt', 'a5');\r\n\r\n//     if (Array.isArray(data)) {\r\n//         for (let i = 0; i < data.length; i++) {\r\n//             data[i].SettingData = data.SettingData;\r\n//         }\r\n\r\n//         data.forEach((data, islast, array) => {\r\n//             pageHeder(doc, data);\r\n//             reportBody(doc, data);                                   // condition for Mulitinvoice invoice\r\n//             pageFooter(doc, data, islast, array);\r\n//             if (!(array.length - 1 === islast)) {\r\n//                 doc.addPage();\r\n//             }\r\n//         })\r\n//     } else {\r\n//         const Data = []\r\n//         Data.push(data)\r\n//         Data.forEach((data, islast, array) => {\r\n//             pageHeder(doc, data);                                    // condition for singel invoice\r\n//             reportBody(doc, data);\r\n//             pageFooter(doc, data, islast, array);\r\n//             if (!(array.length - 1 === islast)) {\r\n//                 doc.addPage();\r\n//             }\r\n//         })\r\n//     }\r\n\r\n//     doc.setProperties({\r\n//         title: \" Invoice Report\"\r\n//     });\r\n//     doc.output('dataurlnewwindow', { filename: \"Invoice Report\" });\r\n\r\n// }\r\n// export default InvioceReporta5;\r\n\r\n\r\n\r\nimport jsPDF from \"jspdf\";\r\nimport \"jspdf-autotable\";\r\nimport * as style from './ReportStyle'\r\nimport { Data1, dataGenrator } from \"./DemoData\";\r\nimport { CurrentTime, compareGSTINState, currentDate_dmy } from \"../../components/Common/CommonFunction\";\r\nimport { E_invoiceQRCode } from \"../../helpers/other_domain_api\";\r\n\r\nvar pageHeder = function (doc, data) {\r\n    if (data.isMultiPrint) {\r\n        const pageCount = doc.internal.getNumberOfPages()\r\n        doc.setFont('helvetica', 'Normal')\r\n        doc.setFontSize(8)\r\n        doc.text('Page' + String(pageCount), 500, 403,)\r\n        doc.text('Print Date :' + String(currentDate_dmy) + ' Time ' + String(CurrentTime()), 30, 403,)\r\n\r\n    }\r\n    style.pageBorder(doc, data);                           // Page Border\r\n    style.pageHeder(doc, data);                            // Report Title \r\n    style.reportHeder1(doc, data);\r\n    style.reportHeder3(doc, data);                          //Invoice ID , Date \r\n};\r\n\r\nfunction reportBody(doc, data) {\r\n    const isIGST = compareGSTINState(data.CustomerGSTIN, data.PartyGSTIN)\r\n    if (isIGST) {\r\n        style.tableBodyWithIGST(doc, data);                 //table Body\r\n    } else {\r\n        style.tableBody(doc, data);\r\n    }\r\n}\r\n\r\nfunction pageFooter(doc, data, islast, array) {\r\n    style.reportFooter(doc, data);                           //Report Footer\r\n    style.pageFooter(doc, data, islast, array);              //page Footer\r\n}\r\n\r\nconst generateReportPage = (doc, data) => {\r\n    pageHeder(doc, data);\r\n    reportBody(doc, data);\r\n    pageFooter(doc, data);\r\n}\r\n\r\nconst InvioceReporta5 = async (data) => {\r\n    var doc = new jsPDF('l', 'pt', 'a5');\r\n\r\n    const BATCH_SIZE = 40; // You can adjust the batch size according to your needs\r\n\r\n    if (Array.isArray(data)) {\r\n\r\n        // doc.text('Page' + String(\"2\") + ' of ' + String(\"1\"), 500, 390,)\r\n        // doc.text('Print Date :' + String(currentDate_dmy) + ' Time ' + String(CurrentTime()), 30, 390,)\r\n\r\n\r\n        for (let i = 0; i < data.length; i += BATCH_SIZE) {\r\n            const batch = data.slice(i, i + BATCH_SIZE);\r\n            batch.forEach((item, index) => {\r\n                // flag for condition check in loading sheet multiple invoice print \r\n                item[\"isMultiPrint\"] = true\r\n                item.SettingData = data.SettingData;\r\n                generateReportPage(doc, item);\r\n                if (index !== batch.length - 1) {\r\n                    doc.addPage();\r\n                }\r\n            });\r\n        }\r\n\r\n\r\n\r\n    } else {\r\n        const Data = [data];\r\n        Data.forEach((item, index) => {\r\n            item[\"isMultiPrint\"] = false\r\n            generateReportPage(doc, item);\r\n            if (index !== Data.length - 1) {\r\n                doc.addPage();\r\n            }\r\n        });\r\n    }\r\n    doc.setProperties({\r\n        title: `InvoiceReport/${data.CustomerName}/${data.InvoiceDate} `\r\n    });\r\n\r\n    function generateSaveAndOpenPDFReport() {\r\n        const pdfUrl = URL.createObjectURL(doc.output('blob'));\r\n        window.open(pdfUrl);\r\n    }\r\n    generateSaveAndOpenPDFReport();\r\n\r\n}\r\n\r\nexport default InvioceReporta5;\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\Reports\\Invoice report a5\\ReportStyle.js",["3654","3655","3656","3657"],"\r\n\r\n// import reportHederPng from \"../../assets/images/reportHeder.png\"\r\nimport upi_qr_code from \"../../assets/images/upi_qr_code.png\"\r\nimport * as table from './TableData'\r\nimport { numberWithCommas, toWords } from \"../Report_common_function\";\r\nimport { date_dmy_func, convertOnlyTimefunc, convertTimefunc, currentDate_dmy, CurrentTime, compareGSTINState } from \"../../components/Common/CommonFunction\";\r\n\r\n\r\nexport const pageBorder = (doc) => {\r\n    doc.setDrawColor(0, 0, 0);\r\n    doc.setLineWidth(0.5)\r\n    doc.line(570, 16, 30, 16);//horizontal line (Top)\r\n    doc.line(30, 393, 30, 16);//vertical line (left)\r\n    doc.line(570, 393, 570, 16);//vertical line (Right)\r\n    doc.line(570, 393, 30, 393);//horizontal line (Bottom)   \r\n}\r\nlet initial_y = 0\r\n\r\nexport const pageHeder = (doc, data) => {\r\n    doc.setFont('Tahoma')\r\n    doc.setFont(undefined, 'bold')\r\n    doc.setFontSize(15)\r\n    doc.text('TAX INVOICE', 180, 35,)\r\n    doc.setDrawColor(0, 0, 0);\r\n    doc.line(570, 45, 30, 45) //Full horizontal line Bill by Upper line\r\n    doc.setFontSize(7)\r\n    doc.text('Original For Buyer', 33, 28,)\r\n\r\n}\r\n\r\nexport const reportHeder1 = (doc, data) => {\r\n    doc.setFont('Tahoma')\r\n    doc.setFontSize(10)\r\n    doc.setFont(undefined, 'bold')\r\n    doc.text(\"Billed by\", 80, 55)    //bill by \r\n    doc.text('Billed to', 280, 55)   //billed to\r\n    doc.text('Details of Transport', 440, 55) //Details of Transport\r\n    doc.line(570, 45, 30, 45);//horizontal line  when header on next page bottom line\r\n    doc.line(570, 60, 30, 60);// full horizontal bill by bill to below line \r\n    doc.line(30, 350, 30, 16);//vertical left 1\r\n    doc.line(570, 350, 570, 16);//vertical left 2\r\n\r\n\r\n\r\n    var BilledByStyle = {\r\n\r\n        didDrawCell: (data1) => {\r\n\r\n            const rowIdx = data1.row.index;\r\n            const colIdx = data1.column.index;\r\n            if (rowIdx === 0 && colIdx === 0) {\r\n                let x = data1.cursor.x + 2\r\n                let y = data1.cursor.y + 8\r\n                doc.setFontSize(8)\r\n                doc.setFont(undefined, 'bold')\r\n                doc.text('Party: ', x, y)\r\n            };\r\n            if (rowIdx === 1 && colIdx === 0) {\r\n\r\n                let x = data1.cursor.x + 2\r\n                let y = data1.cursor.y + 8\r\n                doc.setFontSize(8)\r\n                doc.setFont(undefined, 'bold')\r\n                doc.text('Address: ', x, y)\r\n            };\r\n            if (rowIdx === 2 && colIdx === 0) {\r\n\r\n                let x = data1.cursor.x + 2\r\n                let y = data1.cursor.y + 8\r\n                doc.setFontSize(8)\r\n                doc.setFont(undefined, 'bold')\r\n                doc.text('State: ', x, y)\r\n            };\r\n            if (rowIdx === 3 && colIdx === 0) {\r\n\r\n                let x = data1.cursor.x + 2\r\n                let y = data1.cursor.y + 8\r\n                doc.setFontSize(8)\r\n                doc.setFont(undefined, 'bold')\r\n                doc.text('GSTIN: ', x, y)\r\n            };\r\n            if (rowIdx === 4 && colIdx === 0) {\r\n\r\n                let x = data1.cursor.x + 2\r\n                let y = data1.cursor.y + 8\r\n                doc.setFontSize(8)\r\n                doc.setFont(undefined, 'bold')\r\n                doc.text('FSSAI No: ', x, y)\r\n            };\r\n            if (rowIdx === 5 && colIdx === 0) {\r\n\r\n                let x = data1.cursor.x + 2\r\n                let y = data1.cursor.y + 8\r\n                doc.setFontSize(8)\r\n                doc.setFont(undefined, 'bold')\r\n                doc.text('Mobile No: ', x, y)\r\n            };\r\n\r\n        },\r\n        margin: {\r\n            top: 45, left: 30, right: 35,\r\n        },\r\n        showHead: 'always',\r\n        theme: 'plain',\r\n        styles: {\r\n            overflow: 'linebreak',\r\n            fontSize: 8,\r\n            height: 0,\r\n        },\r\n        bodyStyles: {\r\n            columnWidth: 'wrap',\r\n            textColor: \"black\",\r\n            cellPadding: 1,\r\n            fontSize: 8,\r\n            fontStyle: 'normal',\r\n            lineColor: [0, 0, 0]\r\n        },\r\n        columnStyles: {\r\n            0: {\r\n                valign: \"top\",\r\n                columnWidth: 190,\r\n                halign: 'lfet',\r\n            }\r\n\r\n        },\r\n        tableLineColor: \"black\",\r\n        startY: 62,\r\n\r\n    };\r\n    var BilledToStyle = {\r\n        didDrawCell: (data1) => {\r\n\r\n            const rowIdx = data1.row.index;\r\n            const colIdx = data1.column.index;\r\n            if (rowIdx === 0 && colIdx === 0) {\r\n                let x = data1.cursor.x + 2\r\n                let y = data1.cursor.y + 8\r\n                doc.setFontSize(8)\r\n                doc.setFont(undefined, 'bold')\r\n                doc.text('Customer: ', x, y)\r\n            };\r\n            if (rowIdx === 1 && colIdx === 0) {\r\n\r\n                let x = data1.cursor.x + 2\r\n                let y = data1.cursor.y + 8\r\n                doc.setFontSize(8)\r\n                doc.setFont(undefined, 'bold')\r\n                doc.text('Address: ', x, y)\r\n            };\r\n            if (rowIdx === 2 && colIdx === 0) {\r\n\r\n                let x = data1.cursor.x + 2\r\n                let y = data1.cursor.y + 8\r\n                doc.setFontSize(8)\r\n                doc.setFont(undefined, 'bold')\r\n                doc.text('State: ', x, y)\r\n            };\r\n            if (rowIdx === 3 && colIdx === 0) {\r\n\r\n                let x = data1.cursor.x + 2\r\n                let y = data1.cursor.y + 8\r\n                doc.setFontSize(8)\r\n                doc.setFont(undefined, 'bold')\r\n                doc.text('GSTIN: ', x, y)\r\n            };\r\n            if (rowIdx === 4 && colIdx === 0) {\r\n\r\n                let x = data1.cursor.x + 2\r\n                let y = data1.cursor.y + 8\r\n                doc.setFontSize(8)\r\n                doc.setFont(undefined, 'bold')\r\n                doc.text('FSSAI No: ', x, y)\r\n            };\r\n            if (rowIdx === 5 && colIdx === 0) {\r\n\r\n                let x = data1.cursor.x + 2\r\n                let y = data1.cursor.y + 8\r\n                doc.setFontSize(8)\r\n                doc.setFont(undefined, 'bold')\r\n                doc.text('Mobile No: ', x, y)\r\n            };\r\n\r\n        },\r\n        margin: {\r\n            top: 45, left: 220, right: 35,\r\n        },\r\n        showHead: 'always',\r\n        theme: 'plain',\r\n        styles: {\r\n            overflow: 'linebreak',\r\n            fontSize: 8,\r\n            height: 0,\r\n        },\r\n        bodyStyles: {\r\n            columnWidth: 'wrap',\r\n            textColor: \"black\",\r\n            cellPadding: 1,\r\n            fontSize: 8,\r\n\r\n            fontStyle: 'normal',\r\n            lineColor: [0, 0, 0]\r\n        },\r\n        columnStyles: {\r\n            0: {\r\n                valign: \"top\",\r\n                columnWidth: 188,\r\n                halign: 'lfet',\r\n            },\r\n        },\r\n        tableLineColor: \"black\",\r\n        startY: 62,\r\n\r\n    };\r\n    var DetailsOfTransportStyle = {\r\n\r\n        didDrawCell: (data1) => {\r\n\r\n            const rowIdx = data1.row.index;\r\n            const colIdx = data1.column.index;\r\n            if (rowIdx === 0 && colIdx === 0) {\r\n                let x = data1.cursor.x + 2\r\n                let y = data1.cursor.y + 8\r\n                doc.setFontSize(8)\r\n                doc.setFont(undefined, 'bold')\r\n                doc.text('PO No: ', x, y)\r\n            };\r\n            if (rowIdx === 1 && colIdx === 0) {\r\n\r\n                let x = data1.cursor.x + 2\r\n                let y = data1.cursor.y + 8\r\n                doc.setFontSize(8)\r\n                doc.setFont(undefined, 'bold')\r\n                doc.text('Driver Name: ', x, y)\r\n            };\r\n            if (rowIdx === 2 && colIdx === 0) {\r\n\r\n                let x = data1.cursor.x + 2\r\n                let y = data1.cursor.y + 8\r\n                doc.setFontSize(8)\r\n                doc.setFont(undefined, 'bold')\r\n                doc.text('Vehicle No: ', x, y)\r\n            };\r\n            if (rowIdx === 3 && colIdx === 0) {\r\n\r\n                let x = data1.cursor.x + 2\r\n                let y = data1.cursor.y + 8\r\n                doc.setFontSize(8)\r\n                doc.setFont(undefined, 'bold')\r\n                doc.text('E-way Bill: ', x, y)\r\n            };\r\n            if (rowIdx === 4 && colIdx === 0) {\r\n\r\n                let x = data1.cursor.x + 2\r\n                let y = data1.cursor.y + 8\r\n                doc.setFontSize(8)\r\n                doc.setFont(undefined, 'bold')\r\n                doc.text('IRN No: ', x, y)\r\n            };\r\n\r\n\r\n        },\r\n        margin: {\r\n            top: 45, left: 408, right: 35,\r\n        },\r\n        showHead: 'always',\r\n        theme: 'plain',\r\n        headerStyles: { cellPadding: 1, },\r\n        styles: {\r\n            overflow: 'linebreak',\r\n            fontSize: 8,\r\n            height: 0,\r\n        },\r\n        bodyStyles: {\r\n            columnWidth: 'wrap',\r\n            textColor: [30, 30, 30],\r\n            cellPadding: 1,\r\n            fontSize: 8,\r\n            textColor: \"black\",\r\n            fontStyle: 'normal',\r\n            lineColor: [0, 0, 0]\r\n        },\r\n        columnStyles: {\r\n            0: {\r\n                valign: \"top\",\r\n                columnWidth: 162,\r\n                halign: 'lfet',\r\n            },\r\n        },\r\n        tableLineColor: \"black\",\r\n\r\n        startY: 62,\r\n    };\r\n\r\n    const priLength = () => {\r\n        let final_y = doc.previousAutoTable.finalY\r\n        if (final_y > initial_y) {\r\n            initial_y = final_y\r\n        }\r\n    }\r\n\r\n    doc.autoTable(table.BilledBy, table.BilledByRow(data), BilledByStyle);\r\n    console.log(\"first\", doc.previousAutoTable.finalY)\r\n    priLength()\r\n\r\n    doc.autoTable(table.BilledTo, table.BilledToRow(data), BilledToStyle);\r\n    console.log(\"Second\", doc.previousAutoTable.finalY)\r\n    priLength()\r\n\r\n    doc.autoTable(table.DetailsOfTransport, table.DetailsOfTransportRow(data), DetailsOfTransportStyle);\r\n    console.log(\"third\", doc.previousAutoTable.finalY)\r\n    priLength()\r\n\r\n}\r\n\r\n\r\nexport const reportHeder3 = (doc, data) => {\r\n    doc.setFont('Tahoma')\r\n    doc.setFontSize(9)\r\n    doc.setDrawColor(0, 0, 0);\r\n    doc.line(570, 30, 408, 30) //horizontal line 1 billby upper\r\n    doc.line(408, 45, 408, 16);//vertical Line header\r\n    // doc.line(570, 44, 408, 44) //horizontal line 1 billby upper\r\n\r\n    doc.setFont(undefined, 'bold')\r\n    doc.text(`Invoice No:   ${data.FullInvoiceNumber}`, 415, 25) //Invoice Id\r\n    var date = date_dmy_func(data.InvoiceDate)\r\n    var time = convertOnlyTimefunc(data.CreatedOn)\r\n    doc.text(`Invoice Date: ${date}  ${time}`, 415, 40) //Invoice date\r\n\r\n}\r\n\r\n\r\nexport const reportFooter = (doc, data) => {\r\n\r\n    // doc.addImage(upi_qr_code, 'JPEG', 359, 310, 75, 65)\r\n    doc.setDrawColor(0, 0, 0);\r\n    doc.line(570, 308, 30, 308);//horizontal line  (4)\r\n    doc.line(570, 380, 435, 380);//horizontal line  (5)\r\n\r\n    doc.line(435, 308, 435, 393);//vertical line (3)\r\n    doc.line(340, 308, 340, 393);//vertical line (2)\r\n\r\n    const a = data.InvoiceItems.map((data) => ({\r\n\r\n        CGST: Number(data.CGST),\r\n        SGST: Number(data.SGST),\r\n        BasicAmount: Number(data.BasicAmount),\r\n        Discount: Number(data.DiscountAmount),\r\n        IGST: Number(data.IGST)\r\n    }));\r\n    var totalCGST = 0;\r\n    var totalSGST = 0;\r\n    var TotalBasicAmount = 0;\r\n    var TotalDiscount = 0\r\n    var totalICGST = 0\r\n    a.forEach(arg => {\r\n        totalCGST += arg.CGST;\r\n        totalSGST += arg.SGST;\r\n        TotalBasicAmount += arg.BasicAmount;\r\n        TotalDiscount += arg.Discount;\r\n        totalICGST += arg.IGST\r\n\r\n    });\r\n    const TotalGST = totalCGST + totalSGST;\r\n    doc.setFontSize(8)\r\n\r\n\r\n    const isIGST = compareGSTINState(data.CustomerGSTIN, data.PartyGSTIN)\r\n    if (isIGST) {\r\n\r\n        doc.text(`Total Basic:`, 440, 327,)\r\n        doc.text(`${TotalBasicAmount.toFixed(2)}`, 567, 327, 'right')\r\n\r\n        doc.text(`Total Disc:`, 440, 337,)\r\n        doc.text(` ${TotalDiscount.toFixed(2)}`, 567, 337, 'right')\r\n\r\n        doc.text(`Total IGST:`, 440, 347)\r\n        doc.text(`${totalICGST.toFixed(2)}`, 567, 347, 'right')\r\n\r\n        doc.text(`Total GST:`, 440, 357,)\r\n        doc.text(` ${totalICGST.toFixed(2)}`, 567, 357, 'right')\r\n\r\n\r\n    } else {\r\n        doc.text(`Total Basic:`, 440, 317,)\r\n        doc.text(`${numberWithCommas(TotalBasicAmount.toFixed(2))}`, 567, 317, 'right')\r\n\r\n        doc.text(`Total Disc:`, 440, 327,)\r\n        doc.text(`${numberWithCommas(TotalDiscount.toFixed(2))}`, 567, 327, 'right')\r\n\r\n        doc.text(`Total CGST:`, 440, 337)\r\n        doc.text(`${numberWithCommas(totalCGST.toFixed(2))}`, 567, 337, 'right')\r\n\r\n        doc.text(`Total SGST:`, 440, 347,)\r\n        doc.text(`${numberWithCommas(totalSGST.toFixed(2))}`, 567, 347, 'right')\r\n\r\n        doc.text(`Total GST:`, 440, 357,)\r\n        doc.text(` ${numberWithCommas(TotalGST.toFixed(2))}`, 567, 357, 'right')\r\n\r\n    }\r\n\r\n\r\n    doc.text(`Round Off:`, 440, 367,)\r\n    doc.text(` ${Number(data.RoundOffAmount).toFixed(2)}`, 567, 367, 'right')\r\n\r\n    doc.text(`TCS Amount:`, 440, 377,)\r\n    doc.text(` ${numberWithCommas(Number(data.TCSAmount).toFixed(2))}`, 567, 377, 'right')\r\n\r\n    doc.setFont(undefined, 'Normal')\r\n    doc.setFontSize(10)\r\n    doc.setFont(undefined, 'bold')\r\n    doc.text(`Total Amount :`, 439, 390,)\r\n    const Total = numberWithCommas(Number(data.GrandTotal).toFixed(2))\r\n    doc.text(`${Total}`, 567, 390, 'right')\r\n\r\n    doc.setFont(undefined, 'bold')\r\n\r\n    let DetailsOfRupeesStyle = {\r\n\r\n        didDrawCell: (data1) => {\r\n            const rowIdx = data1.row.index;\r\n            const colIdx = data1.column.index;\r\n            if (rowIdx === 0 && colIdx === 0) {\r\n                let x = data1.cursor.x + 2\r\n                let y = data1.cursor.y + 8\r\n                doc.setFontSize(8)\r\n                doc.setFont(undefined, 'bold')\r\n                doc.text('Rupees: ', x, y)\r\n            }\r\n        },\r\n\r\n        margin: {\r\n            top: 0, left: 30,\r\n        },\r\n        showHead: 'always',\r\n        theme: 'grid',\r\n        styles: {\r\n            overflow: 'linebreak',\r\n            fontSize: 8,\r\n            height: 0,\r\n        },\r\n        bodyStyles: {\r\n            columnWidth: 'wrap',\r\n            textColor: \"black\",\r\n            cellPadding: 1,\r\n            fontSize: 8,\r\n            lineColor: \"black\"\r\n        },\r\n        columnStyles: {\r\n            0: {\r\n                valign: \"top\",\r\n                columnWidth: 310,\r\n                halign: 'lfet',\r\n            }\r\n\r\n        },\r\n        tableLineColor: \"black\",\r\n        startY: 308,\r\n\r\n    };\r\n\r\n    doc.autoTable(table.Ruppescolumn, table.RupeesRow(data), DetailsOfRupeesStyle,);\r\n\r\n\r\n    let DetailsOfBankStyle = {\r\n        didParseCell: (data1) => {\r\n            if (data.BankData.length > 0) {\r\n                let BankData = data.BankData[0]\r\n                if (data1.row.cells[0].raw === `Bank Name :${BankData.BankName}`) {\r\n                    data1.row.cells[0].colSpan = 3\r\n                }\r\n            }\r\n        },\r\n\r\n\r\n        margin: {\r\n            top: 0, left: 30, right: 35,\r\n        },\r\n        showHead: 'always',\r\n        theme: (data.BankData.length > 0) ? 'grid' : 'plain',\r\n        headerStyles: { cellPadding: 1, },\r\n        styles: {\r\n            overflow: 'linebreak',\r\n            fontSize: 8.5,\r\n            height: 0,\r\n        },\r\n        bodyStyles: {\r\n            columnWidth: 'wrap',\r\n            textColor: \"black\",\r\n            cellPadding: 2,\r\n            fontSize: 7,\r\n            lineColor: \"black\"\r\n        },\r\n        columnStyles: {\r\n            0: {\r\n                valign: \"top\",\r\n                columnWidth: (data.BankData.length > 0) ? 90 : 30,\r\n                halign: 'lfet',\r\n            },\r\n            1: {\r\n                valign: \"top\",\r\n                columnWidth: (data.BankData.length > 0) ? 90 : 300,\r\n                halign: 'lfet',\r\n\r\n\r\n            },\r\n            2: {\r\n                valign: \"top\",\r\n                columnWidth: 130,\r\n                halign: 'lfet',\r\n            },\r\n\r\n        },\r\n        tableLineColor: \"black\",\r\n\r\n        startY: doc.previousAutoTable.finalY,\r\n\r\n    };\r\n    doc.autoTable(table.Bankcolumn, table.BankRow(data, doc), DetailsOfBankStyle,);\r\n\r\n    doc.setFontSize(8)\r\n    doc.setFont(undefined, 'Normal')\r\n\r\n    doc.text(`I/we hearby certify that food/foods mentioned in this invoice is/are warranted to be\r\n of the nature and quantity which it/these purports to be `, 34, doc.previousAutoTable.finalY + (9),)\r\n    doc.line(340, doc.previousAutoTable.finalY + (21), 30, doc.previousAutoTable.finalY + (21)); //horizontal line (1)\r\n\r\n    doc.text(`Signature `, 280, 387,)\r\n    doc.text(`Prepared by :${data.PartyName} `, 35, 387,)\r\n}\r\n\r\n\r\n\r\nexport const tableBody = (doc, data) => {\r\n\r\n    var options = {\r\n\r\n        didParseCell: (data1) => {\r\n\r\n            if (data1.row.cells[9].raw === \"isaddition\") {\r\n                data1.row.cells[1].colSpan = 5\r\n                data1.row.cells[8].colSpan = 2\r\n                data1.row.cells[10].colSpan = 2\r\n\r\n                data1.row.cells[1].styles.halign = \"right\"    // Alignment for  cgst and Total in spanrow\r\n\r\n                data1.row.cells[1].styles.fontSize = 7\r\n                data1.row.cells[8].styles.fontSize = 7\r\n                data1.row.cells[7].styles.fontSize = 7\r\n                data1.row.cells[10].styles.fontSize = 7\r\n                data1.row.cells[12].styles.fontSize = 7\r\n\r\n                data1.row.cells[1].styles.fontStyle = \"bold\"\r\n                data1.row.cells[8].styles.fontStyle = \"bold\"\r\n                data1.row.cells[7].styles.fontStyle = \"bold\"\r\n                data1.row.cells[10].styles.fontStyle = \"bold\"\r\n                data1.row.cells[12].styles.fontStyle = \"bold\"\r\n            }\r\n\r\n            if (data1.row.cells[1].raw === \"HSN Item Name\") {\r\n                let TotalBox = 0;\r\n                data.InvoiceItems.forEach((element, key) => {\r\n                    if (element.PrimaryUnitName === \"Box\") {\r\n                        TotalBox = Number(TotalBox) + Number(element.Quantity)\r\n                    }\r\n                })\r\n                if (TotalBox === 0) {\r\n                    data1.row.cells[1].text[0] = ` HSN Item Name (${data.TotalItemlength})`\r\n                } else {\r\n                    data1.row.cells[1].text[0] = ` HSN Item Name (${data.TotalItemlength})  (${TotalBox} Box)`\r\n                }\r\n                data1.row.cells[8].colSpan = 2\r\n                data1.row.cells[10].colSpan = 2\r\n            }\r\n            if (data1.row.cells[1].raw === \"Batch\") {\r\n                data1.row.cells[0].colSpan = 13\r\n\r\n            }\r\n        },\r\n        didDrawCell: (data1) => {\r\n\r\n            const rowIdx = data1.row.index;\r\n            const colIdx = data1.column.index;\r\n            if (rowIdx === 0 && colIdx === 8) {\r\n                if (data1.row.cells[8].raw === \"          CGST           %        Amount\") {\r\n\r\n                    const cellWidth = data1.cell.width;\r\n                    const cellHeight = data1.cell.height;\r\n                    const startX = data1.cell.x;\r\n                    const startY = data1.cell.y + cellHeight / 2;\r\n                    const endX = startX + cellWidth;\r\n                    const endY = startY;\r\n\r\n                    const startXVertical = data1.cell.x + cellWidth / 2; // X-coordinate at the middle of the cell\r\n                    const startY1vertical = data1.cell.y + 9;\r\n                    const endYvertical = startY + cellHeight;\r\n\r\n                    doc.line(startXVertical - 5, startY1vertical, startXVertical - 5, endYvertical); // Draw a vertical line\r\n                    doc.line(startX, startY, endX, endY);\r\n                }\r\n            }\r\n            if (rowIdx === 0 && colIdx === 10) {\r\n                if (data1.row.cells[10].raw === \"          SGST           %        Amount\") {\r\n\r\n                    const cellWidth = data1.cell.width;\r\n                    const cellHeight = data1.cell.height;\r\n                    const startX = data1.cell.x;\r\n                    const startY = data1.cell.y + cellHeight / 2;\r\n                    const endX = startX + cellWidth;\r\n                    const endY = startY;\r\n\r\n                    const startXVertical = data1.cell.x + cellWidth / 2; // X-coordinate at the middle of the cell\r\n                    const startY1vertical = data1.cell.y + 9;\r\n                    const endYvertical = startY + cellHeight;\r\n\r\n                    doc.line(startXVertical - 5, startY1vertical, startXVertical - 5, endYvertical); // Draw a vertical line\r\n                    doc.line(startX, startY, endX, endY);\r\n                }\r\n            }\r\n\r\n\r\n\r\n\r\n\r\n        },\r\n        margin: {\r\n            left: 30, right: 25, top: 56\r\n        },\r\n        theme: 'grid',\r\n        headerStyles: {\r\n            cellPadding: 1,\r\n            lineWidth: 0.3,\r\n            valign: 'top',\r\n            fontStyle: 'bold',\r\n            halign: 'center',    //'center' or 'right'\r\n            fillColor: \"white\",\r\n            textColor: [0, 0, 0], //Black     \r\n            fontSize: 7,\r\n            rowHeight: 10,\r\n            lineColor: [0, 0, 0]\r\n        },\r\n        bodyStyles: {\r\n            textColor: [30, 30, 30],\r\n            cellPadding: 3,\r\n            fontSize: 7,\r\n            columnWidth: 'wrap',\r\n            lineColor: [0, 0, 0],\r\n        },\r\n        columnStyles: {\r\n            0: {\r\n                valign: \"top\",\r\n                fontSize: 6,\r\n                columnWidth: 15,\r\n            },\r\n            1: {\r\n                valign: \"top\",\r\n                columnWidth: 135,\r\n            },\r\n            2: {\r\n                columnWidth: 52,\r\n                halign: 'right',\r\n            },\r\n            3: {\r\n                columnWidth: 28,\r\n                halign: 'right',\r\n            },\r\n            4: {\r\n                columnWidth: 33,\r\n                halign: 'right',\r\n            },\r\n            5: {\r\n                columnWidth: 35,\r\n                halign: 'right',\r\n            },\r\n            6: {\r\n                columnWidth: 35,\r\n                halign: 'right',\r\n            },\r\n\r\n            7: {\r\n                columnWidth: 45,\r\n                halign: 'right',\r\n            },\r\n            8: {\r\n                columnWidth: 24,\r\n                halign: 'right',\r\n            },\r\n            9: {\r\n                columnWidth: 34,\r\n                halign: 'right',\r\n            },\r\n            10: {\r\n                columnWidth: 24,\r\n                halign: 'right',\r\n            },\r\n            11: {\r\n                columnWidth: 34,\r\n                halign: 'right',\r\n\r\n            },\r\n            12: {\r\n                columnWidth: 46,\r\n                halign: 'right',\r\n            },\r\n\r\n        },\r\n        tableLineColor: \"black\",\r\n        startY: initial_y,\r\n\r\n    };\r\n    doc.setLineWidth(0.5);\r\n    ////  lines when report  header line when table cordinates\r\n    doc.line(408, initial_y, 408, 16);//vertical right 1\r\n    doc.line(220, initial_y, 220, 45);//vertical line between billby billto\r\n    doc.line(570, initial_y, 30, initial_y) //horizontal line 1 billby upper\r\n\r\n\r\n\r\n    doc.autoTable(table.columnsWithCGST_SGST, table.RowsWithCGST_SGST(data), options,);\r\n\r\n    const Buttom_Hidden_Table_To_Avoid_FooterOverlap = {\r\n        margin: {\r\n            left: 30, right: 30, bottom: 110\r\n        },\r\n    };\r\n\r\n    doc.autoTable(Buttom_Hidden_Table_To_Avoid_FooterOverlap);\r\n}\r\n////  lines when report  header line when table cordinates\r\n\r\nexport const tableBodyWithIGST = (doc, data) => {\r\n    var options = {\r\n\r\n        didParseCell: (data1) => {\r\n\r\n            if (data1.row.cells[9].raw === \"isaddition\") {\r\n                data1.row.cells[1].colSpan = 5\r\n                // data1.row.cells[3].colSpan = 5\r\n                data1.row.cells[8].colSpan = 2\r\n                // data1.row.cells[10].colSpan = 2\r\n\r\n                data1.row.cells[1].styles.fontSize = 7\r\n                data1.row.cells[1].styles.halign = \"right\"    // Alignment for  cgst and Total in spanrow\r\n\r\n                data1.row.cells[8].styles.fontSize = 7\r\n                data1.row.cells[7].styles.fontSize = 7\r\n                data1.row.cells[10].styles.fontSize = 7\r\n                // data1.row.cells[12].styles.fontSize = 7\r\n                data1.row.cells[1].styles.fontStyle = \"bold\"\r\n                data1.row.cells[8].styles.fontStyle = \"bold\"\r\n                data1.row.cells[7].styles.fontStyle = \"bold\"\r\n                data1.row.cells[10].styles.fontStyle = \"bold\"\r\n                // data1.row.cells[12].styles.fontStyle = \"bold\"\r\n            }\r\n\r\n            if (data1.row.cells[1].raw === \"HSN Item Name\") {\r\n\r\n                let TotalBox = 0;\r\n                data.InvoiceItems.forEach((element, key) => {\r\n                    if (element.PrimaryUnitName === \"Box\") {\r\n                        TotalBox = Number(TotalBox) + Number(element.Quantity)\r\n                    }\r\n                })\r\n                if (TotalBox === 0) {\r\n                    data1.row.cells[1].text[0] = ` HSN Item Name (${data.TotalItemlength})`\r\n                } else {\r\n                    data1.row.cells[1].text[0] = ` HSN Item Name (${data.TotalItemlength})  (${TotalBox} Box)`\r\n                }\r\n\r\n\r\n                data1.row.cells[8].colSpan = 2\r\n\r\n            }\r\n\r\n            if (data1.row.cells[1].raw === \"Batch\") {\r\n                data1.row.cells[0].colSpan = 12\r\n\r\n            }\r\n        },\r\n\r\n        didDrawCell: (data1) => {\r\n\r\n            const rowIdx = data1.row.index;\r\n            const colIdx = data1.column.index;\r\n            if (rowIdx === 0 && colIdx === 8) {\r\n                if (data1.row.cells[8].raw === \"          IGST           %         Amount\") {\r\n\r\n                    const cellWidth = data1.cell.width;\r\n                    const cellHeight = data1.cell.height;\r\n                    const startX = data1.cell.x;\r\n                    const startY = data1.cell.y + cellHeight / 2;\r\n                    const endX = startX + cellWidth;\r\n                    const endY = startY;\r\n\r\n                    const startXVertical = data1.cell.x + cellWidth / 2; // X-coordinate at the middle of the cell\r\n                    const startY1vertical = data1.cell.y + 9;\r\n                    const endYvertical = startY + cellHeight;\r\n\r\n                    doc.line(startXVertical - 4, startY1vertical, startXVertical - 4, endYvertical); // Draw a vertical line\r\n                    doc.line(startX, startY, endX, endY);\r\n                }\r\n            }\r\n\r\n        },\r\n\r\n        margin: {\r\n            left: 30, right: 25, top: 55\r\n        },\r\n        theme: 'grid',\r\n        headerStyles: {\r\n            cellPadding: 1,\r\n            lineWidth: 0.3,\r\n            valign: 'top',\r\n            fontStyle: 'bold',\r\n            halign: 'center',    //'center' or 'right'\r\n            fillColor: \"white\",\r\n            textColor: [0, 0, 0], //Black     \r\n            fontSize: 7,\r\n            rowHeight: 10,\r\n            lineColor: [0, 0, 0]\r\n        },\r\n        bodyStyles: {\r\n            textColor: [30, 30, 30],\r\n            cellPadding: 3,\r\n            fontSize: 7,\r\n            columnWidth: 'wrap',\r\n            lineColor: [0, 0, 0],\r\n        },\r\n        columnStyles: {\r\n            0: {\r\n                valign: \"top\",\r\n                fontSize: 6,\r\n                columnWidth: 15,\r\n            },\r\n            1: {\r\n                valign: \"top\",\r\n                columnWidth: 175,\r\n            },\r\n            2: {\r\n                columnWidth: 50,\r\n                halign: 'right',\r\n            },\r\n            3: {\r\n                columnWidth: 28,\r\n                halign: 'right',\r\n            },\r\n            4: {\r\n                columnWidth: 33,\r\n                halign: 'right',\r\n            },\r\n            5: {\r\n                columnWidth: 35,\r\n                halign: 'right',\r\n            },\r\n            6: {\r\n                columnWidth: 42,\r\n                halign: 'right',\r\n            },\r\n\r\n            7: {\r\n                columnWidth: 50,\r\n                halign: 'right',\r\n            },\r\n            8: {\r\n                columnWidth: 26,\r\n                halign: 'right',\r\n            },\r\n            9: {\r\n                columnWidth: 34,\r\n                halign: 'right',\r\n\r\n            },\r\n            10: {\r\n                columnWidth: 52,\r\n                halign: 'right',\r\n            },\r\n\r\n        },\r\n        tableLineColor: \"black\",\r\n        startY: initial_y,\r\n    };\r\n    doc.setLineWidth(0.5)\r\n    doc.line(408, initial_y, 408, 16);//vertical right 1\r\n    doc.line(220, initial_y, 220, 45);//vertical line between billby billto\r\n    doc.line(570, initial_y, 30, initial_y) //horizontal line 1 billby upper\r\n    doc.autoTable(table.columnsWithIGST, table.RowsWithIGST(data), options,);\r\n    const Buttom_Hidden_Table_To_Avoid_FooterOverlap = {\r\n        margin: {\r\n            left: 30, right: 30, bottom: 110\r\n        },\r\n    };\r\n\r\n    doc.autoTable(Buttom_Hidden_Table_To_Avoid_FooterOverlap);\r\n}\r\n\r\n\r\n\r\nexport const pageFooter = (doc, data) => {\r\n    const pageCount = doc.internal.getNumberOfPages()\r\n    doc.setFont('helvetica', 'Normal')\r\n    doc.setFontSize(8)\r\n\r\n    if (!data.isMultiPrint) {\r\n        for (let i = 1; i <= pageCount; i++) {\r\n            doc.setPage(i)\r\n            pageHeder(doc, data)\r\n            pageBorder(doc)\r\n            reportHeder3(doc, data)\r\n\r\n            doc.text('Page' + String(pageCount) + ' of ' + String(i), 532, 403,)\r\n            doc.text('Print Date :' + String(currentDate_dmy) + ' Time ' + String(CurrentTime()), 30, 403,)\r\n        }\r\n\r\n    } else {\r\n        pageBorder(doc)\r\n        pageHeder(doc, data)\r\n        reportHeder3(doc, data)\r\n\r\n    }\r\n}\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\Reports\\Invoice report a5\\DemoData.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\Reports\\Invoice report a5\\TableData.js",["3658","3659","3660","3661","3662","3663","3664"],"\r\nimport { invoice } from \"../ReportIndex\";\r\nimport { numberWithCommas, toWords } from \"../Report_common_function\";\r\n\r\nexport const columnsWithCGST_SGST = [\r\n    \"SN\",\r\n    \"HSN Item Name\",\r\n    \"Quantity (UOM)\",\r\n    \"MRP\",\r\n    \"Rate\",\r\n    \"Discount\",\r\n    \"Discount Amount \",\r\n    \"Taxable Amount\",\r\n    \"          CGST           %        Amount\",\r\n    \"CGST Amount\",\r\n    \"          SGST           %        Amount\",\r\n    \"SGST Amount\",\r\n    \"Amount\",\r\n];\r\nexport const columnsWithIGST = [\r\n    \"SN\",\r\n    \"HSN Item Name\",\r\n    \"Quantity (UOM)\",\r\n    \"MRP\",\r\n    \"Rate\",\r\n    \"Discount\",\r\n    \"Discount Amount \",\r\n    \"Taxable Amount\",\r\n    \"          IGST           %         Amount\",\r\n    \"IGST Amount\",\r\n    \"Amount\",\r\n];\r\n\r\n\r\nexport const Bankcolumn = [\r\n    \"\",\r\n    \"\",\r\n    \"\",\r\n]\r\n\r\nexport const Ruppescolumn = [\r\n    \"\",\r\n]\r\n\r\n\r\nexport const BilledBy = [\r\n    \"Billed by\",\r\n]\r\nexport const BilledTo = [\r\n    \"Billed by\",\r\n]\r\nexport const DetailsOfTransport = [\r\n    \"Billed by\",\r\n]\r\n\r\nexport const RowsWithCGST_SGST = (data) => {\r\n    const { InvoiceItems = [] } = data\r\n    InvoiceItems.sort((firstItem, secondItem) => firstItem.GSTPercentage - secondItem.GSTPercentage);\r\n    const returnArr = [];\r\n    let Gst = 0\r\n    let totalBasicAmount = 0\r\n    let totalCGst = 0\r\n    let totalSGst = 0\r\n    let totalAmount = 0\r\n    let totalQuantity = 0\r\n    let SrNO = 1\r\n    let TotalGst = 0\r\n    let GSTPercentage = 0\r\n\r\n    const groupedItems = InvoiceItems.reduce((accumulator, currentItem) => {\r\n\r\n        const { HSNCode,\r\n            ItemName, MRP, Rate,\r\n            Discount, CGST, SGST,\r\n            Amount, DiscountAmount,\r\n            BasicAmount, Quantity,\r\n            UnitName, MRPValue, CGSTPercentage,\r\n            SGSTPercentage, GSTPercentage,\r\n            BatchCode, BatchDate, DiscountType,\r\n            PrimaryUnitName } = currentItem;\r\n        let PcsinNumber = \"\"\r\n        let PcsinNumberUnit = \"\"\r\n        const pattern = /\\((.*?)\\)/;\r\n\r\n        if (currentItem.UnitName !== \"\") {\r\n            const matchFound = currentItem.UnitName.match(pattern);\r\n            const extractedText = matchFound[1];\r\n            console.log(extractedText); // Output: \"19.0 No\"\r\n            const match = extractedText.split(\" \")\r\n            PcsinNumber = match[0];\r\n            PcsinNumberUnit = match[1];\r\n\r\n        }\r\n\r\n        const key = ItemName + '_' + MRP;\r\n        if (accumulator[key]) {\r\n\r\n            accumulator[key].PcsinNumber += Number(PcsinNumber);\r\n            // accumulator[key].UnitName += Number(UnitName);\r\n            accumulator[key].DiscountAmount += Number(DiscountAmount);\r\n            accumulator[key].Quantity += Number(Quantity);\r\n            accumulator[key].BasicAmount += Number(BasicAmount);\r\n            accumulator[key].CGST += Number(CGST);\r\n            accumulator[key].SGST += Number(SGST);\r\n            accumulator[key].Amount += Number(Amount);\r\n            accumulator[key].BatchCode += BatchCode;\r\n            accumulator[key].BatchDate += BatchDate;\r\n            accumulator[key].quantityString += ` ,  ${BatchCode} ${BatchDate} `;\r\n\r\n        } else {\r\n            accumulator[key] = {\r\n                ItemName, HSNCode,\r\n                MRPValue, DiscountType, Rate,\r\n                Discount, PcsinNumberUnit: PcsinNumberUnit,\r\n                PcsinNumber: Number(PcsinNumber),\r\n                CGST: Number(CGST), SGST: Number(SGST),\r\n                Amount: Number(Amount), DiscountAmount: Number(DiscountAmount),\r\n                BasicAmount: Number(BasicAmount), Quantity: Number(Quantity),\r\n                UnitName, CGSTPercentage, SGSTPercentage, GSTPercentage,\r\n                BatchDate, BatchCode: BatchCode, BatchDate: BatchDate,\r\n                quantityString: `  ${BatchCode}  ${BatchDate}`, PrimaryUnitName\r\n            };\r\n        }\r\n        return accumulator;\r\n    }, {});\r\n\r\n    const TotalItemlength = Object.values(groupedItems).length;\r\n    data[\"TotalItemlength\"] = TotalItemlength;\r\n    Object.values(groupedItems).forEach((element, key) => {\r\n\r\n        let HSNcodes = \"\"\r\n        if (element.HSNCode) {\r\n            if (data.SettingData.HSNCodeDigit === \"1\") {\r\n                HSNcodes = element.HSNCode.slice(0, 4);\r\n            }\r\n            if (data.SettingData.HSNCodeDigit === \"2\") {\r\n                HSNcodes = element.HSNCode.slice(0, 6);\r\n            }\r\n            if (data.SettingData.HSNCodeDigit === \"3\") {\r\n                HSNcodes = element.HSNCode.slice(0, 8);\r\n            }\r\n        }\r\n        const tableitemRow = [\r\n            SrNO++,\r\n            `${HSNcodes} ${element.ItemName}`,\r\n            element.UnitName === \"\" ? `${parseFloat(element.Quantity)} ${element.PrimaryUnitName}   ${element.UnitName}` : `${parseFloat(element.Quantity)} ${element.PrimaryUnitName} (${element.PcsinNumber} ${element.PcsinNumberUnit})`,\r\n            `${Number(element.MRPValue).toFixed(2)}`,\r\n            `${numberWithCommas(Number(element.Rate).toFixed(2))}`,\r\n            `${element.Discount} ${element.DiscountType === \"1\" ? \"Rs\" : \"%\"}`,\r\n            `${numberWithCommas(Number(element.DiscountAmount).toFixed(2))}`,\r\n            `${numberWithCommas(Number(element.BasicAmount).toFixed(2))}`,\r\n            `${Number(element.CGSTPercentage).toFixed(1)}%`,\r\n            `${numberWithCommas(Number(element.CGST).toFixed(2))}`,\r\n            `${Number(element.SGSTPercentage).toFixed(1)}%`,\r\n            `${numberWithCommas(Number(element.SGST).toFixed(2))}`,\r\n            `${numberWithCommas(Number(element.Amount).toFixed(2))}`,\r\n        ];\r\n\r\n        function totalLots() {\r\n            totalQuantity = Number(totalQuantity) + Number(element.Quantity)\r\n            totalCGst = Number(totalCGst) + Number(element.CGST)\r\n            totalSGst = Number(totalSGst) + Number(element.SGST)\r\n            totalAmount = Number(totalAmount) + Number(element.Amount)\r\n            totalBasicAmount = Number(totalBasicAmount) + Number(element.BasicAmount)\r\n            TotalGst = totalCGst + totalSGst;\r\n            GSTPercentage = Number(element.CGSTPercentage) + Number(element.SGSTPercentage)\r\n            let cgst = data[\"tableTot\"].TotalCGst\r\n            return ({ TotalCGst: Number(totalCGst) + Number(cgst) })\r\n\r\n        };\r\n\r\n\r\n        function totalrow() {\r\n\r\n            return [\r\n                \"\",\r\n                ` GST ${(parseFloat(GSTPercentage))}%  Total:${numberWithCommas(Number(TotalGst).toFixed(2))} `,\r\n                \" \",\r\n                ``,\r\n                \"\",\r\n                \"\",\r\n                ``,\r\n                `${numberWithCommas(Number(totalBasicAmount).toFixed(2))}`,\r\n                `${numberWithCommas(Number(totalCGst).toFixed(2))}`,\r\n                \"isaddition\",\r\n                `${numberWithCommas(Number(totalSGst).toFixed(2))}`,\r\n                \"\",\r\n                `${numberWithCommas(Number(totalAmount).toFixed(2))}`,\r\n            ];\r\n        };\r\n        const BatchRow = [\r\n            `Batch:  ${element.quantityString} `,\r\n            `Batch`,\r\n            \" \",\r\n            ``,\r\n            \"\",\r\n            \"\",\r\n            \"\",\r\n            \"\",\r\n            ``,\r\n            \"\",\r\n            ``,\r\n            \"\",\r\n            ``,\r\n        ]\r\n\r\n        if (Gst === 0) { Gst = element.GSTPercentage };\r\n        let aa = { TotalCGst: 0, totalSGst: 0 }\r\n        if (data[\"tableTot\"] === undefined) { data[\"tableTot\"] = aa }\r\n\r\n        if ((Gst === element.GSTPercentage)) {\r\n            data[\"tableTot\"] = totalLots()\r\n            returnArr.push(tableitemRow)\r\n        }\r\n\r\n        else {\r\n            returnArr.push(totalrow());\r\n            returnArr.push(tableitemRow);\r\n            totalBasicAmount = 0\r\n            totalCGst = 0\r\n            totalSGst = 0\r\n            totalAmount = 0\r\n            totalQuantity = 0\r\n\r\n            data[\"tableTot\"] = totalLots()\r\n            Gst = element.GSTPercentage;\r\n        }\r\n        if (data.SettingData.ShowBatchNoOnInvoicePrint === \"1\") {\r\n            returnArr.push((BatchRow))\r\n        }\r\n\r\n        if (key === Object.keys(groupedItems).length - 1) {\r\n\r\n            returnArr.push(totalrow());\r\n        }\r\n    })\r\n    return returnArr;\r\n}\r\n\r\nexport const RowsWithIGST = (data) => {\r\n    const { InvoiceItems = [] } = data\r\n    InvoiceItems.sort((firstItem, secondItem) => firstItem.GSTPercentage - secondItem.GSTPercentage);\r\n    const returnArr = [];\r\n    let Gst = 0\r\n    let totalBasicAmount = 0\r\n    let totalIGst = 0\r\n    let totalAmount = 0\r\n    let totalQuantity = 0\r\n    let SrNO = 1\r\n    let TotalGst = 0\r\n    let GSTPercentage = 0\r\n\r\n    const groupedItems = InvoiceItems.reduce((accumulator, currentItem) => {\r\n        const { HSNCode, ItemName, IGSTPercentage,\r\n            MRP, Rate, Discount, CGST, SGST,\r\n            Amount, DiscountAmount, BasicAmount,\r\n            Quantity, UnitName, MRPValue, CGSTPercentage,\r\n            SGSTPercentage, GSTPercentage, BatchCode,\r\n            BatchDate, DiscountType, PrimaryUnitName, IGST } = currentItem;\r\n\r\n        let PcsinNumber = \"\"\r\n        let PcsinNumberUnit = \"\"\r\n        const pattern = /\\((.*?)\\)/;\r\n\r\n        if (currentItem.UnitName !== \"\") {\r\n            const matchFound = currentItem.UnitName.match(pattern);\r\n            const extractedText = matchFound[1];\r\n            console.log(extractedText); // Output: \"19.0 No\"\r\n            const match = extractedText.split(\" \")\r\n            PcsinNumber = match[0];\r\n            PcsinNumberUnit = match[1];\r\n\r\n        }\r\n\r\n        const key = ItemName + '_' + MRP;\r\n        if (accumulator[key]) {\r\n            accumulator[key].PcsinNumber += Number(PcsinNumber);\r\n            accumulator[key].DiscountAmount += Number(DiscountAmount);\r\n            accumulator[key].Quantity += Number(Quantity);\r\n            accumulator[key].BasicAmount += Number(BasicAmount);\r\n            accumulator[key].CGST += Number(CGST);\r\n            accumulator[key].IGST += Number(IGST);\r\n            accumulator[key].SGST += Number(SGST);\r\n            accumulator[key].Amount += Number(Amount);\r\n            accumulator[key].BatchCode += BatchCode;\r\n            accumulator[key].BatchDate += BatchDate;\r\n            accumulator[key].quantityString += ` ,  ${BatchCode} ${BatchDate} `;\r\n\r\n        } else {\r\n            accumulator[key] = {\r\n                ItemName, HSNCode,\r\n                MRPValue, IGSTPercentage, DiscountType,\r\n                PcsinNumber: Number(PcsinNumber), Rate,\r\n                Discount, CGST: Number(CGST), SGST: Number(SGST),\r\n                Amount: Number(Amount), DiscountAmount: Number(DiscountAmount),\r\n                BasicAmount: Number(BasicAmount), Quantity: Number(Quantity),\r\n                UnitName, CGSTPercentage, SGSTPercentage, GSTPercentage,\r\n                BatchDate, BatchCode: BatchCode, BatchDate: BatchDate,\r\n                quantityString: `  ${BatchCode}  ${BatchDate}`, PrimaryUnitName, IGST\r\n            };\r\n        }\r\n        return accumulator;\r\n    }, {});\r\n    const TotalItemlength = Object.values(groupedItems).length;\r\n    data[\"TotalItemlength\"] = TotalItemlength;\r\n    Object.values(groupedItems).forEach((element, key) => {\r\n\r\n        let HSNcodes = \"\"\r\n        if (element.HSNCode) {\r\n\r\n            if (data.SettingData.HSNCodeDigit === \"1\") {\r\n                HSNcodes = element.HSNCode.slice(0, 4);\r\n            }\r\n            if (data.SettingData.HSNCodeDigit === \"2\") {\r\n                HSNcodes = element.HSNCode.slice(0, 6);\r\n            }\r\n            if (data.SettingData.HSNCodeDigit === \"3\") {\r\n                HSNcodes = element.HSNCode.slice(0, 8);\r\n            }\r\n        }\r\n        const tableitemRow = [\r\n            SrNO++,\r\n            `${HSNcodes} ${element.ItemName}`,\r\n            element.UnitName === \"\" ? `${parseFloat(element.Quantity)} ${element.PrimaryUnitName}   ${element.UnitName}` : `${parseFloat(element.Quantity)} ${element.PrimaryUnitName}      (${element.PcsinNumber} ${element.PcsinNumberUnit})`,\r\n            `${numberWithCommas(Number(element.MRPValue).toFixed(2))}`,\r\n            `${numberWithCommas(Number(element.Rate).toFixed(2))}`,\r\n            `${element.Discount} ${element.DiscountType === \"1\" ? \"Rs\" : \"%\"}`,\r\n            `${numberWithCommas(Number(element.DiscountAmount).toFixed(2))}`,\r\n            `${numberWithCommas(Number(element.BasicAmount).toFixed(2))}`,\r\n            `${Number(element.IGSTPercentage).toFixed(1)}%`,\r\n            `${numberWithCommas(Number(element.IGST).toFixed(2))}`,\r\n            `${numberWithCommas(Number(element.Amount).toFixed(2))}`,\r\n        ];\r\n\r\n        function totalLots() {\r\n            totalQuantity = Number(totalQuantity) + Number(element.Quantity)\r\n            totalIGst = Number(totalIGst) + Number(element.IGST)\r\n            totalAmount = Number(totalAmount) + Number(element.Amount)\r\n            totalBasicAmount = Number(totalBasicAmount) + Number(element.BasicAmount)\r\n\r\n            GSTPercentage = Number(element.IGSTPercentage)\r\n\r\n        };\r\n\r\n\r\n        function totalrow() {\r\n\r\n            return [\r\n                \"\",\r\n                ` GST ${(parseFloat(GSTPercentage))}%  Total:${numberWithCommas(Number(totalIGst).toFixed(2))} `,\r\n                \" \",\r\n                ``,\r\n                \"\",\r\n                \"\",\r\n                ``,\r\n                `${numberWithCommas(Number(totalBasicAmount).toFixed(2))}`,\r\n                `${numberWithCommas(Number(totalIGst).toFixed(2))}`,\r\n                \"isaddition\",\r\n                `${numberWithCommas(Number(totalAmount).toFixed(2))}`,\r\n\r\n            ];\r\n        };\r\n        const BatchRow = [\r\n            `Batch:  ${element.quantityString} `,\r\n            `Batch`,\r\n            \" \",\r\n            ``,\r\n            \"\",\r\n            \"\",\r\n            \"\",\r\n            \"\",\r\n            ``,\r\n            \"\",\r\n            ``,\r\n        ]\r\n\r\n        if (Gst === 0) { Gst = element.GSTPercentage };\r\n        let aa = { TotalCGst: 0, totalSGst: 0 }\r\n        if (data[\"tableTot\"] === undefined) { data[\"tableTot\"] = aa }\r\n\r\n        if ((Gst === element.GSTPercentage)) {\r\n            data[\"tableTot\"] = totalLots()\r\n            returnArr.push(tableitemRow)\r\n\r\n        }\r\n\r\n\r\n        else {\r\n            returnArr.push(totalrow());\r\n            returnArr.push(tableitemRow);\r\n            totalBasicAmount = 0\r\n            totalAmount = 0\r\n            totalQuantity = 0\r\n\r\n            data[\"tableTot\"] = totalLots()\r\n            Gst = element.GSTPercentage;\r\n        }\r\n        if (data.SettingData.ShowBatchNoOnInvoicePrint === \"1\") {\r\n            returnArr.push((BatchRow))\r\n        }\r\n\r\n        if (key === Object.keys(groupedItems).length - 1) {\r\n\r\n            returnArr.push(totalrow());\r\n        }\r\n    })\r\n    return returnArr;\r\n}\r\n\r\n\r\nexport const BilledByRow = (data) => {\r\n\r\n    let PartyAddress = \"\"\r\n    if (Array.isArray(data.PartyAddress)) {\r\n        const filteredArray = data.PartyAddress.filter(obj => obj.IsDefault === true);\r\n        PartyAddress = filteredArray[0] === undefined ? \"\" : filteredArray[0].Address\r\n    } else {\r\n        PartyAddress = data.PartyAddress\r\n    }\r\n\r\n    var BilledByArray = [\r\n        [`            ${data.PartyName}`],\r\n        [`                 ${PartyAddress}`],\r\n        [`            ${data.PartyState}`],\r\n        [`              ${data.PartyGSTIN}`],\r\n        [`                   ${data.PartyFSSAINo}`],\r\n        [`                   ${data.PartyMobileNo}`],\r\n\r\n    ]\r\n    return BilledByArray;\r\n}\r\nexport const BilledToRow = (data) => {\r\n\r\n    let CustomerAddress = \"\"\r\n    if (Array.isArray(data.CustomerAddress)) {\r\n        const filteredArray = data.CustomerAddress.filter(obj => obj.IsDefault === true);\r\n        CustomerAddress = filteredArray[0] === undefined ? \"\" : filteredArray[0].Address\r\n    } else {\r\n        CustomerAddress = data.CustomerAddress\r\n    }\r\n    var BilledToArray = [\r\n        [`                   ${data.CustomerName}`],\r\n        [`                 ${CustomerAddress}`],\r\n        [`           ${data.CustomerState}`],\r\n        [`             ${data.CustomerGSTIN}`,],\r\n        [`                   ${data.CustomerFSSAINo}`],\r\n        [`                   ${data.CustomerMobileNo}`],\r\n    ]\r\n\r\n    return BilledToArray;\r\n}\r\nexport const DetailsOfTransportRow = (data) => {\r\n\r\n    let OrderNumber = \" \"\r\n    debugger\r\n    if (data.InvoicesReferences.length > 0) {\r\n        debugger\r\n        const PoNumber = data.InvoicesReferences.map(index => ({\r\n            SystemGenerate: index.FullOrderNumber,\r\n            Description: index.Description,\r\n        }));\r\n\r\n        if (PoNumber[0].Description === null) {\r\n            OrderNumber = PoNumber[0].SystemGenerate\r\n        } else {\r\n            OrderNumber = PoNumber[0].Description\r\n        }\r\n\r\n\r\n    }\r\n\r\n    let EwayData = \"\"\r\n    if (data.InvoiceUploads.length > 0) {\r\n        EwayData = data.InvoiceUploads[0]\r\n    }\r\n\r\n    var DetailsOfTransportArray = [\r\n        [`              ${OrderNumber}`],\r\n        [data.DriverName === null ? \"\" : `                        ${data.DriverName}`],\r\n        [`                      ${data.VehicleNo === null ? \"\" : data.VehicleNo}`],\r\n        [`                          ${(EwayData.EwayBillNo === undefined) || (EwayData.EwayBillNo === null) ? \"\" : EwayData.EwayBillNo}`],\r\n        [`              ${(EwayData.AckNo === undefined) || (EwayData.AckNo === null) ? \"\" : EwayData.AckNo}`]\r\n    ]\r\n\r\n    return DetailsOfTransportArray;\r\n}\r\n\r\n\r\n\r\nexport const BankRow = (data, doc) => {\r\n    if (data.BankData.length > 0) {\r\n        let BankData = data.BankData[0]\r\n        var reportArray = [\r\n            [`A/C No: ${BankData.AccountNo}`, `IFSC Code: ${BankData.IFSC}`, `Branch: ${BankData.BranchName}`],\r\n\r\n            [`Bank Name :${BankData.BankName}`]\r\n        ]\r\n    } else {\r\n\r\n        var reportArray = [\r\n            [],\r\n            [, `Bank details not provided. Please update Bank details`]\r\n        ]\r\n        doc.line(340, 345, 30, 345);//horizontal line  (4)\r\n\r\n\r\n    }\r\n    return reportArray;\r\n}\r\n\r\nexport const RupeesRow = (data) => {\r\n    let stringNumber = toWords(Number(data.GrandTotal))\r\n\r\n    var RupeesArray = [\r\n        [`                  ${stringNumber}`],\r\n\r\n    ]\r\n    return RupeesArray;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\Reports\\AllReportPage.js",["3665","3666","3667","3668","3669"],"import React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Button, Row } from \"reactstrap\";\r\nimport C_Report from \"../components/Common/C_Report\";\r\nimport { get_Group_List_Api, LoadingSheet_API, MultipleInvoice_API } from \"../helpers/backend_helper\";\r\nimport * as report from '../Reports/ReportIndex'\r\nimport { getpdfReportdata, } from \"../store/Utilites/PdfReport/actions\";\r\n\r\nconst Report = () => {\r\n    const { pdfdata } = useSelector((state) => ({\r\n        pdfdata: state.PdfReportReducers.pdfdata\r\n    }))\r\n    const downBtnCss = \"badge badge-soft-primary font-size-12 btn btn-primary waves-effect waves-light w-xxs border border-light\"\r\n    const dispatch = useDispatch();\r\n\r\n    function downBtnFunc() {\r\n\r\n        const jsonBody = JSON.stringify({\r\n            InvoiceIDs: [70, 71]\r\n        });\r\n        var ReportType = report.invoice;\r\n        // dispatch(postpdfMultipleReportdata(MultipleInvoice_API,jsonBody,ReportType))\r\n        dispatch(getpdfReportdata(get_Group_List_Api, ReportType))\r\n\r\n    }\r\n\r\n    function downlodeinvoiceReport() {\r\n        var ReportType = report.invoice;\r\n        dispatch(getpdfReportdata(get_Group_List_Api, ReportType))\r\n\r\n    }\r\n    function downlodePartyWiseinvoice() {\r\n        \r\n        var ReportType = report.VanLoadingSheetSKU;\r\n        dispatch(getpdfReportdata(get_Group_List_Api, ReportType))\r\n\r\n\r\n    }\r\n    function downlodeinvoice() {\r\n\r\n        var ReportType = report.Receipt;\r\n        dispatch(getpdfReportdata(get_Group_List_Api, ReportType))\r\n\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"page-content\" >\r\n                <Row>\r\n                    <div>\r\n                        <Button\r\n                            style={{ marginLeft: \"100px\" }}\r\n                            type=\"button\"\r\n                            className={downBtnCss}\r\n                            data-mdb-toggle=\"tooltip\" data-mdb-placement=\"top\" title={`Download`}\r\n                            onClick={() => { downBtnFunc() }}\r\n                        >\r\n                            <i className=\"bx bx-printer font-size-18\"></i>\r\n                        </Button>\r\n                        <span style={{ marginLeft: \"10px\" }}> invoiceA5</span>\r\n\r\n\r\n                        <Button\r\n                            style={{ marginLeft: \"100px\" }}\r\n                            type=\"button\"\r\n                            className={downBtnCss}\r\n                            data-mdb-toggle=\"tooltip\" data-mdb-placement=\"top\" title={`Download`}\r\n                            onClick={() => { downlodeinvoiceReport() }}\r\n                        >\r\n                            <i className=\"bx bx-printer font-size-18\"></i>\r\n                        </Button>\r\n                        <span style={{ marginLeft: \"10px\" }}> invoice</span>\r\n\r\n\r\n\r\n                        <Button\r\n                            style={{ marginLeft: \"100px\" }}\r\n                            type=\"button\"\r\n                            className={downBtnCss}\r\n                            data-mdb-toggle=\"tooltip\" data-mdb-placement=\"top\" title={`Download`}\r\n                            onClick={() => { downlodePartyWiseinvoice() }}\r\n                        >\r\n                            <i className=\"bx bx-printer font-size-18\"></i>\r\n                        </Button>\r\n                        <span style={{ marginLeft: \"10px\" }}> Loadingsheetpartywise</span>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n                        <Button\r\n                            style={{ marginLeft: \"100px\" }}\r\n                            type=\"button\"\r\n                            className={downBtnCss}\r\n                            data-mdb-toggle=\"tooltip\" data-mdb-placement=\"top\" title={`Download`}\r\n                            onClick={() => { downlodeinvoice() }}\r\n                        >\r\n                            <i className=\"bx bx-printer font-size-18\"></i>\r\n                        </Button>\r\n                        <span style={{ marginLeft: \"10px\" }}>Receipts</span>\r\n\r\n\r\n\r\n                    </div>\r\n\r\n                </Row>\r\n\r\n                <C_Report />\r\n\r\n\r\n            </div>\r\n        </React.Fragment >\r\n    )\r\n}\r\n\r\nexport default Report\r\n\r\n\r\n\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Utilites\\PdfReport\\DemoData.js",["3670","3671","3672","3673","3674","3675","3676","3677","3678","3679","3680","3681","3682"],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\RouteUpdateRedux\\reducer.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\RouteUpdateRedux\\saga.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\RouteUpdate\\RouteUpdate.js",["3683","3684","3685","3686","3687","3688","3689"],"import React, { useEffect, useState, } from \"react\";\r\nimport {\r\n    Col,\r\n    Row,\r\n} from \"reactstrap\";\r\n\r\nimport { MetaTags } from \"react-meta-tags\";\r\nimport { commonPageField, commonPageFieldSuccess } from \"../../../store/actions\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { BreadcrumbShowCountlabel, Breadcrumb_inputName } from \"../../../store/Utilites/Breadcrumb/actions\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n    comAddPageFieldFunc,\r\n\r\n    initialFiledFunc,\r\n} from \"../../../components/Common/validationFunction\";\r\nimport { PageLoadingSpinner, SaveButton } from \"../../../components/Common/CommonButton\";\r\nimport { breadcrumbReturnFunc, btnIsDissablefunc, metaTagLabel, } from \"../../../components/Common/CommonFunction\";\r\nimport { mode, pageId } from \"../../../routes/index\"\r\nimport paginationFactory, { PaginationListStandalone, PaginationProvider } from \"react-bootstrap-table2-paginator\";\r\nimport ToolkitProvider from \"react-bootstrap-table2-toolkit\";\r\nimport BootstrapTable from \"react-bootstrap-table-next\";\r\nimport { mySearchProps } from \"../../../components/Common/SearchBox/MySearch\";\r\nimport { Post_RouteUpdate, Post_RouteUpdateSuccess, RouteUpdateListAPI, RouteUpdateListSuccess } from \"../../../store/Administrator/RouteUpdateRedux/action\";\r\nimport * as _cfunc from \"../../../components/Common/CommonFunction\";\r\nimport { customAlert } from \"../../../CustomAlert/ConfirmDialog\";\r\nimport { C_Select } from \"../../../CustomValidateForm\";\r\nimport { GetRoutesList } from \"../../../store/Administrator/RoutesRedux/actions\";\r\n\r\nconst RouteUpdate = (props) => {\r\n\r\n    const history = useHistory()\r\n    const dispatch = useDispatch();\r\n\r\n    const fileds = {\r\n        id: \"\",\r\n        Name: \"\",\r\n        IsActive: false\r\n    }\r\n\r\n    const [state, setState] = useState(() => initialFiledFunc(fileds))\r\n\r\n    const [modalCss] = useState(false);\r\n    const [pageMode] = useState(mode.defaultsave);\r\n    const [userPageAccessState, setUserAccState] = useState('');\r\n    const [forceRefresh, setForceRefresh] = useState(false);\r\n\r\n    //Access redux store Data /  'save_ModuleSuccess' action data\r\n    const { postMsg,\r\n        loading,\r\n        RouteUpdateList,\r\n        pageField,\r\n        RoutesList,\r\n        saveBtnloading,\r\n        userAccess } = useSelector((state) => ({\r\n            loading: state.RouteUpdateReducer.loading,\r\n            saveBtnloading: state.RouteUpdateReducer.saveBtnloading,\r\n            postMsg: state.RouteUpdateReducer.postMsg,\r\n            RouteUpdateList: state.RouteUpdateReducer.RouteUpdateList,\r\n            RoutesList: state.RoutesReducer.RoutesList,\r\n            userAccess: state.Login.RoleAccessUpdateData,\r\n            pageField: state.CommonPageFieldReducer.pageField\r\n        }));\r\n    const { Data = [] } = RouteUpdateList\r\n\r\n    useEffect(() => {\r\n        const page_Id = pageId.ROUTE_UPDATE\r\n        dispatch(commonPageFieldSuccess(null));\r\n        dispatch(commonPageField(page_Id))\r\n        dispatch(GetRoutesList())\r\n        dispatch(RouteUpdateListAPI())\r\n        return () => {\r\n            dispatch(RouteUpdateListSuccess([]))\r\n        }\r\n    }, []);\r\n\r\n    const location = { ...history.location }\r\n    const hasShowModal = props.hasOwnProperty(mode.editValue)\r\n\r\n    // userAccess useEffect\r\n    useEffect(() => {\r\n        let userAcc = null;\r\n        let locationPath = location.pathname;\r\n\r\n        if (hasShowModal) {\r\n            locationPath = props.masterPath;\r\n        };\r\n\r\n        userAcc = userAccess.find((inx) => {\r\n            return (`/${inx.ActualPagePath}` === locationPath)\r\n        })\r\n\r\n        if (userAcc) {\r\n            setUserAccState(userAcc)\r\n            breadcrumbReturnFunc({ dispatch, userAcc });\r\n        };\r\n    }, [userAccess])\r\n\r\n    //This UseEffect 'SetEdit' data and 'autoFocus' while this Component load First Time.\r\n    useEffect(() => {\r\n\r\n        if ((postMsg.Status === true) && (postMsg.StatusCode === 200)) {\r\n            dispatch(Post_RouteUpdateSuccess({ Status: false }))\r\n\r\n            if (pageMode === \"other\") {\r\n                customAlert({\r\n                    Type: 1,\r\n                    Message: postMsg.Message,\r\n                })\r\n            }\r\n            else {\r\n                customAlert({\r\n                    Type: 1,\r\n                    Message: postMsg.Message,\r\n                })\r\n            }\r\n        }\r\n        else if (postMsg.Status === true) {\r\n            dispatch(Post_RouteUpdateSuccess({ Status: false }))\r\n            customAlert({\r\n                Type: 4,\r\n                Message: JSON.stringify(postMsg.Message),\r\n            })\r\n        }\r\n    }, [postMsg])\r\n\r\n    useEffect(() => {\r\n        dispatch(BreadcrumbShowCountlabel(`${\"Count\"}:${Data.length}`))\r\n    }, [RouteUpdateList])\r\n\r\n    useEffect(() => {\r\n\r\n        if (pageField) {\r\n            const fieldArr = pageField.PageFieldMaster\r\n            comAddPageFieldFunc({ state, setState, fieldArr })\r\n        }\r\n    }, [pageField])\r\n\r\n    useEffect(() => _cfunc.tableInputArrowUpDounFunc(\"#table_Arrow\"), [Data]);\r\n\r\n    const RoutesListOptions = RoutesList.map((index) => ({\r\n        value: index.id,\r\n        label: index.Name,\r\n        IsActive: index.IsActive\r\n    }));\r\n\r\n    const RouteName_Options = [...RoutesListOptions.filter((index) => index.IsActive === true)];\r\n\r\n    RouteName_Options.unshift({\r\n        value: null,\r\n        label: \"Select...\",\r\n    })\r\n\r\n    const pagesListColumns = [\r\n        {\r\n            text: \"Party Name\",\r\n            dataField: \"SubPartyName\",\r\n        },\r\n        {\r\n            text: \"RouteName\",\r\n            dataField: \"Route Name\",\r\n            style: () => ({ width: \"30%\" }),\r\n            formatExtraData: { forceRefresh },\r\n            formatter: (value, row, key, { forceRefresh }) => {\r\n\r\n                return (\r\n                    <C_Select\r\n                        value={!(row.Route > 0) ? \"\" : {\r\n                            value: row.Route, label: row.RouteName\r\n                        }}\r\n                        options={RouteName_Options}\r\n                        onChange={e => {\r\n                            row[\"Route\"] = e.value;\r\n                            row[\"RouteName\"] = e.label\r\n                            setForceRefresh(!forceRefresh)\r\n                        }}\r\n                    // onCancelClick={() => {\r\n                    //     row[\"Route\"] = null;\r\n                    //     row[\"RouteName\"] = ''\r\n                    //     setForceRefresh(!forceRefresh)\r\n                    // }}\r\n                    >\r\n                    </C_Select >\r\n                )\r\n            },\r\n        }\r\n    ];\r\n\r\n    const pageOptions = {\r\n        sizePerPage: 10,\r\n        totalSize: Data.length,\r\n        custom: true,\r\n    };\r\n\r\n    const SaveHandler = async (event) => {\r\n\r\n        event.preventDefault();\r\n        const btnId = event.target.id\r\n        try {\r\n\r\n            const data = Data.map((index) => ({\r\n                id: index.id,\r\n                Party: index.Party,\r\n                SubPartyName: index.SubPartyName,\r\n                SubParty: index.SubParty,\r\n                Route: index.Route,\r\n                RouteName: index.RouteName,\r\n            }))\r\n            const jsonBody = JSON.stringify({\r\n                Data: data\r\n            })\r\n            dispatch(Post_RouteUpdate({ jsonBody, btnId }));\r\n\r\n        } catch (e) { btnIsDissablefunc({ btnId, state: false }) }\r\n    };\r\n\r\n    // IsEditMode_Css is use of module Edit_mode (reduce page-content marging)\r\n    var IsEditMode_Css = ''\r\n    if ((modalCss) || (pageMode === mode.dropdownAdd)) { IsEditMode_Css = \"-5.5%\" };\r\n\r\n    if (!(userPageAccessState === '')) {\r\n        return (\r\n            <React.Fragment>\r\n                <MetaTags>{metaTagLabel(userPageAccessState)}</MetaTags>\r\n                <PageLoadingSpinner isLoading={(loading || !pageField)} />\r\n                <div className=\"page-content\" style={{ marginTop: IsEditMode_Css }}>\r\n\r\n                    <div style={{ minHeight: \"45vh\" }}>\r\n                        <PaginationProvider pagination={paginationFactory(pageOptions)} >\r\n                            {({ paginationProps, paginationTableProps }) => (\r\n                                <ToolkitProvider\r\n                                    keyField=\"id\"\r\n                                    data={Data}\r\n                                    columns={pagesListColumns}\r\n                                    search\r\n                                >\r\n                                    {toolkitProps => (\r\n                                        <React.Fragment>\r\n                                            <div className=\"table-responsive table\">\r\n                                                <BootstrapTable\r\n                                                    keyField=\"id\"\r\n                                                    id=\"table_Arrow\"\r\n                                                    classes={\"table  table-bordered table-hover\"}\r\n                                                    noDataIndication={\r\n                                                        <div className=\"text-danger text-center \">\r\n                                                            Party Not available\r\n                                                        </div>\r\n                                                    }\r\n                                                    onDataSizeChange={(e) => {\r\n                                                        _cfunc.tableInputArrowUpDounFunc(\"#table_Arrow\")\r\n                                                    }}\r\n                                                    {...toolkitProps.baseProps}\r\n                                                    {...paginationTableProps}\r\n                                                />\r\n                                                {mySearchProps(toolkitProps.searchProps)}\r\n                                            </div>\r\n\r\n                                            <Row className=\"align-items-md-center mt-30\">\r\n                                                <Col className=\"pagination pagination-rounded justify-content-end mb-2\">\r\n                                                    <PaginationListStandalone\r\n                                                        {...paginationProps}\r\n                                                    />\r\n                                                </Col>\r\n                                            </Row>\r\n                                        </React.Fragment>\r\n                                    )}\r\n                                </ToolkitProvider>\r\n                            )}\r\n                        </PaginationProvider>\r\n                    </div>\r\n\r\n                    {Data.length > 0 ?\r\n                        <div className=\"row save1\" style={{ paddingBottom: 'center' }}>\r\n                            <SaveButton pageMode={pageMode}\r\n                                loading={saveBtnloading}\r\n                                onClick={SaveHandler}\r\n                                userAcc={userPageAccessState}\r\n                                module={\"RouteUpdate\"}\r\n                            />\r\n                        </div>\r\n                        : null\r\n                    }\r\n\r\n                </div>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n    else {\r\n        return (\r\n            <React.Fragment></React.Fragment>\r\n        )\r\n    }\r\n};\r\n\r\nexport default RouteUpdate\r\n\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\RouteUpdateRedux\\actionType.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\RouteUpdateRedux\\action.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\Reports\\Report_common_function.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\EmployeeRedux\\saga.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\EmployeeRedux\\reducer.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\EmployeeRedux\\action.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\EmployeeRedux\\actionTypes.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\components\\Common\\CommonFunction.js",["3690","3691","3692","3693","3694","3695","3696","3697","3698","3699","3700","3701","3702","3703","3704","3705","3706","3707"],"import { customAlert } from \"../../CustomAlert/ConfirmDialog\";\r\nimport { CommonBreadcrumbDetails } from \"../../store/actions\";\r\nimport { createBrowserHistory } from 'history';\r\nimport * as mode from \"../../routes/PageMode\"\r\nimport $ from 'jquery';\r\n\r\nexport const history = createBrowserHistory();\r\n\r\n\r\n\r\nfunction isDateInitial(isdate) {\r\n  const current = isdate ? new Date(isdate) : new Date();\r\n  const dd = String(current.getDate()).padStart(2, '0');\r\n  const mm = String(current.getMonth() + 1).padStart(2, '0');\r\n  const yy = current.getFullYear();\r\n  const hours = String(current.getHours()).padStart(2, '0');\r\n  const minutes = String(current.getMinutes()).padStart(2, '0');\r\n  return { dd, mm, yy, hours, minutes };\r\n}\r\n\r\nexport const date_ymd_func = (isdate) => { //+++++++++++++++ Current Date by format (yyyy-dd-mm) ++++++++++++++++++++++++++++++++++++\r\n  let date = isDateInitial(isdate);\r\n  return (`${date.yy}-${date.mm}-${date.dd}`)\r\n};\r\n\r\n\r\nexport const date_dmy_func = (isdate) => { //+++++++++++++++ Current Date by format (dd-mm-yyy) ++++++++++++++++++++++++++++++++++++\r\n  let date = isDateInitial(isdate);\r\n  return (`${date.dd}-${date.mm}-${date.yy}`)\r\n};\r\n\r\nexport const sap_date_dmy_func = (isdate) => { //+++++++++++++++ Current Date by format (dd-mm-yyy) ++++++++++++++++++++++++++++++++++++\r\n  let date = isDateInitial(isdate);\r\n  return (`${date.dd}.${date.mm}.${date.yy}`)\r\n};\r\n\r\nexport const currentDate_ymd = date_ymd_func();\r\nexport const currentDate_dmy = date_dmy_func();\r\n\r\n\r\nexport function convertTimefunc(inputDate) {\r\n  const date = new Date(inputDate);\r\n  const day = String(date.getDate()).padStart(2, '0');\r\n  const month = String(date.getMonth() + 1).padStart(2, '0');\r\n  const year = date.getFullYear();\r\n  const hours = String(date.getHours()).padStart(2, '0');\r\n  const minutes = String(date.getMinutes()).padStart(2, '0');\r\n\r\n  const meridian = hours < 12 ? 'AM' : 'PM';\r\n  const hour12 = (hours % 12) || 12;\r\n\r\n  return `(${day}-${month}-${year} ${hour12}:${minutes} ${meridian})`;\r\n}\r\n\r\nexport function convertOnlyTimefunc(inputDate) {\r\n  const date = new Date(inputDate);\r\n\r\n  const hours = String(date.getHours()).padStart(2, '0');\r\n  const minutes = String(date.getMinutes()).padStart(2, '0');\r\n  const meridian = hours < 12 ? 'AM' : 'PM';\r\n  const hour12 = (hours % 12) || 12;\r\n\r\n  return `(${hour12}:${minutes} ${meridian})`;\r\n}\r\n\r\n\r\nexport function listpageConcatDateAndTime(date, time) {//+++++++++++time and date concate +++++++++++++++++++++++++++++++\r\n  const d = date_dmy_func(date);\r\n  const t = convertTimefunc(time);\r\n  return `${d} ${t}`;\r\n}\r\n\r\n\r\nexport function getDateTime_dmy(hourOffset = 0) {\r\n  const { dd, mm, yy } = isDateInitial();\r\n  const currentDate = new Date();\r\n  currentDate.setHours(currentDate.getHours() - hourOffset); // Subtract the specified number of hours\r\n  const hours = String(currentDate.getHours()).padStart(2, '0');\r\n  const minutes = String(currentDate.getMinutes()).padStart(2, '0');\r\n\r\n  return `${dd}-${mm}-${yy} ${hours}:${minutes}`;\r\n}\r\n\r\nexport function convertDateTime_ydm(inputDateTime) {\r\n  const [datePart, timePart = \"00:00\"] = inputDateTime.split(' ');\r\n  const [day, month, year] = datePart.split('-');\r\n  return `${year}-${month}-${day} ${timePart}`;\r\n}\r\n\r\n\r\nexport function CurrentTime() {\r\n\r\n  function addLeadingZero(number) {\r\n    return number < 10 ? '0' + number : number;\r\n  }\r\n  var currentTimeInMillis = Date.now();\r\n  var currentTime = new Date(currentTimeInMillis);\r\n  var hours = currentTime.getHours();\r\n  var amPm = hours >= 12 ? 'PM' : 'AM';\r\n  hours = hours % 12 || 12; // Convert 0 to 12\r\n  var minutes = currentTime.getMinutes();\r\n  var seconds = currentTime.getSeconds();\r\n  var formattedTime = addLeadingZero(hours) + ':' + addLeadingZero(minutes) + ':' + addLeadingZero(seconds) + ' ' + amPm;\r\n\r\n  return formattedTime\r\n\r\n}\r\n\r\n\r\nexport const getFirstAndLastDateOfMonth = (inputDate) => {\r\n  const [year, month] = inputDate.split('-').map(Number);\r\n  const firstDate = new Date(year, month - 1, 1);\r\n  const lastDate = new Date(year, month, 0);\r\n  const formattedFirstDate = `${year}-${String(month).padStart(2, '0')}-01`;\r\n  const formattedLastDate = `${year}-${String(month).padStart(2, '0')}-${String(lastDate.getDate()).padStart(2, '0')}`;\r\n  return {\r\n    firstDate: formattedFirstDate,\r\n    lastDate: formattedLastDate\r\n  };\r\n}\r\n\r\nexport const getCurrentMonthAndYear = () => {\r\n  const currentDate = new Date();\r\n  const year = currentDate.getFullYear();\r\n  const month = String(currentDate.getMonth() + 1).padStart(2, '0'); // Month is zero-indexed\r\n\r\n  return `${year}-${month}`;\r\n}\r\n\r\n// export const amountCommaSeparateFunc = (amount) => {\r\n//   return Number(amount).toLocaleString('en-IN', {\r\n//     // style: 'currency',\r\n//     currency: 'INR',\r\n//     // minimumFractionDigits: 2,\r\n//     // maximumFractionDigits: 2,\r\n//   });\r\n// };\r\n\r\nexport function amountCommaSeparateFunc(x) {\r\n\r\n  return x.toString().split('.')[0].length > 3 ? x.toString().substring(0, x.toString().split('.')[0].length - 3).replace(/\\B(?=(\\d{2})+(?!\\d))/g, \",\") + \",\" + x.toString().substring(x.toString().split('.')[0].length - 3) : x.toString();\r\n}\r\n\r\nexport const loginUserDetails = () => { //+++++++++++++++++++++ Session Company Id+++++++++++++++++++++++++++++\r\n  let user_Details = '';\r\n  try {\r\n    const a = localStorage.getItem(\"roleId\")\r\n    if (!(a === null)) {\r\n      user_Details = JSON.parse(a);\r\n    }\r\n  } catch (e) {\r\n    CommonConsole(\"Common user_Details  Error\");\r\n  }\r\n  return user_Details;\r\n};\r\n\r\n\r\n\r\nexport const loginUserAdminRole = () => { //+++++++++++++++++++++ Session Company Id+++++++++++++++++++++++++++++\r\n\r\n  try {\r\n    const detail = loginUserDetails();\r\n    return (detail.PartyType === \"Company Division\");\r\n  } catch (e) {\r\n    CommonConsole(\"Common loginUserAdminRole  Error\");\r\n  }\r\n  return false;\r\n};\r\n\r\nexport const loginRoleID = () => { //+++++++++++++++++++++ Session Company Id+++++++++++++++++++++++++++++\r\n\r\n  try {\r\n    const detail = loginUserDetails();\r\n    return detail.Role;\r\n  } catch (e) {\r\n    CommonConsole(\"Common Role ID  Error\");\r\n  }\r\n  return '';\r\n};\r\n\r\nexport const loginUserID = () => {//++++++++++++++++++++++ Session User Id+++++++++++++++++++++++++++++\r\n  let created_By = 0;\r\n  try {\r\n    created_By = JSON.parse(localStorage.getItem(\"userId\"));\r\n  } catch (e) {\r\n    CommonConsole(\"Common Created By Error\");\r\n  }\r\n  return created_By;\r\n};\r\n\r\nexport const loginCompanyID = () => { //+++++++++++++++++++++ Session Company Id+++++++++++++++++++++++++++++\r\n  try {\r\n    return JSON.parse(localStorage.getItem(\"Company\"));\r\n  } catch (e) {\r\n    CommonConsole(\"Common login CompanyID  Error\");\r\n  }\r\n  return 0;\r\n};\r\n\r\nexport const loginCompanyName = () => { //+++++++++++++++++++++ Session Company Id+++++++++++++++++++++++++++++\r\n  try {\r\n    return localStorage.getItem(\"CompanyName\");\r\n  } catch (e) {\r\n    CommonConsole(\"Common login CompanyID  Error\");\r\n  }\r\n  return '';\r\n};\r\n\r\nexport const loginPartyID = () => {//+++++++++++++++++++++ Session loginPartyID Id+++++++++++++++++++++++++++++++\r\n\r\n  try {\r\n    return loginUserDetails().Party_id;\r\n  } catch (e) {\r\n    CommonConsole(\"Common login PartyID Func  Error\");\r\n  }\r\n  return 0;\r\n};\r\n\r\nexport const loginPartyName = () => {//+++++++++++++++++++++ Session loginPartyID Id+++++++++++++++++++++++++++++++\r\n\r\n  try {\r\n    return loginUserDetails().PartyName;\r\n  } catch (e) {\r\n    CommonConsole(\"Common login PartyName Func  Error\");\r\n  }\r\n  return '';\r\n};\r\n\r\nexport const loginSelectedPartyID = () => {//+++++++++++++++++++++ Session common party dropdown id +++++++++++++++++++++++++++++++\r\n  try {\r\n    return JSON.parse(localStorage.getItem(\"selectedParty\")).value;\r\n  } catch (e) {\r\n    CommonConsole(\"Common login PartyID Func  Error\");\r\n  }\r\n  return 0;\r\n};\r\n\r\nexport const loginEmployeeID = () => {//+++++++++++++++++++++ Session loginPartyID Id+++++++++++++++++++++++++++++++\r\n\r\n  try {\r\n    return loginUserDetails().Employee_id;\r\n  } catch (e) {\r\n    alert(\"Common login EmployeeID Func  Error\");\r\n  }\r\n  return 0;\r\n};\r\n\r\nexport const loginIsSCMCompany = () => { //+++++++++++++++++++++ Session loginPartyID Id+++++++++++++++++++++++++++++++\r\n  try {\r\n    return JSON.parse(localStorage.getItem(\"IsSCMCompany\"));\r\n  } catch (e) {\r\n    CommonConsole(\"Common login IsSCMCompany Func  Error\");\r\n  }\r\n  return 0;\r\n};\r\n\r\nexport const loginCompanyGroup = () => {//+++++++++++++++++++++ Session loginPartyID Id+++++++++++++++++++++++++++++++\r\n  try {\r\n    return JSON.parse(localStorage.getItem(\"CompanyGroup\"));\r\n  } catch (e) {\r\n    CommonConsole(\"Common login CompanyGroup Func  Error\");\r\n  }\r\n  return 0;\r\n};\r\n\r\n\r\nexport const loginIsSCMParty = () => { //+++++++++++++++++++++ Session Company Id+++++++++++++++++++++++++++++\r\n  try {\r\n    const detail = loginUserDetails();\r\n    return (detail.IsSCMPartyType === 0) || (detail.IsSCMPartyType === null);\r\n  } catch (e) {\r\n    CommonConsole(\"Common loginIsSCMParty Error\");\r\n  }\r\n  return false;\r\n};\r\n\r\nexport const loginSystemSetting = () => { //+++++++++++++++++++++ Session Company Id+++++++++++++++++++++++++++++\r\n  try {\r\n    const hassetting = JSON.parse(sessionStorage.getItem(\"SystemSetting\"));\r\n    return hassetting || \"\";\r\n  } catch (e) {\r\n    CommonConsole(\"Common loginSystemSetting func  Error\");\r\n  }\r\n  return \"\";\r\n};\r\n\r\nexport const loginUserGSTIN = () => { //+++++++++++++++++++++ Session Company Id+++++++++++++++++++++++++++++\r\n  try {\r\n    return loginUserDetails().GSTIN;\r\n  } catch (e) {\r\n    CommonConsole(\"Common loginUserGSTIN func  Error\");\r\n  }\r\n  return '';\r\n};\r\n\r\nexport const loginJsonBody = () => ({ //+++++++++++++++++++++ loginJsonBody for Filter API +++++++++++++++++++++++++++++\r\n  UserID: loginUserID(),\r\n  RoleID: loginRoleID(),\r\n  CompanyID: loginCompanyID(),\r\n  PartyID: loginPartyID(),\r\n  IsSCMCompany: loginIsSCMCompany(),\r\n  CompanyGroup: loginCompanyGroup(),\r\n});\r\n\r\nexport const compareGSTINState = (gstin1 = '', gstin2 = '') => {\r\n  gstin1 = String(gstin1) || \"\"\r\n  gstin2 = String(gstin2) || \"\"\r\n  let stateCode1 = gstin1.substring(0, 2);\r\n  let stateCode2 = gstin2.substring(0, 2);\r\n\r\n  return (!(stateCode1 === stateCode2) && !(gstin1 === \"\") && !(gstin2 === \"\"));\r\n}\r\n\r\nexport function breadcrumbReturnFunc({ dispatch, userAcc, newBtnPath = \"\", forceNewBtnView = true }) {\r\n\r\n  const isnewBtnView = userAcc.PageType === 2 && userAcc.RoleAccess_IsSave;\r\n  const isCountLabel = userAcc.CountLabel;\r\n  const isexcelBtnView =\r\n    userAcc.PageType === 2 && userAcc.RoleAccess_Exceldownload;\r\n  dispatch(\r\n    CommonBreadcrumbDetails({\r\n      newBtnPath: newBtnPath,\r\n      newBtnView: !forceNewBtnView ? forceNewBtnView : isnewBtnView,\r\n      excelBtnView: isexcelBtnView,\r\n      pageHeading: userAcc.PageHeading,\r\n      CountLabel: isCountLabel,\r\n    })\r\n  );\r\n}\r\nexport function isEditMode_CssFun(pageMode) {\r\n  if ((pageMode === mode.edit) || (pageMode === mode.copy) || (pageMode === mode.dropdownAdd)) {\r\n    return \"-5.5%\"\r\n  }\r\n  return \"\"\r\n}\r\n\r\nexport function metaTagLabel(userPageAccess = '') {\r\n  return <title>{userPageAccess.PageHeading}| FoodERP-2.0</title>\r\n\r\n}\r\nexport function CommonConsole(msg1, msg2 = '', msg3 = '') {// +++++++++++Print Console.log Body+++++++++++++++++++++++++++++++\r\n  console.log(msg1, msg2, msg3);\r\n}\r\n\r\nexport function groupBy(list, keyGetter) {// +++++++++++ Array Group By_kye Function +++++++++++++++++++++++++++++++\r\n  const map = new Map();\r\n  list.forEach((item) => {\r\n    const key = keyGetter(item);\r\n    const collection = map.get(key);\r\n    if (!collection) {\r\n      map.set(key, [item]);\r\n    } else {\r\n      collection.push(item);\r\n    }\r\n  });\r\n  return map;\r\n}\r\n\r\nexport function btnIsDissablefunc({ btnId, state = false }) {// +++++++++++ Button Dissable and Sppiner Function +++++++++++++++++++++++++++++++\r\n\r\n  // if (btnId) {\r\n  //   try {\r\n  //     let btn = document.getElementById(btnId);\r\n  //     btn.disabled = state\r\n\r\n  //     document.getElementById(\"preloader\").style.display = state\r\n  //       ? \"block\"\r\n  //       : \"none\";\r\n  //   } catch (error) {\r\n  //     CommonConsole(`btnIsDissablefunc Error ==> ${btnId}`);\r\n  //   }\r\n  // }\r\n}\r\n\r\nexport async function CheckAPIResponse({ method, url, response = {}, body, error = '' }) {\r\n\r\n  const { data = {} } = response;\r\n  const statusCode = data.StatusCode;\r\n  const MessgeAlreadyShow = error.MessgeAlreadyShow || false\r\n\r\n  const successCodes = [200, 204, 100];\r\n  const rejectionCodes = [226, 400, 406, 500];\r\n\r\n  {/***********error massage********************************************* */ }\r\n\r\n  if (error !== undefined && error !== '') {\r\n    const tokenXp = error.response?.data.code === \"token_not_valid\";\r\n\r\n    if (method === \"post\" || method === \"put\" || method === \"postForget\") {\r\n      CommonConsole(`${url}***=> ${method} Body =>`, body);\r\n    }\r\n\r\n    if (tokenXp) {\r\n      history.push({ pathname: \"/logout\" });\r\n      window.location.reload(true);\r\n      return;\r\n    }\r\n    if (!MessgeAlreadyShow) {\r\n      CommonConsole(`${url}***${method} apiCall response:=>`, error);\r\n      customAlert({ Type: 2, Message: `${url}:This API ${method} Method Execution Error` });\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n  {/******************************************************** */ }\r\n\r\n  if (method === \"post\" || method === \"put\" || method === \"postForget\") {\r\n    CommonConsole(`${url}***=> ${method} Body =>`, body);\r\n  }\r\n\r\n  if (successCodes.includes(statusCode)) {\r\n    CommonConsole(`${url}***${method} apiCall response:=>`, response.data);\r\n    return response.data;\r\n  }\r\n\r\n  if (rejectionCodes.includes(statusCode)) {\r\n    CommonConsole(`${url}***${method} apiCall response:=>`, response.data);\r\n    await customAlert({ Type: 3, Message: JSON.stringify(response.data.Message) });\r\n    response.data[\"MessgeAlreadyShow\"] = true\r\n    return Promise.reject(response.data);\r\n  }\r\n\r\n  return Promise.reject(response);\r\n}\r\n\r\nexport const tableInputArrowUpDounFunc = (tableId) => {\r\n\r\n  // (function ($) {\r\n  $.fn.enableCellNavigation = function () {\r\n\r\n    var arrow = { left: 37, up: 38, right: 39, down: 40 };\r\n\r\n    // select all on focus\r\n    this.find('input').keydown(function (e) {\r\n\r\n      // shortcut for key other than arrow keys\r\n      if ($.inArray(e.which, [arrow.left, arrow.up, arrow.right, arrow.down]) < 0) { return; }\r\n\r\n      if (!($.inArray(e.which, [arrow.up, arrow.down]) < 0)) {\r\n        let hasSelect = e.target.offsetParent.classList.contains(\"select2-selection__value-container\");\r\n        if (hasSelect) {\r\n          e.stopPropagation()\r\n        }\r\n\r\n      }\r\n      var input = e.target;\r\n      var td = $(e.target).closest('td');\r\n\r\n      var moveTo = null;\r\n\r\n      switch (e.which) {\r\n\r\n        case arrow.left: {\r\n\r\n\r\n          if (input.selectionStart == 0) {\r\n            moveTo = td.prev('td:has(input,textarea)');\r\n\r\n\r\n            var tr = td.closest('tr');\r\n            var pos = td[0].cellIndex;\r\n            var ctd = tr.children('td')\r\n\r\n            let prevTd = td\r\n            let in_d = 0\r\n            while ((in_d < pos)) {\r\n\r\n              moveTo = prevTd.prev('td:has(input,textarea)');\r\n              if (moveTo.length > 0) { in_d = ctd.length - 1 }\r\n              prevTd = td.prev('td')\r\n              in_d++;\r\n            }\r\n\r\n          }\r\n          if (moveTo && moveTo.length) {\r\n\r\n            e.preventDefault();\r\n            var tdInput = moveTo.find('input,textarea')\r\n\r\n            if (tdInput.length > 0) {\r\n              tdInput[0].focus();\r\n              tdInput[0].select();\r\n            }\r\n          }\r\n\r\n          break;\r\n        }\r\n        case arrow.right: {\r\n          if (input.selectionEnd == input.value.length) {\r\n\r\n            var tr = td.closest('tr');\r\n            var pos = td[0].cellIndex;\r\n            var ctd = tr.children('td')\r\n\r\n            let nextTd = td\r\n\r\n            while (pos < ctd.length) {\r\n\r\n              moveTo = nextTd.next('td:has(input,textarea)');\r\n              if (moveTo.length > 0) { pos = ctd.length + 1 }\r\n              nextTd = td.next('td')\r\n              pos++;\r\n            }\r\n\r\n          }\r\n\r\n          if (moveTo && moveTo.length) {\r\n\r\n            e.preventDefault();\r\n            var tdInput = moveTo.find('input,textarea')\r\n\r\n            if (tdInput.length > 0) {\r\n              tdInput[0].focus();\r\n              tdInput[0].select();\r\n            }\r\n          }\r\n          break;\r\n        }\r\n\r\n        case arrow.up: {\r\n          var thisIndex = $(input).index('input:text');\r\n          var pre = thisIndex - 1;\r\n\r\n          var tdPreInput\r\n          td.find('input').each(function (i2, tdEle) {\r\n\r\n            var thisIndex = $(tdEle).index('input:text');\r\n            if (pre === thisIndex) {\r\n              tdPreInput = tdEle\r\n            }\r\n          });\r\n\r\n          if (tdPreInput) {\r\n            tdPreInput.focus()\r\n            tdPreInput.select();\r\n            return\r\n          }\r\n          var tr = td.closest('tr');\r\n          var pos = td[0].cellIndex;\r\n          var moveToRow = tr.prev('tr');\r\n\r\n\r\n          if (moveToRow.length) {\r\n            moveTo = $(moveToRow[0].cells[pos]);\r\n          }\r\n          if (moveTo && moveTo.length) {\r\n\r\n            e.preventDefault();\r\n            var tdInput = moveTo.find('input,textarea')\r\n\r\n            if (tdInput.length > 0) {\r\n              tdInput[tdInput.length - 1].focus();\r\n              tdInput[tdInput.length - 1].select();\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        case arrow.down: {\r\n\r\n          var thisIndex = $(input).index('input:text');\r\n          var next = thisIndex + 1;\r\n\r\n          var tdNextInput\r\n          td.find('input').each(function (i2, tdEle) {\r\n\r\n            var thisIndex = $(tdEle).index('input:text');\r\n            if (next === thisIndex) {\r\n              tdNextInput = tdEle\r\n            }\r\n          });\r\n\r\n          if (tdNextInput) {\r\n            tdNextInput.focus();\r\n            tdNextInput.select()\r\n\r\n            return\r\n          }\r\n          var tr = td.closest('tr');\r\n          var pos = td[0].cellIndex;\r\n\r\n          var moveToRow = tr.next('tr');\r\n\r\n          if (moveToRow.length) {\r\n            moveTo = $(moveToRow[0].cells[pos]);\r\n          }\r\n          if (moveTo && moveTo.length) {\r\n\r\n            e.preventDefault();\r\n            var tdInput = moveTo.find('input,textarea')\r\n\r\n            if (tdInput.length > 0) {\r\n              tdInput[0].focus();\r\n              tdInput[0].select();\r\n            }\r\n          }\r\n          break;\r\n        }\r\n      }\r\n    });\r\n\r\n  };\r\n\r\n\r\n  $(function () {\r\n    $(tableId).enableCellNavigation();\r\n  });\r\n\r\n\r\n}\r\n\r\nexport function trailingZeros(value) {// +++++++++++Print Console.log Body+++++++++++++++++++++++++++++++\r\n\r\n  return parseFloat(value).toString()\r\n}\r\n\r\n\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\components\\Common\\C_Report.js",["3708","3709"],"import { useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { getpdfReportdataSuccess, postpdfMultipleReportdataSuccess } from '../../store/Utilites/PdfReport/actions'\r\nimport generateReport from '../../Reports/ReportIndex';\r\n\r\nexport default function C_Report() {\r\n\r\n    const dispatch = useDispatch();\r\n    const { pdfdata } = useSelector((state) => ({\r\n        pdfdata: state.PdfReportReducers.pdfdata\r\n    }))\r\n\r\n    useEffect(() => {\r\n        \r\n        if ((pdfdata.Status === true) && (pdfdata.StatusCode === 200)) {\r\n\r\n            generateReport(pdfdata)\r\n            dispatch(getpdfReportdataSuccess({ Status: false }))\r\n        }\r\n    }, [pdfdata])\r\n\r\n    return (null)\r\n}\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\components\\Common\\CommonMasterListPage.js",["3710","3711","3712","3713","3714","3715","3716","3717","3718","3719","3720","3721"],"\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Modal } from \"reactstrap\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { MetaTags } from \"react-meta-tags\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { BreadcrumbShowCountlabel, CommonBreadcrumbDetails } from \"../../store/actions\";\r\nimport { breadcrumbReturnFunc, metaTagLabel, }\r\n  from \"./CommonFunction\";\r\nimport { customAlert } from \"../../CustomAlert/ConfirmDialog\";\r\nimport { listPageActionsButtonFunc } from \"./ListActionsButtons\";\r\nimport DynamicColumnHook from \"./TableCommonFunc\";\r\nimport CustomTable from \"../../CustomTable2\";\r\n\r\n\r\n\r\nconst CommonListPage = (props) => {\r\n\r\n  const dispatch = useDispatch();\r\n  const history = useHistory()\r\n\r\n  const [userAccState, setUserAccState] = useState('');\r\n  const [modal_edit, setmodal_edit] = useState(false);\r\n\r\n  const {\r\n    tableList,\r\n    editData,\r\n    updateMsg,\r\n    deleteMsg,\r\n    userAccess,\r\n    postMsg,\r\n    pageField,\r\n\r\n  } = props.reducers;\r\n\r\n  const {\r\n    getList,\r\n    editId,\r\n    deleteId,\r\n    postSucc,\r\n    updateSucc,\r\n    deleteSucc\r\n\r\n  } = props.action\r\n\r\n  const {\r\n    getListbodyFunc = () => { },\r\n    MasterModal,\r\n    ButtonMsgLable,\r\n    masterPath,\r\n\r\n  } = props;\r\n\r\n  const { PageFieldMaster = [] } = { ...pageField };\r\n\r\n  useEffect(() => {\r\n    const locationPath = history.location.pathname\r\n    let userAcc = userAccess.find((inx) => {\r\n      return (`/${inx.ActualPagePath}` === locationPath)\r\n    })\r\n    if (!(userAcc === undefined)) {\r\n      setUserAccState(userAcc);\r\n      breadcrumbReturnFunc({ dispatch, userAcc, newBtnPath: masterPath });\r\n    }\r\n  }, [userAccess]);\r\n\r\n\r\n  useEffect(() => {\r\n\r\n    let downList = [];\r\n    let defaultDownList2 = [];\r\n    let listObj = {};\r\n    let listObj2 = {};\r\n\r\n    tableList.forEach((index1) => {\r\n\r\n      PageFieldMaster.forEach((index2) => {\r\n\r\n        if (index2.ShowInDownload) {\r\n          listObj2[index2.ControlID] = index2.ShownloadDefaultSelect\r\n          listObj[index2.ControlID] = index1[index2.ControlID]\r\n        }\r\n      })\r\n\r\n      downList.push(listObj)\r\n      defaultDownList2.push(listObj2)\r\n      listObj = {}\r\n    })\r\n    dispatch(CommonBreadcrumbDetails({ downBtnData: downList, defaultDownBtnData: listObj2 }))\r\n  }, [tableList])\r\n\r\n  \r\n  useEffect(async () => {// This UseEffect => UpadateModal Success/Unsucces  Show and Hide Control Alert_modal\r\n\r\n    if (updateMsg.Status === true && updateMsg.StatusCode === 200) {\r\n      dispatch(updateSucc({ Status: false }));\r\n      dispatch(getList(getListbodyFunc()));\r\n      customAlert({\r\n        Type: 1,\r\n        Message: JSON.stringify(updateMsg.Message),\r\n      })\r\n      tog_center();\r\n    } else if (updateMsg.Status === true) {\r\n      dispatch(updateSucc({ Status: false }));\r\n      customAlert({\r\n        Type: 3,\r\n        Message: JSON.stringify(updateMsg.Message),\r\n      })\r\n    }\r\n  }, [updateMsg]);\r\n\r\n\r\n  useEffect(async () => {\r\n    if (deleteMsg.Status === true && deleteMsg.StatusCode === 200) {\r\n      dispatch(deleteSucc({ Status: false }));\r\n\r\n      const promise = await customAlert({\r\n        Type: 1,\r\n        Message: deleteMsg.Message,\r\n      })\r\n      dispatch(getList(getListbodyFunc()));\r\n    } else if (deleteMsg.Status === true) {\r\n      dispatch(deleteSucc({ Status: false }));\r\n      customAlert({\r\n        Type: 3,\r\n        Message: JSON.stringify(deleteMsg.Message),\r\n      })\r\n    }\r\n  }, [deleteMsg]);\r\n\r\n\r\n  useEffect(async () => {\r\n\r\n    if ((postMsg.Status === true) && (postMsg.StatusCode === 200)) {\r\n      dispatch(postSucc({ Status: false }))\r\n      const promise = await customAlert({\r\n        Type: 1,\r\n        Message: postMsg.Message\r\n      })\r\n      dispatch(getList(getListbodyFunc()));\r\n      tog_center();\r\n    }\r\n\r\n    else if ((postMsg.Status === true)) {\r\n      dispatch(postSucc({ Status: false }))\r\n      customAlert({\r\n        Type: 4,\r\n        Message: JSON.stringify(postMsg.Message),\r\n      })\r\n    }\r\n  }, [postMsg])\r\n\r\n  \r\n  useEffect(() => {// Edit Modal Show When Edit Data is true\r\n    if (editData.Status === true) {\r\n      if (pageField.IsEditPopuporComponent) {\r\n        history.push({\r\n          pathname: masterPath,\r\n          editValue: editData.Data,\r\n          pageMode: editData.pageMode,\r\n        })\r\n      }\r\n      else {\r\n        setmodal_edit(true)\r\n      }\r\n    }\r\n  }, [editData]);\r\n\r\n  function tog_center() {\r\n    if (modal_edit) {\r\n      breadcrumbReturnFunc({ dispatch, userAcc: userAccState, newBtnPath: masterPath });\r\n    }\r\n    setmodal_edit(false)\r\n  }\r\n\r\n\r\n  const lastColumn = () => {\r\n    return listPageActionsButtonFunc({\r\n      ...props, dispatch, history, userAccState,\r\n      editActionFun: editId,\r\n      deleteActionFun: deleteId,\r\n    })\r\n  }\r\n  const [tableColumns, defaultSorted] = DynamicColumnHook({\r\n    pageField,\r\n    lastColumn,\r\n    userAccState,\r\n    reducers: props.reducers,\r\n  })\r\n\r\n  if (!(userAccState === '')) {\r\n    return (\r\n      <React.Fragment>\r\n        <MetaTags> {metaTagLabel(userAccState)}</MetaTags>\r\n        <div className=\"page-content\">\r\n\r\n          <CustomTable\r\n            keyField={\"id\"}\r\n            data={tableList}\r\n            columns={tableColumns}\r\n            defaultSorted={defaultSorted}\r\n            onDataSizeChange={({ dataCount }) => {\r\n              dispatch(BreadcrumbShowCountlabel(`Count:${dataCount}`));\r\n            }}\r\n            paginationEnabled={true}\r\n            noDataIndication={<div className=\"text-danger text-center table-cursor-pointer\"  >Data Not available</div>}\r\n          />\r\n\r\n          <Modal isOpen={modal_edit} toggle={() => { tog_center() }} size=\"xl\">\r\n            <MasterModal editValue={editData.Data} masterPath={masterPath} pageMode={editData.pageMode} pageHeading={userAccess.pageHeading} />\r\n          </Modal>\r\n        </div>\r\n\r\n      </React.Fragment>\r\n    );\r\n  }\r\n  else {\r\n    return (\r\n      <React.Fragment></React.Fragment>\r\n    )\r\n  }\r\n}\r\n\r\nexport default CommonListPage;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\components\\Common\\validationFunction.js",["3722","3723"],"import { CommonConsole } from \"./CommonFunction\";\r\n\r\nexport const formValid = ({ isError, required, hasValid, fieldLabel, values }, setState) => {\r\n    let isValid = true;\r\n\r\n    Object.keys(required).forEach((lab) => {\r\n\r\n        if (!(hasValid[lab].valid)) {\r\n            isError[lab] = hasValid[lab].inValidMsg\r\n            isValid = false\r\n            setState({ isError, hasValid, required, fieldLabel, values })\r\n        }\r\n    });\r\n    return isValid\r\n};\r\n\r\nexport const formValChange = ({ event, state, setState }) => {\r\n    let isError = { ...state.isError };\r\n    let hasValid = { ...state.hasValid };\r\n    let required = { ...state.required };\r\n    let fieldLabel = { ...state.fieldLabel };\r\n    let values = { ...state.values };\r\n\r\n    if (!(event.target === undefined)) {\r\n        event.preventDefault();\r\n        const { name, value, type, checked } = event.target;\r\n        switch (type) {\r\n            case \"text\": {\r\n                const regExp = RegExp(hasValid[name].regExp)\r\n                if (regExp.test(value)) {\r\n                    isError[name] = \"\";\r\n                    hasValid[name].valid = true\r\n                }\r\n                else {\r\n                    isError[name] = hasValid[name].inValidMsg;\r\n                    hasValid[name].valid = false\r\n                }\r\n                values[name] = value;\r\n            }\r\n                break;\r\n            case \"checkbox\":\r\n\r\n                if (!(required[name] === undefined)) {\r\n                    if (checked) {\r\n                        isError[name] = \"\";\r\n                        hasValid[name].valid = true\r\n                        values[name] = checked\r\n                    }\r\n                    else {\r\n                        isError[name] = hasValid[name].inValidMsg;\r\n                        hasValid[name].valid = true\r\n                        values[name] = checked\r\n                    }\r\n                }\r\n                else {\r\n                    isError[name] = \"\";\r\n                    hasValid[name].valid = true\r\n                    values[name] = checked\r\n                }\r\n                break;\r\n\r\n            case \"password\": {\r\n                const regExp = RegExp(hasValid[name].regExp)\r\n                if (regExp.test(value)) {\r\n                    isError[name] = \"\";\r\n                    hasValid[name].valid = true\r\n                }\r\n                else {\r\n                    isError[name] = hasValid[name].inValidMsg;\r\n                    hasValid[name].valid = false\r\n                }\r\n                values[name] = value;\r\n            }\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n\r\n        setState({ isError, hasValid, required, fieldLabel, values })\r\n    }\r\n    else {\r\n        const { name, value, } = event.change\r\n        const { type } = event\r\n\r\n\r\n        switch (type) {\r\n            case \"select\":\r\n\r\n                const result = Array.isArray(value);\r\n                if (!result) {\r\n                    if (!(value.value === undefined)) {\r\n                        if (!(required[name] === undefined && value.value > 0)) {\r\n                            isError[name] = \"\";\r\n                            hasValid[name].valid = true\r\n                        }\r\n                        else if ((required[name] === undefined)) {\r\n                            isError[name] = \"\";\r\n                            hasValid[name].valid = true\r\n                        }\r\n                        else {\r\n                            isError[name] = hasValid[name].inValidMsg;\r\n                            hasValid[name].valid = false\r\n                        }\r\n                    }\r\n                    else {\r\n                        isError[name] = hasValid[name].inValidMsg;\r\n                        hasValid[name].valid = false\r\n                    }\r\n                }\r\n                else {\r\n                    if (!(required[name] === undefined) && (value.length > 0)) {\r\n                        isError[name] = \"\";\r\n                        hasValid[name].valid = true\r\n                    }\r\n                    else {\r\n                        isError[name] = hasValid[name].inValidMsg;\r\n                        hasValid[name].valid = false\r\n                    }\r\n                }\r\n                values[name] = value\r\n                break;\r\n\r\n            case \"date\":\r\n                isError[name] = \"\";\r\n                hasValid[name].valid = true\r\n                values[name] = value\r\n                break;\r\n\r\n            default:\r\n                break;\r\n\r\n        }\r\n        setState({\r\n            isError, hasValid, required, fieldLabel, values\r\n        })\r\n    }\r\n};\r\n\r\nexport function comAddPageFieldFunc({ state, setState, fieldArr }) {\r\n\r\n    var isState = { ...state }\r\n    const values = { ...state.values }\r\n    try {\r\n        fieldArr.forEach(ele => {\r\n            Object.keys(values).some(lab => {\r\n                if (lab === ele.ControlID) {\r\n                    isState.fieldLabel[lab] = ele.FieldLabel;\r\n                    isState.hasValid[lab].regExp = ele.RegularExpression;\r\n                    isState.hasValid[lab].inValidMsg = ele.InValidMsg;\r\n                    if (ele.IsCompulsory) {\r\n                        isState.required[lab] = true\r\n                    }\r\n                    return true\r\n                };\r\n\r\n            });\r\n        });\r\n\r\n        setState(isState)\r\n    } catch (e) { CommonConsole(e) }\r\n}\r\n\r\nexport function defaultSetValidAll({ state, setState, fieldArr }) {\r\n    Object.keys(state.values).some(lab => {\r\n        state.hasValid[lab] = true\r\n    });\r\n    return\r\n}\r\n\r\nexport const onChangeSelect = ({ hasSelect, evn, state, setState }) => {\r\n\r\n    const event = { change: { name: evn.name, value: hasSelect }, type: \"select\" }\r\n    formValChange({ event, state, setState })\r\n}\r\n\r\nexport const onChangeDate = ({ v, e, state, setState }) => {\r\n    const event = { change: { name: e.input.name, value: v }, type: \"date\" }\r\n    formValChange({ event, state, setState })\r\n}\r\n\r\nexport const onChangeText = ({ event, state, setState }) => {\r\n    debugger\r\n    formValChange({ event, state, setState })\r\n}\r\n\r\nexport const onChangeCheckbox = ({ event, state, setState }) => {\r\n    setState(() => {\r\n\r\n        const a = { ...state }\r\n        const { name, checked } = event.target;\r\n        if (!(a.required[name] === undefined)) {\r\n            if (checked) {\r\n                a.isError[name] = \"\";\r\n                a.hasValid[name].valid = true\r\n                a.values[name] = checked\r\n            }\r\n            else {\r\n                a.isError[name] = a.hasValid[name].inValidMsg;\r\n                a.hasValid[name].valid = true\r\n                a.values[name] = checked\r\n            }\r\n        }\r\n        else {\r\n            a.isError[name] = \"\";\r\n            a.hasValid[name].valid = true\r\n            a.values[name] = checked\r\n        }\r\n        return a\r\n    })\r\n}\r\n\r\nexport const initialFiledFunc = (field) => {\r\n    \r\n    const obj = {}\r\n    obj[\"values\"] = field;\r\n    obj[\"fieldLabel\"] = {}\r\n    obj[\"isError\"] = {}\r\n    obj[\"hasValid\"] = {}\r\n    obj[\"required\"] = {}\r\n\r\n    Object.keys(field).forEach(label => {\r\n\r\n        obj.fieldLabel[label] = ''\r\n        obj.isError[label] = ''\r\n        obj.hasValid[label] = {}\r\n        obj.hasValid[label][\"regExp\"] = \"\"\r\n        obj.hasValid[label][\"inValidMsg\"] = \"\"\r\n        obj.hasValid[label][\"valid\"] = false;\r\n\r\n    })\r\n    return obj\r\n}\r\n\r\nexport const resetFunction = (field, state) => {\r\n\r\n    let preState = { ...state }\r\n    preState.values = field\r\n    Object.keys(field).forEach(label => {\r\n        preState.hasValid[label][\"valid\"] = false\r\n    })\r\n    return preState\r\n}\r\n\r\nexport const bulkSetState = (field, state, setState) => {\r\n\r\n    let preState = { ...state }\r\n    Object.keys(field).forEach(label => {\r\n        preState.hasValid[label][\"valid\"] = true\r\n        preState.values[label] = field[label]\r\n    })\r\n    setState(preState)\r\n}","D:\\Rohit\\Git projects\\Manthan\\src\\components\\Common\\CommonButton.js",["3724"],"import { Button, Spinner } from \"reactstrap\"\r\nimport { loginUserID } from \"./CommonFunction\";\r\nimport * as mode from \"../../routes/PageMode\"\r\nimport { useEffect, useState } from \"react\";\r\n\r\nexport function SaveButton(props) {\r\n  const { pageMode = '', userAcc = {}, editCreatedBy } = props\r\n  const isCreated = (loginUserID() === editCreatedBy)\r\n\r\n  if (pageMode === mode.edit) {\r\n    if ((userAcc.RoleAccess_IsEdit) || ((userAcc.RoleAccess_IsEditSelf) && (isCreated))) {\r\n      return <UpdateBtn {...props} />\r\n    }\r\n\r\n  }\r\n  else if ((userAcc.RoleAccess_IsSave) && (pageMode === mode.defaultsave\r\n    || pageMode === mode.copy\r\n    || pageMode === mode.modeSTPsave\r\n    || pageMode === mode.dropdownAdd\r\n    || pageMode === mode.assingLink)) {\r\n    return <SaveBtn  {...props} />\r\n  }\r\n  return null\r\n}\r\nconst SaveBtn = ({ onClick, type = \"button\", userAcc, loading, forceDisabled }) => {\r\n  const { Name } = userAcc;\r\n  const btnId = `Save-${Name.replace(/ /g, \"\")}`;\r\n  return (\r\n    <div>\r\n      {loading ?\r\n        <button\r\n          id={btnId}\r\n          title={`Save ${Name} Loging...`}\r\n          type={type}\r\n          className=\"btn btn-primary w-md\"\r\n        >  Saving.. &nbsp;\r\n          <Spinner style={{ height: \"13px\", width: \"13px\" }} color=\"white\" />\r\n        </button>\r\n\r\n        :\r\n        <button\r\n          type={type}\r\n          id={btnId}\r\n          disabled={forceDisabled}\r\n          title={`Save ${Name}`}\r\n          className=\"btn btn-primary w-md\"\r\n          onClick={onClick}\r\n        > <i className=\"fas fa-save me-2\"></i> Save\r\n        </button>}\r\n    </div>\r\n  )\r\n\r\n}\r\nconst UpdateBtn = ({ onClick, userAcc, loading, type = 'button' }) => {\r\n  const { Name } = userAcc;\r\n  const btnId = `Update-${Name.replace(/ /g, \"\")}`;\r\n\r\n  return (\r\n    <div>\r\n      {loading ?\r\n        <button\r\n          id={btnId}\r\n          title={`Updating.. ${Name} `}\r\n          type={type}\r\n          className=\"btn btn-success w-md\"\r\n        >  Updating.. &nbsp;\r\n          <Spinner style={{ height: \"13px\", width: \"13px\" }} color=\"white\" />\r\n        </button>\r\n        :\r\n        <button\r\n          type={type}\r\n          id={btnId}\r\n          title={`Update ${Name}`}\r\n          className=\"btn btn-success w-md\"\r\n          onClick={onClick}\r\n        >\r\n          <i class=\"fas fa-edit me-2\"></i>Update\r\n        </button >\r\n      }\r\n    </div>\r\n  )\r\n}\r\n\r\nexport function Go_Button(props) {\r\n\r\n  const { onClick, id, type = \"button\", loading, forceDisabled } = props\r\n\r\n  return loading ?\r\n    <Button\r\n      id={id}\r\n      type={type}\r\n      disabled\r\n      title={`Go Button Loging...`}\r\n      color=\"btn btn-outline-success border-1\"\r\n      onClick={onClick} >\r\n      <Spinner style={{ height: \"13px\", width: \"13px\" }} color=\"success\" />\r\n    </Button>\r\n    : <Button\r\n      id={id}\r\n      type={type}\r\n      disabled={forceDisabled}\r\n      color=\"btn btn-success border-1 font-size-12\"\r\n      onClick={onClick} > <span className=\"font-weight-bold\" style={{ fontWeight: \"bold\", fontSize: \"16px\" }}>Go</span></Button>\r\n}\r\n\r\nexport function Change_Button(props) {\r\n  const { onClick, id, type = \"button\", forceDisabled } = props\r\n  return <Button\r\n    id={id}\r\n    disabled={forceDisabled}\r\n    type={type}\r\n    color=\"btn btn-outline-info border-1 font-size-12 \"\r\n    onClick={onClick}>Change</Button>\r\n}\r\n\r\nexport function C_Button({\r\n  loading,\r\n  color,\r\n  onClick,\r\n  forceDisabled,\r\n  children,\r\n  spinnerColor = \"primary\",\r\n  ...rest\r\n}) {\r\n  debugger\r\n  if (loading) {\r\n    return (\r\n      <button\r\n        disabled\r\n        title={`Add Button Loading...`}\r\n        {...rest}\r\n      >\r\n        <Spinner style={{ height: \"12px\", width: \"12px\" }} color={spinnerColor} />\r\n      </button>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <button\r\n      disabled={forceDisabled}\r\n      onClick={onClick}\r\n      {...rest}\r\n    >\r\n      {children}\r\n    </button>\r\n  );\r\n}\r\n\r\n\r\nexport const GotoInvoiceBtn = ({ onClick, userAcc, loading, forceDisabled }) => {\r\n  const { Name } = userAcc;\r\n  const btnId = `gotoInvoiceBtn-${Name.replace(/ /g, \"\")}`;\r\n  return (\r\n    <div>\r\n      {loading ?\r\n        <button\r\n          id={btnId}\r\n          type=\"button\"\r\n          className=\"btn btn-info w-md\"\r\n        >  Saving.. &nbsp;\r\n          <Spinner style={{ height: \"13px\", width: \"13px\" }} color=\"white\" />\r\n        </button>\r\n        :\r\n        <button\r\n          type=\"button\"\r\n          id={btnId}\r\n          disabled={forceDisabled}\r\n          title={` save & goto Invoice ${Name}`}\r\n          className=\"btn btn-info w-md\"\r\n          onClick={onClick}\r\n        >  Go to Invoice\r\n        </button>}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport const SaveAndDownloadPDF = ({ onClick, userAcc, loading, forceDisabled, type = \"button\" }) => {\r\n  const { Name } = userAcc;\r\n  const btnId = `SaveAndDownloadPdfBtn-${Name.replace(/ /g, \"\")}`;\r\n  return (\r\n    <div>\r\n      {loading ?\r\n        <button\r\n          id={btnId}\r\n          type={type}\r\n          className=\"btn btn-info w-md\"\r\n        >Saving.. &nbsp;\r\n          <Spinner style={{ height: \"13px\", width: \"13px\" }} color=\"white\" />\r\n        </button>\r\n        :\r\n        <button\r\n          type={type}\r\n          id={btnId}\r\n          disabled={forceDisabled}\r\n          title={` save & goto Invoice ${Name}`}\r\n          className=\"btn btn-info w-md\"\r\n          onClick={onClick}\r\n        >  Save & Print\r\n        </button>}\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nexport function Loader() {// linner component\r\n  return <div className=\"dot-pulse\"> <span> </span>     &nbsp;\r\n    <div className=\"bounce1\" style={{ background: \"white\" }}></div>\r\n    <div className=\"bounce2\" style={{ background: \"white\" }}></div>\r\n    <div className=\"bounce3\" style={{ background: \"white\" }}></div>\r\n  </div>\r\n\r\n}\r\n\r\nexport function Listloader() {// common Listcomponent\r\n  return <div id=\"api_spinner\" >\r\n    <div className=\"api_spinner_body \" >\r\n      <span className=\"spinner\" ></span>\r\n    </div>\r\n  </div>\r\n\r\n}\r\n\r\nexport function Listloader1({ show = false }) {// common Listcomponent\r\n  if (!show) { return null }\r\n  else {\r\n    return <div id=\"api_spinner\" >\r\n      <div className=\"api_spinner_body \" >\r\n        <span className=\"spinner\" style={{ left: \"-5cm\" }}></span>\r\n      </div>\r\n    </div>\r\n  }\r\n}\r\n\r\n\r\n// export function PageLoadingSpinner({ isLoading }) {// common Listcomponent\r\n//   // if (!isLoading) {\r\n//   //   return null\r\n//   // }\r\n//   useEffect(() => {\r\n//     //init body click event fot toggle rightbar\r\n//     // document.body.addEventListener(\"click\", hideRightbar, true);\r\n//     try {\r\n//       if (isLoading === true) {\r\n//         document.getElementById(\"preloader\").style.display = \"block\";\r\n//       } else {\r\n//         document.getElementById(\"preloader\").style.display = \"none\";\r\n//       }\r\n//     } catch (w) { }\r\n//   }, [isLoading]);\r\n\r\n//   return <></>\r\n//   // return <div id=\"api_spinner\" >\r\n//   //   <div className=\"api_spinner_body \" >\r\n//   //     <span className=\"spinner\" style={{ marginLeft: \"-20vw\" }} ></span>\r\n//   //   </div>\r\n//   // </div>\r\n\r\n// }\r\n\r\nexport function DashboardLoader() {// linner component\r\n  return <div className=\"dot-pulse mt-2\"> &nbsp; &nbsp;&nbsp;\r\n    <div className=\"bounce1\" ></div>\r\n    <div className=\"bounce2\" ></div>\r\n    <div className=\"bounce3\" ></div>\r\n  </div>\r\n\r\n}\r\n\r\n\r\nexport function PageLoadingSpinner({ isLoading }) {\r\n\r\n  const [isInitialLoad, setIsInitialLoad] = useState(true);\r\n\r\n  useEffect(() => {\r\n    try {\r\n      if (isLoading && isInitialLoad) {\r\n        document.getElementById('preloader').style.display = 'block';\r\n        setIsInitialLoad(false);\r\n      } else {\r\n        document.getElementById('preloader').style.display = 'none';\r\n      }\r\n    } catch (w) { }\r\n    return () => {\r\n      try {\r\n        document.getElementById('preloader').style.display = 'none';\r\n      } catch (w) { }\r\n    }\r\n  }, [isLoading]);\r\n\r\n  return (\r\n    <div className=\"pace pace-active\" id=\"preloader\">\r\n      <div className=\"pace-progress\" data-progress-text=\"100%\" data-progress=\"99\" style={{ transform: \"translate3d(100%, 0px, 0px)\" }}>\r\n        <div className=\"pace-progress-inner\"></div>\r\n      </div>\r\n      <div className=\"pace-activity\"></div></div>\r\n  );\r\n}\r\n\r\n\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\components\\Common\\CommonPurchaseList.js",["3725","3726","3727","3728","3729","3730","3731","3732","3733","3734","3735"],"import React, { useEffect, useState } from \"react\";\r\nimport { Button, Input, Modal, Spinner } from \"reactstrap\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { MetaTags } from \"react-meta-tags\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {\r\n  BreadcrumbShowCountlabel,\r\n  CommonBreadcrumbDetails,\r\n} from \"../../store/actions\";\r\nimport { amountCommaSeparateFunc, breadcrumbReturnFunc, metaTagLabel } from \"./CommonFunction\";\r\nimport C_Report from \"./C_Report\";\r\nimport * as mode from \"../../routes/PageMode\";\r\nimport { customAlert } from \"../../CustomAlert/ConfirmDialog\";\r\nimport { E_Invoice_ActionsButtonFunc, E_WayBill_ActionsButtonFunc, hideBtnCss, listPageActionsButtonFunc, makeBtnCss } from \"./ListActionsButtons\";\r\nimport DynamicColumnHook, { selectAllCheck } from \"./TableCommonFunc\";\r\nimport { url } from \"../../routes\";\r\nimport { C_Button } from \"./CommonButton\";\r\nimport CustomTable from \"../../CustomTable2\";\r\nimport ExtraTableWrapper from \"../../CustomTable2/TableWrapper\";\r\n\r\n\r\nexport async function isAlertFunc(type, Msg) {\r\n  await customAlert({\r\n    Type: type,\r\n    Message: Msg.Message,\r\n    isFunc: true,\r\n  });\r\n}\r\n\r\nconst CommonPurchaseList = (props) => {\r\n\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n\r\n  const [userAccState, setUserAccState] = useState(\"\");\r\n  const [modal_edit, setmodal_edit] = useState(false);\r\n  // const [tableList, settableList] = useState([]);\r\n  const {\r\n    editData = { Data: \"\" },\r\n    updateMsg = { Status: false },\r\n    deleteMsg = { Status: false },\r\n    userAccess = [],\r\n    postMsg = { Status: false },\r\n    pageField = { id: \"\" },\r\n    tableList = [],\r\n    listBtnLoading = false,\r\n  } = props.reducers;\r\n\r\n  const { getList, editId, deleteId, postSucc, updateSucc, deleteSucc, viewId } =\r\n    props.action;\r\n\r\n  const {\r\n    MasterModal,\r\n    masterPath,\r\n    goButnFunc = () => { },\r\n    makeBtnFunc = () => { },\r\n    hideBtnFunc = () => { },\r\n    makeBtnShow,\r\n    makeBtnName,\r\n    pageMode,\r\n    newBtnPath,\r\n    forceNewBtnView,\r\n    HeaderContent = () => {\r\n      return null;\r\n    },\r\n    selectCheckParams = { isShow: false },\r\n    totalAmountShow = false,\r\n  } = props;\r\n\r\n  const { PageFieldMaster = [] } = { ...pageField };\r\n\r\n  useEffect(() => {\r\n    const locationPath = history.location.pathname;\r\n    let userAcc = userAccess.find((inx) => {\r\n      return `/${inx.ActualPagePath}` === locationPath;\r\n    });\r\n    if (!(userAcc === undefined)) {\r\n      setUserAccState(userAcc);\r\n      breadcrumbReturnFunc({ dispatch, userAcc, newBtnPath, forceNewBtnView });\r\n    }\r\n  }, [userAccess]);\r\n\r\n  useEffect(() => {\r\n    let downList = [];\r\n    let defaultDownList2 = [];\r\n    let listObj = {};\r\n    let listObj2 = {};\r\n\r\n    tableList.forEach((index1) => {\r\n      PageFieldMaster.forEach((index2) => {\r\n        if (index2.ShowInDownload) {\r\n          listObj2[index2.ControlID] = index2.ShownloadDefaultSelect;\r\n          listObj[index2.ControlID] = index1[index2.ControlID];\r\n        }\r\n      });\r\n\r\n      downList.push(listObj);\r\n      defaultDownList2.push(listObj2);\r\n      listObj = {};\r\n    });\r\n    dispatch(\r\n      CommonBreadcrumbDetails({\r\n        downBtnData: downList,\r\n        defaultDownBtnData: listObj2,\r\n      })\r\n    );\r\n  }, [tableList]);\r\n\r\n  // This UseEffect => UpadateModal Success/Unsucces  Show and Hide Control Alert_modal\r\n  useEffect(() => {\r\n    if (updateMsg.Status === true && updateMsg.StatusCode === 200) {\r\n      breadcrumbReturnFunc({\r\n        dispatch,\r\n        userAcc: userAccState,\r\n        newBtnPath: masterPath,\r\n      });\r\n      dispatch(updateSucc({ Status: false }));\r\n      goButnFunc();\r\n      isAlertFunc(1, updateMsg);\r\n      tog_center();\r\n    } else if (updateMsg.Status === true) {\r\n      dispatch(updateSucc({ Status: false }));\r\n      isAlertFunc(3, updateMsg);\r\n    }\r\n  }, [updateMsg]);\r\n\r\n  useEffect(() => {\r\n    if (deleteMsg.Status === true && deleteMsg.StatusCode === 200) {\r\n      dispatch(deleteSucc({ Status: false }));\r\n      goButnFunc();\r\n      isAlertFunc(1, deleteMsg);\r\n    } else if (deleteMsg.Status === true) {\r\n      dispatch(deleteSucc({ Status: false }));\r\n      isAlertFunc(3, deleteMsg);\r\n    }\r\n  }, [deleteMsg]);\r\n\r\n  useEffect(() => {\r\n    if (postMsg.Status === true && postMsg.StatusCode === 200) {\r\n      dispatch(postSucc({ Status: false }));\r\n      tog_center();\r\n      dispatch(getList());\r\n      isAlertFunc(1, postMsg);\r\n    } else if (postMsg.Status === true) {\r\n      dispatch(postSucc({ Status: false }));\r\n      isAlertFunc(4, postMsg);\r\n    }\r\n  }, [postMsg]);\r\n\r\n  // Edit Modal Show When Edit Data is true\r\n  useEffect(() => {\r\n\r\n    if ((editData.Status === true)) {\r\n      if (pageField.IsEditPopuporComponent) {\r\n        history.push({\r\n          pathname: masterPath,\r\n          [mode.editValue]: editData.Data,\r\n          pageMode: editData.pageMode,\r\n        });\r\n      } else {\r\n        setmodal_edit(true);\r\n      }\r\n    }\r\n  }, [editData]);\r\n\r\n  function makeBtnHandler(rowData) {\r\n\r\n    rowData[\"hasSelect\"] = true;\r\n    let arr = [];\r\n    arr.push(rowData);\r\n    makeBtnFunc(arr);\r\n  }\r\n\r\n\r\n\r\n  function hideBtnHandler(rowData) {\r\n    rowData[\"isHideValue\"] = \"0\";\r\n    let arr = [];\r\n    arr.push(rowData);\r\n    hideBtnFunc(arr);\r\n  }\r\n\r\n\r\n\r\n  function tog_center() {\r\n    if (modal_edit) {\r\n      breadcrumbReturnFunc({\r\n        dispatch,\r\n        userAcc: userAccState,\r\n        newBtnPath: masterPath,\r\n      });\r\n    }\r\n    setmodal_edit(false);\r\n  }\r\n\r\n  const makeBtnColumn = () => {// ======================== for makeBtnColumn Page Action Button ================================\r\n\r\n    if (\r\n      makeBtnShow &&\r\n      pageMode === mode.modeSTPsave\r\n    ) {\r\n      return {\r\n        text: \"Action\",\r\n        dataField: \"hasSelect\",\r\n        sort: true,\r\n        attrs: (cell, row, rowIndex, colIndex) => ({ 'data-label': 'Action', \"sticky-col\": (colIndex === 0) ? \"true\" : \"false\" }),\r\n        formatter: (cellContent, rowData) => {\r\n          rowData[\"hasSelect\"] = false;\r\n          if (rowData.IsRecordDeleted === true) {   ///hide button in GRN list 3 STP page last action column for Make Button\r\n            return (\r\n              <div>\r\n                <div>\r\n                  <Button\r\n                    type=\"button\"\r\n                    className={hideBtnCss}\r\n                    data-mdb-toggle=\"tooltip\"\r\n                    data-mdb-placement=\"top\"\r\n                    disabled={listBtnLoading}\r\n                    title={\"UnHide\"}\r\n                    onClick={() => {\r\n                      hideBtnHandler(rowData);\r\n                    }}\r\n                  >\r\n                    {(listBtnLoading === `btn-makeBtn-${rowData.id}`) ?\r\n                      <Spinner style={{ height: \"16px\", width: \"16px\" }} color=\"white\" />\r\n                      : <span\r\n                        style={{ marginLeft: \"4px\", marginRight: \"4px\" }}\r\n                        className=\" fas fa-eye\"\r\n                      ></span>\r\n                    }\r\n                  </Button>\r\n                </div>\r\n              </div>\r\n            );\r\n          } else {\r\n            return (\r\n              <div>\r\n                <Button\r\n                  type=\"button\"\r\n                  className={makeBtnCss}\r\n                  data-mdb-toggle=\"tooltip\"\r\n                  data-mdb-placement=\"top\"\r\n                  disabled={listBtnLoading}\r\n                  title={makeBtnName}\r\n                  onClick={() => {\r\n                    makeBtnHandler(rowData);\r\n                  }}\r\n                >\r\n                  {(listBtnLoading === `btn-makeBtn-${rowData.id}`) ?\r\n                    <Spinner style={{ height: \"16px\", width: \"16px\" }} color=\"white\" />\r\n                    : <span\r\n                      style={{ marginLeft: \"6px\", marginRight: \"6px\" }}\r\n                      className=\" fas fa-file-invoice\"\r\n                    ></span>\r\n                  }\r\n                </Button>\r\n              </div>\r\n            );\r\n          }\r\n\r\n          // }\r\n        },\r\n      }\r\n    }\r\n  }\r\n  const lastColumn = () => {  // ======================== for List Page Action Button ================================\r\n    if (!(pageMode === mode.modeSTPsave)) {\r\n\r\n      return listPageActionsButtonFunc({\r\n        ...props, dispatch, history, userAccState,\r\n        editActionFun: editId,\r\n        deleteActionFun: deleteId,\r\n      })\r\n    }\r\n  }\r\n\r\n  const secondLastColumn = () => {  // ======================== for List Page Action Button ================================\r\n    if ((history.location.pathname === url.INVOICE_LIST_1 ||\r\n      history.location.pathname === url.CREDIT_LIST ||\r\n      history.location.pathname === url.DEBIT_LIST ||\r\n      history.location.pathname === url.GOODS_CREDIT_LIST ||\r\n      history.location.pathname === url.GOODS_DEBIT_LIST)) {// INVOICE_LIST_1 E_Invoice buttons\r\n      return E_Invoice_ActionsButtonFunc({ ...props, dispatch, userAccState, })\r\n    }\r\n  }\r\n\r\n  const thirdLastColumn = () => {  // ======================== for List Page Action Button ================================\r\n    if ((history.location.pathname === url.INVOICE_LIST_1)) {// INVOICE_LIST_1 E_WayBill buttons\r\n      return E_WayBill_ActionsButtonFunc({ ...props, dispatch, userAccState, })\r\n    }\r\n  }\r\n\r\n  const [tableColumns, defaultSorted] = DynamicColumnHook({\r\n    pageField,\r\n    reducers: props.reducers,\r\n    secondLastColumn,\r\n    thirdLastColumn,\r\n    lastColumn,\r\n    makeBtnColumn,\r\n    userAccState: userAccState\r\n  })\r\n\r\n\r\n  function rowSelected() {\r\n    return tableList.map((index) => { return (index.selectCheck) })\r\n  }\r\n\r\n  const nonSelectedRow = () => {\r\n\r\n    var noSelectedIds = [];\r\n\r\n    if (masterPath === url.SALES_RETURN) {\r\n      noSelectedIds = tableList\r\n        .filter(row => (row.Status === \"Send To Supplier\") || (row.Status === \"Open\"))\r\n        .map(row => row.id);\r\n    } else {\r\n      noSelectedIds = tableList\r\n        .filter(row => row.forceSelectDissabled)\r\n        .map(row => row.id);\r\n    }\r\n    return noSelectedIds;\r\n  };\r\n  const { updatedRowBlinkId } = history.location\r\n  if (!(userAccState === \"\")) {\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <MetaTags> {metaTagLabel(userAccState)}</MetaTags>\r\n        <HeaderContent />\r\n        <div >\r\n          <ExtraTableWrapper\r\n            data={tableList}\r\n          >\r\n            {(tableProps) => (\r\n              <CustomTable\r\n                keyField={\"id\"}\r\n                data={tableProps}\r\n                columns={tableColumns}\r\n                selectRow={selectCheckParams.isShow ?\r\n                  selectAllCheck({\r\n                    rowSelected: rowSelected(),\r\n                    nonSelectable: nonSelectedRow(),\r\n                    position: \"left\",\r\n                    headLabel: selectCheckParams.selectHeaderLabel,\r\n\r\n                  })\r\n                  : undefined}\r\n                defaultSorted={defaultSorted}\r\n                updatedRowBlinkId={updatedRowBlinkId}\r\n                onDataSizeChange={({ dataCount, filteredData = [] }) => {\r\n\r\n                  if (totalAmountShow === true) {\r\n                    let totalAmount = filteredData.reduce((total, item) => {\r\n                      return total + Number(item.recordsAmountTotal) || 0;\r\n\r\n                    }, 0);\r\n                    let commaSeparateAmount = amountCommaSeparateFunc(Number(totalAmount).toFixed(2));\r\n\r\n                    dispatch(BreadcrumbShowCountlabel(`Count:${dataCount} ₹ ${commaSeparateAmount}`));\r\n                  }\r\n                  else {\r\n                    dispatch(BreadcrumbShowCountlabel(`Count:${dataCount}`));\r\n                  }\r\n                }}\r\n                paginationEnabled={true}\r\n                noDataIndication={\r\n                  <div className=\"text-danger text-center \">\r\n                    No record(s) Not Found.\r\n                  </div>\r\n                }\r\n              />)}\r\n          </ExtraTableWrapper>\r\n          {\r\n\r\n            ((tableList.length > 0) && (selectCheckParams.isShow)) ?\r\n\r\n              <div className=\"row save1 \" style={{ paddingBottom: 'center' }}>\r\n                <C_Button\r\n                  forceDisabled={listBtnLoading}\r\n                  loading={selectCheckParams.selectSaveBtnLoading}\r\n                  style={{ marginTop: \"-10px\" }}\r\n                  type=\"button\"\r\n                  spinnerColor=\"white\"\r\n                  className=\"btn btn-primary w-md  \"\r\n                  onClick={() => { selectCheckParams.selectSaveBtnHandler(tableList) }}\r\n                >\r\n                  <i class=\"fas fa-edit me-2\"></i>{selectCheckParams.selectSaveBtnLabel}\r\n                </C_Button>\r\n              </div>\r\n              : null\r\n          }\r\n\r\n          <Modal\r\n            isOpen={modal_edit}\r\n            toggle={() => {\r\n              tog_center();\r\n            }}\r\n            size=\"xl\"\r\n          >\r\n            <MasterModal\r\n              editValue={editData.Data}\r\n              masterPath={masterPath}\r\n              pageMode={editData.pageMode}\r\n            />\r\n          </Modal>\r\n        </div>\r\n\r\n        <C_Report />\r\n      </React.Fragment>\r\n    );\r\n  } else {\r\n    return <React.Fragment></React.Fragment>;\r\n  }\r\n};\r\n\r\nexport default CommonPurchaseList;\r\n\r\n\r\n\r\n\r\n/*********************************************************************************************************************** */\r\n\r\nlet searchCount = 0\r\nlet searchProps = {\r\n  onClear: function onClear() { },\r\n  onSearch: function onSearch() { },\r\n  searchText: \"\"\r\n}\r\n\r\nexport const countlabelFunc = (toolkitProps, paginationProps, dispatch, ButtonMsgLable) => {\r\n\r\n  let iscall = 0\r\n  if (paginationProps.dataSize) {\r\n    iscall = paginationProps.dataSize\r\n  }\r\n\r\n  if (!(iscall === searchCount)) {\r\n    dispatch(BreadcrumbShowCountlabel(`${ButtonMsgLable} Count:${iscall}`))\r\n    searchCount = paginationProps.dataSize\r\n  }\r\n  searchProps = toolkitProps.searchProps\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import React, { useEffect, useState } from \"react\";\r\n// import { Button, Col, Modal, Row, Spinner } from \"reactstrap\";\r\n// import paginationFactory, {\r\n//   PaginationListStandalone,\r\n//   PaginationProvider,\r\n// } from \"react-bootstrap-table2-paginator\";\r\n// import ToolkitProvider from \"react-bootstrap-table2-toolkit\";\r\n// import BootstrapTable from \"react-bootstrap-table-next\";\r\n// import { useDispatch } from \"react-redux\";\r\n// import { MetaTags } from \"react-meta-tags\";\r\n// import { useHistory } from \"react-router-dom\";\r\n// import {\r\n//   BreadcrumbShowCountlabel,\r\n//   CommonBreadcrumbDetails,\r\n// } from \"../../store/actions\";\r\n// import { breadcrumbReturnFunc, metaTagLabel } from \"./CommonFunction\";\r\n// import { defaultSearch, mySearchProps } from \"./SearchBox/MySearch\";\r\n// import C_Report from \"./C_Report\";\r\n// import * as mode from \"../../routes/PageMode\";\r\n// import { customAlert } from \"../../CustomAlert/ConfirmDialog\";\r\n// import { E_Invoice_ActionsButtonFunc, E_WayBill_ActionsButtonFunc, listPageActionsButtonFunc, makeBtnCss } from \"./ListActionsButtons\";\r\n// import DynamicColumnHook, { selectAllCheck } from \"./TableCommonFunc\";\r\n// import { url } from \"../../routes\";\r\n// import { C_Button } from \"./CommonButton\";\r\n\r\n// let searchCount = 0;\r\n\r\n// let searchProps = {\r\n//   onClear: function onClear() { },\r\n//   onSearch: function onSearch() { },\r\n//   searchText: \"\",\r\n// };\r\n\r\n// export const countlabelFunc = (\r\n//   toolkitProps,\r\n//   paginationProps,\r\n//   dispatch,\r\n//   ButtonMsgLable\r\n// ) => {\r\n//   let iscall = 0;\r\n//   if (paginationProps.dataSize) {\r\n//     iscall = paginationProps.dataSize;\r\n//   }\r\n\r\n//   if (!(iscall === searchCount)) {\r\n//     dispatch(BreadcrumbShowCountlabel(`${ButtonMsgLable} Count:${iscall}`));\r\n//     searchCount = paginationProps.dataSize;\r\n//   }\r\n//   searchProps = toolkitProps.searchProps;\r\n// };\r\n\r\n// export async function isAlertFunc(type, Msg) {\r\n//   await customAlert({\r\n//     Type: type,\r\n//     Message: Msg.Message,\r\n//     isFunc: true,\r\n//   });\r\n// }\r\n\r\n// const CommonPurchaseList = (props) => {\r\n\r\n//   const dispatch = useDispatch();\r\n//   const history = useHistory();\r\n\r\n//   const [userAccState, setUserAccState] = useState(\"\");\r\n//   const [modal_edit, setmodal_edit] = useState(false);\r\n//   // const [tableList, settableList] = useState([]);\r\n//   const {\r\n//     editData = { Data: \"\" },\r\n//     updateMsg = { Status: false },\r\n//     deleteMsg = { Status: false },\r\n//     userAccess = [],\r\n//     postMsg = { Status: false },\r\n//     pageField = { id: \"\" },\r\n//     tableList = [],\r\n//     listBtnLoading = false,\r\n//   } = props.reducers;\r\n\r\n//   const { getList, editId, deleteId, postSucc, updateSucc, deleteSucc, viewId } =\r\n//     props.action;\r\n\r\n//   const {\r\n//     MasterModal,\r\n//     masterPath,\r\n//     ButtonMsgLable,\r\n//     goButnFunc = () => { },\r\n//     makeBtnFunc = () => { },\r\n//     makeBtnShow,\r\n//     makeBtnName,\r\n//     pageMode,\r\n//     newBtnPath,\r\n//     forceNewBtnView,\r\n//     HeaderContent = () => {\r\n//       return null;\r\n//     },\r\n//     selectCheckParams = { isShow: false }\r\n//   } = props;\r\n\r\n//   const { PageFieldMaster = [] } = { ...pageField };\r\n\r\n//   useEffect(() => {\r\n//     const locationPath = history.location.pathname;\r\n//     let userAcc = userAccess.find((inx) => {\r\n//       return `/${inx.ActualPagePath}` === locationPath;\r\n//     });\r\n//     if (!(userAcc === undefined)) {\r\n//       setUserAccState(userAcc);\r\n//       breadcrumbReturnFunc({ dispatch, userAcc, newBtnPath, forceNewBtnView });\r\n//     }\r\n//   }, [userAccess]);\r\n\r\n//   useEffect(() => {\r\n//     let downList = [];\r\n//     let defaultDownList2 = [];\r\n//     let listObj = {};\r\n//     let listObj2 = {};\r\n\r\n//     tableList.forEach((index1) => {\r\n//       PageFieldMaster.forEach((index2) => {\r\n//         if (index2.ShowInDownload) {\r\n//           listObj2[index2.ControlID] = index2.ShownloadDefaultSelect;\r\n//           listObj[index2.ControlID] = index1[index2.ControlID];\r\n//         }\r\n//       });\r\n\r\n//       downList.push(listObj);\r\n//       defaultDownList2.push(listObj2);\r\n//       listObj = {};\r\n//     });\r\n//     dispatch(\r\n//       CommonBreadcrumbDetails({\r\n//         downBtnData: downList,\r\n//         defaultDownBtnData: listObj2,\r\n//       })\r\n//     );\r\n//   }, [tableList]);\r\n\r\n//   // This UseEffect => UpadateModal Success/Unsucces  Show and Hide Control Alert_modal\r\n//   useEffect(() => {\r\n//     if (updateMsg.Status === true && updateMsg.StatusCode === 200) {\r\n//       breadcrumbReturnFunc({\r\n//         dispatch,\r\n//         userAcc: userAccState,\r\n//         newBtnPath: masterPath,\r\n//       });\r\n//       dispatch(updateSucc({ Status: false }));\r\n//       goButnFunc();\r\n//       isAlertFunc(1, updateMsg);\r\n//       tog_center();\r\n//     } else if (updateMsg.Status === true) {\r\n//       dispatch(updateSucc({ Status: false }));\r\n//       isAlertFunc(3, updateMsg);\r\n//     }\r\n//   }, [updateMsg]);\r\n\r\n//   useEffect(() => {\r\n//     if (deleteMsg.Status === true && deleteMsg.StatusCode === 200) {\r\n//       dispatch(deleteSucc({ Status: false }));\r\n//       goButnFunc();\r\n//       isAlertFunc(1, deleteMsg);\r\n//     } else if (deleteMsg.Status === true) {\r\n//       dispatch(deleteSucc({ Status: false }));\r\n//       isAlertFunc(3, deleteMsg);\r\n//     }\r\n//   }, [deleteMsg]);\r\n\r\n//   useEffect(() => {\r\n//     if (postMsg.Status === true && postMsg.StatusCode === 200) {\r\n//       dispatch(postSucc({ Status: false }));\r\n//       tog_center();\r\n//       dispatch(getList());\r\n//       isAlertFunc(1, postMsg);\r\n//     } else if (postMsg.Status === true) {\r\n//       dispatch(postSucc({ Status: false }));\r\n//       isAlertFunc(4, postMsg);\r\n//     }\r\n//   }, [postMsg]);\r\n\r\n//   // Edit Modal Show When Edit Data is true\r\n//   useEffect(() => {\r\n\r\n//     if ((editData.Status === true)) {\r\n//       if (pageField.IsEditPopuporComponent) {\r\n//         history.push({\r\n//           pathname: masterPath,\r\n//           [mode.editValue]: editData.Data,\r\n//           pageMode: editData.pageMode,\r\n//         });\r\n//       } else {\r\n//         setmodal_edit(true);\r\n//       }\r\n//     }\r\n//   }, [editData]);\r\n\r\n//   function makeBtnHandler(rowData) {\r\n\r\n//     rowData[\"hasSelect\"] = true;\r\n//     let arr = [];\r\n//     arr.push(rowData);\r\n//     makeBtnFunc(arr);\r\n//   }\r\n\r\n//   function tog_center() {\r\n//     if (modal_edit) {\r\n//       breadcrumbReturnFunc({\r\n//         dispatch,\r\n//         userAcc: userAccState,\r\n//         newBtnPath: masterPath,\r\n//       });\r\n//     }\r\n//     setmodal_edit(false);\r\n//   }\r\n\r\n//   const makeBtnColumn = () => {// ======================== for makeBtnColumn Page Action Button ================================\r\n\r\n//     if (\r\n//       makeBtnShow &&\r\n//       pageMode === mode.modeSTPsave\r\n//     ) {\r\n//       return {\r\n//         text: \"Action\",\r\n//         dataField: \"hasSelect\",\r\n//         sort: true,\r\n//         formatter: (cellContent, rowData, key) => {\r\n//           rowData[\"hasSelect\"] = false;\r\n\r\n//           return (\r\n//             <div>\r\n//               <Button\r\n//                 type=\"button\"\r\n//                 className={makeBtnCss}\r\n//                 data-mdb-toggle=\"tooltip\"\r\n//                 data-mdb-placement=\"top\"\r\n//                 disabled={listBtnLoading}\r\n//                 title={makeBtnName}\r\n//                 onClick={() => {\r\n//                   makeBtnHandler(rowData);\r\n//                 }}\r\n//               >\r\n//                 {(listBtnLoading === `btn-makeBtn-${rowData.id}`) ?\r\n//                   <Spinner style={{ height: \"16px\", width: \"16px\" }} color=\"white\" />\r\n//                   : <span\r\n//                     style={{ marginLeft: \"6px\", marginRight: \"6px\" }}\r\n//                     className=\" fas fa-file-invoice\"\r\n//                   ></span>\r\n//                 }\r\n//               </Button>\r\n//             </div>\r\n//           );\r\n//           // }\r\n//         },\r\n//       }\r\n//     }\r\n//   }\r\n//   const lastColumn = () => {  // ======================== for List Page Action Button ================================\r\n//     if (!(pageMode === mode.modeSTPsave)) {\r\n//       return listPageActionsButtonFunc({\r\n//         ...props, dispatch, history, userAccState,\r\n//         editActionFun: editId,\r\n//         deleteActionFun: deleteId,\r\n//       })\r\n//     }\r\n//   }\r\n\r\n//   const secondLastColumn = () => {  // ======================== for List Page Action Button ================================\r\n//     if ((history.location.pathname === url.INVOICE_LIST_1)) {// INVOICE_LIST_1 E_Invoice buttons\r\n//       return E_Invoice_ActionsButtonFunc({ ...props, dispatch, userAccState, })\r\n//     }\r\n//   }\r\n\r\n//   const thirdLastColumn = () => {  // ======================== for List Page Action Button ================================\r\n//     if ((history.location.pathname === url.INVOICE_LIST_1)) {// INVOICE_LIST_1 E_WayBill buttons\r\n//       return E_WayBill_ActionsButtonFunc({ ...props, dispatch, userAccState, })\r\n//     }\r\n//   }\r\n\r\n//   const [tableColumns, defaultSorted, pageOptions,] = DynamicColumnHook({\r\n//     pageField,\r\n//     reducers: props.reducers,\r\n//     secondLastColumn,\r\n//     thirdLastColumn,\r\n//     lastColumn,\r\n//     makeBtnColumn,\r\n//     userAccState: userAccState\r\n//   })\r\n\r\n\r\n//   function rowSelected() {\r\n//     return tableList.map((index) => { return (index.selectCheck) })\r\n//   }\r\n\r\n//   const nonSelectedRow = () => {\r\n\r\n//     var noSelectedIds = [];\r\n\r\n//     if (masterPath === url.SALES_RETURN) {\r\n//       noSelectedIds = tableList\r\n//         .filter(row => (row.Status === \"Send To Supplier\") || (row.Status === \"Open\"))\r\n//         .map(row => row.id);\r\n//     } else {\r\n//       noSelectedIds = tableList\r\n//         .filter(row => row.forceSelectDissabled)\r\n//         .map(row => row.id);\r\n//     }\r\n//     return noSelectedIds;\r\n//   };\r\n\r\n//   if (!(userAccState === \"\")) {\r\n\r\n//     return (\r\n//       <React.Fragment>\r\n//         <MetaTags> {metaTagLabel(userAccState)}</MetaTags>\r\n//         <HeaderContent />\r\n//         <div >\r\n//           <PaginationProvider pagination={paginationFactory(pageOptions)}>\r\n//             {({ paginationProps, paginationTableProps }) => (\r\n//               <ToolkitProvider\r\n//                 keyField=\"id\"\r\n//                 data={tableList}\r\n//                 columns={tableColumns}\r\n//                 search={defaultSearch(pageField.id)}\r\n//               >\r\n//                 {(toolkitProps, a) => (\r\n//                   <React.Fragment>\r\n//                     <Row>\r\n\r\n//                       <Col xl=\"12\">\r\n//                         <div className=\"table-responsive mt-1\" >\r\n//                           <BootstrapTable\r\n//                             keyField={\"id\"}\r\n//                             // key={`table-key-${pageField.PageHeading}`}\r\n//                             responsive\r\n//                             bootstrap4\r\n//                             bordered={false}\r\n//                             selectRow={selectCheckParams.isShow ?\r\n//                               selectAllCheck(rowSelected(), nonSelectable(), \"left\", selectCheckParams.selectHeaderLabel)\r\n//                               : undefined}\r\n//                             defaultSorted={defaultSorted}\r\n//                             striped={true}\r\n//                             classes={\"table  table-bordered table-hover\"}\r\n//                             noDataIndication={\r\n//                               <div className=\"text-danger text-center \">\r\n//                                 No record(s) Not Found.\r\n//                               </div>\r\n//                             }\r\n//                             {...toolkitProps.baseProps}\r\n//                             {...paginationTableProps}\r\n//                           />\r\n//                         </div>\r\n//                       </Col>\r\n\r\n//                       {countlabelFunc(\r\n//                         toolkitProps,\r\n//                         paginationProps,\r\n//                         dispatch,\r\n//                         ButtonMsgLable\r\n//                       )}\r\n//                       {mySearchProps(toolkitProps.searchProps, pageField.id)}\r\n//                     </Row>\r\n//                     <Row className=\"align-items-md-center mt-30\">\r\n//                       <Col className=\"pagination pagination-rounded justify-content-end mb-2\">\r\n//                         <PaginationListStandalone {...paginationProps} />\r\n//                       </Col>\r\n//                     </Row>\r\n//                   </React.Fragment>\r\n//                 )}\r\n//               </ToolkitProvider>\r\n//             )}\r\n//           </PaginationProvider>\r\n//           {\r\n\r\n//             ((tableList.length > 0) && (selectCheckParams.isShow) && (selectCheckParams.isRoleAccess)) ?\r\n\r\n//               <div className=\"row save1 \" style={{ paddingBottom: 'center' }}>\r\n//                 <C_Button\r\n//                   forceDisabled={listBtnLoading}\r\n//                   loading={selectCheckParams.selectSaveBtnLoading}\r\n//                   style={{ marginTop: \"-10px\" }}\r\n//                   type=\"button\"\r\n//                   spinnerColor=\"white\"\r\n//                   className=\"btn btn-primary w-md  \"\r\n//                   onClick={() => { selectCheckParams.selectSaveBtnHandler(tableList) }}\r\n//                 >\r\n//                   <i class=\"fas fa-edit me-2\"></i>{selectCheckParams.selectSaveBtnLabel}\r\n//                 </C_Button>\r\n//               </div>\r\n//               : null\r\n//           }\r\n\r\n//           <Modal\r\n//             isOpen={modal_edit}\r\n//             toggle={() => {\r\n//               tog_center();\r\n//             }}\r\n//             size=\"xl\"\r\n//           >\r\n//             <MasterModal\r\n//               editValue={editData.Data}\r\n//               masterPath={masterPath}\r\n//               pageMode={editData.pageMode}\r\n//             />\r\n//           </Modal>\r\n\r\n\r\n\r\n//         </div>\r\n\r\n//         <C_Report />\r\n//       </React.Fragment>\r\n//     );\r\n//   } else {\r\n//     return <React.Fragment></React.Fragment>;\r\n//   }\r\n// };\r\n\r\n// export default CommonPurchaseList;","D:\\Rohit\\Git projects\\Manthan\\src\\components\\Common\\SearchBox\\MySearch.js",["3736"],"import React from \"react\";\r\n\r\nlet props1 = { onSearch: () => { } }\r\nlet input = '';\r\nlet priviousSerach = []\r\nlet pageid = ''\r\n\r\nlet props22 = { onSearch: () => { } }\r\n\r\nexport const mySearchProps = (props, pageID) => {\r\n\r\n    props1 = props;\r\n    pageid = pageID\r\n};\r\n\r\nexport const customTableSearch = (props) => {\r\n    props22 = props\r\n}\r\n\r\n\r\nexport const defaultSearch = (defaultid,) => {\r\n    let retn = { defaultSearch: '' }\r\n\r\n    let found = priviousSerach.find((i, k) => {\r\n        return (i.id === defaultid)\r\n    });\r\n    // document.getElementById(\"myInput\").focus()\r\n\r\n    if (found) {\r\n        // document.getElementById(\"myInput\").select()\r\n        document.getElementById(\"myInput\").value = found.text\r\n        retn = { defaultSearch: found.text }\r\n    }\r\n\r\n    return retn\r\n}\r\n\r\nexport const MySearch = () => {//compont start\r\n\r\n    function handleClick(e) {\r\n        var len = e.target.value\r\n        input = e.target.value\r\n        if (!(len[0] === \"/\")) {\r\n            props1.onSearch(len);\r\n            props22.onSearch(len);\r\n            const found = priviousSerach.find((i, k) => {\r\n                if ((i.id === pageid)) {\r\n                    priviousSerach[k] = { id: i.id, text: len }\r\n                }\r\n                return (i.id === pageid)\r\n            });\r\n            if (!found) {\r\n                priviousSerach.push({ id: pageid, text: len })\r\n            }\r\n        }\r\n    };\r\n    return (\r\n        <React.Fragment>\r\n            <input\r\n                id=\"myInput\"\r\n                className=\"form-control\"\r\n                placeholder=\"Search...\"\r\n                type=\"text\"\r\n                onChange={handleClick}\r\n                name=\"myCountry\"\r\n                autoComplete=\"off\"\r\n                autoFocus={true}\r\n            />\r\n            <button className=\"btn btn-primary\"\r\n                type=\"butten\">\r\n                <i className=\"bx bx-search-alt align-middle\" />\r\n            </button>\r\n\r\n        </React.Fragment>\r\n    );\r\n}","D:\\Rohit\\Git projects\\Manthan\\src\\components\\Common\\SearchBox\\index.js",["3737"],"import React, { useEffect, useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport '../../../assets/searchBox/searchBox.scss';\r\nimport { MySearch } from './MySearch';\r\n\r\nexport const MainSearchBox = () => {\r\n  const [searchRoleData, setSearchRoleData] = useState([]);\r\n  const { RoleAccessData, searchProps } = useSelector((state) => ({\r\n    RoleAccessData: state.Login.roleAccessSidbarData,\r\n    searchProps: state.BreadcrumbReducer.searchProps,\r\n  }));\r\n\r\n  useEffect(() => {\r\n    const flattenModuleData = RoleAccessData.flatMap((i) => i.ModuleData);\r\n    setSearchRoleData(flattenModuleData);\r\n  }, [RoleAccessData]);\r\n\r\n  useEffect(() => {\r\n    function autocomplete(inp, arr) {\r\n      let currentFocus;\r\n\r\n      inp.addEventListener('input', function (e) {\r\n        const val = this.value.trim().toLowerCase();\r\n        closeAllLists();\r\n\r\n        if (val === '/') {\r\n          return;\r\n        }\r\n\r\n        if (val.startsWith('/')) {\r\n          const trimmedVal = val.substring(1);\r\n          currentFocus = -1;\r\n          const filteredItems = arr.filter((item) =>\r\n            item.Name.toLowerCase().includes(trimmedVal)\r\n          );\r\n\r\n          if (filteredItems.length > 0) {\r\n            const list = document.createElement('div');\r\n            list.setAttribute('id', `${this.id}autocomplete-list`);\r\n            list.setAttribute('class', 'autocomplete-items');\r\n            this.parentNode.appendChild(list);\r\n\r\n            filteredItems.forEach((item, index) => {\r\n              const itemDiv = document.createElement('div');\r\n              itemDiv.innerHTML = `<strong>${item.Name}</strong>${item.Name.substring(1)}`;\r\n              itemDiv.innerHTML += `<input type='hidden' id='${index}' value='${item.Name}'>`;\r\n\r\n              itemDiv.addEventListener('click', function (e) {\r\n                inp.value = this.getElementsByTagName('input')[0].value;\r\n                const inputId = this.getElementsByTagName('input')[0].id;\r\n                const actualPagePath = filteredItems[inputId].ActualPagePath;\r\n                window.location.href = actualPagePath;\r\n                closeAllLists();\r\n              });\r\n\r\n              list.appendChild(itemDiv);\r\n            });\r\n          }\r\n        }\r\n      });\r\n\r\n      inp.addEventListener('keydown', function (e) {\r\n        const list = document.getElementById(`${this.id}autocomplete-list`);\r\n\r\n        if (list) {\r\n          const items = list.getElementsByTagName('div');\r\n\r\n          if (e.keyCode === 40) {\r\n            currentFocus++;\r\n            addActive(items);\r\n          } else if (e.keyCode === 38) {\r\n            currentFocus--;\r\n            addActive(items);\r\n          } else if (e.keyCode === 13) {\r\n            e.preventDefault();\r\n            if (currentFocus > -1) {\r\n              if (items) items[currentFocus].click();\r\n            }\r\n          }\r\n        }\r\n      });\r\n\r\n      function addActive(items) {\r\n        if (!items) return false;\r\n        removeActive(items);\r\n\r\n        if (currentFocus >= items.length) currentFocus = 0;\r\n        if (currentFocus < 0) currentFocus = items.length - 1;\r\n\r\n        items[currentFocus].classList.add('autocomplete-active');\r\n      }\r\n\r\n      function removeActive(items) {\r\n        for (let i = 0; i < items.length; i++) {\r\n          items[i].classList.remove('autocomplete-active');\r\n        }\r\n      }\r\n\r\n      function closeAllLists() {\r\n        const lists = document.getElementsByClassName('autocomplete-items');\r\n\r\n        for (let i = 0; i < lists.length; i++) {\r\n          lists[i].parentNode.removeChild(lists[i]);\r\n        }\r\n      }\r\n\r\n      document.addEventListener('click', function (e) {\r\n        closeAllLists(e.target);\r\n      });\r\n    }\r\n\r\n    autocomplete(document.getElementById('myInput'), searchRoleData);\r\n  }, [searchRoleData]);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"app-search d-none d-lg-block \" style={{ marginTop: \"-3px\" }} autocomplete=\"off\">\r\n        <div className=\"position-relative\">\r\n          <MySearch />\r\n        </div>\r\n      </div>\r\n\r\n    </React.Fragment>\r\n  );\r\n};\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\components\\Common\\ListActionsButtons.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Sales\\LoadingSheetRedux\\reducer.js",["3738"],"\r\nimport { DELETE_LOADING_SHEET, LOADING_SHEET_API_ERROR_ACTION, LOADING_SHEET_GO_BUTTON_API, LOADING_SHEET_UPDATE_API, SALES_RETURN_API_ERROR_ACTION } from \"./actionType\"\r\nimport { LOADING_SHEET_LIST_ACTION, SAVE_LOADING_SHEET_MASTER } from \"./actionType\"\r\nimport {\r\n    LOADING_SHEET_LIST_ACTION_SUCCESS,\r\n    LOADING_SHEET_GO_BUTTON_API_SUCCESS,\r\n    SAVE_LOADING_SHEET_MASTER_SUCCESS,\r\n    LOADING_SHEET_UPDATE_API_ACTION_SUCCESS,\r\n    DELETE_LOADING_SHEET_SUCCESS\r\n} from \"./actionType\"\r\n\r\nconst INIT_STATE = {\r\n    loading: false,\r\n    goBtnLoadingSheet: [],\r\n    postMsg: { Status: false },\r\n    LoadingSheetlist: [],\r\n    LoadingSheetUpdate: [],\r\n    deleteMsg: { Status: false },\r\n    goBtnloadingSpinner: false,\r\n    saveBtnloading: false,\r\n    listBtnLoading: false,\r\n}\r\n\r\nconst LoadingSheetReducer = (state = INIT_STATE, action) => {\r\n    switch (action.type) {\r\n        \r\n        case LOADING_SHEET_GO_BUTTON_API:\r\n            return {\r\n                ...state,\r\n                goBtnloadingSpinner: true,\r\n            }\r\n\r\n        case LOADING_SHEET_GO_BUTTON_API_SUCCESS:\r\n            return {\r\n                ...state,\r\n                goBtnloadingSpinner: false,\r\n                goBtnLoadingSheet: action.payload,\r\n            }\r\n\r\n        case SAVE_LOADING_SHEET_MASTER:\r\n            return {\r\n                ...state,\r\n                saveBtnloading: true,\r\n            }\r\n\r\n        case SAVE_LOADING_SHEET_MASTER_SUCCESS:\r\n            return {\r\n                ...state,\r\n                postMsg: action.payload,\r\n                saveBtnloading: false\r\n            }\r\n\r\n        case LOADING_SHEET_LIST_ACTION:\r\n            return {\r\n                ...state,\r\n                loading: true\r\n            }\r\n\r\n\r\n        case LOADING_SHEET_LIST_ACTION_SUCCESS:\r\n            return {\r\n                ...state,\r\n                LoadingSheetlist: action.payload,\r\n                loading: false\r\n            }\r\n\r\n        case LOADING_SHEET_UPDATE_API:\r\n            return {\r\n                ...state,\r\n                saveBtnloading: true,\r\n                listBtnLoading: action.config.btnId,\r\n            }\r\n\r\n        case LOADING_SHEET_UPDATE_API_ACTION_SUCCESS:\r\n            return {\r\n                ...state,\r\n                LoadingSheetUpdate: action.payload,\r\n                saveBtnloading: false,\r\n                listBtnLoading: false,\r\n            }\r\n\r\n        case DELETE_LOADING_SHEET:\r\n            return {\r\n                ...state,\r\n                listBtnLoading: action.config.btnId,\r\n            };\r\n\r\n\r\n        case DELETE_LOADING_SHEET_SUCCESS:\r\n            return {\r\n                ...state,\r\n                deleteMsg: action.payload,\r\n                listBtnLoading: false\r\n            };\r\n\r\n        case LOADING_SHEET_API_ERROR_ACTION:\r\n            return {\r\n                ...state,\r\n                saveBtnloading: false,\r\n                loading: false,\r\n                listBtnLoading: false,\r\n                goBtnloadingSpinner: false,\r\n            };\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default LoadingSheetReducer","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Sales\\LoadingSheetRedux\\saga.js",["3739","3740","3741"],"import { call, put, takeLatest } from \"redux-saga/effects\";\r\nimport { CommonConsole, date_dmy_func, convertTimefunc, amountCommaSeparateFunc, listpageConcatDateAndTime, } from \"../../../components/Common/CommonFunction\";\r\nimport { Loading_Sheet_Del_API, Loading_Sheet_get_API, Loading_Sheet_Go_Button_API, Loading_Sheet_Post_API, Loading_Sheet_Update_API, LoadingSheet_API } from \"../../../helpers/backend_helper\";\r\nimport { DeleteLoadingSheetSucccess, LoadingSheetApiErrorAction, LoadingSheetListActionSuccess, LoadingSheet_GoBtn_API_Succcess, SaveLoadingSheetMasterSucccess, UpdateLoadingSheetSucccess } from \"./action\";\r\nimport { LOADING_SHEET_LIST_ACTION, LOADING_SHEET_GO_BUTTON_API, SAVE_LOADING_SHEET_MASTER, LOADING_SHEET_UPDATE_API, DELETE_LOADING_SHEET } from \"./actionType\";\r\n\r\n// GoButton Post API for Loading Sheet\r\nfunction* goBtn_Post_API_GenFun({ filters }) {\r\n\r\n    try {\r\n        const response = yield call(Loading_Sheet_Go_Button_API, filters);\r\n\r\n        response.Data.map((index) => {\r\n\r\n            index[\"selectCheck\"] = false\r\n            index[\"preInvoiceDate\"] = date_dmy_func(index.InvoiceDate);\r\n            return index\r\n        });\r\n\r\n        yield put(LoadingSheet_GoBtn_API_Succcess(response));\r\n    } catch (error) { CommonConsole(error) }\r\n}\r\n\r\n// Post API For Master Page\r\nfunction* save_LoadingSheet_GenFun({ config }) {\r\n    try {\r\n        const response = yield call(Loading_Sheet_Post_API, config);\r\n        yield put(SaveLoadingSheetMasterSucccess(response));\r\n    } catch (error) { CommonConsole(error) }\r\n}\r\n\r\n// loading sheet update button api\r\nfunction* Update_LoadingSheet_GenFun({ config }) {\r\n\r\n    const { RowId, path } = config\r\n    try {\r\n        const response = yield call(Loading_Sheet_Update_API, config);\r\n        response.path = path\r\n        response.Data.InvoiceParent.map((index) => {\r\n            index.GrandTotal = amountCommaSeparateFunc(index.GrandTotal)\r\n            index.AmountPaid = index.GrandTotal\r\n            index[\"selectCheck\"] = false\r\n            index.InvoiceDate = date_dmy_func(index.InvoiceDate);\r\n            return index\r\n        });\r\n        yield put(UpdateLoadingSheetSucccess(response));\r\n    } catch (error) { yield put(LoadingSheetApiErrorAction()) }\r\n}\r\n\r\nfunction* Delete_LoadingSheet_ID_GenratorFunction({ config }) {        // delete API\r\n    try {\r\n        const response = yield call(Loading_Sheet_Del_API, config);\r\n        yield put(DeleteLoadingSheetSucccess(response))\r\n    } catch (error) { yield put(LoadingSheetApiErrorAction()) }\r\n}\r\n\r\n// Post API For Master Page\r\nfunction* get_LoadingSheet_List_GenFun({ filters }) {\r\n    try {\r\n        const response = yield call(Loading_Sheet_get_API, filters);\r\n        const newList = yield response.Data.map((i) => {\r\n\r\n            i[\"recordsAmountTotal\"] = i.TotalAmount;  // Breadcrumb Count total\r\n            i.TotalAmount = amountCommaSeparateFunc(i.TotalAmount)\r\n            //tranzaction date is only for fiterand page field but UI show transactionDateLabel\r\n            i[\"transactionDate\"] = i.CreatedOn;\r\n            i[\"transactionDateLabel\"] = listpageConcatDateAndTime(i.Date, i.CreatedOn);\r\n            return i\r\n        })\r\n        yield put(LoadingSheetListActionSuccess(newList));\r\n    } catch (error) { yield put(LoadingSheetApiErrorAction()) }\r\n}\r\n\r\nfunction* LoadingSheetSaga() {\r\n    yield takeLatest(DELETE_LOADING_SHEET, Delete_LoadingSheet_ID_GenratorFunction)\r\n    yield takeLatest(LOADING_SHEET_UPDATE_API, Update_LoadingSheet_GenFun)\r\n    yield takeLatest(LOADING_SHEET_GO_BUTTON_API, goBtn_Post_API_GenFun)\r\n    yield takeLatest(SAVE_LOADING_SHEET_MASTER, save_LoadingSheet_GenFun)\r\n    yield takeLatest(LOADING_SHEET_LIST_ACTION, get_LoadingSheet_List_GenFun)\r\n}\r\n\r\nexport default LoadingSheetSaga;","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Sales\\LoadingSheetRedux\\action.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Sales\\LoadingSheetRedux\\actionType.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\PartyMasterBulkUpdateRedux\\saga.js",["3742"],"import { call, put, takeLatest } from \"redux-saga/effects\";\r\nimport {\r\n    postParty_Master_Bulk_Update_Success,\r\n    GoButton_For_Party_Master_Bulk_Update_AddSuccess,\r\n    postPartyName_for_dropdown_Success,\r\n    postSelect_Field_for_dropdown_Success,\r\n    updatePartyMasterBulkIDSuccess,\r\n    PartyBulkApiErrorAction\r\n} from \"./actions\";\r\nimport {\r\n    PartyMasterBulkUpdate_GoButton_Post_API,\r\n    Post_PartyMasterBulkUpdateAPI,\r\n    post_PartyAPI,\r\n    GenralMasterSubType,\r\n    Update_Party_Bulk,\r\n} from \"../../../helpers/backend_helper\";\r\nimport {\r\n    GO_BUTTON_FOR_PARTY_MASTER_BULK_UPDATE_PAGE,\r\n    POST_PARTY_MASTER_BULK_UPDATE_PAGE,\r\n    POST_PARTY_NAME_DROPDOWN,\r\n    POST_SELECT_FIELD_DROPDOWN,\r\n    UPDATE_PARTY_MASTER_BULK\r\n} from \"./actionTypes\";\r\nimport { CommonConsole } from \"../../../components/Common/CommonFunction\";\r\n\r\nfunction* GoButton_PartyMasterBulkUpdate_post_genfun({ jsonBody }) {\r\n\r\n    try {\r\n        const response = yield call(PartyMasterBulkUpdate_GoButton_Post_API, jsonBody);\r\n        yield put(GoButton_For_Party_Master_Bulk_Update_AddSuccess(response.Data));\r\n    } catch (error) { yield put(PartyBulkApiErrorAction()) }\r\n}\r\n\r\n\r\n\r\nfunction* Post_PartyMasterBulkUpdate_GenratorFunction({ config }) {\r\n\r\n    try {\r\n        const response = yield call(Post_PartyMasterBulkUpdateAPI, config);\r\n        yield put(postParty_Master_Bulk_Update_Success(response));\r\n    } catch (error) { yield put(PartyBulkApiErrorAction()) }\r\n}\r\n\r\nfunction* Post_Party_GenratorFunction({ jsonBody }) {\r\n\r\n    try {\r\n        const response = yield call(post_PartyAPI, jsonBody);\r\n        yield put(postPartyName_for_dropdown_Success(response.Data));\r\n    } catch (error) { yield put(PartyBulkApiErrorAction()) }\r\n}\r\n\r\nfunction* Post_SelectField_GenratorFunction({ jsonBody }) {\r\n\r\n    try {\r\n        const response = yield call(GenralMasterSubType, jsonBody);\r\n        yield put(postSelect_Field_for_dropdown_Success(response.Data));\r\n    } catch (error) { yield put(PartyBulkApiErrorAction()) }\r\n}\r\n\r\nfunction* Update_Party_Bulk_GenratorFunction({ updateData, id }) {\r\n    try {\r\n        const response = yield call(Update_Party_Bulk, updateData, id);\r\n        yield put(updatePartyMasterBulkIDSuccess(response))\r\n    } catch (error) { yield put(PartyBulkApiErrorAction()) }\r\n}\r\n\r\n\r\nfunction* PartyMasterBulkUpdateSaga() {\r\n    yield takeLatest(GO_BUTTON_FOR_PARTY_MASTER_BULK_UPDATE_PAGE, GoButton_PartyMasterBulkUpdate_post_genfun);\r\n    yield takeLatest(POST_PARTY_MASTER_BULK_UPDATE_PAGE, Post_PartyMasterBulkUpdate_GenratorFunction);\r\n    yield takeLatest(POST_PARTY_NAME_DROPDOWN, Post_Party_GenratorFunction);\r\n    yield takeLatest(POST_SELECT_FIELD_DROPDOWN, Post_SelectField_GenratorFunction);\r\n    yield takeLatest(UPDATE_PARTY_MASTER_BULK, Update_Party_Bulk_GenratorFunction);\r\n}\r\n\r\nexport default PartyMasterBulkUpdateSaga;\r\n\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\PartyMasterBulkPages\\PartyMasterBulkUpdate.js",["3743","3744","3745","3746","3747","3748","3749","3750","3751","3752","3753","3754","3755","3756","3757","3758","3759","3760","3761","3762","3763","3764","3765"],"import {\r\n    Card,\r\n    CardBody,\r\n    Col,\r\n    Container,\r\n    FormGroup,\r\n    Input,\r\n    Label,\r\n    Row\r\n} from \"reactstrap\";\r\nimport { MetaTags } from \"react-meta-tags\";\r\nimport { BreadcrumbShowCountlabel, Breadcrumb_inputName, commonPageFieldSuccess } from \"../../../store/actions\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { commonPageField } from \"../../../store/actions\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {\r\n    comAddPageFieldFunc,\r\n    initialFiledFunc,\r\n    resetFunction\r\n} from \"../../../components/Common/validationFunction\";\r\nimport Select from \"react-select\";\r\nimport { Go_Button, SaveButton } from \"../../../components/Common/CommonButton\";\r\nimport {\r\n    breadcrumbReturnFunc,\r\n    btnIsDissablefunc,\r\n    date_ymd_func,\r\n    loginCompanyID,\r\n    loginPartyID,\r\n    metaTagLabel\r\n} from \"../../../components/Common/CommonFunction\";\r\nimport paginationFactory, { PaginationListStandalone, PaginationProvider } from \"react-bootstrap-table2-paginator\";\r\nimport ToolkitProvider from \"react-bootstrap-table2-toolkit\";\r\nimport BootstrapTable from \"react-bootstrap-table-next\";\r\nimport * as pageId from \"../../../routes//allPageID\";\r\nimport * as url from \"../../../routes/route_url\";\r\nimport * as mode from \"../../../routes/PageMode\";\r\nimport { mySearchProps } from \"../../../components/Common/SearchBox/MySearch\";\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\nimport { GetRoutesList, GetRoutesListSuccess } from \"../../../store/Administrator/RoutesRedux/actions\";\r\nimport {\r\n    GoButton_For_Party_Master_Bulk_Update_Add,\r\n    GoButton_For_Party_Master_Bulk_Update_AddSuccess,\r\n    postPartyName_for_dropdown,\r\n    postPartyName_for_dropdown_Success,\r\n    postParty_Master_Bulk_Update,\r\n    postParty_Master_Bulk_Update_Success,\r\n    postSelect_Field_for_dropdown,\r\n    updatePartyMasterBulkID\r\n} from \"../../../store/Administrator/PartyMasterBulkUpdateRedux/actions\";\r\nimport { getState, getStateESuccess } from \"../../../store/Administrator/EmployeeRedux/action\";\r\nimport { customAlert } from \"../../../CustomAlert/ConfirmDialog\";\r\nimport * as _cfunc from \"../../../components/Common/CommonFunction\";\r\nimport { C_DatePicker, C_Select } from \"../../../CustomValidateForm\";\r\nimport { getDistrictOnState } from \"../../../store/Administrator/PartyRedux/action\";\r\n\r\n\r\nconst PartyMasterBulkUpdate = (props) => {\r\n\r\n    const count = useRef(0)\r\n\r\n    const dispatch = useDispatch();\r\n    const history = useHistory()\r\n    const [modalCss, setModalCss] = useState(false);\r\n    const [pageMode, setPageMode] = useState(mode.defaultsave);\r\n    const [userPageAccessState, setUserPageAccessState] = useState('');\r\n    const [SelectFieldName, setSelectFieldName] = useState([]);\r\n    const [state_DropDown_select, setState_DropDown_select] = useState();\r\n    const [district_dropdown_Select, setDistrict_dropdown_Select] = useState();\r\n\r\n\r\n    const fileds = {\r\n        id: \"\",\r\n        RoutesName: \"\",\r\n        PartyName: \"\",\r\n        SelectField: \"\",\r\n        Party: { value: \"\", label: \"All\" },\r\n        Routes: { value: \"\", label: \"All\" }\r\n    }\r\n\r\n    const [state, setState] = useState(() => initialFiledFunc(fileds))\r\n    const [val, setvalue] = useState()\r\n    const [key, setKey] = useState()\r\n\r\n\r\n    //Access redux store Data /  'save_ModuleSuccess' action data\r\n    const {\r\n        postMsg,\r\n        pageField,\r\n        userAccess,\r\n        RoutesList,\r\n        SelectField,\r\n        PartyName,\r\n        Data,\r\n        DistrictOnState,\r\n        State,\r\n        saveBtnloading,\r\n        listBtnLoading,\r\n        districtDropDownLoading,\r\n    } = useSelector((state) => ({\r\n        listBtnLoading: state.PartyMasterBulkUpdateReducer.listBtnLoading,\r\n        districtDropDownLoading: state.PartyMasterReducer.districtDropDownLoading,\r\n        saveBtnloading: state.PartyMasterBulkUpdateReducer.saveBtnloading,\r\n        postMsg: state.PartyMasterBulkUpdateReducer.postMsg,\r\n        userAccess: state.Login.RoleAccessUpdateData,\r\n        pageField: state.CommonPageFieldReducer.pageField,\r\n        Routes: state.CreditLimitReducer.Routes,\r\n        State: state.EmployeesReducer.State,\r\n        DistrictOnState: state.PartyMasterReducer.DistrictOnState,\r\n        Data: state.PartyMasterBulkUpdateReducer.goButton,\r\n        RoutesList: state.RoutesReducer.RoutesList,\r\n        SelectField: state.PartyMasterBulkUpdateReducer.SelectField,\r\n        PartyName: state.PartyMasterBulkUpdateReducer.PartyName,\r\n    }));\r\n\r\n    const location = { ...history.location }\r\n    const hasShowModal = props.hasOwnProperty(mode.editValue)\r\n\r\n    const values = { ...state.values }\r\n    const { isError } = state;\r\n    const { fieldLabel } = state;\r\n\r\n\r\n    useEffect(() => {\r\n        dispatch(GoButton_For_Party_Master_Bulk_Update_AddSuccess([]))\r\n        const page_Id = pageId.PARTY_MASTER_BULK_UPDATE\r\n        dispatch(commonPageFieldSuccess(null));\r\n        dispatch(commonPageField(page_Id))\r\n        dispatch(GetRoutesList());\r\n        dispatch(getState())\r\n        return () => {\r\n            dispatch(GetRoutesListSuccess([]))\r\n            dispatch(getStateESuccess([]))\r\n            dispatch(postPartyName_for_dropdown_Success([]))\r\n        }\r\n    }, []);\r\n\r\n    // userAccess useEffect\r\n    useEffect(() => {\r\n        let userAcc = null;\r\n        let locationPath = location.pathname;\r\n        if (hasShowModal) {\r\n            locationPath = props.masterPath;\r\n        };\r\n        userAcc = userAccess.find((inx) => {\r\n            return (`/${inx.ActualPagePath}` === locationPath)\r\n        })\r\n        if (userAcc) {\r\n            setUserPageAccessState(userAcc)\r\n            breadcrumbReturnFunc({ dispatch, userAcc });\r\n        };\r\n    }, [userAccess])\r\n\r\n\r\n    useEffect(() => {\r\n        const jsonBody = JSON.stringify({\r\n            Company: loginCompanyID(),\r\n            TypeID: 2\r\n        });\r\n        dispatch(postSelect_Field_for_dropdown(jsonBody));\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        const jsonBody = JSON.stringify({\r\n            CompanyID: loginCompanyID(),\r\n            PartyID: loginPartyID(),\r\n            Type: 1\r\n        });\r\n        dispatch(postPartyName_for_dropdown(jsonBody));\r\n    }, []);\r\n\r\n    useEffect(async () => {\r\n        if ((postMsg.Status === true) && (postMsg.StatusCode === 200) && !(pageMode === \"dropdownAdd\")) {\r\n            dispatch(postParty_Master_Bulk_Update_Success({ Status: false }))\r\n            setState(() => resetFunction(fileds, state))// Clear form values  \r\n            dispatch(Breadcrumb_inputName(''))\r\n\r\n            if (pageMode === mode.dropdownAdd) {\r\n                customAlert({\r\n                    Type: 1,\r\n                    Message: postMsg.Message,\r\n                })\r\n            }\r\n            else {\r\n                let isPermission = await customAlert({\r\n                    Type: 1,\r\n                    Status: true,\r\n                    Message: postMsg.Message,\r\n                })\r\n                if (isPermission) {\r\n                    history.push({ pathname: url.PARTY_MASTER_BULK_UPDATE })\r\n                }\r\n            }\r\n        }\r\n        else if ((postMsg.Status === true) && !(pageMode === \"dropdownAdd\")) {\r\n            dispatch(GoButton_For_Party_Master_Bulk_Update_AddSuccess([]))\r\n            dispatch(postParty_Master_Bulk_Update_Success({ Status: false }))\r\n            customAlert({\r\n                Type: 4,\r\n                Message: JSON.stringify(postMsg.Message),\r\n            })\r\n        }\r\n    }, [postMsg.Status])\r\n\r\n    useEffect(() => {\r\n        dispatch(BreadcrumbShowCountlabel(`${\"Count\"} :${Data.length}`))\r\n    }, [Data])\r\n\r\n    useEffect(() => _cfunc.tableInputArrowUpDounFunc(\"#table_Arrow\"), [Data]);\r\n\r\n    useEffect(() => {\r\n        if (pageField) {\r\n            const fieldArr = pageField.PageFieldMaster\r\n            comAddPageFieldFunc({ state, setState, fieldArr })\r\n        }\r\n    }, [pageField])\r\n\r\n    const RoutesListOptions = RoutesList.map((index) => ({\r\n        value: index.id,\r\n        label: index.Name,\r\n        IsActive: index.IsActive\r\n    }));\r\n\r\n    const RouteName_Options = RoutesListOptions.filter((index) => {\r\n        return index.IsActive === true\r\n    });\r\n\r\n    const SelectFieldDropdown_options = SelectField.map((index) => ({\r\n        value: index.id,\r\n        label: index.Name,\r\n    }));\r\n\r\n    const DistrictOnStateValues = DistrictOnState.map((index) => ({\r\n        value: index.id,\r\n        label: index.Name\r\n    }));\r\n\r\n    const PartyDropdown_Options = PartyName.map(i => ({\r\n        value: i.id,\r\n        label: i.Name\r\n    }));\r\n\r\n    const StateValues = State.map((index) => ({\r\n        value: index.id,\r\n        label: index.Name\r\n    }));\r\n\r\n    const GoButton_Handler = () => {\r\n\r\n        if (SelectFieldName.length === 0) {\r\n            customAlert({\r\n                Type: 3,\r\n                Message: \"Please select field\",\r\n            })\r\n            return;\r\n        }\r\n\r\n        const jsonBody = JSON.stringify({\r\n\r\n            PartyID: loginPartyID(),\r\n            Route: values.Routes.value === \"\" ? 0 : values.Routes.value,\r\n            Type: SelectFieldName.length === 0 ? 0 : SelectFieldName.label,\r\n            FilterPartyID: values.Party.value === \"\" ? 0 : values.Party.value\r\n\r\n        });\r\n\r\n        dispatch(GoButton_For_Party_Master_Bulk_Update_Add(jsonBody));\r\n    }\r\n\r\n    function SelectFieldHandler(event) {\r\n        setSelectFieldName(event)\r\n        dispatch(GoButton_For_Party_Master_Bulk_Update_AddSuccess([]))\r\n    }\r\n\r\n    function tableSelectHandler(event, user) {\r\n        let input = event.target.value;\r\n        user.Newvalue = input\r\n    }\r\n\r\n    function handllerState(event, user, key) {\r\n\r\n        user.Newvalue = event.value\r\n        setState_DropDown_select(event)\r\n        setKey(key)\r\n\r\n    }\r\n\r\n    function divisionhandler(event, user) {\r\n        user.Newvalue = event.target.checked\r\n    }\r\n\r\n    function TCSPartyhandler(event, user) {\r\n        user.Newvalue = event.target.checked\r\n    }\r\n\r\n\r\n    function partyOnchange(e) {\r\n        setState((i) => {\r\n            const a = { ...i }\r\n            a.values.Party = e;\r\n            a.hasValid.Party.valid = true\r\n            return a\r\n        })\r\n    }\r\n\r\n    function RoutesNameOnchange(e) {\r\n        setState((i) => {\r\n            const a = { ...i }\r\n            a.values.Routes = e;\r\n            a.hasValid.Routes.valid = true\r\n            return a\r\n        })\r\n    }\r\n\r\n    function handllerDistrictOnState(event, user) {\r\n        user.NewDistrict = event.value\r\n        // setDistrict_dropdown_Select(event)\r\n        // dispatch(getDistrictOnState(event.value))\r\n    }\r\n\r\n    function fromdateOnchange(event, user) {\r\n        const Date = date_ymd_func(event[0])\r\n        user.NewFSSAIExipry = Date\r\n    }\r\n\r\n    const pagesListColumns = [\r\n        {\r\n            text: \"PartyName\",\r\n            dataField: \"PartyName\",\r\n        },\r\n        {\r\n            text: SelectFieldName.label,\r\n            dataField: SelectFieldName.label,\r\n        },\r\n\r\n    ];\r\n\r\n    PartyDropdown_Options.unshift({\r\n        value: \"\",\r\n        label: \" All\"\r\n    });\r\n\r\n    RouteName_Options.unshift({\r\n        value: \"\",\r\n        label: \" All\"\r\n    });\r\n\r\n    if (SelectFieldName.label === \"FSSAINo\") {\r\n        let FSSAINo = {\r\n            text: \"FSSAIExipry\",\r\n            dataField: \"FSSAIExipry\",\r\n        }\r\n        pagesListColumns.push(FSSAINo)\r\n    }\r\n\r\n    if (SelectFieldName.label === \"State\") {\r\n        let District = {\r\n            text: \"District\",\r\n            dataField: \"District\",\r\n        }\r\n        pagesListColumns.push(District)\r\n    }\r\n\r\n\r\n    const Newvalue = {\r\n        text: `New${SelectFieldName.label === undefined ? \"Value\" : SelectFieldName.label}`,\r\n        dataField: \"Newvalue\",\r\n\r\n        formatter: (cellContent, user, key) => (\r\n\r\n            <>\r\n                {SelectFieldName.label === \"State\" ?\r\n\r\n                    <div style={{ width: \"180px\" }}>\r\n                        <Col>\r\n                            <FormGroup >\r\n                                <C_Select\r\n                                    id={key}\r\n                                    value={state_DropDown_select}\r\n                                    options={StateValues}\r\n                                    onChange={(event) => handllerState(event, user, key)}\r\n                                />\r\n                            </FormGroup>\r\n                        </Col>\r\n                    </div> :\r\n                    SelectFieldName.label === \"IsTCSParty\" ?\r\n                        < Col md={2} style={{ marginTop: '9px' }} >\r\n\r\n                            <Input\r\n                                type=\"checkbox\"\r\n                                id={key}\r\n                                className=\"p-2\"\r\n                                defaultChecked={user.IsTCSParty}\r\n                                onChange={(event) => TCSPartyhandler(event, user)}\r\n                            />\r\n\r\n                        </Col> :\r\n\r\n                        SelectFieldName.label === \"IsDivision\" ?\r\n\r\n                            < Col md={2} style={{ marginTop: '9px' }} >\r\n                                <div className=\"form-check form-switch form-switch-md mb-3\">\r\n                                    <Input type=\"checkbox\" className=\"form-check-input\"\r\n                                        id={key}\r\n                                        defaultChecked={user.IsDivision}\r\n                                        onChange={(event) => divisionhandler(event, user)}\r\n                                        name=\"IsActive\"\r\n\r\n                                    />\r\n                                </div>\r\n                            </Col> :\r\n\r\n                            <div style={{ width: \"180px\" }}>\r\n                                <Col>\r\n                                    <FormGroup >\r\n                                        <Input\r\n                                            id={key}\r\n                                            type=\"text\"\r\n                                            placeholder={`Enter New ${SelectFieldName.label}`}\r\n                                            defaultValue={user.Newvalue}\r\n                                            className=\"col col-sm \"\r\n                                            onChange={(event) => tableSelectHandler(event, user)}\r\n                                        />\r\n                                    </FormGroup>\r\n                                </Col>\r\n                            </div>\r\n                }\r\n            </>\r\n        ),\r\n    }\r\n\r\n    const DistrictColumn = {\r\n        text: \" New District\",\r\n        dataField: \"\",\r\n        formatter: (cellContent, user, key) => (\r\n            <>\r\n                <div style={{ width: \"180px\" }}>\r\n                    <Col>\r\n                        <FormGroup >\r\n                            <C_Select\r\n                                id={`id${key}`}\r\n                                value={district_dropdown_Select}\r\n                                isLoading={districtDropDownLoading}\r\n                                options={DistrictOnStateValues}\r\n                                onChange={(event) => handllerDistrictOnState(event, user)}\r\n                            />\r\n                        </FormGroup>\r\n                    </Col>\r\n                </div>\r\n            </>\r\n        ),\r\n    }\r\n\r\n\r\n    pagesListColumns.push(Newvalue)\r\n    const dateColumn = {\r\n        text: \" New FSSAIExipry\",\r\n        dataField: \"\",\r\n        formatter: (cellContent, user, key) => (\r\n            <>\r\n                <div style={{ width: \"180px\" }} >\r\n                    <Col sm={12}>\r\n                        <FormGroup sm={6}>\r\n                            <C_DatePicker\r\n                                id={key}\r\n                                name='fromdate'\r\n                                onChange={(event) => fromdateOnchange(event, user)}\r\n                            />\r\n                        </FormGroup>\r\n                    </Col>\r\n                </div>\r\n\r\n            </>\r\n        ),\r\n    }\r\n    if (SelectFieldName.label === \"FSSAINo\") {\r\n        pagesListColumns.push(dateColumn)\r\n    }\r\n    if (SelectFieldName.label === \"State\") {\r\n        pagesListColumns.push(DistrictColumn)\r\n    }\r\n\r\n\r\n    const pageOptions = {\r\n        sizePerPage: 10,\r\n        totalSize: Data.length,\r\n        custom: true,\r\n    };\r\n\r\n    const SaveHandler = (event) => {\r\n\r\n        const arr1 = []\r\n        event.preventDefault();\r\n        const btnId = event.target.id\r\n        try {\r\n\r\n            btnIsDissablefunc({ btnId, state: true })\r\n            Data.forEach(i => {\r\n\r\n                if (i.Newvalue || i.NewFSSAIExipry || i.NewDistrict || i.Newvalue === false) {\r\n                    const arr = {\r\n                        SubPartyID: i.SubPartyID,\r\n                        Value1: i.Newvalue,\r\n                        Value2: i.NewFSSAIExipry,\r\n                        Value2: i.NewDistrict,\r\n                        party: i.PartyName\r\n                    }\r\n                    arr1.push(arr)\r\n                }\r\n            })\r\n\r\n            const jsonBody = JSON.stringify({\r\n                PartyID: loginPartyID(),\r\n                Type: SelectFieldName.label,\r\n                UpdateData: arr1\r\n\r\n            });\r\n\r\n            if (pageMode === mode.edit) {\r\n                dispatch(updatePartyMasterBulkID({ jsonBody, updateId: values.id, btnId }));\r\n            }\r\n            else {\r\n\r\n                if (arr1.length <= 0) {\r\n                    customAlert({\r\n                        Type: 3,\r\n                        Message: \"Update At least One Field\",\r\n                    })\r\n                    btnIsDissablefunc({ btnId, state: false })\r\n                } else {\r\n                    const invalidMsg1 = []\r\n                    arr1.forEach((i) => {\r\n\r\n                        if ((SelectFieldName.label === \"MobileNo\")) {\r\n                            const regexExp1 = /^[6-9]\\d{9}$/gi;\r\n                            const IsMobile = regexExp1.test(i.Value1)\r\n                            if (!IsMobile) {\r\n\r\n                                invalidMsg1.push(`InValid Mobile No ${i.party}`)\r\n                            }\r\n                        };\r\n                        if ((SelectFieldName.label === \"Email\")) {\r\n                            const regexExp2 = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/\r\n                            const IsEmail = regexExp2.test(i.Value1)\r\n                            if (!IsEmail) {\r\n                                invalidMsg1.push(`InValid Email ${i.party} `)\r\n                            }\r\n                        };\r\n\r\n                        if ((SelectFieldName.label === \"PAN\")) {\r\n                            const regexExp3 = /[A-Z]{5}[0-9]{4}[A-Z]{1}/\r\n                            const IsPan = regexExp3.test(i.Value1)\r\n                            if (!IsPan) {\r\n                                invalidMsg1.push(`InValid Pan No ${i.party}`)\r\n                            }\r\n                        };\r\n\r\n                        if ((SelectFieldName.label === \"GSTIN\")) {\r\n                            const regexExp4 = /^[0-9]{2}[A-Z]{5}[0-9]{4}[A-Z]{1}[1-9A-Z]{1}Z[0-9A-Z]{1}$/\r\n                            const IsGSTIN = regexExp4.test(i.Value1)\r\n                            if (!IsGSTIN) {\r\n                                invalidMsg1.push(`InValid GSTIN No ${i.party}`)\r\n                            }\r\n                        };\r\n\r\n                        if ((SelectFieldName.label === \"Name\")) {\r\n                            const regexExp5 = /^[A-Za-z]+$/\r\n                            const IsName = regexExp5.test(i.Value1)\r\n                            if (!IsName) {\r\n                                invalidMsg1.push(`InValid Name ${i.party}`)\r\n                            }\r\n                        };\r\n\r\n                    })\r\n                    if (invalidMsg1.length > 0) {\r\n                        customAlert({\r\n                            Type: 3,\r\n                            Message: invalidMsg1.toString()\r\n                        })\r\n                        return btnIsDissablefunc({ btnId, state: false })\r\n                    }\r\n\r\n                    dispatch(postParty_Master_Bulk_Update({ jsonBody, btnId }));\r\n                }\r\n\r\n            }\r\n        } catch (e) { btnIsDissablefunc({ btnId, state: false }) }\r\n    };\r\n\r\n\r\n    // IsEditMode_Css is use of module Edit_mode (reduce page-content marging)\r\n    var IsEditMode_Css = ''\r\n    if ((modalCss) || (pageMode === mode.dropdownAdd)) { IsEditMode_Css = \"-5.5%\" };\r\n\r\n    if (!(userPageAccessState === '')) {\r\n        return (\r\n            <React.Fragment>\r\n                <MetaTags>{metaTagLabel(userPageAccessState)}</MetaTags>\r\n\r\n                <div className=\"page-content\" style={{ marginTop: IsEditMode_Css, }}>\r\n                    <Container fluid>\r\n                        <form noValidate>\r\n\r\n                            <Card className=\"mb-1\" style={{ marginBottom: \"6px\" }}>\r\n                                <CardBody className=\"c_card_header text-black\">\r\n                                    <Row>\r\n                                        <Col sm={3} >\r\n                                            <FormGroup className=\" row\" >\r\n                                                <Label className=\"mt-1\"\r\n                                                    style={{ width: \"95px\" }}>SelectField </Label>\r\n                                                <div className=\"col col-7 sm-1\">\r\n                                                    <Select\r\n                                                        name=\"SelectField\"\r\n                                                        value={val}\r\n                                                        isSearchable={true}\r\n                                                        className=\"react-dropdown\"\r\n                                                        classNamePrefix=\"dropdown\"\r\n                                                        styles={{\r\n                                                            menu: provided => ({ ...provided, zIndex: 2 })\r\n                                                        }}\r\n                                                        options={SelectFieldDropdown_options}\r\n                                                        onChange={(event) => SelectFieldHandler(event)}\r\n                                                    />\r\n                                                    {isError.SelectField.length > 0 && (\r\n                                                        <span className=\"text-danger f-8\"><small>{isError.SelectField}</small></span>\r\n                                                    )}\r\n                                                </div>\r\n                                            </FormGroup>\r\n                                        </Col>\r\n                                        <Col sm={3} >\r\n                                            <FormGroup className=\" row \">\r\n                                                <Label className=\"mt-1\"\r\n                                                    style={{ width: \"104px\" }}>RoutesName </Label>\r\n                                                <div className=\"col col-7 sm-1\">\r\n                                                    <Select\r\n                                                        name=\"RoutesName\"\r\n                                                        value={values.Routes}\r\n                                                        isSearchable={true}\r\n                                                        className=\"react-dropdown\"\r\n                                                        styles={{\r\n                                                            menu: provided => ({ ...provided, zIndex: 2 })\r\n                                                        }}\r\n                                                        classNamePrefix=\"dropdown\"\r\n                                                        options={RouteName_Options}\r\n                                                        // onChange={(e) => { setRouteSelect(e) }}\r\n                                                        onChange={RoutesNameOnchange}\r\n\r\n                                                    />\r\n                                                    {isError.RoutesName.length > 0 && (\r\n                                                        <span className=\"text-danger f-8\"><small>{isError.RoutesName}</small></span>\r\n                                                    )}\r\n                                                </div>\r\n                                            </FormGroup>\r\n                                        </Col>\r\n\r\n                                        <Col sm={4} >\r\n                                            <FormGroup className=\" row \" >\r\n                                                <Label htmlFor=\"validationCustom01\" className=\"mt-1\"\r\n                                                    style={{ width: \"100px\" }}>PartyName </Label>\r\n                                                <div className=\"col col-7 sm-1\">\r\n                                                    <Select\r\n                                                        name=\"PartyName\"\r\n                                                        value={values.Party}\r\n                                                        isSearchable={true}\r\n                                                        className=\"react-dropdown\"\r\n                                                        classNamePrefix=\"dropdown\"\r\n                                                        styles={{\r\n                                                            menu: provided => ({ ...provided, zIndex: 2 })\r\n                                                        }}\r\n                                                        options={PartyDropdown_Options}\r\n                                                        // onChange={(e) => { setParty(e) }}\r\n                                                        onChange={partyOnchange}\r\n\r\n                                                    />\r\n                                                </div>\r\n                                                {isError.PartyName.length > 0 && (\r\n                                                    <span className=\"text-danger f-8\"><small>{isError.PartyName}</small></span>\r\n                                                )}\r\n                                            </FormGroup>\r\n                                        </Col>\r\n\r\n                                        <Col sm={1}>\r\n                                            <div className=\"col col-1 px-5\">\r\n                                                <Go_Button onClick={(event) => { GoButton_Handler(event) }} loading={listBtnLoading} />\r\n\r\n                                            </div>\r\n                                        </Col>\r\n                                    </Row>\r\n                                </CardBody>\r\n                            </Card>\r\n                            <PaginationProvider\r\n                                pagination={paginationFactory(pageOptions)}\r\n                            >\r\n                                {({ paginationProps, paginationTableProps }) => (\r\n                                    <ToolkitProvider\r\n                                        keyField=\"id\"\r\n                                        data={Data}\r\n                                        columns={pagesListColumns}\r\n                                        search\r\n                                    >\r\n                                        {toolkitProps => (\r\n                                            <React.Fragment>\r\n                                                <div className=\"table\">\r\n                                                    <BootstrapTable\r\n                                                        keyField={\"id\"}\r\n                                                        id=\"table_Arrow\"\r\n                                                        bordered={true}\r\n                                                        striped={false}\r\n                                                        noDataIndication={<div className=\"text-danger text-center \">PartyMasterbulk Not available</div>}\r\n                                                        classes={\"table align-middle table-nowrap table-hover\"}\r\n                                                        headerWrapperClasses={\"thead-light\"}\r\n\r\n                                                        {...toolkitProps.baseProps}\r\n                                                        {...paginationTableProps}\r\n                                                    />\r\n                                                    {/* {countlabelFunc(toolkitProps, paginationProps,)} */}\r\n                                                    {mySearchProps(toolkitProps.searchProps)}\r\n                                                </div>\r\n\r\n                                                <Row className=\"align-items-md-center mt-30\">\r\n                                                    <Col className=\"pagination pagination-rounded justify-content-end mb-2\">\r\n                                                        <PaginationListStandalone\r\n                                                            {...paginationProps}\r\n                                                        />\r\n                                                    </Col>\r\n                                                </Row>\r\n                                            </React.Fragment>\r\n                                        )\r\n                                        }\r\n                                    </ToolkitProvider>\r\n                                )\r\n                                }\r\n                            </PaginationProvider>\r\n\r\n                            {Data.length > 0 ? <FormGroup className=\"row row-cols-2 save1\" >\r\n                                <Row >\r\n                                    <Col sm={2} className=\"mt-n4\">\r\n                                        <SaveButton pageMode={pageMode}\r\n                                            loading={saveBtnloading}\r\n                                            onClick={SaveHandler}\r\n                                            userAcc={userPageAccessState}\r\n                                            module={\"PartyMasterBulkUpdate\"}\r\n                                        />\r\n                                    </Col>\r\n                                </Row>\r\n                            </FormGroup >\r\n                                : null\r\n                            }\r\n                        </form>\r\n                        {/* </CardBody> */}\r\n                        {/* </Card> */}\r\n                    </Container>\r\n                </div>\r\n            </React.Fragment >\r\n        );\r\n    }\r\n    else {\r\n        return (\r\n            <React.Fragment></React.Fragment>\r\n        )\r\n    }\r\n};\r\n\r\n\r\nexport default PartyMasterBulkUpdate\r\n\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\PartyMasterBulkUpdateRedux\\reducer.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\PartyMasterBulkUpdateRedux\\actions.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\PartyMasterBulkUpdateRedux\\actionTypes.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Inventory\\GRN\\GRNAdd_3.js",["3766","3767","3768","3769","3770","3771","3772","3773","3774","3775"],"import {\r\n    Col,\r\n    FormGroup,\r\n    Input,\r\n    Label,\r\n    Row,\r\n} from \"reactstrap\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { MetaTags } from \"react-meta-tags\";\r\nimport ToolkitProvider from \"react-bootstrap-table2-toolkit\";\r\nimport BootstrapTable from \"react-bootstrap-table-next\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { BreadcrumbShowCountlabel, Breadcrumb_inputName, commonPageField, commonPageFieldSuccess, postSelect_Field_for_dropdown } from \"../../../store/actions\";\r\nimport { orderCalculateFunc } from \"../../Purchase/Order/OrderPageCalulation\";\r\nimport { SaveButton } from \"../../../components/Common/CommonButton\";\r\nimport { editGRNIdSuccess, hideInvoiceForGRFAction, hideInvoiceForGRFActionSuccess, makeGRN_Mode_1ActionSuccess, saveGRNAction, saveGRNSuccess } from \"../../../store/Inventory/GRNRedux/actions\";\r\nimport { mySearchProps } from \"../../../components/Common/SearchBox/MySearch\";\r\nimport Select from \"react-select\";\r\nimport { mode, url, pageId } from \"../../../routes/index\";\r\nimport { customAlert } from \"../../../CustomAlert/ConfirmDialog\";\r\nimport * as _cfunc from \"../../../components/Common/CommonFunction\";\r\nimport { C_DatePicker } from \"../../../CustomValidateForm\";\r\nimport { initialFiledFunc } from \"../../../components/Common/validationFunction\";\r\nimport { pageFieldUseEffect, saveMsgUseEffect, table_ArrowUseEffect, userAccessUseEffect } from \"../../../components/Common/CommonUseEffect\";\r\nimport { useLayoutEffect } from \"react\";\r\n\r\nconst GRNAdd3 = (props) => {\r\n\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n    const currentDate_ymd = _cfunc.date_ymd_func();\r\n\r\n    const [pageMode, setPageMode] = useState(mode.defaultsave);\r\n    const [userPageAccessState, setUserAccState] = useState('');\r\n\r\n    const [grnDate, setgrnDate] = useState(currentDate_ymd);\r\n    const [grnDetail, setGrnDetail] = useState({});\r\n    const [grnItemTableList, setGrnItemTableList] = useState([]);\r\n    const [openPOdata, setopenPOdata] = useState([]);\r\n    const [invoiceNo, setInvoiceNo] = useState('');\r\n    const [InvoiceID, setInvoiceID] = useState('');\r\n\r\n\r\n\r\n    const [editCreatedBy, seteditCreatedBy] = useState(\"\");\r\n    const [EditData, setEditData] = useState({});\r\n\r\n    const fileds = {\r\n        GRNDate: currentDate_ymd,\r\n    }\r\n\r\n    const [state, setState] = useState(() => initialFiledFunc(fileds))\r\n\r\n    const {\r\n        items,\r\n        postMsg,\r\n        userAccess,\r\n        pageField,\r\n        saveBtnloading,\r\n        genralMaster_type69,\r\n        hideMsg\r\n    } = useSelector((state) => ({\r\n        saveBtnloading: state.GRNReducer.saveBtnloading,\r\n        items: state.GRNReducer.GRNitem,\r\n        hideMsg: state.GRNReducer.hideMsg,\r\n        postMsg: state.GRNReducer.postMsg,\r\n        updateMsg: state.GRNReducer.updateMsg,\r\n        userAccess: state.Login.RoleAccessUpdateData,\r\n        pageField: state.CommonPageFieldReducer.pageField,\r\n        genralMaster_type69: state.PartyMasterBulkUpdateReducer.SelectField,\r\n    }));\r\n\r\n    const values = { ...state.values }\r\n\r\n    const location = { ...history.location }\r\n    const hasShowloction = location.hasOwnProperty(mode.editValue)\r\n    const hasShowModal = props.hasOwnProperty(mode.editValue)\r\n\r\n    useLayoutEffect(() => {\r\n        let page_Id = pageId.GRN_ADD_3;\r\n        dispatch(commonPageFieldSuccess(null));\r\n        dispatch(commonPageField(page_Id))\r\n\r\n        const jsonBody = JSON.stringify({\r\n            Company: _cfunc.loginCompanyID(),\r\n            TypeID: 69\r\n        });\r\n        dispatch(postSelect_Field_for_dropdown(jsonBody));\r\n    }, [])\r\n\r\n    useEffect(() => userAccessUseEffect({ // userAccess common useEffect \r\n        props,\r\n        userAccess,\r\n        dispatch,\r\n        setUserAccState,\r\n    }), [userAccess]);\r\n\r\n    useEffect(() => saveMsgUseEffect({// saveMsgUseEffect common useEffect \r\n        postMsg, pageMode,\r\n        history, dispatch,\r\n        postSuccss: saveGRNSuccess,\r\n        foreceRedirectList: true,\r\n        listPath: url.GRN_LIST_3\r\n    }), [postMsg])\r\n\r\n    useEffect(() => pageFieldUseEffect({// useEffect common pagefield for master\r\n        state,\r\n        setState,\r\n        pageField\r\n    }), [pageField])\r\n\r\n    useEffect(() => table_ArrowUseEffect(\"#table_Arrow\"), [grnItemTableList]);\r\n\r\n    useEffect(() => {\r\n\r\n        if ((items.Status === true)) {\r\n\r\n            const grnDetails = { ...items.Data }\r\n            const InvoiceID = grnDetails.GRNReferences[0].Invoice\r\n            setInvoiceID(InvoiceID)\r\n\r\n            setGrnItemTableList(grnDetails.OrderItem)\r\n\r\n            setInvoiceNo(grnDetails.InvoiceNumber)\r\n            setGrnDetail(grnDetails)\r\n            const myArr = grnDetails.challanNo.split(\",\");\r\n            myArr.map(i => ({ Name: i, hascheck: false }))\r\n            setopenPOdata(grnDetails.GRNReferences)\r\n\r\n            dispatch(makeGRN_Mode_1ActionSuccess({ Status: false }))\r\n\r\n            dispatch(BreadcrumbShowCountlabel(`${\"GRN Amount\"} :${grnDetails.OrderAmount}`))\r\n        }\r\n\r\n    }, [items])\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        if (hideMsg.Status === true && hideMsg.StatusCode === 200) {\r\n            // setState(() => resetFunction(fileds, state)) // Clear form values \r\n            customAlert({\r\n                Type: 3,\r\n                Message: JSON.stringify(hideMsg.Message),\r\n            })\r\n            history.push({\r\n                pathname: url.GRN_STP_3,\r\n            })\r\n            dispatch(hideInvoiceForGRFActionSuccess({ Status: false }));\r\n\r\n        } else if (hideMsg.Status === true) {\r\n            dispatch(hideInvoiceForGRFActionSuccess({ Status: false }));\r\n\r\n        }\r\n    }, [hideMsg]);\r\n\r\n    useEffect(() => {\r\n\r\n        if ((hasShowloction || hasShowModal)) {\r\n            let hasEditVal = null\r\n            if (hasShowloction) {\r\n                setPageMode(location.pageMode)\r\n                hasEditVal = location.editValue\r\n            }\r\n            else if (hasShowModal) {\r\n                hasEditVal = props.editValue\r\n                setPageMode(props.pageMode)\r\n            }\r\n\r\n            if (hasEditVal) {\r\n\r\n                setEditData(hasEditVal);\r\n\r\n                const { GRNItems = [], GRNReferences = [], InvoiceNumber } = hasEditVal;\r\n\r\n                let ChallanNo1 = ''\r\n\r\n                GRNReferences.forEach(ele => {\r\n                    ChallanNo1 = ChallanNo1.concat(`${ele.ChallanNo},`)\r\n                });\r\n                ChallanNo1 = ChallanNo1.replace(/,*$/, '');\r\n\r\n                setInvoiceNo(InvoiceNumber)\r\n                setGrnDetail(ChallanNo1);\r\n                setGrnItemTableList(GRNItems)\r\n                dispatch(editGRNIdSuccess({ Status: false }))\r\n                dispatch(Breadcrumb_inputName(hasEditVal.ItemName))\r\n                seteditCreatedBy(hasEditVal.CreatedBy)\r\n            }\r\n        }\r\n    }, []);\r\n\r\n    const discrepancyOptions = genralMaster_type69.map(index => ({\r\n        value: index.id,\r\n        label: index.Name,\r\n    }));\r\n\r\n    const tableColumns = [\r\n        {//------------- ItemName column ----------------------------------\r\n            text: \"Item Name\",\r\n            dataField: \"ItemName\",\r\n        },\r\n\r\n        {//------------- Quantity  column ----------------------------------\r\n            text: \"Quantity\",\r\n            dataField: \"Quantity\",\r\n            align: () => 'right',\r\n        },\r\n\r\n        {  //------------- Unit column ----------------------------------\r\n            text: \"Unit\",\r\n            dataField: \"UnitName\",\r\n        },\r\n\r\n        {  //------------- QtyInBox column ----------------------------------\r\n            text: \"QtyInBox\",\r\n            dataField: \"QtyInBox\",\r\n            align: 'right'\r\n        },\r\n\r\n        {  //-------------MRP column ----------------------------------\r\n            text: \"MRP\",\r\n            dataField: \"MRPDetails\",\r\n            align: () => ('right'),\r\n            style: () => ({ minWidth: \"100px\" }),\r\n            formatter: (cellContent, row, key) => (\r\n                <Select\r\n                    id={`MRP${key}`}\r\n                    name=\"MRP\"\r\n                    defaultValue={{ value: row.MRP, label: row.MRPValue, }}\r\n                    isSearchable={true}\r\n                    className=\"react-dropdown\"\r\n                    classNamePrefix=\"dropdown\"\r\n                    options={row.MRPOps}\r\n                    onChange={(event) => {\r\n                        row.MRPValue = event.label;\r\n                        row.MRP = event.value;\r\n                    }}\r\n                />\r\n            ),\r\n        },\r\n\r\n        {  //-------------GST column ----------------------------------\r\n            text: \"GST\",\r\n            dataField: \"GSTDropdown\",\r\n            align: () => ('right'),\r\n            style: () => ({ minWidth: \"100px\" }),\r\n            formatter: (cellContent, row, key) => (\r\n                <Select\r\n                    id={`GST${key}`}\r\n                    name=\"GST\"\r\n                    defaultValue={{ value: row.GST, label: row.GSTPercentage, }}\r\n                    isSearchable={true}\r\n                    className=\"react-dropdown\"\r\n                    classNamePrefix=\"dropdown\"\r\n                    options={row.GSToption}\r\n                    onChange={(event) => {\r\n                        row.GSTPercentage = event.label;\r\n                        row.GST = event.value;\r\n                    }}\r\n                />\r\n            ),\r\n        },\r\n\r\n        {  //-------------Rate column ----------------------------------\r\n            text: \"Basic Rate\",\r\n            dataField: \"Rate\",\r\n            align: () => ('right')\r\n        },\r\n\r\n        {//------------- ItemName column ----------------------------------\r\n            text: \"Amount\",\r\n            dataField: \"Amount\",\r\n            align: () => 'right',\r\n            formatter: (cellContent) => <>{_cfunc.amountCommaSeparateFunc(cellContent)}</>,\r\n        },\r\n\r\n        {//------------- Batch Code column ----------------------------------\r\n            text: \"Batch\",\r\n            dataField: \"\",\r\n            formatter: (cellContent, index1) => (\r\n                <>\r\n                    <div className=\"bottom-div mb-3\" style={{ minWidth: \"150px\" }}>\r\n                        <samp>{index1.BatchCode}</samp>\r\n\r\n                    </div>\r\n\r\n                    <div className=\"bottom-div\">\r\n                        <samp>{_cfunc.date_dmy_func(index1.BatchDate)}</samp>\r\n\r\n                    </div>\r\n                </>\r\n            ),\r\n        },\r\n\r\n        {//------------- Batch Date column ----------------------------------\r\n            text: \"Discrepancy\",\r\n            dataField: \"\",\r\n            formatExtraData: { discrepancyOptions },\r\n            formatter: (cellContent, index1) => {\r\n\r\n                return (\r\n                    <>\r\n                        <div className=\"div-1 mb-1\" style={{ minWidth: \"150px\" }}>\r\n                            <div>\r\n                                <Select\r\n                                    classNamePrefix=\"select2-selection\"\r\n                                    placeholder=\"Select...\"\r\n                                    defaultValue={index1.defaultDiscrepancy}\r\n                                    options={discrepancyOptions}\r\n                                    onChange={event => index1.defaultDiscrepancy = event}\r\n\r\n                                ></Select>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"div-1\" style={{ minWidth: \"150px\" }}>\r\n                            <Input\r\n                                type=\"text\"\r\n                                className=\"input\"\r\n                                autoComplete=\"off\"\r\n                                placeholder=\"Enter Item Related Quary\"\r\n                                defaultValue={index1.comment}\r\n                                onChange={event => index1.comment = event.target.value}\r\n                            />\r\n                        </div>\r\n                    </>\r\n                )\r\n            }\r\n        },\r\n    ];\r\n\r\n    const defaultSorted = [\r\n        {\r\n            dataField: \"Name\", // if dataField is not match to any column you defined, it will be ignored.\r\n            order: \"asc\", // desc or asc\r\n        },\r\n    ];\r\n\r\n    const hideHandler = async (event) => {\r\n        let isHide = event.target.checked\r\n        const HideValue = isHide ? \"1\" : \"0\"\r\n        let config = { InvoiceId: InvoiceID, IsHide: HideValue }\r\n\r\n        const isConfirmed = await customAlert({\r\n            Type: 7,\r\n            Message: \"Do you want To Hide Invoice ?\",\r\n        });\r\n\r\n        if (isConfirmed) {\r\n            dispatch(hideInvoiceForGRFAction(config))\r\n        }\r\n\r\n    }\r\n\r\n    const saveHandeller = (event) => {\r\n\r\n        event.preventDefault();\r\n\r\n        const btnId = event.target.id\r\n\r\n        try {\r\n            const isvalidMsg = [];\r\n\r\n            const itemArray = grnItemTableList.map(index => {\r\n                let { UnitDetails, GSToption, MRPOps, GSTDropdown, MRPDetails, ...item } = index;\r\n\r\n                if (!Number(item.Rate) > 0) {// rate validation check\r\n                    isvalidMsg.push({[item.ItemName]:\" Rate not available.\" })\r\n                }\r\n                return {\r\n                    ...item,\r\n                    ActualQuantity: item.invoiceQuantity, //invoice actual quantity \r\n                    Comment: item.comment,\r\n                    Reason: item.defaultDiscrepancy ? item.defaultDiscrepancy.value : \"\",//default Discrepancy value\r\n                    ReferenceRate: item.Rate,\r\n                    BaseUnitQuantity: item.BaseUnitQuantity,\r\n                }\r\n            })\r\n\r\n            if (invoiceNo.length === 0) {\r\n                customAlert({ Type: 3, Message: \"Please Enter Invoice Number\" });\r\n                return\r\n            }\r\n            if (isvalidMsg.length > 0) {\r\n                customAlert({ Type: 3, Message: isvalidMsg });\r\n                return\r\n            }\r\n\r\n            const jsonBody = JSON.stringify({\r\n                GRNDate: grnDate,\r\n                Customer: grnDetail.Customer,\r\n                GRNNumber: 1,\r\n                GrandTotal: grnDetail.OrderAmount,\r\n                Party: grnDetail.Supplier,\r\n                InvoiceNumber: invoiceNo,\r\n                CreatedBy: _cfunc.loginUserID(),\r\n                UpdatedBy: 1,\r\n                GRNItems: itemArray,\r\n                GRNReferences: openPOdata,\r\n            });\r\n\r\n            if (pageMode === mode.edit) {\r\n\r\n            } else {\r\n                dispatch(saveGRNAction({ jsonBody, btnId }))\r\n            }\r\n        } catch (error) { _cfunc.CommonConsole(error) }\r\n    }\r\n\r\n    if (!(userPageAccessState === \"\")) {\r\n        return (\r\n            <React.Fragment>\r\n                <MetaTags>{_cfunc.metaTagLabel(userPageAccessState)}</MetaTags>\r\n\r\n                <div className=\"page-content\">\r\n\r\n                    <div className=\"px-2 mb-1  c_card_header \" >\r\n                        <Row>\r\n                            <Col sm={5}>\r\n\r\n                                <FormGroup className=\" row mt-2 \" >\r\n                                    <Label className=\"col-sm-4 p-2\"\r\n                                        style={{ width: \"130px\" }}>GRN Date</Label>\r\n                                    <Col sm=\"7\">\r\n                                        <C_DatePicker\r\n                                            name=\"GRNDate\"\r\n                                            value={values.GRNDate}\r\n                                            disabled={(pageMode === mode.view) ? true : false}\r\n                                            onChange={(e, date) => { setgrnDate(date) }}\r\n                                        />\r\n                                    </Col>\r\n                                </FormGroup>\r\n\r\n                                <FormGroup className=\" row  \" >\r\n                                    <Label className=\"col-md-4 p-2\"\r\n                                        style={{ width: \"130px\" }}>Supplier Name</Label>\r\n                                    <Col md=\"7\">\r\n                                        <Input\r\n                                            type=\"text\"\r\n                                            value={pageMode === mode.view ? EditData.CustomerName : grnDetail.SupplierName}\r\n                                            disabled={(pageMode === mode.view) && true}\r\n                                        />\r\n                                    </Col>\r\n                                </FormGroup>\r\n\r\n                                <FormGroup className=\" row \" >\r\n                                    <Label className=\"col-md-4 p-2\"\r\n                                        style={{ width: \"130px\" }}>PO Number</Label>\r\n                                    <Col sm=\"7\">\r\n                                        <Input type=\"text\"\r\n                                            disabled={true}\r\n                                            value={pageMode === mode.view ? grnDetail : grnDetail.challanNo}\r\n                                            placeholder=\"Enter Challan No\" />\r\n                                    </Col>\r\n                                </FormGroup>\r\n                            </Col>\r\n                            <Col sm={5}>\r\n                                <FormGroup className=\" row mt-2\" >\r\n                                    <Label className=\"col-md-4 p-2\"\r\n                                        style={{ width: \"130px\" }}>Invoice Date</Label>\r\n                                    <Col md=\"7\">\r\n                                        <C_DatePicker\r\n                                            disabled={true}\r\n                                        />\r\n                                    </Col>\r\n                                </FormGroup>\r\n                                <FormGroup className=\"mb-2 row  \" >\r\n                                    <Label className=\"col-md-4 p-2\"\r\n                                        style={{ width: \"130px\" }}>Invoice No</Label>\r\n                                    <Col md=\"7\">\r\n                                        <Input\r\n                                            type=\"text\"\r\n                                            disabled={true}\r\n                                            value={invoiceNo}\r\n                                            placeholder=\"Enter Invoice No\"\r\n                                            onChange={(e) => setInvoiceNo(e.target.value)}\r\n                                        />\r\n                                    </Col>\r\n                                </FormGroup>\r\n\r\n                                <FormGroup className=\" row  \" >\r\n                                    <Label className=\"col-md-4 p-2\"\r\n                                        style={{ width: \"130px\" }}>Close PO</Label>\r\n                                    <Col md=\"7\" >\r\n\r\n                                        <Input\r\n                                            type=\"checkbox\"\r\n                                            checked={true}\r\n                                            style={{ paddingTop: \"7px\" }}\r\n                                            placeholder=\"Enter Invoice No\"\r\n                                            disabled={true}\r\n\r\n                                        />\r\n\r\n                                    </Col>\r\n                                </FormGroup>\r\n\r\n                            </Col>\r\n                        </Row>\r\n                    </div>\r\n\r\n                    <ToolkitProvider\r\n                        keyField={\"Item_id\"}\r\n                        defaultSorted={defaultSorted}\r\n                        data={grnItemTableList}\r\n                        columns={tableColumns}\r\n                        search\r\n                    >\r\n                        {(toolkitProps,) => (\r\n                            <React.Fragment>\r\n                                <Row>\r\n                                    <Col xl=\"12\">\r\n                                        <div className=\"table-responsive table\" style={{ minHeight: \"45vh\" }}>\r\n                                            <BootstrapTable\r\n                                                keyField={\"Item_id\"}\r\n                                                id=\"table_Arrow\"\r\n                                                classes={\"table  table-bordered table-hover\"}\r\n                                                noDataIndication={\r\n                                                    <div className=\"text-danger text-center \">\r\n                                                        Items Not available\r\n                                                    </div>\r\n                                                }\r\n                                                onDataSizeChange={(e) => {\r\n                                                    _cfunc.tableInputArrowUpDounFunc(\"#table_Arrow\")\r\n                                                }}\r\n                                                {...toolkitProps.baseProps}\r\n                                            />\r\n                                            {mySearchProps(toolkitProps.searchProps)}\r\n                                        </div>\r\n                                    </Col>\r\n                                </Row>\r\n\r\n                            </React.Fragment>\r\n                        )}\r\n                    </ToolkitProvider>\r\n\r\n                    {\r\n                        (grnItemTableList.length > 0) ?\r\n                            <div>\r\n                                <div className=\"row row-cols-2 save1\" style={{ paddingBottom: 'center' }}>\r\n                                    <Col sm={6}>\r\n                                        <SaveButton pageMode={pageMode}\r\n                                            loading={saveBtnloading}\r\n                                            editCreatedBy={editCreatedBy}\r\n                                            userAcc={userPageAccessState}\r\n                                            module={\"GRN\"} onClick={saveHandeller}\r\n                                        />\r\n                                    </Col>\r\n                                </div>\r\n                                <div className=\"HideButton\">\r\n                                    <Col sm={6}>\r\n                                        {pageMode === mode.view ? null :\r\n                                            <div className=\"btn-group\" role=\"group\" aria-label=\"Basic checkbox toggle button group\">\r\n                                                <input type=\"checkbox\" className=\"btn-check\" id=\"btncheck1\" autoComplete=\"off\" onChange={(event) => { hideHandler(event) }} />\r\n                                                <label className=\"btn btn-outline-primary\" htmlFor=\"btncheck1\">Hide</label>\r\n                                            </div>}\r\n                                    </Col>\r\n                                </div>\r\n\r\n                            </div>\r\n\r\n                            :\r\n                            null\r\n                    }\r\n                </div >\r\n\r\n            </React.Fragment >\r\n        )\r\n    } else {\r\n        return null\r\n    }\r\n\r\n}\r\nexport default GRNAdd3\r\n\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Sale\\Invoice\\invoiceCaculations.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\ManagementPartiesRedux\\saga.js",["3776"],"import { call, delay, put, takeLatest } from \"redux-saga/effects\";\r\nimport { loginCompanyID } from \"../../../components/Common/CommonFunction\";\r\nimport * as  apiCall from \"../../../helpers/backend_helper\";\r\nimport * as actionType from \"./actionType\";\r\nimport * as action from \"./action\";\r\n\r\nfunction* save_ManagementParties_GenFunc({ config }) {\r\n  try {\r\n    const response = yield call(apiCall.Management_Parties_Post_API, config);\r\n    yield put(action.saveManagementParties_Success(response));\r\n  } catch (error) { yield put(action.ManagementPartiesApiErrorAction()) }\r\n}\r\n\r\nfunction* getPartyListGenFunc({ jsonBody }) {                                   // getList API\r\n  try {\r\n    yield delay(100)\r\n    const response = yield call(apiCall.Go_Button_Post_API, jsonBody);\r\n    response.Data.map((party) => {\r\n      party[\"selectCheck\"] = false\r\n      if (party.Party > 0) {\r\n        { party[\"selectCheck\"] = true }\r\n      }\r\n      return party\r\n    });\r\n    yield put(action.getPartyTableListSuccess(response.Data));\r\n  } catch (error) { yield put(action.ManagementPartiesApiErrorAction()) }\r\n}\r\n\r\nfunction* getEmployeeDrodownListGenFunc() {                                   // getList API\r\n  try {\r\n    const response = yield call(apiCall.Employee_drodown_Post_API, { \"Company\": loginCompanyID() });\r\n    yield put(action.getEmployeedropdownListSuccess(response.Data));\r\n  } catch (error) { yield put(action.ManagementPartiesApiErrorAction()) }\r\n}\r\n\r\nfunction* ManagementPartiesSaga() {\r\n  yield takeLatest(actionType.SAVE_MANAGEMENT_PARTIES, save_ManagementParties_GenFunc)\r\n  yield takeLatest(actionType.GET_PARTY_TABLE_LIST, getPartyListGenFunc)\r\n  yield takeLatest(actionType.GET_EMPLOYEE_DROPDWOPN_LIST, getEmployeeDrodownListGenFunc)\r\n}\r\n\r\nexport default ManagementPartiesSaga;  ","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\ManagementPartiesRedux\\reducer.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\ManagementParties\\ManagementEmpParties.js",["3777","3778","3779","3780","3781","3782","3783","3784","3785","3786","3787"],"import React, { useEffect, useState, } from \"react\";\r\nimport {\r\n    Col,\r\n    FormGroup,\r\n    Label,\r\n    Row,\r\n} from \"reactstrap\";\r\n\r\nimport { MetaTags } from \"react-meta-tags\";\r\nimport { commonPageField, commonPageFieldSuccess } from \"../../../store/actions\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { BreadcrumbShowCountlabel, Breadcrumb_inputName } from \"../../../store/Utilites/Breadcrumb/actions\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport Select from \"react-select\";\r\nimport {\r\n    comAddPageFieldFunc,\r\n    formValid,\r\n    initialFiledFunc,\r\n    onChangeSelect,\r\n    resetFunction,\r\n} from \"../../../components/Common/validationFunction\";\r\nimport { Change_Button, Go_Button, PageLoadingSpinner, SaveButton } from \"../../../components/Common/CommonButton\";\r\nimport {\r\n    breadcrumbReturnFunc,\r\n    loginCompanyID,\r\n    metaTagLabel,\r\n} from \"../../../components/Common/CommonFunction\";\r\nimport * as url from \"../../../routes/route_url\";\r\nimport * as pageId from \"../../../routes/allPageID\"\r\nimport * as mode from \"../../../routes/PageMode\"\r\nimport ToolkitProvider from \"react-bootstrap-table2-toolkit\";\r\nimport BootstrapTable from \"react-bootstrap-table-next\";\r\nimport { mySearchProps } from \"../../../components/Common/SearchBox/MySearch\";\r\nimport {\r\n    getEmployeedropdownList,\r\n    getPartyTableList,\r\n    getPartyTableListSuccess,\r\n    saveManagementParties,\r\n    saveManagementParties_Success\r\n} from \"../../../store/Administrator/ManagementPartiesRedux/action\";\r\nimport { selectAllCheck } from \"../../../components/Common/TableCommonFunc\";\r\nimport { customAlert } from \"../../../CustomAlert/ConfirmDialog\";\r\nimport { C_Select } from \"../../../CustomValidateForm\";\r\n\r\nconst ManagementEmpParties = (props) => {\r\n\r\n    const history = useHistory()\r\n    const dispatch = useDispatch();\r\n\r\n    const [modalCss] = useState(false);\r\n    const [pageMode] = useState(mode.defaultsave);\r\n    const [userPageAccessState, setUserAccState] = useState(123);\r\n\r\n    const fileds = {\r\n        Employee: \"\"\r\n    }\r\n\r\n    const [state, setState] = useState(() => initialFiledFunc(fileds))\r\n    //Access redux store Data /  'save_ModuleSuccess' action data\r\n    const { postMsg,\r\n        employeeList,\r\n        partyList,\r\n        pageField,\r\n        loading,\r\n        saveBtnloading,\r\n        employeeDropdownLoading,\r\n        userAccess } = useSelector((state) => ({\r\n            saveBtnloading: state.ManagementPartiesReducer.saveBtnloading,\r\n            employeeDropdownLoading: state.ManagementPartiesReducer.employeeDropdownLoading,\r\n            loading: state.ManagementPartiesReducer.loading,\r\n            postMsg: state.ManagementPartiesReducer.postMsg,\r\n            employeeList: state.ManagementPartiesReducer.employeeList,\r\n            partyList: state.ManagementPartiesReducer.partyList,\r\n            userAccess: state.Login.RoleAccessUpdateData,\r\n            pageField: state.CommonPageFieldReducer.pageField\r\n        }));\r\n\r\n    useEffect(() => {\r\n        const page_Id = pageId.MANAGEMENT_PARTIES\r\n        dispatch(commonPageFieldSuccess(null));\r\n        dispatch(commonPageField(page_Id))\r\n        dispatch(getEmployeedropdownList())\r\n        dispatch(getPartyTableListSuccess([]))\r\n    }, []);\r\n\r\n    const values = { ...state.values }\r\n    const { isError } = state;\r\n    const { fieldLabel } = state;\r\n\r\n    const location = { ...history.location }\r\n    const hasShowloction = location.hasOwnProperty(mode.editValue)\r\n    const hasShowModal = props.hasOwnProperty(mode.editValue)\r\n\r\n    useEffect(() => {\r\n\r\n        if (pageField) {\r\n            const fieldArr = pageField.PageFieldMaster\r\n            comAddPageFieldFunc({ state, setState, fieldArr })\r\n        }\r\n    }, [pageField])\r\n\r\n    // userAccess useEffect\r\n    useEffect(() => {\r\n        let userAcc = null;\r\n        let locationPath = location.pathname;\r\n\r\n        if (hasShowModal) {\r\n            locationPath = props.masterPath;\r\n        };\r\n\r\n        userAcc = userAccess.find((inx) => {\r\n            return (`/${inx.ActualPagePath}` === locationPath)\r\n        })\r\n\r\n        if (userAcc) {\r\n            setUserAccState(userAcc)\r\n            breadcrumbReturnFunc({ dispatch, userAcc });\r\n        };\r\n    }, [userAccess])\r\n\r\n    //This UseEffect 'SetEdit' data and 'autoFocus' while this Component load First Time.\r\n    useEffect(async () => {\r\n        if ((postMsg.Status === true) && (postMsg.StatusCode === 200)) {\r\n            dispatch(saveManagementParties_Success({ Status: false }))\r\n            setState(() => resetFunction(fileds, state))// Clear form values \r\n            dispatch(Breadcrumb_inputName(''))\r\n            dispatch(getPartyTableListSuccess([]))\r\n            if (pageMode === \"other\") {\r\n                customAlert({\r\n                    Type: 1,\r\n                    Message: postMsg.Message,\r\n                })\r\n            }\r\n            else {\r\n                let isPermission = await customAlert({\r\n                    Type: 1,\r\n                    Status: true,\r\n                    Message: postMsg.Message,\r\n                })\r\n                if (isPermission) {\r\n                    history.push({ pathname: url.MANAGEMENT_PARTIES })\r\n                }\r\n            }\r\n        }\r\n        else if (postMsg.Status === true) {\r\n            dispatch(saveManagementParties_Success({ Status: false }))\r\n            customAlert({\r\n                Type: 4,\r\n                Message: JSON.stringify(postMsg.Message),\r\n            })\r\n        }\r\n    }, [postMsg])\r\n\r\n\r\n    useEffect(() => {\r\n        dispatch(BreadcrumbShowCountlabel(`${\"Count\"} :${partyList.length}`))\r\n    }, [partyList])\r\n\r\n    const employeeListOptions = employeeList.map((index) => ({\r\n        value: index.id,\r\n        label: index.Name,\r\n    }));\r\n\r\n    function goButtonHandler(event) {\r\n\r\n        event.preventDefault();\r\n        if (formValid(state, setState)) {\r\n            const jsonBody = JSON.stringify({\r\n                \"Company\": loginCompanyID(),\r\n                \"Employee\": values.Employee.value\r\n            })\r\n            dispatch(getPartyTableList(jsonBody));\r\n        }\r\n    }\r\n\r\n    function rowSelected() {\r\n        return partyList.map((index) => { return (index.selectCheck) && index.id })\r\n    }\r\n\r\n    const pagesListColumns = [\r\n        {\r\n            text: \"Party Name\",\r\n            dataField: \"Name\",\r\n        },\r\n        {\r\n            text: \"Party Type\",\r\n            dataField: \"PartyType\",\r\n        },\r\n        {\r\n            text: \"State\",\r\n            dataField: \"State\",\r\n        },\r\n        {\r\n            text: \"District\",\r\n            dataField: \"District\",\r\n        },\r\n    ];\r\n\r\n    const SaveHandler = async (event) => {\r\n\r\n        event.preventDefault();\r\n        const btnId = event.target.id;\r\n\r\n        const CheckArray = partyList.filter(index => index.selectCheck === true);\r\n\r\n        if (CheckArray.length === 0) {\r\n            customAlert({ Type: 4, Status: true, Message: \"At least One Party is Selected\" });\r\n            return;\r\n        }\r\n        const PartiesJson = CheckArray.map(index => ({ Employee: values.Employee.value, Party: index.id }));\r\n        const jsonBody = JSON.stringify(PartiesJson);\r\n        dispatch(saveManagementParties({ jsonBody, btnId }));\r\n    };\r\n\r\n    // IsEditMode_Css is use of module Edit_mode (reduce page-content marging)\r\n    var IsEditMode_Css = ''\r\n    if ((modalCss) || (pageMode === mode.dropdownAdd)) { IsEditMode_Css = \"-5.5%\" };\r\n\r\n    if (!(userPageAccessState === '')) {\r\n        return (\r\n            <React.Fragment>\r\n                <PageLoadingSpinner isLoading={(!pageField)} />\r\n                <MetaTags>{metaTagLabel(userPageAccessState)}</MetaTags>\r\n                <div className=\"page-content\" style={{ marginTop: IsEditMode_Css, marginBottom: \"200px\" }}>\r\n                    <div className=\"px-2   c_card_header text-black mb-1\" >\r\n                        <div className=\"row\">\r\n                            <Col sm=\"5\">\r\n                                <FormGroup className=\" row mt-2  mb-1\" >\r\n                                    <Label className=\"col-sm-5 p-2\"\r\n                                        style={{ width: \"83px\" }}> {fieldLabel.Employee}</Label>\r\n                                    <Col sm=\"6\">\r\n                                        <C_Select\r\n                                            name=\"Employee\"\r\n                                            value={values.Employee}\r\n                                            isSearchable={true}\r\n                                            className=\"react-dropdown\"\r\n                                            classNamePrefix=\"dropdown\"\r\n                                            autoFocus={true}\r\n                                            options={employeeListOptions}\r\n                                            isLoading={employeeDropdownLoading}\r\n                                            isDisabled={(partyList.length > 0) ? true : false}\r\n                                            onChange={(hasSelect, evn) => {\r\n                                                onChangeSelect({ hasSelect, evn, state, setState, })\r\n                                            }}\r\n                                            styles={{\r\n                                                menu: provided => ({ ...provided, zIndex: 2 })\r\n                                            }}\r\n                                        />\r\n                                        {isError.Employee.length > 0 && (\r\n                                            <span className=\"text-danger f-8\"><small>{isError.Employee}</small></span>\r\n                                        )}\r\n                                    </Col>\r\n                                </FormGroup>\r\n                            </Col>\r\n\r\n                            <Col sm=\"1\" className=\"mt-2  mb-1\">\r\n                                {partyList.length === 0 ?\r\n                                    <Go_Button\r\n                                        loading={loading}\r\n                                        onClick={goButtonHandler}\r\n                                    />\r\n                                    :\r\n                                    <Change_Button onClick={(e) => dispatch(getPartyTableListSuccess([]))} />\r\n                                }\r\n                            </Col>\r\n\r\n                        </div>\r\n                    </div>\r\n\r\n                    <form noValidate>\r\n                        <ToolkitProvider\r\n                            keyField=\"id\"\r\n                            data={partyList}\r\n                            columns={pagesListColumns}\r\n                            search\r\n                        >\r\n                            {toolkitProps => (\r\n                                <React.Fragment>\r\n                                    <div className=\"table\">\r\n                                        <BootstrapTable\r\n                                            keyField={\"id\"}\r\n                                            bordered={true}\r\n                                            striped={true}\r\n                                            selectRow={selectAllCheck({\r\n                                                rowSelected: rowSelected(),\r\n                                                bgColor:''\r\n                                            })}\r\n                                            noDataIndication={<div className=\"text-danger text-center \">Party Not available</div>}\r\n                                            classes={\"table align-middle table-nowrap table-hover\"}\r\n                                            headerWrapperClasses={\"thead-light\"}\r\n                                            {...toolkitProps.baseProps}\r\n                                        />\r\n\r\n                                        {mySearchProps(toolkitProps.searchProps)}\r\n                                    </div>\r\n\r\n                                </React.Fragment>\r\n                            )\r\n                            }\r\n                        </ToolkitProvider>\r\n\r\n                        {partyList.length > 0 ?\r\n                            <FormGroup style={{ marginTop: \"-25px\" }}>\r\n                                <Row >\r\n                                    <Col sm={2} className=\"mt-n4\">  <div className=\"row save1\" style={{ paddingBottom: 'center' }}>\r\n                                        <SaveButton pageMode={pageMode}\r\n                                            loading={saveBtnloading}\r\n                                            onClick={SaveHandler}\r\n                                            userAcc={userPageAccessState}\r\n                                            module={\"RouteUpdate\"}\r\n                                        />\r\n                                    </div>\r\n                                    </Col>\r\n                                </Row>\r\n                            </FormGroup >\r\n                            : null\r\n                        }\r\n\r\n                    </form>\r\n                </div>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n    else {\r\n        return (\r\n            <React.Fragment></React.Fragment>\r\n        )\r\n    }\r\n};\r\n\r\nexport default ManagementEmpParties\r\n\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\ManagementPartiesRedux\\action.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\ManagementPartiesRedux\\actionType.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Accounting\\Receipt\\Receipts.js",["3788","3789","3790","3791","3792","3793","3794","3795","3796","3797","3798","3799","3800","3801","3802","3803","3804","3805"],"import React, { useEffect, useState, } from \"react\";\r\nimport {\r\n    Col,\r\n    FormGroup,\r\n    Input,\r\n    Label,\r\n    Row,\r\n} from \"reactstrap\";\r\nimport { MetaTags } from \"react-meta-tags\";\r\nimport { commonPageField, commonPageFieldSuccess } from \"../../../store/actions\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport Select from \"react-select\";\r\nimport {\r\n    comAddPageFieldFunc,\r\n    formValid,\r\n    initialFiledFunc,\r\n    onChangeSelect,\r\n    onChangeText,\r\n    resetFunction,\r\n} from \"../../../components/Common/validationFunction\";\r\nimport { SaveButton } from \"../../../components/Common/CommonButton\";\r\nimport {\r\n    breadcrumbReturnFunc,\r\n    btnIsDissablefunc,\r\n    currentDate_ymd,\r\n    loginCompanyID,\r\n    loginUserID,\r\n    metaTagLabel,\r\n} from \"../../../components/Common/CommonFunction\";\r\nimport * as url from \"../../../routes/route_url\";\r\nimport * as pageId from \"../../../routes/allPageID\"\r\nimport * as mode from \"../../../routes/PageMode\"\r\nimport ToolkitProvider from \"react-bootstrap-table2-toolkit\";\r\nimport BootstrapTable from \"react-bootstrap-table-next\";\r\nimport { mySearchProps } from \"../../../components/Common/SearchBox/MySearch\";\r\nimport { Retailer_List, Retailer_List_Success } from \"../../../store/CommonAPI/SupplierRedux/actions\";\r\nimport {\r\n    BankListAPI,\r\n    BankListAPISuccess,\r\n    GetOpeningBalance,\r\n    GetOpeningBalance_Success,\r\n    ReceiptGoButtonMaster,\r\n    ReceiptGoButtonMaster_Success,\r\n    ReceiptTypeAPI,\r\n    saveReceiptMaster,\r\n    saveReceiptMaster_Success\r\n} from \"../../../store/Accounting/Receipt/action\";\r\nimport { postSelect_Field_for_dropdown } from \"../../../store/Administrator/PartyMasterBulkUpdateRedux/actions\";\r\nimport { customAlert } from \"../../../CustomAlert/ConfirmDialog\";\r\nimport { CInput, C_DatePicker, C_Select } from \"../../../CustomValidateForm/index\";\r\nimport { decimalRegx } from \"../../../CustomValidateForm/RegexPattern\";\r\nimport * as _cfunc from \"../../../components/Common/CommonFunction\";\r\nimport PartyDropdown_Common from \"../../../components/Common/PartyDropdown\";\r\n\r\nconst Receipts = (props) => {\r\n\r\n    const history = useHistory()\r\n    const dispatch = useDispatch();\r\n    const loginSystemSetting = _cfunc.loginSystemSetting()\r\n\r\n    const fileds = {\r\n        ReceiptDate: currentDate_ymd,\r\n        OpeningBalanceAmt: \"\",\r\n        Customer: \"\",\r\n        ReceiptModeName: \"\",\r\n        AmountPaid: 0,\r\n        BankName: \"\",\r\n        DocumentNo: \"\",\r\n        DepositorBankName: \"\",\r\n        Description: \"\",\r\n        ChequeDate: currentDate_ymd,\r\n    }\r\n    const [state, setState] = useState(() => initialFiledFunc(fileds))\r\n    const [modalCss, setModalCss] = useState(false);\r\n    const [ID, setID] = useState(\"\");\r\n    const [pageMode] = useState(mode.defaultsave);\r\n\r\n    const [userPageAccessState, setUserAccState] = useState(123);\r\n    const [IsSystemSetting, setIsSystemSetting] = useState(false);\r\n\r\n    //Access redux store Data /  'save_ModuleSuccess' action data\r\n    const { postMsg,\r\n        retailerDropLoading,\r\n        ReceiptGoButton,\r\n        OpeningBalance,\r\n        pageField,\r\n        RetailerList,\r\n        BankList,\r\n        ReceiptModeList,\r\n        ReceiptType,\r\n        saveBtnloading,\r\n        userAccess } = useSelector((state) => ({\r\n            retailerDropLoading: state.CommonAPI_Reducer.retailerDropLoading,\r\n            saveBtnloading: state.ReceiptReducer.saveBtnloading,\r\n            postMsg: state.ReceiptReducer.postMsg,\r\n            ReceiptGoButton: state.ReceiptReducer.ReceiptGoButton,\r\n            OpeningBalance: state.ReceiptReducer.OpeningBalance,\r\n            RetailerList: state.CommonAPI_Reducer.RetailerList,\r\n            ReceiptModeList: state.PartyMasterBulkUpdateReducer.SelectField,\r\n            ReceiptType: state.ReceiptReducer.ReceiptType,\r\n            BankList: state.ReceiptReducer.bankList,\r\n            userAccess: state.Login.RoleAccessUpdateData,\r\n            pageField: state.CommonPageFieldReducer.pageField\r\n        }));\r\n\r\n    const values = { ...state.values }\r\n    const { isError } = state;\r\n    const { fieldLabel } = state;\r\n\r\n    const location = { ...history.location }\r\n    const page_Mode = location.pageMode\r\n    const hasShowloction = location.hasOwnProperty(mode.editValue)\r\n    const hasShowModal = props.hasOwnProperty(mode.editValue)\r\n\r\n    const { Data = [] } = ReceiptGoButton\r\n    const { OpeningBalanceAmount = '' } = OpeningBalance\r\n\r\n    useEffect(() => {\r\n        const page_Id = pageId.RECEIPTS\r\n        dispatch(commonPageFieldSuccess(null));\r\n        dispatch(commonPageField(page_Id))\r\n    }, []);\r\n\r\n    // Customer dropdown Options\r\n    useEffect(() => {\r\n        if (!(_cfunc.loginSelectedPartyID() === 0)) {\r\n            const jsonBody = JSON.stringify({\r\n                Type: 4,\r\n                PartyID: _cfunc.loginSelectedPartyID(),\r\n                CompanyID: loginCompanyID()\r\n            });\r\n            dispatch(Retailer_List(jsonBody));\r\n        }\r\n    }, []);\r\n\r\n    // Receipt Mode dropdown Values\r\n    useEffect(() => {\r\n        const jsonBody = JSON.stringify({\r\n            Company: loginCompanyID(),\r\n            TypeID: 4\r\n        });\r\n        dispatch(postSelect_Field_for_dropdown(jsonBody));\r\n    }, []);\r\n\r\n    // Receipt Type API Values **** only Use Post Json Body\r\n    useEffect(() => {\r\n        const jsonBody = JSON.stringify({\r\n            Company: loginCompanyID(),\r\n            TypeID: 3\r\n        });\r\n        dispatch(ReceiptTypeAPI(jsonBody));\r\n    }, []);\r\n\r\n    // pageField useEffect\r\n    useEffect(() => {\r\n\r\n        if (pageField) {\r\n            const fieldArr = pageField.PageFieldMaster\r\n            comAddPageFieldFunc({ state, setState, fieldArr })\r\n        }\r\n    }, [pageField])\r\n\r\n    // userAccess useEffect\r\n    useEffect(() => {\r\n        let userAcc = null;\r\n        let locationPath = location.pathname;\r\n\r\n        if (hasShowModal) {\r\n            locationPath = props.masterPath;\r\n        };\r\n\r\n        userAcc = userAccess.find((inx) => {\r\n            return (`/${inx.ActualPagePath}` === locationPath)\r\n        })\r\n\r\n        if (userAcc) {\r\n            setUserAccState(userAcc)\r\n            breadcrumbReturnFunc({ dispatch, userAcc });\r\n        };\r\n    }, [userAccess])\r\n\r\n    useEffect(() => {\r\n\r\n        if (loginSystemSetting.IsAmountadjustedinInvoice === \"0\") {\r\n            setIsSystemSetting(true)\r\n        }\r\n    }, []);\r\n\r\n    // loction useEffect\r\n    useEffect(() => {\r\n\r\n        if ((hasShowloction || hasShowModal)) {\r\n\r\n            let hasEditVal = null\r\n            let insidePageMode = null\r\n            let Data = null\r\n            if (hasShowloction) {\r\n                insidePageMode = location.pageMode;\r\n                hasEditVal = location.editValue\r\n            }\r\n            else if (hasShowModal) {\r\n                hasEditVal = props[mode.editValue]\r\n                insidePageMode = props.pageMode;\r\n                setModalCss(true)\r\n            }\r\n\r\n            if (hasEditVal) {\r\n\r\n                const { id, CustomerID, Customer,\r\n                    Description, ReceiptMode, ReceiptModeName,\r\n                    Bank, BankName, AmountPaid, DocumentNo, } = hasEditVal\r\n                setID(id)\r\n                setState((i) => {\r\n                    i.values.Customer = { value: CustomerID, label: Customer }\r\n                    i.values.ReceiptModeName = ReceiptModeName === undefined ?\r\n                        { value: '', label: \"Select...\" }\r\n                        : { value: ReceiptMode, label: ReceiptModeName }\r\n                    i.values.BankName = { value: Bank, label: BankName }\r\n                    i.values.Description = Description\r\n                    i.values.DocumentNo = DocumentNo\r\n                    i.values.AmountPaid = AmountPaid.replace(/,/g, \"\");\r\n\r\n                    i.hasValid.Customer.valid = true;\r\n                    i.hasValid.AmountPaid.valid = true;\r\n                    i.hasValid.BankName.valid = true;\r\n                    i.hasValid.Description.valid = true;\r\n                    i.hasValid.ReceiptModeName.valid = true;\r\n                    return i\r\n                })\r\n                AmountPaidDistribution(AmountPaid);\r\n            }\r\n        }\r\n        else {\r\n            dispatch(ReceiptGoButtonMaster_Success({ Status: false }))\r\n            dispatch(GetOpeningBalance_Success(''))\r\n        }\r\n    }, [])\r\n\r\n    //This UseEffect 'SetEdit' data and 'autoFocus' while this Component load First Time.\r\n    useEffect(async () => {\r\n\r\n        if ((postMsg.Status === true) && (postMsg.StatusCode === 200)) {\r\n            dispatch(saveReceiptMaster_Success({ Status: false }))\r\n            dispatch(ReceiptGoButtonMaster_Success([]))\r\n            setState(() => resetFunction(fileds, state))// Clear form values \r\n\r\n            if (pageMode === \"other\") {\r\n                customAlert({\r\n                    Type: 1,\r\n                    Message: postMsg.Message,\r\n                })\r\n            }\r\n            else {\r\n                let isPermission = await customAlert({\r\n                    Type: 1,\r\n                    Status: true,\r\n                    Message: postMsg.Message,\r\n                })\r\n                if (isPermission) {\r\n                    history.push({ pathname: url.RECEIPTS_LIST })\r\n                }\r\n            }\r\n        }\r\n        else if (postMsg.Status === true) {\r\n            dispatch(saveReceiptMaster_Success({ Status: false }))\r\n            customAlert({\r\n                Type: 4,\r\n                Message: JSON.stringify(postMsg.Message),\r\n            })\r\n        }\r\n    }, [postMsg])\r\n\r\n    useEffect(() => _cfunc.tableInputArrowUpDounFunc(\"#table_Arrow\"), [Data]);\r\n\r\n    const customerOptions = RetailerList.map((index) => ({\r\n        value: index.id,\r\n        label: index.Name,\r\n    }));\r\n\r\n    const ReceiptModeOptions = ReceiptModeList.map((index) => ({\r\n        value: index.id,\r\n        label: index.Name,\r\n    }));\r\n\r\n    const bankList = BankList.map((index) => ({\r\n        value: index.Bank,\r\n        label: index.BankName,\r\n        IsSelfDepositoryBank: index.IsSelfDepositoryBank\r\n    }));\r\n\r\n    const DepositorBankOptions = bankList.filter((index) => {\r\n        return index.IsSelfDepositoryBank === true\r\n    })\r\n\r\n    const pagesListColumns = [\r\n        {\r\n            text: \"InvoiceDate\",\r\n            dataField: \"InvoiceDate\",\r\n\r\n        },\r\n        {\r\n            text: \"Bill No\",\r\n            dataField: \"FullInvoiceNumber\",\r\n        },\r\n        {\r\n            text: \"Bill Amount\",\r\n            dataField: \"GrandTotal\",\r\n            align: () => (\"right\")\r\n        },\r\n        {\r\n            text: \"Paid\",\r\n            dataField: \"PaidAmount\",\r\n            align: () => (\"right\")\r\n        },\r\n        {\r\n            text: \"Bal Amt\",\r\n            dataField: \"BalanceAmount\",\r\n            align: () => (\"right\")\r\n        },\r\n        {\r\n            text: \"Calculate\",\r\n            dataField: \"\",\r\n            formatter: (cellContent, row, key) => {\r\n\r\n                return (<span style={{ justifyContent: 'center', width: \"100px\" }}>\r\n                    <CInput\r\n                        key={`Quantity-${row.Invoice}`}\r\n                        id={`Quantity-${row.Invoice}`}\r\n                        cpattern={decimalRegx}\r\n                        defaultValue={row.Calculate}\r\n                        autoComplete=\"off\"\r\n                        className=\" text-end\"\r\n                        onChange={(e) => CalculateOnchange(e, row, key)}\r\n                    />\r\n                </span>)\r\n            },\r\n            headerStyle: (colum, colIndex) => {\r\n                return { width: '140px', textAlign: 'center' };\r\n            },\r\n        },\r\n    ];\r\n\r\n    function CustomerOnChange(e) { // Customer dropdown function\r\n\r\n        setState((i) => {\r\n            i.values.AmountPaid = 0\r\n            i.hasValid.AmountPaid.valid = true;\r\n            return i\r\n        })\r\n        const jsonBody = JSON.stringify({\r\n            PartyID: _cfunc.loginSelectedPartyID(),\r\n            CustomerID: e.value,\r\n            InvoiceID: \"\"\r\n        });\r\n\r\n        const jsonBody1 = JSON.stringify({\r\n            PartyID: _cfunc.loginSelectedPartyID(),\r\n            CustomerID: e.value,\r\n            ReceiptDate: values.ReceiptDate\r\n        });\r\n\r\n        const body = { jsonBody, pageMode }\r\n        dispatch(ReceiptGoButtonMaster(body));\r\n        dispatch(GetOpeningBalance(jsonBody1));\r\n    }\r\n\r\n    function CalculateOnchange(event, row, key) {  // Calculate Input box onChange Function\r\n\r\n        let input = event.target.value\r\n\r\n        let v1 = Number(row.BalanceAmount);\r\n        let v2 = Number(input)\r\n        if (!(v1 >= v2)) {\r\n            event.target.value = v1;\r\n        }\r\n\r\n        row.Calculate = event.target.value\r\n\r\n        if ((page_Mode === \"\") || (page_Mode === undefined) || (page_Mode === mode.modeSTPList)) {\r\n            let calSum = 0\r\n            Data.forEach(element => {\r\n                calSum = calSum + Number(element.Calculate)\r\n            });\r\n\r\n            setState((i) => {\r\n                let a = { ...i }\r\n                a.values.AmountPaid = calSum\r\n                a.hasValid.AmountPaid.valid = true;\r\n                return a\r\n            })\r\n        }\r\n    };\r\n\r\n    function AmountPaid_onChange(event) {\r\n\r\n        if (IsSystemSetting) {\r\n            onChangeText({ event, state, setState })\r\n        }\r\n        else {\r\n            let input = event.target.value\r\n            let sum = 0\r\n            Data.forEach(element => {\r\n                sum = sum + Number(element.BalanceAmount)\r\n            });\r\n\r\n            let v1 = Number(sum);\r\n            let v2 = Number(input)\r\n            if (!(v1 >= v2)) {\r\n                event.target.value = v1;\r\n            }\r\n            onChangeText({ event, state, setState })\r\n            AmountPaidDistribution(event.target.value)\r\n        }\r\n    }\r\n\r\n    function AmountPaidDistribution(val1) {\r\n\r\n        const withoutCommaSeparator = val1.replace(/,/g, \"\");\r\n        let value = Number(withoutCommaSeparator)\r\n\r\n        let Amount = value\r\n\r\n        Data.map((index) => {\r\n\r\n            let amt = Number(index.BalanceAmount)\r\n            if ((Amount > amt) && !(amt === 0)) {\r\n\r\n                Amount = Amount - amt\r\n                index.Calculate = amt.toFixed(2)\r\n            }\r\n            else if ((Amount <= amt) && (Amount > 0)) {\r\n                index.Calculate = Amount.toFixed(2)\r\n                Amount = 0\r\n            }\r\n            else {\r\n                index.Calculate = 0;\r\n            }\r\n            try {\r\n                document.getElementById(`Quantity-${index.Invoice}`).value = index.Calculate\r\n            } catch (e) { }\r\n        })\r\n    }\r\n\r\n    function ReceiptModeOnchange(hasSelect, evn,) {\r\n        onChangeSelect({ hasSelect, evn, state, setState, })\r\n        setState((i) => {\r\n            i.values.BankName = '';\r\n            i.values.DepositorBankName = '';\r\n            i.values.DocumentNo = '';\r\n            i.hasValid.BankName.valid = true;\r\n            i.hasValid.DepositorBankName.valid = true;\r\n            i.hasValid.DocumentNo.valid = true;\r\n            return i\r\n        })\r\n        if ((hasSelect.label === \"Cheque\") || (hasSelect.label === \"RTGS\")) {\r\n            dispatch(BankListAPI())\r\n        }\r\n        else {\r\n            dispatch(BankListAPISuccess([]))\r\n        }\r\n    }\r\n\r\n    function ReceiptDate_Onchange(e, date) {\r\n        setState((i) => {\r\n            const a = { ...i }\r\n            a.values.ReceiptDate = date;\r\n            a.hasValid.ReceiptDate.valid = true\r\n            return a\r\n        })\r\n    }\r\n\r\n    function ChequeDate_Onchange(e, date) {\r\n        setState((i) => {\r\n            const a = { ...i }\r\n            a.values.ChequeDate = date;\r\n            a.hasValid.ChequeDate.valid = true\r\n            return a\r\n        })\r\n    }\r\n\r\n    const saveHandeller = async (event) => {\r\n\r\n        event.preventDefault();\r\n        const btnId = event.target.id;\r\n\r\n        let calSum = 0\r\n        Data.forEach(element => {\r\n            calSum = calSum + Number(element.Calculate)\r\n        });\r\n\r\n        if (!(IsSystemSetting)) {\r\n            let diffrence = Math.abs(calSum - values.AmountPaid);\r\n            if (Number(values.AmountPaid) < calSum) {\r\n                customAlert({\r\n                    Type: 4,\r\n                    Message: `Amount Paid value is Excess ${diffrence}`,\r\n                })\r\n                return btnIsDissablefunc({ btnId, state: false })\r\n\r\n            }\r\n            else if (Number(values.AmountPaid) > calSum) {\r\n                customAlert({\r\n                    Type: 4,\r\n                    Message: `Amount Paid value is Short ${diffrence}`,\r\n                })\r\n                return btnIsDissablefunc({ btnId, state: false })\r\n\r\n            }\r\n        }\r\n\r\n        if ((values.ReceiptModeName.value === undefined) || values.ReceiptModeName.value === \"\") {\r\n            customAlert({\r\n                Type: 4,\r\n                Message: \"Receipt Mode Is Required\",\r\n            })\r\n            return btnIsDissablefunc({ btnId, state: false })\r\n        }\r\n\r\n        if ((values.AmountPaid === '')\r\n            || (values.AmountPaid === \"NaN\")\r\n            || (values.AmountPaid === undefined)\r\n            || (values.AmountPaid === 0)\r\n            || (values.AmountPaid === \"0\")) {\r\n            customAlert({\r\n                Type: 4,\r\n                Message: `The Receipt amount must be greater than zero.`,\r\n            })\r\n            return btnIsDissablefunc({ btnId, state: false })\r\n        }\r\n\r\n        const invalidMsg1 = []\r\n        if (values.ReceiptModeName.label === \"Cheque\") {\r\n\r\n            if (values.BankName === \"\") {\r\n                invalidMsg1.push(`Bank Name Is Required`)\r\n            }\r\n            if (values.DepositorBankName === \"\") {\r\n                invalidMsg1.push(`Depositor Bank Name Is Required`)\r\n            };\r\n            if (values.DocumentNo === \"\") {\r\n                invalidMsg1.push(`Cheque Number Is Required`)\r\n            };\r\n\r\n            if (invalidMsg1.length > 0) {\r\n                customAlert({\r\n                    Type: 4,\r\n                    Message: JSON.stringify(invalidMsg1)\r\n                })\r\n                return btnIsDissablefunc({ btnId, state: false })\r\n            }\r\n        }\r\n\r\n        const ReceiptTypeID = ReceiptType.find((index) => {\r\n            return index.Name === \"Receipt\"\r\n        })\r\n\r\n        const ReceiptInvoices1 = Data.map((index) => ({\r\n            Invoice: index.Invoice,\r\n            GrandTotal: index.GrandTotal,\r\n            PaidAmount: index.Calculate,\r\n        }))\r\n\r\n        const FilterReceiptInvoices = ReceiptInvoices1.filter((index) => {\r\n            return index.PaidAmount > 0\r\n        })\r\n\r\n        const PaymentReceipt = [{ Payment: ID }]\r\n\r\n        try {\r\n            if (formValid(state, setState)) {\r\n                btnIsDissablefunc({ btnId, state: true })\r\n\r\n                var BulkData = [{\r\n                    \"ReceiptDate\": values.ReceiptDate,\r\n                    \"Description\": values.Description,\r\n                    \"AmountPaid\": values.AmountPaid,\r\n                    \"BalanceAmount\": \"\",\r\n                    \"OpeningBalanceAdjusted\": \"\",\r\n                    \"DocumentNo\": values.DocumentNo,\r\n                    \"AdvancedAmountAjusted\": \"\",\r\n                    \"Bank\": values.BankName.value,\r\n                    \"Customer\": values.Customer.value,\r\n                    \"ChequeDate\": values.ReceiptModeName.label === \"Cheque\" ? values.ChequeDate : \"\",\r\n                    \"DepositorBank\": values.DepositorBankName.value,\r\n                    \"Party\": _cfunc.loginSelectedPartyID(),\r\n                    \"ReceiptMode\": values.ReceiptModeName.value,\r\n                    \"ReceiptType\": ReceiptTypeID.id,\r\n                    \"CreatedBy\": loginUserID(),\r\n                    \"UpdatedBy\": loginUserID(),\r\n                    \"ReceiptInvoices\": !(IsSystemSetting) ? FilterReceiptInvoices : [],\r\n                    \"PaymentReceipt\": page_Mode === mode.modeSTPsave ? PaymentReceipt : []\r\n                }]\r\n\r\n                const jsonBody = JSON.stringify({\r\n                    BulkData: BulkData\r\n                })\r\n\r\n                if (pageMode === mode.edit) {\r\n                    // dispatch(updateCategoryID({ jsonBody, updateId: values.id, btnId }));\r\n                }\r\n                else {\r\n                    dispatch(saveReceiptMaster({ jsonBody, btnId }));\r\n                }\r\n            }\r\n        } catch (e) { btnIsDissablefunc({ btnId, state: false }) }\r\n    };\r\n\r\n    function partySelectButtonHandler() {\r\n        const jsonBody = JSON.stringify({\r\n            Type: 4,\r\n            PartyID: _cfunc.loginSelectedPartyID(),\r\n            CompanyID: loginCompanyID()\r\n        });\r\n        dispatch(Retailer_List(jsonBody));\r\n    }\r\n\r\n    function partyOnChngeButtonHandler() {\r\n        dispatch(Retailer_List_Success([]));\r\n        dispatch(GetOpeningBalance_Success([]));\r\n        setState((i) => {\r\n            let a = { ...i }\r\n            a.values.Customer = ''\r\n            a.hasValid.Customer.valid = true;\r\n            return a\r\n        })\r\n    }\r\n    // IsEditMode_Css is use of module Edit_mode (reduce page-content marging)\r\n    var IsEditMode_Css = ''\r\n    if ((modalCss) || (pageMode === mode.dropdownAdd)) { IsEditMode_Css = \"-5.5%\" };\r\n\r\n    if (!(userPageAccessState === '')) {\r\n        return (\r\n            <React.Fragment>\r\n                <MetaTags>{metaTagLabel(userPageAccessState)}</MetaTags>\r\n                <div className=\"page-content\" style={{ marginBottom: \"5cm\" }}>\r\n\r\n                    <PartyDropdown_Common pageMode={pageMode}\r\n                        goButtonHandler={partySelectButtonHandler}\r\n                        changeButtonHandler={partyOnChngeButtonHandler} />\r\n\r\n                    <form noValidate>\r\n                        <div className=\"px-2 c_card_filter header text-black mb-1\" >\r\n\r\n                            <Row>\r\n                                <Col sm=\"6\">\r\n                                    <FormGroup className=\"row mt-2\" >\r\n                                        <Label className=\"col-sm-1 p-2\"\r\n                                            style={{ width: \"115px\", marginRight: \"0.4cm\" }}>{fieldLabel.ReceiptDate}  </Label>\r\n                                        <Col sm=\"7\">\r\n                                            <C_DatePicker\r\n                                                name='ReceiptDate'\r\n                                                value={values.ReceiptDate}\r\n                                                // disabled={page_Mode === mode.modeSTPsave ? true : false}\r\n                                                onChange={ReceiptDate_Onchange}\r\n                                            />\r\n                                        </Col>\r\n\r\n                                    </FormGroup>\r\n                                </Col >\r\n                            </Row>\r\n\r\n                            <Row>\r\n                                <Col sm=\"6\">\r\n                                    <FormGroup className=\" row mt-1 \" >\r\n                                        <Label className=\"col-sm-1 p-2\"\r\n                                            style={{ width: \"115px\", marginRight: \"0.4cm\" }}>{fieldLabel.Customer} </Label>\r\n                                        <Col sm=\"7\">\r\n                                            <C_Select\r\n                                                name=\"Customer\"\r\n                                                isDisabled={(page_Mode === mode.modeSTPsave) || (page_Mode === mode.modeSTPList) ? true : false}\r\n                                                value={values.Customer}\r\n                                                isSearchable={true}\r\n                                                className=\"react-dropdown\"\r\n                                                styles={{\r\n                                                    menu: provided => ({ ...provided, zIndex: 2 })\r\n                                                }}\r\n                                                classNamePrefix=\"dropdown\"\r\n                                                isLoading={retailerDropLoading}\r\n                                                options={customerOptions}\r\n                                                onChange={(hasSelect, evn) => {\r\n                                                    onChangeSelect({ hasSelect, evn, state, setState });\r\n                                                    CustomerOnChange(hasSelect)\r\n                                                }\r\n                                                }\r\n                                            />\r\n                                            {isError.Customer.length > 0 && (\r\n                                                <span className=\"invalid-feedback\">{isError.Customer}</span>\r\n                                            )}\r\n                                        </Col>\r\n\r\n                                    </FormGroup>\r\n                                </Col >\r\n\r\n                                <Col sm=\"6\">\r\n                                    <FormGroup className=\" row mt-1 \" >\r\n                                        <Label className=\"col-sm-1 p-2\"\r\n                                            style={{ width: \"115px\", marginRight: \"0.4cm\" }}>  {fieldLabel.OpeningBalanceAmt}</Label>\r\n                                        <Col sm=\"7\">\r\n                                            <Input\r\n                                                name=\"OpeningBalanceAmt\"\r\n                                                id=\"OpeningBalanceAmt\"\r\n                                                disabled={true}\r\n                                                value={OpeningBalanceAmount}\r\n                                                type=\"text\"\r\n                                            />\r\n                                        </Col>\r\n                                    </FormGroup>\r\n                                </Col >\r\n                            </Row>\r\n\r\n                            <Row>\r\n                                <Col sm=\"6\">\r\n                                    <FormGroup className=\" row mt-1 \" >\r\n                                        <Label className=\"col-sm-1 p-2\"\r\n                                            style={{ width: \"115px\", marginRight: \"0.4cm\" }}>{fieldLabel.ReceiptModeName} </Label>\r\n                                        <Col sm=\"7\">\r\n                                            <Select\r\n                                                id=\"ReceiptModeName \"\r\n                                                name=\"ReceiptModeName\"\r\n                                                value={values.ReceiptModeName}\r\n                                                isDisabled={page_Mode === mode.modeSTPsave ? true : false}\r\n                                                isSearchable={true}\r\n                                                className=\"react-dropdown\"\r\n                                                styles={{\r\n                                                    menu: provided => ({ ...provided, zIndex: 2 })\r\n                                                }}\r\n                                                classNamePrefix=\"dropdown\"\r\n                                                options={ReceiptModeOptions}\r\n                                                onChange={(hasSelect, evn) => {\r\n                                                    ReceiptModeOnchange(hasSelect, evn)\r\n                                                    // onChangeSelect({ hasSelect, evn, state, setState, })\r\n                                                }}\r\n                                            />\r\n\r\n                                            {(isError.ReceiptModeName.length > 0) && (values.ReceiptModeName.value === undefined) ? (\r\n                                                <span className=\"text-danger f-8\"><small>{isError.ReceiptModeName}</small></span>\r\n                                            ) : <></>}\r\n                                        </Col>\r\n                                    </FormGroup>\r\n                                </Col >\r\n                            </Row>\r\n\r\n                            {(values.ReceiptModeName.label === \"Cheque\") || (values.ReceiptModeName.label === \"RTGS\") ?\r\n                                < Row >\r\n                                    <Col sm=\"6\">\r\n                                        <FormGroup className=\" row mt-1 \" >\r\n                                            <Label className=\"col-sm-1 p-2\"\r\n                                                style={{ width: \"115px\", marginRight: \"0.4cm\" }}>{fieldLabel.BankName} </Label>\r\n                                            <Col sm=\"7\">\r\n                                                <Select\r\n                                                    name=\"BankName\"\r\n                                                    value={values.BankName}\r\n                                                    isDisabled={page_Mode === mode.modeSTPsave ? true : false}\r\n                                                    isSearchable={true}\r\n                                                    styles={{\r\n                                                        menu: provided => ({ ...provided, zIndex: 2 })\r\n                                                    }}\r\n                                                    className=\"react-dropdown\"\r\n                                                    classNamePrefix=\"dropdown\"\r\n                                                    options={bankList}\r\n                                                    onChange={(hasSelect, evn) => {\r\n                                                        onChangeSelect({ hasSelect, evn, state, setState });\r\n                                                    }}\r\n                                                />\r\n                                                {isError.BankName.length > 0 && (\r\n                                                    <span className=\"invalid-feedback\">{isError.BankName}</span>\r\n                                                )}\r\n                                            </Col>\r\n\r\n                                        </FormGroup>\r\n                                    </Col >\r\n\r\n                                    <Col sm=\"6\">\r\n                                        <FormGroup className=\" row mt-1 \" >\r\n                                            <Label className=\"col-sm-1 p-2\"\r\n                                                style={{ width: \"115px\", marginRight: \"0.4cm\" }}>{fieldLabel.DepositorBankName} </Label>\r\n                                            <Col sm=\"7\">\r\n                                                <Select\r\n                                                    name=\"DepositorBankName\"\r\n                                                    value={values.DepositorBankName}\r\n                                                    styles={{\r\n                                                        menu: provided => ({ ...provided, zIndex: 2 })\r\n                                                    }}\r\n                                                    isSearchable={true}\r\n                                                    className=\"react-dropdown\"\r\n                                                    classNamePrefix=\"dropdown\"\r\n                                                    options={DepositorBankOptions}\r\n                                                    onChange={(hasSelect, evn) => {\r\n                                                        onChangeSelect({ hasSelect, evn, state, setState });\r\n                                                    }}\r\n                                                />\r\n                                                {isError.DepositorBankName.length > 0 && (\r\n                                                    <span className=\"invalid-feedback\">{isError.DepositorBankName}</span>\r\n                                                )}\r\n                                            </Col>\r\n\r\n                                        </FormGroup>\r\n                                    </Col >\r\n\r\n\r\n                                </Row>\r\n                                : null}\r\n\r\n                            {(values.ReceiptModeName.label === \"Cheque\") &&\r\n                                <Row>\r\n\r\n                                    <Col sm=\"6\">\r\n                                        <FormGroup className=\" row mt-1 \" >\r\n                                            <Label className=\"col-sm-1 p-2\"\r\n                                                style={{ width: \"115px\", marginRight: \"0.4cm\" }}>  {fieldLabel.DocumentNo}</Label>\r\n                                            <Col sm=\"7\">\r\n                                                <Input\r\n                                                    name=\"DocumentNo\"\r\n                                                    disabled={page_Mode === mode.modeSTPsave ? true : false}\r\n                                                    value={values.DocumentNo}\r\n                                                    type=\"text\"\r\n                                                    className={isError.DocumentNo.length > 0 ? \"is-invalid form-control\" : \"form-control\"}\r\n                                                    placeholder=\"Please Enter Cheque Number\"\r\n                                                    autoComplete='off'\r\n                                                    autoFocus={true}\r\n                                                    onChange={(event) => {\r\n                                                        onChangeText({ event, state, setState })\r\n                                                    }}\r\n                                                />\r\n                                                {isError.DocumentNo.length > 0 && (\r\n                                                    <span className=\"invalid-feedback\">{isError.DocumentNo}</span>\r\n                                                )}\r\n                                            </Col>\r\n                                        </FormGroup>\r\n                                    </Col >\r\n\r\n                                    <Col sm=\"6\">\r\n                                        <FormGroup className=\" row mt-1 \" >\r\n                                            <Label className=\"col-sm-1 p-2\"\r\n                                                style={{ width: \"115px\", marginRight: \"0.4cm\" }}>  {fieldLabel.ChequeDate}</Label>\r\n                                            <Col sm=\"7\">\r\n                                                <C_DatePicker\r\n                                                    name='ChequeDate'\r\n                                                    disabled={page_Mode === mode.modeSTPsave ? true : false}\r\n                                                    value={values.ChequeDate}\r\n                                                    onChange={ChequeDate_Onchange}\r\n                                                    options={{\r\n                                                        altInput: true,\r\n                                                        altFormat: \"d-m-Y\",\r\n                                                        dateFormat: \"Y-m-d\",\r\n                                                    }}\r\n                                                />\r\n                                            </Col>\r\n                                        </FormGroup>\r\n                                    </Col >\r\n                                </Row>\r\n                            }\r\n\r\n                            <Row>\r\n                                <Col sm=\"6\">\r\n                                    <FormGroup className=\" row mt-1 \" >\r\n                                        <Label className=\"col-sm-1 p-2\"\r\n                                            style={{ width: \"115px\", marginRight: \"0.4cm\" }}>  {fieldLabel.AmountPaid}</Label>\r\n                                        <Col sm=\"7\">\r\n                                            <CInput\r\n\r\n                                                name=\"AmountPaid\"\r\n                                                id=\"AmountPaid\"\r\n                                                cpattern={decimalRegx}\r\n                                                // defaultValue={values.AmountPaid}\r\n                                                value={values.AmountPaid}\r\n                                                disabled={page_Mode === mode.modeSTPsave ? true : false}\r\n                                                className={isError.AmountPaid.length > 0 ? \"is-invalid form-control\" : \"form-control\"}\r\n                                                placeholder=\"Please Enter Amount\"\r\n                                                autoComplete='off'\r\n                                                autoFocus={true}\r\n                                                onChange={AmountPaid_onChange}\r\n\r\n                                            />\r\n                                            {isError.AmountPaid.length > 0 && (\r\n                                                <span className=\"invalid-feedback\">{isError.AmountPaid}</span>\r\n                                            )}\r\n                                        </Col>\r\n                                    </FormGroup>\r\n                                </Col >\r\n\r\n                                <Col sm=\"6\">\r\n                                    <FormGroup className=\" row mt-1 \" >\r\n                                        <Label className=\"col-sm-1 p-2\"\r\n                                            style={{ width: \"115px\", marginRight: \"0.4cm\" }}>  {fieldLabel.Description}</Label>\r\n                                        <Col sm=\"7\">\r\n                                            <Input\r\n                                                id=\"Description\"\r\n                                                name=\"Description\"\r\n                                                value={values.Description}\r\n                                                type=\"text\"\r\n                                                className={isError.Description.length > 0 ? \"is-invalid form-control\" : \"form-control\"}\r\n                                                placeholder=\"Please Enter Description\"\r\n                                                autoComplete='off'\r\n                                                // autoFocus={true}\r\n                                                onChange={(event) => { onChangeText({ event, state, setState }) }}\r\n                                            />\r\n                                            {isError.Description.length > 0 && (\r\n                                                <span className=\"invalid-feedback\">{isError.Description}</span>\r\n                                            )}\r\n                                        </Col>\r\n                                    </FormGroup>\r\n                                </Col>\r\n                            </Row>\r\n                        </div>\r\n\r\n                        {!(IsSystemSetting) && <ToolkitProvider\r\n                            keyField=\"id\"\r\n                            data={Data}\r\n                            columns={pagesListColumns}\r\n                            search\r\n                        >\r\n                            {toolkitProps => (\r\n                                <React.Fragment>\r\n                                    <div className=\"table\">\r\n                                        <BootstrapTable\r\n                                            keyField={\"id\"}\r\n                                            id=\"table_Arrow\"\r\n                                            bordered={true}\r\n                                            striped={false}\r\n                                            noDataIndication={<div className=\"text-danger text-center \">Record Not available</div>}\r\n                                            classes={\"table align-middle table-nowrap table-hover\"}\r\n                                            headerWrapperClasses={\"thead-light\"}\r\n                                            {...toolkitProps.baseProps}\r\n                                        />\r\n                                        {mySearchProps(toolkitProps.searchProps)}\r\n                                    </div>\r\n                                </React.Fragment>\r\n                            )\r\n                            }\r\n                        </ToolkitProvider>\r\n                        }\r\n\r\n                        {!(IsSystemSetting) ?\r\n                            Data.length > 0 ?\r\n                                <FormGroup>\r\n                                    <Col sm={2} style={{ marginLeft: \"-40px\" }} className={\"row save1\"}>\r\n                                        <SaveButton pageMode={pageMode}\r\n                                            loading={saveBtnloading}\r\n                                            onClick={saveHandeller}\r\n                                            userAcc={userPageAccessState}\r\n                                        />\r\n                                    </Col>\r\n                                </FormGroup > : null\r\n                            : <FormGroup >\r\n                                <Col style={{ marginTop: \"8px\" }}>\r\n                                    <SaveButton pageMode={pageMode}\r\n                                        loading={saveBtnloading}\r\n                                        onClick={saveHandeller}\r\n                                        userAcc={userPageAccessState}\r\n                                    />\r\n                                </Col>\r\n                            </FormGroup >\r\n                        }\r\n\r\n                    </form>\r\n                </div>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n    else {\r\n        return (\r\n            <React.Fragment></React.Fragment>\r\n        )\r\n    }\r\n};\r\n\r\nexport default Receipts\r\n\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Accounting\\Receipt\\saga.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Accounting\\Receipt\\action.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Accounting\\Receipt\\reducer.js",["3806"],"import { currentDate_ymd } from \"../../../components/Common/CommonFunction\"\r\nimport {\r\n  DEPOSITOR_BANK_FILTER_SUCCESS,\r\n  RECEIPT_LIST_API_SUCCESS,\r\n  RECEIPT_GO_BUTTON_MASTER_SUCCESS,\r\n  SAVE_RECEIPT_MASTER_SUCCESS,\r\n  RECEIPT_TYPE_API_SUCCESS,\r\n  DELETE_RECEIPT_LIST_SUCCESS,\r\n  GET_OPENING_BALANCE_SUCCESS,\r\n  BANK_LIST_API_SUCCESS,\r\n  RECEIPT_LIST_FILTERS,\r\n  PAYMENT_ENTRY_LIST_FILTERS,\r\n  RECEIPT_LIST_API,\r\n  SAVE_RECEIPT_MASTER,\r\n  DELETE_RECEIPT_LIST,\r\n  RECEIPT_AND_PAYMENT_API_ERROR_ACTION,\r\n  RECEIPT_GO_BUTTON_MASTER,\r\n} from \"./actionType\"\r\n\r\nconst INIT_STATE = {\r\n  listBtnLoading: false,\r\n  saveBtnloading: false,\r\n  loading: false,\r\n  ReceiptGoButton: [],\r\n  ReceiptList: [],\r\n  postMsg: { Status: false },\r\n  ReceiptType: [],\r\n  deleteMsg: { Status: false },\r\n  OpeningBalance: '',\r\n  bankList: [],\r\n  receiptlistFilters: { fromdate: currentDate_ymd, todate: currentDate_ymd, Customer: { value: '', label: \"All\" } },\r\n  paymentEntrylistFilters: { fromdate: currentDate_ymd, todate: currentDate_ymd, Customer: { value: '', label: \"All\" } }\r\n}\r\n\r\nconst ReceiptReducer = (state = INIT_STATE, action) => {\r\n  switch (action.type) {\r\n\r\n    case RECEIPT_LIST_FILTERS:\r\n      return {\r\n        ...state,\r\n        receiptlistFilters: action.payload,\r\n      }\r\n\r\n    case PAYMENT_ENTRY_LIST_FILTERS:\r\n      return {\r\n        ...state,\r\n        paymentEntrylistFilters: action.payload,\r\n      }\r\n\r\n    case RECEIPT_GO_BUTTON_MASTER:\r\n      \r\n      return {\r\n        ...state,\r\n        listBtnLoading: action.config.btnId,\r\n      }\r\n      \r\n    case RECEIPT_GO_BUTTON_MASTER_SUCCESS:\r\n      return {\r\n        ...state,\r\n        ReceiptGoButton: action.payload,\r\n        listBtnLoading: false\r\n      }\r\n\r\n    case GET_OPENING_BALANCE_SUCCESS:\r\n      return {\r\n        ...state,\r\n        OpeningBalance: action.payload,\r\n      }\r\n\r\n    case SAVE_RECEIPT_MASTER:\r\n      return {\r\n        ...state,\r\n        saveBtnloading: true,\r\n      }\r\n\r\n    case SAVE_RECEIPT_MASTER_SUCCESS:\r\n      return {\r\n        ...state,\r\n        postMsg: action.payload,\r\n        saveBtnloading: false\r\n      }\r\n\r\n    case RECEIPT_LIST_API:\r\n      return {\r\n        ...state,\r\n        loading: true,\r\n      }\r\n\r\n    case RECEIPT_LIST_API_SUCCESS:\r\n      return {\r\n        ...state,\r\n        ReceiptList: action.payload,\r\n        loading: false,\r\n\r\n      }\r\n\r\n    case RECEIPT_TYPE_API_SUCCESS:\r\n      return {\r\n        ...state,\r\n        ReceiptType: action.payload,\r\n      }\r\n\r\n    case DELETE_RECEIPT_LIST:\r\n      return {\r\n        ...state,\r\n        listBtnLoading: action.config.btnId,\r\n      }\r\n\r\n    case DELETE_RECEIPT_LIST_SUCCESS:\r\n      return {\r\n        ...state,\r\n        deleteMsg: action.payload,\r\n        listBtnLoading: false\r\n      }\r\n\r\n    case BANK_LIST_API_SUCCESS:\r\n      return {\r\n        ...state,\r\n        bankList: action.payload,\r\n      }\r\n\r\n    case RECEIPT_AND_PAYMENT_API_ERROR_ACTION:\r\n      return {\r\n        ...state,\r\n        saveBtnloading: false,\r\n        listBtnLoading: false,\r\n        loading: false\r\n      }\r\n\r\n\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport default ReceiptReducer","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Accounting\\Receipt\\actionType.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Accounting\\Receipt\\ReceiptList.js",["3807","3808","3809","3810","3811","3812","3813","3814","3815","3816","3817","3818"],"import React, { useEffect, useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport {\r\n    BreadcrumbShowCountlabel,\r\n    commonPageFieldList,\r\n    commonPageFieldListSuccess\r\n} from \"../../../store/actions\";\r\nimport CommonPurchaseList from \"../../../components/Common/CommonPurchaseList\"\r\nimport { Col, FormGroup, Label } from \"reactstrap\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { currentDate_ymd, loginCompanyID, loginPartyID, loginUserAdminRole } from \"../../../components/Common/CommonFunction\";\r\nimport Receipts from \"./Receipts\";\r\nimport * as report from '../../../Reports/ReportIndex'\r\nimport * as pageId from \"../../../routes//allPageID\";\r\nimport * as url from \"../../../routes/route_url\";\r\nimport {\r\n    deleteReceiptList,\r\n    deleteReceiptList_Success,\r\n    ReceiptListAPI,\r\n    ReceiptListAPISuccess,\r\n    ReceiptTypeAPI,\r\n} from \"../../../store/Accounting/Receipt/action\";\r\nimport { initialFiledFunc } from \"../../../components/Common/validationFunction\";\r\nimport { Retailer_List, Retailer_List_Success } from \"../../../store/CommonAPI/SupplierRedux/actions\";\r\nimport { Go_Button, PageLoadingSpinner } from \"../../../components/Common/CommonButton\";\r\nimport * as mode from \"../../../routes/PageMode\"\r\nimport { getpdfReportdata } from \"../../../store/Utilites/PdfReport/actions\";\r\nimport { Receipt_Print } from \"../../../helpers/backend_helper\";\r\nimport { C_DatePicker, C_Select } from \"../../../CustomValidateForm\";\r\nimport { customAlert } from \"../../../CustomAlert/ConfirmDialog\";\r\nimport NewCommonPartyDropdown from \"../../../components/Common/NewCommonPartyDropdown\";\r\n\r\nconst ReceiptList = () => {\r\n\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n    const userAdminRole = loginUserAdminRole()\r\n\r\n    const fileds = {\r\n        FromDate: currentDate_ymd,\r\n        ToDate: currentDate_ymd,\r\n        Customer: { value: \"\", label: \"All\" }\r\n    }\r\n\r\n    const [state, setState] = useState(() => initialFiledFunc(fileds))\r\n    const hasPagePath = history.location.pathname\r\n\r\n    const [pageMode, setpageMode] = useState(mode.defaultList)\r\n    const [userAccState, setUserAccState] = useState('');\r\n\r\n    const reducers = useSelector(\r\n        (state) => ({\r\n            listBtnLoading: (state.ReceiptReducer.listBtnLoading || state.PdfReportReducers.ReportBtnLoading),\r\n            retailerDropLoading: state.CommonAPI_Reducer.retailerDropLoading,\r\n            loading: state.ReceiptReducer.loading,\r\n            tableList: state.ReceiptReducer.ReceiptList,\r\n            deleteMsg: state.ReceiptReducer.deleteMsg,\r\n            RetailerList: state.CommonAPI_Reducer.RetailerList,\r\n            ReceiptType: state.ReceiptReducer.ReceiptType,\r\n            userAccess: state.Login.RoleAccessUpdateData,\r\n            pageField: state.CommonPageFieldReducer.pageFieldList,\r\n            commonPartyDropSelect: state.CommonPartyDropdownReducer.commonPartyDropSelect\r\n        })\r\n    );\r\n\r\n    const { userAccess, pageField, RetailerList, ReceiptType, retailerDropLoading, commonPartyDropSelect } = reducers;\r\n    const values = { ...state.values }\r\n\r\n    const action = {\r\n        deleteId: deleteReceiptList,\r\n        deleteSucc: deleteReceiptList_Success\r\n    }\r\n\r\n    // Featch Modules List data  First Rendering\r\n    useEffect(() => {\r\n        const page_Id = pageId.RECEIPTS_LIST\r\n        setpageMode(hasPagePath)\r\n        dispatch(commonPageFieldListSuccess(null))\r\n        dispatch(commonPageFieldList(page_Id))\r\n        // dispatch(BreadcrumbShowCountlabel(`${\"Receipt Count\"} :0`));\r\n        return () => {\r\n            dispatch(commonPageFieldListSuccess(null))\r\n        }\r\n    }, []);\r\n\r\n    // Common Party Dropdown useEffect\r\n    useEffect(() => {\r\n\r\n        if (commonPartyDropSelect.value > 0) {\r\n            goButtonHandler()\r\n            const jsonBody = JSON.stringify({\r\n                Type: 4,\r\n                PartyID: commonPartyDropSelect.value,\r\n                CompanyID: loginCompanyID()\r\n            });\r\n            dispatch(Retailer_List(jsonBody));\r\n        }\r\n        setState((i) => {\r\n            let a = { ...i }\r\n            a.values.Customer = { value: \"\", label: \"All\" }\r\n            return a\r\n        })\r\n        return () => {\r\n            dispatch(ReceiptListAPISuccess([]));\r\n            dispatch(Retailer_List_Success([]));\r\n        }\r\n\r\n    }, [commonPartyDropSelect]);\r\n\r\n    useEffect(() => {\r\n        const page_Id = pageId.RECEIPTS_LIST\r\n        let userAcc = userAccess.find((inx) => {\r\n            return (inx.id === page_Id)\r\n        })\r\n        if (!(userAcc === undefined)) {\r\n            setUserAccState(userAcc)\r\n        }\r\n    }, [userAccess])\r\n\r\n    useEffect(() => { // Receipt Type API Values **** only Post Json Body\r\n        const jsonBody = JSON.stringify({\r\n            Company: loginCompanyID(),\r\n            TypeID: 3\r\n        });\r\n        dispatch(ReceiptTypeAPI(jsonBody));\r\n\r\n    }, []);\r\n\r\n    useEffect(() => { // When ReceiptType api call give me Receipt id then Go Button true\r\n        if (ReceiptType.length > 0 && !(userAdminRole)) {\r\n            goButtonHandler(true)\r\n        }\r\n    }, [ReceiptType]);\r\n\r\n    const customerOptions = RetailerList.map((index) => ({\r\n        value: index.id,\r\n        label: index.Name,\r\n    }));\r\n\r\n    customerOptions.unshift({\r\n        value: \"\",\r\n        label: \" All\"\r\n    });\r\n\r\n    const goButtonHandler = () => {\r\n        try {\r\n            if (commonPartyDropSelect.value === 0) {\r\n                customAlert({ Type: 3, Message: \"Please Select Party\" });\r\n                return;\r\n            };\r\n            const ReceiptTypeID = ReceiptType.find((index) => {\r\n                return index.Name === \"Receipt\"\r\n            })\r\n\r\n            const jsonBody = JSON.stringify({\r\n                FromDate: values.FromDate,\r\n                ToDate: values.ToDate,\r\n                CustomerID: values.Customer.value,\r\n                PartyID: commonPartyDropSelect.value,\r\n                ReceiptType: ReceiptTypeID.id,\r\n            });\r\n\r\n            dispatch(ReceiptListAPI(jsonBody, hasPagePath));\r\n        } catch (error) { }\r\n        return\r\n    };\r\n\r\n    function downBtnFunc(config) {\r\n        config[\"ReportType\"] = report.Receipt;\r\n        dispatch(getpdfReportdata(Receipt_Print, config))\r\n    }\r\n\r\n    function fromdateOnchange(e, date) {\r\n        setState((i) => {\r\n            const a = { ...i }\r\n            a.values.FromDate = date;\r\n            a.hasValid.FromDate.valid = true\r\n            return a\r\n        })\r\n    }\r\n\r\n    function todateOnchange(e, date) {\r\n        setState((i) => {\r\n            const a = { ...i }\r\n            a.values.ToDate = date;\r\n            a.hasValid.ToDate.valid = true\r\n            return a\r\n        })\r\n    }\r\n\r\n    useEffect(() => {\r\n        const jsonBody = JSON.stringify({\r\n            Type: 4,\r\n            PartyID: commonPartyDropSelect.value,\r\n            CompanyID: loginCompanyID()\r\n        });\r\n        dispatch(Retailer_List(jsonBody));\r\n    }, []);\r\n\r\n    function CustomerOnChange(e) {\r\n\r\n        setState((i) => {\r\n            const a = { ...i }\r\n            a.values.Customer = e;\r\n            a.hasValid.Customer.valid = true\r\n            return a\r\n        })\r\n    }\r\n\r\n    const HeaderContent = () => {\r\n        return (\r\n            <div className=\"px-2   c_card_filter text-black\" >\r\n                <div className=\"row\" >\r\n                    <Col sm=\"3\" className=\"\">\r\n                        <FormGroup className=\"mb- row mt-3 \" >\r\n                            <Label className=\"col-sm-5 p-2\"\r\n                                style={{ width: \"83px\" }}>FromDate</Label>\r\n                            <Col sm=\"7\">\r\n                                <C_DatePicker\r\n                                    name='FromDate'\r\n                                    value={values.FromDate}\r\n                                    onChange={fromdateOnchange}\r\n                                />\r\n                            </Col>\r\n                        </FormGroup>\r\n                    </Col>\r\n\r\n                    <Col sm=\"3\" className=\"\">\r\n                        <FormGroup className=\"mb- row mt-3 \" >\r\n                            <Label className=\"col-sm-5 p-2\"\r\n                                style={{ width: \"65px\" }}>ToDate</Label>\r\n                            <Col sm=\"7\">\r\n                                <C_DatePicker\r\n                                    name=\"ToDate\"\r\n                                    value={values.ToDate}\r\n                                    onChange={todateOnchange}\r\n                                />\r\n                            </Col>\r\n                        </FormGroup>\r\n                    </Col>\r\n\r\n                    <Col sm=\"5\">\r\n                        <FormGroup className=\"mb-2 row mt-3 \" >\r\n                            <Label className=\"col-md-4 p-2\"\r\n                                style={{ width: \"115px\" }}>Customer</Label>\r\n                            <Col sm=\"5\">\r\n                                <C_Select\r\n                                    name=\"Customer\"\r\n                                    classNamePrefix=\"select2-Customer\"\r\n                                    value={values.Customer}\r\n                                    isLoading={retailerDropLoading}\r\n                                    options={customerOptions}\r\n                                    onChange={CustomerOnChange}\r\n                                    styles={{\r\n                                        menu: provided => ({ ...provided, zIndex: 2 })\r\n                                    }}\r\n                                />\r\n                            </Col>\r\n                        </FormGroup>\r\n                    </Col >\r\n\r\n                    <Col sm=\"1\" className=\"mt-3 \">\r\n                        <Go_Button loading={reducers.loading} onClick={goButtonHandler} />\r\n                    </Col>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <PageLoadingSpinner isLoading={(reducers.loading || !pageField)} />\r\n            <div className=\"page-content\">\r\n                <NewCommonPartyDropdown />\r\n                {\r\n                    (pageField) ?\r\n                        <CommonPurchaseList\r\n                            action={action}\r\n                            reducers={reducers}\r\n                            showBreadcrumb={false}\r\n                            MasterModal={Receipts}\r\n                            masterPath={url.RECEIPTS}\r\n                            newBtnPath={url.RECEIPTS}\r\n                            pageMode={pageMode}\r\n                            HeaderContent={HeaderContent}\r\n                            goButnFunc={goButtonHandler}\r\n                            downBtnFunc={downBtnFunc}\r\n                            ButtonMsgLable={\"Receipt\"}\r\n                            deleteName={\"FullReceiptNumber\"}\r\n                            totalAmountShow={true}\r\n                        />\r\n                        : null\r\n                }\r\n            </div>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default ReceiptList;","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Accounting\\Payment\\PaymentEntry.js",["3819","3820","3821","3822","3823","3824","3825","3826","3827","3828","3829","3830"],"import React, { useEffect, useState, } from \"react\";\r\nimport {\r\n    Col,\r\n    FormGroup,\r\n    Input,\r\n    Label,\r\n    Row,\r\n} from \"reactstrap\";\r\nimport { MetaTags } from \"react-meta-tags\";\r\nimport { commonPageField, commonPageFieldListSuccess, commonPageFieldSuccess } from \"../../../store/actions\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport Select from \"react-select\";\r\nimport {\r\n    comAddPageFieldFunc,\r\n    formValid,\r\n    initialFiledFunc,\r\n    onChangeSelect,\r\n    onChangeText,\r\n    resetFunction,\r\n} from \"../../../components/Common/validationFunction\";\r\nimport { SaveButton } from \"../../../components/Common/CommonButton\";\r\nimport { getSupplier, getSupplierSuccess } from \"../../../store/CommonAPI/SupplierRedux/actions\";\r\nimport { BankListAPI, BankListAPISuccess, GetOpeningBalance, GetOpeningBalance_Success, ReceiptGoButtonMaster_Success, ReceiptTypeAPI, saveReceiptMaster, saveReceiptMaster_Success } from \"../../../store/Accounting/Receipt/action\";\r\nimport { postSelect_Field_for_dropdown } from \"../../../store/Administrator/PartyMasterBulkUpdateRedux/actions\";\r\nimport { C_DatePicker, C_Select } from \"../../../CustomValidateForm\";\r\nimport * as _cfunc from \"../../../components/Common/CommonFunction\";\r\nimport { url, mode, pageId } from \"../../../routes/index\"\r\nimport { customAlert } from \"../../../CustomAlert/ConfirmDialog\";\r\nimport PartyDropdown_Common from \"../../../components/Common/PartyDropdown\";\r\n\r\nconst PaymentEntry = (props) => {\r\n\r\n    const history = useHistory()\r\n    const dispatch = useDispatch();\r\n    const currentDate_ymd = _cfunc.date_ymd_func()\r\n\r\n    const [modalCss] = useState(false);\r\n    const [pageMode] = useState(mode.defaultsave);\r\n    const [userPageAccessState, setUserAccState] = useState(123);\r\n    const [editCreatedBy] = useState(\"\");\r\n\r\n    const fileds = {\r\n        ReceiptDate: currentDate_ymd,\r\n        OpeningBalanceAmt: \"\",\r\n        Customer: \"\",\r\n        ReceiptModeName: \"\",\r\n        AmountPaid: \"\",\r\n        Description: \"\",\r\n        BankName: \"\",\r\n        DocumentNo: \"\",\r\n        ChequeDate: currentDate_ymd,\r\n    }\r\n\r\n    const [state, setState] = useState(() => initialFiledFunc(fileds))\r\n\r\n    //Access redux store Data /  'save_ModuleSuccess' action data\r\n    const { postMsg,\r\n        pageField,\r\n        SupplierList,\r\n        OpeningBalance,\r\n        BankList,\r\n        ReceiptModeList,\r\n        ReceiptType,\r\n        saveBtnloading,\r\n        SupplierDropdownLoading,\r\n        userAccess } = useSelector((state) => ({\r\n            saveBtnloading: state.ReceiptReducer.saveBtnloading,\r\n            SupplierDropdownLoading: state.CommonAPI_Reducer.vendorSupplierCustomerLoading,\r\n            postMsg: state.ReceiptReducer.postMsg,\r\n            SupplierList: state.CommonAPI_Reducer.supplier,\r\n            OpeningBalance: state.ReceiptReducer.OpeningBalance,\r\n            ReceiptModeList: state.PartyMasterBulkUpdateReducer.SelectField,\r\n            BankList: state.ReceiptReducer.bankList,\r\n            ReceiptType: state.ReceiptReducer.ReceiptType,\r\n            userAccess: state.Login.RoleAccessUpdateData,\r\n            pageField: state.CommonPageFieldReducer.pageField\r\n        }));\r\n\r\n    const { OpeningBalanceAmount = '' } = OpeningBalance\r\n\r\n    useEffect(() => {\r\n        const page_Id = pageId.PAYMENT_ENTRY\r\n        dispatch(commonPageFieldSuccess(null));\r\n        dispatch(commonPageField(page_Id));\r\n        if (!(_cfunc.loginSelectedPartyID() === 0)) {\r\n            dispatch(getSupplier({ PartyID: _cfunc.loginSelectedPartyID() }));\r\n        }\r\n        return () => {\r\n            dispatch(commonPageFieldListSuccess(null));\r\n            dispatch(getSupplierSuccess([]));\r\n            dispatch(GetOpeningBalance_Success([]));\r\n        }\r\n    }, []);\r\n\r\n    useEffect(() => { // ReceiptMode Dropdown useEffect\r\n        const jsonBody = JSON.stringify({\r\n            Company: _cfunc.loginCompanyID(),\r\n            TypeID: 4\r\n        });\r\n        dispatch(postSelect_Field_for_dropdown(jsonBody));\r\n    }, []);\r\n\r\n    // Receipt Type API Values **** only Post Json Body\r\n    useEffect(() => {\r\n        const jsonBody = JSON.stringify({\r\n            Company: _cfunc.loginCompanyID(),\r\n            TypeID: 3\r\n        });\r\n        dispatch(ReceiptTypeAPI(jsonBody));\r\n    }, []);\r\n\r\n    const values = { ...state.values }\r\n    const { isError } = state;\r\n    const { fieldLabel } = state;\r\n\r\n    const location = { ...history.location }\r\n    const hasShowModal = props.hasOwnProperty(mode.editValue)\r\n\r\n    useEffect(() => {\r\n        if (pageField) {\r\n            const fieldArr = pageField.PageFieldMaster\r\n            comAddPageFieldFunc({ state, setState, fieldArr })\r\n        }\r\n    }, [pageField])\r\n\r\n    // userAccess useEffect\r\n    useEffect(() => {\r\n        let userAcc = null;\r\n        let locationPath = location.pathname;\r\n\r\n        if (hasShowModal) {\r\n            locationPath = props.masterPath;\r\n        };\r\n\r\n        userAcc = userAccess.find((inx) => {\r\n            return (`/${inx.ActualPagePath}` === locationPath)\r\n        })\r\n\r\n        if (userAcc) {\r\n            setUserAccState(userAcc)\r\n            _cfunc.breadcrumbReturnFunc({ dispatch, userAcc });\r\n        };\r\n    }, [userAccess])\r\n\r\n    //This UseEffect 'SetEdit' data and 'autoFocus' while this Component load First Time.\r\n    useEffect(async () => {\r\n\r\n        if ((postMsg.Status === true) && (postMsg.StatusCode === 200)) {\r\n            dispatch(saveReceiptMaster_Success({ Status: false }))\r\n            dispatch(ReceiptGoButtonMaster_Success([]))\r\n            setState(() => resetFunction(fileds, state))// Clear form values \r\n            if (pageMode === \"other\") {\r\n                customAlert({\r\n                    Type: 1,\r\n                    Message: postMsg.Message,\r\n                })\r\n            }\r\n            else {\r\n                let isPermission = await customAlert({\r\n                    Type: 1,\r\n                    Status: true,\r\n                    Message: postMsg.Message,\r\n                })\r\n                if (isPermission) {\r\n                    history.push({ pathname: url.PAYMENT_ENTRY_LIST })\r\n                }\r\n            }\r\n        }\r\n        else if (postMsg.Status === true) {\r\n            dispatch(saveReceiptMaster_Success({ Status: false }))\r\n            customAlert({\r\n                Type: 4,\r\n                Message: JSON.stringify(postMsg.Message),\r\n            })\r\n        }\r\n    }, [postMsg])\r\n\r\n    const ReceiptTypeID = ReceiptType.find((index) => {\r\n        return index.Name === \"Payment Entry\"\r\n    })\r\n\r\n    const SupplierOptions = SupplierList.map((index) => ({\r\n        value: index.id,\r\n        label: index.Name,\r\n    }));\r\n\r\n    const ReceiptModeOptions = ReceiptModeList.map((index) => ({\r\n        value: index.id,\r\n        label: index.Name,\r\n    }));\r\n\r\n    const bankList = BankList.map((index) => ({\r\n        value: index.Bank,\r\n        label: index.BankName,\r\n        IsSelfDepositoryBank: index.IsSelfDepositoryBank\r\n    }));\r\n\r\n    const BankListOptions = bankList.filter((index) => {\r\n        return index.IsSelfDepositoryBank === false\r\n    })\r\n\r\n    function ReceiptDate_Onchange(e, date) {\r\n        setState((i) => {\r\n            const a = { ...i }\r\n            a.values.ReceiptDate = date;\r\n            a.hasValid.ReceiptDate.valid = true\r\n            return a\r\n        })\r\n    }\r\n\r\n    function ChequeDate_Onchange(e, date) {\r\n        setState((i) => {\r\n            const a = { ...i }\r\n            a.values.ChequeDate = date;\r\n            a.hasValid.ChequeDate.valid = true\r\n            return a\r\n        })\r\n    }\r\n\r\n    function CustomerOnChange(e) {\r\n        setState((i) => {\r\n            i.values.AmountPaid = ''\r\n            i.hasValid.AmountPaid.valid = false;\r\n            return i\r\n        })\r\n        const jsonBody = JSON.stringify({\r\n            PartyID: e.value,\r\n            CustomerID: _cfunc.loginSelectedPartyID(),\r\n            ReceiptDate: values.ReceiptDate\r\n        });\r\n\r\n        dispatch(GetOpeningBalance(jsonBody));\r\n    }\r\n\r\n    function ReceiptModeOnchange(hasSelect, evn) {\r\n\r\n        onChangeSelect({ hasSelect, evn, state, setState, })\r\n        if ((hasSelect.label === \"Cheque\") || (hasSelect.label === \"RTGS\")) {\r\n            dispatch(BankListAPI())\r\n        }\r\n        else {\r\n            dispatch(BankListAPISuccess([]))\r\n        }\r\n    }\r\n\r\n    const saveHandeller = async (event) => {\r\n        event.preventDefault();\r\n        const btnId = event.target.id\r\n        if (values.ReceiptModeName.label === \"Cheque\") {\r\n            const invalidMsg1 = []\r\n\r\n            if (values.BankName === \"\") {\r\n                invalidMsg1.push(`BankName Is Required`)\r\n            }\r\n            if (values.DocumentNo === \"\") {\r\n                invalidMsg1.push(`DocumentNo Is Required`)\r\n            };\r\n\r\n            if ((values.BankName === \"\")\r\n                || (values.DepositorBankName === \"\")\r\n                || (values.DocumentNo === \"\")\r\n            ) {\r\n                customAlert({\r\n                    Type: 4,\r\n                    Status: true,\r\n                    Message: JSON.stringify(invalidMsg1),\r\n                })\r\n                return;\r\n            }\r\n        }\r\n\r\n        try {\r\n            if (formValid(state, setState)) {\r\n                _cfunc.btnIsDissablefunc({ btnId, state: true })\r\n                if (Number(values.AmountPaid) === 0) {\r\n                    customAlert({\r\n                        Type: 4,\r\n                        Message: `The payment amount must be greater than zero.`,\r\n                    })\r\n                    return _cfunc.btnIsDissablefunc({ btnId, state: false })\r\n                }\r\n                var BulkData = [{\r\n                    \"ReceiptDate\": values.ReceiptDate,\r\n                    \"Description\": values.Description,\r\n                    \"AmountPaid\": values.AmountPaid,\r\n                    \"BalanceAmount\": \"\",\r\n                    \"OpeningBalanceAdjusted\": \"\",\r\n                    \"DocumentNo\": values.DocumentNo,\r\n                    \"AdvancedAmountAjusted\": \"\",\r\n                    \"Bank\": values.BankName.value,\r\n                    \"Customer\": _cfunc.loginSelectedPartyID(),\r\n                    \"ChequeDate\": values.ReceiptModeName.label === \"Cheque\" ? values.ChequeDate : \"\",\r\n                    \"Party\": values.Customer.value,\r\n                    \"ReceiptMode\": values.ReceiptModeName.value,\r\n                    \"ReceiptType\": ReceiptTypeID.id,\r\n                    \"CreatedBy\": _cfunc.loginUserID(),\r\n                    \"UpdatedBy\": _cfunc.loginUserID(),\r\n                    \"ReceiptInvoices\": [],\r\n                    \"PaymentReceipt\": []\r\n                }]\r\n\r\n                const jsonBody = JSON.stringify({\r\n                    BulkData: BulkData\r\n                })\r\n\r\n                dispatch(saveReceiptMaster({ jsonBody, btnId }));\r\n\r\n            }\r\n        } catch (e) { _cfunc.btnIsDissablefunc({ btnId, state: false }) }\r\n    };\r\n\r\n    function partySelectButtonHandler() {\r\n        dispatch(getSupplier({ PartyID: _cfunc.loginSelectedPartyID() }));\r\n    }\r\n\r\n    function partySelectOnChangeHandler() {\r\n        dispatch(getSupplierSuccess([]));\r\n        dispatch(GetOpeningBalance_Success([]));\r\n        setState((i) => {\r\n            let a = { ...i }\r\n            a.values.Customer = ''\r\n            a.hasValid.Customer.valid = true;\r\n            return a\r\n        })\r\n    }\r\n    \r\n    // IsEditMode_Css is use of module Edit_mode (reduce page-content marging)\r\n    var IsEditMode_Css = ''\r\n    if ((modalCss) || (pageMode === mode.dropdownAdd)) { IsEditMode_Css = \"-5.5%\" };\r\n\r\n    if (!(userPageAccessState === '')) {\r\n        return (\r\n            <React.Fragment>\r\n                <MetaTags>{_cfunc.metaTagLabel(userPageAccessState)}</MetaTags>\r\n\r\n                <div className=\"page-content\" style={{ marginBottom: \"5cm\" }}>\r\n                    <PartyDropdown_Common pageMode={pageMode}\r\n                        goButtonHandler={partySelectButtonHandler}\r\n                        changeButtonHandler={partySelectOnChangeHandler}\r\n                    />\r\n                    <form noValidate>\r\n                        <div className=\"px-2 c_card_filter header text-black mb-2\" >\r\n\r\n                            <Row>\r\n                                <Col sm=\"6\">\r\n                                    <FormGroup className=\"row mt-2\" >\r\n                                        <Label className=\"col-sm-1 p-2\"\r\n                                            style={{ width: \"115px\", marginRight: \"0.4cm\" }}>{fieldLabel.ReceiptDate}  </Label>\r\n                                        <Col sm=\"7\">\r\n                                            <C_DatePicker\r\n                                                name='ReceiptDate'\r\n                                                value={values.ReceiptDate}\r\n                                                onChange={ReceiptDate_Onchange}\r\n                                            />\r\n                                        </Col>\r\n                                    </FormGroup>\r\n                                </Col >\r\n                            </Row>\r\n\r\n                            <Row> {/* Supplier Dropdown*/}\r\n                                <Col sm=\"6\">\r\n                                    <FormGroup className=\" row mt-1 \" >\r\n                                        <Label className=\"col-sm-1 p-2\"\r\n                                            style={{ width: \"115px\", marginRight: \"0.4cm\" }}>{fieldLabel.Customer} </Label>\r\n                                        <Col sm=\"7\">\r\n                                            <C_Select\r\n                                                id=\"Customer \"\r\n                                                name=\"Customer\"\r\n                                                value={values.Customer}\r\n                                                isSearchable={true}\r\n                                                isLoading={SupplierDropdownLoading}\r\n                                                className=\"react-dropdown\"\r\n                                                styles={{\r\n                                                    menu: provided => ({ ...provided, zIndex: 2 })\r\n                                                }}\r\n                                                classNamePrefix=\"dropdown\"\r\n                                                options={SupplierOptions}\r\n                                                onChange={(hasSelect, evn) => {\r\n                                                    onChangeSelect({ hasSelect, evn, state, setState, })\r\n                                                    CustomerOnChange(hasSelect)\r\n                                                }}\r\n                                            />\r\n                                            {isError.Customer.length > 0 && (\r\n                                                <span className=\"text-danger f-8\"><small>{isError.Customer}</small></span>\r\n                                            )}\r\n                                        </Col>\r\n\r\n                                    </FormGroup>\r\n                                </Col >\r\n\r\n                                <Col sm=\"6\">\r\n                                    <FormGroup className=\" row mt-1 \" >\r\n                                        <Label className=\"col-sm-1 p-2\"\r\n                                            style={{ width: \"115px\", marginRight: \"0.4cm\" }}>  {fieldLabel.OpeningBalanceAmt}</Label>\r\n                                        <Col sm=\"7\">\r\n                                            <Input\r\n                                                name=\"OpeningBalanceAmt\"\r\n                                                id=\"OpeningBalanceAmt\"\r\n                                                disabled={true}\r\n                                                value={OpeningBalanceAmount}\r\n                                                type=\"text\"\r\n                                            />\r\n                                        </Col>\r\n                                    </FormGroup>\r\n                                </Col >\r\n                            </Row>\r\n\r\n                            <Row>\r\n                                <Col sm=\"6\">\r\n                                    <FormGroup className=\" row mt-1 \" >\r\n                                        <Label className=\"col-sm-1 p-2\"\r\n                                            style={{ width: \"115px\", marginRight: \"0.4cm\" }}>{fieldLabel.ReceiptModeName} </Label>\r\n                                        <Col sm=\"7\">\r\n                                            <Select\r\n                                                id=\"ReceiptModeName \"\r\n                                                name=\"ReceiptModeName\"\r\n                                                value={values.ReceiptModeName}\r\n                                                isSearchable={true}\r\n                                                className=\"react-dropdown\"\r\n                                                styles={{\r\n                                                    menu: provided => ({ ...provided, zIndex: 2 })\r\n                                                }}\r\n                                                classNamePrefix=\"dropdown\"\r\n                                                options={ReceiptModeOptions}\r\n                                                onChange={(hasSelect, evn) => {\r\n                                                    ReceiptModeOnchange(hasSelect, evn)\r\n                                                }}\r\n                                            />\r\n                                            {isError.ReceiptModeName.length > 0 && (\r\n                                                <span className=\"text-danger f-8\"><small>{isError.ReceiptModeName}</small></span>\r\n                                            )}\r\n                                        </Col>\r\n                                    </FormGroup>\r\n                                </Col >\r\n                            </Row>\r\n\r\n                            {(values.ReceiptModeName.label === \"Cheque\") || (values.ReceiptModeName.label === \"RTGS\") ?\r\n\r\n                                < Row >\r\n                                    <Col sm=\"6\">\r\n                                        <FormGroup className=\" row mt-1 \" >\r\n                                            <Label className=\"col-sm-1 p-2\"\r\n                                                style={{ width: \"115px\", marginRight: \"0.4cm\" }}>{fieldLabel.BankName} </Label>\r\n                                            <Col sm=\"7\">\r\n                                                <Select\r\n                                                    name=\"BankName\"\r\n                                                    value={values.BankName}\r\n                                                    isSearchable={true}\r\n                                                    className=\"react-dropdown\"\r\n                                                    classNamePrefix=\"dropdown\"\r\n                                                    styles={{\r\n                                                        menu: provided => ({ ...provided, zIndex: 2 })\r\n                                                    }}\r\n                                                    options={BankListOptions}\r\n                                                    onChange={(hasSelect, evn) => {\r\n                                                        onChangeSelect({ hasSelect, evn, state, setState });\r\n                                                    }}\r\n                                                />\r\n                                                {isError.BankName.length > 0 && (\r\n                                                    <span className=\"invalid-feedback\">{isError.BankName}</span>\r\n                                                )}\r\n                                            </Col>\r\n\r\n                                        </FormGroup>\r\n                                    </Col >\r\n\r\n                                </Row>\r\n                                : null}\r\n\r\n                            {(values.ReceiptModeName.label === \"Cheque\") &&\r\n                                <Row>\r\n\r\n                                    <Col sm=\"6\">\r\n                                        <FormGroup className=\" row mt-1 \" >\r\n                                            <Label className=\"col-sm-1 p-2\"\r\n                                                style={{ width: \"115px\", marginRight: \"0.4cm\" }}>  {fieldLabel.DocumentNo}</Label>\r\n                                            <Col sm=\"7\">\r\n                                                <Input\r\n                                                    name=\"DocumentNo\"\r\n                                                    id=\"txtName\"\r\n                                                    value={values.DocumentNo}\r\n                                                    type=\"text\"\r\n                                                    className={isError.DocumentNo.length > 0 ? \"is-invalid form-control\" : \"form-control\"}\r\n                                                    placeholder=\"Please Enter Cheque Number\"\r\n                                                    autoComplete='off'\r\n                                                    autoFocus={true}\r\n                                                    onChange={(event) => {\r\n                                                        onChangeText({ event, state, setState })\r\n                                                    }}\r\n                                                />\r\n                                                {isError.DocumentNo.length > 0 && (\r\n                                                    <span className=\"invalid-feedback\">{isError.DocumentNo}</span>\r\n                                                )}\r\n                                            </Col>\r\n                                        </FormGroup>\r\n                                    </Col >\r\n\r\n                                    <Col sm=\"6\">\r\n                                        <FormGroup className=\" row mt-1 \" >\r\n                                            <Label className=\"col-sm-1 p-2\"\r\n                                                style={{ width: \"115px\", marginRight: \"0.4cm\" }}>  {fieldLabel.ChequeDate}</Label>\r\n                                            <Col sm=\"7\">\r\n                                                <C_DatePicker\r\n                                                    name='ChequeDate'\r\n                                                    value={values.ChequeDate}\r\n                                                    onChange={ChequeDate_Onchange}\r\n                                                    options={{\r\n                                                        altInput: true,\r\n                                                        altFormat: \"d-m-Y\",\r\n                                                        dateFormat: \"Y-m-d\",\r\n                                                    }}\r\n                                                />\r\n                                            </Col>\r\n                                        </FormGroup>\r\n                                    </Col >\r\n                                </Row>\r\n                            }\r\n\r\n                            <Row>\r\n                                <Col sm=\"6\">\r\n                                    <FormGroup className=\" row mt-1 \" >\r\n                                        <Label className=\"col-sm-1 p-2\"\r\n                                            style={{ width: \"115px\", marginRight: \"0.4cm\" }}>  {fieldLabel.AmountPaid}</Label>\r\n                                        <Col sm=\"7\">\r\n                                            <Input\r\n                                                name=\"AmountPaid\"\r\n                                                id=\"txtName\"\r\n                                                value={values.AmountPaid}\r\n                                                type=\"text\"\r\n                                                className={isError.AmountPaid.length > 0 ? \"is-invalid form-control\" : \"form-control\"}\r\n                                                placeholder=\"Please Enter Amount\"\r\n                                                autoComplete='off'\r\n                                                autoFocus={true}\r\n                                                onChange={(event) => {\r\n                                                    onChangeText({ event, state, setState })\r\n                                                }}\r\n                                            />\r\n                                            {isError.AmountPaid.length > 0 && (\r\n                                                <span className=\"invalid-feedback\">{isError.AmountPaid}</span>\r\n                                            )}\r\n                                        </Col>\r\n                                    </FormGroup>\r\n                                </Col >\r\n\r\n                                <Col sm=\"6\">\r\n                                    <FormGroup className=\" row mt-1 \" >\r\n                                        <Label className=\"col-sm-1 p-2\"\r\n                                            style={{ width: \"115px\", marginRight: \"0.4cm\" }}>  {fieldLabel.Description}</Label>\r\n                                        <Col sm=\"7\">\r\n                                            <Input\r\n                                                name=\"Description\"\r\n                                                id=\"txtName\"\r\n                                                value={values.Description}\r\n                                                type=\"text\"\r\n                                                className={isError.Description.length > 0 ? \"is-invalid form-control\" : \"form-control\"}\r\n                                                placeholder=\"Please Enter Description\"\r\n                                                autoComplete='off'\r\n                                                autoFocus={true}\r\n                                                onChange={(event) => {\r\n                                                    onChangeText({ event, state, setState })\r\n                                                }}\r\n                                            />\r\n                                            {isError.Description.length > 0 && (\r\n                                                <span className=\"invalid-feedback\">{isError.Description}</span>\r\n                                            )}\r\n                                        </Col>\r\n                                    </FormGroup>\r\n                                </Col >\r\n                            </Row>\r\n\r\n                        </div>\r\n\r\n                        <FormGroup>\r\n                            <Col>\r\n                                <SaveButton pageMode={pageMode}\r\n                                    loading={saveBtnloading}\r\n                                    onClick={saveHandeller}\r\n                                    userAcc={userPageAccessState}\r\n                                    editCreatedBy={editCreatedBy}\r\n                                />\r\n                            </Col>\r\n                        </FormGroup >\r\n\r\n                    </form >\r\n                </div >\r\n            </React.Fragment >\r\n        );\r\n    }\r\n    else {\r\n        return (\r\n            <React.Fragment></React.Fragment>\r\n        )\r\n    }\r\n};\r\n\r\nexport default PaymentEntry\r\n\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Accounting\\Payment\\PaymentEntryList.js",["3831","3832","3833","3834","3835","3836","3837","3838","3839","3840","3841","3842","3843","3844","3845"],"import React, { useEffect, useLayoutEffect, useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport {\r\n    BreadcrumbShowCountlabel,\r\n    commonPageFieldList,\r\n    commonPageFieldListSuccess\r\n} from \"../../../store/actions\";\r\nimport Select from \"react-select\";\r\nimport CommonPurchaseList from \"../../../components/Common/CommonPurchaseList\"\r\nimport { Col, FormGroup, Label } from \"reactstrap\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {\r\n    deleteReceiptList,\r\n    deleteReceiptList_Success,\r\n    GetOpeningBalance,\r\n    ReceiptGoButtonMaster,\r\n    ReceiptGoButtonMaster_Success,\r\n    ReceiptListAPI, ReceiptListAPISuccess, ReceiptTypeAPI,\r\n} from \"../../../store/Accounting/Receipt/action\";\r\nimport { initialFiledFunc } from \"../../../components/Common/validationFunction\";\r\nimport { getSupplier, getSupplierSuccess, Retailer_List, Retailer_List_Success } from \"../../../store/CommonAPI/SupplierRedux/actions\";\r\nimport { Go_Button, PageLoadingSpinner } from \"../../../components/Common/CommonButton\";\r\nimport PaymentEntry from \"./PaymentEntry\";\r\nimport { Receipt_Print } from \"../../../helpers/backend_helper\";\r\nimport * as report from '../../../Reports/ReportIndex'\r\nimport { getpdfReportdata } from \"../../../store/Utilites/PdfReport/actions\";\r\nimport { C_DatePicker } from \"../../../CustomValidateForm\";\r\nimport * as _cfunc from \"../../../components/Common/CommonFunction\";\r\nimport { url, mode, pageId } from \"../../../routes/index\"\r\nimport PartyDropdown_Common from \"../../../components/Common/PartyDropdown\";\r\nimport { customAlert } from \"../../../CustomAlert/ConfirmDialog\";\r\n\r\nconst PaymentEntryList = () => {\r\n\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n    const currentDate_ymd = _cfunc.date_ymd_func()\r\n    const userAdminRole = _cfunc.loginUserAdminRole()\r\n\r\n    const fileds = {\r\n        FromDate: currentDate_ymd,\r\n        ToDate: currentDate_ymd,\r\n        Customer: { value: \"\", label: \"All\" }\r\n    }\r\n    const [state, setState] = useState(() => initialFiledFunc(fileds))\r\n\r\n    const [pageMode, setPageMode] = useState(mode.defaultList);\r\n    const [subPageMode] = useState(history.location.pathname);\r\n    const [userAccState, setUserAccState] = useState('');\r\n    const [otherState, setOtherState] = useState({ masterPath: '', makeBtnShow: false, makeBtnShow: '', makeBtnName: '' });\r\n\r\n    const reducers = useSelector(\r\n        (state) => ({\r\n            listBtnLoading: state.ReceiptReducer.listBtnLoading,\r\n            loading: state.ReceiptReducer.loading,\r\n            tableList: state.ReceiptReducer.ReceiptList,\r\n            deleteMsg: state.ReceiptReducer.deleteMsg,\r\n            RetailerListForPayment: state.CommonAPI_Reducer.supplier,\r\n            RetailerListForReceipt: state.CommonAPI_Reducer.RetailerList,\r\n            ReceiptType: state.ReceiptReducer.ReceiptType,\r\n            userAccess: state.Login.RoleAccessUpdateData,\r\n            pageField: state.CommonPageFieldReducer.pageFieldList,\r\n            makeReceipt: state.ReceiptReducer.ReceiptGoButton,\r\n            OpeningBalance: state.ReceiptReducer.OpeningBalance,\r\n        })\r\n    );\r\n\r\n    const { userAccess, pageField, ReceiptType, RetailerListForPayment = [], RetailerListForReceipt = [], makeReceipt, OpeningBalance } = reducers;\r\n\r\n    const values = { ...state.values }\r\n\r\n    const action = {\r\n        deleteId: deleteReceiptList,\r\n        postSucc: postMessage,\r\n        deleteSucc: deleteReceiptList_Success\r\n    }\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            dispatch(ReceiptListAPISuccess([]))\r\n        }\r\n    }, [])\r\n\r\n    // Receipt Type API Values **** only Post Json Body\r\n    useEffect(() => {\r\n        const jsonBody = JSON.stringify({\r\n            Company: _cfunc.loginCompanyID(),\r\n            TypeID: 3\r\n        });\r\n        dispatch(ReceiptTypeAPI(jsonBody));\r\n    }, []);\r\n\r\n    // Customer dropdown List\r\n    useEffect(() => {\r\n        const jsonBody = JSON.stringify({\r\n            Type: 4,\r\n            PartyID: _cfunc.loginSelectedPartyID(),\r\n            CompanyID: _cfunc.loginCompanyID()\r\n        });\r\n        dispatch(Retailer_List(jsonBody));\r\n    }, []);\r\n\r\n    // onLoad Go_Button useEffect\r\n    useEffect(() => {\r\n        if (ReceiptType.length > 0 && !(userAdminRole)) {\r\n            goButtonHandler(true)\r\n        }\r\n    }, [ReceiptType]);\r\n\r\n    useEffect(() => {\r\n\r\n        let page_Id = '';\r\n        let page_Mode = mode.defaultList;\r\n        let masterPath = '';\r\n        let makeBtnShow = false;\r\n        let newBtnPath = '';\r\n        let makeBtnName = '';\r\n\r\n        if (subPageMode === url.PAYMENT_ENTRY_LIST) {\r\n            page_Id = pageId.PAYMENT_ENTRY_LIST;\r\n            masterPath = url.PAYMENT_ENTRY;\r\n            newBtnPath = url.PAYMENT_ENTRY;\r\n        }\r\n        else if (subPageMode === url.RECEIPTS_LIST_2) {\r\n            page_Id = pageId.RECEIPTS_LIST_2\r\n            page_Mode = mode.modeSTPsave\r\n            makeBtnShow = true;\r\n            makeBtnName = \"Make Receipt\"\r\n        }\r\n\r\n        dispatch(ReceiptListAPI(\"\"))//for clear privious order list\r\n        setOtherState({ masterPath, makeBtnShow, newBtnPath, makeBtnName })\r\n        setPageMode(page_Mode)\r\n        dispatch(commonPageFieldListSuccess(null))\r\n        dispatch(commonPageFieldList(page_Id))\r\n        // dispatch(BreadcrumbShowCountlabel(`${\"Payment Entry Count\"} :0`))\r\n        // dispatch(getSupplier())\r\n        dispatch(getSupplier({ \"PartyID\": _cfunc.loginSelectedPartyID() }));\r\n\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n\r\n        if ((makeReceipt.Status === true) && (makeReceipt.StatusCode === 200) && !(OpeningBalance === '')) {\r\n            dispatch(ReceiptGoButtonMaster_Success({ ...makeReceipt, Status: false }))\r\n\r\n            history.push({\r\n                pathname: makeReceipt.path,\r\n                pageMode: makeReceipt.pageMode,\r\n                editValue: makeReceipt.ListData,\r\n            })\r\n        }\r\n    }, [makeReceipt, OpeningBalance])\r\n\r\n    useEffect(() => {\r\n        const page_Id = pageId.PAYMENT_ENTRY_LIST\r\n        let userAcc = userAccess.find((inx) => {\r\n            return (inx.id === page_Id)\r\n        })\r\n        if (!(userAcc === undefined)) {\r\n            setUserAccState(userAcc)\r\n        }\r\n    }, [userAccess])\r\n\r\n    const customerOptionsForPayment = RetailerListForPayment.map((index) => ({\r\n        value: index.id,\r\n        label: index.Name,\r\n    }));\r\n\r\n    customerOptionsForPayment.unshift({\r\n        value: \"\",\r\n        label: \" All\"\r\n    });\r\n\r\n    const customerOptionsForReceipt = RetailerListForReceipt.map((index) => ({\r\n        value: index.id,\r\n        label: index.Name,\r\n    }));\r\n\r\n    customerOptionsForReceipt.unshift({\r\n        value: \"\",\r\n        label: \" All\"\r\n    });\r\n\r\n    const goButtonHandler = async () => {\r\n        \r\n        try {\r\n            if ((_cfunc.loginSelectedPartyID() === 0)) {\r\n                customAlert({ Type: 3, Message: \"Please Select Party\" });\r\n                return;\r\n            };\r\n            const ReceiptTypeID = ReceiptType.find((index) => {\r\n                return index.Name === \"Payment Entry\"\r\n            })\r\n\r\n            const jsonBody = JSON.stringify({\r\n                FromDate: values.FromDate,\r\n                ToDate: values.ToDate,\r\n                CustomerID: values.Customer.value,\r\n                PartyID: _cfunc.loginSelectedPartyID(),\r\n                ReceiptType: ReceiptTypeID.id,\r\n            });\r\n\r\n            await dispatch(ReceiptListAPI(jsonBody, subPageMode));\r\n        } catch (error) { }\r\n        return\r\n    };\r\n\r\n    function fromdateOnchange(e, date) {\r\n        setState((i) => {\r\n            const a = { ...i }\r\n            a.values.FromDate = date;\r\n            a.hasValid.FromDate.valid = true\r\n            return a\r\n        })\r\n    }\r\n\r\n    function todateOnchange(e, date) {\r\n        setState((i) => {\r\n            const a = { ...i }\r\n            a.values.ToDate = date;\r\n            a.hasValid.ToDate.valid = true\r\n            return a\r\n        })\r\n    }\r\n\r\n    function CustomerOnChange(e) {\r\n\r\n        setState((i) => {\r\n            const a = { ...i }\r\n            a.values.Customer = e;\r\n            a.hasValid.Customer.valid = true\r\n            return a\r\n        })\r\n    }\r\n\r\n    function downBtnFunc(row) {\r\n        var ReportType = report.Receipt;\r\n        dispatch(getpdfReportdata(Receipt_Print, ReportType, row.id))\r\n    }\r\n\r\n    function partySelectButtonHandler() {\r\n        goButtonHandler()\r\n        const jsonBody = JSON.stringify({\r\n            Type: 4,\r\n            PartyID: _cfunc.loginSelectedPartyID(),\r\n            CompanyID: _cfunc.loginCompanyID()\r\n        });\r\n        dispatch(Retailer_List(jsonBody));\r\n        dispatch(getSupplier({ \"PartyID\": _cfunc.loginSelectedPartyID() }));\r\n    }\r\n\r\n    function partySelectOnChangeHandler() {\r\n        dispatch(ReceiptListAPISuccess([]));\r\n        dispatch(Retailer_List_Success([]));\r\n        dispatch(getSupplierSuccess([]));\r\n\r\n        setState((i) => {\r\n            const a = { ...i }\r\n            a.values.Customer = { value: \"\", label: \"All\" }\r\n            a.hasValid.Customer.valid = true\r\n            return a\r\n        })\r\n    }\r\n\r\n    const makeBtnFunc = (list = [], btnId) => {\r\n\r\n        var { CustomerID, ReceiptDate, id } = list[0]\r\n\r\n        try {\r\n            const jsonBody = JSON.stringify({\r\n                PartyID: _cfunc.loginSelectedPartyID(),\r\n                CustomerID: CustomerID,\r\n                InvoiceID: \"\"\r\n            });\r\n\r\n            const jsonBody1 = JSON.stringify({\r\n                PartyID: _cfunc.loginSelectedPartyID(),\r\n                CustomerID: CustomerID,\r\n                ReceiptDate: currentDate_ymd\r\n            });\r\n\r\n            const body = { jsonBody, pageMode, path: url.RECEIPTS, ListData: list[0], btnId: `btn-makeBtn-${id}` }\r\n            dispatch(ReceiptGoButtonMaster(body));\r\n            dispatch(GetOpeningBalance(jsonBody1));\r\n\r\n        } catch (e) { }\r\n    }\r\n\r\n    const HeaderContent = () => {\r\n        return (\r\n            <div className=\"px-2   c_card_filter text-black\" >\r\n                <div className=\"row\" >\r\n                    <Col sm=\"3\" className=\"\">\r\n                        <FormGroup className=\"mb- row mt-3 \" >\r\n                            <Label className=\"col-sm-5 p-2\"\r\n                                style={{ width: \"83px\" }}>FromDate</Label>\r\n                            <Col sm=\"7\">\r\n                                <C_DatePicker\r\n                                    name='FromDate'\r\n                                    value={values.FromDate}\r\n                                    onChange={fromdateOnchange}\r\n                                />\r\n                            </Col>\r\n                        </FormGroup>\r\n                    </Col>\r\n\r\n                    <Col sm=\"3\" className=\"\">\r\n                        <FormGroup className=\"mb- row mt-3 \" >\r\n                            <Label className=\"col-sm-5 p-2\"\r\n                                style={{ width: \"65px\" }}>ToDate</Label>\r\n                            <Col sm=\"7\">\r\n                                <C_DatePicker\r\n                                    name=\"ToDate\"\r\n                                    value={values.ToDate}\r\n                                    onChange={todateOnchange}\r\n                                />\r\n                            </Col>\r\n                        </FormGroup>\r\n                    </Col>\r\n\r\n                    <Col sm=\"5\">\r\n                        <FormGroup className=\"mb-2 row mt-3 \" >\r\n                            <Label className=\"col-md-4 p-2\"\r\n                                style={{ width: \"115px\" }}>Customer</Label>\r\n                            <Col sm=\"5\">\r\n                                <Select\r\n                                    name=\"Customer\"\r\n                                    classNamePrefix=\"select2-Customer\"\r\n                                    value={values.Customer}\r\n                                    options={(subPageMode === url.RECEIPTS_LIST_2) ? customerOptionsForReceipt : customerOptionsForPayment}\r\n                                    onChange={CustomerOnChange}\r\n                                    styles={{\r\n                                        menu: provided => ({ ...provided, zIndex: 2 })\r\n                                    }}\r\n                                />\r\n                            </Col>\r\n                        </FormGroup>\r\n                    </Col >\r\n\r\n                    <Col sm=\"1\" className=\"mt-3 \">\r\n\r\n                        <Go_Button loading={reducers.loading} onClick={goButtonHandler} />\r\n                    </Col>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <PageLoadingSpinner isLoading={(reducers.loading || !pageField)} />\r\n            <div className=\"page-content\">\r\n                <PartyDropdown_Common pageMode={pageMode}\r\n                    goButtonHandler={partySelectButtonHandler}\r\n                    changeButtonHandler={partySelectOnChangeHandler} />\r\n                {\r\n                    (pageField) ?\r\n                        <CommonPurchaseList\r\n                            action={action}\r\n                            reducers={reducers}\r\n                            showBreadcrumb={false}\r\n                            masterPath={otherState.masterPath}\r\n                            newBtnPath={otherState.newBtnPath}\r\n                            makeBtnShow={otherState.makeBtnShow}\r\n                            pageMode={pageMode}\r\n                            HeaderContent={HeaderContent}\r\n\r\n                            goButnFunc={goButtonHandler}\r\n                            downBtnFunc={downBtnFunc}\r\n                            makeBtnFunc={makeBtnFunc}\r\n                            ButtonMsgLable={\"PaymentEntry\"}\r\n                            deleteName={\"FullReceiptNumber\"}\r\n                            makeBtnName={otherState.makeBtnName}\r\n                            MasterModal={PaymentEntry}\r\n                            totalAmountShow={true}\r\n                        />\r\n                        : null\r\n                }\r\n            </div>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default PaymentEntryList;","D:\\Rohit\\Git projects\\Manthan\\src\\Reports\\Receipts\\Page.js",["3846"],"import jsPDF from \"jspdf\";\r\nimport \"jspdf-autotable\";\r\nimport * as style from './ReportStyle'\r\nimport { Data } from \"./DemoData\";\r\n\r\n\r\nvar pageHeder = function (doc,data) {\r\n    style.pageBorder(doc,data);  \r\n};\r\nfunction reportBody(doc, data) { \r\n    style.Receipts(doc,data);  \r\n\r\n \r\n}\r\nfunction pageFooter(doc,data) {\r\n    style.pageFooter(doc,data);\r\n}\r\n\r\n const Receipts=(data)=> {\r\n    \r\n    var doc = new jsPDF('l', 'pt', 'a5');\r\n    pageHeder(doc,data);\r\n    reportBody(doc, data);\r\n    pageFooter(doc,data);\r\n     doc.setProperties({\r\n          title: \"Report\"\r\n      });\r\n    // window.open('dataurlnewwindow');\r\n    \r\n    const options = { filename: \"Receipt Report\" ,}\r\n    doc.output('dataurlnewwindow', options);\r\n \r\n    // return(<></>);\r\n}\r\nexport default Receipts;","D:\\Rohit\\Git projects\\Manthan\\src\\Reports\\Receipts\\ReportStyle.js",["3847","3848","3849","3850","3851","3852","3853"],"import CheckBox from \"jspdf\";\r\nimport reportHederPng from \"../../assets/images/reportHeder.png\"\r\nimport upi_qr_code from \"../../assets/images/upi_qr_code.png\"\r\nimport { CurrentTime, currentDate_dmy, date_dmy_func } from \"../../components/Common/CommonFunction\";\r\nimport { invoice } from \"../ReportIndex\";\r\nimport { numberWithCommas, toWords } from \"../Report_common_function\";\r\nimport * as table from './TableData'\r\nlet initial_y = 0\r\nexport const pageBorder = (doc) => {\r\n    doc.setDrawColor(0, 0, 0);\r\n    doc.setLineWidth(0);\r\n\r\n\r\n    doc.line(570, 16, 30, 16);//horizontal line (Top)\r\n    doc.line(30, 379, 30, 16);//vertical line (left)\r\n    doc.line(570, 379, 570, 16);//vertical line (Right)\r\n    doc.line(570, 379, 30, 379);//horizontal line (Bottom)   \r\n}\r\n\r\nlet final_y = 0\r\n\r\nexport const Receipts = (doc, data) => {\r\n\r\n\r\n    var BilledByStyle = {\r\n        didParseCell: (data1) => {\r\n            if (data1.cell.raw === data.Party) {\r\n                data1.cell.styles.fontStyle = 'bold';\r\n                data1.cell.styles.fontSize = 13;\r\n            }\r\n        },\r\n        margin: {\r\n            top: 0,\r\n            left: 420,\r\n            right: 50,\r\n        },\r\n        showHead: 'always',\r\n        theme: 'plain',\r\n        styles: {\r\n            overflow: 'linebreak',\r\n            fontSize: 9,\r\n            height: 0,\r\n        },\r\n        bodyStyles: {\r\n            columnWidth: 'wrap',\r\n            textColor: [30, 30, 30],\r\n            cellPadding: 1,\r\n            fontSize: 10,\r\n            fontStyle: 'Normal',\r\n            lineColor: [0, 0, 0],\r\n        },\r\n        columnStyles: {\r\n            0: {\r\n                valign: 'top',\r\n                columnWidth: 180, // Reduce the column width to fit within the page\r\n                halign: 'left',\r\n            },\r\n        },\r\n        tableLineColor: 'black',\r\n        startY: 20,\r\n    };\r\n\r\n    var DetailsOfReceipt = {\r\n\r\n        margin: {\r\n            top: 0,\r\n            left: 130,\r\n            right: 35,\r\n        },\r\n        showHead: 'always',\r\n        theme: 'plain',\r\n        styles: {\r\n            overflow: 'linebreak',\r\n            fontSize: 9,\r\n            height: 0,\r\n        },\r\n        bodyStyles: {\r\n            columnWidth: 'wrap',\r\n            textColor: [30, 30, 30],\r\n            cellPadding: 1,\r\n            fontSize: 10,\r\n            fontStyle: 'bold',\r\n            lineColor: [0, 0, 0],\r\n        },\r\n        columnStyles: {\r\n            0: {\r\n                valign: 'top',\r\n                columnWidth: 440, // Reduce the column width to fit within the page\r\n                halign: 'left',\r\n            },\r\n        },\r\n        tableLineColor: 'black',\r\n        startY: 190,\r\n    };\r\n\r\n    doc.autoTable(table.Details, table.ReceiptDetails(doc, data), DetailsOfReceipt);\r\n    doc.setFontSize(17);\r\n    doc.setFont(undefined, 'bold')\r\n    doc.text(`Payment Receipt`, 40, 40,);\r\n\r\n    // doc.setFontSize(18);\r\n    // doc.text(`Receipt`, 340, 100, 'right');\r\n\r\n    doc.setFontSize(11);\r\n    doc.setFont(undefined, 'bold')\r\n\r\n    doc.text(`Receipt No : ${data.FullReceiptNumber} `, 40, 145, 'left');\r\n    doc.setFont(undefined, 'Normal')\r\n    doc.setFont(undefined, 'bold')\r\n\r\n    doc.text(`Bill No : ${data.BillNumber === null ? \"\" : data.BillNumber} `, 300, 145, 'left');\r\n    doc.setFont(undefined, 'Normal')\r\n\r\n\r\n    doc.text(`Received With thanks from :`, 40, 180, 'left');\r\n\r\n    doc.setFont(undefined, 'bold')\r\n    doc.text(`${data.Customer}`, 190, 180,);\r\n    doc.setFont(undefined, 'Normal')\r\n    doc.text(`Amount in Words :`, 40, 200, 'left');\r\n\r\n    doc.setFont(undefined, 'Normal')\r\n\r\n    final_y = doc.previousAutoTable.finalY\r\n    doc.text(`Receipt Mode :`, 40, final_y + 10, 'left');\r\n    doc.setFont(undefined, 'bold')\r\n    doc.text(`${data.ReceiptModeName}`, 110, final_y + 10,);\r\n    doc.setFont(undefined, 'Normal')\r\n    doc.text(`Description: ${data.Description === null ? \"\" : data.Description}`, 40, final_y + 25, 'left');\r\n\r\n    doc.text(`Amount : `, 40, final_y + 40, 'left');\r\n    doc.setFont(undefined, 'bold')\r\n    doc.text(`${numberWithCommas(Number(data.AmountPaid).toFixed(2))}`, 90, final_y + 40,);\r\n    doc.setFont(undefined, 'Normal')\r\n\r\n\r\n\r\n    if (data.ReceiptModeName === \"Cheque\") {\r\n        doc.text(`Bank Name :`, 40, final_y + 55, 'left');\r\n        doc.setFont(undefined, 'bold')\r\n        doc.text(`${data.DocumentNo}/${data.BankName}`, 100, final_y + 55,);\r\n        \r\n        var bankwidth = doc.getTextWidth(`${data.DocumentNo}/${data.BankName}`);\r\n        doc.setFont(undefined, 'Normal')\r\n        doc.text(`Depository Bank Name :`, 40 + bankwidth + 80, final_y + 55, 'left');\r\n        doc.setFont(undefined, 'bold')\r\n\r\n        doc.text(`${data.DepositorBankName}`, 40 + bankwidth + 190, final_y + 55, 'left');\r\n        doc.setFont(undefined, 'bold')\r\n    }\r\n\r\n    doc.setFont(undefined, 'Normal')\r\n    doc.text(`Prepared By :`, 40, 335, 'left');\r\n    doc.setFont(undefined, 'bold')\r\n\r\n    doc.text(`${data.Party}`, 105, 335, 'left');\r\n\r\n    doc.setFont(undefined, 'Normal')\r\n\r\n\r\n    doc.text(`Received By :`, 245, 335, 'left');\r\n\r\n    doc.setFont(undefined, 'Normal')\r\n    doc.setFont(undefined, 'bold')\r\n\r\n    doc.text(`For ${data.Party}`, 480, 335, \"center\");\r\n\r\n    doc.setFont(undefined, 'Normal')\r\n\r\n    doc.text(`Authorized Signatory`, 480, 375, \"center\");\r\n\r\n\r\n\r\n    doc.text('Print Date :' + String(currentDate_dmy) + ' Time ' + String(CurrentTime()), 40, 375,)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    doc.autoTable(table.Address, table.AddressDetails(data), BilledByStyle);\r\n\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport const pageFooter = (doc, data) => {\r\n    const pageCount = doc.internal.getNumberOfPages()\r\n    doc.setFont('helvetica', 'Normal')\r\n    doc.setFontSize(8)\r\n    for (var i = 1; i <= pageCount; i++) {\r\n        doc.setPage(i)\r\n        pageBorder(doc)\r\n        doc.setFont('helvetica', 'Normal')\r\n        doc.text('Page ' + String(i) + ' of ' + String(pageCount), doc.internal.pageSize.width / 10, 828, {\r\n            align: 'center'\r\n        })\r\n        console.log(\"aaa\", doc.internal.pageSize.height)\r\n    }\r\n}\r\n\r\n// original","D:\\Rohit\\Git projects\\Manthan\\src\\Reports\\Receipts\\DemoData.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\Reports\\Receipts\\TableData.js",["3854"],"import { date_dmy_func } from \"../../components/Common/CommonFunction\"\r\nimport { toWords, toWordswithoutRS } from \"../Report_common_function\"\r\n\r\nexport const Address = [\r\n    \"Address\"\r\n]\r\n\r\nexport const Details = [\r\n    \"ReceiptDetail\"\r\n]\r\n\r\n\r\n\r\n\r\n\r\nexport const ReceiptDetails = (doc, data) => {\r\n    \r\n    let stringNumber = toWordswithoutRS(Number(data.AmountPaid))\r\n    var ReceiptDetails = [\r\n\r\n        [`Rupees ${stringNumber}`],\r\n\r\n    ]\r\n\r\n    return ReceiptDetails;\r\n}\r\n\r\nexport const AddressDetails = (data) => {\r\n\r\n\r\n    var AddressDetails = [\r\n\r\n        [`${data.Party}`],\r\n        [`Address:${data.Address === null ? \"\" : data.Address}`],\r\n        [`Contact:${data.MobileNo}`],\r\n        [`Date:${date_dmy_func(data.ReceiptDate)}`],\r\n        \"\"\r\n\r\n\r\n    ]\r\n    return AddressDetails;\r\n}\r\n\r\n\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Accounting\\BankRedux\\reducer.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Accounting\\BankRedux\\saga.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Accounting\\Bank\\BankMaster.js",["3855","3856","3857","3858","3859","3860","3861","3862"],"import React, { useEffect, useState, } from \"react\";\r\nimport {\r\n    Card,\r\n    CardBody,\r\n    CardHeader,\r\n    Col,\r\n    Container,\r\n    FormGroup,\r\n    Input,\r\n    Label,\r\n    Row\r\n} from \"reactstrap\";\r\nimport { MetaTags } from \"react-meta-tags\";\r\nimport {\r\n    Breadcrumb_inputName,\r\n    commonPageField,\r\n    commonPageFieldSuccess,\r\n} from \"../../../store/actions\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {\r\n    comAddPageFieldFunc,\r\n    formValid,\r\n    initialFiledFunc,\r\n    onChangeText,\r\n    resetFunction\r\n} from \"../../../components/Common/validationFunction\";\r\nimport { SaveButton } from \"../../../components/Common/CommonButton\";\r\nimport {\r\n    breadcrumbReturnFunc,\r\n    btnIsDissablefunc,\r\n    loginCompanyID,\r\n    loginUserID,\r\n    metaTagLabel\r\n} from \"../../../components/Common/CommonFunction\";\r\nimport * as url from \"../../../routes/route_url\";\r\nimport * as pageId from \"../../../routes/allPageID\"\r\nimport * as mode from \"../../../routes/PageMode\"\r\nimport {\r\n    editBankIDSuccess,\r\n    saveBankMaster,\r\n    saveBankMaster_Success,\r\n    updateBankID,\r\n    updateBankIDSuccess\r\n} from \"../../../store/Accounting/BankRedux/action\";\r\nimport { customAlert } from \"../../../CustomAlert/ConfirmDialog\";\r\n\r\nconst BankMaster = (props) => {\r\n\r\n    const history = useHistory()\r\n    const dispatch = useDispatch();\r\n\r\n    const fileds = {\r\n        id: \"\",\r\n        Name: \"\"\r\n    }\r\n\r\n    const [state, setState] = useState(() => initialFiledFunc(fileds))\r\n\r\n    const [pageMode, setPageMode] = useState(mode.defaultsave);//changes\r\n    const [modalCss, setModalCss] = useState(false);\r\n    const [userPageAccessState, setUserAccState] = useState(123);\r\n    const [editCreatedBy, seteditCreatedBy] = useState(\"\");\r\n\r\n    //Access redux store Data /  'save_ModuleSuccess' action data\r\n    const {\r\n        postMsg,\r\n        pageField,\r\n        updateMsg,\r\n        saveBtnloading,\r\n        userAccess } = useSelector((state) => ({\r\n            saveBtnloading: state.BankReducer.saveBtnloading,\r\n            postMsg: state.BankReducer.postMsg,\r\n            updateMsg: state.BankReducer.updateMessage,\r\n            userAccess: state.Login.RoleAccessUpdateData,\r\n            pageField: state.CommonPageFieldReducer.pageField\r\n        }));\r\n\r\n    useEffect(() => {\r\n        const page_Id = pageId.BANK//changes\r\n        dispatch(commonPageFieldSuccess(null));\r\n        dispatch(commonPageField(page_Id))\r\n    }, []);\r\n\r\n\r\n    const values = { ...state.values }\r\n    const { isError } = state;\r\n    const { fieldLabel } = state;\r\n\r\n    const location = { ...history.location }\r\n    const hasShowloction = location.hasOwnProperty(mode.editValue)//changes\r\n    const hasShowModal = props.hasOwnProperty(mode.editValue)//changes\r\n\r\n    // userAccess useEffect\r\n    useEffect(() => {\r\n        let userAcc = null;\r\n        let locationPath = location.pathname;\r\n\r\n        if (hasShowModal) {\r\n            locationPath = props.masterPath;\r\n        };\r\n\r\n        userAcc = userAccess.find((inx) => {\r\n            return (`/${inx.ActualPagePath}` === locationPath)\r\n        })\r\n\r\n        if (userAcc) {\r\n            setUserAccState(userAcc)\r\n            breadcrumbReturnFunc({ dispatch, userAcc });\r\n        };\r\n    }, [userAccess])\r\n\r\n    // This UseEffect 'SetEdit' data and 'autoFocus' while this Component load First Time.\r\n    useEffect(() => {\r\n\r\n        if ((hasShowloction || hasShowModal)) {\r\n\r\n            let hasEditVal = null\r\n            if (hasShowloction) {\r\n                setPageMode(location.pageMode)\r\n                hasEditVal = location.editValue\r\n            }\r\n            else if (hasShowModal) {\r\n                hasEditVal = props.editValue\r\n                setPageMode(props.pageMode)\r\n                setModalCss(true)\r\n            }\r\n\r\n            if (hasEditVal) {\r\n                const { id, Name } = hasEditVal\r\n                const { values, fieldLabel, hasValid, required, isError } = { ...state }\r\n\r\n                hasValid.Name.valid = true;\r\n\r\n                values.id = id\r\n                values.Name = Name;\r\n\r\n                setState({ values, fieldLabel, hasValid, required, isError })\r\n                dispatch(Breadcrumb_inputName(hasEditVal.Name))\r\n                seteditCreatedBy(hasEditVal.CreatedBy)\r\n            }\r\n            dispatch(editBankIDSuccess({ Status: false }))\r\n        }\r\n    }, [])\r\n\r\n    useEffect(async () => {\r\n\r\n        if ((postMsg.Status === true) && (postMsg.StatusCode === 200)) {\r\n            dispatch(saveBankMaster_Success({ Status: false }))\r\n            setState(() => resetFunction(fileds, state)) //Clear form values \r\n            dispatch(Breadcrumb_inputName(''))\r\n\r\n            if (pageMode === \"other\") {\r\n                customAlert({\r\n                    Type: 1,\r\n                    Message: postMsg.Message,\r\n                })\r\n            }\r\n            else {\r\n                let alertResponse = await customAlert({\r\n                    Type: 1,\r\n                    Message: postMsg.Message,\r\n                })\r\n                if (alertResponse) {\r\n                    history.push({ pathname: url.BANK_LIST })\r\n                }\r\n            }\r\n        }\r\n        else if (postMsg.Status === true) {\r\n            dispatch(saveBankMaster_Success({ Status: false }))\r\n            customAlert({\r\n                Type: 4,\r\n                Message: JSON.stringify(postMsg.Message),\r\n            })\r\n        }\r\n    }, [postMsg])\r\n\r\n    useEffect(() => {\r\n        if (updateMsg.Status === true && updateMsg.StatusCode === 200 && !modalCss) {\r\n            setState(() => resetFunction(fileds, state)) // Clear form values \r\n            history.push({\r\n                pathname: url.BANK_LIST,\r\n            })\r\n        } else if (updateMsg.Status === true && !modalCss) {\r\n            dispatch(updateBankIDSuccess({ Status: false }));\r\n            customAlert({\r\n                Type: 3,\r\n                Message: JSON.stringify(updateMsg.Message),\r\n            })\r\n\r\n        }\r\n    }, [updateMsg, modalCss]);\r\n\r\n    useEffect(() => {\r\n        if (pageField) {\r\n            const fieldArr = pageField.PageFieldMaster\r\n            comAddPageFieldFunc({ state, setState, fieldArr })\r\n        }\r\n    }, [pageField])\r\n\r\n\r\n    const saveHandeller = async (event) => {\r\n        event.preventDefault();\r\n        const btnId = event.target.id\r\n        try {\r\n            if (formValid(state, setState)) {\r\n                btnIsDissablefunc({ btnId, state: true })\r\n\r\n                const jsonBody = JSON.stringify({\r\n                    Name: values.Name,\r\n                    CreatedBy: loginUserID(),\r\n                    UpdatedBy: loginUserID(),\r\n                    Company: loginCompanyID(),\r\n                });\r\n\r\n                if (pageMode === mode.edit) {\r\n                    dispatch(updateBankID({ jsonBody, updateId: values.id, btnId }));\r\n                }\r\n                else {\r\n                    dispatch(saveBankMaster({ jsonBody, btnId }));\r\n                }\r\n            }\r\n        } catch (e) { btnIsDissablefunc({ btnId, state: false }) }\r\n    };\r\n\r\n    // IsEditMode_Css is use of module Edit_mode (reduce page-content marging)\r\n    var IsEditMode_Css = ''\r\n    if ((modalCss) || (pageMode === mode.dropdownAdd)) { IsEditMode_Css = \"-5.5%\" };\r\n\r\n    if (!(userPageAccessState === '')) {\r\n        return (\r\n            <React.Fragment>\r\n                <MetaTags>{metaTagLabel(userPageAccessState)}</MetaTags>\r\n\r\n                <div className=\"page-content\" style={{ marginTop: IsEditMode_Css, }}>\r\n                    <Container fluid>\r\n                        <Card className=\"text-black\">\r\n                            <CardHeader className=\"card-header   text-black c_card_header\" >\r\n                                <h4 className=\"card-title text-black\">{userPageAccessState.PageDescription}</h4>\r\n                                <p className=\"card-title-desc text-black\">{userPageAccessState.PageDescriptionDetails}</p>\r\n                            </CardHeader>\r\n\r\n                            <CardBody className=\" vh-10 0 text-black\" style={{ backgroundColor: \"#whitesmoke\" }} >\r\n                                <form noValidate>\r\n                                    <Row className=\"\">\r\n                                        <Col md={12}>\r\n                                            <Card>\r\n                                                <CardBody className=\"c_card_body\">\r\n                                                    <Row>\r\n                                                        <FormGroup className=\"mb-2 col col-sm-4 \">\r\n                                                            <Label htmlFor=\"validationCustom01\">Name </Label>\r\n                                                            <Input\r\n                                                                name=\"Name\"\r\n                                                                id=\"txtName\"\r\n                                                                value={values.Name}\r\n                                                                type=\"text\"\r\n                                                                className={isError.Name.length > 0 ? \"is-invalid form-control\" : \"form-control\"}\r\n                                                                placeholder=\"Please Enter Name\"\r\n                                                                autoComplete='off'\r\n                                                                autoFocus={true}\r\n                                                                onChange={(event) => {\r\n                                                                    onChangeText({ event, state, setState })\r\n                                                                    dispatch(Breadcrumb_inputName(event.target.value))\r\n                                                                }}\r\n                                                            />\r\n                                                            {isError.Name.length > 0 && (\r\n                                                                <span className=\"invalid-feedback\">{isError.Name}</span>\r\n                                                            )}\r\n                                                        </FormGroup>\r\n\r\n                                                        <FormGroup >\r\n                                                            <Row>\r\n                                                                <Col sm={2}>\r\n                                                                    <SaveButton pageMode={pageMode}\r\n                                                                        loading={saveBtnloading}\r\n                                                                        onClick={saveHandeller}\r\n                                                                        userAcc={userPageAccessState}\r\n                                                                        editCreatedBy={editCreatedBy}\r\n                                                                        module={\"BankMaster\"}\r\n                                                                    />\r\n                                                                </Col>\r\n                                                            </Row>\r\n                                                        </FormGroup>\r\n                                                    </Row>\r\n                                                </CardBody>\r\n                                            </Card>\r\n                                        </Col>\r\n                                    </Row>\r\n                                </form>\r\n                            </CardBody>\r\n                        </Card>\r\n                    </Container>\r\n                </div>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n    else {\r\n        return (\r\n            <React.Fragment></React.Fragment>\r\n        )\r\n    }\r\n};\r\n\r\nexport default BankMaster\r\n\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Accounting\\Bank\\BankList.js",["3863","3864"],"import React, { useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport BankMaster from \"./BankMaster\";\r\nimport { commonPageFieldList, commonPageFieldListSuccess } from \"../../../store/actions\";\r\nimport CommonListPage from \"../../../components/Common/CommonMasterListPage\";\r\nimport * as pageId from \"../../../routes/allPageID\"\r\nimport * as url from \"../../../routes/route_url\";\r\nimport { MetaTags } from \"react-meta-tags\";\r\nimport {\r\n    deleteBankIDSuccess,\r\n    delete_Bank_ID,\r\n    editBankID,\r\n    getBanklist,\r\n    saveBankMaster_Success,\r\n    updateBankIDSuccess\r\n} from \"../../../store/Accounting/BankRedux/action\";\r\nimport { Listloader } from \"../../../components/Common/CommonButton\";\r\n\r\n\r\nconst BankList = () => {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const reducers = useSelector(\r\n        (state) => ({\r\n            listBtnLoading: state.BankReducer.listBtnLoading,\r\n            tableList: state.BankReducer.BankList,\r\n            postMsg: state.BankReducer.postMsg,\r\n            editData: state.BankReducer.editMsg,\r\n            updateMsg: state.BankReducer.updateMessage,\r\n            deleteMsg: state.BankReducer.deleteMessage,\r\n            userAccess: state.Login.RoleAccessUpdateData,\r\n            pageField: state.CommonPageFieldReducer.pageFieldList\r\n        })\r\n    );\r\n\r\n    const action = {\r\n        getList: getBanklist,\r\n        editId: editBankID,\r\n        deleteId: delete_Bank_ID,\r\n        postSucc: saveBankMaster_Success,\r\n        updateSucc: updateBankIDSuccess,\r\n        deleteSucc: deleteBankIDSuccess\r\n    }\r\n\r\n    //  This UseEffect => Featch Modules List data  First Rendering\r\n    useEffect(() => {\r\n        const page_Id = pageId.BANK_LIST\r\n        dispatch(commonPageFieldListSuccess(null))\r\n        dispatch(commonPageFieldList(page_Id))\r\n        dispatch(getBanklist());\r\n    }, []);\r\n\r\n    const { pageField} = reducers;\r\n\r\n    return (\r\n        <React.Fragment>\r\n            {\r\n                 reducers.loading ?\r\n                 <Listloader />\r\n                 :\r\n                (pageField) ?\r\n                    <CommonListPage\r\n                        action={action}\r\n                        reducers={reducers}\r\n                        MasterModal={BankMaster}\r\n                        masterPath={url.BANK}\r\n                        ButtonMsgLable={\"Bank\"}\r\n                        deleteName={\"Name\"}\r\n                    />\r\n                    : <><Listloader /></>\r\n            }\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default BankList;\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Accounting\\BankRedux\\action.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Accounting\\BankRedux\\actionType.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Accounting\\BankAssignRedux\\reducer.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Accounting\\BankAssignRedux\\saga.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Accounting\\BankAssign\\BankAssign.js",["3865","3866","3867","3868","3869"],"import React, { useEffect, useState, } from \"react\";\r\nimport {\r\n    Card,\r\n    CardBody,\r\n    CardHeader,\r\n    Col,\r\n    Container,\r\n    FormGroup,\r\n    Input,\r\n    Row,\r\n} from \"reactstrap\";\r\nimport paginationFactory, { PaginationListStandalone, PaginationProvider } from \"react-bootstrap-table2-paginator\";\r\nimport ToolkitProvider from \"react-bootstrap-table2-toolkit\";\r\nimport BootstrapTable from \"react-bootstrap-table-next\";\r\nimport { MetaTags } from \"react-meta-tags\";\r\nimport {\r\n    BreadcrumbShowCountlabel,\r\n    Breadcrumb_inputName,\r\n    commonPageField,\r\n    commonPageFieldSuccess,\r\n} from \"../../../store/actions\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { PageLoadingSpinner, SaveButton } from \"../../../components/Common/CommonButton\";\r\nimport {\r\n    breadcrumbReturnFunc,\r\n    CommonConsole,\r\n    loginCompanyID,\r\n    loginPartyID,\r\n    loginUserID,\r\n    metaTagLabel\r\n} from \"../../../components/Common/CommonFunction\";\r\nimport * as url from \"../../../routes/route_url\";\r\nimport * as pageId from \"../../../routes/allPageID\"\r\nimport * as mode from \"../../../routes/PageMode\"\r\nimport { mySearchProps } from \"../../../components/Common/SearchBox/MySearch\";\r\nimport { countlabelFunc } from \"../../../components/Common/CommonPurchaseList\";\r\nimport {\r\n    PartyBankfilter,\r\n    saveBankAssign,\r\n    saveBankAssign_Success,\r\n} from \"../../../store/Accounting/BankAssignRedux/action\";\r\nimport { customAlert } from \"../../../CustomAlert/ConfirmDialog\";\r\n\r\nconst BankAssign = (props) => {\r\n\r\n    const history = useHistory()\r\n    const dispatch = useDispatch();\r\n\r\n    const [pageMode] = useState(mode.defaultsave);//changes\r\n    const [modalCss] = useState(false);\r\n    const [userPageAccessState, setUserAccState] = useState(123);\r\n    const [editCreatedBy,] = useState(\"\");\r\n    const [forceRefresh, setForceRefresh] = useState(false);\r\n\r\n    //Access redux store bankTableList /  'save_ModuleSuccess' action data\r\n    const {\r\n        loading,\r\n        postMsg,\r\n        bankTableList,\r\n        saveBtnloading,\r\n        userAccess } = useSelector((state) => ({\r\n            loading: state.BankAssignReducer.loading,\r\n            saveBtnloading: state.BankAssignReducer.saveBtnloading,\r\n            postMsg: state.BankAssignReducer.postMsg,\r\n            userAccess: state.Login.RoleAccessUpdateData,\r\n            updateMsg: state.BankAssignReducer.updateMessage,\r\n            bankTableList: state.BankAssignReducer.bankTableList,\r\n        }));\r\n\r\n    useEffect(() => {\r\n        const page_Id = pageId.BANK_ASSIGN\r\n        dispatch(commonPageFieldSuccess(null));\r\n        dispatch(commonPageField(page_Id))\r\n        dispatch(PartyBankfilter())\r\n    }, []);\r\n\r\n    const hasShowModal = props.hasOwnProperty(mode.editValue)\r\n\r\n    // userAccess useEffect\r\n    useEffect(() => {\r\n        let userAcc = null;\r\n        let locationPath = history.location.pathname;\r\n\r\n        if (hasShowModal) {\r\n            locationPath = props.masterPath;\r\n        };\r\n\r\n        userAcc = userAccess.find((inx) => {\r\n            return (`/${inx.ActualPagePath}` === locationPath)\r\n        })\r\n\r\n        if (userAcc) {\r\n            setUserAccState(userAcc)\r\n            breadcrumbReturnFunc({ dispatch, userAcc });\r\n        };\r\n    }, [userAccess])\r\n\r\n    useEffect(async () => {\r\n        if ((postMsg.Status === true) && (postMsg.StatusCode === 200)) {\r\n            dispatch(saveBankAssign_Success({ Status: false }))\r\n            dispatch(Breadcrumb_inputName(''))\r\n\r\n            if (pageMode === \"other\") {\r\n                customAlert({\r\n                    Type: 1,\r\n                    Message: postMsg.Message,\r\n                })\r\n            }\r\n            else {\r\n                let isPermission = await customAlert({\r\n                    Type: 1,\r\n                    Status: true,\r\n                    Message: postMsg.Message,\r\n                })\r\n                if (isPermission) {\r\n                    history.push({ pathname: url.BANK_ASSIGN })\r\n                }\r\n            }\r\n        }\r\n        else if (postMsg.Status === true) {\r\n            dispatch(saveBankAssign_Success({ Status: false }))\r\n            customAlert({\r\n                Type: 4,\r\n                Message: JSON.stringify(postMsg.Message),\r\n            })\r\n        }\r\n    }, [postMsg])\r\n\r\n    useEffect(() => {\r\n        dispatch(BreadcrumbShowCountlabel(`${\"Count\"}:${bankTableList.length}`))\r\n    }, [bankTableList])\r\n\r\n    const pagesListColumns = [\r\n        {\r\n            text: \"Name\",\r\n            dataField: \"BankName\",\r\n        },\r\n        {\r\n            text: \" Customer Bank\",\r\n            dataField: \"CustomerBank\",\r\n            formatter: (cellContent, row, key) => {\r\n\r\n                return (<span >\r\n                    <Input type=\"checkbox\"\r\n                        defaultChecked={row.CustomerBank}\r\n                        onChange={(event) => { row.CustomerBank = event.target.checked; }}\r\n                    />\r\n                </span>\r\n                )\r\n            },\r\n        },\r\n        {\r\n            text: \"Depository Bank\",\r\n            dataField: \"IsSelfDepositoryBank\",\r\n            formatExtraData: { forceRefresh, setForceRefresh },\r\n            formatter: (cellContent, row, key, { forceRefresh, setForceRefresh }) => {\r\n                return (<span >\r\n                    <Input type=\"checkbox\"\r\n                        defaultChecked={row.IsSelfDepositoryBank}\r\n                        onChange={(event) => {\r\n                            let check = event.target.checked;\r\n                            //if  check Box checked then set bank row id other wise \"\" (blank)\r\n                            if (!check) {\r\n                                row.IsDefault = false\r\n                            }\r\n                            setForceRefresh(!forceRefresh)\r\n                            row.IsSelfDepositoryBank = check\r\n\r\n                        }}\r\n                    />\r\n                </span>\r\n                )\r\n            },\r\n        },\r\n\r\n        {\r\n            text: \"Show On Invoice\",\r\n            dataField: \"IsDefault\",\r\n            formatExtraData: { tableList: bankTableList, forceRefresh, setForceRefresh },\r\n            formatter: (cellContent, row, key, { tableList, forceRefresh, setForceRefresh }) => {\r\n\r\n                if (row.IsSelfDepositoryBank === true) {\r\n                    return (\r\n                        <Input type=\"radio\"\r\n                            name=\"columnRadio\"\r\n                            checked={row.IsDefault}\r\n                            onChange={(event) => {\r\n                                tableList.forEach(element => {\r\n                                    (row.Bank === element.Bank) ? element.IsDefault = true : element.IsDefault = false\r\n                                });\r\n                                row.IsDefault = event.target.checked;\r\n                                setForceRefresh(!forceRefresh)\r\n                            }\r\n                            }\r\n                        />\r\n                    )\r\n                }\r\n            },\r\n        },\r\n\r\n        {\r\n            text: \"Account No\",\r\n            dataField: \"AccountNo\",\r\n            formatExtraData: { forceRefresh },\r\n            formatter: (value, row, key) => (\r\n                <span >\r\n                    <Input type=\"text\"\r\n                        disabled={!(row.IsSelfDepositoryBank === true)}\r\n                        defaultValue={row.AccountNo}\r\n                        autoComplete=\"off\"\r\n                        onChange={(event) => { row.AccountNo = event.target.value }}\r\n                    />\r\n                </span>\r\n            ),\r\n            headerStyle: (colum, colIndex) => {\r\n                return { width: '140px', textAlign: 'center' };\r\n            }\r\n        },\r\n\r\n        {\r\n            text: \"IFSC\",\r\n            dataField: \"IFSC\",\r\n            formatExtraData: { forceRefresh },\r\n            formatter: (value, row, key) => (\r\n                <Input type=\"text\"\r\n                    disabled={!(row.IsSelfDepositoryBank === true)}\r\n                    defaultValue={row.IFSC}\r\n                    autoComplete=\"off\"\r\n                    onChange={(event) => { row.IFSC = event.target.value }}\r\n                />\r\n            ),\r\n\r\n            headerStyle: (colum, colIndex) => {\r\n                return { width: '140px', textAlign: 'center' };\r\n            }\r\n        },\r\n\r\n        {\r\n            text: \"Branch \",\r\n            dataField: \"BranchName\",\r\n            formatExtraData: { forceRefresh },\r\n            formatter: (value, row, key) => (\r\n\r\n                <Input type=\"text\"\r\n                    disabled={!(row.IsSelfDepositoryBank === true)}\r\n                    defaultValue={row.BranchName}\r\n                    autoComplete=\"off\"\r\n                    onChange={(e) => { row.BranchName = e.target.value }}\r\n                />\r\n            ),\r\n            headerStyle: (colum, colIndex) => {\r\n                return { width: '140px', textAlign: 'center' };\r\n            }\r\n        },\r\n    ];\r\n\r\n    const pageOptions = {\r\n        sizePerPage: 10,\r\n        custom: true,\r\n    };\r\n\r\n    const saveHandler = async (event) => {\r\n        event.preventDefault();\r\n        const btnId = event.target.id;\r\n        try {\r\n            const { assignedBanks, invalidMessages } = bankTableList.reduce(\r\n                (accumulator, bank) => {\r\n                    if (bank.IsSelfDepositoryBank || bank.CustomerBank) {\r\n                        const requiredFields = [\"AccountNo\", \"IFSC\", \"BranchName\"];\r\n                        const missingFields = requiredFields.filter((field) => !bank[field]);\r\n\r\n                        if (bank.IsSelfDepositoryBank && missingFields.length > 0) {\r\n                            const msgString = \"Required \" + missingFields.join(\", \");\r\n                            accumulator.invalidMessages.push({ [bank.BankName]: msgString });\r\n                        }\r\n\r\n                        accumulator.assignedBanks.push({\r\n                            Bank: bank.Bank,\r\n                            CustomerBank: bank.CustomerBank || false,\r\n                            Party: loginPartyID(),\r\n                            IsSelfDepositoryBank: bank.IsSelfDepositoryBank || false,\r\n                            IsDefault: bank.IsDefault || false,\r\n                            AccountNo: bank.AccountNo || \"\",\r\n                            IFSC: bank.IFSC || \"\",\r\n                            BranchName: bank.BranchName || \"\",\r\n                            CreatedBy: loginUserID(),\r\n                            UpdatedBy: loginUserID(),\r\n                            Company: loginCompanyID(),\r\n                        });\r\n                    }\r\n                    return accumulator;\r\n                },\r\n                { assignedBanks: [], invalidMessages: [] }\r\n            );\r\n\r\n            const isDefaultBanck = assignedBanks.filter((bank) => bank.IsDefault).length === 1;\r\n            if (assignedBanks.length === 0 || !isDefaultBanck) {\r\n                customAlert({\r\n                    Type: 3,\r\n                    Message: \"No assigned banks available. Please select bank as default.\",\r\n                });\r\n                return;\r\n            }\r\n\r\n            if (invalidMessages.length > 0) {\r\n                customAlert({\r\n                    Type: 3,\r\n                    Message: invalidMessages,\r\n                });\r\n                return\r\n            }\r\n\r\n            const jsonBody = JSON.stringify(assignedBanks);\r\n            dispatch(saveBankAssign({ jsonBody, btnId }));\r\n\r\n        } catch (error) {\r\n            CommonConsole(error)\r\n        }\r\n    };\r\n\r\n\r\n    // IsEditMode_Css is use of module Edit_mode (reduce page-content marging)\r\n    var IsEditMode_Css = ''\r\n    if ((modalCss) || (pageMode === mode.dropdownAdd)) { IsEditMode_Css = \"-5.5%\" };\r\n\r\n    if (!(userPageAccessState === '')) {\r\n        return (\r\n            <React.Fragment>\r\n                <PageLoadingSpinner isLoading={loading} />\r\n                <MetaTags>{metaTagLabel(userPageAccessState)}</MetaTags>\r\n\r\n                <div className=\"page-content\" style={{ marginTop: IsEditMode_Css, }}>\r\n                    <Container fluid>\r\n                        <Card className=\"text-black\">\r\n                            <CardHeader className=\"card-header   text-black c_card_header\" >\r\n                                <h4 className=\"card-title text-black\">{userPageAccessState.PageDescription}</h4>\r\n                                <p className=\"card-title-desc text-black\">{userPageAccessState.PageDescriptionDetails}</p>\r\n                            </CardHeader>\r\n\r\n                            <CardBody className=\" vh-10 0 text-black\" style={{ backgroundColor: \"#whitesmoke\" }} >\r\n                                <form noValidate>\r\n                                    <Row className=\"\">\r\n                                        <Col md={12}>\r\n                                            <FormGroup>\r\n                                                <Row>\r\n                                                    <PaginationProvider\r\n                                                        pagination={paginationFactory(pageOptions)}\r\n                                                    >\r\n                                                        {({ paginationProps, paginationTableProps }) => (\r\n                                                            <ToolkitProvider\r\n                                                                keyField=\"Bank\"\r\n                                                                data={bankTableList}\r\n                                                                columns={pagesListColumns}\r\n                                                                search\r\n                                                            >\r\n                                                                {toolkitProps => (\r\n                                                                    <React.Fragment>\r\n                                                                        <div className=\"table\">\r\n                                                                            <BootstrapTable\r\n                                                                                keyField={\"Bank\"}\r\n                                                                                bordered={true}\r\n                                                                                striped={false}\r\n                                                                                noDataIndication={<div className=\"text-danger text-center \">Record Not available</div>}\r\n                                                                                classes={\"table align-middle table-nowrap table-hover\"}\r\n                                                                                headerWrapperClasses={\"thead-light\"}\r\n\r\n                                                                                {...toolkitProps.baseProps}\r\n                                                                                {...paginationTableProps}\r\n                                                                            />\r\n                                                                            {countlabelFunc(toolkitProps, paginationProps, dispatch, \"Bank Assign\")}\r\n                                                                            {mySearchProps(toolkitProps.searchProps)}\r\n                                                                        </div>\r\n\r\n                                                                        <Row className=\"align-items-md-center mt-30\">\r\n                                                                            <Col className=\"pagination pagination-rounded justify-content-end mb-2\">\r\n                                                                                <PaginationListStandalone\r\n                                                                                    {...paginationProps}\r\n                                                                                />\r\n                                                                            </Col>\r\n                                                                        </Row>\r\n                                                                    </React.Fragment>\r\n                                                                )\r\n                                                                }\r\n                                                            </ToolkitProvider>\r\n                                                        )\r\n                                                        }\r\n                                                    </PaginationProvider>\r\n\r\n                                                    <Col sm={2}>\r\n                                                        <SaveButton pageMode={pageMode}\r\n                                                            loading={saveBtnloading}\r\n                                                            onClick={saveHandler}\r\n                                                            userAcc={userPageAccessState}\r\n                                                            editCreatedBy={editCreatedBy}\r\n                                                            module={\"BankAssign\"}\r\n                                                        />\r\n                                                    </Col>\r\n                                                </Row>\r\n                                            </FormGroup>\r\n                                        </Col>\r\n                                    </Row>\r\n                                </form>\r\n                            </CardBody>\r\n                        </Card>\r\n                    </Container>\r\n                </div>\r\n            </React.Fragment >\r\n        );\r\n    }\r\n    else {\r\n        return (\r\n            <React.Fragment></React.Fragment>\r\n        )\r\n    }\r\n};\r\n\r\nexport default BankAssign\r\n\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Accounting\\BankAssignRedux\\action.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Accounting\\BankAssignRedux\\actionType.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Accounting\\Receipt\\BulkReceipt.js",["3870","3871","3872","3873","3874","3875"],"import React, { useEffect, useState, } from \"react\";\r\nimport {\r\n    Col,\r\n    FormGroup,\r\n    Input,\r\n    Label,\r\n} from \"reactstrap\";\r\nimport { MetaTags } from \"react-meta-tags\";\r\nimport { BreadcrumbShowCountlabel, commonPageField, commonPageFieldSuccess } from \"../../../store/actions\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { SaveButton } from \"../../../components/Common/CommonButton\";\r\nimport * as _cfunc from \"../../../components/Common/CommonFunction\";\r\nimport * as url from \"../../../routes/route_url\";\r\nimport * as pageId from \"../../../routes/allPageID\"\r\nimport * as mode from \"../../../routes/PageMode\"\r\nimport ToolkitProvider from \"react-bootstrap-table2-toolkit\";\r\nimport BootstrapTable from \"react-bootstrap-table-next\";\r\nimport { mySearchProps } from \"../../../components/Common/SearchBox/MySearch\";\r\nimport { ReceiptGoButtonMaster_Success, saveReceiptMaster, saveReceiptMaster_Success } from \"../../../store/Accounting/Receipt/action\";\r\nimport { customAlert } from \"../../../CustomAlert/ConfirmDialog\";\r\nimport { C_DatePicker } from \"../../../CustomValidateForm\";\r\n\r\nconst BulkRecipt = (props) => {\r\n\r\n    const history = useHistory()\r\n    const dispatch = useDispatch();\r\n\r\n    const [pageMode] = useState(mode.defaultsave)\r\n    const [userPageAccessState, setUserAccState] = useState(123);\r\n\r\n    //Access redux store Data /  'save_ModuleSuccess' action data\r\n    const {\r\n        postMsg,\r\n        ReceiptGoButton,\r\n        saveBtnloading,\r\n        userAccess,\r\n        commonPartyDropSelect } = useSelector((state) => ({\r\n            postMsg: state.ReceiptReducer.postMsg,\r\n            saveBtnloading: state.ReceiptReducer.saveBtnloading,\r\n            ReceiptGoButton: state.ReceiptReducer.ReceiptGoButton,\r\n            userAccess: state.Login.RoleAccessUpdateData,\r\n            commonPartyDropSelect: state.CommonPartyDropdownReducer.commonPartyDropSelect\r\n        }));\r\n\r\n    const location = { ...history.location }\r\n    const hasShowModal = props.hasOwnProperty(mode.editValue)\r\n\r\n    const { Data = [] } = ReceiptGoButton\r\n\r\n    useEffect(() => {\r\n        const page_Id = pageId.BULK_RECIPT\r\n        dispatch(commonPageFieldSuccess(null));\r\n        dispatch(commonPageField(page_Id))\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        // dispatch(BreadcrumbShowCountlabel(`BulkReceipt Count :${Data.length}`))\r\n    }, [ReceiptGoButton]);\r\n\r\n\r\n    useEffect(async () => {\r\n\r\n        if ((postMsg.Status === true) && (postMsg.StatusCode === 200)) {\r\n            dispatch(saveReceiptMaster_Success({ Status: false }))\r\n            dispatch(ReceiptGoButtonMaster_Success([]))\r\n\r\n            if (pageMode === mode.dropdownAdd) {\r\n                customAlert({\r\n                    Type: 1,\r\n                    Message: postMsg.Message,\r\n                })\r\n            }\r\n            else {\r\n                customAlert({\r\n                    Type: 1,\r\n                    Message: postMsg.Message,\r\n                })\r\n                history.push({ pathname: url.RECEIPTS_LIST })\r\n            }\r\n        }\r\n        else if (postMsg.Status === true) {\r\n            dispatch(saveReceiptMaster_Success({ Status: false }))\r\n            customAlert({\r\n                Type: 4,\r\n                Message: JSON.stringify(postMsg.Message),\r\n            })\r\n        }\r\n    }, [postMsg])\r\n\r\n    useEffect(() => {\r\n        let userAcc = null;\r\n        let locationPath = location.pathname;\r\n\r\n        if (hasShowModal) {\r\n            locationPath = props.masterPath;\r\n        };\r\n\r\n        userAcc = userAccess.find((inx) => {\r\n            return (`/${inx.ActualPagePath}` === locationPath)\r\n        })\r\n\r\n        if (userAcc) {\r\n            setUserAccState(userAcc)\r\n            _cfunc.breadcrumbReturnFunc({ dispatch, userAcc });\r\n        };\r\n    }, [userAccess])\r\n\r\n    function CalculateOnchange(e, row, key) {\r\n\r\n        let Calculate = e.target.value\r\n        if (Calculate <= 0) {\r\n            row.Calculate = row.BalanceAmount\r\n\r\n        } else {\r\n            row.Calculate = Calculate\r\n        }\r\n    }\r\n\r\n    const pagesListColumns = [\r\n        {\r\n            text: \"Party\",\r\n            dataField: \"CustomerName\",\r\n        },\r\n        {\r\n            text: \"Invoice Date\",\r\n            dataField: \"InvoiceDate\",\r\n        },\r\n        {\r\n            text: \"Bill No\",\r\n            dataField: \"FullInvoiceNumber\",\r\n        },\r\n        {\r\n            text: \"Bill Amount\",\r\n            dataField: \"GrandTotal\",\r\n            align: () => (\"right\")\r\n        },\r\n        {\r\n            text: \"Paid\",\r\n            dataField: \"PaidAmount\",\r\n            align: () => (\"right\")\r\n        },\r\n        {\r\n            text: \"Bal Amt\",\r\n            dataField: \"BalanceAmount\",\r\n            align: () => (\"right\")\r\n        },\r\n        {\r\n            text: \"Calculate\",\r\n            dataField: \"\",\r\n\r\n            formatter: (cellContent, row, key) => {\r\n\r\n                return (<span style={{ justifyContent: 'center' }}>\r\n                    <Input\r\n                        id=\"\"\r\n                        key={row.Invoice}\r\n                        defaultValue={row.BalanceAmount}\r\n                        disabled={true}\r\n                        className=\"text-end\"\r\n                        onChange={e => { CalculateOnchange(e, row, key) }}\r\n                    />\r\n                </span>)\r\n            },\r\n            headerStyle: () => {\r\n                return { width: '180px', textAlign: 'center' };\r\n            }\r\n        }\r\n\r\n    ];\r\n\r\n    const SaveHandler = (event) => {\r\n\r\n        event.preventDefault();\r\n        const btnId = event.target.id\r\n        const arr1 = []\r\n        try {\r\n            _cfunc.btnIsDissablefunc({ btnId, state: true })\r\n\r\n            Data.forEach(i => {\r\n                const arr =\r\n                {\r\n                    ReceiptDate: _cfunc.currentDate_ymd,\r\n                    Description: \"\",\r\n                    AmountPaid: i.GrandTotal,\r\n                    BalanceAmount: i.BalanceAmount,\r\n                    OpeningBalanceAdjusted: \"\",\r\n                    DocumentNo: \"\",\r\n                    AdvancedAmountAjusted: \"\",\r\n                    Customer: i.Customer,\r\n                    ChequeDate: \"\",\r\n                    Party: commonPartyDropSelect.value,\r\n                    ReceiptMode: 31,\r\n                    ReceiptType: 29,\r\n                    CreatedBy: _cfunc.loginUserID(),\r\n                    UpdatedBy: _cfunc.loginUserID(),\r\n                    Bank: \"\",\r\n                    DepositorBank: \"\",\r\n                    ReceiptInvoices: [\r\n                        {\r\n                            Invoice: i.Invoice,\r\n                            GrandTotal: i.GrandTotal,\r\n                            PaidAmount: i.Calculate <= 0 ? i.GrandTotal : i.Calculate.toFixed(2),\r\n                        }],\r\n                    PaymentReceipt: []\r\n                }\r\n                arr1.push(arr)\r\n            })\r\n\r\n            const jsonBody = JSON.stringify({\r\n                BulkData: arr1\r\n            })\r\n            dispatch(saveReceiptMaster({ jsonBody, btnId }));\r\n\r\n        } catch (e) { _cfunc.btnIsDissablefunc({ btnId, state: false }) }\r\n    };\r\n\r\n\r\n    if (!(userPageAccessState === '')) {\r\n        return (\r\n            <React.Fragment>\r\n                <MetaTags>{_cfunc.metaTagLabel(userPageAccessState)}</MetaTags>\r\n                <div className=\"page-content\" style={{ marginBottom: \"5cm\" }}>\r\n\r\n                    <form noValidate>\r\n                        <div className=\"px-2 c_card_filter header text-black mb-1\" >\r\n                            <div className=\" row \">\r\n                                <Col sm=\"6\">\r\n                                    <FormGroup className=\" row mt-2\" >\r\n                                        <Label className=\"col-sm-1 p-2\"\r\n                                            style={{ width: \"115px\", marginRight: \"0.4cm\" }}>Receipt Date</Label>\r\n                                        <Col sm=\"7\">\r\n                                            <C_DatePicker\r\n                                                name='Date'\r\n                                                value={_cfunc.currentDate_ymd}\r\n                                                disabled={true}\r\n                                            />\r\n                                        </Col>\r\n                                    </FormGroup>\r\n                                </Col >\r\n                                <Col sm=\"3\" className=\"\">\r\n                                    <FormGroup className=\" row mt-2 \" >\r\n                                        <Label className=\"col-sm-1 p-2\"\r\n                                            style={{ width: \"120px\" }}>Recepiet Mode :</Label>\r\n                                        <Col sm=\"3\">\r\n                                            <Label className=\" mt-2\">Cash</Label>\r\n                                        </Col>\r\n                                    </FormGroup>\r\n                                </Col>\r\n                            </div>\r\n                        </div>\r\n\r\n\r\n                        <ToolkitProvider\r\n\r\n                            keyField=\"id\"\r\n                            data={Data}\r\n                            columns={pagesListColumns}\r\n\r\n                            search\r\n                        >\r\n                            {toolkitProps => (\r\n                                <React.Fragment>\r\n                                    <div className=\"table\">\r\n                                        <BootstrapTable\r\n                                            keyField={\"id\"}\r\n                                            bordered={true}\r\n                                            striped={false}\r\n                                            noDataIndication={<div className=\"text-danger text-center \">Record Not available</div>}\r\n                                            classes={\"table align-middle table-nowrap table-hover\"}\r\n                                            headerWrapperClasses={\"thead-light\"}\r\n\r\n                                            {...toolkitProps.baseProps}\r\n\r\n                                        />\r\n\r\n                                        {mySearchProps(toolkitProps.searchProps)}\r\n                                    </div>\r\n\r\n                                </React.Fragment>\r\n                            )\r\n                            }\r\n                        </ToolkitProvider>\r\n\r\n                        {Data.length > 0 ?\r\n                            <FormGroup>\r\n                                <Col sm={2} style={{ marginLeft: \"-40px\" }} className={\"row save1\"}>\r\n                                    <SaveButton pageMode={pageMode}\r\n                                        onClick={SaveHandler}\r\n                                        loading={saveBtnloading}\r\n                                        userAcc={userPageAccessState}\r\n                                    />\r\n\r\n                                </Col>\r\n                            </FormGroup >\r\n                            : null\r\n                        }\r\n\r\n                    </form >\r\n                </div >\r\n            </React.Fragment >\r\n        );\r\n    }\r\n    else {\r\n        return (\r\n            <React.Fragment></React.Fragment>\r\n        )\r\n    }\r\n};\r\n\r\nexport default BulkRecipt\r\n\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Sales\\SalesReturnRedux\\reducer.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Sales\\SalesReturnRedux\\saga.js",["3876"],"import { call, delay, put, takeLatest } from \"redux-saga/effects\";\r\nimport * as  apiCall from \"../../../helpers/backend_helper\";\r\nimport * as actionType from \"./actionType\";\r\nimport * as action from \"./action\";\r\nimport { amountCommaSeparateFunc, listpageConcatDateAndTime, date_dmy_func } from \"../../../components/Common/CommonFunction\";\r\n\r\n// Bank list Dropdown API\r\nfunction* Invoice_No_List_GenFunc({ jsonBody }) {\r\n\r\n    try {\r\n        const response = yield call(apiCall.Invoice_No_list_API, jsonBody);\r\n        yield put(action.InvoiceNumberSuccess(response.Data));\r\n    } catch (error) { yield put(action.SalesReturnApiErrorAction()) }\r\n}\r\n\r\n// add button api for sales return\r\nfunction* save_SalesReturn_GenFunc({ config }) {\r\n    debugger\r\n    for (let pair of config.formData.entries()) {\r\n        console.log(pair[0], pair[1]);\r\n    }\r\n    try {\r\n        const response = yield call(apiCall.SalesReturn_post_API, config);\r\n        yield put(action.saveSalesReturnMaster_Success(response));\r\n    } catch (error) { yield put(action.SalesReturnApiErrorAction()) }\r\n}\r\n\r\n// GoButton Post API for Sales Return List\r\nfunction* SalesReturn_List_GenFun({ filters }) {\r\n\r\n    try {\r\n\r\n        const response = yield call(apiCall.SalesReturn_list_API, filters);\r\n        const newList = yield response.Data.map((i) => {\r\n            i[\"recordsAmountTotal\"] = i.GrandTotal;  // Breadcrumb Count total\r\n            i.GrandTotal = amountCommaSeparateFunc(i.GrandTotal)\r\n            //tranzaction date is only for fiterand page field but UI show transactionDateLabel\r\n            i.dashboardReturnDate = date_dmy_func(i.ReturnDate);\r\n            i[\"transactionDate\"] = i.CreatedOn;\r\n            i[\"transactionDateLabel\"] = listpageConcatDateAndTime(i.ReturnDate, i.CreatedOn);\r\n\r\n            return i\r\n        })\r\n        yield put(action.salesReturnListAPISuccess(newList));\r\n    } catch (error) { yield put(action.SalesReturnApiErrorAction()) }\r\n}\r\n\r\n// delete API\r\nfunction* delete_SalesReturn_ID_GenFunc({ config }) {\r\n\r\n    try {\r\n        const response = yield call(apiCall.SalesReturn_Delete_API, config);\r\n        yield put(action.delete_SalesReturn_Id_Succcess(response))\r\n    } catch (error) { yield put(action.SalesReturnApiErrorAction()) }\r\n}\r\n\r\nfunction* SalesReturn_confirmID_GenFunc({ config }) {\r\n\r\n    try {\r\n        const response = yield call(apiCall.SalesReturn_SingleGet_API, config);\r\n        response.Data[0][\"viewMode\"] = config.viewMode;\r\n        response.Data[0][\"ReturnID\"] = config.editId;\r\n        response.Data[0].ReturnItems.map((index) => {\r\n            index[\"selectCheck\"] = false\r\n            return index\r\n        });\r\n        yield put(action.confirm_SalesReturn_Id_Succcess(response))\r\n    } catch (error) { yield put(action.SalesReturnApiErrorAction()) }\r\n}\r\n\r\nfunction* Return_Approve_GenFunc({ config }) {\r\n    try {\r\n        const response = yield call(apiCall.Return_Approve_API, config);\r\n\r\n        yield put(action.returnApprove_Success(response))\r\n    } catch (error) { yield put(action.SalesReturnApiErrorAction()) }\r\n}\r\n\r\nfunction* addButton_saleReturn_GenFunc({ config }) {\r\n    try {\r\n        const { jsonBody, InvoiceId, returnMode } = config;\r\n\r\n        if (returnMode === 2) {//returnMode 1 = \"itemWise\"\r\n            const response = yield call(apiCall.SalesReturn_add_button_api_For_Item, jsonBody);\r\n\r\n            yield put(action.SalesReturnAddBtn_Action_Succcess(response));\r\n        }\r\n        else {//returnMode 2 = \"invoiceWise\"\r\n            let response = yield call(apiCall.SalesReturn_add_button_api_For_Invoice, InvoiceId);\r\n            response.Data = response.Data.InvoiceItems\r\n            yield put(action.SalesReturnAddBtn_Action_Succcess(response))\r\n        }\r\n\r\n    } catch (error) { yield put(action.SalesReturnApiErrorAction()) }\r\n}\r\n\r\nfunction* sendToSSButton_GenFunc({ config }) { // Update Order by subPageMode\r\n\r\n    const { ReturnID } = config\r\n    try {\r\n        const response = yield call(apiCall.Send_To_Superstockiest_button_post_API, config);\r\n        response[\"ReturnItemID\"] = ReturnID\r\n        yield put(action.post_Send_to_superStockiest_Id_Succcess(response))\r\n    } catch (error) { yield put(action.SalesReturnApiErrorAction()) }\r\n}\r\n\r\nfunction* SalesReturnSaga() {\r\n    yield takeLatest(actionType.INVOICE_NUMBER, Invoice_No_List_GenFunc)\r\n    yield takeLatest(actionType.SAVE_SALES_RETURN_MASTER, save_SalesReturn_GenFunc)\r\n    yield takeLatest(actionType.SALES_RETURN_LIST_API, SalesReturn_List_GenFun)\r\n    yield takeLatest(actionType.DELETE_SALES_RETURN_ID, delete_SalesReturn_ID_GenFunc)\r\n    yield takeLatest(actionType.SALES_RETURN_ADD_BUTTON_ACTION, addButton_saleReturn_GenFunc)\r\n    yield takeLatest(actionType.SALES_RETURN_CONFIRM_BUTTON_ACTION, SalesReturn_confirmID_GenFunc)\r\n    yield takeLatest(actionType.POST_SENT_TO_SUPERSTOCKIEST_ID, sendToSSButton_GenFunc)\r\n    yield takeLatest(actionType.RETURN_APPROVE_ACTION, Return_Approve_GenFunc)\r\n\r\n}\r\nexport default SalesReturnSaga;  ","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Sales\\SalesReturnRedux\\actionType.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Sales\\SalesReturnRedux\\action.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\CustomValidateForm\\CInput.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\CustomValidateForm\\RegexPattern.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Accounting\\CreditDebitNote\\CreditList.js",["3877","3878","3879","3880","3881","3882","3883","3884","3885","3886","3887","3888","3889","3890"],"import React, { useEffect, useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport {\r\n    BreadcrumbRadioButtonView,\r\n    BreadcrumbShowCountlabel,\r\n    commonPageFieldList,\r\n    commonPageFieldListSuccess\r\n} from \"../../../store/actions\";\r\nimport CommonPurchaseList from \"../../../components/Common/CommonPurchaseList\"\r\nimport { useHistory } from \"react-router-dom\";\r\nimport * as report from '../../../Reports/ReportIndex'\r\nimport * as pageId from \"../../../routes/allPageID\";\r\nimport * as url from \"../../../routes/route_url\";\r\nimport { initialFiledFunc } from \"../../../components/Common/validationFunction\";\r\nimport * as mode from \"../../../routes/PageMode\"\r\nimport { getpdfReportdata } from \"../../../store/Utilites/PdfReport/actions\";\r\nimport { Edit_Credit_List_API, } from \"../../../helpers/backend_helper\";\r\nimport { Col, FormGroup, Label } from \"reactstrap\";\r\nimport Select from \"react-select\";\r\nimport { Go_Button, PageLoadingSpinner } from \"../../../components/Common/CommonButton\";\r\nimport {\r\n    CredietDebitType,\r\n    Edit_CreditList_ID,\r\n    GetCreditList,\r\n    deleteCreditlistSuccess,\r\n    delete_CreditList_ID,\r\n    GetCreditListSuccess,\r\n    Uploaded_Credit_Debit_EInvoiceSuccess,\r\n    Cancel_Credit_Debit_EInvoiceSuccess\r\n} from \"../../../store/Accounting/CreditRedux/action\";\r\nimport { Retailer_List, Retailer_List_Success, getSupplierSuccess } from \"../../../store/CommonAPI/SupplierRedux/actions\";\r\nimport * as _cfunc from \"../../../components/Common/CommonFunction\"\r\nimport { C_DatePicker } from \"../../../CustomValidateForm\";\r\nimport PartyDropdown_Common from \"../../../components/Common/PartyDropdown\";\r\nimport { customAlert } from \"../../../CustomAlert/ConfirmDialog\";\r\n\r\nconst CreditList = () => {\r\n\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n    const currentDate_ymd = _cfunc.date_ymd_func();\r\n\r\n    const fileds = {\r\n        FromDate: currentDate_ymd,\r\n        ToDate: currentDate_ymd,\r\n        Customer: { value: \"\", label: \"All\" },\r\n        NoteType: { value: \"\", label: \"All\" },\r\n    }\r\n\r\n    const [state, setState] = useState(() => initialFiledFunc(fileds))\r\n    const hasPagePath = history.location.pathname\r\n\r\n    const [pageMode, setpageMode] = useState(mode.defaultList)\r\n    const [subPageMode] = useState(history.location.pathname);\r\n    const [otherState, setOtherState] = useState({\r\n        masterPath: '',\r\n        buttonMsgLable: '',\r\n        page_Id: ''\r\n    });\r\n\r\n    const reducers = useSelector(\r\n        (state) => ({\r\n            listBtnLoading: (state.CredietDebitReducer.listBtnLoading || state.PdfReportReducers.ReportBtnLoading),\r\n            tableList: state.CredietDebitReducer.CreditList,\r\n            deleteMsg: state.CredietDebitReducer.deleteMsg,\r\n            Uploaded_Credit_Debit_EInvoice: state.CredietDebitReducer.Uploaded_Credit_Debit_EInvoice,\r\n            Cancel_Credit_Debit_EInvoice: state.CredietDebitReducer.Cancel_Credit_Debit_EInvoice,\r\n            updateMsg: state.BOMReducer.updateMsg,\r\n            postMsg: state.OrderReducer.postMsg,\r\n            RetailerList: state.CommonAPI_Reducer.RetailerList,\r\n            CreditDebitType: state.CredietDebitReducer.CreditDebitType,\r\n            editData: state.CredietDebitReducer.editData,\r\n            userAccess: state.Login.RoleAccessUpdateData,\r\n            pageField: state.CommonPageFieldReducer.pageFieldList\r\n        })\r\n    );\r\n\r\n    const { pageField, RetailerList, CreditDebitType, listBtnLoading, Cancel_Credit_Debit_EInvoice, Uploaded_Credit_Debit_EInvoice } = reducers;\r\n    const values = { ...state.values }\r\n\r\n    const action = {\r\n        editId: Edit_CreditList_ID,\r\n        deleteId: delete_CreditList_ID,\r\n        deleteSucc: deleteCreditlistSuccess\r\n    }\r\n\r\n    useEffect(() => {\r\n        let page_Id = '';\r\n        let page_Mode = mode.defaultList;\r\n        let masterPath = '';\r\n        let buttonMsgLable = \"\"\r\n        let newBtnPath = '';\r\n\r\n        if (subPageMode === url.CREDIT_LIST) {\r\n            page_Id = pageId.CREDIT_LIST;\r\n            masterPath = url.CREDIT_NOTE;\r\n            newBtnPath = url.CREDIT_NOTE;\r\n            buttonMsgLable = \"Credit\"\r\n        }\r\n        else if (subPageMode === url.DEBIT_LIST) {\r\n            page_Id = pageId.DEBIT_LIST;\r\n            masterPath = url.DEBIT_NOTE;\r\n            newBtnPath = url.DEBIT_NOTE;\r\n            buttonMsgLable = \"Debit\"\r\n        }\r\n        else if (subPageMode === url.GOODS_CREDIT_LIST) {\r\n            page_Id = pageId.GOODS_CREDIT_LIST;\r\n            masterPath = url.GOODS_CREDIT_NOTE;\r\n            newBtnPath = url.GOODS_CREDIT_NOTE;\r\n            buttonMsgLable = \"Credit\"\r\n        }\r\n        else if (subPageMode === url.GOODS_DEBIT_LIST) {\r\n            page_Id = pageId.GOODS_DEBIT_LIST;\r\n            masterPath = url.GOODS_DEBIT_NOTE;\r\n            newBtnPath = url.GOODS_DEBIT_NOTE;\r\n            buttonMsgLable = \"Debit\"\r\n        };\r\n\r\n        setOtherState({ masterPath, newBtnPath, buttonMsgLable, page_Id })\r\n        setpageMode(page_Mode)\r\n        dispatch(commonPageFieldListSuccess(null))\r\n        dispatch(commonPageFieldList(page_Id))\r\n        dispatch(BreadcrumbRadioButtonView(true));\r\n\r\n        return () => {\r\n            dispatch(GetCreditListSuccess([]));\r\n            dispatch(Retailer_List_Success([]));\r\n            dispatch(getSupplierSuccess([]));\r\n        }\r\n    }, []);\r\n\r\n\r\n    //   Note Type Api for Type identify\r\n    useEffect(() => {\r\n        const jsonBody = JSON.stringify({\r\n            Company: _cfunc.loginCompanyID(),\r\n            TypeID: 5\r\n        });\r\n        dispatch(CredietDebitType(jsonBody));\r\n    }, []);\r\n\r\n    // Retailer DropDown List Type 1 for credit list drop down\r\n    useEffect(() => {\r\n        const jsonBody = JSON.stringify({\r\n            Type: 1,\r\n            PartyID: _cfunc.loginSelectedPartyID(),\r\n            CompanyID: _cfunc.loginCompanyID()\r\n        });\r\n        dispatch(Retailer_List(jsonBody));\r\n    }, []);\r\n\r\n    const customerOptions = RetailerList.map((index) => ({\r\n        value: index.id,\r\n        label: index.Name,\r\n    }));\r\n\r\n    customerOptions.unshift({\r\n        value: \"\",\r\n        label: \" All\"\r\n    });\r\n\r\n    useEffect(() => {\r\n        const jsonBody = JSON.stringify({\r\n            Type: 4,\r\n            PartyID: _cfunc.loginSelectedPartyID(),\r\n            CompanyID: _cfunc.loginCompanyID()\r\n        });\r\n        dispatch(Retailer_List(jsonBody));\r\n    }, []);\r\n\r\n    // const NoteType = []\r\n    // CreditDebitType.forEach(index => {\r\n    //     if (otherState.buttonMsgLable === \"Credit\") {\r\n    //         if ((index.Name === \"CreditNote\") || (index.Name === \"Goods CreditNote\")) {\r\n    //             const arr = {\r\n    //                 value: index.id,\r\n    //                 label: index.Name,\r\n    //             }\r\n    //             NoteType.push(arr)\r\n    //         }\r\n    //     }\r\n    //     else {\r\n    //         if ((index.Name === \"DebitNote\") || (index.Name === \"Goods DebitNote\")) {\r\n    //             const arr = {\r\n    //                 value: index.id,\r\n    //                 label: index.Name,\r\n    //             }\r\n    //             NoteType.push(arr)\r\n    //         }\r\n    //     }\r\n    // })\r\n    // NoteType.unshift({ value: \"\", label: \" All\" });\r\n\r\n    useEffect(() => {\r\n        if (CreditDebitType.length > 0) {\r\n            goButtonHandler(true)\r\n        }\r\n    }, [CreditDebitType]);\r\n\r\n    function noteType_BySubPageMode() {\r\n        if (subPageMode === url.GOODS_CREDIT_LIST) {\r\n            return CreditDebitType.find((index) => index.Name === \"Goods CreditNote\")?.id\r\n        }\r\n        else if (subPageMode === url.GOODS_DEBIT_LIST) {\r\n            return CreditDebitType.find((index) => index.Name === \"Goods DebitNote\")?.id;\r\n        }\r\n        else if (subPageMode === url.CREDIT_LIST) {\r\n            return CreditDebitType.find((index) => index.Name === \"CreditNote\")?.id\r\n        }\r\n        else if (subPageMode === url.DEBIT_LIST) {\r\n            return CreditDebitType.find((index) => index.Name === \"DebitNote\")?.id;\r\n        }\r\n\r\n    }\r\n    function goButtonHandler() {\r\n\r\n        const jsonBody = JSON.stringify({\r\n            FromDate: values.FromDate,\r\n            ToDate: values.ToDate,\r\n            CustomerID: values.Customer.value,\r\n            PartyID: _cfunc.loginSelectedPartyID(),\r\n            NoteType: noteType_BySubPageMode(),\r\n            Note: otherState.buttonMsgLable\r\n        });\r\n        dispatch(GetCreditList(jsonBody, hasPagePath));\r\n    }\r\n\r\n    function downBtnFunc(config) {\r\n        config[\"ReportType\"] = report.Credit;\r\n        dispatch(getpdfReportdata(Edit_Credit_List_API, config))\r\n\r\n    }\r\n\r\n    function fromdateOnchange(e, date) {\r\n        setState((i) => {\r\n            const a = { ...i }\r\n            a.values.FromDate = date;\r\n            a.hasValid.FromDate.valid = true\r\n            return a\r\n        })\r\n    }\r\n\r\n    function todateOnchange(e, date) {\r\n        setState((i) => {\r\n            const a = { ...i }\r\n            a.values.ToDate = date;\r\n            a.hasValid.ToDate.valid = true\r\n            return a\r\n        })\r\n    }\r\n\r\n    function CustomerOnChange(e) {\r\n        setState((i) => {\r\n            const a = { ...i }\r\n            a.values.Customer = e;\r\n            a.hasValid.Customer.valid = true\r\n            return a\r\n        })\r\n    }\r\n\r\n    useEffect(() => {   // Uploaded EInvoice useEffect \r\n        if (Uploaded_Credit_Debit_EInvoice.Status === true && Uploaded_Credit_Debit_EInvoice.StatusCode === 200) {\r\n            dispatch(Uploaded_Credit_Debit_EInvoiceSuccess({ Status: false }))\r\n            goButtonHandler(\"event\")\r\n            customAlert({\r\n                Type: 1,\r\n                Message: JSON.stringify(Uploaded_Credit_Debit_EInvoice.Message),\r\n            })\r\n        }\r\n\r\n        else if (Uploaded_Credit_Debit_EInvoice.Status === true) {\r\n            dispatch(Uploaded_Credit_Debit_EInvoiceSuccess({ Status: false }))\r\n            customAlert({\r\n                Type: 3,\r\n                Message: JSON.stringify(Uploaded_Credit_Debit_EInvoice.Message),\r\n            })\r\n        }\r\n    }, [Uploaded_Credit_Debit_EInvoice]);\r\n\r\n\r\n\r\n    useEffect(async () => {   // Uploaded Cancel E-Invoice useEffect \r\n\r\n        if (Cancel_Credit_Debit_EInvoice.Status === true && Cancel_Credit_Debit_EInvoice.StatusCode === 200) {\r\n            dispatch(Cancel_Credit_Debit_EInvoiceSuccess({ Status: false }))\r\n            goButtonHandler(\"event\")\r\n            customAlert({\r\n                Type: 1,\r\n                Message: Cancel_Credit_Debit_EInvoice.Message,\r\n            })\r\n            return\r\n        }\r\n\r\n        else if (Cancel_Credit_Debit_EInvoice.Status === true) {\r\n            dispatch(Cancel_Credit_Debit_EInvoiceSuccess({ Status: false }))\r\n            customAlert({\r\n                Type: 3,\r\n                Message: JSON.stringify(Cancel_Credit_Debit_EInvoice.Message),\r\n            })\r\n            return\r\n        }\r\n    }, [Cancel_Credit_Debit_EInvoice]);\r\n\r\n    function NoteTypeOnChange(e) {\r\n        setState((i) => {\r\n            const a = { ...i }\r\n            a.values.NoteType = e;\r\n            a.hasValid.NoteType.valid = true\r\n            return a\r\n        })\r\n    }\r\n\r\n    function partySelectButtonHandler() {\r\n        const jsonBody = JSON.stringify({\r\n            Type: 4,\r\n            PartyID: _cfunc.loginSelectedPartyID(),\r\n            CompanyID: _cfunc.loginCompanyID()\r\n        });\r\n        dispatch(Retailer_List(jsonBody));\r\n    }\r\n\r\n    function partySelectOnChangeHandler() {\r\n        dispatch(GetCreditListSuccess([]));\r\n        dispatch(Retailer_List_Success([]));\r\n        setState((i) => {\r\n            const a = { ...i }\r\n            a.values.Customer = { value: \"\", label: \"All\" }\r\n            a.values.NoteType = { value: \"\", label: \"All\" }\r\n            a.hasValid.Customer.valid = true;\r\n            a.hasValid.NoteType.valid = true;\r\n            return a\r\n        })\r\n    }\r\n    const HeaderContent = () => {\r\n        return (\r\n            <div className=\"px-2 c_card_filter text-black\" >\r\n                <div className=\"row\" >\r\n                    <Col sm={2} className=\"\">\r\n                        <FormGroup className=\" mb-2 row mt-3 \" >\r\n                            <Label className=\"col-sm-4 p-2\"\r\n                                style={{ width: \"66px\" }}>FromDate</Label>\r\n                            <Col sm={7}>\r\n                                <C_DatePicker\r\n                                    name='FromDate'\r\n                                    value={values.FromDate}\r\n                                    onChange={fromdateOnchange}\r\n                                />\r\n                            </Col>\r\n                        </FormGroup>\r\n                    </Col>\r\n\r\n                    <Col sm={2} className=\"\">\r\n                        <FormGroup className=\" row mt-3 \" >\r\n                            <Label className=\"col-sm-4 p-2\"\r\n                                style={{ width: \"60px\" }}>ToDate</Label>\r\n                            <Col sm={7}>\r\n                                <C_DatePicker\r\n                                    name=\"ToDate\"\r\n                                    value={values.ToDate}\r\n                                    onChange={todateOnchange}\r\n                                />\r\n                            </Col>\r\n                        </FormGroup>\r\n                    </Col>\r\n\r\n                    <Col sm={3}>\r\n                        <FormGroup className=\" row mt-3 \" >\r\n                            <Label className=\"col-sm-2 p-2\"\r\n                                style={{ width: \"85px\" }}>Customer</Label>\r\n                            <Col sm={7}>\r\n                                <Select\r\n                                    name=\"Customer\"\r\n                                    classNamePrefix=\"select2-Customer\"\r\n                                    value={values.Customer}\r\n                                    options={customerOptions}\r\n                                    onChange={CustomerOnChange}\r\n                                    styles={{\r\n                                        menu: provided => ({ ...provided, zIndex: 2 })\r\n                                    }}\r\n                                />\r\n                            </Col>\r\n                        </FormGroup>\r\n                    </Col >\r\n\r\n                    {/* <Col sm={3}>\r\n                    <FormGroup className=\" row mt-3 \" >\r\n                        <Label className=\"col-md-3 p-2\"\r\n                            style={{ width: \"90px\" }}>NoteType</Label>\r\n                        <Col sm={8}>\r\n                            <Select\r\n                                name=\"Customer\"\r\n                                classNamePrefix=\"select2-Customer\"\r\n                                value={values.NoteType}\r\n                                options={NoteType}\r\n                                onChange={NoteTypeOnChange}\r\n                                styles={{\r\n                                    menu: provided => ({ ...provided, zIndex: 2 })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                    </FormGroup>\r\n                </Col > */}\r\n\r\n                    <Col sm={1} className=\"mt-3 \" style={{ paddingLeft: \"100px\" }}>\r\n                        <Go_Button onClick={goButtonHandler} loading={listBtnLoading} />\r\n                    </Col>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <PageLoadingSpinner isLoading={(listBtnLoading || !pageField)} />\r\n            <div className=\"page-content\">\r\n                <PartyDropdown_Common pageMode={pageMode}\r\n                    goButtonHandler={partySelectButtonHandler}\r\n                    changeButtonHandler={partySelectOnChangeHandler} />\r\n                {\r\n                    (pageField) ?\r\n                        <CommonPurchaseList\r\n                            action={action}\r\n                            reducers={reducers}\r\n                            showBreadcrumb={false}\r\n                            masterPath={otherState.masterPath}\r\n                            newBtnPath={otherState.newBtnPath}\r\n                            makeBtnShow={otherState.makeBtnShow}\r\n                            pageMode={pageMode}\r\n                            HeaderContent={HeaderContent}\r\n                            goButnFunc={goButtonHandler}\r\n                            downBtnFunc={downBtnFunc}\r\n                            ButtonMsgLable={otherState.buttonMsgLable}\r\n                            deleteName={\"FullNoteNumber\"}\r\n                            MasterModal={otherState.MasterModal}\r\n                            totalAmountShow={true}\r\n\r\n                        />\r\n                        : null\r\n                }\r\n            </div>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default CreditList;","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\ImportFieldAddRedux\\reducer.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\ImportFieldAddRedux\\saga.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\ImportFieldAddRedux\\actionType.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\ImportFieldAddRedux\\action.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\ImportMaster\\FieldAdd\\ImportFieldAddList.js",["3891","3892"],"import React, { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport CommonListPage from \"../../../../components/Common/CommonMasterListPage\";\r\nimport {\r\n  commonPageFieldList,\r\n  commonPageFieldListSuccess\r\n} from \"../../../../store/actions\";\r\nimport * as pageId from \"../../../../routes/allPageID\"\r\nimport * as url from \"../../../../routes/route_url\";\r\nimport ImportFieldAdd from \"./ImportFieldAdd\";\r\nimport {\r\n  delete_ImportFiledAdd,\r\n  delete_ImportFiledAdd_Success,\r\n  edit_ImportFiledAdd,\r\n  post_ImportFiledAdd,\r\n  save_ImportFiledAdd_Success,\r\n  update_ImportFiledAdd_Success\r\n} from \"../../../../store/Administrator/ImportFieldAddRedux/action\";\r\nimport { loginCompanyID } from \"../../../../components/Common/CommonFunction\";\r\nimport { Listloader, PageLoadingSpinner } from \"../../../../components/Common/CommonButton\";\r\n\r\nconst ImportFieldAddList = () => {\r\n\r\n  const dispatch = useDispatch();\r\n  const reducers = useSelector(\r\n    (state) => ({\r\n      loading: state.ImportFieldAdd_Reducer.loading,\r\n      listBtnLoading: state.ImportFieldAdd_Reducer.listBtnLoading,\r\n      tableList: state.ImportFieldAdd_Reducer.getList,\r\n      editData: state.ImportFieldAdd_Reducer.editData,\r\n      updateMsg: state.ImportFieldAdd_Reducer.updateMsg,\r\n      deleteMsg: state.ImportFieldAdd_Reducer.deleteMsg,\r\n      postMsg: state.ImportFieldAdd_Reducer.postMsg,\r\n      userAccess: state.Login.RoleAccessUpdateData,\r\n      pageField: state.CommonPageFieldReducer.pageFieldList\r\n    })\r\n  );\r\n\r\n  const action = {\r\n    getList: post_ImportFiledAdd,\r\n    editId: edit_ImportFiledAdd,\r\n    deleteId: delete_ImportFiledAdd,\r\n    postSucc: save_ImportFiledAdd_Success,\r\n    updateSucc: update_ImportFiledAdd_Success,\r\n    deleteSucc: delete_ImportFiledAdd_Success\r\n  }\r\n\r\n  useEffect(() => {\r\n    const page_Id = pageId.IMPORT_FIELD_ADD_LIST\r\n    dispatch(commonPageFieldListSuccess(null))\r\n    dispatch(commonPageFieldList(page_Id))\r\n    dispatch(post_ImportFiledAdd(getlistBody()));\r\n  }, []);\r\n\r\n  function getlistBody() {\r\n    return JSON.stringify({\r\n      CompanyID: loginCompanyID(),\r\n    });\r\n  }\r\n\r\n\r\n  const { pageField } = reducers\r\n  return (\r\n    <React.Fragment>\r\n      <PageLoadingSpinner isLoading={(reducers.loading || !pageField)} />\r\n      {\r\n        (pageField) &&\r\n        <CommonListPage\r\n          action={action}\r\n          reducers={reducers}\r\n          MasterModal={ImportFieldAdd}\r\n          getListbodyFunc={getlistBody}\r\n          masterPath={url.IMPORT_FIELD_ADD}\r\n          ButtonMsgLable={\"ImportField\"}\r\n          deleteName={\"FieldName\"}\r\n        />\r\n      }\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nexport default ImportFieldAddList;\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\ImportMaster\\FieldAdd\\ImportFieldAdd.js",["3893","3894","3895","3896","3897","3898","3899","3900"],"import React, { useState, useEffect } from \"react\";\r\nimport Select from \"react-select\";\r\nimport {\r\n    Card,\r\n    CardBody,\r\n    Col,\r\n    Container,\r\n    Row,\r\n    Label,\r\n    CardHeader,\r\n    FormGroup,\r\n    Input\r\n} from \"reactstrap\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { MetaTags } from \"react-meta-tags\";\r\nimport {\r\n    commonPageField,\r\n    commonPageFieldSuccess,\r\n    getControlTypes,\r\n    getFieldValidations\r\n} from \"../../../../store/actions\";\r\nimport { Breadcrumb_inputName } from \"../../../../store/Utilites/Breadcrumb/actions\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {\r\n    comAddPageFieldFunc,\r\n    formValid,\r\n    initialFiledFunc,\r\n    onChangeSelect,\r\n    onChangeText,\r\n    resetFunction\r\n} from \"../../../../components/Common/validationFunction\";\r\nimport { SaveButton } from \"../../../../components/Common/CommonButton\";\r\nimport {\r\n    breadcrumbReturnFunc,\r\n    loginUserID,\r\n    btnIsDissablefunc,\r\n    loginCompanyID,\r\n    metaTagLabel\r\n} from \"../../../../components/Common/CommonFunction\";\r\nimport * as url from \"../../../../routes/route_url\";\r\nimport * as pageId from \"../../../../routes/allPageID\"\r\nimport * as mode from \"../../../../routes/PageMode\"\r\nimport {\r\n    edit_ImportFiledAdd_Success,\r\n    get_ImportExcelType,\r\n    save_ImportFiledAdd,\r\n    save_ImportFiledAdd_Success,\r\n    update_ImportFiledAdd,\r\n    update_ImportFiledAdd_Success\r\n} from \"../../../../store/Administrator/ImportFieldAddRedux/action\";\r\nimport { customAlert } from \"../../../../CustomAlert/ConfirmDialog\";\r\nimport { C_Select } from \"../../../../CustomValidateForm\";\r\n\r\nconst ImportFieldAdd = (props) => {\r\n\r\n    const dispatch = useDispatch();\r\n    const history = useHistory()\r\n\r\n    const fileds = {\r\n        id: \"\",\r\n        ImportExcelTypeName: \"\",\r\n        FieldName: \"\",\r\n        ControlTypeName: \"\",\r\n        FieldValidationName: \"\",\r\n        IsCompulsory: false\r\n    }\r\n\r\n    const [state, setState] = useState(() => initialFiledFunc(fileds))\r\n\r\n    const [modalCss, setModalCss] = useState(false);\r\n    const [pageMode, setPageMode] = useState(mode.defaultsave);\r\n    const [userPageAccessState, setUserAccState] = useState('');\r\n    const [editCreatedBy, seteditCreatedBy] = useState(\"\");\r\n\r\n    const {\r\n        postMsg,\r\n        pageField,\r\n        updateMsg,\r\n        controlType = [],\r\n        importExcelType = [],\r\n        validationType = [],\r\n        fieldvalidationDropDownLoading,\r\n        userAccess } = useSelector((state) => ({\r\n            postMsg: state.ImportFieldAdd_Reducer.postMsg,\r\n            updateMsg: state.ImportFieldAdd_Reducer.updateMsg,\r\n            userAccess: state.Login.RoleAccessUpdateData,\r\n            controlType: state.H_Pages.ControlTypes,\r\n            importExcelType: state.ImportFieldAdd_Reducer.importExcelType,\r\n            validationType: state.H_Pages.FieldValidations,\r\n            pageField: state.CommonPageFieldReducer.pageField,\r\n            fieldvalidationDropDownLoading:state.H_Pages.fieldvalidationDropDownLoading,\r\n        }));\r\n\r\n    useEffect(() => {\r\n        const page_Id = pageId.IMPORT_FIELD_ADD\r\n        dispatch(commonPageFieldSuccess(null));\r\n        dispatch(commonPageField(page_Id))\r\n        dispatch(getControlTypes());\r\n        dispatch(get_ImportExcelType());\r\n\r\n    }, []);\r\n\r\n    const values = { ...state.values }\r\n    const { isError } = state;\r\n    const { fieldLabel } = state;\r\n\r\n    const location = { ...history.location }\r\n    const hasShowloction = location.hasOwnProperty(mode.editValue)\r\n    const hasShowModal = props.hasOwnProperty(mode.editValue)\r\n\r\n    // userAccess useEffect\r\n    useEffect(() => {\r\n\r\n        let userAcc = null;\r\n        let locationPath = location.pathname;\r\n\r\n        if (hasShowModal) {\r\n            locationPath = props.masterPath;\r\n        };\r\n\r\n        userAcc = userAccess.find((inx) => {\r\n            return (`/${inx.ActualPagePath}` === locationPath)\r\n        })\r\n\r\n        if (userAcc) {\r\n            setUserAccState(userAcc)\r\n            breadcrumbReturnFunc({ dispatch, userAcc });\r\n        };\r\n    }, [userAccess])\r\n\r\n    // This UseEffect 'SetEdit' data and 'autoFocus' while this Component load First Time.\r\n    useEffect(() => {\r\n\r\n        if ((hasShowloction || hasShowModal)) {\r\n\r\n            let hasEditVal = null\r\n            if (hasShowloction) {\r\n                setPageMode(location.pageMode)\r\n                hasEditVal = location.editValue\r\n            }\r\n            else if (hasShowModal) {\r\n                hasEditVal = props.editValue\r\n                setPageMode(props.pageMode)\r\n                setModalCss(true)\r\n            }\r\n\r\n            if (hasEditVal) {\r\n\r\n                const { id, FieldName, ControlTypeName, ControlTypeID, IsCompulsory, FieldValidationName, FieldValidationID, ImportExcelTypeName,ImportExcelTypeID } = hasEditVal\r\n                const { values, fieldLabel, hasValid, required, isError } = { ...state }\r\n\r\n                hasValid.FieldName.valid = true;\r\n                hasValid.ControlTypeName.valid = true;\r\n                hasValid.IsCompulsory.valid = true;\r\n                hasValid.FieldValidationName.valid = true;\r\n                hasValid.ImportExcelTypeName.valid = true;\r\n\r\n                values.FieldName = FieldName;\r\n                values.ControlTypeName = { label: ControlTypeName, value: ControlTypeID };\r\n                values.IsCompulsory = IsCompulsory;\r\n                values.FieldValidationName = { label: FieldValidationName, value: FieldValidationID };\r\n                values.ImportExcelTypeName = { label: ImportExcelTypeName, value: ImportExcelTypeID };\r\n                values.id = id\r\n                setState({ values, fieldLabel, hasValid, required, isError })\r\n                dispatch(Breadcrumb_inputName(hasEditVal.FieldName))\r\n                dispatch(getFieldValidations(hasEditVal.ControlTypeID))\r\n                seteditCreatedBy(hasEditVal.CreatedBy)\r\n            }\r\n            dispatch(edit_ImportFiledAdd_Success({ Status: false }))\r\n        }\r\n    }, [])\r\n\r\n    // This UseEffect clear Form Data and when modules Save Successfully.\r\n    useEffect(async () => {\r\n\r\n        if ((postMsg.Status === true) && (postMsg.StatusCode === 200)) {\r\n            dispatch(save_ImportFiledAdd_Success({ Status: false }))\r\n            setState(() => resetFunction(fileds, state)) //Clear form values \r\n            dispatch(Breadcrumb_inputName(''))\r\n\r\n            if (pageMode === \"other\") {\r\n                customAlert({\r\n                    Type: 1,\r\n                    Message: postMsg.Message,\r\n                })\r\n            }\r\n            else {\r\n                let isPermission = await customAlert({\r\n                    Type: 1,\r\n                    Status: true,\r\n                    Message: postMsg.Message,\r\n                })\r\n                if (isPermission) {\r\n                    history.push({ pathname: url.IMPORT_FIELD_ADD_LIST })\r\n                }\r\n            }\r\n        }\r\n        else if (postMsg.Status === true) {\r\n            dispatch(save_ImportFiledAdd_Success({ Status: false }))\r\n            customAlert({\r\n                Type: 4,\r\n                 Message: JSON.stringify(postMsg.Message),\r\n            })\r\n        }\r\n    }, [postMsg])\r\n\r\n    useEffect(() => {\r\n        if (updateMsg.Status === true && updateMsg.StatusCode === 200 && !modalCss) {\r\n            history.push({\r\n                pathname: url.IMPORT_FIELD_ADD_LIST,\r\n            })\r\n        } else if (updateMsg.Status === true && !modalCss) {\r\n            dispatch(update_ImportFiledAdd_Success({ Status: false }));\r\n            customAlert({\r\n                Type: 3,\r\n                Message: JSON.stringify(updateMsg.Message),\r\n            })\r\n        }\r\n    }, [updateMsg, modalCss]);\r\n\r\n    useEffect(() => {\r\n\r\n        if (pageField) {\r\n            const fieldArr = pageField.PageFieldMaster\r\n            comAddPageFieldFunc({ state, setState, fieldArr })\r\n        }\r\n    }, [pageField])\r\n\r\n    const controlType_Options = controlType.map((index) => ({\r\n        value: index.id,\r\n        label: index.Name,\r\n    }));\r\n\r\n    const importExcelType_Options = importExcelType.map((index) => ({\r\n        value: index.id,\r\n        label: index.Name,\r\n    }));\r\n\r\n    const validationType_Options = validationType.map((index) => ({\r\n        value: index.id,\r\n        label: index.Name,\r\n    }));\r\n\r\n    function controlTypeHandler(hasSelect, evn) {\r\n        dispatch(getFieldValidations(hasSelect.value))\r\n        onChangeSelect({ hasSelect, evn, state, setState })\r\n    }\r\n\r\n    const SaveHandler = async (event) => {\r\n        event.preventDefault();\r\n        const btnId = event.target.id\r\n        try {\r\n            if (formValid(state, setState)) {\r\n                btnIsDissablefunc({ btnId, state: true })\r\n\r\n                const jsonBody = JSON.stringify({\r\n                    FieldName: values.FieldName,\r\n                    IsCompulsory: values.IsCompulsory,\r\n                    ControlType: values.ControlTypeName.value,\r\n                    ImportExcelType: values.ImportExcelTypeName.value,\r\n                    FieldValidation: values.FieldValidationName.value,\r\n                    Company: loginCompanyID(),\r\n                    CreatedBy: loginUserID(),\r\n                    UpdatedBy: loginUserID(),\r\n                });\r\n                if (pageMode === mode.edit) {\r\n                    dispatch(update_ImportFiledAdd({ jsonBody, updateId: values.id, btnId }));\r\n                }\r\n                else {\r\n                    dispatch(save_ImportFiledAdd({ jsonBody, btnId }));\r\n                }\r\n            }\r\n        } catch (e) { btnIsDissablefunc({ btnId, state: false }) }\r\n    };\r\n\r\n    // IsEditMode_Css is use of module Edit_mode (reduce page-content marging)\r\n    var IsEditMode_Css = ''\r\n    if ((modalCss) || (pageMode === mode.dropdownAdd)) { IsEditMode_Css = \"-5.5%\" };\r\n\r\n    if (!(userPageAccessState === '')) {\r\n        return (\r\n            <React.Fragment>\r\n                <div className=\"page-content\" style={{ marginTop: IsEditMode_Css }}>\r\n                    <MetaTags>{metaTagLabel(userPageAccessState)}</MetaTags>\r\n                    <Container fluid  >\r\n\r\n                        <Card className=\"text-black\" >\r\n                            <CardHeader className=\"card-header   text-black c_card_header\" >\r\n                                <h4 className=\"card-title text-black\">{userPageAccessState.PageDescription}</h4>\r\n                                <p className=\"card-title-desc text-black\">{userPageAccessState.PageDescriptionDetails}</p>\r\n                            </CardHeader>\r\n                            <CardBody className=\" vh-10 0 text-black\" style={{ backgroundColor: \"#whitesmoke\" }} >\r\n                                <form noValidate>\r\n\r\n                                    <Row className=\"\">\r\n                                        <Col md={12} >\r\n                                            <Card >\r\n                                                <CardBody className=\"c_card_body\">\r\n                                                    <Row>\r\n                                                        <FormGroup className=\"mb-2 col col-sm-4 \">\r\n                                                            <Label>{fieldLabel.ImportExcelTypeName} </Label>\r\n                                                            <Select\r\n                                                                name=\"ImportExcelTypeName\"\r\n                                                                value={values.ImportExcelTypeName}\r\n                                                                autoFocus={true}\r\n                                                                className=\"react-dropdown\"\r\n                                                                classNamePrefix=\"dropdown\"\r\n                                                                styles={{\r\n                                                                    menu: provided => ({ ...provided, zIndex: 2 })\r\n                                                                }}\r\n                                                                options={importExcelType_Options}\r\n                                                                onChange={controlTypeHandler}\r\n                                                            />\r\n                                                            {isError.ImportExcelTypeName.length > 0 && (\r\n                                                                <span className=\"text-danger f-8\"><small>{isError.ImportExcelTypeName}</small></span>\r\n                                                            )}\r\n                                                        </FormGroup>\r\n                                                    </Row>\r\n\r\n                                                    <Row>\r\n                                                        <FormGroup className=\"mb-2 col col-sm-4 \" >\r\n                                                            <Label htmlFor=\"validationCustom01\">{fieldLabel.FieldName} </Label>\r\n                                                            <Input\r\n                                                                name=\"FieldName\"\r\n                                                                value={values.FieldName}\r\n                                                                type=\"text\"\r\n                                                                className={isError.FieldName.length > 0 ? \"is-invalid form-control\" : \"form-control\"}\r\n                                                                placeholder=\"Please Enter Name\"\r\n                                                                autoComplete='off'\r\n                                                                onChange={(event) => {\r\n                                                                    onChangeText({ event, state, setState })\r\n                                                                    dispatch(Breadcrumb_inputName(event.target.value))\r\n                                                                }}\r\n                                                            />\r\n                                                            {isError.FieldName.length > 0 && (\r\n                                                                <span className=\"invalid-feedback\">{isError.FieldName}</span>\r\n                                                            )}\r\n                                                        </FormGroup>\r\n                                                    </Row>\r\n\r\n                                                    <Row>\r\n                                                        <FormGroup className=\"mb-2 col col-sm-4 \">\r\n                                                            <Label htmlFor=\"validationCustom01\">{fieldLabel.ControlTypeName} </Label>\r\n                                                            <Select\r\n                                                                name=\"ControlTypeName\"\r\n                                                                value={values.ControlTypeName}\r\n                                                                className=\"react-dropdown\"\r\n                                                                classNamePrefix=\"dropdown\"\r\n                                                                options={controlType_Options}\r\n                                                                onChange={controlTypeHandler}\r\n                                                            />\r\n                                                            {isError.ControlTypeName.length > 0 && (\r\n                                                                <span className=\"text-danger f-8\"><small>{isError.ControlTypeName}</small></span>\r\n                                                            )}\r\n                                                        </FormGroup>\r\n                                                    </Row>\r\n\r\n                                                    <Row>\r\n                                                        <FormGroup className=\"mb-2 col col-sm-4 \" >\r\n                                                            <Label htmlFor=\"validationCustom01\">{fieldLabel.FieldValidationName} </Label>\r\n                                                            <C_Select\r\n                                                                name=\"FieldValidationName\"\r\n                                                                value={values.FieldValidationName}\r\n                                                                className=\"react-dropdown\"\r\n                                                                classNamePrefix=\"dropdown\"\r\n                                                                options={validationType_Options}\r\n                                                                isLoading={fieldvalidationDropDownLoading}\r\n                                                                onChange={(hasSelect, evn) => onChangeSelect({ hasSelect, evn, state, setState })}\r\n                                                            />\r\n                                                            {isError.FieldValidationName.length > 0 && (\r\n                                                                <span className=\"text-danger f-8\"><small>{isError.FieldValidationName}</small></span>\r\n                                                            )}\r\n                                                        </FormGroup>\r\n                                                    </Row>\r\n\r\n                                                    <FormGroup className=\"mb-2 col col-sm-5\">\r\n                                                        <Row className=\"justify-content-md-left\">\r\n                                                            <Label htmlFor=\"horizontal-firstname-input\" className=\"col-sm-3 col-form-label\" >{fieldLabel.IsCompulsory}  </Label>\r\n                                                            <Col md={2} style={{ marginTop: '9px' }} >\r\n                                                                <div className=\"form-check form-switch form-switch-md mb-3\">\r\n                                                                    <Input type=\"checkbox\" className=\"form-check-input\"\r\n                                                                        checked={values.IsCompulsory}\r\n                                                                        name=\"IsCompulsory\"\r\n                                                                        onChange={(e) => {\r\n                                                                            setState((i) => {\r\n                                                                                const a = { ...i }\r\n                                                                                a.values.IsCompulsory = e.target.checked;\r\n                                                                                return a\r\n                                                                            })\r\n                                                                        }}\r\n                                                                    />\r\n                                                                </div>\r\n                                                            </Col>\r\n                                                        </Row>\r\n                                                    </FormGroup>\r\n\r\n                                                    <FormGroup>\r\n                                                        <Row >\r\n                                                            <Col sm={2}>\r\n                                                                <SaveButton pageMode={pageMode}\r\n                                                                    onClick={SaveHandler}\r\n                                                                    userAcc={userPageAccessState}\r\n                                                                    editCreatedBy={editCreatedBy}\r\n                                                                    module={\"ImportFieldAdd\"}\r\n                                                                />\r\n                                                            </Col>\r\n                                                        </Row>\r\n                                                    </FormGroup>\r\n                                                </CardBody>\r\n                                            </Card>\r\n                                        </Col>\r\n                                    </Row>\r\n                                </form>\r\n                            </CardBody>\r\n                        </Card>\r\n                    </Container>\r\n                </div>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n    else {\r\n        return (\r\n            <React.Fragment></React.Fragment>\r\n        )\r\n    }\r\n};\r\nexport default ImportFieldAdd\r\n\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Accounting\\CreditRedux\\saga.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Accounting\\CreditRedux\\reducer.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Accounting\\CreditRedux\\action.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Accounting\\CreditRedux\\actionType.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\Reports\\CRDRNote Report\\Page.js",["3901","3902","3903","3904","3905"],"\r\n\r\nimport jsPDF from \"jspdf\";\r\nimport \"jspdf-autotable\";\r\nimport * as style from './ReportStyle'\r\nimport { Data1, dataGenrator } from \"./DemoData\";\r\nimport { CurrentTime, compareGSTINState, currentDate_dmy, date_dmy_func } from \"../../components/Common/CommonFunction\";\r\n\r\nvar pageHeder = function (doc, data) {\r\n    style.pageBorder(doc, data);                           // Page Border\r\n    style.pageHeder(doc, data);                            // Report Title \r\n    style.reportHeder1(doc, data);\r\n    style.reportHeder3(doc, data);                          //Invoice ID , Date \r\n};\r\n\r\nfunction reportBody(doc, data) {\r\n    const isIGST = compareGSTINState(data.CustomerGSTIN, data.PartyGSTIN)\r\n    if (isIGST) {\r\n        style.tableBodyWithIGST(doc, data);                 //table Body\r\n    } else {\r\n        style.tableBody(doc, data);\r\n    }\r\n}\r\n\r\nfunction pageFooter(doc, data, islast, array) {\r\n    if (((data.NoteType === \"DebitNote\") || (data.NoteType === \"CreditNote\"))) {\r\n        style.reportFooterForPlainCredit_Debit(doc, data);                           //Report Footer\r\n    } else {\r\n        style.reportFooter(doc, data);                           //Report Footer\r\n    }\r\n    style.pageFooter(doc, data, islast, array);              //page Footer\r\n}\r\n\r\nconst generateReportPage = (doc, data) => {\r\n    pageHeder(doc, data);\r\n    reportBody(doc, data);\r\n    pageFooter(doc, data);\r\n}\r\n\r\nconst InvioceReporta5 = async (data) => {\r\n\r\n    if (data.CRDRNoteUploads.length > 0) {\r\n\r\n        if (data.CRDRNoteUploads[0].QRCodeUrl !== null) {\r\n            data[\"isQR\"] = true;\r\n        } else {\r\n            data[\"isQR\"] = false;\r\n        }\r\n    }\r\n    var doc = new jsPDF('p', 'pt', 'a4');\r\n\r\n    if (data.CRDRNoteUploads.length > 0) {\r\n        try {\r\n            if (data.CRDRNoteUploads.length > 0) {\r\n                const url = data.CRDRNoteUploads[0].QRCodeUrl;\r\n                let desiredPart = null;\r\n                const urlObject = new URL(url);\r\n                desiredPart = urlObject.pathname;\r\n                if (urlObject.host !== \"pro.mastersindia.co\") {\r\n                    data[\"url\"] = url\r\n                } else {\r\n                    const image = await loadImage(`/E_invoiceQRCode${desiredPart}`);\r\n                    debugger\r\n                    if (image) {\r\n                        doc.addImage(image.currentSrc, 'JPEG', 323, 18, 83, 83);\r\n                        console.log(image.currentSrc)\r\n                    } else {\r\n                        doc.text('Image Not Found', 323, 18);\r\n                    }\r\n                }\r\n\r\n            }\r\n\r\n        } catch (w) { }\r\n    }\r\n\r\n    function loadImage(url) {\r\n        return new Promise((resolve, reject) => {\r\n            const img = new Image();\r\n            img.onload = () => resolve(img);\r\n            img.onerror = () => reject();\r\n            img.src = url;\r\n        });\r\n    }\r\n\r\n\r\n    var doc = new jsPDF('l', 'pt', 'a5');\r\n    if (Array.isArray(data)) {\r\n    } else {\r\n        const Data = [data];\r\n        Data.forEach((item, index) => {\r\n            item[\"isMultiPrint\"] = false\r\n            generateReportPage(doc, item);\r\n            if (index !== Data.length - 1) {\r\n                doc.addPage();\r\n            }\r\n        });\r\n    }\r\n\r\n    doc.setProperties({\r\n        title: `Credit Note Report /${data.Customer}/${date_dmy_func(data.CRDRNoteDate)} `\r\n    });\r\n\r\n    function generateSaveAndOpenPDFReport() {\r\n        const pdfUrl = URL.createObjectURL(doc.output('blob'));\r\n        window.open(pdfUrl);\r\n    }\r\n    generateSaveAndOpenPDFReport();\r\n\r\n}\r\n\r\nexport default InvioceReporta5;\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\Reports\\CRDRNote Report\\ReportStyle.js",["3906","3907","3908","3909","3910"],"\r\nimport * as table from './TableData'\r\nimport { numberWithCommas, toWords } from \"../Report_common_function\";\r\nimport upi_qr_code from \"../../assets/images/upi_qr_code.png\"\r\nimport { date_dmy_func, convertOnlyTimefunc, convertTimefunc, currentDate_dmy, CurrentTime, compareGSTINState } from \"../../components/Common/CommonFunction\";\r\n\r\n\r\nexport const pageBorder = (doc) => {\r\n    doc.setDrawColor(0, 0, 0);\r\n    doc.setLineWidth(0.5)\r\n    doc.line(570, 16, 30, 16);//horizontal line (Top)\r\n    doc.line(30, 393, 30, 16);//vertical line (left)\r\n    doc.line(570, 393, 570, 16);//vertical line (Right)\r\n    doc.line(570, 393, 30, 393);//horizontal line (Bottom)   \r\n}\r\nlet initial_y = 0\r\n\r\nexport const pageHeder = (doc, data) => {\r\n\r\n    doc.setFont('Tahoma')\r\n    doc.setFont(undefined, 'bold')\r\n    doc.setFontSize(15)\r\n    if (data.NoteType === \"Goods CreditNote\") {\r\n        doc.text('GOODS CREDIT NOTE', 180, 35,)\r\n    } else if (data.NoteType === \"DebitNote\") {\r\n        doc.text(' DEBIT NOTE', 180, 35,)\r\n    } else if (data.NoteType === \"Goods DebitNote\") {\r\n        doc.text('GOODS DEBIT NOTE', 180, 35,)\r\n    } else if (data.NoteType === \"CreditNote\") {\r\n        doc.text('CREDIT NOTE', 180, 35,)\r\n    }\r\n    doc.setDrawColor(0, 0, 0);\r\n    doc.line(570, 45, 30, 45) //Full horizontal line Bill by Upper line\r\n    doc.setFontSize(7)\r\n    doc.text('Original For Buyer', 33, 28,)\r\n\r\n}\r\n\r\nexport const reportHeder1 = (doc, data) => {\r\n\r\n    doc.setFontSize(10)\r\n    doc.setFont(undefined, 'bold')\r\n    doc.text(\"Billed by\", 80, 55)    //bill by \r\n    doc.text('Billed to', 280, 55)   //billed to\r\n    doc.text('Details of Note', 440, 55) //Details of Transport\r\n    doc.line(570, 45, 30, 45);//horizontal line  when header on next page bottom line\r\n    doc.line(570, 60, 30, 60);// full horizontal bill by bill to below line \r\n    doc.line(30, 350, 30, 16);//vertical left 1\r\n    doc.line(570, 350, 570, 16);//vertical left 2\r\n\r\n\r\n\r\n    var BilledByStyle = {\r\n\r\n        didDrawCell: (data1) => {\r\n\r\n            const rowIdx = data1.row.index;\r\n            const colIdx = data1.column.index;\r\n            if (rowIdx === 0 && colIdx === 0) {\r\n                let x = data1.cursor.x + 2\r\n                let y = data1.cursor.y + 8\r\n                doc.setFontSize(8)\r\n                doc.setFont(undefined, 'bold')\r\n                doc.text('Party: ', x, y)\r\n            };\r\n            if (rowIdx === 1 && colIdx === 0) {\r\n\r\n                let x = data1.cursor.x + 2\r\n                let y = data1.cursor.y + 8\r\n                doc.setFontSize(8)\r\n                doc.setFont(undefined, 'bold')\r\n                doc.text('Address: ', x, y)\r\n            };\r\n            if (rowIdx === 2 && colIdx === 0) {\r\n\r\n                let x = data1.cursor.x + 2\r\n                let y = data1.cursor.y + 8\r\n                doc.setFontSize(8)\r\n                doc.setFont(undefined, 'bold')\r\n                doc.text('State: ', x, y)\r\n            };\r\n            if (rowIdx === 3 && colIdx === 0) {\r\n\r\n                let x = data1.cursor.x + 2\r\n                let y = data1.cursor.y + 8\r\n                doc.setFontSize(8)\r\n                doc.setFont(undefined, 'bold')\r\n                doc.text('GSTIN: ', x, y)\r\n            };\r\n            if (rowIdx === 4 && colIdx === 0) {\r\n\r\n                let x = data1.cursor.x + 2\r\n                let y = data1.cursor.y + 8\r\n                doc.setFontSize(8)\r\n                doc.setFont(undefined, 'bold')\r\n                doc.text('FSSAI No: ', x, y)\r\n            };\r\n            if (rowIdx === 5 && colIdx === 0) {\r\n\r\n                let x = data1.cursor.x + 2\r\n                let y = data1.cursor.y + 8\r\n                doc.setFontSize(8)\r\n                doc.setFont(undefined, 'bold')\r\n                doc.text('Mobile No: ', x, y)\r\n            };\r\n\r\n        },\r\n        margin: {\r\n            top: 45, left: 30, right: 35,\r\n        },\r\n        showHead: 'always',\r\n        theme: 'plain',\r\n        styles: {\r\n            overflow: 'linebreak',\r\n            fontSize: 8,\r\n            height: 0,\r\n        },\r\n        bodyStyles: {\r\n            columnWidth: 'wrap',\r\n            textColor: \"black\",\r\n            cellPadding: ((data.NoteType === \"DebitNote\") || (data.NoteType === \"CreditNote\")) ? 3 : 1,\r\n            fontSize: 8,\r\n            fontStyle: 'normal',\r\n            lineColor: [0, 0, 0]\r\n        },\r\n        columnStyles: {\r\n            0: {\r\n                valign: \"top\",\r\n                columnWidth: 190,\r\n                halign: 'lfet',\r\n            }\r\n\r\n        },\r\n        tableLineColor: \"black\",\r\n        startY: 62,\r\n\r\n    };\r\n    var BilledToStyle = {\r\n        didDrawCell: (data1) => {\r\n\r\n            const rowIdx = data1.row.index;\r\n            const colIdx = data1.column.index;\r\n            if (rowIdx === 0 && colIdx === 0) {\r\n                let x = data1.cursor.x + 2\r\n                let y = data1.cursor.y + 8\r\n                doc.setFontSize(8)\r\n                doc.setFont(undefined, 'bold')\r\n                doc.text('Customer: ', x, y)\r\n            };\r\n            if (rowIdx === 1 && colIdx === 0) {\r\n\r\n                let x = data1.cursor.x + 2\r\n                let y = data1.cursor.y + 8\r\n                doc.setFontSize(8)\r\n                doc.setFont(undefined, 'bold')\r\n                doc.text('Address: ', x, y)\r\n            };\r\n            if (rowIdx === 2 && colIdx === 0) {\r\n\r\n                let x = data1.cursor.x + 2\r\n                let y = data1.cursor.y + 8\r\n                doc.setFontSize(8)\r\n                doc.setFont(undefined, 'bold')\r\n                doc.text('State: ', x, y)\r\n            };\r\n            if (rowIdx === 3 && colIdx === 0) {\r\n\r\n                let x = data1.cursor.x + 2\r\n                let y = data1.cursor.y + 8\r\n                doc.setFontSize(8)\r\n                doc.setFont(undefined, 'bold')\r\n                doc.text('GSTIN: ', x, y)\r\n            };\r\n            if (rowIdx === 4 && colIdx === 0) {\r\n\r\n                let x = data1.cursor.x + 2\r\n                let y = data1.cursor.y + 8\r\n                doc.setFontSize(8)\r\n                doc.setFont(undefined, 'bold')\r\n                doc.text('FSSAI No: ', x, y)\r\n            };\r\n            if (rowIdx === 5 && colIdx === 0) {\r\n\r\n                let x = data1.cursor.x + 2\r\n                let y = data1.cursor.y + 8\r\n                doc.setFontSize(8)\r\n                doc.setFont(undefined, 'bold')\r\n                doc.text('Mobile No: ', x, y)\r\n            };\r\n\r\n        },\r\n        margin: {\r\n            top: 45, left: 220, right: 35,\r\n        },\r\n        showHead: 'always',\r\n        theme: 'plain',\r\n        styles: {\r\n            overflow: 'linebreak',\r\n            fontSize: 8,\r\n            height: 0,\r\n        },\r\n        bodyStyles: {\r\n            columnWidth: 'wrap',\r\n            textColor: \"black\",\r\n            cellPadding: ((data.NoteType === \"DebitNote\") || (data.NoteType === \"CreditNote\")) ? 3 : 1,\r\n            fontSize: 8,\r\n\r\n            fontStyle: 'normal',\r\n            lineColor: [0, 0, 0]\r\n        },\r\n        columnStyles: {\r\n            0: {\r\n                valign: \"top\",\r\n                columnWidth: 188,\r\n                halign: 'lfet',\r\n            },\r\n        },\r\n        tableLineColor: \"black\",\r\n        startY: 62,\r\n\r\n    };\r\n    var DetailsOfTransportStyle = {\r\n        didDrawCell: (data1) => {\r\n            const rowIdx = data1.row.index;\r\n            const colIdx = data1.column.index;\r\n            if (rowIdx === 0 && colIdx === 0) {\r\n                let x = data1.cursor.x + 2\r\n                let y = data1.cursor.y + 8\r\n                doc.setFontSize(8)\r\n                doc.setFont(undefined, 'bold')\r\n                doc.text('Type: ', x, y)\r\n            };\r\n            if (rowIdx === 1 && colIdx === 0) {\r\n\r\n                let x = data1.cursor.x + 2\r\n                let y = data1.cursor.y + 8\r\n                doc.setFontSize(8)\r\n                doc.setFont(undefined, 'bold')\r\n                doc.text('Comment: ', x, y)\r\n            };\r\n            if (rowIdx === 2 && colIdx === 0) {\r\n\r\n                let x = data1.cursor.x + 2\r\n                let y = data1.cursor.y + 8\r\n                doc.setFontSize(8)\r\n                doc.setFont(undefined, 'bold')\r\n\r\n                if (data.isQR) {\r\n                    doc.text('IRN No: ', x, y)\r\n                }\r\n            };\r\n            if (rowIdx === 3 && colIdx === 0) {\r\n\r\n                let x = data1.cursor.x + 2\r\n                let y = data1.cursor.y + 8\r\n                doc.setFontSize(8)\r\n                doc.setFont(undefined, 'bold')\r\n                if (data.isQR) {\r\n                    doc.text('ACK No: ', x, y)\r\n                }\r\n\r\n            };\r\n            if (rowIdx === 4 && colIdx === 0) {\r\n\r\n                let x = data1.cursor.x + 2\r\n                let y = data1.cursor.y + 8\r\n                doc.setFontSize(8)\r\n                doc.setFont(undefined, 'bold')\r\n                doc.text('IRN No: ', x, y)\r\n            };\r\n\r\n\r\n        },\r\n        margin: {\r\n            top: 45, left: 408, right: 35,\r\n        },\r\n        showHead: 'always',\r\n        theme: 'plain',\r\n        headerStyles: { cellPadding: 1, },\r\n        styles: {\r\n            overflow: 'linebreak',\r\n            fontSize: 8,\r\n            height: 0,\r\n        },\r\n        bodyStyles: {\r\n            columnWidth: 'wrap',\r\n            textColor: [30, 30, 30],\r\n            cellPadding: ((data.NoteType === \"DebitNote\") || (data.NoteType === \"CreditNote\")) ? 3 : 1,\r\n            fontSize: 8,\r\n            textColor: \"black\",\r\n            fontStyle: 'normal',\r\n            lineColor: [0, 0, 0]\r\n        },\r\n        columnStyles: {\r\n            0: {\r\n                valign: \"top\",\r\n                columnWidth: 162,\r\n                halign: 'lfet',\r\n            },\r\n        },\r\n        tableLineColor: \"black\",\r\n\r\n        startY: 62,\r\n    };\r\n\r\n    const priLength = () => {\r\n        let final_y = doc.previousAutoTable.finalY\r\n        if (final_y > initial_y) {\r\n            initial_y = final_y\r\n        }\r\n    }\r\n\r\n    doc.autoTable(table.BilledBy, table.BilledByRow(data), BilledByStyle);\r\n    console.log(\"first\", doc.previousAutoTable.finalY)\r\n    priLength()\r\n\r\n    doc.autoTable(table.BilledTo, table.BilledToRow(data), BilledToStyle);\r\n    console.log(\"Second\", doc.previousAutoTable.finalY)\r\n    priLength()\r\n\r\n    doc.autoTable(table.DetailsOfTransport, table.DetailsOfTransportRow(data), DetailsOfTransportStyle);\r\n    console.log(\"third\", doc.previousAutoTable.finalY)\r\n    priLength()\r\n\r\n}\r\n\r\n\r\nexport const reportHeder3 = (doc, data) => {\r\n    doc.setFontSize(9)\r\n    doc.setDrawColor(0, 0, 0);\r\n    doc.line(570, 30, 408, 30) //horizontal line 1 billby upper\r\n    doc.line(408, 45, 408, 16);//vertical Line header\r\n    // doc.line(570, 44, 408, 44) //horizontal line 1 billby upper\r\n\r\n    doc.setFont(undefined, 'bold')\r\n\r\n    if (((data.NoteType === \"DebitNote\") || (data.NoteType === \"Goods DebitNote\"))) {\r\n        doc.text(`Debit Note No:   ${data.FullNoteNumber}`, 410, 25)\r\n        var date = date_dmy_func(data.CRDRNoteDate)\r\n        var time = convertOnlyTimefunc(data.CreatedOn)\r\n        doc.text(`Debit Note Date: ${date}  ${time}`, 410, 40)\r\n    } else if ((data.NoteType === \"CreditNote\") || (data.NoteType === \"Goods CreditNote\")) {\r\n        doc.text(`Credit Note No:   ${data.FullNoteNumber}`, 410, 25)\r\n        var date = date_dmy_func(data.CRDRNoteDate)\r\n        var time = convertOnlyTimefunc(data.CreatedOn)\r\n        doc.text(`Credit Note Date: ${date}  ${time}`, 410, 40)\r\n    }\r\n\r\n}\r\n\r\n\r\nexport const reportFooter = (doc, data) => {\r\n    if (data.isQR) {\r\n        doc.addImage(data.url, 'JPEG', 340, 306, 95, 89)\r\n    }\r\n\r\n    doc.setDrawColor(0, 0, 0);\r\n    doc.line(570, 308, 30, 308);//horizontal line  (4)\r\n    doc.line(570, 380, 435, 380);//horizontal line  (5)\r\n\r\n    doc.line(435, 308, 435, 393);//vertical line (3)\r\n    doc.line(340, 308, 340, 393);//vertical line (2)\r\n\r\n    const a = data.CRDRNoteItems.map((data) => ({\r\n\r\n        CGST: Number(data.CGST),\r\n        SGST: Number(data.SGST),\r\n        BasicAmount: Number(data.BasicAmount),\r\n        Discount: Number(data.DiscountAmount),\r\n        IGST: Number(data.IGST)\r\n    }));\r\n    var totalCGST = 0;\r\n    var totalSGST = 0;\r\n    var TotalBasicAmount = 0;\r\n    var TotalDiscount = 0\r\n    var totalICGST = 0\r\n    a.forEach(arg => {\r\n        totalCGST += arg.CGST;\r\n        totalSGST += arg.SGST;\r\n        TotalBasicAmount += arg.BasicAmount;\r\n        TotalDiscount += arg.Discount;\r\n        totalICGST += arg.IGST\r\n\r\n    });\r\n    const TotalGST = totalCGST + totalSGST;\r\n    doc.setFontSize(8)\r\n\r\n\r\n    const isIGST = compareGSTINState(data.CustomerGSTIN, data.PartyGSTIN)\r\n    if (isIGST) {\r\n\r\n        doc.text(`Total Basic:`, 440, 327,)\r\n        doc.text(`${TotalBasicAmount.toFixed(2)}`, 567, 327, 'right')\r\n\r\n        doc.text(`Total Disc:`, 440, 337,)\r\n        doc.text(` ${TotalDiscount.toFixed(2)}`, 567, 337, 'right')\r\n\r\n        doc.text(`Total IGST:`, 440, 347)\r\n        doc.text(`${totalICGST.toFixed(2)}`, 567, 347, 'right')\r\n\r\n        doc.text(`Total GST:`, 440, 357,)\r\n        doc.text(` ${totalICGST.toFixed(2)}`, 567, 357, 'right')\r\n\r\n\r\n    } else {\r\n        doc.text(`Total Basic:`, 440, 317,)\r\n        doc.text(`${numberWithCommas(TotalBasicAmount.toFixed(2))}`, 567, 317, 'right')\r\n\r\n        doc.text(`Total Disc:`, 440, 327,)\r\n        doc.text(`${numberWithCommas(TotalDiscount.toFixed(2))}`, 567, 327, 'right')\r\n\r\n        doc.text(`Total CGST:`, 440, 337)\r\n        doc.text(`${numberWithCommas(totalCGST.toFixed(2))}`, 567, 337, 'right')\r\n\r\n        doc.text(`Total SGST:`, 440, 347,)\r\n        doc.text(`${numberWithCommas(totalSGST.toFixed(2))}`, 567, 347, 'right')\r\n\r\n        doc.text(`Total GST:`, 440, 357,)\r\n        doc.text(` ${numberWithCommas(TotalGST.toFixed(2))}`, 567, 357, 'right')\r\n\r\n    }\r\n\r\n\r\n    doc.text(`Round Off:`, 440, 367,)\r\n    doc.text(` ${Number(data.RoundOffAmount).toFixed(2)}`, 567, 367, 'right')\r\n\r\n\r\n\r\n    doc.setFont(undefined, 'Normal')\r\n    doc.setFontSize(10)\r\n    doc.setFont(undefined, 'bold')\r\n    doc.text(`Total Amount :`, 439, 390,)\r\n    const Total = numberWithCommas(Number(data.GrandTotal).toFixed(2))\r\n    doc.text(`${Total}`, 567, 390, 'right')\r\n\r\n    doc.setFont(undefined, 'bold')\r\n\r\n    let DetailsOfRupeesStyle = {\r\n\r\n        didDrawCell: (data1) => {\r\n            const rowIdx = data1.row.index;\r\n            const colIdx = data1.column.index;\r\n            if (rowIdx === 0 && colIdx === 0) {\r\n                let x = data1.cursor.x + 2\r\n                let y = data1.cursor.y + 8\r\n                doc.setFontSize(8)\r\n                doc.setFont(undefined, 'bold')\r\n                doc.text('Rupees: ', x, y)\r\n            }\r\n        },\r\n\r\n        margin: {\r\n            top: 0, left: 30,\r\n        },\r\n        showHead: 'always',\r\n        theme: 'grid',\r\n        styles: {\r\n            overflow: 'linebreak',\r\n            fontSize: 8,\r\n            height: 0,\r\n        },\r\n        bodyStyles: {\r\n            columnWidth: 'wrap',\r\n            textColor: \"black\",\r\n            cellPadding: 1,\r\n            fontSize: 8,\r\n            lineColor: \"black\"\r\n        },\r\n        columnStyles: {\r\n            0: {\r\n                valign: \"top\",\r\n                columnWidth: 310,\r\n                halign: 'lfet',\r\n            }\r\n\r\n        },\r\n        tableLineColor: \"black\",\r\n        startY: 308,\r\n\r\n    };\r\n\r\n    doc.autoTable(table.Ruppescolumn, table.RupeesRow(data), DetailsOfRupeesStyle,);\r\n\r\n\r\n    // let DetailsOfBankStyle = {\r\n    //     didParseCell: (data1) => {\r\n    //         if (data.BankData.length > 0) {\r\n    //             let BankData = data.BankData[0]\r\n    //             if (data1.row.cells[0].raw === `Bank Name :${BankData.BankName}`) {\r\n    //                 data1.row.cells[0].colSpan = 3\r\n    //             }\r\n    //         }\r\n    //     },\r\n\r\n\r\n    //     margin: {\r\n    //         top: 0, left: 30, right: 35,\r\n    //     },\r\n    //     showHead: 'always',\r\n    //     theme: (data.BankData.length > 0) ? 'grid' : 'plain',\r\n    //     headerStyles: { cellPadding: 1, },\r\n    //     styles: {\r\n    //         overflow: 'linebreak',\r\n    //         fontSize: 8.5,\r\n    //         height: 0,\r\n    //     },\r\n    //     bodyStyles: {\r\n    //         columnWidth: 'wrap',\r\n    //         textColor: \"black\",\r\n    //         cellPadding: 2,\r\n    //         fontSize: 7,\r\n    //         lineColor: \"black\"\r\n    //     },\r\n    //     columnStyles: {\r\n    //         0: {\r\n    //             valign: \"top\",\r\n    //             columnWidth: (data.BankData.length > 0) ? 90 : 30,\r\n    //             halign: 'lfet',\r\n    //         },\r\n    //         1: {\r\n    //             valign: \"top\",\r\n    //             columnWidth: (data.BankData.length > 0) ? 90 : 300,\r\n    //             halign: 'lfet',\r\n\r\n\r\n    //         },\r\n    //         2: {\r\n    //             valign: \"top\",\r\n    //             columnWidth: 130,\r\n    //             halign: 'lfet',\r\n    //         },\r\n\r\n    //     },\r\n    //     tableLineColor: \"black\",\r\n\r\n    //     startY: doc.previousAutoTable.finalY,\r\n\r\n    // };\r\n    // doc.autoTable(table.Bankcolumn, table.BankRow(data, doc), DetailsOfBankStyle,);\r\n\r\n    doc.setFontSize(9)\r\n    doc.setFont(undefined, 'Normal')\r\n\r\n    doc.text(`I/we hearby certify that food/foods mentioned in this invoice is/are warranted to be\r\n of the nature and quantity which it/these purports to be `, 34, doc.previousAutoTable.finalY + (9),)\r\n    doc.line(340, doc.previousAutoTable.finalY + (28), 30, doc.previousAutoTable.finalY + (28)); //horizontal line (1)\r\n\r\n    doc.text(`Signature `, 280, 387,)\r\n    doc.text(`Prepared by :${data.Party} `, 35, 387,)\r\n}\r\n\r\n\r\n\r\n\r\nexport const reportFooterForPlainCredit_Debit = (doc, data) => {\r\n    let stringNumber = toWords(Number(data.GrandTotal))\r\n\r\n    doc.setDrawColor(0, 0, 0);\r\n    doc.line(570, 295, 30, 295);//horizontal line Footer 2\r\n\r\n    doc.line(570, 308, 30, 308);//horizontal line Footer 3 Ruppe section\r\n    doc.line(570, 340, 30, 340);//horizontal line (Bottom)\r\n\r\n\r\n\r\n\r\n\r\n    // doc.text(`TCS Amount:`, 440, 362,)\r\n    // doc.text(` ${numberWithCommas(Number(data.TCSAmount).toFixed(2))}`, 567, 362, 'right')\r\n\r\n    doc.setFont(undefined, 'Normal')\r\n    doc.setFontSize(10)\r\n    doc.setFont(undefined, 'bold')\r\n    doc.text(`Total Amount :`, 33, 325,)\r\n    const Total = numberWithCommas(Number(data.GrandTotal).toFixed(2))\r\n    doc.text(`${Total}`, 130, 325, 'right')\r\n    doc.setFont(undefined, 'Normal')\r\n    doc.setFontSize(10)\r\n    doc.text(`Signature `, 450, 362,)\r\n    doc.text(`Prepared by :${data.Party} `, 35, 362,)\r\n    doc.setFont(undefined, 'bold')\r\n    doc.setFontSize(8)\r\n    doc.text(`Rupees:`, 33, 305,)\r\n    doc.text(`${stringNumber}`, 70, 305,)\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport const tableBody = (doc, data) => {\r\n\r\n    var options = {\r\n        didParseCell: (data1) => {\r\n\r\n            if (data1.row.cells[9].raw === \"isaddition\") {\r\n                data1.row.cells[1].colSpan = 5\r\n                data1.row.cells[8].colSpan = 2\r\n                data1.row.cells[10].colSpan = 2\r\n\r\n                data1.row.cells[1].styles.halign = \"right\"    // Alignment for  cgst and Total in spanrow\r\n\r\n                data1.row.cells[1].styles.fontSize = 7\r\n                data1.row.cells[8].styles.fontSize = 7\r\n                data1.row.cells[7].styles.fontSize = 7\r\n                data1.row.cells[10].styles.fontSize = 7\r\n                data1.row.cells[12].styles.fontSize = 7\r\n\r\n                data1.row.cells[1].styles.fontStyle = \"bold\"\r\n                data1.row.cells[8].styles.fontStyle = \"bold\"\r\n                data1.row.cells[7].styles.fontStyle = \"bold\"\r\n                data1.row.cells[10].styles.fontStyle = \"bold\"\r\n                data1.row.cells[12].styles.fontStyle = \"bold\"\r\n            }\r\n\r\n            if (data1.row.cells[1].raw === \"HSN Item Name\") {\r\n                let TotalBox = 0;\r\n\r\n                // data.InvoiceItems.forEach((element, key) => {\r\n                //     if (element.PrimaryUnitName === \"Box\") {\r\n                //         TotalBox = Number(TotalBox) + Number(element.Quantity)\r\n                //     }\r\n                // })\r\n                if (TotalBox === 0) {\r\n                    data1.row.cells[1].text[0] = ` HSN Item Name (${data.TotalItemlength})`\r\n                } else {\r\n                    data1.row.cells[1].text[0] = ` HSN Item Name (${data.TotalItemlength})  (${TotalBox} Box)`\r\n                }\r\n                data1.row.cells[8].colSpan = 2\r\n                data1.row.cells[10].colSpan = 2\r\n            }\r\n            if (data1.row.cells[1].raw === \"Batch\") {\r\n                data1.row.cells[0].colSpan = 13\r\n\r\n            }\r\n        },\r\n        didDrawCell: (data1) => {\r\n\r\n            const rowIdx = data1.row.index;\r\n            const colIdx = data1.column.index;\r\n            if (rowIdx === 0 && colIdx === 8) {\r\n                if (data1.row.cells[8].raw === \"          CGST           %        Amount\") {\r\n\r\n                    const cellWidth = data1.cell.width;\r\n                    const cellHeight = data1.cell.height;\r\n                    const startX = data1.cell.x;\r\n                    const startY = data1.cell.y + cellHeight / 2;\r\n                    const endX = startX + cellWidth;\r\n                    const endY = startY;\r\n\r\n                    const startXVertical = data1.cell.x + cellWidth / 2; // X-coordinate at the middle of the cell\r\n                    const startY1vertical = data1.cell.y + 9;\r\n                    const endYvertical = startY + cellHeight;\r\n\r\n                    doc.line(startXVertical - 5, startY1vertical, startXVertical - 5, endYvertical); // Draw a vertical line\r\n                    doc.line(startX, startY, endX, endY);\r\n                }\r\n            }\r\n            if (rowIdx === 0 && colIdx === 10) {\r\n                if (data1.row.cells[10].raw === \"          SGST           %        Amount\") {\r\n\r\n                    const cellWidth = data1.cell.width;\r\n                    const cellHeight = data1.cell.height;\r\n                    const startX = data1.cell.x;\r\n                    const startY = data1.cell.y + cellHeight / 2;\r\n                    const endX = startX + cellWidth;\r\n                    const endY = startY;\r\n\r\n                    const startXVertical = data1.cell.x + cellWidth / 2; // X-coordinate at the middle of the cell\r\n                    const startY1vertical = data1.cell.y + 9;\r\n                    const endYvertical = startY + cellHeight;\r\n\r\n                    doc.line(startXVertical - 5, startY1vertical, startXVertical - 5, endYvertical); // Draw a vertical line\r\n                    doc.line(startX, startY, endX, endY);\r\n                }\r\n            }\r\n\r\n           \r\n\r\n        },\r\n        margin: {\r\n            left: 30, right: 25, top: 56\r\n        },\r\n        theme: 'grid',\r\n        headerStyles: {\r\n            cellPadding: 1,\r\n            lineWidth: 0.3,\r\n            valign: 'top',\r\n            fontStyle: 'bold',\r\n            halign: 'center',    //'center' or 'right'\r\n            fillColor: \"white\",\r\n            textColor: [0, 0, 0], //Black     \r\n            fontSize: 7,\r\n            rowHeight: 10,\r\n            lineColor: [0, 0, 0]\r\n        },\r\n        bodyStyles: {\r\n            textColor: [30, 30, 30],\r\n            cellPadding: 3,\r\n            fontSize: 7,\r\n            columnWidth: 'wrap',\r\n            lineColor: [0, 0, 0],\r\n        },\r\n        columnStyles: {\r\n            0: {\r\n                valign: \"top\",\r\n                fontSize: 6,\r\n                columnWidth: 15,\r\n            },\r\n            1: {\r\n                valign: \"top\",\r\n                columnWidth: 135,\r\n            },\r\n            2: {\r\n                columnWidth: 52,\r\n                halign: 'right',\r\n            },\r\n            3: {\r\n                columnWidth: 28,\r\n                halign: 'right',\r\n            },\r\n            4: {\r\n                columnWidth: 33,\r\n                halign: 'right',\r\n            },\r\n            5: {\r\n                columnWidth: 35,\r\n                halign: 'right',\r\n            },\r\n            6: {\r\n                columnWidth: 35,\r\n                halign: 'right',\r\n            },\r\n\r\n            7: {\r\n                columnWidth: 45,\r\n                halign: 'right',\r\n            },\r\n            8: {\r\n                columnWidth: 24,\r\n                halign: 'right',\r\n            },\r\n            9: {\r\n                columnWidth: 34,\r\n                halign: 'right',\r\n            },\r\n            10: {\r\n                columnWidth: 24,\r\n                halign: 'right',\r\n            },\r\n            11: {\r\n                columnWidth: 34,\r\n                halign: 'right',\r\n\r\n            },\r\n            12: {\r\n                columnWidth: 46,\r\n                halign: 'right',\r\n            },\r\n\r\n        },\r\n        tableLineColor: \"black\",\r\n        startY: initial_y,\r\n\r\n    };\r\n    doc.setLineWidth(0.5);\r\n    ////  lines when report  header line when table cordinates\r\n    doc.line(408, initial_y, 408, 16);//vertical right 1\r\n    doc.line(220, initial_y, 220, 45);//vertical line between billby billto\r\n    doc.line(570, initial_y, 30, initial_y) //horizontal line 1 billby upper\r\n\r\n\r\n\r\n\r\n    if ((data.NoteType === \"Goods CreditNote\") || (data.NoteType === \"Goods DebitNote\")) {\r\n        doc.autoTable(table.columnsWithCGST_SGST, table.RowsWithCGST_SGST(data), options,);\r\n    } else {\r\n        return null\r\n    }\r\n\r\n\r\n    const Buttom_Hidden_Table_To_Avoid_FooterOverlap = {\r\n        margin: {\r\n            left: 30, right: 30, bottom: 110\r\n        },\r\n    };\r\n\r\n    doc.autoTable(Buttom_Hidden_Table_To_Avoid_FooterOverlap);\r\n}\r\n////  lines when report  header line when table cordinates\r\n\r\nexport const tableBodyWithIGST = (doc, data) => {\r\n    var options = {\r\n\r\n        didParseCell: (data1) => {\r\n\r\n            if (data1.row.cells[9].raw === \"isaddition\") {\r\n                data1.row.cells[1].colSpan = 5\r\n                // data1.row.cells[3].colSpan = 5\r\n                data1.row.cells[8].colSpan = 2\r\n                // data1.row.cells[10].colSpan = 2\r\n\r\n                data1.row.cells[1].styles.fontSize = 7\r\n                data1.row.cells[1].styles.halign = \"right\"    // Alignment for  cgst and Total in spanrow\r\n\r\n                data1.row.cells[8].styles.fontSize = 7\r\n                data1.row.cells[7].styles.fontSize = 7\r\n                data1.row.cells[10].styles.fontSize = 7\r\n                // data1.row.cells[12].styles.fontSize = 7\r\n                data1.row.cells[1].styles.fontStyle = \"bold\"\r\n                data1.row.cells[8].styles.fontStyle = \"bold\"\r\n                data1.row.cells[7].styles.fontStyle = \"bold\"\r\n                data1.row.cells[10].styles.fontStyle = \"bold\"\r\n                // data1.row.cells[12].styles.fontStyle = \"bold\"\r\n            }\r\n\r\n            if (data1.row.cells[1].raw === \"HSN Item Name\") {\r\n\r\n                let TotalBox = 0;\r\n                // data.InvoiceItems.forEach((element, key) => {\r\n                //     if (element.PrimaryUnitName === \"Box\") {\r\n                //         TotalBox = Number(TotalBox) + Number(element.Quantity)\r\n                //     }\r\n                // })\r\n                if (TotalBox === 0) {\r\n                    data1.row.cells[1].text[0] = ` HSN Item Name (${data.TotalItemlength})`\r\n                } else {\r\n                    data1.row.cells[1].text[0] = ` HSN Item Name (${data.TotalItemlength})  (${TotalBox} Box)`\r\n                }\r\n\r\n\r\n                data1.row.cells[8].colSpan = 2\r\n\r\n            }\r\n\r\n            if (data1.row.cells[1].raw === \"Batch\") {\r\n                data1.row.cells[0].colSpan = 12\r\n\r\n            }\r\n        },\r\n\r\n        didDrawCell: (data1) => {\r\n\r\n            const rowIdx = data1.row.index;\r\n            const colIdx = data1.column.index;\r\n            if (rowIdx === 0 && colIdx === 8) {\r\n                if (data1.row.cells[8].raw === \"          IGST           %         Amount\") {\r\n\r\n                    const cellWidth = data1.cell.width;\r\n                    const cellHeight = data1.cell.height;\r\n                    const startX = data1.cell.x;\r\n                    const startY = data1.cell.y + cellHeight / 2;\r\n                    const endX = startX + cellWidth;\r\n                    const endY = startY;\r\n\r\n                    const startXVertical = data1.cell.x + cellWidth / 2; // X-coordinate at the middle of the cell\r\n                    const startY1vertical = data1.cell.y + 9;\r\n                    const endYvertical = startY + cellHeight;\r\n\r\n                    doc.line(startXVertical - 4, startY1vertical, startXVertical - 4, endYvertical); // Draw a vertical line\r\n                    doc.line(startX, startY, endX, endY);\r\n                }\r\n            }\r\n\r\n        },\r\n\r\n        margin: {\r\n            left: 30, right: 25, top: 55\r\n        },\r\n        theme: 'grid',\r\n        headerStyles: {\r\n            cellPadding: 1,\r\n            lineWidth: 0.3,\r\n            valign: 'top',\r\n            fontStyle: 'bold',\r\n            halign: 'center',    //'center' or 'right'\r\n            fillColor: \"white\",\r\n            textColor: [0, 0, 0], //Black     \r\n            fontSize: 7,\r\n            rowHeight: 10,\r\n            lineColor: [0, 0, 0]\r\n        },\r\n        bodyStyles: {\r\n            textColor: [30, 30, 30],\r\n            cellPadding: 3,\r\n            fontSize: 7,\r\n            columnWidth: 'wrap',\r\n            lineColor: [0, 0, 0],\r\n        },\r\n        columnStyles: {\r\n            0: {\r\n                valign: \"top\",\r\n                fontSize: 6,\r\n                columnWidth: 15,\r\n            },\r\n            1: {\r\n                valign: \"top\",\r\n                columnWidth: 175,\r\n            },\r\n            2: {\r\n                columnWidth: 50,\r\n                halign: 'right',\r\n            },\r\n            3: {\r\n                columnWidth: 28,\r\n                halign: 'right',\r\n            },\r\n            4: {\r\n                columnWidth: 33,\r\n                halign: 'right',\r\n            },\r\n            5: {\r\n                columnWidth: 35,\r\n                halign: 'right',\r\n            },\r\n            6: {\r\n                columnWidth: 42,\r\n                halign: 'right',\r\n            },\r\n\r\n            7: {\r\n                columnWidth: 50,\r\n                halign: 'right',\r\n            },\r\n            8: {\r\n                columnWidth: 26,\r\n                halign: 'right',\r\n            },\r\n            9: {\r\n                columnWidth: 34,\r\n                halign: 'right',\r\n\r\n            },\r\n            10: {\r\n                columnWidth: 52,\r\n                halign: 'right',\r\n            },\r\n\r\n        },\r\n        tableLineColor: \"black\",\r\n        startY: initial_y,\r\n    };\r\n    doc.setLineWidth(0.5)\r\n    doc.line(408, initial_y, 408, 16);//vertical right 1\r\n    doc.line(220, initial_y, 220, 45);//vertical line between billby billto\r\n    doc.line(570, initial_y, 30, initial_y) //horizontal line 1 billby upper\r\n    doc.autoTable(table.columnsWithIGST, table.RowsWithIGST(data), options,);\r\n    const Buttom_Hidden_Table_To_Avoid_FooterOverlap = {\r\n        margin: {\r\n            left: 30, right: 30, bottom: 110\r\n        },\r\n    };\r\n    doc.autoTable(Buttom_Hidden_Table_To_Avoid_FooterOverlap);\r\n}\r\n\r\n\r\n\r\nexport const pageFooter = (doc, data) => {\r\n    const pageCount = doc.internal.getNumberOfPages()\r\n    doc.setFont('helvetica', 'Normal')\r\n    doc.setFontSize(8)\r\n\r\n\r\n    for (let i = 1; i <= pageCount; i++) {\r\n        doc.setPage(i)\r\n        pageHeder(doc, data)\r\n        pageBorder(doc)\r\n        reportHeder3(doc, data)\r\n\r\n        doc.text('Page' + String(pageCount) + ' of ' + String(i), 532, 403,)\r\n        doc.text('Print Date :' + String(currentDate_dmy) + ' Time ' + String(CurrentTime()), 30, 403,)\r\n    }\r\n\r\n}\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\Reports\\CRDRNote Report\\DemoData.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\Reports\\CRDRNote Report\\TableData.js",["3911","3912","3913","3914","3915","3916","3917","3918","3919","3920"],"\r\nimport { invoice } from \"../ReportIndex\";\r\nimport { numberWithCommas, toWords } from \"../Report_common_function\";\r\n\r\nexport const columnsWithCGST_SGST = [\r\n    \"SN\",\r\n    \"HSN Item Name\",\r\n    \"Quantity (UOM)\",\r\n    \"MRP\",\r\n    \"Rate\",\r\n    \"Discount\",\r\n    \"Discount Amount \",\r\n    \"Taxable Amount\",\r\n    \"          CGST           %        Amount\",\r\n    \"CGST Amount\",\r\n    \"          SGST           %        Amount\",\r\n    \"SGST Amount\",\r\n    \"Amount\",\r\n];\r\nexport const columnsWithIGST = [\r\n    \"SN\",\r\n    \"HSN Item Name\",\r\n    \"Quantity (UOM)\",\r\n    \"MRP\",\r\n    \"Rate\",\r\n    \"Discount\",\r\n    \"Discount Amount \",\r\n    \"Taxable Amount\",\r\n    \"          IGST           %         Amount\",\r\n    \"IGST Amount\",\r\n    \"Amount\",\r\n];\r\n\r\n\r\n\r\nexport const Bankcolumn = [\r\n    \"\",\r\n    \"\",\r\n    \"\",\r\n]\r\n\r\n\r\nexport const BilledBy = [\r\n    \"Billed by\",\r\n]\r\nexport const BilledTo = [\r\n    \"Billed by\",\r\n]\r\nexport const DetailsOfTransport = [\r\n    \"Billed by\",\r\n]\r\n\r\nexport const Ruppescolumn = [\r\n    \"\",\r\n]\r\n\r\nexport const RowsWithCGST_SGST = (data) => {\r\n\r\n    const { CRDRNoteItems = [] } = data\r\n    CRDRNoteItems.sort((firstItem, secondItem) => firstItem.GSTPercentage - secondItem.GSTPercentage);\r\n    const returnArr = [];\r\n    let Gst = 0\r\n    let totalBasicAmount = 0\r\n    let totalCGst = 0\r\n    let totalSGst = 0\r\n    let totalAmount = 0\r\n    let totalQuantity = 0\r\n    let SrNO = 1\r\n    let TotalGst = 0\r\n    let GSTPercentage = 0\r\n\r\n    const groupedItems = CRDRNoteItems.reduce((accumulator, currentItem) => {\r\n\r\n        const { HSNCode,\r\n            ItemName, MRP, Rate,\r\n            Discount, CGST, SGST,\r\n            Amount, DiscountAmount,\r\n            BasicAmount, Quantity,\r\n            UnitName, MRPValue, CGSTPercentage,\r\n            SGSTPercentage, GSTPercentage,\r\n            BatchCode, BatchDate, DiscountType,\r\n            PrimaryUnitName, ItemComment } = currentItem;\r\n        let PcsinNumber = \"\"\r\n        let PcsinNumberUnit = \"\"\r\n        const pattern = /\\((.*?)\\)/;\r\n\r\n        // if (currentItem.UnitName !== \"\") {\r\n        //     const matchFound = currentItem.UnitName.match(pattern);\r\n        //     const extractedText = matchFound[1];\r\n        //     console.log(extractedText); // Output: \"19.0 No\"\r\n        //     const match = extractedText.split(\" \")\r\n        //     PcsinNumber = match[0];\r\n        //     PcsinNumberUnit = match[1];\r\n\r\n        // }\r\n\r\n        const key = ItemName + '_' + MRP;\r\n        if (accumulator[key]) {\r\n\r\n            accumulator[key].PcsinNumber += Number(PcsinNumber);\r\n            // accumulator[key].UnitName += Number(UnitName);\r\n            accumulator[key].DiscountAmount += Number(DiscountAmount);\r\n            accumulator[key].Quantity += Number(Quantity);\r\n            accumulator[key].BasicAmount += Number(BasicAmount);\r\n            accumulator[key].CGST += Number(CGST);\r\n            accumulator[key].SGST += Number(SGST);\r\n            accumulator[key].Amount += Number(Amount);\r\n            accumulator[key].BatchCode += BatchCode;\r\n            accumulator[key].BatchDate += BatchDate;\r\n            accumulator[key].quantityString += ` ,  ${BatchCode} ${BatchDate} `;\r\n\r\n        } else {\r\n            accumulator[key] = {\r\n                ItemName, HSNCode,\r\n                MRPValue, DiscountType, Rate,\r\n                Discount, PcsinNumberUnit: PcsinNumberUnit,\r\n                PcsinNumber: Number(PcsinNumber),\r\n                CGST: Number(CGST), SGST: Number(SGST),\r\n                Amount: Number(Amount), DiscountAmount: Number(DiscountAmount),\r\n                BasicAmount: Number(BasicAmount), Quantity: Number(Quantity),\r\n                UnitName, CGSTPercentage, SGSTPercentage, GSTPercentage,\r\n                BatchDate, BatchCode: BatchCode, BatchDate: BatchDate,\r\n                quantityString: `  ${BatchCode}  ${BatchDate}`, PrimaryUnitName,\r\n                ItemComment\r\n            };\r\n        }\r\n        return accumulator;\r\n    }, {});\r\n\r\n    const TotalItemlength = Object.values(groupedItems).length;\r\n    data[\"TotalItemlength\"] = TotalItemlength;\r\n\r\n    Object.values(groupedItems).forEach((element, key) => {\r\n\r\n        let HSNcodes = \"\"\r\n        if (element.HSNCode) {\r\n            if (data.SettingData.HSNCodeDigit === \"1\") {\r\n                HSNcodes = element.HSNCode.slice(0, 4);\r\n            }\r\n            if (data.SettingData.HSNCodeDigit === \"2\") {\r\n                HSNcodes = element.HSNCode.slice(0, 6);\r\n            }\r\n            if (data.SettingData.HSNCodeDigit === \"3\") {\r\n                HSNcodes = element.HSNCode.slice(0, 8);\r\n            }\r\n        }\r\n\r\n        data['ItemComment'] = 'good'\r\n        data['ID'] = SrNO\r\n\r\n        const tableitemRow = [\r\n            SrNO++,\r\n            `${HSNcodes} ${element.ItemName}${element.ItemComment === null ? \"\" : `\\n`} ${element.ItemComment === null ? \"\" : element.ItemComment}`,\r\n            `${parseFloat(element.Quantity)}   ${element.UnitName}`,\r\n            `${Number(element.MRPValue).toFixed(2)}`,\r\n            `${numberWithCommas(Number(element.Rate).toFixed(2))}`,\r\n            `${element.Discount} ${element.DiscountType === \"1\" ? \"Rs\" : \"%\"}`,\r\n            `${numberWithCommas(Number(element.DiscountAmount).toFixed(2))}`,\r\n            `${numberWithCommas(Number(element.BasicAmount).toFixed(2))}`,\r\n            `${Number(element.CGSTPercentage).toFixed(1)}%`,\r\n            `${numberWithCommas(Number(element.CGST).toFixed(2))}`,\r\n            `${Number(element.SGSTPercentage).toFixed(1)}%`,\r\n            `${numberWithCommas(Number(element.SGST).toFixed(2))}`,\r\n            `${numberWithCommas(Number(element.Amount).toFixed(2))}`,\r\n\r\n        ];\r\n\r\n        function totalLots() {\r\n            totalQuantity = Number(totalQuantity) + Number(element.Quantity)\r\n            totalCGst = Number(totalCGst) + Number(element.CGST)\r\n            totalSGst = Number(totalSGst) + Number(element.SGST)\r\n            totalAmount = Number(totalAmount) + Number(element.Amount)\r\n            totalBasicAmount = Number(totalBasicAmount) + Number(element.BasicAmount)\r\n            TotalGst = totalCGst + totalSGst;\r\n            GSTPercentage = Number(element.CGSTPercentage) + Number(element.SGSTPercentage)\r\n        };\r\n\r\n\r\n        function totalrow() {\r\n\r\n            return [\r\n                \"\",\r\n                ` GST ${(parseFloat(GSTPercentage))}%  Total:${numberWithCommas(Number(TotalGst).toFixed(2))} `,\r\n                \" \",\r\n                ``,\r\n                \"\",\r\n                \"\",\r\n                ``,\r\n                `${numberWithCommas(Number(totalBasicAmount).toFixed(2))}`,\r\n                `${numberWithCommas(Number(totalCGst).toFixed(2))}`,\r\n                \"isaddition\",\r\n                `${numberWithCommas(Number(totalSGst).toFixed(2))}`,\r\n                \"\",\r\n                `${numberWithCommas(Number(totalAmount).toFixed(2))}`,\r\n            ];\r\n        };\r\n        const BatchRow = [\r\n            `Batch:  ${element.quantityString} `,\r\n            `Batch`,\r\n            \" \",\r\n            ``,\r\n            \"\",\r\n            \"\",\r\n            \"\",\r\n            \"\",\r\n            ``,\r\n            \"\",\r\n            ``,\r\n            \"\",\r\n            ``,\r\n        ]\r\n\r\n        if (Gst === 0) { Gst = element.GSTPercentage };\r\n        if ((Gst === element.GSTPercentage)) {\r\n            data[\"tableTot\"] = totalLots()\r\n            returnArr.push(tableitemRow)\r\n        }\r\n\r\n        else {\r\n            returnArr.push(totalrow());\r\n            returnArr.push(tableitemRow);\r\n            totalBasicAmount = 0\r\n            totalCGst = 0\r\n            totalSGst = 0\r\n            totalAmount = 0\r\n            totalQuantity = 0\r\n\r\n            data[\"tableTot\"] = totalLots()\r\n            Gst = element.GSTPercentage;\r\n        }\r\n        // if (data.SettingData.ShowBatchNoOnInvoicePrint === \"1\") {\r\n        //     returnArr.push((BatchRow))\r\n        // }\r\n\r\n        if (key === Object.keys(groupedItems).length - 1) {\r\n\r\n            returnArr.push(totalrow());\r\n        }\r\n    })\r\n    return returnArr;\r\n}\r\n\r\nexport const RowsWithIGST = (data) => {\r\n    const { CRDRNoteItems = [] } = data\r\n    CRDRNoteItems.sort((firstItem, secondItem) => firstItem.GSTPercentage - secondItem.GSTPercentage);\r\n    const returnArr = [];\r\n    let Gst = 0\r\n    let totalBasicAmount = 0\r\n    let totalIGst = 0\r\n    let totalAmount = 0\r\n    let totalQuantity = 0\r\n    let SrNO = 1\r\n    let TotalGst = 0\r\n    let GSTPercentage = 0\r\n\r\n    const groupedItems = CRDRNoteItems.reduce((accumulator, currentItem) => {\r\n        const { HSNCode, ItemName, IGSTPercentage,\r\n            MRP, Rate, Discount, CGST, SGST,\r\n            Amount, DiscountAmount, BasicAmount,\r\n            Quantity, UnitName, MRPValue, CGSTPercentage,\r\n            SGSTPercentage, GSTPercentage, BatchCode,\r\n            BatchDate, DiscountType, PrimaryUnitName, IGST, ItemComment } = currentItem;\r\n\r\n        let PcsinNumber = \"\"\r\n        let PcsinNumberUnit = \"\"\r\n        const pattern = /\\((.*?)\\)/;\r\n\r\n        // if (currentItem.UnitName !== \"\") {\r\n        //     const matchFound = currentItem.UnitName.match(pattern);\r\n        //     const extractedText = matchFound[1];\r\n        //     console.log(extractedText); // Output: \"19.0 No\"\r\n        //     const match = extractedText.split(\" \")\r\n        //     PcsinNumber = match[0];\r\n        //     PcsinNumberUnit = match[1];\r\n\r\n        // }\r\n\r\n        const key = ItemName + '_' + MRP;\r\n        if (accumulator[key]) {\r\n            accumulator[key].PcsinNumber += Number(PcsinNumber);\r\n            accumulator[key].DiscountAmount += Number(DiscountAmount);\r\n            accumulator[key].Quantity += Number(Quantity);\r\n            accumulator[key].BasicAmount += Number(BasicAmount);\r\n            accumulator[key].CGST += Number(CGST);\r\n            accumulator[key].IGST += Number(IGST);\r\n            accumulator[key].SGST += Number(SGST);\r\n            accumulator[key].Amount += Number(Amount);\r\n            accumulator[key].BatchCode += BatchCode;\r\n            accumulator[key].BatchDate += BatchDate;\r\n            accumulator[key].quantityString += ` ,  ${BatchCode} ${BatchDate} `;\r\n\r\n        } else {\r\n            accumulator[key] = {\r\n                ItemName, HSNCode,\r\n                MRPValue, IGSTPercentage, DiscountType,\r\n                PcsinNumber: Number(PcsinNumber), Rate,\r\n                Discount, CGST: Number(CGST), SGST: Number(SGST),\r\n                Amount: Number(Amount), DiscountAmount: Number(DiscountAmount),\r\n                BasicAmount: Number(BasicAmount), Quantity: Number(Quantity),\r\n                UnitName, CGSTPercentage, SGSTPercentage, GSTPercentage,\r\n                BatchDate, BatchCode: BatchCode, BatchDate: BatchDate,\r\n                quantityString: `  ${BatchCode}  ${BatchDate}`, PrimaryUnitName, IGST, ItemComment\r\n            };\r\n        }\r\n        return accumulator;\r\n    }, {});\r\n    const TotalItemlength = Object.values(groupedItems).length;\r\n    data[\"TotalItemlength\"] = TotalItemlength;\r\n    Object.values(groupedItems).forEach((element, key) => {\r\n\r\n        let HSNcodes = \"\"\r\n        if (element.HSNCode) {\r\n\r\n            if (data.SettingData.HSNCodeDigit === \"1\") {\r\n                HSNcodes = element.HSNCode.slice(0, 4);\r\n            }\r\n            if (data.SettingData.HSNCodeDigit === \"2\") {\r\n                HSNcodes = element.HSNCode.slice(0, 6);\r\n            }\r\n            if (data.SettingData.HSNCodeDigit === \"3\") {\r\n                HSNcodes = element.HSNCode.slice(0, 8);\r\n            }\r\n        }\r\n\r\n        const tableitemRow = [\r\n\r\n            SrNO++,\r\n            `${HSNcodes} ${element.ItemName}${element.ItemComment === null ? \"\" : `\\n`} ${element.ItemComment === null ? \"\" : element.ItemComment}`,\r\n            `${parseFloat(element.Quantity)}   ${element.UnitName}`,\r\n            `${numberWithCommas(Number(element.MRPValue).toFixed(2))}`,\r\n            `${numberWithCommas(Number(element.Rate).toFixed(2))}`,\r\n            `${element.Discount} ${element.DiscountType === \"1\" ? \"Rs\" : \"%\"}`,\r\n            `${numberWithCommas(Number(element.DiscountAmount).toFixed(2))}`,\r\n            `${numberWithCommas(Number(element.BasicAmount).toFixed(2))}`,\r\n            `${Number(element.IGSTPercentage).toFixed(1)}%`,\r\n            `${numberWithCommas(Number(element.IGST).toFixed(2))}`,\r\n            `${numberWithCommas(Number(element.Amount).toFixed(2))}`,\r\n        ];\r\n\r\n        function totalLots() {\r\n            totalQuantity = Number(totalQuantity) + Number(element.Quantity)\r\n            totalIGst = Number(totalIGst) + Number(element.IGST)\r\n            totalAmount = Number(totalAmount) + Number(element.Amount)\r\n            totalBasicAmount = Number(totalBasicAmount) + Number(element.BasicAmount)\r\n\r\n            GSTPercentage = Number(element.IGSTPercentage)\r\n\r\n        };\r\n\r\n\r\n        function totalrow() {\r\n\r\n            return [\r\n                \"\",\r\n                ` GST ${(parseFloat(GSTPercentage))}%  Total:${numberWithCommas(Number(totalIGst).toFixed(2))} `,\r\n                \" \",\r\n                ``,\r\n                \"\",\r\n                \"\",\r\n                ``,\r\n                `${numberWithCommas(Number(totalBasicAmount).toFixed(2))}`,\r\n                `${numberWithCommas(Number(totalIGst).toFixed(2))}`,\r\n                \"isaddition\",\r\n                `${numberWithCommas(Number(totalAmount).toFixed(2))}`,\r\n\r\n            ];\r\n        };\r\n        const BatchRow = [\r\n            `Batch:  ${element.quantityString} `,\r\n            `Batch`,\r\n            \" \",\r\n            ``,\r\n            \"\",\r\n            \"\",\r\n            \"\",\r\n            \"\",\r\n            ``,\r\n            \"\",\r\n            ``,\r\n        ]\r\n\r\n        if (Gst === 0) { Gst = element.GSTPercentage };\r\n        let aa = { TotalCGst: 0, totalSGst: 0 }\r\n        if (data[\"tableTot\"] === undefined) { data[\"tableTot\"] = aa }\r\n\r\n        if ((Gst === element.GSTPercentage)) {\r\n            data[\"tableTot\"] = totalLots()\r\n            returnArr.push(tableitemRow)\r\n        }\r\n\r\n        else {\r\n            returnArr.push(totalrow());\r\n            // returnArr.push(tableitemRow);\r\n            totalBasicAmount = 0\r\n            totalAmount = 0\r\n            totalQuantity = 0\r\n\r\n            data[\"tableTot\"] = totalLots()\r\n            Gst = element.GSTPercentage;\r\n        }\r\n        // if (data.SettingData.ShowBatchNoOnInvoicePrint === \"1\") {\r\n        //     returnArr.push((BatchRow))\r\n        // }\r\n\r\n        if (key === Object.keys(groupedItems).length - 1) {\r\n\r\n            returnArr.push(totalrow());\r\n        }\r\n    })\r\n    return returnArr;\r\n}\r\n\r\n\r\nexport const BilledByRow = (data) => {\r\n\r\n    let PartyAddress = \"\"\r\n    if (Array.isArray(data.PartyAddress)) {\r\n        const filteredArray = data.PartyAddress.filter(obj => obj.IsDefault === true);\r\n        PartyAddress = filteredArray[0] === undefined ? \"\" : filteredArray[0].Address\r\n    } else {\r\n        PartyAddress = data.PartyAddress\r\n    }\r\n\r\n    var BilledByArray = [\r\n        [`            ${data.Party}`],\r\n        [`                 ${PartyAddress}`],\r\n        [`            ${data.PartyState}`],\r\n        [`              ${data.PartyGSTIN === null ? \"\" : data.PartyGSTIN}`],\r\n        [`                   ${data.PartyFSSAINo}`],\r\n        // [`                   ${data.PartyMobileNo}`],\r\n\r\n    ]\r\n    return BilledByArray;\r\n}\r\nexport const BilledToRow = (data) => {\r\n\r\n    let CustomerAddress = \"\"\r\n    if (Array.isArray(data.CustomerAddress)) {\r\n        const filteredArray = data.CustomerAddress.filter(obj => obj.IsDefault === true);\r\n        CustomerAddress = filteredArray[0] === undefined ? \"\" : filteredArray[0].Address\r\n    } else {\r\n        CustomerAddress = data.CustomerAddress\r\n    }\r\n    var BilledToArray = [\r\n        [`                   ${data.Customer}`],\r\n        [`                 ${CustomerAddress}`],\r\n        [`           ${data.CustomerState}`],\r\n        [`             ${data.CustomerGSTIN === null ? \"\" : data.CustomerGSTIN}`,],\r\n        [`                   ${data.CustomerFSSAINo}`],\r\n        // [`                   ${data.CustomerMobileNo}`],\r\n    ]\r\n\r\n    return BilledToArray;\r\n}\r\nexport const DetailsOfTransportRow = (data) => {\r\n    let OrderNumber = \" \"\r\n    let IRN_No = \"\"\r\n    let ACK_No = \"\"\r\n\r\n\r\n    if (data.InvoicesReferences > 0) {\r\n        const PoNumber = data.InvoicesReferences.map(index => ({\r\n            SystemGenerate: index.FullOrderNumber,\r\n            Description: index.Description,\r\n        }));\r\n\r\n        if (PoNumber[0].Description === null) {\r\n            OrderNumber = PoNumber[0].SystemGenerate\r\n        } else {\r\n            OrderNumber = PoNumber[0].Description\r\n        }\r\n\r\n\r\n    }\r\n\r\n    let NoteType = \"\"\r\n    if ((data.NoteType === \"DebitNote\")) {\r\n        NoteType = \"Debit Note\"\r\n    } else if ((data.NoteType === \"Goods DebitNote\")) {\r\n        NoteType = \"Goods Debit Note\"\r\n    } else if ((data.NoteType === \"CreditNote\")) {\r\n        NoteType = \"CreditNote\"\r\n    } else if ((data.NoteType === \"Goods CreditNote\")) {\r\n        NoteType = \"Goods Credit Note\"\r\n    }\r\n\r\n    if (data.isQR) {\r\n        IRN_No = (data.CRDRNoteUploads[0].Irn === null ? \"\" : data.CRDRNoteUploads[0].Irn)\r\n        ACK_No = (data.CRDRNoteUploads[0].AckNo === null ? \"\" : data.CRDRNoteUploads[0].AckNo)\r\n\r\n    }\r\n\r\n\r\n    var DetailsOfTransportArray = [\r\n\r\n\r\n        [`             ${NoteType}`],\r\n        [`                    ${data.Narration === null ? \"\" : data.Narration}`],\r\n        [`                ${IRN_No}`],\r\n        [`                ${ACK_No}`],\r\n        // [`                          ${(EwayData.AckNo === undefined) || (EwayData.AckNo === null) ? \"\" : EwayData.AckNo}`]\r\n    ]\r\n\r\n    return DetailsOfTransportArray;\r\n}\r\n\r\n\r\n\r\nexport const BankRow = (data) => {\r\n    // if (data.BankData.length > 0) {\r\n    //     let BankData = data.BankData[0]\r\n    //     var reportArray = [\r\n    //         [`A/C No: ${BankData.AccountNo}`, `IFSC Code: ${BankData.IFSC}`, `Branch: ${BankData.BranchName}`],\r\n    //         [`Bank Name :${BankData.BankName}`]\r\n    //     ]\r\n    // } else {\r\n\r\n    var reportArray = [\r\n        [],\r\n        // [, `Bank details not provided. Please update Bank details`]\r\n    ]\r\n    // }\r\n    return reportArray;\r\n}\r\n\r\nexport const RupeesRow = (data) => {\r\n    let stringNumber = toWords(Number(data.GrandTotal))\r\n\r\n    var RupeesArray = [\r\n        [`                  ${stringNumber}`],\r\n\r\n    ]\r\n    return RupeesArray;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\components\\Common\\TableCommonFunc.js",["3921"],"import { Input } from \"reactstrap\"\r\nimport { useState } from \"react\";\r\nimport { useEffect } from \"react\";\r\n\r\n\r\nconst onSelectAll = (event, allarray,) => {\r\n\r\n  allarray.forEach(ele => {\r\n    ele.selectCheck = event\r\n  })\r\n}\r\n\r\nconst selectRow = (row, event) => {\r\n\r\n  row.selectCheck = event\r\n}\r\nexport const selectAllCheck = ({\r\n  rowSelected = '',\r\n  nonSelectable = '',\r\n  position,\r\n  headLabel,\r\n  bgColor = \"#9dadf09e\",\r\n  disabledWithMsg = ''\r\n}) => ({\r\n\r\n  mode: \"checkbox\",\r\n  bgColor: bgColor,\r\n  onSelectAll: onSelectAll,\r\n  onSelect: selectRow,\r\n  selected: rowSelected,\r\n  selectColumnPosition: position ? position : \"right\",\r\n  nonSelectable: nonSelectable,\r\n  attrs: () => ({ 'data-label': \"Select\" }),\r\n\r\n  selectionHeaderRenderer: (head) => {\r\n\r\n    return <div className=\"\">\r\n      <Input type=\"checkbox\" checked={head.checked} />\r\n      <label style={{ paddingLeft: \"7px\" }}>{headLabel ? headLabel : \"SelectAll\"}</label>\r\n    </div>\r\n  },\r\n  selectionRenderer: ({ mode, checked, ...rest }) => {\r\n    if (rest.disabled) {\r\n      return <>\r\n        <Input\r\n          type=\"checkbox\"\r\n          {...rest}\r\n          disabled\r\n          checked={checked}\r\n          style={!checked ? {\r\n            opacity: 0.5,\r\n            backgroundColor: \"#ababab82\",\r\n          } : {}}\r\n        />\r\n        &nbsp;&nbsp; <samp className=\"text-danger\">{disabledWithMsg}</samp>\r\n      </>;\r\n    }\r\n    return <Input type=\"checkbox\" checked={checked}  {...rest} />\r\n\r\n  }\r\n\r\n})\r\n\r\nconst DynamicColumnHook = ({\r\n  reducers = \"\",\r\n  pageField = \"\",\r\n  lastColumn,\r\n  secondLastColumn,\r\n  thirdLastColumn,\r\n  makeBtnColumn,\r\n  userAccState,\r\n}) => {\r\n  const { listBtnLoading } = reducers;\r\n  const [tableColumns, setTableColumns] = useState([{}]);\r\n  const [defaultSorted, setDefaultSorted] = useState([]);\r\n  const [pageOptions, setPageOptions] = useState({\r\n    custom: true,\r\n    sizePerPage: 15,\r\n  });\r\n  const { PageFieldMaster = [] } = { ...pageField };\r\n\r\n  useEffect(() => {\r\n    if (userAccState === \"\") {\r\n      return;\r\n    }\r\n\r\n    let sortLabel = \"\";\r\n    let sortType = \"asc\";\r\n    let columns = [];\r\n\r\n    // Sort PageFieldMaster by ListPageSeq\r\n\r\n    if (PageFieldMaster.length === 0) {\r\n      columns.push({ text: \"Page Field Is Blank...\", dataField: \"id\" });\r\n    }\r\n    PageFieldMaster.sort((a, b) => a.ListPageSeq - b.ListPageSeq);\r\n\r\n    PageFieldMaster.forEach((i, k) => {\r\n      if (i.ShowInListPage) {\r\n        const column = {\r\n          text: i.FieldLabel,\r\n          dataField: i.ControlID,\r\n          hidden: false,\r\n          sort: true,\r\n          // key: `column-${k}`,\r\n          // classes: \"table-cursor-pointer\",\r\n          align: i.Alignment || null,\r\n          attrs: (cell, row, rowIndex, colIndex) => ({ 'data-label': i.FieldLabel, \"sticky-col\": (colIndex === 0) ? \"true\" : \"false\" }),\r\n\r\n          formatter: (cell, row) => {\r\n            if (i.ControlID === \"transactionDate\") {\r\n              return (\r\n                <>\r\n                  {row.transactionDateLabel}\r\n                </>\r\n              )\r\n            }\r\n            if (cell === \"Invoice Created\") {\r\n              return (\r\n                <span\r\n                  className=\"label label-\"\r\n                  style={{\r\n                    backgroundColor: \"#b6efdcf7\",\r\n                    color: \"#0e0d0d\",\r\n                    fontSize: \"12px\",\r\n                    padding: \"2px 4px 2px 4px\",\r\n                    borderRadius: \"5px\",\r\n                  }}\r\n                >\r\n                  {cell}\r\n                </span>\r\n              );\r\n            }\r\n            if (cell === \"Order Confirm\") {\r\n              return (\r\n                <span\r\n                  className=\"label label\"\r\n                  style={{\r\n                    backgroundColor: \"#f7dfb6\",\r\n                    color: \"#0e0d0d\",\r\n                    fontSize: \"12px\",\r\n                    padding: \"2px 4px 2px 4px\",\r\n                    borderRadius: \"5px\",\r\n                  }}\r\n                >\r\n                  {cell}\r\n                </span>\r\n              );\r\n            }\r\n            if (cell === \"Open\") {\r\n              return (\r\n                <span\r\n                  className=\"label label\"\r\n                  style={{\r\n                    backgroundColor: \"#c3bfc7a6\",\r\n                    color: \"#0e0d0d\",\r\n                    fontSize: \"12px\",\r\n                    padding: \"2px 4px 2px 4px\",\r\n                    borderRadius: \"5px\",\r\n                  }}\r\n                >\r\n                  {cell}\r\n                </span>\r\n              );\r\n            }\r\n            if (cell === \"Send To Supplier\") {\r\n              return (\r\n                <span\r\n                  className=\"label label-\"\r\n                  style={{\r\n                    backgroundColor: \"#b6efdcf7\",\r\n                    color: \"#0e0d0d\",\r\n                    fontSize: \"12px\",\r\n                    padding: \"2px 4px 2px 4px\",\r\n                    borderRadius: \"5px\",\r\n                  }}\r\n                >\r\n                  {cell}\r\n                </span>\r\n              );\r\n            }\r\n            if (cell === \"Approved\") {\r\n              return (\r\n                <span\r\n                  className=\"label label\"\r\n                  style={{\r\n                    backgroundColor: \"#f7dfb6\",\r\n                    color: \"#0e0d0d\",\r\n                    fontSize: \"12px\",\r\n                    padding: \"2px 4px 2px 4px\",\r\n                    borderRadius: \"5px\",\r\n                  }}\r\n                >\r\n                  {cell}\r\n                </span>\r\n              );\r\n            }\r\n\r\n            if (i.ControlID === \"Party\" && row.Mode) {\r\n\r\n              let Staus = \"\"\r\n              if (row.Mode === 1) {\r\n                Staus = `(Sale Return)`\r\n              } else if (row.Mode === 2) {\r\n                Staus = `(Purchase Return)`\r\n              } else if (row.Mode === 3) {\r\n                Staus = `(Send To Supplier)`\r\n              }\r\n              return (\r\n                <>\r\n                  <div >{`${row.Party}`}</div>\r\n                  <div >{`${Staus}`}</div>\r\n                </>\r\n              );\r\n            }\r\n\r\n\r\n            return <>\r\n              {typeof cell === \"boolean\" ? String(cell) : cell}</>;\r\n          },\r\n        };\r\n\r\n        columns.push(column);\r\n\r\n        if (i.DefaultSort === 1) {\r\n          sortLabel = i.ControlID;\r\n          sortType = \"asc\";\r\n        } else if (i.DefaultSort === 2) {\r\n          sortLabel = i.ControlID;\r\n          sortType = \"desc\";\r\n        }\r\n      }\r\n\r\n      if (PageFieldMaster.length - 1 === k && makeBtnColumn) {\r\n        const isCol = makeBtnColumn();\r\n        if (isCol) {\r\n          columns.push(isCol);\r\n        }\r\n      }\r\n      if (PageFieldMaster.length - 1 === k && thirdLastColumn) {\r\n        const isCol = thirdLastColumn();\r\n        if (isCol) {\r\n          columns.push(isCol);\r\n        }\r\n      }\r\n      if (PageFieldMaster.length - 1 === k && secondLastColumn) {\r\n        const isCol = secondLastColumn();\r\n        if (isCol) {\r\n          columns.push(isCol);\r\n        }\r\n      }\r\n      if (PageFieldMaster.length - 1 === k && lastColumn) {\r\n        const islastCol = lastColumn();\r\n        if (islastCol) {\r\n          columns.push(lastColumn());\r\n        }\r\n      }\r\n    });\r\n\r\n    setTableColumns(columns);\r\n\r\n    setDefaultSorted([\r\n      {\r\n        dataField: sortLabel,\r\n        order: sortType,\r\n      },\r\n    ]);\r\n\r\n    setPageOptions({\r\n      custom: true,\r\n      sizePerPage: 15,\r\n    });\r\n  }, [pageField, userAccState, listBtnLoading]);\r\n\r\n  return [tableColumns, defaultSorted, pageOptions];\r\n};\r\n\r\nexport default DynamicColumnHook","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\EmployeePages\\Drodown.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Accounting\\Debit\\Debit.js",["3922","3923","3924","3925","3926","3927","3928","3929","3930","3931","3932"],"import React, { useEffect, useState, } from \"react\";\r\nimport {\r\n    Col,\r\n    FormGroup,\r\n    Input,\r\n    Label,\r\n    Row\r\n} from \"reactstrap\";\r\nimport { MetaTags } from \"react-meta-tags\";\r\nimport {\r\n    Breadcrumb_inputName,\r\n    commonPageField,\r\n    commonPageFieldSuccess,\r\n} from \"../../../store/actions\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {\r\n    comAddPageFieldFunc,\r\n    formValid,\r\n    initialFiledFunc,\r\n    onChangeSelect,\r\n    onChangeText,\r\n    resetFunction\r\n} from \"../../../components/Common/validationFunction\";\r\nimport { SaveButton } from \"../../../components/Common/CommonButton\";\r\nimport Select from \"react-select\";\r\nimport * as url from \"../../../routes/route_url\";\r\nimport * as pageId from \"../../../routes/allPageID\"\r\nimport * as mode from \"../../../routes/PageMode\"\r\nimport {\r\n    editBankIDSuccess,\r\n} from \"../../../store/Accounting/BankRedux/action\";\r\nimport { Retailer_List } from \"../../../store/CommonAPI/SupplierRedux/actions\";\r\nimport { postSelect_Field_for_dropdown } from \"../../../store/Administrator/PartyMasterBulkUpdateRedux/actions\";\r\nimport { CredietDebitType, Receipt_No_List, Receipt_No_List_Success, saveCredit, saveCredit_Success } from \"../../../store/Accounting/CreditRedux/action\";\r\nimport { customAlert } from \"../../../CustomAlert/ConfirmDialog\";\r\nimport { C_DatePicker } from \"../../../CustomValidateForm\";\r\nimport * as _cfunc from \"../../../components/Common/CommonFunction\"\r\n\r\n\r\nfunction initialState(history) {\r\n\r\n    let page_Id = '';\r\n    let listPath = ''\r\n    let sub_Mode = history.location.pathname;\r\n\r\n    if (sub_Mode === url.CREDIT_NOTE) {\r\n        page_Id = pageId.CREDIT_NOTE;\r\n        listPath = url.CREDIT_LIST\r\n    }\r\n    else if (sub_Mode === url.DEBIT_NOTE) {\r\n        page_Id = pageId.DEBIT_NOTE;\r\n        listPath = url.DEBIT_LIST\r\n    }\r\n\r\n    return { page_Id, listPath }\r\n};\r\n\r\n\r\n\r\n\r\nconst Debit = (props) => {\r\n\r\n    const history = useHistory()\r\n    const dispatch = useDispatch();\r\n    const currentDate_ymd = _cfunc.date_ymd_func();\r\n\r\n\r\n    const fileds = {\r\n        CRDRNoteDate: currentDate_ymd,\r\n        Customer: \"\",\r\n        Comment: \"\",\r\n        GrandTotal: \"\",\r\n        ServiceItems: \"\",\r\n        Narration: \"\",\r\n        ReceiptNO: \"\",\r\n        ReceiptDate: \"\"\r\n    }\r\n    const [state, setState] = useState(() => initialFiledFunc(fileds))\r\n    const [page_id] = useState(() => initialState(history).page_Id)\r\n    const [listPath] = useState(() => initialState(history).listPath)\r\n    const [subPageMode] = useState(history.location.pathname)\r\n    const [pageMode, setPageMode] = useState(mode.defaultsave);//changes\r\n    const [modalCss, setModalCss] = useState(false);\r\n    const [userPageAccessState, setUserAccState] = useState(123);\r\n    const [editCreatedBy, seteditCreatedBy] = useState(\"\");\r\n\r\n    //Access redux store Data /  'save_ModuleSuccess' action data\r\n    const {\r\n        postMsg,\r\n        pageField,\r\n        RetailerList,\r\n        ReceiptModeList,\r\n        CreditDebitType,\r\n        ReceiptNumber,\r\n        saveBtnloading,\r\n        userAccess } = useSelector((state) => ({\r\n            saveBtnloading: state.CredietDebitReducer.saveBtnloading,\r\n            postMsg: state.CredietDebitReducer.postMsg,\r\n            ReceiptNumber: state.CredietDebitReducer.ReceiptNumber,\r\n            RetailerList: state.CommonAPI_Reducer.RetailerList,\r\n            CreditDebitType: state.CredietDebitReducer.CreditDebitType,\r\n            userAccess: state.Login.RoleAccessUpdateData,\r\n            ReceiptModeList: state.PartyMasterBulkUpdateReducer.SelectField,\r\n            pageField: state.CommonPageFieldReducer.pageField,\r\n        }));\r\n\r\n    useEffect(() => {\r\n        dispatch(commonPageFieldSuccess(null));\r\n        dispatch(commonPageField(page_id))\r\n        return () => {\r\n            dispatch(commonPageFieldSuccess(null));\r\n        }\r\n    }, []);\r\n\r\n    const values = { ...state.values }\r\n    const { isError } = state;\r\n    const { fieldLabel } = state;\r\n\r\n    const location = { ...history.location }\r\n    const hasShowloction = location.hasOwnProperty(mode.editValue)\r\n    const hasShowModal = props.hasOwnProperty(mode.editValue)\r\n\r\n    // userAccess useEffect\r\n    useEffect(() => {\r\n        let userAcc = null;\r\n        let locationPath = location.pathname;\r\n\r\n        if (hasShowModal) {\r\n            locationPath = props.masterPath;\r\n        };\r\n\r\n        userAcc = userAccess.find((inx) => {\r\n            return (`/${inx.ActualPagePath}` === locationPath)\r\n        })\r\n\r\n        if (userAcc) {\r\n            setUserAccState(userAcc)\r\n            _cfunc.breadcrumbReturnFunc({ dispatch, userAcc });\r\n        };\r\n    }, [userAccess])\r\n\r\n    // This UseEffect 'SetEdit' data and 'autoFocus' while this Component load First Time.\r\n    useEffect(() => {\r\n\r\n        if ((hasShowloction || hasShowModal)) {\r\n\r\n            let hasEditVal = null\r\n            if (hasShowloction) {\r\n                setPageMode(location.pageMode)\r\n                hasEditVal = location.editValue\r\n            }\r\n            else if (hasShowModal) {\r\n                hasEditVal = props.editValue\r\n                setPageMode(props.pageMode)\r\n                setModalCss(true)\r\n            }\r\n\r\n            if (hasEditVal) {\r\n                const { id, Name } = hasEditVal\r\n                const { values, fieldLabel, hasValid, required, isError } = { ...state }\r\n\r\n                hasValid.Name.valid = true;\r\n\r\n                values.id = id\r\n                values.Name = Name;\r\n\r\n                setState({ values, fieldLabel, hasValid, required, isError })\r\n                dispatch(Breadcrumb_inputName(hasEditVal.Name))\r\n                seteditCreatedBy(hasEditVal.CreatedBy)\r\n            }\r\n            dispatch(editBankIDSuccess({ Status: false }))\r\n        }\r\n    }, [])\r\n\r\n    useEffect(async () => {\r\n\r\n        if ((postMsg.Status === true) && (postMsg.StatusCode === 200)) {\r\n            dispatch(saveCredit_Success({ Status: false }))\r\n            setState(() => resetFunction(fileds, state)) //Clear form values \r\n            dispatch(Breadcrumb_inputName(''))\r\n\r\n            if (pageMode === \"other\") {\r\n                customAlert({\r\n                    Type: 1,\r\n                    Message: postMsg.Message,\r\n                })\r\n            }\r\n            else {\r\n                const promise = await customAlert({\r\n                    Type: 1,\r\n                    Message: postMsg.Message,\r\n                })\r\n                if (promise) {\r\n                    history.push({\r\n                        pathname: listPath,\r\n                    })\r\n                }\r\n            }\r\n        }\r\n        else if (postMsg.Status === true) {\r\n            dispatch(saveCredit_Success({ Status: false }))\r\n            customAlert({\r\n                Type: 4,\r\n                Message: JSON.stringify(postMsg.Message),\r\n            })\r\n        }\r\n    }, [postMsg])\r\n\r\n    useEffect(() => {\r\n        if (pageField) {\r\n            const fieldArr = pageField.PageFieldMaster\r\n            comAddPageFieldFunc({ state, setState, fieldArr })\r\n        }\r\n    }, [pageField])\r\n\r\n    useEffect(() => {\r\n        const jsonBody = JSON.stringify({\r\n            Type: 4,\r\n            PartyID: _cfunc.loginPartyID(),\r\n            CompanyID: _cfunc.loginCompanyID()\r\n        });\r\n        dispatch(Retailer_List(jsonBody));\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        const jsonBody = JSON.stringify({\r\n            Company: _cfunc.loginCompanyID(),\r\n            TypeID: 7\r\n        });\r\n        dispatch(postSelect_Field_for_dropdown(jsonBody));\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        const jsonBody = JSON.stringify({\r\n            Company: _cfunc.loginCompanyID(),\r\n            TypeID: 5\r\n        });\r\n        dispatch(CredietDebitType(jsonBody));\r\n    }, [])\r\n\r\n    const customerOptions = RetailerList.map((index) => ({\r\n        value: index.id,\r\n        label: index.Name,\r\n    }));\r\n\r\n    const ReceiptModeOptions = ReceiptModeList.map((index) => ({\r\n        value: index.id,\r\n        label: index.Name,\r\n    }));\r\n\r\n    const ReceiptNo_Options = ReceiptNumber.map((index) => ({\r\n        value: index.Receipt,\r\n        label: `${index.FullReceiptNumber} -${index.AmountPaid} -${_cfunc.date_dmy_func(index.ReceiptDate)}`,\r\n        Amount: index.AmountPaid,\r\n        ReceiptDate: _cfunc.date_dmy_func(index.ReceiptDate)\r\n    }));\r\n\r\n\r\n    function ReciptDateOnchange(e, date) {\r\n        setState((i) => {\r\n            const a = { ...i }\r\n            a.values.ReceiptDate = date;\r\n            a.hasValid.ReceiptDate.valid = true\r\n            return a\r\n        })\r\n    };\r\n\r\n    function CRDRNoteDateOnchange(e, date) {\r\n        setState((i) => {\r\n            const a = { ...i }\r\n            a.values.CRDRNoteDate = date;\r\n            a.hasValid.CRDRNoteDate.valid = true\r\n            return a\r\n        })\r\n    };\r\n\r\n    function PartyOnChangeHandler(hasSelect, evn) {\r\n        setState((i) => {\r\n            let a = { ...i }\r\n            a.values.ReceiptNO = \"\";\r\n            a.values.GrandTotal = \"\";\r\n            a.values.ReceiptDate = \"\";\r\n            a.hasValid.ReceiptNO.valid = true;\r\n            a.hasValid.GrandTotal.valid = true;\r\n            a.hasValid.ReceiptDate.valid = true;\r\n        })\r\n        onChangeSelect({ hasSelect, evn, state, setState, })\r\n        dispatch(Receipt_No_List_Success([]))\r\n\r\n        const jsonBody = JSON.stringify({\r\n            PartyID: _cfunc.loginPartyID(),\r\n            CustomerID: hasSelect.value\r\n        });\r\n        dispatch(Receipt_No_List(jsonBody));\r\n    }\r\n\r\n    function ReceiptNumberHandler(hasSelect, evn) {\r\n\r\n        setState((i) => {\r\n\r\n            let a = { ...i }\r\n            a.values.GrandTotal = hasSelect.Amount;\r\n            a.values.ReceiptDate = hasSelect.ReceiptDate;\r\n            a.hasValid.GrandTotal.valid = true;\r\n            a.hasValid.ReceiptDate.valid = true;\r\n            a.isError.GrandTotal = \"\"\r\n        })\r\n        onChangeSelect({ hasSelect, evn, state, setState, })\r\n    }\r\n\r\n    const saveHandeller = async (event) => {\r\n\r\n        event.preventDefault();\r\n        const btnId = event.target.id\r\n        try {\r\n            if (formValid(state, setState)) {\r\n\r\n                function noteType_BySubPageMode() {\r\n\r\n                    if (subPageMode === url.CREDIT_NOTE) {\r\n                        return CreditDebitType.find((index) => index.Name === \"CreditNote\")?.id\r\n                    }\r\n                    else if (subPageMode === url.DEBIT_NOTE) {\r\n                        return CreditDebitType.find((index) => index.Name === \"DebitNote\")?.id;\r\n                    }\r\n\r\n                }\r\n                debugger\r\n                const jsonBody = JSON.stringify({\r\n                    CRDRNoteDate: values.CRDRNoteDate,\r\n                    Customer: values.Customer.value,\r\n                    NoteType: noteType_BySubPageMode(),\r\n                    GrandTotal: values.GrandTotal,\r\n                    Narration: values.Narration,\r\n                    Comment: values.Comment,\r\n                    ReceiptNO: values.ReceiptNO.value,\r\n                    ReceiptDate: values.ReceiptDate,\r\n                    CRDRNoteItems: [],\r\n                    CRDRInvoices: [],\r\n                    Party: _cfunc.loginPartyID(),\r\n                    CreatedBy: _cfunc.loginUserID(),\r\n                    UpdatedBy: _cfunc.loginUserID(),\r\n                });\r\n\r\n                if (pageMode === mode.edit) {\r\n                    // dispatch(updateBankID({ jsonBody, updateId: values.id, btnId }));\r\n                }\r\n                else {\r\n                    dispatch(saveCredit({ jsonBody, btnId }));\r\n                }\r\n            }\r\n        } catch (e) { _cfunc.btnIsDissablefunc({ btnId, state: false }) }\r\n    };\r\n\r\n    // IsEditMode_Css is use of module Edit_mode (reduce page-content marging)\r\n    var IsEditMode_Css = ''\r\n    if ((modalCss) || (pageMode === mode.dropdownAdd)) { IsEditMode_Css = \"-5.5%\" };\r\n\r\n    if (!(userPageAccessState === '')) {\r\n        return (\r\n            <React.Fragment>\r\n                <MetaTags>{_cfunc.metaTagLabel(userPageAccessState)}</MetaTags>\r\n                <div className=\"page-content\" style={{ marginTop: IsEditMode_Css, }}>\r\n                    <form noValidate>\r\n\r\n                        <div className=\"px-2 c_card_filter header text-black mb-2\" >\r\n\r\n                            <Row>\r\n                                <Col sm=\"6\">\r\n                                    <FormGroup className=\"row mt-2\" >\r\n                                        <Label className=\"col-sm-1 p-2\"\r\n                                            style={{ width: \"115px\", marginRight: \"0.4cm\" }}>{fieldLabel.CRDRNoteDate}</Label>\r\n                                        <Col sm=\"7\">\r\n                                            <C_DatePicker\r\n                                                name='CRDRNoteDate'\r\n                                                value={values.CRDRNoteDate}\r\n                                                onChange={CRDRNoteDateOnchange}\r\n                                            />\r\n                                        </Col>\r\n                                    </FormGroup>\r\n                                </Col >\r\n\r\n                                <Col sm=\"6\">\r\n                                    <FormGroup className=\" row mt-2 \" >\r\n                                        <Label className=\"col-sm-1 p-2\"\r\n                                            style={{ width: \"115px\", marginRight: \"0.4cm\" }}>{fieldLabel.Narration}</Label>\r\n                                        <Col sm=\"7\">\r\n                                            <Input\r\n                                                name=\"Narration\"\r\n                                                id=\"Narration\"\r\n                                                value={values.Narration}\r\n                                                type=\"text\"\r\n                                                className={isError.Narration.length > 0 ? \"is-invalid form-control\" : \"form-control\"}\r\n                                                placeholder=\"Please Enter Narration\"\r\n                                                autoComplete='off'\r\n                                                autoFocus={true}\r\n                                                onChange={(event) => {\r\n                                                    onChangeText({ event, state, setState })\r\n                                                }}\r\n                                            />\r\n                                            {isError.Narration.length > 0 && (\r\n                                                <span className=\"text-danger f-8\"><small>{isError.Narration}</small></span>\r\n                                            )}\r\n                                        </Col>\r\n\r\n                                    </FormGroup>\r\n                                </Col >\r\n                            </Row>\r\n\r\n                            <Row>\r\n                                <Col sm=\"6\">\r\n                                    <FormGroup className=\" row mt-1 \" >\r\n                                        <Label className=\"col-sm-1 p-2\"\r\n                                            style={{ width: \"115px\", marginRight: \"0.4cm\" }}>{fieldLabel.Customer}</Label>\r\n                                        <Col sm=\"7\">\r\n                                            <Select\r\n                                                id=\"Customer \"\r\n                                                name=\"Customer\"\r\n                                                value={values.Customer}\r\n                                                isSearchable={true}\r\n                                                className=\"react-dropdown\"\r\n                                                classNamePrefix=\"dropdown\"\r\n                                                options={customerOptions}\r\n                                                onChange={(hasSelect, evn) => {\r\n                                                    PartyOnChangeHandler(hasSelect, evn)\r\n                                                }}\r\n                                            />\r\n                                            {isError.Customer.length > 0 && (\r\n                                                <span className=\"text-danger f-8\"><small>{isError.Customer}</small></span>\r\n                                            )}\r\n                                        </Col>\r\n\r\n                                    </FormGroup>\r\n                                </Col >\r\n\r\n                                <Col sm=\"6\">\r\n                                    <FormGroup className=\" row mt-1 \" >\r\n                                        <Label className=\"col-sm-1 p-2\"\r\n                                            style={{ width: \"115px\", marginRight: \"0.4cm\" }}>{fieldLabel.Comment}</Label>\r\n                                        <Col sm=\"7\">\r\n                                            <Input\r\n                                                name=\"Comment\"\r\n                                                id=\"Comment\"\r\n                                                value={values.Comment}\r\n                                                type=\"text\"\r\n                                                className={isError.Comment.length > 0 ? \"is-invalid form-control\" : \"form-control\"}\r\n                                                placeholder=\"Please Enter Comment\"\r\n                                                autoComplete='off'\r\n                                                autoFocus={true}\r\n                                                onChange={(event) => {\r\n                                                    onChangeText({ event, state, setState })\r\n                                                }}\r\n                                            />\r\n                                            {isError.Comment.length > 0 && (\r\n                                                <span className=\"text-danger f-8\"><small>{isError.Comment}</small></span>\r\n                                            )}\r\n                                        </Col>\r\n\r\n                                    </FormGroup>\r\n                                </Col >\r\n                            </Row>\r\n\r\n                            <Row>\r\n                                <Col sm=\"6\">\r\n                                    <FormGroup className=\" row mt-1 \" >\r\n                                        <Label className=\"col-sm-1 p-2\"\r\n                                            style={{ width: \"115px\", marginRight: \"0.4cm\" }}>{fieldLabel.ServiceItems}</Label>\r\n                                        <Col sm=\"7\">\r\n                                            <Select\r\n                                                id=\"ServiceItems \"\r\n                                                name=\"ServiceItems\"\r\n                                                value={values.ServiceItems}\r\n                                                isSearchable={true}\r\n                                                className=\"react-dropdown\"\r\n                                                classNamePrefix=\"dropdown\"\r\n                                                options={ReceiptModeOptions}\r\n                                                onChange={(hasSelect, evn) => {\r\n                                                    onChangeSelect({ hasSelect, evn, state, setState, })\r\n                                                }}\r\n                                            />\r\n                                            {isError.ServiceItems.length > 0 && (\r\n                                                <span className=\"text-danger f-8\"><small>{isError.ServiceItems}</small></span>\r\n                                            )}\r\n                                        </Col>\r\n\r\n\r\n                                    </FormGroup>\r\n                                </Col >\r\n                                <Col sm=\"6\">\r\n                                    <FormGroup className=\" row mt-1 \" >\r\n                                        <Label className=\"col-sm-1 p-2\"\r\n                                            style={{ width: \"115px\", marginRight: \"0.4cm\" }}>{fieldLabel.GrandTotal}</Label>\r\n                                        <Col sm=\"7\">\r\n                                            <Input\r\n                                                name=\"GrandTotal\"\r\n                                                id=\"GrandTotal\"\r\n                                                value={values.GrandTotal}\r\n                                                disabled={(values.ReceiptNO) ? true : false}\r\n                                                type=\"text\"\r\n                                                className={isError.GrandTotal.length > 0 ? \"is-invalid form-control\" : \"form-control\"}\r\n                                                placeholder=\"Please Enter Amount\"\r\n                                                autoComplete='off'\r\n                                                autoFocus={true}\r\n                                                onChange={(event) => {\r\n                                                    onChangeText({ event, state, setState })\r\n                                                }}\r\n                                            />\r\n                                            {isError.GrandTotal.length > 0 && (\r\n                                                <span className=\"text-danger f-8\"><small>{isError.GrandTotal}</small></span>\r\n                                            )}\r\n                                        </Col>\r\n\r\n                                    </FormGroup>\r\n                                </Col >\r\n\r\n                            </Row>\r\n\r\n                            {values.ServiceItems.label === \"Cheque Bounce\" ? <Row>\r\n                                <Col sm=\"6\">\r\n                                    <FormGroup className=\" row mt-1 \" >\r\n                                        <Label className=\"col-sm-1 p-2\"\r\n                                            style={{ width: \"115px\", marginRight: \"0.4cm\" }}>{fieldLabel.ReceiptNO}</Label>\r\n                                        <Col sm=\"7\">\r\n\r\n                                            <Select\r\n                                                id=\" ReceiptNO\"\r\n                                                name=\"ReceiptNO\"\r\n                                                value={values.ReceiptNO}\r\n                                                disabled={true}\r\n                                                isSearchable={true}\r\n                                                className=\"react-dropdown\"\r\n                                                classNamePrefix=\"dropdown\"\r\n                                                options={ReceiptNo_Options}\r\n                                                onChange={(hasSelect, evn) => {\r\n                                                    ReceiptNumberHandler(hasSelect, evn)\r\n                                                }}\r\n                                            />\r\n                                            {isError.ReceiptNO.length > 0 && (\r\n                                                <span className=\"text-danger f-8\"><small>{isError.ReceiptNO}</small></span>\r\n                                            )}\r\n                                        </Col>\r\n                                    </FormGroup>\r\n                                </Col >\r\n\r\n                                <Col sm=\"6\">\r\n                                    <FormGroup className=\" row mt-1 \" >\r\n                                        <Label className=\"col-sm-1 p-2\"\r\n                                            style={{ width: \"115px\", marginRight: \"0.4cm\" }}>{fieldLabel.ReceiptDate}</Label>\r\n                                        <Col sm=\"7\">\r\n                                            <Input\r\n                                                name=\"ReceiptDate\"\r\n                                                id=\"ReceiptDate\"\r\n                                                value={values.ReceiptDate}\r\n                                                disabled={true}\r\n                                                type=\"text\"\r\n                                            // className={isError.ReceiptDate.length > 0 ? \"is-invalid form-control\" : \"form-control\"}\r\n                                            // placeholder=\"Please Enter ReceiptDate\"\r\n                                            // autoComplete='off'\r\n                                            // autoFocus={true}\r\n                                            // onChange={(event) => {\r\n                                            //     onChangeText({ event, state, setState })\r\n                                            // }}\r\n                                            />\r\n                                            {/* {isError.ReceiptDate.length > 0 && (\r\n                                                <span className=\"text-danger f-8\"><small>{isError.ReceiptDate}</small></span>\r\n                                            )} */}\r\n                                        </Col>\r\n\r\n                                    </FormGroup>\r\n                                </Col >\r\n\r\n                            </Row> : null}\r\n\r\n                        </div>\r\n                        <FormGroup>\r\n                            <Col sm={2} style={{ marginLeft: \"3px\" }} >\r\n                                <SaveButton pageMode={pageMode}\r\n                                    loading={saveBtnloading}\r\n                                    onClick={saveHandeller}\r\n                                    userAcc={userPageAccessState}\r\n                                    editCreatedBy={editCreatedBy}\r\n                                    module={\"Receipts\"}\r\n                                />\r\n\r\n                            </Col>\r\n                        </FormGroup >\r\n\r\n                    </form >\r\n                </div>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n    else {\r\n        return (\r\n            <React.Fragment></React.Fragment>\r\n        )\r\n    }\r\n};\r\n\r\nexport default Debit\r\n\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\PartyMaster\\PartyList.js",["3933","3934","3935","3936"],"import React, { useEffect } from 'react'\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport {\r\n    deletePartyID,\r\n    deletePartyIDSuccess,\r\n    editPartyID,\r\n    getPartyListAPI,\r\n    getPartyListAPISuccess,\r\n    postPartyDataSuccess,\r\n    updatePartyIDSuccess\r\n} from '../../../store/Administrator/PartyRedux/action';\r\nimport PartyMaster from './MasterAdd/PartyIndex';\r\nimport { commonPageFieldList, commonPageFieldListSuccess } from \"../../../store/actions\";\r\nimport { mode, url, pageId } from \"../../../routes/index\";\r\nimport { useLayoutEffect } from 'react';\r\nimport { useState } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { PageLoadingSpinner } from '../../../components/Common/CommonButton';\r\nimport CommonPurchaseList from '../../../components/Common/CommonPurchaseList';\r\nimport PartyDropdown_Common from \"../../../components/Common/PartyDropdown\";\r\nimport * as _cfunc from \"../../../components/Common/CommonFunction\";\r\nimport { customAlert } from '../../../CustomAlert/ConfirmDialog';\r\n\r\nconst PartyList = () => {\r\n\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n\r\n    const [subPageMode] = useState(history.location.pathname);\r\n    const [pageMode, setPageMode] = useState(mode.defaultList);\r\n    const [otherState, setOtherState] = useState({\r\n        masterPath: '',\r\n        makeBtnShow: false,\r\n        makeBtnShow: '',\r\n    });\r\n\r\n    const reducers = useSelector(\r\n        (state) => ({\r\n            goBtnLoading: state.PartyMasterReducer.goBtnLoading,\r\n            listBtnLoading: state.PartyMasterReducer.listBtnLoading,\r\n            tableList: state.PartyMasterReducer.partyList,\r\n            editData: state.PartyMasterReducer.editData,\r\n            updateMsg: state.PartyMasterReducer.updateMsg,\r\n            deleteMsg: state.PartyMasterReducer.deleteMsg,\r\n            userAccess: state.Login.RoleAccessUpdateData,\r\n            postMsg: state.PartyMasterReducer.postMsg,\r\n            pageField: state.CommonPageFieldReducer.pageFieldList,\r\n            commonPartyDropSelect: state.CommonPartyDropdownReducer.commonPartyDropSelect\r\n        })\r\n    );\r\n    const { pageField, goBtnLoading, commonPartyDropSelect } = reducers\r\n\r\n    const action = {\r\n        editId: editPartyID,\r\n        deleteId: deletePartyID,\r\n        updateSucc: updatePartyIDSuccess,\r\n        deleteSucc: deletePartyIDSuccess,\r\n        postSucc: postPartyDataSuccess\r\n    }\r\n    // Common Party Dropdown useEffect\r\n    useEffect(() => {\r\n        \r\n        if ((commonPartyDropSelect.value > 0 && (subPageMode === url.RETAILER_LIST || subPageMode === url.NON_RETAILER_PARTY))) {\r\n            goButtonHandler()\r\n        }\r\n        else if (subPageMode === url.PARTY_lIST) {\r\n            dispatch(getPartyListAPI({\r\n                ..._cfunc.loginJsonBody(),\r\n                PartyID: _cfunc.loginPartyID(),\r\n                IsRetailer: 0\r\n            }));\r\n        }\r\n        return () => {\r\n            dispatch(updatePartyIDSuccess([])); //for clear privious order list \r\n            dispatch(getPartyListAPISuccess([]));\r\n        }\r\n    }, [commonPartyDropSelect]);\r\n\r\n    //  This UseEffect => Featch Modules List data  First Rendering\r\n    useLayoutEffect(() => {\r\n        debugger\r\n        let page_Id = '';\r\n        let page_Mode = mode.defaultList;\r\n        let masterPath = '';\r\n        let newBtnPath = '';\r\n        if (subPageMode === url.PARTY_lIST) {\r\n            page_Id = pageId.PARTY_lIST;\r\n            masterPath = url.PARTY;\r\n            newBtnPath = url.PARTY;\r\n        }\r\n        else if (subPageMode === url.RETAILER_LIST) {\r\n            page_Id = pageId.RETAILER_LIST\r\n            masterPath = url.RETAILER_MASTER;\r\n            newBtnPath = url.RETAILER_MASTER;\r\n        }\r\n        else if (subPageMode === url.NON_RETAILER_PARTY_lIST) {\r\n            page_Id = pageId.NON_RETAILER_PARTY_lIST\r\n            masterPath = url.NON_RETAILER_PARTY;\r\n            newBtnPath = url.NON_RETAILER_PARTY;\r\n        }\r\n        setOtherState({ masterPath, newBtnPath, })\r\n        setPageMode(page_Mode)\r\n        dispatch(commonPageFieldListSuccess(null))\r\n        dispatch(commonPageFieldList(page_Id))\r\n        return () => {\r\n            dispatch(updatePartyIDSuccess([])); //for clear privious order list \r\n            dispatch(getPartyListAPISuccess([]));\r\n        }\r\n    }, []);\r\n\r\n    function goButtonHandler() {\r\n\r\n        try {\r\n            if ((_cfunc.loginSelectedPartyID() === 0)) {\r\n                customAlert({ Type: 3, Message: \"Please Select Party\" });\r\n                return;\r\n            };\r\n            const jsonBody = {\r\n                ..._cfunc.loginJsonBody(),\r\n                PartyID: _cfunc.loginSelectedPartyID(),\r\n                IsRetailer: subPageMode === url.RETAILER_LIST ? 1 : 0\r\n            }\r\n            dispatch(getPartyListAPI(jsonBody));\r\n        }\r\n        catch (error) { }\r\n        return\r\n    };\r\n\r\n    function partyOnChngeButtonHandler() {\r\n        dispatch(getPartyListAPISuccess([]));\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"page-content\">\r\n                <PageLoadingSpinner isLoading={(goBtnLoading || !pageField)} />\r\n                {(subPageMode === url.RETAILER_LIST || (subPageMode === url.NON_RETAILER_PARTY_lIST)) &&\r\n                    <PartyDropdown_Common pageMode={pageMode}\r\n                        goBtnLoading={goBtnLoading}\r\n                        goButtonHandler={goButtonHandler}\r\n                        changeButtonHandler={partyOnChngeButtonHandler}\r\n                    />\r\n                }\r\n                {\r\n                    (pageField) &&\r\n                    <CommonPurchaseList\r\n                        action={action}\r\n                        reducers={reducers}\r\n                        showBreadcrumb={false}\r\n                        MasterModal={PartyMaster}\r\n                        masterPath={otherState.masterPath}\r\n                        newBtnPath={otherState.newBtnPath}\r\n                        pageMode={pageMode}\r\n                        ButtonMsgLable={\"Party\"}\r\n                        deleteName={\"Name\"}\r\n                    />\r\n                }\r\n            </div>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default PartyList;","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\PartyMaster\\MasterAdd\\FirstTab\\index.js",["3937","3938","3939","3940","3941","3942"],"import React, { useState, useEffect, useImperativeHandle, forwardRef } from 'react'\r\nimport Select from \"react-select\"\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Button, Card, CardBody, Col, FormGroup, Input, Label, Row } from 'reactstrap'\r\nimport { comAddPageFieldFunc, initialFiledFunc, onChangeCheckbox, onChangeSelect, onChangeText } from '../../../../../components/Common/validationFunction'\r\nimport { Breadcrumb_inputName } from '../../../../../store/actions'\r\nimport { getDistrictOnState } from '../../../../../store/Administrator/PartyRedux/action'\r\nimport { priceListByPartyAction } from '../../../../../store/Administrator/PriceList/action'\r\nimport PriceDropOptions from './PriceDropOptions'\r\nimport PartyType from '../../../PartyTypes/PartyType'\r\nimport * as url from \"../../../../../routes/route_url\";\r\nimport AddMaster from \"../../../EmployeePages/Drodown\";\r\nimport * as pageId from \"../../../../../routes/allPageID\"\r\nimport { loginJsonBody } from '../../../../../components/Common/CommonFunction'\r\nimport { getCityOnDistrict, getCityOnDistrictSuccess } from '../../../../../store/Administrator/EmployeeRedux/action'\r\nimport CityMaster from '../../../CityPages/CityMaster'\r\nimport { C_Select } from '../../../../../CustomValidateForm'\r\nimport { GetRoutesList, GetRoutesListSuccess } from '../../../../../store/Administrator/RoutesRedux/actions'\r\n\r\nconst BaseTabForm = forwardRef(({ subPageMode }, ref) => {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const fileds = {\r\n        Name: \"\",\r\n        MobileNo: \"\",\r\n        PartyType: \"\",\r\n        SAPPartyCode: \"\",\r\n        Supplier: [],\r\n        PAN: \"\",\r\n        Email: \"\",\r\n        AlternateContactNo: \"\",\r\n        State: \"\",\r\n        District: \"\",\r\n        GSTIN: \"\",\r\n        CityName: \"\",\r\n        Route: \"\",\r\n        Distance: \"\",\r\n        isActive: true,\r\n        Latitude: \"\",\r\n        Longitude: \"\"\r\n\r\n    }\r\n\r\n    const [state, setState] = useState(() => initialFiledFunc(fileds))\r\n    const [priceListSelect, setPriceListSelect] = useState({ value: '' });\r\n    const [partyType_AddMasterAccess, setPartyType_AddMasterAccess] = useState(false)\r\n    const [city_AddMasterAccess, setCity_AddMasterAccess] = useState(false)\r\n\r\n    const { values } = state;\r\n    const { isError } = state;\r\n    const { fieldLabel } = state;\r\n\r\n    useImperativeHandle(ref, () => ({\r\n        setCurrentState(arr) {\r\n            setState(arr)\r\n        },\r\n        getCurrentState: () => {\r\n            return state\r\n        },\r\n        getPriceListSelect: () => {\r\n            return priceListSelect\r\n        },\r\n        setPriceListSelect(arr) {\r\n            setPriceListSelect(arr)\r\n        }\r\n    }));\r\n\r\n    const {\r\n        stateRedux,\r\n        DistrictOnState,\r\n        PartyTypes,\r\n        priceListByPartyType,\r\n        SupplierRedux,\r\n        pageField,\r\n        CityOnDistrict,\r\n        RoutesList,\r\n        userAccess,\r\n        districtDropDownLoading,\r\n        cityDropDownLoading,\r\n        commonPartyDropSelect\r\n    } = useSelector((state) => ({\r\n        stateRedux: state.EmployeesReducer.State,\r\n        DistrictOnState: state.PartyMasterReducer.DistrictOnState,\r\n        CityOnDistrict: state.EmployeesReducer.City,\r\n        PartyTypes: state.PartyTypeReducer.ListData,\r\n        priceListByPartyType: state.PriceListReducer.priceListByPartyType,\r\n        SupplierRedux: state.CommonAPI_Reducer.SSDD_List,\r\n        RoutesList: state.RoutesReducer.RoutesList,\r\n        pageField: state.CommonPageFieldReducer.pageField,\r\n        userAccess: state.Login.RoleAccessUpdateData,\r\n        districtDropDownLoading: state.PartyMasterReducer.districtDropDownLoading,\r\n        cityDropDownLoading: state.EmployeesReducer.cityDropDownLoading,\r\n        commonPartyDropSelect: state.CommonPartyDropdownReducer.commonPartyDropSelect\r\n    }));\r\n\r\n    useEffect(() => {\r\n\r\n        userAccess.forEach((index) => {\r\n            if (index.id === pageId.PARTYTYPE) {\r\n                return setPartyType_AddMasterAccess(true)\r\n            }\r\n            if (index.id === pageId.CITY) {\r\n                return setCity_AddMasterAccess(true)\r\n            }\r\n        });\r\n\r\n    }, [userAccess])\r\n\r\n    // Common Party Dropdown useEffect\r\n    useEffect(() => {\r\n\r\n        if (commonPartyDropSelect.value > 0) {\r\n            dispatch(GetRoutesList({ ...loginJsonBody(), \"PartyID\": commonPartyDropSelect.value }))\r\n        }\r\n        setState((i) => {\r\n            let a = { ...i }\r\n            a.values.Route = ''\r\n            a.hasValid.Route.valid = true;\r\n            return a\r\n        })\r\n        return () => {\r\n            dispatch(GetRoutesListSuccess([]));\r\n        }\r\n    }, [commonPartyDropSelect]);\r\n\r\n    useEffect(() => {\r\n        if (pageField) {\r\n            const fieldArr = pageField.PageFieldMaster\r\n            comAddPageFieldFunc({ state, setState, fieldArr })\r\n        }\r\n    }, [pageField])\r\n\r\n    useEffect(() => {\r\n        if (PartyTypes.length === 1) {\r\n            setState((i) => {\r\n                let a = { ...i }\r\n                a.values.PartyType = {\r\n                    value: PartyTypes[0].id,\r\n                    label: PartyTypes[0].Name\r\n                }\r\n                a.hasValid.valid = true;\r\n                return a\r\n            })\r\n\r\n            dispatch(priceListByPartyAction(PartyTypes[0].id))\r\n        }\r\n    }, [PartyTypes])\r\n\r\n    useEffect(() => {\r\n        let retailerParty = PartyTypes.find(i => (i.IsRetailer))\r\n\r\n        if ((subPageMode === url.RETAILER_MASTER) && !(retailerParty === undefined)) {\r\n            debugger\r\n            setState((i) => {\r\n                let a = { ...i }\r\n                let supilerArr = [{\r\n                    value: commonPartyDropSelect.value\r\n                }]\r\n\r\n                a.values.PartyType = {\r\n                    value: retailerParty.id,\r\n                    label: retailerParty.Name\r\n                }\r\n                a.values.Supplier = supilerArr\r\n                a.hasValid.PartyType.valid = true;\r\n                a.hasValid.Supplier.valid = true;\r\n\r\n                delete a.required.PartyType\r\n                delete a.required.Supplier\r\n                return a\r\n            })\r\n            dispatch(priceListByPartyAction(retailerParty.id))\r\n        }\r\n    }, [PartyTypes, pageField])\r\n\r\n    const PartyTypeDropdown_Options = PartyTypes.map((index) => ({\r\n        value: index.id,\r\n        label: index.Name,\r\n        division: index.IsDivision,\r\n        IsRetailer: index.IsRetailer\r\n    }));\r\n\r\n    const StateValues = stateRedux.map((index) => ({\r\n        value: index.id,\r\n        label: index.Name\r\n    }));\r\n\r\n    const DistrictOnStateValues = DistrictOnState.map((index) => ({\r\n        value: index.id,\r\n        label: index.Name\r\n    }));\r\n\r\n    const SupplierOptions = SupplierRedux.map((index) => ({\r\n        value: index.id,\r\n        label: index.Name\r\n    }));\r\n\r\n    const City_DropdownOptions = CityOnDistrict.map((index) => ({\r\n        value: index.id,\r\n        label: index.Name\r\n    }));\r\n\r\n    const RoutesListOptions = RoutesList.map((index) => ({\r\n        value: index.id,\r\n        label: index.Name,\r\n        IsActive: index.IsActive\r\n    }));\r\n\r\n    const RouteName_Options = RoutesListOptions.filter((index) => {\r\n        return index.IsActive === true\r\n    });\r\n    function partyTypeOnChange(hasSelect, evn) {\r\n\r\n        onChangeSelect({ hasSelect, evn, state, setState })\r\n        setPriceListSelect({ label: '' })\r\n        dispatch(priceListByPartyAction(hasSelect.value))\r\n    }\r\n\r\n    function handllerState(hasSelect, evn,) {\r\n        onChangeSelect({ hasSelect, evn, state, setState })\r\n        dispatch(getDistrictOnState(hasSelect.value))\r\n        dispatch(getCityOnDistrictSuccess([]))\r\n\r\n        setState((i) => {\r\n            const a = { ...i }\r\n            a.values.District = \"\";\r\n            a.hasValid.District.valid = false\r\n\r\n            a.values.CityName = \"\";\r\n            a.hasValid.CityName.valid = false\r\n            return a\r\n        })\r\n    }\r\n\r\n\r\n    function District_Dropdown_Handler(e) {\r\n        dispatch(getCityOnDistrict(e.value))\r\n        setState((i) => {\r\n            const a = { ...i }\r\n            a.values.CityName = \"\";\r\n            a.hasValid.CityName.valid = false\r\n            return a\r\n        })\r\n    }\r\n\r\n    const priceListOnClick = function () {\r\n\r\n        const hasNone = document.getElementById(\"price-drop\").style;\r\n\r\n        if ((priceListByPartyType.length > 0)) {\r\n            if ((hasNone.display === \"none\") || (hasNone.display === \"\")) {\r\n                hasNone.display = \"block\";\r\n            } else {\r\n                hasNone.display = \"none\";\r\n            }\r\n        }\r\n\r\n    };\r\n    const GSTINverifyhandler = () => {\r\n\r\n        window.open(\"https://services.gst.gov.in/services/searchtp\");\r\n    }\r\n\r\n    const FirstTab = (\r\n        <div id={\"base-tabe-area\"}>\r\n            <Row >\r\n                <Card className=\"text-black\" style={{ backgroundColor: \"whitesmoke\" }} >\r\n                    <CardBody >\r\n                        <Row className=\"mt-3 \">\r\n                            <Col md=\"3\">\r\n                                <FormGroup className=\"mb-3\">\r\n                                    <Label >{fieldLabel.Name} </Label>\r\n                                    <Input\r\n                                        name=\"Name\"\r\n                                        id=\"txtName\"\r\n                                        value={values.Name}\r\n                                        type=\"text\"\r\n                                        disabled={(subPageMode === url.PARTY_SELF_EDIT) && true}\r\n                                        className={isError.Name.length > 0 ? \"is-invalid form-control\" : \"form-control\"}\r\n                                        placeholder=\"Please Enter Name\"\r\n                                        autoComplete='off'\r\n                                        autoFocus={true}\r\n                                        onChange={(event) => {\r\n                                            onChangeText({ event, state, setState })\r\n                                            dispatch(Breadcrumb_inputName(event.target.value))\r\n                                        }}\r\n                                    />\r\n                                    {isError.Name.length > 0 && (\r\n                                        <span className=\"invalid-feedback\">{isError.Name}</span>\r\n                                    )}\r\n                                </FormGroup>\r\n                            </Col>\r\n                            <Col md=\"1\">  </Col>\r\n                            <Col md=\"3\">\r\n                                <FormGroup className=\"mb-3\">\r\n                                    <Label >{fieldLabel.MobileNo} </Label>\r\n                                    <Input\r\n                                        name=\"MobileNo\"\r\n                                        value={values.MobileNo}\r\n                                        type=\"text\"\r\n                                        className={isError.MobileNo.length > 0 ? \"is-invalid form-control\" : \"form-control\"}\r\n                                        placeholder=\"Please Enter Mobile\"\r\n                                        autoComplete='off'\r\n                                        onChange={(event) => {\r\n                                            onChangeText({ event, state, setState })\r\n                                        }}\r\n                                    />\r\n                                    {isError.MobileNo.length > 0 && (\r\n                                        <span className=\"invalid-feedback\">{isError.MobileNo}</span>\r\n                                    )}\r\n                                </FormGroup>\r\n                            </Col>\r\n                            <Col md=\"1\">  </Col>\r\n\r\n                            <Col md=\"3\">\r\n                                <FormGroup className=\"mb-3\">\r\n                                    <Label >{fieldLabel.AlternateContactNo}</Label>\r\n                                    <Input\r\n                                        name=\"AlternateContactNo\"\r\n                                        value={values.AlternateContactNo}\r\n                                        type=\"text\"\r\n                                        className={isError.AlternateContactNo.length > 0 ? \"is-invalid form-control\" : \"form-control\"}\r\n                                        placeholder=\"Please AlternateContactNo\"\r\n                                        autoComplete='off'\r\n                                        onChange={(event) => {\r\n                                            onChangeText({ event, state, setState })\r\n                                        }}\r\n                                    />\r\n                                    {isError.AlternateContactNo.length > 0 && (\r\n                                        <span className=\"invalid-feedback\">{isError.AlternateContactNo}</span>\r\n                                    )}\r\n                                </FormGroup>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row className=\"mt-3\">\r\n                            <Col md=\"3\">\r\n                                <FormGroup className=\"mb-3\">\r\n                                    <Label >{fieldLabel.Email} </Label>\r\n                                    <Input\r\n                                        name=\"Email\"\r\n                                        value={values.Email}\r\n                                        type=\"text\"\r\n                                        className={isError.Email.length > 0 ? \"is-invalid form-control\" : \"form-control\"}\r\n                                        placeholder=\"Please Enter Email\"\r\n                                        autoComplete='off'\r\n                                        onChange={(event) => {\r\n                                            onChangeText({ event, state, setState })\r\n                                        }}\r\n                                    />\r\n                                    {isError.Email.length > 0 && (\r\n                                        <span className=\"invalid-feedback\">{isError.Email}</span>\r\n                                    )}\r\n                                </FormGroup>\r\n                            </Col>\r\n\r\n                            <Col md=\"1\"></Col>\r\n                            {!(subPageMode === url.RETAILER_MASTER) && // SAPPartyCode   show only (Party Master) mode\r\n                                <Col md=\"3\">\r\n                                    <FormGroup className=\"mb-3\">\r\n                                        <Label htmlFor=\"validationCustom01\">{fieldLabel.SAPPartyCode} </Label>\r\n                                        <Input\r\n                                            name=\"SAPPartyCode\"\r\n                                            value={values.SAPPartyCode}\r\n                                            disabled={(subPageMode === url.PARTY_SELF_EDIT) && true}\r\n                                            type=\"text\"\r\n                                            className={isError.SAPPartyCode.length > 0 ? \"is-invalid form-control\" : \"form-control\"}\r\n                                            placeholder=\"Please Enter SAP Code\"\r\n                                            autoComplete='off'\r\n                                            onChange={(event) => {\r\n                                                onChangeText({ event, state, setState })\r\n                                            }}\r\n                                        />\r\n                                        {isError.SAPPartyCode.length > 0 && (\r\n                                            <span className=\"invalid-feedback\">{isError.SAPPartyCode}</span>\r\n                                        )}\r\n                                    </FormGroup>\r\n                                </Col>\r\n                            }\r\n\r\n                            <Col md=\"1\"></Col>\r\n                            {!(subPageMode === url.RETAILER_MASTER) &&  // Distance   show only (Party Master) mode\r\n                                <Col md=\"3\">\r\n                                    <FormGroup className=\"mb-3\">\r\n                                        <Label htmlFor=\"validationCustom01\">{fieldLabel.Distance} </Label>\r\n                                        <Input\r\n                                            name=\"Distance\"\r\n                                            value={values.Distance}\r\n                                            type=\"text\"\r\n                                            disabled={(subPageMode === url.PARTY_SELF_EDIT) && true}\r\n                                            className={isError.Distance.length > 0 ? \"is-invalid form-control\" : \"form-control\"}\r\n                                            placeholder=\"Please Enter Distance\"\r\n                                            autoComplete='off'\r\n                                            onChange={(event) => {\r\n                                                onChangeText({ event, state, setState })\r\n                                            }}\r\n                                        />\r\n                                        {isError.Distance.length > 0 && (\r\n                                            <span className=\"invalid-feedback\">{isError.Distance}</span>\r\n                                        )}\r\n                                    </FormGroup>\r\n                                </Col>\r\n                            }\r\n\r\n                        </Row>\r\n                    </CardBody>\r\n                </Card>\r\n            </Row>\r\n            <Row>\r\n                <Card className=\" text-black mt-n2\" style={{ backgroundColor: \"whitesmoke\" }} >\r\n                    <CardBody >\r\n                        <Row className=\"mt-3 \">\r\n                            {!(subPageMode === url.RETAILER_MASTER) ?\r\n                                <Col md=\"3\">\r\n                                    <FormGroup className=\"mb-3\">\r\n                                        <Label > {fieldLabel.PartyType}</Label>\r\n                                        <Col sm={12}>\r\n                                            <Select\r\n                                                name=\"PartyType\"\r\n                                                value={values.PartyType}\r\n                                                isSearchable={true}\r\n                                                isDisabled={(subPageMode === url.PARTY_SELF_EDIT) && true}\r\n                                                className=\"react-dropdown\"\r\n                                                classNamePrefix=\"dropdown\"\r\n                                                options={PartyTypeDropdown_Options}\r\n                                                onChange={partyTypeOnChange}\r\n                                            />\r\n                                            {isError.PartyType.length > 0 && (\r\n                                                <span className=\"text-danger f-8\"><small>{isError.PartyType}</small></span>\r\n                                            )}\r\n\r\n                                        </Col>\r\n                                    </FormGroup>\r\n\r\n                                </Col>\r\n                                : null\r\n                            }\r\n                            {/* <Col md=\"1\"> </Col> */}\r\n                            {\r\n                                !(subPageMode === url.RETAILER_MASTER) ?\r\n                                    (partyType_AddMasterAccess) ?\r\n                                        <Col md=\"1\" className=\" mt-3\">\r\n                                            <AddMaster\r\n                                                masterModal={PartyType}\r\n                                                masterPath={url.PARTYTYPE}\r\n                                            />\r\n                                        </Col> : <Col md=\"1\"> </Col>\r\n                                    : null\r\n                            }\r\n\r\n\r\n                            <Col md=\"3\" className=\"mb-3\">\r\n                                <FormGroup>\r\n                                    <Label>Price List </Label>\r\n                                    <Input\r\n                                        value={priceListSelect.label}\r\n                                        autoComplete={\"off\"}\r\n                                        disabled={(subPageMode === url.PARTY_SELF_EDIT) && true}\r\n                                        placeholder=\"Select...\"\r\n                                        onClick={priceListOnClick}\r\n                                    >\r\n                                    </Input>\r\n\r\n                                    <PriceDropOptions\r\n                                        data={priceListByPartyType}\r\n                                        priceList={priceListSelect}\r\n                                        setPriceSelect={setPriceListSelect} />\r\n                                </FormGroup>\r\n\r\n                            </Col>\r\n                            <Col md=\"1\">  </Col>\r\n\r\n                            {!(subPageMode === url.RETAILER_MASTER) &&// SUPLIER dropdown  show only (Party Master) mode\r\n                                < Col md=\"3\">\r\n                                    <FormGroup className=\"mb-3\">\r\n                                        <Label> {fieldLabel.Supplier} </Label>\r\n                                        <Col sm={12}>\r\n                                            <Select\r\n                                                name=\"Supplier\"\r\n                                                value={values.Supplier}\r\n                                                isDisabled={(subPageMode === url.PARTY_SELF_EDIT) && true}\r\n                                                className=\"react-dropdown\"\r\n                                                classNamePrefix=\"dropdown\"\r\n                                                options={SupplierOptions}\r\n                                                isMulti={true}\r\n                                                onChange={(hasSelect, evn) => {\r\n                                                    onChangeSelect({ hasSelect, evn, state, setState })\r\n                                                }}\r\n                                            />\r\n                                            {isError.Supplier.length > 0 && (\r\n                                                <span className=\"text-danger f-8\"><small>{isError.Supplier}</small></span>\r\n                                            )}\r\n                                        </Col>\r\n                                    </FormGroup>\r\n                                </Col>\r\n                            }\r\n                        </Row>\r\n                        <Row>\r\n                            <Col md=\"3\">\r\n                                <FormGroup className=\"mb-3\">\r\n                                    <Label>{fieldLabel.PAN} </Label>\r\n                                    <Input\r\n                                        name=\"PAN\"\r\n                                        value={values.PAN}\r\n                                        type=\"text\"\r\n                                        className={isError.PAN.length > 0 ? \"is-invalid form-control\" : \"form-control\"}\r\n                                        placeholder=\"Please Enter PAN\"\r\n                                        autoComplete='off'\r\n                                        onChange={(event) => {\r\n                                            onChangeText({ event, state, setState })\r\n                                        }}\r\n                                    />\r\n                                    {isError.PAN.length > 0 && (\r\n                                        <span className=\"invalid-feedback\">{isError.PAN}</span>\r\n                                    )}\r\n                                </FormGroup>\r\n                            </Col>\r\n\r\n                            <Col md=\"1\">  </Col>\r\n                            <Col md=\"3\">\r\n                                <FormGroup className=\"mb-3\">\r\n                                    <Label> {fieldLabel.GSTIN} </Label>\r\n                                    <Input\r\n                                        type=\"text\"\r\n                                        name=\"GSTIN\"\r\n                                        value={values.GSTIN}\r\n                                        className={isError.GSTIN.length > 0 ? \"is-invalid form-control\" : \"form-control\"}\r\n                                        placeholder=\"Please Enter GSTIN\"\r\n                                        autoComplete='off'\r\n                                        onChange={(event) => {\r\n                                            onChangeText({ event, state, setState })\r\n                                        }}\r\n                                    />\r\n                                    {isError.GSTIN.length > 0 && (\r\n                                        <span className=\"invalid-feedback\">{isError.GSTIN}</span>\r\n                                    )}\r\n                                </FormGroup>\r\n                            </Col>\r\n                            <Col md=\"1\" className=\" mt-3\">\r\n                                <Button\r\n                                    className=\" p-1 mt-3 \"\r\n                                    color=\"btn btn-outline-primary border-2 font-size-12 \"\r\n                                    type=\"button\"\r\n                                    onClick={GSTINverifyhandler}\r\n                                > Verify GSTIN\r\n                                </Button>\r\n                            </Col>\r\n\r\n                        </Row>\r\n                        <Row>\r\n                            <Col md=\"3\">\r\n                                <FormGroup className=\"mb-3\">\r\n                                    <Label> {fieldLabel.State} </Label>\r\n                                    <Col sm={12}>\r\n                                        <Select\r\n                                            name=\"State\"\r\n                                            value={values.State}\r\n                                            isDisabled={(subPageMode === url.PARTY_SELF_EDIT) && true}\r\n                                            isSearchable={true}\r\n                                            className=\"react-dropdown\"\r\n                                            classNamePrefix=\"dropdown\"\r\n                                            options={StateValues}\r\n                                            onChange={handllerState}\r\n                                        />\r\n                                        {isError.State.length > 0 && (\r\n                                            <span className=\"text-danger f-8\"><small>{isError.State}</small></span>\r\n                                        )}\r\n                                    </Col>\r\n                                </FormGroup>\r\n                            </Col>\r\n\r\n                            <Col md=\"1\">  </Col>\r\n                            <Col md=\"3\">\r\n                                <FormGroup className=\"mb-3\">\r\n                                    <Label > {fieldLabel.District} </Label>\r\n                                    <Col sm={12}>\r\n                                        <C_Select\r\n                                            name=\"District\"\r\n                                            value={values.District}\r\n                                            isDisabled={(subPageMode === url.PARTY_SELF_EDIT) && true}\r\n                                            isSearchable={true}\r\n                                            className=\"react-dropdown\"\r\n                                            classNamePrefix=\"dropdown\"\r\n                                            isLoading={districtDropDownLoading}\r\n                                            options={DistrictOnStateValues}\r\n                                            onChange={(hasSelect, evn) => {\r\n                                                onChangeSelect({ hasSelect, evn, state, setState, })\r\n                                                District_Dropdown_Handler(hasSelect)\r\n                                            }}\r\n                                        />\r\n                                        {isError.District.length > 0 && (\r\n                                            <span className=\"text-danger f-8\"><small>{isError.District}</small></span>\r\n                                        )}\r\n                                    </Col>\r\n                                </FormGroup>\r\n                            </Col>\r\n\r\n                            <Col md=\"1\"></Col>\r\n                            <Col md=\"3\">\r\n                                <FormGroup className=\"mb-3\">\r\n                                    <Label htmlFor=\"validationCustom01\">{fieldLabel.CityName} </Label>\r\n                                    <C_Select\r\n                                        name=\"CityName\"\r\n                                        id=\"CityName\"\r\n                                        value={values.CityName}\r\n                                        isDisabled={(subPageMode === url.PARTY_SELF_EDIT) && true}\r\n                                        isSearchable={true}\r\n                                        classNamePrefix=\"dropdown\"\r\n                                        isLoading={cityDropDownLoading}\r\n                                        options={City_DropdownOptions}\r\n                                        onChange={(hasSelect, evn) => {\r\n                                            onChangeSelect({ hasSelect, evn, state, setState, })\r\n                                        }}\r\n                                    />\r\n                                    {isError.CityName.length > 0 && (\r\n                                        <span className=\"text-danger f-8\"><small>{isError.CityName}</small></span>\r\n                                    )}\r\n                                </FormGroup>\r\n                            </Col>\r\n                            {\r\n\r\n                                (city_AddMasterAccess) ?\r\n                                    <Col md=\"1\" className=\" mt-3\">\r\n                                        <AddMaster\r\n                                            masterModal={CityMaster}\r\n                                            masterPath={url.CITY}\r\n                                        />\r\n                                    </Col> : <Col md=\"1\"> </Col>\r\n\r\n                            }\r\n                        </Row>\r\n                        <Row>\r\n                            {subPageMode === url.RETAILER_MASTER &&\r\n\r\n                                <Col md=\"3\">\r\n                                    <FormGroup className=\"mb-3\">\r\n                                        <Label htmlFor=\"validationCustom01\">{fieldLabel.Route} </Label>\r\n                                        <Select\r\n                                            name=\"Route\"\r\n                                            id=\"Route\"\r\n                                            value={values.Route}\r\n                                            isSearchable={true}\r\n                                            classNamePrefix=\"dropdown\"\r\n                                            options={RouteName_Options}\r\n                                            onChange={(hasSelect, evn) => {\r\n                                                onChangeSelect({ hasSelect, evn, state, setState, })\r\n                                            }}\r\n                                        />\r\n                                        {isError.Route.length > 0 && (\r\n                                            <span className=\"text-danger f-8\"><small>{isError.Route}</small></span>\r\n                                        )}\r\n                                    </FormGroup>\r\n                                </Col>\r\n                            }\r\n                            {subPageMode === url.RETAILER_MASTER &&\r\n                                <Col md=\"1\"> </Col>}\r\n\r\n                            <Col md=\"3\">\r\n                                <FormGroup className=\"mb-3\">\r\n                                    <Label>{fieldLabel.Latitude} </Label>\r\n                                    <Input\r\n                                        name=\"Latitude\"\r\n                                        value={values.Latitude}\r\n                                        type=\"text\"\r\n                                        className={isError.Latitude.length > 0 ? \"is-invalid form-control\" : \"form-control\"}\r\n                                        placeholder=\"Please Enter Latitude\"\r\n                                        autoComplete='off'\r\n                                        onChange={(event) => {\r\n                                            onChangeText({ event, state, setState })\r\n                                        }}\r\n                                    />\r\n                                    {isError.Latitude.length > 0 && (\r\n                                        <span className=\"invalid-feedback\">{isError.Latitude}</span>\r\n                                    )}\r\n                                </FormGroup>\r\n                            </Col>\r\n\r\n\r\n                            <Col md=\"1\"> </Col>\r\n\r\n\r\n                            <Col md=\"3\">\r\n                                <FormGroup className=\"mb-3\">\r\n                                    <Label>{fieldLabel.Longitude} </Label>\r\n                                    <Input\r\n                                        name=\"Longitude\"\r\n                                        value={values.Longitude}\r\n                                        type=\"text\"\r\n                                        className={isError.Longitude.length > 0 ? \"is-invalid form-control\" : \"form-control\"}\r\n                                        placeholder=\"Please Enter Longitude\"\r\n                                        autoComplete='off'\r\n                                        onChange={(event) => {\r\n                                            onChangeText({ event, state, setState })\r\n                                        }}\r\n                                    />\r\n                                    {isError.Longitude.length > 0 && (\r\n                                        <span className=\"invalid-feedback\">{isError.Longitude}</span>\r\n                                    )}\r\n                                </FormGroup>\r\n                            </Col>\r\n\r\n\r\n                            <Col md=\"1\"> </Col>\r\n\r\n                            <Col md=\"3\">\r\n                                <FormGroup className=\"mb-3\">\r\n                                    <Row style={{ marginTop: '25px' }}>\r\n                                        <Label\r\n                                            className=\"col-sm-4 col-form-label\">\r\n                                            {fieldLabel.isActive}\r\n                                        </Label>\r\n                                        <Col md={4} style={{ marginTop: '7px' }} className=\" form-check form-switch form-switch-sm \">\r\n                                            <div className=\"form-check form-switch form-switch-md mb-3\">\r\n                                                <Input\r\n                                                    type=\"checkbox\"\r\n                                                    className=\"form-check-input\"\r\n                                                    checked={values.isActive}\r\n                                                    disabled={(subPageMode === url.PARTY_SELF_EDIT) && true}\r\n                                                    name=\"isActive\"\r\n                                                    onChange={(event) => onChangeCheckbox({ event, state, setState })}\r\n                                                />\r\n                                            </div>\r\n                                        </Col>\r\n                                    </Row>\r\n                                </FormGroup>\r\n                            </Col>\r\n                        </Row>\r\n                    </CardBody>\r\n                </Card>\r\n            </Row>\r\n        </div >\r\n    )\r\n    return FirstTab\r\n})\r\n\r\nexport default BaseTabForm\r\n\r\n\r\n\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\PartyMaster\\MasterAdd\\PrefixTab\\PrefixTab.js",["3943"],"import React, { forwardRef, useEffect, useImperativeHandle, useState } from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { Card, CardBody, Col, FormGroup, Input, Label } from 'reactstrap'\r\nimport { comAddPageFieldFunc, initialFiledFunc, onChangeText } from '../../../../../components/Common/validationFunction'\r\nimport { url } from '../../../../../routes'\r\n\r\nconst PrefixTab = forwardRef(({ subPageMode }, ref) => {\r\n\r\n    const fileds = {\r\n        OrderPrefix: '',\r\n        InvoicePrefix: '',\r\n        GRNPrefix: '',\r\n        ChallanPrefix: '',\r\n        ReceiptPrefix: '',\r\n        WorkOrderPrefix: '',\r\n        MaterialIssuePrefix: '',\r\n        DemandPrefix: '',\r\n        IBChallanPrefix: '',\r\n        IBInwardPrefix: '',\r\n        PurchaseReturnprefix:'',\r\n    }\r\n\r\n    const [state, setState] = useState(() => initialFiledFunc(fileds))\r\n\r\n    useImperativeHandle(ref, () => ({\r\n        setCurrentState(arr) {\r\n            setState(arr)\r\n        },\r\n        getCurrentState: () => {\r\n            return state\r\n        },\r\n    }));\r\n\r\n    const { values } = state;\r\n    const { isError } = state;\r\n    const { fieldLabel } = state;\r\n\r\n    const {\r\n        pageField,\r\n    } = useSelector((state) => ({\r\n        pageField: state.CommonPageFieldReducer.pageField\r\n    }));\r\n\r\n    useEffect(() => {\r\n        if (pageField) {\r\n            const fieldArr = pageField.PageFieldMaster\r\n            comAddPageFieldFunc({ state, setState, fieldArr })\r\n        }\r\n    }, [pageField])\r\n\r\n    if (subPageMode === url.RETAILER_MASTER) {\r\n        return null\r\n    } return (\r\n        <div>\r\n            <Card className=\"text-black \" >\r\n                <CardBody className=\"c_card_body\">\r\n\r\n                    <FormGroup className=\"mb-3\">\r\n                        <Label className='col col-4'>{fieldLabel.OrderPrefix} </Label>\r\n                        <Col sm={4}>\r\n                            <Input\r\n                                name=\"OrderPrefix\"\r\n                                value={values.OrderPrefix}\r\n                                type=\"text\"\r\n                                className={isError.OrderPrefix.length > 0 ? \"is-invalid form-control\" : \"form-control\"}\r\n                                placeholder=\"Please Enter Order Prefix\"\r\n                                autoComplete='off'\r\n                                onChange={(event) => {\r\n                                    onChangeText({ event, state, setState })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                        {isError.OrderPrefix.length > 0 && (\r\n                            <span className=\"invalid-feedback\">{isError.OrderPrefix}</span>\r\n                        )}\r\n                    </FormGroup>\r\n\r\n                    <FormGroup className=\"mb-3\">\r\n                        <Label className='col col-4'>{fieldLabel.InvoicePrefix} </Label>\r\n                        <Col sm={4}>\r\n                            <Input\r\n                                name=\"InvoicePrefix\"\r\n                                value={values.InvoicePrefix}\r\n                                type=\"text\"\r\n                                className={isError.InvoicePrefix.length > 0 ? \"is-invalid form-control\" : \"form-control\"}\r\n                                placeholder=\"Please Enter Invoice Prefix\"\r\n                                autoComplete='off'\r\n                                onChange={(event) => {\r\n                                    onChangeText({ event, state, setState })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                        {isError.InvoicePrefix.length > 0 && (\r\n                            <span className=\"invalid-feedback\">{isError.InvoicePrefix}</span>\r\n                        )}\r\n                    </FormGroup>\r\n\r\n\r\n\r\n\r\n                    <FormGroup className=\"mb-3\">\r\n                        <Label className='col col-4'>{fieldLabel.GRNPrefix} </Label>\r\n                        <Col sm={4}>\r\n                            <Input\r\n                                name=\"GRNPrefix\"\r\n                                value={values.GRNPrefix}\r\n                                type=\"text\"\r\n                                className={isError.GRNPrefix.length > 0 ? \"is-invalid form-control\" : \"form-control\"}\r\n                                placeholder=\"Please Enter GRN Prefix\"\r\n                                autoComplete='off'\r\n                                onChange={(event) => {\r\n                                    onChangeText({ event, state, setState })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                        {isError.GRNPrefix.length > 0 && (\r\n                            <span className=\"invalid-feedback\">{isError.GRNPrefix}</span>\r\n                        )}\r\n                    </FormGroup>\r\n\r\n\r\n\r\n\r\n                    <FormGroup className=\"mb-3\">\r\n                        <Label className='col col-4'>{fieldLabel.ReceiptPrefix} </Label>\r\n                        <Col sm={4}>\r\n                            <Input\r\n                                name=\"ReceiptPrefix\"\r\n                                value={values.ReceiptPrefix}\r\n                                type=\"text\"\r\n                                className={isError.ReceiptPrefix.length > 0 ? \"is-invalid form-control\" : \"form-control\"}\r\n                                placeholder=\"Please Enter Receipt Prefix\"\r\n                                autoComplete='off'\r\n                                onChange={(event) => {\r\n                                    onChangeText({ event, state, setState })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                        {isError.ReceiptPrefix.length > 0 && (\r\n                            <span className=\"invalid-feedback\">{isError.ReceiptPrefix}</span>\r\n                        )}\r\n                    </FormGroup>\r\n\r\n                    {/* {!(subPageMode === url.PARTY_SELF_EDIT) ?\r\n                        <FormGroup className=\"mb-3\">\r\n                            <Label className='col col-4'>{fieldLabel.WorkOrderPrefix} </Label>\r\n                            <Col sm={4}>\r\n                                <Input\r\n                                    name=\"WorkOrderPrefix\"\r\n                                    value={values.WorkOrderPrefix}\r\n                                    type=\"text\"\r\n                                    className={isError.WorkOrderPrefix.length > 0 ? \"is-invalid form-control\" : \"form-control\"}\r\n                                    placeholder=\"Please Enter WorkOrder Prefix\"\r\n                                    autoComplete='off'\r\n                                    onChange={(event) => {\r\n                                        onChangeText({ event, state, setState })\r\n                                    }}\r\n                                />\r\n                            </Col>\r\n\r\n                            {isError.WorkOrderPrefix.length > 0 && (\r\n                                <span className=\"invalid-feedback\">{isError.WorkOrderPrefix}</span>\r\n                            )}\r\n                        </FormGroup>\r\n                        : null\r\n                    } */}\r\n\r\n                    {/* {!(subPageMode === url.PARTY_SELF_EDIT) ?\r\n                        <FormGroup className=\"mb-3\">\r\n                            <Label className='col col-4'>{fieldLabel.MaterialIssuePrefix} </Label>\r\n                            <Col sm={4}>\r\n                                <Input\r\n                                    name=\"MaterialIssuePrefix\"\r\n                                    value={values.MaterialIssuePrefix}\r\n                                    type=\"text\"\r\n                                    className={isError.MaterialIssuePrefix.length > 0 ? \"is-invalid form-control\" : \"form-control\"}\r\n                                    placeholder=\"Please Enter Material Issue Prefix\"\r\n                                    autoComplete='off'\r\n                                    onChange={(event) => {\r\n                                        onChangeText({ event, state, setState })\r\n                                    }}\r\n                                />\r\n                            </Col>\r\n\r\n                            {isError.MaterialIssuePrefix.length > 0 && (\r\n                                <span className=\"invalid-feedback\">{isError.MaterialIssuePrefix}</span>\r\n                            )}\r\n                        </FormGroup>\r\n                        : null\r\n                    } */}\r\n\r\n                    {/* {!(subPageMode === url.PARTY_SELF_EDIT) ?\r\n                        <FormGroup className=\"mb-3\">\r\n                            <Label className='col col-4'>{fieldLabel.DemandPrefix} </Label>\r\n                            <Col sm={4}>\r\n                                <Input\r\n                                    name=\"DemandPrefix\"\r\n                                    value={values.DemandPrefix}\r\n                                    type=\"text\"\r\n                                    className={isError.DemandPrefix.length > 0 ? \"is-invalid form-control\" : \"form-control\"}\r\n                                    placeholder=\"Please Enter Demand Prefix\"\r\n                                    autoComplete='off'\r\n                                    onChange={(event) => {\r\n                                        onChangeText({ event, state, setState })\r\n                                    }}\r\n                                />\r\n                            </Col>\r\n\r\n                            {isError.DemandPrefix.length > 0 && (\r\n                                <span className=\"invalid-feedback\">{isError.DemandPrefix}</span>\r\n                            )}\r\n                        </FormGroup>\r\n                        : null\r\n                    } */}\r\n\r\n                    {/* {!(subPageMode === url.PARTY_SELF_EDIT) ?\r\n                        <FormGroup className=\"mb-3\">\r\n                            <Label className='col col-4'>{fieldLabel.ChallanPrefix} </Label>\r\n                            <Col sm={4}>\r\n                                <Input\r\n                                    name=\"ChallanPrefix\"\r\n                                    value={values.ChallanPrefix}\r\n                                    type=\"text\"\r\n                                    className={isError.ChallanPrefix.length > 0 ? \"is-invalid form-control\" : \"form-control\"}\r\n                                    placeholder=\"Please Enter Challan Prefix\"\r\n                                    autoComplete='off'\r\n                                    onChange={(event) => {\r\n                                        onChangeText({ event, state, setState })\r\n                                    }}\r\n                                />\r\n                            </Col>\r\n                            {isError.ChallanPrefix.length > 0 && (\r\n                                <span className=\"invalid-feedback\">{isError.ChallanPrefix}</span>\r\n                            )}\r\n                        </FormGroup>\r\n                        : null\r\n                    } */}\r\n\r\n                    <FormGroup className=\"mb-3\">\r\n                        <Label className='col col-4'>{fieldLabel.PurchaseReturnprefix} </Label>\r\n                        <Col sm={4}>\r\n                            <Input\r\n                                name=\"PurchaseReturnprefix\"\r\n                                value={values.PurchaseReturnprefix}\r\n                                type=\"text\"\r\n                                className={isError.PurchaseReturnprefix.length > 0 ? \"is-invalid form-control\" : \"form-control\"}\r\n                                placeholder=\"Please Enter Purchase Return prefix\"\r\n                                autoComplete='off'\r\n                                onChange={(event) => {\r\n                                    onChangeText({ event, state, setState })\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                        {isError.PurchaseReturnprefix.length > 0 && (\r\n                            <span className=\"invalid-feedback\">{isError.PurchaseReturnprefix}</span>\r\n                        )}\r\n                    </FormGroup>\r\n\r\n\r\n                </CardBody>\r\n            </Card>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default PrefixTab\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\PartyMaster\\MasterAdd\\AddressDetailsTab\\index.js",["3944","3945","3946"],"import React, { forwardRef, useEffect, useImperativeHandle, useState } from 'react';\r\nimport { Button, Card, CardBody, Col, FormGroup, Input, Label, Row } from 'reactstrap';\r\nimport AddressDetailsTable from './Table';\r\nimport { useSelector } from 'react-redux';\r\nimport {\r\n    comAddPageFieldFunc,\r\n    formValid,\r\n    initialFiledFunc,\r\n    onChangeCheckbox,\r\n    onChangeDate,\r\n    onChangeText,\r\n    resetFunction\r\n} from '../../../../../components/Common/validationFunction';\r\nimport { C_DatePicker } from '../../../../../CustomValidateForm';\r\n\r\nconst AddressTabForm = forwardRef((props, ref) => {\r\n\r\n    const fileds = {\r\n        PartyAddress: \"\",\r\n        FSSAINo: '',\r\n        FSSAIExipry: null,\r\n        PIN: '',\r\n        IsDefault: false\r\n    }\r\n\r\n    const [state, setState] = useState(() => initialFiledFunc(fileds))\r\n\r\n    const [addressTable, setAddressTable] = useState([]);\r\n    const [imageTable, setImageTable] = useState('');\r\n\r\n    const { values } = state;\r\n    const { isError } = state;\r\n    const { fieldLabel } = state;\r\n\r\n    useImperativeHandle(ref, () => ({\r\n        setCurrentState(arr) {\r\n            setAddressTable(arr)\r\n        },\r\n        getCurrentState: () => {\r\n            return addressTable\r\n        },\r\n        IsAddressEnter: () => {\r\n            return state\r\n        }\r\n\r\n    }));\r\n\r\n    const {\r\n        pageField,\r\n    } = useSelector((state) => ({\r\n        pageField: state.CommonPageFieldReducer.pageField\r\n    }));\r\n\r\n    useEffect(() => {\r\n        if (pageField) {\r\n            const fieldArr = pageField.PageFieldMaster\r\n            comAddPageFieldFunc({ state, setState, fieldArr })\r\n        }\r\n    }, [pageField])\r\n\r\n    const addRowsHandler = (e) => {\r\n        e.preventDefault();\r\n\r\n        try {\r\n            const isvalid = formValid(state, setState)\r\n            if (isvalid) {\r\n\r\n                const val = {\r\n                    Address: values.PartyAddress,\r\n                    FSSAINo: values.FSSAINo,\r\n                    FSSAIExipry: values.FSSAIExipry,\r\n                    PIN: values.PIN,\r\n                    IsDefault: values.IsDefault,\r\n                    fssaidocument: imageTable\r\n                };\r\n                if (values.IsDefault) {\r\n                    addressTable.forEach(ele => {\r\n                        ele.IsDefault = false\r\n                    });\r\n                }\r\n                const tableleth = addressTable.length;\r\n                val.RowId = tableleth + 1;\r\n                const updatedTableData = [...addressTable];\r\n                updatedTableData.push(val);\r\n                setAddressTable(updatedTableData)\r\n                setState(resetFunction(fileds, state))// Clear form values \r\n            }\r\n        } catch (error) { }\r\n    }\r\n\r\n    const onchangeHandler = async (event) => {\r\n\r\n        const file = event.target.files[0]\r\n        const base64 = await convertBase64(file);\r\n        let ImageUpload = base64\r\n        setImageTable(ImageUpload)\r\n    }\r\n\r\n    const convertBase64 = (file) => {\r\n\r\n        return new Promise((resolve, reject) => {\r\n            const fileReader = new FileReader()\r\n            fileReader.readAsDataURL(file);\r\n\r\n            fileReader.onload = () => {\r\n                resolve(fileReader.result)\r\n            };\r\n            fileReader.onerror = (error) => {\r\n                reject(error)\r\n            }\r\n        })\r\n    }\r\n\r\n    const FSSAIverifyhandler = () => {\r\n        window.open(\"https://foscos.fssai.gov.in/\");\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    const AddressTab = (\r\n        <Row>\r\n            <Card className=\"text-black\" style={{ backgroundColor: \"whitesmoke\" }}>\r\n                <CardBody >\r\n                    <Row >\r\n                        <Col md=\"9\" >\r\n                            <FormGroup className=\"mb-3\">\r\n                                <Label htmlFor=\"validationCustom01\">{fieldLabel.PartyAddress} </Label>\r\n                                <Input\r\n                                    name=\"PartyAddress\"\r\n                                    value={values.PartyAddress}\r\n                                    type=\"text\"\r\n                                    className={isError.PartyAddress.length > 0 ? \"is-invalid form-control\" : \"form-control\"}\r\n                                    placeholder=\"Please Enter Address\"\r\n                                    autoComplete='off'\r\n                                    onChange={(event) => {\r\n                                        onChangeText({ event, state, setState })\r\n                                    }}\r\n                                />\r\n                                {isError.PartyAddress.length > 0 && (\r\n                                    <span className=\"invalid-feedback\">{isError.PartyAddress}</span>\r\n                                )}\r\n                            </FormGroup>\r\n\r\n                        </Col>\r\n\r\n                        <Col md={1}>\r\n                            <Row className=\" mt-3\">\r\n                                <Col >\r\n                                    <Button\r\n                                        className=\"button_add badge badge-soft-primary font-size-12 waves-effect  waves-light  btn-outline-primary  \"\r\n                                        type=\"button\"\r\n                                        onClick={addRowsHandler}\r\n                                    >\r\n                                        <i className=\"dripicons-plus mt-3\"> </i>\r\n                                    </Button>\r\n                                </Col>\r\n                            </Row>\r\n                        </Col>\r\n                    </Row>\r\n\r\n                    <Row>\r\n                        <Col md=\"4\">\r\n                            <FormGroup className=\"mb-3\">\r\n                                <Label htmlFor=\"validationCustom01\">{fieldLabel.FSSAINo} </Label>\r\n                                <Input\r\n                                    name=\"FSSAINo\"\r\n                                    value={values.FSSAINo}\r\n                                    type=\"text\"\r\n                                    className={isError.FSSAINo.length > 0 ? \"is-invalid form-control\" : \"form-control\"}\r\n                                    placeholder=\"Please Enter FSSAINo\"\r\n                                    autoComplete='off'\r\n                                    onChange={(event) => {\r\n                                        onChangeText({ event, state, setState })\r\n                                    }}\r\n                                />\r\n                                {(isError.FSSAINo.length > 0) && (\r\n                                    <span className=\"invalid-feedback\">{isError.FSSAINo}</span>\r\n                                )}\r\n                            </FormGroup>\r\n                        </Col>\r\n                        <Col md=\"1\" className=\" mt-3\">\r\n                            <Button\r\n                                className=\" p-1 mt-3 \"\r\n                                color=\"btn btn-outline-primary border-2 font-size-10 \"\r\n                                type=\"button\"\r\n                                title={`After Redirect Click on FBO Search`}\r\n\r\n                                onClick={FSSAIverifyhandler}\r\n                            > Verify FSSAI\r\n                            </Button>\r\n                        </Col>\r\n\r\n                        {/* <Col md=\"1\"> </Col> */}\r\n                        <Col md=\"4\">\r\n                            <FormGroup className=\"mb-3\">\r\n                                <Label htmlFor=\"validationCustom01\">{fieldLabel.FSSAIExipry} </Label>\r\n                                <C_DatePicker\r\n                                    options={{\r\n                                        minDate: \"today\",\r\n                                        altInput: true,\r\n                                        altFormat: \"d-m-Y\",\r\n                                        dateFormat: \"Y-m-d\",\r\n                                    }}\r\n                                    name=\"FSSAIExipry\"\r\n                                    value={values.FSSAIExipry}\r\n                                    placeholder={\"DD/MM/YYYY\"}\r\n                                    onChange={(c, v, e) => onChangeDate({ v, e, state, setState })}\r\n                                />\r\n                                {(isError.FSSAIExipry.length > 0) && (\r\n                                    <span className=\"text-danger f-8\"><small>{isError.FSSAIExipry}</small></span>\r\n                                )}\r\n                            </FormGroup>\r\n                        </Col>\r\n                    </Row>\r\n\r\n                    <Row >\r\n                        <Col md=\"4\">\r\n                            <FormGroup className=\"mb-3\">\r\n                                <Label htmlFor=\"validationCustom01\">{fieldLabel.PIN} </Label>\r\n                                <Input\r\n                                    name=\"PIN\"\r\n                                    value={values.PIN}\r\n                                    type=\"text\"\r\n                                    className={isError.PIN.length > 0 ? \"is-invalid form-control\" : \"form-control\"}\r\n                                    placeholder=\"Please Enter PIN\"\r\n                                    autoComplete='off'\r\n                                    onChange={(event) => {\r\n                                        onChangeText({ event, state, setState })\r\n                                    }}\r\n                                />\r\n                                {isError.PIN.length > 0 && (\r\n                                    <span className=\"invalid-feedback\">{isError.PIN}</span>\r\n                                )}\r\n                            </FormGroup>\r\n                        </Col>\r\n\r\n                        <Col md=\"1\"></Col>\r\n\r\n                        <Col md=\"4\" >\r\n                            <FormGroup >\r\n                                <Label >FSSI Document</Label>\r\n                                <Input type=\"file\"\r\n                                    className=\"form-control \"\r\n                                    name=\"image\"\r\n                                    id=\"file\"\r\n                                    accept=\".jpg, .jpeg, .png ,.pdf\"\r\n                                    onChange={(event) => { onchangeHandler(event) }}\r\n                                />\r\n                            </FormGroup>\r\n                        </Col>\r\n                    </Row>\r\n\r\n                    <Row>\r\n                        <Col md=\"3\">\r\n                            <FormGroup className=\"mb-3\">\r\n                                <Row style={{ marginTop: '25px' }}>\r\n                                    <Label className=\"col-sm-4 col-form-label\">{fieldLabel.IsDefault} </Label>\r\n                                    <Col md={4} style={{ marginTop: '7px' }} className=\" form-check form-switch form-switch-sm \">\r\n                                        <div className=\"form-check form-switch form-switch-md mb-3\">\r\n                                            <Input type=\"checkbox\"\r\n                                                name=\"IsDefault\"\r\n                                                className=\"form-check-input\"\r\n                                                checked={values.IsDefault}\r\n                                                onChange={(event) => {\r\n                                                    onChangeCheckbox({ event, state, setState })\r\n                                                }}\r\n                                            />\r\n                                        </div>\r\n                                    </Col>\r\n                                </Row>\r\n                            </FormGroup>\r\n                        </Col>\r\n                    </Row>\r\n\r\n                </CardBody>\r\n            </Card>\r\n            <Row>\r\n                <AddressDetailsTable addressTable={addressTable} setAddressTable={setAddressTable} />\r\n            </Row>\r\n\r\n        </Row>\r\n    );\r\n    function curruntState() {\r\n        return addressTable\r\n    }\r\n    return AddressTab\r\n    // [AddressTab, curruntState, setAddressTable]\r\n})\r\n\r\nexport default AddressTabForm;\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\PartyMaster\\MasterAdd\\AddressDetailsTab\\Table.js",["3947","3948"],"import React, { useEffect } from 'react';\r\nimport { Button, Input, Table, } from 'reactstrap';\r\nimport { Tbody, Thead } from 'react-super-responsive-table';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { PartyAddressDeleteID, PartyAddressDeleteIDSuccess } from '../../../../../store/Administrator/PartyRedux/action';\r\nimport { customAlert } from '../../../../../CustomAlert/ConfirmDialog';\r\n\r\nfunction AddressDetailsTable({ addressTable = [], setAddressTable }) {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const {\r\n        deleteMessage,\r\n    } = useSelector((state) => ({\r\n        deleteMessage: state.PartyMasterReducer.PartyAddressDelete,\r\n    }));\r\n\r\n    useEffect(() => {\r\n        if (deleteMessage.Status === true && deleteMessage.StatusCode === 200) {\r\n            dispatch(PartyAddressDeleteIDSuccess({ Status: false }));\r\n            if (!(deleteMessage.deleteId === 0)) {\r\n                var fil = addressTable.filter((i) => {\r\n                    return !(i.id === deleteMessage.deleteId);\r\n                });\r\n                setAddressTable(fil);\r\n            }\r\n            dispatch(\r\n                customAlert({\r\n                    Type: 1,\r\n                    Status: true,\r\n                    Message: deleteMessage.Message,\r\n\r\n                })\r\n            );\r\n        } else if (deleteMessage.Status === true) {\r\n            dispatch(PartyAddressDeleteIDSuccess({ Status: false }));\r\n            dispatch(\r\n                customAlert({\r\n                    Type: 3,\r\n                    Status: true,\r\n                    Message: JSON.stringify(deleteMessage.Message),\r\n                })\r\n            );\r\n        }\r\n    }, [deleteMessage]);\r\n\r\n    const ondeleteHandeler = (ele) => {\r\n        \r\n        if (ele.id === undefined) {\r\n            if (!(ele.RowId === 0)) {\r\n                var fil = addressTable.filter((i) => {\r\n                    return !(i.RowId === ele.RowId);\r\n                });\r\n                setAddressTable(fil);\r\n            }\r\n        }\r\n        else {\r\n            dispatch(PartyAddressDeleteID({ deleteId: ele.id, btnId: `btn-delete-${ele.id}` }))\r\n        }\r\n    };\r\n\r\n    function defaultChangeHandler(key) {\r\n\r\n        const newtableData = addressTable.map((ele, k) => {\r\n            ele.IsDefault = false;\r\n            if (k === key) {\r\n                ele.IsDefault = true;\r\n            }\r\n            return ele\r\n        });\r\n        setAddressTable(newtableData)\r\n    }\r\n\r\n    function myFunction(row) {\r\n\r\n        var x = document.getElementById(\"add-img\");\r\n\r\n        if (x.style.display === \"none\") {\r\n            x.src = row.fssaidocument\r\n            x.style.display = \"block\";\r\n        } else {\r\n            x.style.display = \"none\";\r\n        }\r\n    }\r\n\r\n    const tableRows = addressTable.map((info, key) => {\r\n\r\n        return (\r\n            <tr>\r\n                <td>{info.Address}</td>\r\n                <td>{info.FSSAINo}</td>\r\n                <td>{info.FSSAIExipry}</td>\r\n                <td>\r\n                    <button\r\n                        type='button'\r\n                        onClick={() => { myFunction(info) }}\r\n                        className=\"badge badge-soft-info font-size-12 btn btn-info waves-effect waves-light w-xxs border border-light\">\r\n                        Show Image\r\n                    </button>\r\n                </td>\r\n                <td>{info.PIN}</td>\r\n                < td><Input type=\"radio\"\r\n                    name=\"btnradio\"\r\n                    id={`radioButton${key}`}\r\n                    defaultChecked={info.IsDefault ? true : false}\r\n                    onClick={(e) => defaultChangeHandler(key)} />\r\n                    {`${info.IsDefault}`}\r\n                </td>\r\n\r\n                <td>\r\n                    <Button\r\n                        className=\"badge badge-soft-danger font-size-12 btn btn-danger waves-effect waves-light w-xxs border border-light\"\r\n                        data-mdb-toggle=\"tooltip\" data-mdb-placement=\"top\" title=\"Delete Party Type\"\r\n                        disabled={info.IsDefault === false ? false : true}\r\n                        onClick={(e) =>\r\n                            ondeleteHandeler(info)\r\n                        }\r\n                    >\r\n                        <i className=\"mdi mdi-delete font-size-18\"></i>\r\n                    </Button>\r\n                </td>\r\n\r\n            </tr >\r\n        );\r\n    });\r\n\r\n    return (\r\n        <>\r\n            <div>\r\n                < img id='add-img' className='abc1' src={''} />\r\n                {addressTable.length > 0 ?\r\n                    <Table className=\"table table-bordered table-hover\">\r\n                        <Thead>\r\n                            <tr>\r\n                                <th className=\"col col-sm-3\">Address</th>\r\n                                <th className=\"col col-sm-3\">FSSAINo</th>\r\n                                <th className=\"col col-sm-3\">FSSAIExipry</th>\r\n                                <th className=\"col col-sm-3\">FSSAI Document</th>\r\n                                <th className=\"col col-sm-3\">PIN</th>\r\n                                <th className=\"col col-sm-3\">IsDefault</th>\r\n                                <th className=\"col col-sm-3\">{\"Action\"}</th>\r\n                            </tr>\r\n                        </Thead>\r\n                        <Tbody>{tableRows}</Tbody>\r\n                    </Table>\r\n                    : null}\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default AddressDetailsTable;\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\PartyMaster\\MasterAdd\\FirstTab\\PriceDropOptions.js",["3949","3950"],"import React, { useEffect } from 'react'\r\nimport './Tree.scss'\r\n\r\nconst PriceDropOptions = (props) => {\r\n\r\n    useEffect(() => {\r\n        window.addEventListener('mouseup', handleClosePriceDropOptions);\r\n        return () => { // cleanup this component\r\n            window.removeEventListener('mouseup', handleClosePriceDropOptions);\r\n        };\r\n    }, []);\r\n\r\n    function handleClosePriceDropOptions(event) {\r\n        try {\r\n            var pol = document.getElementById('price-drop');\r\n            if (event.target != pol && event.target.parentNode != pol) {\r\n                pol.style.display = 'none';\r\n            }\r\n        } catch (e) { }\r\n    };\r\n\r\n    const ChildNode = (node) => (\r\n        <li >\r\n            <div className=\"classmt\">\r\n                <span id=\"price-option\" className=\" text-black  form-control\"\r\n                    onClick={(e) => {\r\n                        props.setPriceSelect(node);\r\n                        // onchange(e);\r\n                    }}>{node.label}</span>\r\n            </div>\r\n            <div >\r\n                <ul >\r\n                    {ParentNode(node.children)}\r\n                </ul>\r\n            </div>\r\n        </li>\r\n    );\r\n\r\n    const ParentNode = (tree1) => (\r\n        <ul className='list-group'>\r\n            {tree1.map((tree) => (\r\n                ChildNode(tree)\r\n            ))}\r\n        </ul>\r\n    );\r\n\r\n    return (\r\n        <div id=\"price-drop\" className='price-drop-options' >\r\n            <div className='price-drop-body'>\r\n                <ul style={{ paddingLeft: '0px' }}>\r\n                    {ParentNode(props.data)}</ul>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default PriceDropOptions;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// Declare a new state variable, which we'll call \"menu\"\r\n\r\n// export default function TreeInput({ data = [] }) {\r\n\r\n//     const [menu, setMenu] = useState(false);\r\n//     const [dropOpen, setDropOpen] = useState(false);\r\n//     const [currentPrice, setCurrentPrice] = useState({ Name: '' });\r\n\r\n//     const dropOpen_ONClickHandler = price => {\r\n//         setCurrentPrice(price)\r\n//         setDropOpen(true)\r\n//     }\r\n//     const delete_PriceList = price => {\r\n\r\n//     }\r\n//     function sub_Price_Add_Handler() {\r\n//         var price = document.getElementById(\"txtsubprice\")\r\n//         if (price.value === \"\") {\r\n//             alert(\"please enter value\")\r\n//         } else {\r\n\r\n//         }\r\n//     }\r\n//     const toggle = () => {\r\n//         setMenu('');\r\n//     }\r\n\r\n//     function fun1(data1) {\r\n//         return (\r\n//             <div>\r\n//                 {\r\n//                     data1.map(tree => fun2(tree))\r\n//                 }\r\n//             </div>\r\n//         )\r\n//     }\r\n\r\n//     function fun2(data2) {\r\n//         //\r\n//         return (\r\n//             // <li >\r\n//             <div style={{ paddingLeft: \"20px\" }} className={\"\"} >\r\n//                 <div className='row justify-content-center mt-n4 '>\r\n//                     <div className=' col-10'>\r\n//                         <Input type=\"text\" defaultValue={data2.Name} ></Input>\r\n\r\n//                     </div>\r\n//                     <div className=' col-1 al-end'> <input type=\"checkBox\" ></input></div>\r\n//                     <div className=' col-1 '>\r\n//                         <i className=\"mdi mdi-pencil font-size-12\"\r\n//                             onClick={e => setMenu(data2.id)}\r\n//                         ></i>\r\n//                         <Dropdown isOpen={menu === data2.id} toggle={toggle} className=\"d-inline-block\">\r\n//                             <DropdownToggle className=\"btn header-item \" tag=\"button\">\r\n\r\n//                             </DropdownToggle>\r\n//                             <DropdownMenu className=\"language-switch dropdown-menu-end\">\r\n\r\n//                                 <DropdownItem\r\n//                                     key={data2.id}\r\n//                                     onClick={(e) => { dropOpen_ONClickHandler(data2) }}\r\n//                                 // // className={`notify-item ${selectedLang === key ? \"active\" : \"none\"\r\n//                                 //     }`}\r\n//                                 >\r\n//                                     <span className=\"align-middle text-black\"\r\n//                                     >\r\n//                                         {\"Add Sub-Rate\"}\r\n//                                     </span>\r\n//                                 </DropdownItem>\r\n\r\n//                                 <DropdownItem\r\n//                                     key={data2.id}\r\n//                                     onClick={() => delete_PriceList(data2.id)}\r\n//                                 // // className={`notify-item ${selectedLang === key ? \"active\" : \"none\"\r\n//                                 //     }`}\r\n//                                 >\r\n//                                     <span className=\"align-middle text-danger\">\r\n//                                         {\"Delete\"}\r\n//                                     </span>\r\n//                                 </DropdownItem>\r\n\r\n//                             </DropdownMenu>\r\n\r\n//                         </Dropdown>\r\n//                     </div>\r\n\r\n//                     {data2.childern ? fun1(data2.childern) : null}\r\n//                 </div>\r\n//             </div>\r\n\r\n//         )\r\n\r\n//     }\r\n\r\n\r\n\r\n//     return (\r\n\r\n//         <div className={\"mt-3\"}>\r\n//             <Modal\r\n//                 isOpen={dropOpen}\r\n//                 toggle={() => { setDropOpen(!dropOpen) }}\r\n//                 size=\"sm\"\r\n//                 centered={true}\r\n//                 backdrop={'static'}\r\n//             >\r\n//                 <div className=\"modal-header\">\r\n//                     <h5 className=\"modal-title mt-0\">Add sub-Price </h5>\r\n//                     <button\r\n//                         type=\"button\"\r\n//                         onClick={() => {\r\n//                             setDropOpen(!dropOpen)\r\n//                         }}\r\n//                         className=\"close\"\r\n//                         data-dismiss=\"modal\"\r\n//                         aria-label=\"Close\"\r\n//                     >\r\n//                         <span aria-hidden=\"true\">&times;</span>\r\n//                     </button>\r\n//                 </div>\r\n//                 <div className=\"modal-body\">\r\n//                     <Row className=\"justify-content-md-left\">\r\n\r\n//                         <span >{currentPrice.Name}</span>\r\n\r\n//                         <Label htmlFor=\"horizontal-firstname-input\" className=\"col-4 col-form-label\" >IsDivision </Label>\r\n//                         <Col style={{ marginTop: '9px' }} >\r\n//                             <Input type=\"text\" id='txtsubprice' />\r\n//                         </Col>\r\n//                     </Row>\r\n//                 </div>\r\n//                 <div className=\"modal-footer\">\r\n//                     <button type=\"button\" className=\"btn btn-light\" onClick={() => {\r\n//                         setDropOpen(!dropOpen)\r\n//                     }}>Close</button>\r\n//                     <button type=\"button\" className=\"btn btn-primary\" onClick={() => { sub_Price_Add_Handler() }} >Add</button>\r\n//                 </div>\r\n\r\n//             </Modal>\r\n//             {fun1(data)}\r\n\r\n//         </div>\r\n//     )\r\n// }\r\n\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\PartyMaster\\MasterAdd\\PartyIndex.js",["3951","3952","3953","3954","3955","3956","3957","3958"],"import React, { useEffect, useLayoutEffect, useRef, useState } from \"react\"\r\nimport MetaTags from \"react-meta-tags\"\r\nimport {\r\n    Card,\r\n    CardBody,\r\n    CardHeader,\r\n    Col,\r\n    Container,\r\n    Nav,\r\n    NavItem,\r\n    NavLink,\r\n    Row,\r\n    TabContent,\r\n    TabPane,\r\n} from \"reactstrap\"\r\nimport { useHistory } from \"react-router-dom\"\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport classnames from \"classnames\"\r\nimport { getCityOnDistrict, getCityOnDistrictSuccess, getState } from \"../../../../store/Administrator/EmployeeRedux/action\"\r\nimport {\r\n    editPartyID,\r\n    editPartyIDSuccess,\r\n    getDistrictOnState,\r\n    getDistrictOnStateSuccess,\r\n    postPartyData,\r\n    postPartyDataSuccess,\r\n    updatePartyID,\r\n    updatePartyIDSuccess\r\n} from \"../../../../store/Administrator/PartyRedux/action\"\r\nimport { Breadcrumb_inputName, commonPageField, commonPageFieldSuccess } from \"../../../../store/actions\"\r\nimport { btnIsDissablefunc, isEditMode_CssFun, loginCompanyID, loginPartyID, loginUserID, metaTagLabel } from \"../../../../components/Common/CommonFunction\"\r\nimport * as url from \"../../../../routes/route_url\";\r\nimport * as pageId from \"../../../../routes/allPageID\"\r\nimport * as mode from \"../../../../routes/PageMode\"\r\nimport { getPartyTypelist } from \"../../../../store/Administrator/PartyTypeRedux/action\";\r\nimport { getcompanyList } from \"../../../../store/Administrator/CompanyRedux/actions\";\r\nimport { SaveButton } from \"../../../../components/Common/CommonButton\";\r\nimport { SSDD_List_under_Company } from \"../../../../store/CommonAPI/SupplierRedux/actions\";\r\nimport AddressTabForm from \"./AddressDetailsTab/index\";\r\nimport { customAlert } from \"../../../../CustomAlert/ConfirmDialog\";\r\nimport { bulkSetState, formValid } from \"../../../../components/Common/validationFunction\";\r\nimport BaseTabForm from \"./FirstTab/index\";\r\nimport PrefixTab from \"./PrefixTab/PrefixTab\";\r\nimport { priceListByPartyAction, priceListByPartyActionSuccess } from \"../../../../store/Administrator/PriceList/action\";\r\nimport { userAccessUseEffect } from \"../../../../components/Common/CommonUseEffect\";\r\nimport NewCommonPartyDropdown from \"../../../../components/Common/NewCommonPartyDropdown\";\r\n\r\nfunction initialState(history) {\r\n\r\n    let page_Id = '';\r\n    let listPath = ''\r\n    let sub_Mode = history.location.pathname;\r\n\r\n    if (sub_Mode === url.PARTY) {\r\n        page_Id = pageId.PARTY;\r\n        listPath = url.PARTY_lIST\r\n    }\r\n    else if (sub_Mode === url.NON_RETAILER_PARTY) {\r\n        page_Id = pageId.NON_RETAILER_PARTY;\r\n        listPath = url.NON_RETAILER_PARTY_lIST\r\n    }\r\n    else if (sub_Mode === url.PARTY_SELF_EDIT) {\r\n        page_Id = pageId.PARTY_SELF_EDIT;\r\n    }\r\n    else {\r\n        page_Id = pageId.RETAILER_MASTER;\r\n        listPath = url.RETAILER_LIST\r\n    }\r\n    return { page_Id, listPath }\r\n};\r\n\r\nconst PartyMaster = (props) => {\r\n\r\n    const dispatch = useDispatch();\r\n    const history = useHistory()\r\n\r\n    const addressTabRef = useRef(null);\r\n    const baseTabRef = useRef(null);\r\n    const prefixTabRef = useRef(null);\r\n\r\n    const [page_id] = useState(() => initialState(history).page_Id)\r\n    const [listPath] = useState(() => initialState(history).listPath)\r\n    const [subPageMode] = useState(history.location.pathname)\r\n\r\n    const [EditData, setEditData] = useState('');\r\n    const [pageMode, setPageMode] = useState(mode.defaultsave);\r\n    const [userPageAccessState, setUserAccState] = useState(11);\r\n    const [activeTab1, setactiveTab1] = useState(\"1\")\r\n    const [modalCss, setModalCss] = useState(false);\r\n\r\n    const [editCreatedBy, seteditCreatedBy] = useState(\"\");\r\n\r\n    const {\r\n        postMsg,\r\n        userAccess,\r\n        editData,\r\n        updateMsg,\r\n        saveBtnloading,\r\n    } = useSelector((state) => ({\r\n        saveBtnloading: state.PartyMasterReducer.saveBtnloading,\r\n        postMsg: state.PartyMasterReducer.postMsg,\r\n        editData: state.PartyMasterReducer.editData,\r\n        updateMsg: state.PartyMasterReducer.updateMsg,\r\n        Company: state.Company.companyList,\r\n        PartyTypes: state.PartyTypeReducer.ListData,\r\n        PriceList: state.PartyMasterReducer.PriceList,\r\n        AddressTypes: state.PartyMasterReducer.AddressTypes,\r\n        userAccess: state.Login.RoleAccessUpdateData,\r\n\r\n    }));\r\n\r\n    const location = { ...history.location }\r\n    const hasShowloction = location.hasOwnProperty(mode.editValue)\r\n    const hasShowModal = props.hasOwnProperty(mode.editValue)\r\n\r\n    useEffect(() => userAccessUseEffect({\r\n        props,\r\n        userAccess,\r\n        dispatch,\r\n        setUserAccState\r\n    }), [userAccess]);\r\n\r\n    useEffect(() => {\r\n        if (subPageMode === url.PARTY_SELF_EDIT) {\r\n            dispatch(editPartyID({\r\n                editId: loginPartyID(),\r\n                btnmode: 'edit',\r\n                subPageMode: 'PartySelfEdit',\r\n                btnId: `btn-edit-${loginPartyID()}`,\r\n\r\n            }))\r\n        }\r\n        return () => {\r\n            dispatch(priceListByPartyActionSuccess([]));//clear privious priceList\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n\r\n        if (editData.Status === true) {\r\n            try {\r\n                if ((hasShowloction || hasShowModal) || (subPageMode === url.PARTY_SELF_EDIT)) {\r\n\r\n                    let hasEditVal = null\r\n                    if (hasShowloction) {\r\n                        setPageMode(location.pageMode)\r\n                        hasEditVal = location.editValue\r\n                    }\r\n                    else if (hasShowModal) {\r\n                        hasEditVal = props.editValue\r\n                        setPageMode(props.pageMode)\r\n                        setModalCss(true)\r\n                    }\r\n                    if ((editData.Status === true) && (subPageMode === url.PARTY_SELF_EDIT)) {\r\n                        hasEditVal = editData.Data\r\n                        setPageMode(mode.edit)\r\n                        setModalCss(false)\r\n                        dispatch(editPartyIDSuccess({ Status: false }));\r\n                    }\r\n\r\n                    if (hasEditVal) {\r\n\r\n                        setEditData(hasEditVal);\r\n                        dispatch(Breadcrumb_inputName(hasEditVal.Name))\r\n                        seteditCreatedBy(hasEditVal.CreatedBy);\r\n\r\n                        let baseValue = {\r\n                            Name: hasEditVal.Name,\r\n                            MobileNo: hasEditVal.MobileNo,\r\n                            Latitude: hasEditVal.Latitude,\r\n                            Longitude: hasEditVal.Longitude,\r\n                            PartyType: {\r\n                                label: hasEditVal.PartyType.Name,\r\n                                value: hasEditVal.PartyType.id,\r\n                            },\r\n                            SAPPartyCode: hasEditVal.SAPPartyCode,\r\n\r\n                            Supplier: hasEditVal.PartySubParty.map(i => ({\r\n                                value: i.Party,\r\n                                label: i.PartyName,\r\n                                Creditlimit: i.Creditlimit,\r\n                                Route: i.Route,\r\n                                Distance: i.Distance,\r\n                                Subparty: i.Subparty\r\n                            })),\r\n                            PAN: hasEditVal.PAN,\r\n                            Email: hasEditVal.Email,\r\n                            AlternateContactNo: hasEditVal.AlternateContactNo,\r\n                            State: {\r\n                                label: hasEditVal.State.Name,\r\n                                value: hasEditVal.State.id,\r\n                            },\r\n                            District: {\r\n                                label: hasEditVal.District.Name,\r\n                                value: hasEditVal.District.id,\r\n                            },\r\n                            CityName: {\r\n                                label: hasEditVal.City === null ? \"Select...\" : hasEditVal.City.Name,\r\n                                value: hasEditVal.City === null ? \"\" : hasEditVal.City.id,\r\n                            },\r\n                            Route: {\r\n                                label: hasEditVal.PartySubParty[0].RouteName === null ? \"Select...\" : hasEditVal.PartySubParty[0].RouteName,\r\n                                value: hasEditVal.PartySubParty[0].Route === null ? \"\" : hasEditVal.PartySubParty[0].Route,\r\n                            },\r\n                            GSTIN: hasEditVal.GSTIN,\r\n                            isActive: hasEditVal.isActive,\r\n\r\n                        };\r\n\r\n                        let prefix = (hasEditVal.PartyPrefix.length > 0) ? hasEditVal.PartyPrefix[0] : '';\r\n                        let prefixValue = {\r\n                            OrderPrefix: prefix.Orderprefix,\r\n                            InvoicePrefix: prefix.Invoiceprefix,\r\n                            GRNPrefix: prefix.Grnprefix,\r\n                            ReceiptPrefix: prefix.Receiptprefix,\r\n                            ChallanPrefix: prefix.Challanprefix,\r\n                            WorkOrderPrefix: prefix.WorkOrderprefix,\r\n                            MaterialIssuePrefix: prefix.MaterialIssueprefix,\r\n                            DemandPrefix: prefix.Demandprefix,\r\n                            IBChallanPrefix: prefix.IBChallanprefix,\r\n                            IBInwardPrefix: prefix.IBInwardprefix,\r\n                            PurchaseReturnprefix: prefix.PurchaseReturnprefix,\r\n                        };\r\n\r\n                        let editPriceList = (hasEditVal.PriceList) ? {\r\n                            label: hasEditVal.PriceList.Name, value: hasEditVal.PriceList.id,\r\n                        } : { label: '' };\r\n\r\n                        let nextId = 1;\r\n                        let addressTabPreIncrementId = hasEditVal.PartyAddress.map((obj) => {\r\n                            const newObj = { ...obj, RowId: nextId };\r\n                            nextId++;\r\n                            return newObj;\r\n                        })\r\n\r\n                        let getBaseTab = baseTabRef.current.getCurrentState();\r\n                        let setBaseTab = baseTabRef.current.setCurrentState;\r\n                        let getPrefixtab = prefixTabRef.current.getCurrentState();\r\n                        let setPrefixtab = prefixTabRef.current.setCurrentState;\r\n                        let setAddressTab = addressTabRef.current.setCurrentState;\r\n                        let setPriceList = baseTabRef.current.setPriceListSelect;\r\n\r\n                        bulkSetState(baseValue, getBaseTab, setBaseTab)\r\n                        bulkSetState(prefixValue, getPrefixtab, setPrefixtab)\r\n                        setAddressTab(addressTabPreIncrementId)\r\n                        setPriceList(editPriceList);\r\n\r\n                        dispatch(getDistrictOnState(hasEditVal.State.id))\r\n                        dispatch(getCityOnDistrict(hasEditVal.District.id))\r\n                        dispatch(priceListByPartyAction(hasEditVal.PartyType.id,))\r\n                        dispatch(editPartyIDSuccess({ Status: false }));\r\n                    }\r\n                }\r\n            } catch (e) { }\r\n        }\r\n\r\n    }, [editData]);\r\n\r\n    useLayoutEffect(() => {\r\n\r\n        dispatch(getDistrictOnStateSuccess([]))//clear district privious options\r\n        dispatch(getCityOnDistrictSuccess([]))//clear City privious options\r\n        dispatch(commonPageFieldSuccess(null));//clear privious PageField\r\n        dispatch(priceListByPartyActionSuccess([]));//clear privious priceList\r\n        dispatch(commonPageField(page_id))\r\n        dispatch(getState());\r\n        dispatch(getPartyTypelist());\r\n        dispatch(getcompanyList());\r\n        dispatch(SSDD_List_under_Company())\r\n    }, [])\r\n\r\n    useEffect(async () => {\r\n        if ((postMsg.Status === true) && (postMsg.StatusCode === 200) && !(pageMode === mode.dropdownAdd)) {\r\n            dispatch(postPartyDataSuccess({ Status: false }))\r\n\r\n            if (pageMode === mode.dropdownAdd) {\r\n                customAlert({\r\n                    Type: 1,\r\n                    Message: postMsg.Message,\r\n                })\r\n            }\r\n            else {\r\n                const a = await customAlert({\r\n                    Type: 1,\r\n                    Message: postMsg.Message,\r\n                })\r\n                if (a) {\r\n                    history.push({\r\n                        pathname: listPath,\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        else if ((postMsg.Status === true) && !(pageMode === mode.dropdownAdd)) {\r\n            dispatch(postPartyDataSuccess({ Status: false }))\r\n            customAlert({\r\n                Type: 4,\r\n                Message: JSON.stringify(postMsg.Message),\r\n            })\r\n        }\r\n    }, [postMsg.Status])\r\n\r\n    useEffect(() => {\r\n\r\n        if (updateMsg.Status === true && updateMsg.StatusCode === 200 && !modalCss) {\r\n            if (subPageMode === url.PARTY_SELF_EDIT) {\r\n                dispatch(updatePartyIDSuccess({ Status: false }));\r\n                customAlert({\r\n                    Type: 1,\r\n                    Message: JSON.stringify(updateMsg.Message),\r\n                })\r\n            }\r\n            else {\r\n                history.push({\r\n                    pathname: listPath,\r\n                })\r\n            }\r\n        }\r\n        else if (updateMsg.Status === true && !modalCss) {\r\n            dispatch(updatePartyIDSuccess({ Status: false }));\r\n            customAlert({\r\n                Type: 3,\r\n                Message: JSON.stringify(updateMsg.Message),\r\n            })\r\n\r\n        }\r\n    }, [updateMsg, modalCss]);\r\n\r\n    const toggle1 = tab => {\r\n        if (activeTab1 !== tab) {\r\n            setactiveTab1(tab)\r\n        }\r\n    }\r\n\r\n    const SaveHandler = (event) => {\r\n\r\n        event.preventDefault();\r\n        const btnId = event.target.id;\r\n\r\n        let baseTabDetail = baseTabRef.current.getCurrentState()\r\n        let priceListSelect = baseTabRef.current.getPriceListSelect()\r\n        let setBaseTabDetail = baseTabRef.current.setCurrentState\r\n        let addressTabDetail = addressTabRef.current.getCurrentState()\r\n        let prefixValue = prefixTabRef.current.getCurrentState().values\r\n        let addressTabIsAddressEnter = addressTabRef.current.IsAddressEnter()\r\n\r\n        const validBasetab = formValid(baseTabDetail, setBaseTabDetail)\r\n\r\n        let isError = addressTabIsAddressEnter.isError\r\n        let values = addressTabIsAddressEnter.values\r\n\r\n        if ((values.PartyAddress.length > 0) && (isError.PartyAddress === \"\")) {\r\n            customAlert({\r\n                Type: 4,\r\n                Message: \"Please Address Details Add In Table\",\r\n            })\r\n            return;\r\n        }\r\n\r\n        if (!validBasetab) {\r\n            setactiveTab1(\"1\")\r\n            return\r\n        };\r\n\r\n        if (addressTabDetail.length === 0) {\r\n            setactiveTab1(\"2\")\r\n            customAlert({\r\n                Type: 4,\r\n                Message: \"Address details is required\",\r\n            })\r\n            return;\r\n        };\r\n        const trueValues = addressTabDetail.map((index) => {\r\n            return (index.IsDefault === true)\r\n        })\r\n\r\n        const totalIsDefault = trueValues.reduce((count, value) => {\r\n            if (value === true) {\r\n                count++\r\n            }\r\n            return count\r\n        }, 0)\r\n\r\n        if (totalIsDefault === 0) {\r\n            setactiveTab1(\"2\")\r\n            customAlert({\r\n                Type: 4,\r\n                Message: \"Atleast One Default Address is Select \",\r\n            })\r\n            return;\r\n        };\r\n\r\n        try {\r\n            btnIsDissablefunc({ btnId, state: true })\r\n\r\n            const baseValue = baseTabDetail.values\r\n\r\n            const supplierArr = baseValue.Supplier.map((i) => ({\r\n\r\n                Party: i.value,\r\n                Distance: i.value,\r\n                CreatedBy: loginUserID(),\r\n                UpdatedBy: loginUserID(),\r\n                Creditlimit: pageMode === mode.edit ? i.Creditlimit : \"\",\r\n                Route: (baseValue.Route === \"\") ? \"\" : baseValue.Route.value,\r\n            }))\r\n\r\n            addressTabDetail.map((i) => {\r\n                if (i.id === undefined) {\r\n                    i[\"id\"] = \"0\"\r\n                }\r\n            })\r\n\r\n            if (((priceListSelect.label === \"\") || (priceListSelect.value === \"\")) && (subPageMode === url.RETAILER_MASTER)) {\r\n                customAlert({\r\n                    Type: 4,\r\n                    Message: \"Please Select PriceList \",\r\n                })\r\n                return;\r\n            }\r\n\r\n            const jsonBody = JSON.stringify({\r\n                \"Name\": baseValue.Name,\r\n                \"PriceList\": priceListSelect.value,\r\n                \"PartyType\": baseValue.PartyType.value,\r\n                \"Company\": (pageMode === mode.defaultsave) ? loginCompanyID() : EditData.Company.id,\r\n                \"PAN\": baseValue.PAN,\r\n                \"Email\": baseValue.Email,\r\n                \"MobileNo\": baseValue.MobileNo,\r\n                \"AlternateContactNo\": baseValue.AlternateContactNo,\r\n                \"State\": baseValue.State.value,\r\n                \"District\": baseValue.District.value,\r\n                \"City\": (baseValue.CityName === \"\") ? \"\" : baseValue.CityName.value,\r\n                \"SAPPartyCode\": !(baseValue.SAPPartyCode === \"\") ? baseValue.SAPPartyCode : null,\r\n                \"Taluka\": 0,\r\n                \"Latitude\": baseValue.Latitude,\r\n                \"Longitude\": baseValue.Longitude,\r\n                \"GSTIN\": baseValue.GSTIN,\r\n                \"isActive\": baseValue.isActive,\r\n                \"CreatedBy\": loginUserID(),\r\n                \"UpdatedBy\": loginUserID(),\r\n                \"PartySubParty\": supplierArr,\r\n                \"PartyAddress\": addressTabDetail,\r\n\r\n                \"PartyPrefix\": [\r\n                    {\r\n                        \"Orderprefix\": prefixValue.OrderPrefix,\r\n                        \"Invoiceprefix\": prefixValue.InvoicePrefix,\r\n                        \"Grnprefix\": prefixValue.GRNPrefix,\r\n                        \"Receiptprefix\": prefixValue.ReceiptPrefix,\r\n                        \"Challanprefix\": prefixValue.Challanprefix,\r\n                        \"WorkOrderprefix\": prefixValue.WorkOrderPrefix,\r\n                        \"MaterialIssueprefix\": prefixValue.MaterialIssuePrefix,\r\n                        \"Demandprefix\": prefixValue.DemandPrefix,\r\n                        \"IBChallanprefix\": prefixValue.IBChallanPrefix,\r\n                        \"IBInwardprefix\": prefixValue.IBInwardPrefix,\r\n                        \"PurchaseReturnprefix\": prefixValue.PurchaseReturnprefix,\r\n                    }\r\n                ],\r\n\r\n            });\r\n\r\n            if (pageMode === mode.edit) {\r\n\r\n                dispatch(updatePartyID({ jsonBody, updateId: EditData.id, btnId }));\r\n            }\r\n            else {\r\n                dispatch(postPartyData({ jsonBody, btnId }));\r\n            }\r\n\r\n        } catch (error) { btnIsDissablefunc({ btnId, state: false }) }\r\n    };\r\n\r\n    let IsEditMode_Css = isEditMode_CssFun();\r\n\r\n    if (!(userPageAccessState === '')) {\r\n        return (\r\n            <React.Fragment>\r\n                <MetaTags> {metaTagLabel(userPageAccessState)}</MetaTags>\r\n                <div className=\"page-content\" style={{ marginTop: IsEditMode_Css }}>\r\n                    {(subPageMode === url.RETAILER_MASTER) &&\r\n                        <NewCommonPartyDropdown pageMode={pageMode} />}\r\n                    <Container fluid>\r\n                        <Row>\r\n                            <Col lg={12}>\r\n                                <Card className=\"text-black\" >\r\n                                    <CardHeader className=\"card-header   text-black c_card_header\" >\r\n                                        <h4 className=\"card-title text-black\">{userPageAccessState.PageDescription}</h4>\r\n                                        <p className=\"card-title-desc text-black\">{userPageAccessState.PageDescriptionDetails}</p>\r\n                                    </CardHeader>\r\n                                    <CardBody>\r\n                                        <Nav tabs className=\"nav-tabs-custom nav-justified\">\r\n                                            <NavItem>\r\n                                                <NavLink\r\n                                                    id=\"nave-link-1\"\r\n                                                    style={{ cursor: \"pointer\" }}\r\n                                                    className={classnames({\r\n                                                        active: activeTab1 === \"1\",\r\n                                                    })}\r\n                                                    onClick={() => {\r\n                                                        toggle1(\"1\")\r\n                                                    }}\r\n                                                >\r\n                                                    <span className=\"d-block d-sm-none\">\r\n                                                        <i className=\"fas fa-home\"></i>\r\n                                                    </span>\r\n                                                    <span className=\"d-none d-sm-block\">Party Master</span>\r\n                                                </NavLink>\r\n                                            </NavItem>\r\n\r\n                                            <NavItem>\r\n                                                <NavLink\r\n                                                    id=\"nave-link-2\"\r\n                                                    style={{ cursor: \"pointer\" }}\r\n                                                    className={classnames({\r\n                                                        active: activeTab1 === \"2\",\r\n                                                    })}\r\n                                                    onClick={() => {\r\n                                                        toggle1(\"2\")\r\n                                                    }}\r\n                                                >\r\n                                                    <span className=\"d-block d-sm-none\">\r\n                                                        <i className=\"fas fa-home\"></i>\r\n                                                    </span>\r\n                                                    <span className=\"d-none d-sm-block\">Address Details</span>\r\n\r\n                                                </NavLink>\r\n                                            </NavItem>\r\n                                            {!(subPageMode === url.RETAILER_MASTER) &&// only view when party  master Mode\r\n                                                <NavItem>\r\n                                                    <NavLink\r\n                                                        id=\"nave-link-3\"\r\n                                                        style={{ cursor: \"pointer\" }}\r\n                                                        className={classnames({\r\n                                                            active: activeTab1 === \"3\",\r\n                                                        })}\r\n                                                        onClick={() => {\r\n                                                            toggle1(\"3\")\r\n                                                        }}\r\n                                                    >\r\n                                                        <span className=\"d-block d-sm-none\">\r\n                                                            <i className=\"fas fa-home\"></i>\r\n                                                        </span>\r\n                                                        <span className=\"d-none d-sm-block\">Transaction Prefix</span>\r\n                                                    </NavLink>\r\n                                                </NavItem>}\r\n\r\n\r\n                                            <NavItem>\r\n                                                <NavLink\r\n                                                    style={{ cursor: \"pointer\" }}\r\n                                                >\r\n                                                    <span className=\"d-block d-sm-none\">\r\n                                                        <i className=\"fas fa-home\"></i>\r\n                                                    </span>\r\n                                                </NavLink>\r\n                                            </NavItem>\r\n                                        </Nav>\r\n\r\n                                        <TabContent activeTab={activeTab1} className=\"p-3 text-muted\">\r\n                                            <TabPane tabId=\"1\">\r\n                                                <BaseTabForm ref={baseTabRef} subPageMode={subPageMode} />\r\n                                            </TabPane>\r\n\r\n                                            <TabPane tabId=\"2\">\r\n                                                <AddressTabForm ref={addressTabRef} subPageMode={subPageMode} />\r\n                                            </TabPane>\r\n\r\n                                            <TabPane tabId=\"3\">\r\n                                                <PrefixTab ref={prefixTabRef} subPageMode={subPageMode} />\r\n                                            </TabPane>\r\n                                        </TabContent>\r\n                                    </CardBody>\r\n\r\n                                    <div style={{ paddingLeft: \"30px\", paddingBottom: \"10px\" }}>\r\n                                        <SaveButton pageMode={pageMode}\r\n                                            loading={saveBtnloading}\r\n                                            userAcc={userPageAccessState}\r\n                                            editCreatedBy={editCreatedBy}\r\n                                            module={\"PartyMaster\"}\r\n                                            onClick={SaveHandler}\r\n                                        />\r\n                                    </div>\r\n                                </Card>\r\n                            </Col>\r\n                        </Row>\r\n\r\n                    </Container>\r\n                </div >\r\n            </React.Fragment>\r\n        );\r\n    };\r\n    return null\r\n};\r\nexport default PartyMaster;\r\n\r\n\r\n\r\n\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Dashboard\\Dashboard_1_Redux\\saga.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Dashboard\\Dashboard_1_Redux\\reducer.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Dashboard\\Dashboard_1_Redux\\action.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Dashboard\\Dashboard_1_Redux\\actionType.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Dashboard\\index.js",["3959","3960","3961"],"import React from 'react';\r\nimport { useEffect } from 'react';\r\nimport MetaTags from 'react-meta-tags';\r\nimport { useSelector } from 'react-redux';\r\nimport { useHistory } from 'react-router-dom';\r\nimport {  Container,} from \"reactstrap\";\r\n\r\nconst Dashboard = () => {\r\n    // const history = useHistory();\r\n    // const { roleAccessSidbarData } = useSelector(state => ({\r\n    //     roleAccessSidbarData: state.Login.roleAccessSidbarData\r\n    // }))\r\n\r\n    // useEffect(() => {\r\n      \r\n    //     if (roleAccessSidbarData.length > 0) {\r\n    //         const findDashboard = roleAccessSidbarData.find((index) => (index.ModuleName === \"Dashboard\"))\r\n    //         if (!(findDashboard === undefined)) {\r\n    //             history.push(findDashboard.ModuleData[0].ActualPagePath)\r\n    //         }\r\n    //     }\r\n\r\n    // }, [roleAccessSidbarData])\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"page-content\">\r\n                <MetaTags>\r\n                    <title>Dashboard | FoodERP 2.0 - React Admin & Dashboard Template</title>\r\n                </MetaTags>\r\n                <Container fluid>\r\n                </Container>\r\n            </div>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default Dashboard;","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Dashboard\\Dashboard_1\\Dashboard_1.js",["3962","3963","3964","3965","3966"],"import React, { useEffect, useState } from 'react';\r\nimport MetaTags from 'react-meta-tags';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useHistory } from 'react-router-dom';\r\nimport {\r\n    Card,\r\n    CardBody,\r\n    CardHeader,\r\n    Col,\r\n    Container, Label, Row, Spinner,\r\n} from \"reactstrap\";\r\nimport { breadcrumbReturnFunc } from '../../../components/Common/CommonFunction';\r\nimport * as url from \"../../../routes/route_url\";\r\nimport * as pageId from \"../../../routes/allPageID\"\r\nimport { commonPageField, commonPageFieldSuccess } from '../../../store/actions';\r\nimport * as mode from \"../../../routes/PageMode\"\r\nimport { getDashbordDetails } from '../../../store/Dashboard/Dashboard_1_Redux/action';\r\nimport PaymentEntryList from './PaymentEntryList';\r\nimport InvoiceForGRN from './GRNList';\r\nimport SalesReturnListForDashboard from './SalesReturnListForDashboard';\r\nimport { DashboardLoader, PageLoadingSpinner } from '../../../components/Common/CommonButton';\r\nimport NewCommonPartyDropdown from \"../../../components/Common/NewCommonPartyDropdown\";\r\n\r\nconst Dashboard_1 = (props) => {\r\n\r\n    const history = useHistory()\r\n    const dispatch = useDispatch();\r\n    const [userPageAccessState, setUserAccState] = useState('');\r\n\r\n    //Access redux store Data /  'save_ModuleSuccess' action data\r\n    const {\r\n        getDashboard,\r\n        userAccess,\r\n        orderApprovalMsg,\r\n        GRNListLoading,\r\n        pageField,\r\n        SalesReturnListloading,\r\n        PaymentEntryListloading } = useSelector((state) => ({\r\n            getDashboard: state.DashboardReducer.getDashboard,\r\n            userAccess: state.Login.RoleAccessUpdateData,\r\n            pageField: state.CommonPageFieldReducer.pageField,\r\n            orderApprovalMsg: state.OrderReducer.orderApprovalMsg,\r\n            GRNListLoading: state.OrderReducer.goBtnLoading,\r\n            SalesReturnListloading: state.SalesReturnReducer.loading,\r\n            PaymentEntryListloading: state.ReceiptReducer.loading,\r\n        }));\r\n\r\n    const { OrderCount, InvoiceCount, GRNsCount, } = getDashboard\r\n\r\n    useEffect(() => {\r\n        const page_Id = pageId.DASHBORD_1//changes\r\n        dispatch(commonPageFieldSuccess(null));\r\n        dispatch(commonPageField(page_Id))\r\n        dispatch(getDashbordDetails())\r\n\r\n    }, []);\r\n\r\n    const location = { ...history.location }\r\n    const hasShowModal = props.hasOwnProperty(mode.editValue)//changes\r\n\r\n    // userAccess useEffect\r\n    useEffect(() => {\r\n        let userAcc = null;\r\n        let locationPath = location.pathname;\r\n\r\n        if (hasShowModal) {\r\n            locationPath = props.masterPath;\r\n        };\r\n\r\n        userAcc = userAccess.find((inx) => {\r\n            return (`/${inx.ActualPagePath}` === locationPath)\r\n        })\r\n\r\n        if (userAcc) {\r\n            setUserAccState(userAcc)\r\n            breadcrumbReturnFunc({ dispatch, userAcc });\r\n        };\r\n    }, [userAccess])\r\n\r\n\r\n    function paymentEntry_onClick() {\r\n        history.push(url.PAYMENT_ENTRY)\r\n    }\r\n\r\n    function InvoiceFoRGRN_onClick() {\r\n        history.push(url.GRN_STP_3)\r\n    }\r\n\r\n    function salesReturn_onClick() {\r\n        history.push(url.SALES_RETURN_LIST)\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <PageLoadingSpinner isLoading={GRNListLoading || PaymentEntryListloading || SalesReturnListloading || !pageField} />\r\n            <div className=\"page-content\">\r\n                <NewCommonPartyDropdown />\r\n\r\n                <MetaTags>\r\n                    <title>Dashboard | FoodERP 2.0 - React Admin & Dashboard Template</title>\r\n                </MetaTags>\r\n                <Container fluid>\r\n                    <Row>\r\n                        <Col xl={4} md={4} >\r\n                            <Card className=\"card-h-100\">\r\n                                <CardBody>\r\n                                    <Row className=\"align-items-center\">\r\n                                        <Col xs={4}>\r\n                                            <span className=\"text-black mb-3 lh-1 d-block text-truncate\">Total Orders</span>\r\n                                            <h4 className=\"mb-3\">\r\n                                                <span className=\"counter-value\">\r\n                                                    {OrderCount}\r\n                                                </span>\r\n                                            </h4>\r\n                                        </Col>\r\n                                    </Row>\r\n\r\n                                </CardBody>\r\n                            </Card>\r\n                        </Col>\r\n\r\n                        <Col xl={4} md={4} >\r\n                            <Card className=\"card-h-100\">\r\n                                <CardBody>\r\n                                    <Row className=\"align-items-center\">\r\n                                        <Col xs={4}>\r\n                                            <span className=\"text-black mb-3 lh-1 d-block text-truncate\">Total Invoices</span>\r\n                                            <h4 className=\"mb-3\">\r\n                                                <span className=\"counter-value\">\r\n                                                    {InvoiceCount}\r\n                                                </span>\r\n                                            </h4>\r\n                                        </Col>\r\n                                    </Row>\r\n                                </CardBody>\r\n                            </Card>\r\n                        </Col>\r\n\r\n                        <Col xl={4} md={4} >\r\n                            <Card className=\"card-h-100\">\r\n                                <CardBody>\r\n                                    <Row className=\"align-items-center\">\r\n                                        <Col xs={4}>\r\n                                            <span className=\"text-black mb-3 lh-1 d-block text-truncate\">Total GRNs</span>\r\n                                            <h4 className=\"mb-3\">\r\n                                                <span className=\"counter-value\">\r\n                                                    {GRNsCount}\r\n                                                </span>\r\n                                            </h4>\r\n                                        </Col>\r\n                                    </Row>\r\n\r\n                                </CardBody>\r\n                            </Card>\r\n                        </Col>\r\n                    </Row>\r\n\r\n                    <Row>\r\n                        <Col lg={6}>\r\n                            <Card className=''>\r\n                                <CardHeader style={{ backgroundColor: \"whitesmoke\" }}\r\n                                    className=\"card-header align-items-center d-flex text-center\">\r\n\r\n                                    <Label className=\"card-title mb-0 flex-grow-4 text-primary text-bold mb-n2 text-decoration-underline\"\r\n                                        onClick={paymentEntry_onClick}\r\n                                        disabled={PaymentEntryListloading}\r\n                                        style={{ cursor: \"pointer\" }}\r\n                                    >\r\n                                        Todays Payment Entry</Label>&nbsp;&nbsp;&nbsp;\r\n                                    {(PaymentEntryListloading) &&\r\n                                        <DashboardLoader />\r\n                                    }\r\n\r\n                                </CardHeader>\r\n                                <PaymentEntryList />\r\n                            </Card>\r\n                        </Col>\r\n\r\n                        <Col lg={6}>\r\n                            <Card >\r\n                                <CardHeader style={{ backgroundColor: \"whitesmoke\" }}\r\n\r\n                                    className=\"card-header align-items-center d-flex\">\r\n\r\n                                    <Label\r\n                                        className=\"card-title mb-0 flex-grow-4 text-primary text-bold mb-n2 text-decoration-underline\"\r\n                                        disabled={GRNListLoading}\r\n                                        onClick={InvoiceFoRGRN_onClick}\r\n                                        style={{ cursor: \"pointer\" }}\r\n\r\n                                    >\r\n                                        Invoices For GRN</Label>\r\n                                    {(GRNListLoading) &&\r\n                                        <DashboardLoader />\r\n                                    }\r\n                                </CardHeader>\r\n                                <InvoiceForGRN />\r\n\r\n                            </Card>\r\n                        </Col>\r\n                    </Row>\r\n\r\n                    <Row>\r\n                        <Col lg={6}>\r\n                            <Card >\r\n                                <CardHeader style={{ backgroundColor: \"whitesmoke\" }}\r\n                                    className=\"card-header align-items-center d-flex text-center\">\r\n                                    <Label className=\"card-title mb-0 flex-grow-4 text-primary text-bold mb-n2 text-decoration-underline\"\r\n                                        onClick={salesReturn_onClick}\r\n                                        disabled={SalesReturnListloading}\r\n                                        style={{ cursor: \"pointer\" }}\r\n\r\n                                    >\r\n                                        Sales Return List</Label>\r\n                                    {(SalesReturnListloading) &&\r\n                                        <DashboardLoader />\r\n                                    }\r\n                                </CardHeader>\r\n                                <SalesReturnListForDashboard />\r\n                            </Card>\r\n                        </Col>\r\n\r\n                    </Row>\r\n\r\n                </Container>\r\n            </div>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default Dashboard_1;","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Dashboard\\Dashboard_1\\PaymentEntryList.js",["3967","3968"],"import React, { useEffect } from 'react'\r\nimport ToolkitProvider from \"react-bootstrap-table2-toolkit\";\r\nimport BootstrapTable from \"react-bootstrap-table-next\";\r\nimport { ReceiptListAPI, ReceiptListAPISuccess } from '../../../store/Accounting/Receipt/action';\r\nimport { currentDate_ymd, loginPartyID } from '../../../components/Common/CommonFunction';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport * as url from \"../../../routes/route_url\";\r\nimport { mySearchProps } from '../../../components/Common/SearchBox/MySearch';\r\nimport \"./table1.scss\";\r\n\r\nexport default function PaymentEntryList() {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const { tableList, commonPartyDropSelect } = useSelector((state) => ({\r\n        tableList: state.ReceiptReducer.ReceiptList,\r\n        commonPartyDropSelect: state.CommonPartyDropdownReducer.commonPartyDropSelect\r\n    }));\r\n\r\n    useEffect(() => {\r\n\r\n    }, [])\r\n\r\n    // Common Party Dropdown useEffect\r\n    useEffect(() => {\r\n\r\n        if (commonPartyDropSelect.value > 0) {\r\n            const jsonBody = JSON.stringify({\r\n                FromDate: currentDate_ymd,\r\n                ToDate: currentDate_ymd,\r\n                CustomerID: \"\",\r\n                PartyID: commonPartyDropSelect.value,\r\n                ReceiptType: 30,\r\n            });\r\n            dispatch(ReceiptListAPI(jsonBody, url.PAYMENT_ENTRY_LIST));\r\n        }\r\n        return () => {\r\n            dispatch(ReceiptListAPISuccess([]))\r\n        }\r\n\r\n    }, [commonPartyDropSelect]);\r\n\r\n    const pagesListColumns = [\r\n        {\r\n            text: \"Date\",\r\n            dataField: \"dashboardReceiptDate\",\r\n        },\r\n        {\r\n            text: \"FullReceiptNumber\",\r\n            dataField: \"FullReceiptNumber\",\r\n        },\r\n        {\r\n            text: \"AmountPaid\",\r\n            dataField: \"AmountPaid\",\r\n            align: \"right\"\r\n        },\r\n        {\r\n            text: \"DocumentNo\",\r\n            dataField: \"Cheque No\",\r\n        },\r\n        {\r\n            text: \"ChequeDate\",\r\n            dataField: \"ChequeDate\",\r\n        },\r\n    ];\r\n\r\n    return (\r\n\r\n        <ToolkitProvider\r\n\r\n            keyField=\"Invoice\"\r\n            data={tableList}\r\n            columns={pagesListColumns}\r\n            search\r\n        >\r\n            {toolkitProps => (\r\n                <React.Fragment>\r\n                    <div className=\"table-container\">\r\n                        <BootstrapTable\r\n                            keyField={\"Invoice\"}\r\n                            bordered={true}\r\n                            striped={false}\r\n                            noDataIndication={<div className=\"text-danger text-center \">Record Not available</div>}\r\n                            classes={\"table align-middle table-nowrap table-hover\"}\r\n                            headerWrapperClasses={\"thead-light\"}\r\n\r\n                            {...toolkitProps.baseProps}\r\n\r\n                        />\r\n\r\n                        {mySearchProps(toolkitProps.searchProps)}\r\n                    </div>\r\n\r\n                </React.Fragment>\r\n            )\r\n            }\r\n        </ToolkitProvider>\r\n    )\r\n}\r\n\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Dashboard\\Options.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Dashboard\\WidgetsData.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Dashboard\\Dashboard_1\\GRNList.js",["3969","3970","3971","3972"],"import React, { useEffect } from 'react'\r\nimport ToolkitProvider from \"react-bootstrap-table2-toolkit\";\r\nimport BootstrapTable from \"react-bootstrap-table-next\";\r\nimport { date_ymd_func, loginPartyID } from '../../../components/Common/CommonFunction';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { order_Type } from '../../../components/Common/C-Varialbes';\r\nimport { getOrderListPage, getOrderListPageSuccess } from '../../../store/Purchase/OrderPageRedux/actions';\r\nimport { mySearchProps } from '../../../components/Common/SearchBox/MySearch';\r\nimport { Button, Spinner } from 'reactstrap';\r\nimport { makeGRN_Mode_1Action } from '../../../store/Inventory/GRNRedux/actions';\r\nimport { mode, url } from \"../../../routes/index\";\r\n\r\n\r\nexport default function InvoiceForGRN() {\r\n\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n    const currentDate_ymd = date_ymd_func();\r\n\r\n    const { tableList, GRNitem, listBtnLoading, commonPartyDropSelect } = useSelector((state) => ({\r\n        tableList: state.OrderReducer.orderList,\r\n        GRNitem: state.GRNReducer.GRNitem,\r\n        listBtnLoading: state.GRNReducer.listBtnLoading,\r\n        commonPartyDropSelect: state.CommonPartyDropdownReducer.commonPartyDropSelect\r\n    }));\r\n\r\n\r\n    const TableListWithNonDeleteRecord = tableList.filter(i => i.IsRecordDeleted === false);\r\n\r\n    // Common Party Dropdown useEffect\r\n    useEffect(() => {\r\n\r\n        if (commonPartyDropSelect.value > 0) {\r\n\r\n            let subPageMode = url.GRN_STP_3\r\n            const gobtnId = `gobtn-${subPageMode}`\r\n            const filtersBody = JSON.stringify({\r\n                FromDate: \"\",\r\n                ToDate: \"\",\r\n                Supplier: \"\",\r\n                Customer: commonPartyDropSelect.value,\r\n                OrderType: order_Type.InvoiceToGRN,\r\n                IBType: \"\"\r\n            });\r\n            dispatch(getOrderListPage({ subPageMode, filtersBody, btnId: gobtnId }));\r\n        }\r\n        return () => {\r\n            dispatch(getOrderListPageSuccess([]))\r\n        }\r\n\r\n    }, [commonPartyDropSelect]);\r\n\r\n    useEffect(() => {\r\n        if (GRNitem.Status === true && GRNitem.StatusCode === 200) {\r\n            history.push({\r\n                pathname: GRNitem.path,\r\n                page_Mode: GRNitem.page_Mode,\r\n            })\r\n        }\r\n    }, [GRNitem])\r\n\r\n    function makeBtnHandler(rowData, btnId) {\r\n\r\n        const list = [rowData]\r\n        var isGRNSelect = ''\r\n        var challanNo = ''\r\n        const grnRef = []\r\n        if (list.length > 0) {\r\n            list.forEach(ele => {\r\n                grnRef.push({\r\n                    Invoice: ele.id,\r\n                    Order: null,\r\n                    ChallanNo: ele.FullOrderNumber,\r\n                    Inward: true,\r\n                    Challan: ''\r\n                });\r\n                isGRNSelect = isGRNSelect.concat(`${ele.id},`)\r\n                challanNo = challanNo.concat(`${ele.FullOrderNumber},`)\r\n            });\r\n\r\n            if (isGRNSelect) {\r\n                let path = url.GRN_ADD_3\r\n                isGRNSelect = isGRNSelect.replace(/,*$/, '');//****** withoutLastComma  function */\r\n                challanNo = challanNo.replace(/,*$/, '');           //****** withoutLastComma  function */\r\n\r\n                const jsonBody = JSON.stringify({\r\n                    OrderIDs: isGRNSelect,\r\n                    Mode: 3\r\n                })\r\n\r\n                dispatch(makeGRN_Mode_1Action({ jsonBody, pageMode: mode.modeSTPsave, path: path, grnRef, challanNo, btnId }))\r\n\r\n            } else {\r\n                alert(\"Please Select Order1\")\r\n            }\r\n        }\r\n    }\r\n\r\n    const pagesListColumns = [\r\n        {\r\n            text: \"InvoiceDate\",\r\n            dataField: \"dashboardOrderDate\",\r\n        },\r\n        {\r\n            text: \"InvoiceNo\",\r\n            dataField: \"FullOrderNumber\",\r\n        },\r\n        {\r\n            text: \"Supplier\",\r\n            dataField: \"Supplier\",\r\n        },\r\n        {\r\n            text: \"InvoiceAmount\",\r\n            dataField: \"OrderAmount\",\r\n            align: \"right\"\r\n        },\r\n        {\r\n            text: \"Action\",\r\n            dataField: \"\",\r\n            formatExtraData: { listBtnLoading: listBtnLoading, },\r\n            formatter: (cellContent, rowData, key, formatExtra) => {\r\n\r\n                let { listBtnLoading } = formatExtra;\r\n                return (<>\r\n                    < Button\r\n                        type=\"button\"\r\n                        id={`btn-makeBtn-${rowData.id}`}\r\n                        className=\"badge badge-soft-info font-size-12 btn btn-info waves-effect waves-light w-xxs border border-light \"\r\n                        title=\"Make GRN\"\r\n                        disabled={listBtnLoading}\r\n                        onClick={() => {\r\n                            const btnId = `btn-makeBtn-${rowData.id}`\r\n                            makeBtnHandler(rowData, btnId)\r\n                        }}\r\n                    >\r\n                        {(listBtnLoading === `btn-makeBtn-${rowData.id}`) ?\r\n                            <Spinner style={{ height: \"16px\", width: \"16px\" }} color=\"white\" />\r\n                            : <span\r\n                                style={{ marginLeft: \"6px\", marginRight: \"6px\" }}\r\n                                className=\" fas fa-file-invoice\"\r\n                            ></span>\r\n                        }\r\n                    </Button>\r\n                </>)\r\n            }\r\n        },\r\n    ];\r\n\r\n    return (\r\n        <ToolkitProvider\r\n            keyField=\"Invoice\"\r\n            data={TableListWithNonDeleteRecord}\r\n            columns={pagesListColumns}\r\n            search\r\n        >\r\n            {toolkitProps => (\r\n                <React.Fragment>\r\n                    <div className=\"table-container\">\r\n                        <BootstrapTable\r\n                            keyField={\"Invoice\"}\r\n                            bordered={true}\r\n                            striped={false}\r\n                            noDataIndication={<div className=\"text-danger text-center \">Record Not available</div>}\r\n                            classes={\"table align-middle table-nowrap table-hover\"}\r\n                            headerWrapperClasses={\"thead-light\"}\r\n\r\n                            {...toolkitProps.baseProps}\r\n\r\n                        />\r\n                        {mySearchProps(toolkitProps.searchProps)}\r\n                    </div>\r\n\r\n                </React.Fragment>\r\n            )}\r\n        </ToolkitProvider>\r\n    )\r\n}\r\n\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\ImportExportFieldMapRedux\\saga.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\ImportExportFieldMapRedux\\reducer.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\ImportExportFieldMapRedux\\action.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\ImportExportFieldMapRedux\\actionType.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\helpers\\sapApi.js",[],["3973","3974"],"D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Dashboard\\Dashboard_1\\SalesReturnListForDashboard.js",["3975","3976"],"import React, { useEffect } from 'react'\r\nimport ToolkitProvider from \"react-bootstrap-table2-toolkit\";\r\nimport BootstrapTable from \"react-bootstrap-table-next\";\r\nimport { date_ymd_func, loginPartyID } from '../../../components/Common/CommonFunction';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { mySearchProps } from '../../../components/Common/SearchBox/MySearch';\r\nimport { salesReturnListAPI, salesReturnListAPISuccess } from '../../../store/Sales/SalesReturnRedux/action';\r\n\r\nexport default function SalesReturnListForDashboard() {\r\n\r\n    const dispatch = useDispatch();\r\n    const currentDate_ymd = date_ymd_func();\r\n\r\n    const { tableList, commonPartyDropSelect } = useSelector((state) => ({\r\n        tableList: state.SalesReturnReducer.salesReturnList,\r\n        commonPartyDropSelect: state.CommonPartyDropdownReducer.commonPartyDropSelect\r\n    }));\r\n\r\n    // Common Party Dropdown useEffect\r\n    useEffect(() => {\r\n\r\n        if (commonPartyDropSelect.value > 0) {\r\n            const jsonBody = JSON.stringify({\r\n                FromDate: currentDate_ymd,\r\n                ToDate: currentDate_ymd,\r\n                CustomerID: \"\",\r\n                PartyID: commonPartyDropSelect.value,\r\n            });\r\n            dispatch(salesReturnListAPI(jsonBody));\r\n        }\r\n        return () => {\r\n            dispatch(salesReturnListAPISuccess([]))\r\n        }\r\n\r\n    }, [commonPartyDropSelect]);\r\n\r\n    const pagesListColumns = [\r\n        {\r\n            text: \"ID\",\r\n            dataField: \"id\",\r\n        },\r\n        {\r\n            text: \"Return Date\",\r\n            dataField: \"dashboardReturnDate\",\r\n        },\r\n        {\r\n            text: \"FullReturnNumber\",\r\n            dataField: \"FullReturnNumber\",\r\n        },\r\n        {\r\n            text: \"Customer\",\r\n            dataField: \"Customer\",\r\n        },\r\n        {\r\n            text: \"Comment\",\r\n            dataField: \"Comment\",\r\n        },\r\n    ];\r\n\r\n    return (\r\n        <ToolkitProvider\r\n            keyField=\"id\"\r\n            data={tableList}\r\n            columns={pagesListColumns}\r\n            search\r\n        >\r\n            {toolkitProps => (\r\n                <React.Fragment>\r\n                    <div className=\"table-container\">\r\n                        <BootstrapTable\r\n                            keyField={\"id\"}\r\n                            bordered={true}\r\n                            striped={false}\r\n                            noDataIndication={<div className=\"text-danger text-center \">Record Not available</div>}\r\n                            classes={\"table align-middle table-nowrap table-hover\"}\r\n                            headerWrapperClasses={\"thead-light\"}\r\n                            {...toolkitProps.baseProps}\r\n                        />\r\n                        {mySearchProps(toolkitProps.searchProps)}\r\n                    </div>\r\n\r\n                </React.Fragment>\r\n            )\r\n            }\r\n        </ToolkitProvider>\r\n    )\r\n}\r\n\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\CustomValidateForm\\index.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\CustomValidateForm\\C_DatePicker.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\routes\\index.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\components\\Common\\CommonUseEffect.js",["3977","3978","3979","3980","3981","3982","3983","3984","3985","3986","3987","3988","3989","3990","3991"],"import { breadcrumbReturnFunc } from \"./CommonFunction\";\r\nimport { mode } from \"../../routes/index\";\r\nimport { comAddPageFieldFunc } from \"./validationFunction\";\r\nimport { customAlert } from \"../../CustomAlert/ConfirmDialog\";\r\nimport $ from 'jquery';\r\n\r\nexport const userAccessUseEffect = ({ props,\r\n    dispatch,\r\n    userAccess = [],\r\n    setUserAccState,\r\n    otherloginAccss }) => {\r\n\r\n    let hasShowModal = props.hasOwnProperty(mode.editValue)\r\n\r\n    let locationPath;\r\n\r\n    if ((props.pageMode === mode.dropdownAdd) || hasShowModal) {\r\n        locationPath = props.masterPath;\r\n    } else {\r\n        locationPath = props.location.pathname;\r\n    }\r\n\r\n    userAccess.forEach((inx) => {\r\n        if ((`/${inx.ActualPagePath}` === locationPath) && setUserAccState) {\r\n            setUserAccState(inx);\r\n            if (!props.isdropdown) {\r\n                breadcrumbReturnFunc({ dispatch, userAcc: inx });\r\n            }\r\n        }\r\n        if (otherloginAccss) { otherloginAccss(inx) }\r\n    })\r\n}\r\n\r\n// ****************************************************************************************\r\n// ****************************************************************************************\r\n\r\nexport const saveMsgUseEffect = async ({\r\n    postMsg, postSuccss, pageMode, dispatch, history, status200, listPath, foreceRedirectList = false }) => {\r\n\r\n    if ((postMsg.Status === true) && (postMsg.StatusCode === 200) && !(pageMode === mode.dropdownAdd)) {\r\n        dispatch(postSuccss({ Status: false }))\r\n\r\n        if (status200) { status200() };\r\n\r\n        if (pageMode === mode.dropdownAdd) {\r\n            customAlert({\r\n                Type: 1,\r\n                Message: postMsg.Message,\r\n            })\r\n        }\r\n        else {\r\n            const a = await customAlert({\r\n                Type: 1,\r\n                Message: postMsg.Message,\r\n            })\r\n            if ((a || foreceRedirectList === true)) {\r\n                history.push({\r\n                    pathname: listPath,\r\n                });\r\n            }\r\n        }\r\n    }\r\n    else if ((postMsg.Status === true) && !(pageMode === mode.dropdownAdd)) {\r\n        dispatch(postSuccss({ Status: false }))\r\n        customAlert({\r\n            Type: 4,\r\n            Message: JSON.stringify(postMsg.Message),\r\n        });\r\n    }\r\n}\r\n\r\n\r\n// ****************************************************************************************\r\n// ****************************************************************************************\r\n\r\n\r\nexport const updateMsgUseEffect = async ({\r\n    updateMsg, updateSuccss, modalCss, dispatch, history, listPath, status200 }) => {\r\n\r\n    if (updateMsg.Status === true && updateMsg.StatusCode === 200 && !modalCss) {\r\n        dispatch(updateSuccss({ Status: false }))\r\n\r\n        if (status200) { status200() };\r\n\r\n        await customAlert({\r\n            Type: 1,\r\n            Message: JSON.stringify(updateMsg.Message),\r\n        })\r\n        history.push({\r\n            pathname: listPath,\r\n        })\r\n    } else if (updateMsg.Status === true && !modalCss) {\r\n        dispatch(updateSuccss({ Status: false }));\r\n        customAlert({\r\n            Type: 3,\r\n            Message: JSON.stringify(updateMsg.Message),\r\n        })\r\n    }\r\n}\r\n\r\n// ****************************************************************************************\r\n// ****************************************************************************************\r\n\r\n\r\nexport const pageFieldUseEffect = ({ state, setState, pageField }) => {\r\n    if (pageField) {\r\n        const fieldArr = pageField.PageFieldMaster\r\n        comAddPageFieldFunc({ state, setState, fieldArr })\r\n    }\r\n}\r\n\r\n// ****************************************************************************************\r\n// ***************************************************************************************\r\n\r\nexport const table_ArrowUseEffect = (tableId) => {\r\n\r\n    // (function ($) {\r\n    $.fn.enableCellNavigation = function () {\r\n\r\n        var arrow = { left: 37, up: 38, right: 39, down: 40 };\r\n\r\n        // select all on focus\r\n        this.find('input').keydown(function (e) {\r\n\r\n            // shortcut for key other than arrow keys\r\n            if ($.inArray(e.which, [arrow.left, arrow.up, arrow.right, arrow.down]) < 0) { return; }\r\n\r\n            if (!($.inArray(e.which, [arrow.up, arrow.down]) < 0)) {\r\n                let hasSelect = e.target.offsetParent.classList.contains(\"select2-selection__value-container\");\r\n                if (hasSelect) {\r\n                    e.stopPropagation()\r\n                }\r\n\r\n            }\r\n            var input = e.target;\r\n            var td = $(e.target).closest('td');\r\n\r\n            var moveTo = null;\r\n\r\n            switch (e.which) {\r\n\r\n                case arrow.left: {\r\n\r\n\r\n                    if (input.selectionStart == 0) {\r\n                        moveTo = td.prev('td:has(input,textarea)');\r\n\r\n\r\n                        var tr = td.closest('tr');\r\n                        var pos = td[0].cellIndex;\r\n                        var ctd = tr.children('td')\r\n\r\n                        let prevTd = td\r\n                        let in_d = 0\r\n                        while ((in_d < pos)) {\r\n\r\n                            moveTo = prevTd.prev('td:has(input,textarea)');\r\n                            if (moveTo.length > 0) { in_d = ctd.length - 1 }\r\n                            prevTd = td.prev('td')\r\n                            in_d++;\r\n                        }\r\n\r\n                    }\r\n                    if (moveTo && moveTo.length) {\r\n\r\n                        e.preventDefault();\r\n                        var tdInput = moveTo.find('input,textarea')\r\n\r\n                        if (tdInput.length > 0) {\r\n                            tdInput[0].focus();\r\n                            tdInput[0].select();\r\n                        }\r\n                    }\r\n\r\n                    break;\r\n                }\r\n                case arrow.right: {\r\n                    if (input.selectionEnd == input.value.length) {\r\n\r\n                        var tr = td.closest('tr');\r\n                        var pos = td[0].cellIndex;\r\n                        var ctd = tr.children('td')\r\n\r\n                        let nextTd = td\r\n\r\n                        while (pos < ctd.length) {\r\n\r\n                            moveTo = nextTd.next('td:has(input,textarea)');\r\n                            if (moveTo.length > 0) { pos = ctd.length + 1 }\r\n                            nextTd = td.next('td')\r\n                            pos++;\r\n                        }\r\n\r\n                    }\r\n\r\n                    if (moveTo && moveTo.length) {\r\n\r\n                        e.preventDefault();\r\n                        var tdInput = moveTo.find('input,textarea')\r\n\r\n                        if (tdInput.length > 0) {\r\n                            tdInput[0].focus();\r\n                            tdInput[0].select();\r\n                        }\r\n                    }\r\n                    break;\r\n                }\r\n\r\n                case arrow.up: {\r\n                    var thisIndex = $(input).index('input:text');\r\n                    var pre = thisIndex - 1;\r\n\r\n                    var tdPreInput\r\n                    td.find('input').each(function (i2, tdEle) {\r\n\r\n                        var thisIndex = $(tdEle).index('input:text');\r\n                        if (pre === thisIndex) {\r\n                            tdPreInput = tdEle\r\n                        }\r\n                    });\r\n\r\n                    if (tdPreInput) {\r\n                        tdPreInput.focus()\r\n                        return\r\n                    }\r\n                    var tr = td.closest('tr');\r\n                    var pos = td[0].cellIndex;\r\n                    var moveToRow = tr.prev('tr');\r\n\r\n\r\n                    if (moveToRow.length) {\r\n                        moveTo = $(moveToRow[0].cells[pos]);\r\n                    }\r\n                    if (moveTo && moveTo.length) {\r\n\r\n                        e.preventDefault();\r\n                        var tdInput = moveTo.find('input,textarea')\r\n\r\n                        if (tdInput.length > 0) {\r\n                            tdInput[tdInput.length - 1].focus();\r\n                            tdInput[tdInput.length - 1].select();\r\n                        }\r\n                    }\r\n                    break;\r\n                }\r\n                case arrow.down: {\r\n\r\n                    var thisIndex = $(input).index('input:text');\r\n                    var next = thisIndex + 1;\r\n\r\n                    var tdNextInput\r\n                    td.find('input').each(function (i2, tdEle) {\r\n\r\n                        var thisIndex = $(tdEle).index('input:text');\r\n                        if (next === thisIndex) {\r\n                            tdNextInput = tdEle\r\n                        }\r\n                    });\r\n\r\n                    if (tdNextInput) {\r\n                        tdNextInput.focus()\r\n                        return\r\n                    }\r\n                    var tr = td.closest('tr');\r\n                    var pos = td[0].cellIndex;\r\n\r\n                    var moveToRow = tr.next('tr');\r\n\r\n                    if (moveToRow.length) {\r\n                        moveTo = $(moveToRow[0].cells[pos]);\r\n                    }\r\n                    if (moveTo && moveTo.length) {\r\n\r\n                        e.preventDefault();\r\n                        var tdInput = moveTo.find('input,textarea')\r\n\r\n                        if (tdInput.length > 0) {\r\n                            tdInput[0].focus();\r\n                            tdInput[0].select();\r\n                        }\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        });\r\n\r\n    };\r\n\r\n\r\n    $(function () {\r\n        $(tableId).enableCellNavigation();\r\n    });\r\n\r\n\r\n}\r\n\r\n// ****************************************************************************************\r\n// ***************************************************************************************","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Purchase\\Order\\orderApproval.js",["3992"],"import { CommonConsole, sap_date_dmy_func } from \"../../../components/Common/CommonFunction\";\r\nimport { customAlert } from \"../../../CustomAlert/ConfirmDialog\";\r\nimport { getOrderApprovalDetailActionSucc, GoButton_For_Order_AddSuccess, orderApprovalAction, orderApprovalActionSuccess } from \"../../../store/actions\";\r\n\r\nexport const orderApprovalFunc = ({ dispatch, approvalDetail }) => {\r\n    if ((approvalDetail.Status === true)) {\r\n        try {\r\n            const { Data, btnId } = approvalDetail;\r\n\r\n            let isorderItemSet = [];\r\n            Data.OrderItem.forEach(i => {\r\n                if (i.Quantity > 0) {\r\n                    isorderItemSet.push({\r\n                        \"OrderNo\": (5000000 + Number(Data.id)).toString(),//parent--id\r\n                        \"ItemNo\": (i.id).toString(), //OrderItem--id\r\n                        \"Material\": (i.ItemSAPCode).toString(),//OrderItem--ItemSAPCode\r\n                        \"Quantity\": (i.QuantityInNo).toString(),//OrderItem--QuantityInNo \r\n                        \"Unit\": \"EA\",\r\n                        \"Plant\": (Data.SupplierSAPCode).toString(),//parent\r\n                        \"Batch\": \"\"// blank\r\n                    })\r\n                }\r\n            });\r\n\r\n            let body = {\r\n                \"Customer\": (Data.CustomerSAPCode).toString(),//parent--CustomerSAPCode \r\n                \"DocDate\": sap_date_dmy_func(Data.OrderDate), //parent--OrderDate\r\n                \"Indicator\": \"C\",\r\n                \"OrderNo\": (5000000 + Number(Data.id)).toString(),//parent--id\r\n                \"Stats\": \"1\",\r\n                \"CancelFlag\": \"\", //blank\r\n                \"OrderItemSet\": isorderItemSet,\r\n            }\r\n            const jsonBody = JSON.stringify(body);\r\n\r\n            dispatch(getOrderApprovalDetailActionSucc({ Status: false }))\r\n            dispatch(orderApprovalAction({ jsonBody, btnId }))\r\n        } catch (e) {\r\n\r\n            dispatch(getOrderApprovalDetailActionSucc({ Status: false }))\r\n            dispatch(orderApprovalActionSuccess({\r\n                Status: true,\r\n                Message: \"Order Save Successfully But Can't Send in 'SAP'\"\r\n            }))\r\n\r\n        }\r\n    }\r\n}\r\n\r\nexport const orderApprovalMessage = async ({ dispatch, orderApprovalMsg, listPath, history,goButtonHandler }) => {\r\n   \r\n    try {\r\n \r\n        if (orderApprovalMsg.Status === true && orderApprovalMsg.StatusCode === 200) {\r\n            dispatch(orderApprovalActionSuccess({ Status: false }))\r\n  \r\n            goButtonHandler(\"event\",)\r\n            dispatch(GoButton_For_Order_AddSuccess([]))\r\n\r\n            const a = await customAlert({\r\n                Type: 1,\r\n                Message: orderApprovalMsg.Message,\r\n            })\r\n            if (a) {\r\n                history.push({\r\n                    pathname: listPath,\r\n                });\r\n                window.location.reload()\r\n            }\r\n\r\n        } else if (orderApprovalMsg.Status === true) {\r\n            dispatch(orderApprovalActionSuccess({ Status: false }))\r\n            customAlert({\r\n                Type: 3,\r\n                Message: JSON.stringify(orderApprovalMsg.Message),\r\n            })\r\n        }\r\n    } catch (e) { }\r\n}","D:\\Rohit\\Git projects\\Manthan\\src\\Reports\\OrderReport\\demo.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\auth\\sessionAlive\\saga.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\auth\\sessionAlive\\actions.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\auth\\sessionAlive\\actionTypes.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\auth\\changepassword\\action.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\auth\\changepassword\\actionType.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\auth\\changepassword\\saga.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\auth\\changepassword\\reducer.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\Reports\\SapLedgerReport\\SapLedger.js",["3993","3994","3995","3996","3997","3998","3999","4000","4001","4002","4003"],"\r\nimport React, { useEffect, useState } from \"react\";\r\nimport {\r\n    Col,\r\n    FormGroup,\r\n    Label,\r\n    Button,\r\n    Row\r\n} from \"reactstrap\";\r\nimport { MetaTags } from \"react-meta-tags\";\r\nimport { BreadcrumbShowCountlabel, commonPageFieldSuccess } from \"../../store/actions\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { mode, pageId } from \"../../routes/index\"\r\n\r\nimport ToolkitProvider from \"react-bootstrap-table2-toolkit\";\r\nimport BootstrapTable from \"react-bootstrap-table-next\";\r\nimport { mySearchProps } from \"../../components/Common/SearchBox/MySearch\";\r\n\r\nimport * as _cfunc from \"../../components/Common/CommonFunction\";\r\nimport { C_DatePicker } from \"../../CustomValidateForm\";\r\nimport { commonPageField } from \"../../store/actions\";\r\nimport { SapLedger_Go_Button_API, SapLedger_Go_Button_API_Success } from \"../../store/Report/SapLedger Redux/action\";\r\nimport { C_Button, Go_Button } from \"../../components/Common/CommonButton\";\r\nimport PartyDropdown_Common from \"../../components/Common/PartyDropdown\";\r\nimport { customAlert } from \"../../CustomAlert/ConfirmDialog\";\r\nimport { ReportComponent } from \"../ReportComponent\";\r\nimport { async } from \"q\";\r\n\r\nconst SapLedger = (props) => {\r\n\r\n    const dispatch = useDispatch();\r\n    const history = useHistory()\r\n    const currentDate_ymd = _cfunc.date_ymd_func();\r\n    const userAdminRole = _cfunc.loginUserAdminRole();\r\n\r\n    const [userPageAccessState, setUserAccState] = useState('');\r\n    const [headerFilters, setHeaderFilters] = useState('');\r\n    const [btnMode, setBtnMode] = useState(0);\r\n\r\n    const {\r\n        userAccess,\r\n        gobuttonReduxData,\r\n        partyList,\r\n        pageField\r\n    } = useSelector((state) => ({\r\n        partyList: state.CommonPartyDropdownReducer.commonPartyDropdown,\r\n        gobuttonReduxData: state.SapLedgerReducer.goBtnSapLedger,\r\n        userAccess: state.Login.RoleAccessUpdateData,\r\n        pageField: state.CommonPageFieldReducer.pageField\r\n    }));\r\n\r\n    const { tableData = [], OpeingBal, ClosingBal } = gobuttonReduxData\r\n\r\n    const { fromdate = currentDate_ymd, todate = currentDate_ymd } = headerFilters;\r\n\r\n    const tableColumns = [\r\n        {\r\n            text: \"Document No\",\r\n            dataField: \"DocumentNo\",\r\n        },\r\n        {\r\n            text: \"FiscalYear\",\r\n            dataField: \"Fiscalyear\",\r\n        },\r\n        {\r\n            text: \"DocumentType\",\r\n            dataField: \"DocumentType\",\r\n        },\r\n        {\r\n            text: \"\tDocumentDesc\",\r\n            dataField: \"DocumentDesc\",\r\n        },\r\n        {\r\n            text: \"PostingDate\",\r\n            dataField: \"PostingDate\",\r\n        },\r\n        {\r\n            text: \"DebitCredit\",\r\n            dataField: \"DebitCredit\",\r\n        },\r\n        {\r\n            text: \"Debit Amount\",\r\n            dataField: \"Debit_Amount\",\r\n            align: \"right\"\r\n        },\r\n        {\r\n            text: \"\tCredit Amount\",\r\n            dataField: \"Credit_Amount\",\r\n            align: \"right\"\r\n        },\r\n        {\r\n            text: \"\tItemText\",\r\n            dataField: \"ItemText\",\r\n        },\r\n\r\n    ];\r\n\r\n    const rowStyle = (row, rowIndex) => {\r\n\r\n        const style = {};\r\n        if (row.id > 0) {\r\n\r\n        } else {\r\n            style.backgroundColor = 'rgb(239, 239, 239)';\r\n            style.fontWeight = 'bold';\r\n            style.fontSize = '4';\r\n        }\r\n        return style;\r\n    };\r\n\r\n    useEffect(() => {\r\n        dispatch(SapLedger_Go_Button_API_Success([]))\r\n        const page_Id = pageId.SAP_LEDGER\r\n        dispatch(commonPageFieldSuccess(null));\r\n        dispatch(commonPageField(page_Id));\r\n        dispatch(BreadcrumbShowCountlabel(`Count:${0}`));\r\n    }, []);\r\n\r\n    const location = { ...history.location }\r\n    const hasShowModal = props.hasOwnProperty(mode.editValue)\r\n\r\n    // userAccess useEffect\r\n    useEffect(() => {\r\n        let userAcc = null;\r\n        let locationPath = location.pathname;\r\n        if (hasShowModal) {\r\n            locationPath = props.masterPath;\r\n        };\r\n        userAcc = userAccess.find((inx) => {\r\n            return (`/${inx.ActualPagePath}` === locationPath)\r\n        })\r\n        if (userAcc) {\r\n            setUserAccState(userAcc)\r\n            _cfunc.breadcrumbReturnFunc({ dispatch, userAcc });\r\n        };\r\n    }, [userAccess])\r\n\r\n    useEffect(() => {\r\n        // This useEffect handles the response from the API call\r\n        try {\r\n\r\n            if (gobuttonReduxData.length === 0) {\r\n                return; // Exit early if there's no data\r\n            }\r\n\r\n            if ((gobuttonReduxData.Status === true) && (gobuttonReduxData.StatusCode === 200)) {\r\n                setBtnMode(0); // Reset button mode\r\n                if (btnMode === 2) {\r\n                    ReportComponent({      // Download CSV\r\n                        pageField,\r\n                        excelData: gobuttonReduxData.tableData,\r\n                        excelFileName: \"Sap Ledger Report\"\r\n                    })\r\n                    dispatch(SapLedger_Go_Button_API_Success([])); // Reset goButtonData\r\n                    setBtnMode(0); // Reset button mode\r\n                }\r\n\r\n            } else if ((gobuttonReduxData.Status === true)) {\r\n                dispatch(SapLedger_Go_Button_API_Success([])); // Reset goButtonData\r\n                setBtnMode(0);\r\n            }\r\n\r\n        } catch (e) {\r\n            console.log(e); // Log any errors\r\n        }\r\n    }, [gobuttonReduxData, btnMode]);\r\n\r\n    const PartyDropdown = partyList.map((data) => ({\r\n        value: data.id,\r\n        label: data.Name,\r\n        SAPPartyCode: data.SAPPartyCode\r\n    }))\r\n\r\n    const PartyDropdownOptions = [...PartyDropdown.filter((index) => !(index.SAPPartyCode === null))];\r\n\r\n    let partdata = localStorage.getItem(\"roleId\")\r\n    var partyDivisiondata = JSON.parse(partdata);\r\n\r\n    const SelectedPartyDropdown = () => {//+++++++++++++++++++++ Session common party dropdown id +++++++++++++++++++++++++++++++\r\n        try {\r\n            return JSON.parse(localStorage.getItem(\"selectedParty\"));\r\n        } catch (e) {\r\n            _cfunc.CommonConsole(e);\r\n        }\r\n        return 0;\r\n    };\r\n\r\n    function goButtonHandler(e, btnMode) {\r\n\r\n        try {\r\n            setBtnMode(btnMode)\r\n\r\n            if ((userAdminRole) && (SelectedPartyDropdown().value === 0)) {\r\n                customAlert({ Type: 3, Message: \"Please Select Party\" });\r\n                setBtnMode(0);\r\n                return;\r\n\r\n            }\r\n            const jsonBody = JSON.stringify({\r\n                FromDate: fromdate,\r\n                ToDate: todate,\r\n                SAPCode: (userAdminRole) ? SelectedPartyDropdown().SAPPartyCode : partyDivisiondata.SAPPartyCode\r\n            });\r\n            dispatch(SapLedger_Go_Button_API_Success([]))\r\n            dispatch(SapLedger_Go_Button_API(jsonBody));\r\n        }\r\n        catch (e) {\r\n            _cfunc.CommonConsole(e);\r\n        }\r\n\r\n    }\r\n\r\n    function fromdateOnchange(e, date) {\r\n        let newObj = { ...headerFilters }\r\n        newObj.fromdate = date\r\n        setHeaderFilters(newObj)\r\n        dispatch(SapLedger_Go_Button_API_Success([]))\r\n\r\n    }\r\n\r\n    function todateOnchange(e, date) {\r\n        let newObj = { ...headerFilters }\r\n        newObj.todate = date\r\n        setHeaderFilters(newObj)\r\n        dispatch(SapLedger_Go_Button_API_Success([]))\r\n\r\n    }\r\n\r\n    function partySelectOnChangeHandler() {\r\n        dispatch(SapLedger_Go_Button_API_Success([]))\r\n    }\r\n\r\n\r\n    if (!(userPageAccessState === '')) {\r\n        return (\r\n            <React.Fragment>\r\n                <MetaTags>{_cfunc.metaTagLabel(userPageAccessState)}</MetaTags>\r\n\r\n                <div className=\"page-content\" >\r\n\r\n                    <PartyDropdown_Common \r\n                        changeButtonHandler={partySelectOnChangeHandler}\r\n                        SAPLedgerOptions={PartyDropdownOptions} />\r\n\r\n                    <div className=\"px-2  c_card_filter text-black \" >\r\n                        <div className=\"row\">\r\n                            <div className=\" row\">\r\n                                <Col sm=\"4\" className=\"\">\r\n                                    <FormGroup className=\"mb- row mt-2 \" >\r\n                                        <Label className=\"col-sm-5 p-2\"\r\n                                            style={{ width: \"83px\" }}>From Date</Label>\r\n                                        <Col sm=\"7\">\r\n                                            <C_DatePicker\r\n                                                name='fromdate'\r\n                                                value={fromdate}\r\n                                                onChange={fromdateOnchange}\r\n                                            />\r\n                                        </Col>\r\n                                    </FormGroup>\r\n                                </Col>\r\n                                <Col sm=\"4\" className=\"\">\r\n                                    <FormGroup className=\"mb- row mt-2 \" >\r\n                                        <Label className=\"col-sm-5 p-2\"\r\n                                            style={{ width: \"65px\" }}>To Date</Label>\r\n                                        <Col sm=\"7\">\r\n                                            <C_DatePicker\r\n                                                nane='todate'\r\n                                                value={todate}\r\n                                                onChange={todateOnchange}\r\n                                            />\r\n                                        </Col>\r\n                                    </FormGroup>\r\n                                </Col>\r\n\r\n                                <Col sm={1} className=\"mt-2\" >\r\n                                    <C_Button\r\n                                        type=\"button\"\r\n                                        spinnerColor=\"white\"\r\n                                        loading={btnMode === 1 && true}\r\n                                        className=\"btn btn-success\"\r\n                                        onClick={(e) => goButtonHandler(e, 1)}\r\n                                    >\r\n                                        Show\r\n                                    </C_Button>\r\n\r\n                                </Col>\r\n\r\n                                <Col sm={2} className=\"mt-2\">\r\n                                    <C_Button\r\n                                        type=\"button\"\r\n                                        spinnerColor=\"white\"\r\n                                        loading={btnMode === 2 && true}\r\n                                        className=\"btn btn-primary\"\r\n                                        onClick={(e) => goButtonHandler(e, 2)}\r\n                                    >\r\n                                        Excel Download\r\n                                    </C_Button>\r\n                                </Col>\r\n                            </div>\r\n\r\n                        </div>\r\n                    </div>\r\n\r\n                    <ToolkitProvider\r\n                        keyField=\"id\"\r\n                        data={tableData}\r\n                        columns={tableColumns}\r\n                        search\r\n                    >\r\n                        {toolkitProps => (\r\n                            <React.Fragment>\r\n                                <Row>\r\n                                    <Col sm={9}>\r\n                                        <Label className=\"col-sm-6 mt-1 p-1 text-black\"\r\n                                            style={{ width: \"270px\", background: \"#efefef\", borderRadius: \"5px\" }}>Opening Balance:  {OpeingBal}\r\n                                        </Label>\r\n                                    </Col>\r\n                                    <Col sm={3}>\r\n\r\n                                        <Label className=\"col-sm-6 mt-1 p-1 text-black\"\r\n                                            style={{ width: \"257px\", background: \"#efefef\", borderRadius: \"5px\" }}>Closing Balance: {ClosingBal}\r\n                                        </Label>\r\n                                    </Col>\r\n\r\n                                </Row>\r\n\r\n                                <div className=\"table-responsive\" id=\"TableDiv\" >\r\n                                    <BootstrapTable\r\n                                        keyField={\"id\"}\r\n                                        bordered={true}\r\n                                        striped={false}\r\n                                        rowStyle={rowStyle}\r\n                                        noDataIndication={<div className=\"text-danger text-center \">Record Not available</div>}\r\n                                        classes={\"table align-middle table-nowrap table-hover\"}\r\n                                        headerWrapperClasses={\"thead-light\"}\r\n                                        onDataSizeChange={({ dataSize }) => {\r\n                                            dispatch(BreadcrumbShowCountlabel(`Count:${dataSize > 0 ? dataSize - 1 : 0}`));\r\n                                        }}\r\n                                        {...toolkitProps.baseProps}\r\n\r\n                                    />\r\n                                    {mySearchProps(toolkitProps.searchProps)}\r\n                                </div>\r\n                                {/* <div >Closing Balance :<Label className=\"col-sm-5\"\r\n                                    style={{ width: \"65px\" }}>{List.ClosingBal}</Label></div> */}\r\n\r\n                            </React.Fragment>\r\n                        )\r\n                        }\r\n                    </ToolkitProvider>\r\n\r\n\r\n                </div >\r\n            </React.Fragment >\r\n        );\r\n    }\r\n    else {\r\n        return (\r\n            <React.Fragment></React.Fragment>\r\n        )\r\n    }\r\n};\r\n\r\nexport default SapLedger;\r\n\r\n\r\n\r\n\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\helpers\\other_domain_api.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Report\\SapLedger Redux\\saga.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Report\\SapLedger Redux\\reducer.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Report\\SapLedger Redux\\action.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Report\\SapLedger Redux\\actionType.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\Reports\\ProductMarginReport\\ProductMarginReport.js",["4004","4005","4006"],"import React, { useEffect } from 'react';\r\nimport MetaTags from 'react-meta-tags';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useHistory } from 'react-router-dom';\r\nimport {\r\n    Button,\r\n    CardBody,\r\n    Col,\r\n    Container,\r\n    Row,\r\n    Spinner,\r\n} from \"reactstrap\";\r\nimport { breadcrumbReturnFunc, loginUserDetails, metaTagLabel } from '../../components/Common/CommonFunction';\r\nimport * as pageId from \"../../routes/allPageID\"\r\nimport { commonPageField, commonPageFieldSuccess } from '../../store/actions';\r\nimport * as mode from \"../../routes/PageMode\"\r\nimport { getExcel_Button_API, getExcel_Button_API_Success } from '../../store/Report/SapLedger Redux/action';\r\nimport { useState } from 'react';\r\n\r\nconst ProductMarginReport = (props) => {\r\n\r\n    const history = useHistory()\r\n    const dispatch = useDispatch();\r\n    const [userPageAccessState, setUserAccState] = useState('');\r\n    \r\n    //Access redux store Data /  'save_ModuleSuccess' action data\r\n    const {\r\n        userAccess,\r\n        downloadProductMargin,\r\n    } = useSelector((state) => ({\r\n        userAccess: state.Login.RoleAccessUpdateData,\r\n        pageField: state.CommonPageFieldReducer.pageField,\r\n        downloadProductMargin: state.SapLedgerReducer.downloadProductMargin,\r\n    }));\r\n\r\n    useEffect(() => {\r\n        const page_Id = pageId.PRODUCT_MARGIN_REPORT//changes\r\n        dispatch(commonPageFieldSuccess(null));\r\n        dispatch(commonPageField(page_Id))\r\n        dispatch(getExcel_Button_API_Success([]))\r\n    }, []);\r\n\r\n    const location = { ...history.location }\r\n    const hasShowloction = location.hasOwnProperty(mode.editValue)//changes\r\n    const hasShowModal = props.hasOwnProperty(mode.editValue)//changes\r\n\r\n    // userAccess useEffect\r\n    useEffect(() => {\r\n        let userAcc = null;\r\n        let locationPath = location.pathname;\r\n\r\n        if (hasShowModal) {\r\n            locationPath = props.masterPath;\r\n        };\r\n\r\n        userAcc = userAccess.find((inx) => {\r\n            return (`/${inx.ActualPagePath}` === locationPath)\r\n        })\r\n\r\n        if (userAcc) {\r\n            setUserAccState(userAcc)\r\n            breadcrumbReturnFunc({ dispatch, userAcc });\r\n        };\r\n    }, [userAccess])\r\n\r\n    function excelhandler() {\r\n        const userDetails = loginUserDetails()\r\n        dispatch(getExcel_Button_API(Number(userDetails.IsSCMPartyType) || 0, userDetails.Party_id))\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <MetaTags>{metaTagLabel(userPageAccessState)}</MetaTags>\r\n            <div className=\"page-content\">\r\n\r\n                <Container fluid>\r\n                    <Row>\r\n                        <Col xl={4} md={4} >\r\n                            <CardBody>\r\n                                <Row>\r\n                                    <Col lg={6}>\r\n                                        {downloadProductMargin ?\r\n                                            <Button type='button'\r\n                                                className='btn btn-success'\r\n                                                id=\"excelbtn-id\"\r\n                                            > Downloading..    &nbsp;\r\n                                                <Spinner style={{ height: \"13px\", width: \"13px\" }} color=\"white\" />\r\n                                            </Button> :\r\n\r\n                                            <Button type='button'\r\n                                                className='btn btn-success'\r\n                                                id=\"excelbtn-id\"\r\n                                                onClick={excelhandler}>ProductMarginReport\r\n                                            </Button>\r\n                                        }\r\n\r\n                                    </Col>\r\n                                </Row>\r\n                            </CardBody>\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n            </div>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default ProductMarginReport;","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\CityRedux\\saga.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\CityRedux\\reducer.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\CityPages\\CityMaster.js",["4007","4008","4009","4010","4011","4012"],"import React, { useState, useEffect } from \"react\";\r\nimport Select from \"react-select\";\r\nimport {\r\n    Card,\r\n    CardBody,\r\n    Col,\r\n    Container,\r\n    Row,\r\n    Label,\r\n    CardHeader,\r\n    FormGroup,\r\n    Input,\r\n} from \"reactstrap\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n    getState\r\n} from \"../../../store/Administrator/EmployeeRedux/action\";\r\nimport { commonPageField, commonPageFieldSuccess } from \"../../../store/actions\";\r\nimport { Breadcrumb_inputName } from \"../../../store/Utilites/Breadcrumb/actions\";\r\nimport { MetaTags } from \"react-meta-tags\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {\r\n    comAddPageFieldFunc,\r\n    formValid,\r\n    initialFiledFunc,\r\n    onChangeSelect,\r\n    onChangeText,\r\n    resetFunction\r\n} from \"../../../components/Common/validationFunction\";\r\nimport { SaveButton } from \"../../../components/Common/CommonButton\";\r\nimport {\r\n    breadcrumbReturnFunc,\r\n    btnIsDissablefunc,\r\n    loginCompanyID,\r\n    loginUserID,\r\n    metaTagLabel,\r\n} from \"../../../components/Common/CommonFunction\";\r\nimport * as url from \"../../../routes/route_url\";\r\nimport * as pageId from \"../../../routes/allPageID\"\r\nimport * as mode from \"../../../routes/PageMode\"\r\nimport { customAlert } from \"../../../CustomAlert/ConfirmDialog\";\r\nimport { saveCityMaster, saveCityMaster_Success } from \"../../../store/Administrator/CityRedux/action\";\r\nimport { getDistrictOnState, getDistrictOnStateSuccess } from \"../../../store/Administrator/PartyRedux/action\";\r\nimport { C_Select } from \"../../../CustomValidateForm\";\r\n\r\nconst CityMaster = (props) => {\r\n\r\n    const dispatch = useDispatch();\r\n    const history = useHistory()\r\n\r\n    const fileds = {\r\n        id: \"\",\r\n        StateName: \"\",\r\n        DistrictName: \"\",\r\n        Name: \"\"\r\n    }\r\n\r\n    const [state, setState] = useState(() => initialFiledFunc(fileds))\r\n\r\n    const [pageMode, setPageMode] = useState(mode.defaultsave);\r\n    const [userPageAccessState, setUserAccState] = useState('');\r\n    const [modalCss, setModalCss] = useState(false);\r\n    const [editCreatedBy, seteditCreatedBy] = useState(\"\");\r\n\r\n    //Access redux store Data /  'save_ModuleSuccess' action data\r\n    const {\r\n        State,\r\n        district,\r\n        postMsg,\r\n        userAccess,\r\n        pageField,\r\n        saveBtnloading,\r\n        districtDropDownLoading,\r\n    } = useSelector((state) => ({\r\n        saveBtnloading: state.CityReducer.saveBtnloading,\r\n        State: state.EmployeesReducer.State,\r\n        district: state.PartyMasterReducer.DistrictOnState,\r\n        postMsg: state.CityReducer.PostData,\r\n        userAccess: state.Login.RoleAccessUpdateData,\r\n        districtDropDownLoading: state.PartyMasterReducer.districtDropDownLoading,\r\n        pageField: state.CommonPageFieldReducer.pageField\r\n    }));\r\n\r\n    const values = { ...state.values }\r\n    const { isError } = state;\r\n    const { fieldLabel } = state;\r\n\r\n    const location = { ...history.location }\r\n    const hasShowloction = location.hasOwnProperty(mode.editValue)\r\n    const hasShowModal = props.hasOwnProperty(mode.editValue)\r\n\r\n    useEffect(() => {\r\n        dispatch(getDistrictOnStateSuccess([]))\r\n        dispatch(commonPageFieldSuccess(null));\r\n        dispatch(commonPageField(pageId.CITY))\r\n        dispatch(getState());\r\n    }, [dispatch]);\r\n\r\n    useEffect(() => {\r\n\r\n        let userAcc = null;\r\n        let locationPath;\r\n\r\n        if (props.pageMode === mode.dropdownAdd) {\r\n            locationPath = props.masterPath;\r\n        } else {\r\n            locationPath = location.pathname;\r\n        }\r\n\r\n        if (hasShowModal) {\r\n            locationPath = props.masterPath;\r\n        };\r\n\r\n        userAcc = userAccess.find((inx) => {\r\n            return (`/${inx.ActualPagePath}` === locationPath)\r\n        })\r\n\r\n        if (userAcc) {\r\n            setUserAccState(userAcc);\r\n            if (!props.isdropdown) {\r\n                breadcrumbReturnFunc({ dispatch, userAcc });\r\n            }\r\n        };\r\n\r\n    }, [userAccess])\r\n\r\n    // This UseEffect 'SetEdit' data and 'autoFocus' while this Component load First Time.\r\n    useEffect(() => {\r\n\r\n        if (!(props.pageMode === mode.dropdownAdd)) {\r\n            if ((hasShowloction || hasShowModal)) {\r\n\r\n                let hasEditVal = null\r\n                if (hasShowloction) {\r\n                    setPageMode(location.pageMode)\r\n                    hasEditVal = location.editValue\r\n                }\r\n                else if (hasShowModal) {\r\n                    hasEditVal = props.editValue\r\n                    setPageMode(props.pageMode)\r\n                    setModalCss(true)\r\n                }\r\n\r\n                if (hasEditVal) {\r\n                    const { id, StateName, DistrictName, Name, State_id, District_id } = hasEditVal\r\n\r\n                    const { values, fieldLabel, hasValid, required, isError } = { ...state }\r\n\r\n                    hasValid.id.valid = id\r\n                    hasValid.Name.valid = true\r\n                    hasValid.StateName.valid = true;\r\n                    hasValid.DistrictName.valid = true;\r\n\r\n                    values.id = id;\r\n                    values.StateName = { label: StateName, value: State_id };\r\n                    values.DistrictName = { label: DistrictName, value: District_id };\r\n                    values.Name = Name\r\n                    dispatch(getDistrictOnState(State_id))\r\n                    setState({ values, fieldLabel, hasValid, required, isError })\r\n                    dispatch(Breadcrumb_inputName(hasEditVal.Name))\r\n                    seteditCreatedBy(hasEditVal.CreatedBy)\r\n                }\r\n            }\r\n        }\r\n    }, [])\r\n\r\n    useEffect(async () => {\r\n\r\n        if ((postMsg.Status === true) && (postMsg.StatusCode === 200)) {\r\n            dispatch(saveCityMaster_Success({ Status: false }))\r\n            dispatch(Breadcrumb_inputName(''))\r\n            setState(() => resetFunction(fileds, state))// Clear form values  \r\n            if (props.pageMode === mode.dropdownAdd) {\r\n                customAlert({\r\n                    Type: 1,\r\n                    Message: postMsg.Message,\r\n                })\r\n                props.isOpenModal(false)\r\n            }\r\n            else if (pageMode === mode.edit) {\r\n                customAlert({\r\n                    Type: 1,\r\n                    Message: postMsg.Message,\r\n                })\r\n            }\r\n            else {\r\n                dispatch(Breadcrumb_inputName(''))\r\n                const promise = await customAlert({\r\n                    Type: 1,\r\n                    Message: postMsg.Message,\r\n                })\r\n                if (promise) {\r\n                    history.push({ pathname: url.CITY_LIST })\r\n                }\r\n            }\r\n\r\n        } else if\r\n            (postMsg.Status === true) {\r\n            dispatch(saveCityMaster_Success({ Status: false }))\r\n            customAlert({\r\n                Type: 3,\r\n                Message: JSON.stringify(postMsg.Message),\r\n            })\r\n        }\r\n    }, [postMsg])\r\n\r\n    useEffect(() => {\r\n\r\n        if (pageField) {\r\n            const fieldArr = pageField.PageFieldMaster\r\n            comAddPageFieldFunc({ state, setState, fieldArr })\r\n        }\r\n    }, [pageField])\r\n\r\n    const State_DropdownOptions = State.map((data) => ({\r\n        value: data.id,\r\n        label: data.Name\r\n    }));\r\n\r\n    const District_DropdownOptions = district.map((data) => ({\r\n        value: data.id,\r\n        label: data.Name\r\n    }));\r\n\r\n    function State_Dropdown_Handler(e) {\r\n        dispatch(getDistrictOnState(e.value))\r\n        setState((i) => {\r\n            const a = { ...i }\r\n            a.values.DistrictName = \"\";\r\n            a.hasValid.DistrictName.valid = false\r\n            return a\r\n        })\r\n    }\r\n\r\n    const SaveHandler = (event) => {\r\n        event.preventDefault();\r\n        const btnId = event.target.id;\r\n        try {\r\n            if (formValid(state, setState)) {\r\n                btnIsDissablefunc({ btnId, state: true })\r\n                const jsonBody = JSON.stringify({\r\n                    Name: values.Name,\r\n                    District: values.DistrictName.value,\r\n                    Company: loginCompanyID(),\r\n                    CreatedBy: loginUserID(),\r\n                    UpdatedBy: loginUserID()\r\n                });\r\n                dispatch(saveCityMaster({ jsonBody, btnId }))\r\n            }\r\n        } catch (e) { btnIsDissablefunc({ btnId, state: false }) }\r\n    };\r\n\r\n    // IsEditMode_Css is use of module Edit_mode (reduce page-content marging)\r\n    var IsEditMode_Css = ''\r\n    if ((modalCss) || (pageMode === mode.dropdownAdd)) { IsEditMode_Css = \"-5.5%\" };\r\n\r\n    if (!(userPageAccessState === '')) {\r\n        return (\r\n            <React.Fragment>\r\n                <MetaTags>{metaTagLabel(userPageAccessState)}</MetaTags>\r\n\r\n                <div className=\"page-content\" style={{ marginTop: IsEditMode_Css }}>\r\n                    <Container fluid>\r\n\r\n                        <Card className=\"text-black\">\r\n                            <CardHeader className=\"card-header   text-dark c_card_header\" >\r\n                                <h4 className=\"card-title text-black\">{userPageAccessState.PageDescription}</h4>\r\n                                <p className=\"card-title-desc text-black\">{userPageAccessState.PageDescriptionDetails}</p>\r\n                            </CardHeader>\r\n\r\n                            <CardBody>\r\n                                <form noValidate>\r\n                                    <Card  >\r\n                                        <CardBody className=\"c_card_body\">\r\n                                            <Row>\r\n                                                <FormGroup className=\"mb-2 col col-sm-3 \">\r\n                                                    <Label htmlFor=\"validationCustom01\"> {fieldLabel.StateName} </Label>\r\n                                                    <Col sm={12}>\r\n                                                        <Select\r\n                                                            name=\"StateName\"\r\n                                                            id=\"state\"\r\n                                                            value={values.StateName}\r\n                                                            isSearchable={true}\r\n                                                            classNamePrefix=\"dropdown\"\r\n                                                            autoFocus={true}\r\n                                                            options={State_DropdownOptions}\r\n                                                            onChange={(hasSelect, evn) => {\r\n                                                                onChangeSelect({ hasSelect, evn, state, setState, })\r\n                                                                State_Dropdown_Handler(hasSelect)\r\n                                                            }}\r\n                                                        />\r\n                                                        {isError.StateName.length > 0 && (\r\n                                                            <span className=\"text-danger f-8\"><small>{isError.StateName}</small></span>\r\n                                                        )}\r\n                                                    </Col>\r\n                                                </FormGroup>\r\n                                            </Row>\r\n\r\n                                            <Row>\r\n                                                <FormGroup className=\"mb-2 col col-sm-3 \">\r\n                                                    <Label htmlFor=\"validationCustom01\"> {fieldLabel.DistrictName} </Label>\r\n                                                    <Col sm={12}>\r\n                                                        <C_Select\r\n                                                            name=\"DistrictName\"\r\n                                                            value={values.DistrictName}\r\n                                                            isSearchable={true}\r\n                                                            className=\"react-dropdown\"\r\n                                                            classNamePrefix=\"dropdown\"\r\n                                                            isLoading={districtDropDownLoading}\r\n                                                            options={District_DropdownOptions}\r\n                                                            onChange={(hasSelect, evn) => {\r\n                                                                onChangeSelect({ hasSelect, evn, state, setState, })\r\n                                                            }}\r\n                                                        />\r\n                                                        {isError.DistrictName.length > 0 && (\r\n                                                            <span className=\"text-danger f-8\"><small>{isError.DistrictName}</small></span>\r\n                                                        )}\r\n                                                    </Col>\r\n                                                </FormGroup>\r\n                                            </Row>\r\n\r\n                                            <Row>\r\n                                                <FormGroup className=\"mb-2 col col-sm-4 \">\r\n                                                    <Label htmlFor=\"validationCustom01\">City</Label>\r\n                                                    <Col sm={9}>\r\n                                                        <Input\r\n                                                            name=\"Name\"\r\n                                                            id=\"txtName\"\r\n                                                            value={values.Name}\r\n                                                            type=\"text\"\r\n                                                            className={isError.Name.length > 0 ? \"is-invalid form-control\" : \"form-control\"}\r\n                                                            placeholder=\"Please Enter CityName\"\r\n                                                            autoComplete=\"off\"\r\n                                                            onChange={(event) => {\r\n                                                                onChangeText({ event, state, setState })\r\n                                                                dispatch(Breadcrumb_inputName(event.target.value))\r\n                                                            }}\r\n                                                        />\r\n                                                        {isError.Name.length > 0 && (\r\n                                                            <span className=\"invalid-feedback\">{isError.Name}</span>\r\n                                                        )}\r\n                                                    </Col>\r\n                                                </FormGroup>\r\n                                            </Row>\r\n                                        </CardBody>\r\n                                    </Card>\r\n\r\n                                    <FormGroup className=\"mt-3\">\r\n                                        <Row>\r\n                                            <Col sm={2}>\r\n                                                <SaveButton\r\n                                                    loading={saveBtnloading}\r\n                                                    pageMode={pageMode}\r\n                                                    onClick={SaveHandler}\r\n                                                    userAcc={userPageAccessState}\r\n                                                    editCreatedBy={editCreatedBy}\r\n                                                    module={\"CityMaster\"}\r\n                                                />\r\n                                            </Col>\r\n                                        </Row>\r\n                                    </FormGroup>\r\n                                </form>\r\n                            </CardBody>\r\n                        </Card>\r\n                    </Container>\r\n                </div>\r\n\r\n            </React.Fragment >\r\n\r\n        );\r\n    }\r\n    else {\r\n        return (\r\n            <React.Fragment></React.Fragment>\r\n        )\r\n    }\r\n};\r\nexport default CityMaster;\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\CityRedux\\actionType.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\CityRedux\\action.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\ImportMaster\\RetailerExcelUpload\\Index.js",["4013","4014","4015","4016","4017","4018","4019","4020","4021","4022","4023","4024"],"import React, { useEffect, useLayoutEffect, useState } from \"react\";\r\nimport {\r\n    Card,\r\n    Col,\r\n    FormGroup,\r\n    Input,\r\n    Label,\r\n    Row,\r\n} from \"reactstrap\";\r\nimport { MetaTags } from \"react-meta-tags\";\r\nimport { commonPageField, commonPageFieldSuccess, } from \"../../../../store/actions\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport * as pageId from \"../../../../routes/allPageID\";\r\nimport * as mode from \"../../../../routes/PageMode\";\r\nimport * as _cfunc from \"../../../../components/Common/CommonFunction\";\r\n\r\nimport Dropzone from \"react-dropzone\"\r\nimport {\r\n    GoButton_ImportFiledMap_Add,\r\n    GoButton_ImportFiledMap_AddSuccess\r\n} from \"../../../../store/Administrator/ImportExportFieldMapRedux/action\";\r\nimport { customAlert } from \"../../../../CustomAlert/ConfirmDialog\";\r\nimport {\r\n    RetailerExcelUpload_save_action_Success\r\n} from \"../../../../store/Administrator/ImportExcelPartyMapRedux/action\";\r\nimport './scss.scss'\r\nimport PriceDropOptions from \"../../PartyMaster/MasterAdd/FirstTab/PriceDropOptions\";\r\nimport { priceListByPartyAction, priceListByPartyActionSuccess } from \"../../../../store/Administrator/PriceList/action\";\r\nimport { getPartyTypelist, getPartyTypelistSuccess } from \"../../../../store/Administrator/PartyTypeRedux/action\";\r\nimport { readExcelFile, retailer_SaveHandler } from \"./AllHndlerFunc\";\r\nimport { C_Button, PageLoadingSpinner } from \"../../../../components/Common/CommonButton\";\r\nimport { C_Select } from \"../../../../CustomValidateForm\";\r\nimport { getPartyListAPI } from \"../../../../store/Administrator/PartyRedux/action\";\r\n\r\nconst RetailerExcelUpload = (props) => {\r\n\r\n    const dispatch = useDispatch();\r\n    const history = useHistory()\r\n    const userAdminRole = _cfunc.loginUserAdminRole();\r\n\r\n    const preDetails = { fileFiled: '', invoice: [], party: [], invoiceDate: '', amount: 0, invoiceNO: [], partyNO: [] }\r\n\r\n    const [priceListSelect, setPriceListSelect] = useState({ value: '', label: \"\" })\r\n\r\n    const [userPageAccessState, setUserAccState] = useState('');\r\n    const [retailerId, setRetailerId] = useState('')\r\n    const [selectedFiles, setselectedFiles] = useState([])\r\n\r\n    const [preUploadjson, setPreUploadjson] = useState([])\r\n    const [readJsonDetail, setReadJsonDetail] = useState(preDetails)\r\n    const [preViewDivShow, setPreViewDivShow] = useState(false)\r\n    const [partySelect, SetPartySelect] = useState('')\r\n\r\n\r\n    const {\r\n        postMsg,\r\n        pageField,\r\n        userAccess,\r\n        priceListByPartyType = [],\r\n        compareParameter = [],\r\n        partyTypes,\r\n        compareParamLoading,\r\n        saveBtnLoading,\r\n        priceListDropDownLoading,\r\n        partyTypesDropDownLoading,\r\n        partyList,\r\n        partyDropDownLoading\r\n    } = useSelector((state) => ({\r\n        postMsg: state.ImportExcelPartyMap_Reducer.partyExcelUploadMsg,\r\n        saveBtnLoading: state.ImportExcelPartyMap_Reducer.partyUploadSaveLoading,\r\n\r\n        userAccess: state.Login.RoleAccessUpdateData,\r\n        pageField: state.CommonPageFieldReducer.pageField,\r\n\r\n        partyTypes: state.PartyTypeReducer.ListData,\r\n        partyTypesDropDownLoading: state.PartyTypeReducer.goBtnLoading,\r\n\r\n        partyList: state.PartyMasterReducer.partyList,\r\n        partyDropDownLoading: state.PartyMasterReducer.goBtnLoading,\r\n\r\n        priceListByPartyType: state.PriceListReducer.priceListByPartyType,\r\n        priceListDropDownLoading: state.PriceListReducer.priceListDropDownLoading,\r\n\r\n        compareParameter: state.ImportExportFieldMap_Reducer.addGoButton,\r\n        compareParamLoading: state.ImportExportFieldMap_Reducer.goBtnLoading,\r\n\r\n    }));\r\n\r\n    useLayoutEffect(() => {\r\n        const page_Id = pageId.INVOICE_EXCEL_UPLOAD\r\n        dispatch(commonPageFieldSuccess(null));\r\n        dispatch(commonPageField(page_Id))\r\n        dispatch(GoButton_ImportFiledMap_AddSuccess([]));\r\n        dispatch(priceListByPartyActionSuccess([]))\r\n        dispatch(getPartyTypelist());\r\n        dispatch(getPartyListAPI());\r\n        goButtonHandler()\r\n        if (!userAdminRole) {\r\n            SetPartySelect({ value: _cfunc.loginPartyID() })\r\n        }\r\n        return () => {\r\n            dispatch(commonPageFieldSuccess(null));\r\n            dispatch(GoButton_ImportFiledMap_AddSuccess([]));\r\n            dispatch(priceListByPartyActionSuccess([]))\r\n            dispatch(getPartyTypelistSuccess([]))\r\n        }\r\n    }, []);\r\n\r\n    const location = { ...history.location }\r\n    const hasShowModal = props.hasOwnProperty(mode.editValue)\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        let userAcc = null;\r\n        let locationPath = location.pathname;\r\n        if (hasShowModal) {\r\n            locationPath = props.masterPath;\r\n        };\r\n        userAcc = userAccess.find((inx) => {\r\n            return (`/${inx.ActualPagePath}` === locationPath)\r\n        })\r\n        if (userAcc) {\r\n            setUserAccState(userAcc)\r\n            _cfunc.breadcrumbReturnFunc({ dispatch, userAcc });\r\n        };\r\n    }, [userAccess])\r\n\r\n    useEffect(async () => {\r\n\r\n        if ((postMsg.Status === true) && (postMsg.StatusCode === 200)) {\r\n            dispatch(RetailerExcelUpload_save_action_Success({ Status: false }))\r\n\r\n            //clear all states\r\n            setPriceListSelect({ value: '', label: \"\" });\r\n            setRetailerId('')\r\n            setselectedFiles([])\r\n            setPreUploadjson([])\r\n            setPreViewDivShow(false)\r\n            SetPartySelect('')\r\n\r\n            customAlert({\r\n                Type: 1,\r\n                Message: postMsg.Message,\r\n            })\r\n        }\r\n        else if (postMsg.Status === true) {\r\n            dispatch(RetailerExcelUpload_save_action_Success({ Status: false }))\r\n            customAlert({\r\n                Type: 4,\r\n                Message: JSON.stringify(postMsg.Message),\r\n            })\r\n        }\r\n    }, [postMsg])\r\n\r\n    useEffect(() => {\r\n\r\n        if ((partyTypes.length > 0)) {\r\n            let isRetailer = partyTypes.find(i => (i.IsRetailer))\r\n            if (!(isRetailer === undefined)) {\r\n                setRetailerId(isRetailer.id)\r\n                dispatch(priceListByPartyAction(isRetailer.id))\r\n            }\r\n        }\r\n    }, [partyTypes])\r\n\r\n    function goButtonHandler(e) {\r\n        const jsonBody = JSON.stringify({\r\n            PartyID: \"\",\r\n            CompanyID: \"\"\r\n        })\r\n        dispatch(GoButton_ImportFiledMap_Add({ jsonBody }))\r\n    };\r\n\r\n\r\n    async function veifyExcelBtn_Handler() {\r\n\r\n        if (compareParameter.length === 0) {\r\n            customAlert({\r\n                Type: 3,\r\n                Message: \"Please wait Downloading field Details.\",\r\n            })\r\n            return\r\n        }\r\n\r\n        var files = selectedFiles;\r\n        if (files.length == 0) {\r\n            customAlert({\r\n                Type: 3,\r\n                Message: \"Please choose any file...\",\r\n            })\r\n            return;\r\n        }\r\n\r\n        var filename = files[0].name;\r\n        var extension = filename.substring(filename.lastIndexOf(\".\")).toUpperCase();\r\n\r\n        if (extension == '.CSV') {\r\n\r\n            const readjson = await readExcelFile({ file: files[0], compareParameter, })\r\n            if (readjson.length > 0) {\r\n\r\n                setPreUploadjson(readjson)\r\n                setPreViewDivShow(true)\r\n                setReadJsonDetail(readjson)\r\n            }\r\n\r\n        } else {\r\n            customAlert({\r\n                Type: 3,\r\n                Message: \"Please select a valid CSV file.\",\r\n            })\r\n        }\r\n    }\r\n\r\n\r\n    async function handleAcceptedFiles(files) {\r\n        if (compareParameter.length === 0) {\r\n            customAlert({\r\n                Type: 3,\r\n                Message: \"Please wait Downloading field Details.\",\r\n            })\r\n            return\r\n        }\r\n\r\n        if (selectedFiles.length > 0) {\r\n            const isConfirmed = await customAlert({\r\n                Type: 8,\r\n                Message: \"Do you confirm your choice?\",\r\n            });\r\n            if (!isConfirmed) {\r\n\r\n                return\r\n            }\r\n        };\r\n\r\n        setReadJsonDetail(preDetails)\r\n        setPreUploadjson([])\r\n        setPreViewDivShow(false)\r\n\r\n        files.map(file =>\r\n            Object.assign(file, {\r\n                preview: URL.createObjectURL(file),\r\n                formattedSize: formatBytes(file.size),\r\n            })\r\n        )\r\n        setselectedFiles(files)\r\n    }\r\n\r\n    function formatBytes(bytes, decimals = 2) {\r\n        if (bytes === 0) return \"0 Bytes\"\r\n        const k = 1024\r\n        const dm = decimals < 0 ? 0 : decimals\r\n        const sizes = [\"Bytes\", \"KB\", \"MB\", \"GB\", \"TB\", \"PB\", \"EB\", \"ZB\", \"YB\"]\r\n\r\n        const i = Math.floor(Math.log(bytes) / Math.log(k))\r\n        return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + \" \" + sizes[i]\r\n    }\r\n\r\n    const priceListOnClick = function () {\r\n\r\n        const hasNone = document.getElementById(\"price-drop\").style;\r\n\r\n        if ((priceListByPartyType.length > 0)) {\r\n            if ((hasNone.display === \"none\") || (hasNone.display === \"\")) {\r\n                hasNone.display = \"block\";\r\n            } else {\r\n                hasNone.display = \"none\";\r\n            }\r\n        }\r\n\r\n    };\r\n\r\n\r\n    const uploadSaveHandler = (event) => {\r\n\r\n        let validMsg = []\r\n        if ((partySelect === \"\")) {\r\n            validMsg.push({ Msg: \"Please Select Party.\" })\r\n        }\r\n        if ((priceListSelect.value === '')) {\r\n            validMsg.push({ Msg: \"Please Select PriceList.\" })\r\n        }\r\n        if (validMsg.length > 0) {\r\n            customAlert({\r\n                Type: 3,\r\n                Message: validMsg\r\n            })\r\n            return\r\n        }\r\n\r\n        retailer_SaveHandler({\r\n            event,\r\n            dispatch,\r\n            compareParameter,\r\n            readJsonDetail,\r\n            partySelect,\r\n            priceListSelect,\r\n            retailerId\r\n        })\r\n    }\r\n\r\n\r\n    if (!(userPageAccessState === '')) {\r\n        return (\r\n            <React.Fragment>\r\n                <MetaTags>{_cfunc.metaTagLabel(userPageAccessState)}</MetaTags>\r\n                <PageLoadingSpinner isLoading={(partyTypesDropDownLoading || partyDropDownLoading || compareParamLoading || !pageField)} />\r\n                <form noValidate>\r\n                    <div className=\"page-content\">\r\n                        {\r\n                            userAdminRole ? <>\r\n                                <div className=\"px-2 c_card_header text-black\" >\r\n                                    <div className=\"   c_card_filter text-black\" style={{ paddingBottom: \"3px\" }} >\r\n\r\n                                        <Row className=\"pt-2\">\r\n                                            <Col sm=\"5\">\r\n                                                <FormGroup className=\"row px-1\">\r\n                                                    <Label className=\"col-sm-5 p-2\" style={{ width: \"83px\" }}>\r\n                                                        Party\r\n                                                    </Label>\r\n                                                    <Col sm=\"6\">\r\n                                                        <C_Select\r\n                                                            value={partySelect}\r\n                                                            isSearchable={true}\r\n                                                            isLoading={partyDropDownLoading}\r\n                                                            className=\"react-dropdown\"\r\n                                                            classNamePrefix=\"dropdown\"\r\n                                                            options={partyList.map((data) => ({\r\n                                                                value: data.id,\r\n                                                                label: data.Name,\r\n                                                            }))}\r\n\r\n                                                            onChange={(e) => { SetPartySelect(e) }}\r\n                                                            styles={{ menu: (provided) => ({ ...provided, zIndex: 2 }) }}\r\n                                                        />\r\n                                                    </Col>\r\n                                                </FormGroup>\r\n                                            </Col>\r\n                                        </Row>\r\n\r\n                                        <row className='mb-2'>\r\n                                            < Col md={6}>\r\n                                                <FormGroup className=\" row px-1\">\r\n                                                    <Label className=\"col-sm-5 p-2\" style={{ width: \"83px\" }}>PriceList </Label>\r\n                                                    <Col md={5}>\r\n                                                        <Input\r\n                                                            value={priceListSelect.label}\r\n                                                            disabled={partyDropDownLoading}\r\n                                                            autoComplete={\"off\"}\r\n                                                            placeholder=\"Select...\"\r\n                                                            onClick={priceListOnClick}\r\n                                                        />\r\n                                                        <PriceDropOptions\r\n                                                            data={priceListByPartyType}\r\n                                                            priceList={priceListSelect}\r\n                                                            setPriceSelect={setPriceListSelect} />\r\n                                                    </Col>\r\n                                                </FormGroup>\r\n                                            </Col>\r\n                                        </row>\r\n                                    </div>\r\n                                </div>\r\n                            </>\r\n                                : <>\r\n                                    {(!(compareParameter.length > 0)) ?\r\n                                        <div className=\"row \">\r\n                                            <div className=\"d-flex justify-content-start p-2 \">\r\n                                                <div>Please wait Downloading field Details.</div>\r\n                                                <div >\r\n                                                    <div className=\"dot-pulse\">\r\n                                                        <div className=\"bounce1\"></div>\r\n                                                        <div className=\"bounce2\"></div>\r\n                                                        <div className=\"bounce3\"></div>\r\n                                                    </div>\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                        :\r\n                                        <div >\r\n                                            <div className=\"px-2 c_card_header text-black\" >\r\n                                                <div className=\"   c_card_filter text-black\" style={{ paddingBottom: \"5px\", paddingTop: \"7px\" }} >\r\n\r\n                                                    <row className='mb-2'>\r\n                                                        < Col md={6}>\r\n                                                            <FormGroup className=\" row px-1\">\r\n                                                                <Label className=\"col col-sm-1  mt-2\" style={{ width: \"83px\" }}>PriceList </Label>\r\n                                                                <Col md={5}>\r\n                                                                    <Input\r\n                                                                        value={priceListSelect.label}\r\n                                                                        disabled={partyDropDownLoading}\r\n                                                                        autoComplete={\"off\"}\r\n                                                                        placeholder=\"Select...\"\r\n                                                                        onClick={priceListOnClick}\r\n                                                                    />\r\n                                                                    <PriceDropOptions\r\n                                                                        data={priceListByPartyType}\r\n                                                                        priceList={priceListSelect}\r\n                                                                        setPriceSelect={setPriceListSelect} />\r\n                                                                </Col>\r\n                                                            </FormGroup>\r\n                                                        </Col>\r\n                                                    </row>\r\n                                                </div>\r\n                                            </div>\r\n                                            <h4 className=\"pt-4 pb-4 text-primary\" >{\"Upload Your Excel.\"}</h4>\r\n                                        </div>}\r\n\r\n\r\n                                </>\r\n                        }\r\n\r\n\r\n                        <div className=\"mb-3 mt-3\">\r\n\r\n\r\n                            <Dropzone\r\n                                onDrop={acceptedFiles => {\r\n                                    document.getElementById(\"demo1\").style.border = \"4px dotted green\";\r\n                                    handleAcceptedFiles(acceptedFiles)\r\n                                }}\r\n                            >\r\n                                {({ getRootProps, getInputProps }) => (\r\n                                    <div id='demo1' className=\"dropzone\">\r\n                                        <div\r\n                                            className=\"dz-message needsclick mt-2\"\r\n                                            {...getRootProps()}\r\n                                        >\r\n                                            <input {...getInputProps()} />\r\n                                            <div className=\"mb-3\">\r\n                                                <i className=\"display-4 text-muted bx bxs-cloud-upload\" />\r\n                                            </div>\r\n                                            <h4>Drop files here or click to upload.</h4>\r\n                                        </div>\r\n                                    </div>\r\n                                )}\r\n                            </Dropzone>\r\n\r\n                            <div className=\"dropzone-previews mt-3\" id=\"file-previews\">\r\n                                {selectedFiles.map((f, i) => {\r\n                                    return (\r\n                                        <Card\r\n                                            className=\"mt-1 mb-0 shadow-none border dz-processing dz-image-preview dz-success dz-complete\"\r\n                                            key={i + \"-file\"}\r\n                                        >\r\n                                            <div className=\"p-2 d-flex justify-containt-space-between\">\r\n\r\n                                                <Row className=\"align-items-center\">\r\n                                                    <Col className=\"col-auto\">\r\n                                                        <img\r\n                                                            data-dz-thumbnail=\"\"\r\n                                                            height=\"80\"\r\n                                                            className=\"avatar-sm rounded bg-light\"\r\n                                                            alt={f.name}\r\n                                                            src={f.preview}\r\n                                                        />\r\n                                                    </Col>\r\n                                                    <Col>\r\n                                                        <Link\r\n                                                            to=\"#\"\r\n                                                            className=\"text-muted font-weight-bold\"\r\n                                                        >\r\n                                                            {f.name}\r\n                                                        </Link>\r\n                                                        <p className=\"mb-0\">\r\n                                                            <strong>{f.formattedSize}</strong>\r\n                                                        </p>\r\n                                                    </Col>\r\n                                                </Row>\r\n                                            </div>\r\n\r\n                                        </Card>\r\n                                    )\r\n                                })}\r\n                            </div>\r\n\r\n\r\n                        </div>\r\n\r\n                        <div className=\"text- mt-4\" >\r\n                            {preViewDivShow ?\r\n                                <C_Button\r\n                                    type=\"button\"\r\n                                    id='btn-uploadBtnFunc'\r\n                                    className=\"btn btn-success\"\r\n                                    loading={saveBtnLoading}\r\n                                    onClick={uploadSaveHandler}\r\n                                >\r\n                                    Upload Files\r\n                                </C_Button>\r\n                                :\r\n                                <C_Button\r\n                                    type=\"button\"\r\n                                    id='btn-verify'\r\n                                    loading={saveBtnLoading}\r\n                                    className=\"btn btn-primary\"\r\n                                    onClick={veifyExcelBtn_Handler}\r\n                                >\r\n                                    Verify Files\r\n                                </C_Button>\r\n                            }\r\n                        </div>\r\n\r\n\r\n\r\n                    </div>\r\n\r\n                </form >\r\n\r\n\r\n            </React.Fragment >\r\n        );\r\n    }\r\n    else {\r\n        return (\r\n            <React.Fragment></React.Fragment>\r\n        )\r\n    }\r\n};\r\n\r\nexport default RetailerExcelUpload\r\n\r\n\r\n\r\n\r\n\r\n\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\ImportMaster\\InvoiceExcelUpload\\Index.js",["4025","4026","4027","4028","4029","4030","4031","4032","4033","4034"],"import React, { useEffect, useState } from \"react\";\r\nimport {\r\n    Card,\r\n    Col,\r\n    FormGroup,\r\n    Label,\r\n    Row,\r\n} from \"reactstrap\";\r\nimport { MetaTags } from \"react-meta-tags\";\r\nimport {commonPageFieldSuccess, } from \"../../../../store/actions\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport * as mode from \"../../../../routes/PageMode\";\r\nimport * as _cfunc from \"../../../../components/Common/CommonFunction\";\r\n\r\nimport { getPartyListAPI, getPartyListAPISuccess } from \"../../../../store/Administrator/PartyRedux/action\";\r\nimport Dropzone from \"react-dropzone\"\r\nimport { fileDetails, readExcelFile } from \"./readFile\";\r\nimport {\r\n    GoButton_ImportFiledMap_Add,\r\n    GoButton_ImportFiledMap_AddSuccess\r\n} from \"../../../../store/Administrator/ImportExportFieldMapRedux/action\";\r\nimport { customAlert } from \"../../../../CustomAlert/ConfirmDialog\";\r\nimport {\r\n    InvoiceExcelUpload_save_action,\r\n    InvoiceExcelUpload_save_Success\r\n} from \"../../../../store/Administrator/ImportExcelPartyMapRedux/action\";\r\nimport './scss.scss'\r\nimport { C_Button, Go_Button, PageLoadingSpinner } from \"../../../../components/Common/CommonButton\";\r\nimport { C_Select } from \"../../../../CustomValidateForm\";\r\n\r\n\r\nconst InvoiceExcelUpload = (props) => {\r\n\r\n    const dispatch = useDispatch();\r\n    const history = useHistory()\r\n    const userAdminRole = _cfunc.loginUserAdminRole();\r\n\r\n    const preDetails = { fileFiled: '', invoice: [], party: [], invoiceDate: '', amount: 0, invoiceNO: [], partyNO: [] }\r\n\r\n    const [userPageAccessState, setUserAccState] = useState('');\r\n    const [selectedFiles, setselectedFiles] = useState([])\r\n    const [readJsonDetail, setReadJsonDetail] = useState(preDetails)\r\n    const [preViewDivShow, setPreViewDivShow] = useState(false)\r\n    const [partySelect, SetPartySelect] = useState([])\r\n\r\n\r\n    const {\r\n        postMsg,\r\n        userAccess,\r\n        compareParameter = [],\r\n        partyList,\r\n        partyDropDownLoading,\r\n        compareParamLoading,\r\n        saveBtnLoading,\r\n    } = useSelector((state) => ({\r\n        postMsg: state.ImportExcelPartyMap_Reducer.invoiceExcelUploadMsg,\r\n        saveBtnLoading: state.ImportExcelPartyMap_Reducer.invoiceUploadSaveLoading,\r\n\r\n        partyList: state.PartyMasterReducer.partyList,\r\n        partyDropDownLoading: state.PartyMasterReducer.goBtnLoading,\r\n\r\n        compareParameter: state.ImportExportFieldMap_Reducer.addGoButton,\r\n        compareParamLoading: state.ImportExportFieldMap_Reducer.goBtnLoading,\r\n        userAccess: state.Login.RoleAccessUpdateData,\r\n    }));\r\n\r\n    useEffect(() => {\r\n        dispatch(GoButton_ImportFiledMap_AddSuccess([]));\r\n        dispatch(getPartyListAPI());\r\n        if (!userAdminRole) {\r\n            goButtonHandler()\r\n        }\r\n        return () => {\r\n            dispatch(GoButton_ImportFiledMap_AddSuccess([]));\r\n            dispatch(getPartyListAPISuccess([]));\r\n            dispatch(commonPageFieldSuccess(null));\r\n        }\r\n\r\n    }, []);\r\n\r\n    const location = { ...history.location }\r\n    const hasShowModal = props.hasOwnProperty(mode.editValue)\r\n\r\n\r\n    // userAccess useEffect\r\n    useEffect(() => {\r\n        let userAcc = null;\r\n        let locationPath = location.pathname;\r\n        if (hasShowModal) {\r\n            locationPath = props.masterPath;\r\n        };\r\n        userAcc = userAccess.find((inx) => {\r\n            return (`/${inx.ActualPagePath}` === locationPath)\r\n        })\r\n        if (userAcc) {\r\n            setUserAccState(userAcc)\r\n            _cfunc.breadcrumbReturnFunc({ dispatch, userAcc });\r\n        };\r\n    }, [userAccess])\r\n\r\n\r\n\r\n    useEffect(async () => {\r\n\r\n        if ((postMsg.Status === true) && (postMsg.StatusCode === 200)) {\r\n            dispatch(InvoiceExcelUpload_save_Success({ Status: false }))\r\n            customAlert({\r\n                Type: 1,\r\n                Message: postMsg.Message,\r\n            });\r\n            setselectedFiles([]);\r\n            setPreViewDivShow(false);\r\n            SetPartySelect('');\r\n            setReadJsonDetail(preDetails);\r\n        }\r\n        else if (postMsg.Status === true) {\r\n            dispatch(InvoiceExcelUpload_save_Success({ Status: false }))\r\n            customAlert({\r\n                Type: 4,\r\n                Message: JSON.stringify(postMsg.Message),\r\n            });\r\n        };\r\n    }, [postMsg])\r\n\r\n\r\n    function goButtonHandler() {\r\n        let partyId = (!userAdminRole) ? _cfunc.loginPartyID() : partySelect.value;\r\n        const jsonBody = JSON.stringify({\r\n            PartyID: partyId,\r\n            CompanyID: _cfunc.loginCompanyID()\r\n        })\r\n        dispatch(GoButton_ImportFiledMap_Add({ jsonBody }))\r\n    };\r\n\r\n\r\n    async function veifyExcelBtn_Handler() {\r\n\r\n        if (compareParameter.length === 0) {\r\n            customAlert({\r\n                Type: 3,\r\n                Message: \"Please wait Downloading field Details.\",\r\n            })\r\n            return\r\n        }\r\n\r\n        var files = selectedFiles;\r\n        if (files.length == 0) {\r\n            customAlert({\r\n                Type: 3,\r\n                Message: \"Please choose any file...\",\r\n            })\r\n            return;\r\n        }\r\n\r\n        var filename = files[0].name;\r\n        var extension = filename.substring(filename.lastIndexOf(\".\")).toUpperCase();\r\n        if (extension == '.CSV') {\r\n            const readjson = await readExcelFile({ file: files[0], compareParameter, })\r\n            if (readjson.length > 0) {\r\n\r\n                const isdetails = await fileDetails({ compareParameter, readjson })\r\n                let { invoiceNO } = isdetails;\r\n                if ((invoiceNO.length > 0)) {\r\n                    setReadJsonDetail(isdetails)\r\n                    setPreViewDivShow(true)\r\n                } else {\r\n                    customAlert({\r\n                        Type: 3,\r\n                        Message: \"Mapping not match.\"\r\n                    })\r\n                }\r\n            }\r\n\r\n        } else {\r\n            customAlert({\r\n                Type: 3,\r\n                Message: \"Please select a valid CSV file.\",\r\n            })\r\n        }\r\n    }\r\n\r\n\r\n    async function handleAcceptedFiles(files) {\r\n        if (compareParameter.length === 0) {\r\n            customAlert({\r\n                Type: 3,\r\n                Message: \"Please wait Downloading field Details.\",\r\n            })\r\n            return\r\n        }\r\n\r\n        if (selectedFiles.length > 0) {\r\n            const isConfirmed = await customAlert({\r\n                Type: 8,\r\n                Message: \"Do you confirm your choice?\",\r\n            });\r\n            if (!isConfirmed) {\r\n\r\n                return\r\n            }\r\n        };\r\n\r\n        setReadJsonDetail(preDetails)\r\n        setPreViewDivShow(false)\r\n        // try {\r\n        //     const btnerify = document.getElementById(\"btn-verify\")\r\n        //     const btnupload = document.getElementById('btn-uploadBtnFunc')\r\n        //     const progDiv = document.getElementById(\"file-proccess\")\r\n\r\n        //     btnerify.style.display = \"block\"\r\n        //     btnupload.style.display = \"none\"\r\n        //     progDiv.style.display = \"none\"\r\n        // } catch (d) { }\r\n\r\n        files.map(file =>\r\n            Object.assign(file, {\r\n                preview: URL.createObjectURL(file),\r\n                formattedSize: formatBytes(file.size),\r\n            })\r\n        )\r\n        setselectedFiles(files)\r\n    }\r\n\r\n    function formatBytes(bytes, decimals = 2) {\r\n        if (bytes === 0) return \"0 Bytes\"\r\n        const k = 1024\r\n        const dm = decimals < 0 ? 0 : decimals\r\n        const sizes = [\"Bytes\", \"KB\", \"MB\", \"GB\", \"TB\", \"PB\", \"EB\", \"ZB\", \"YB\"]\r\n\r\n        const i = Math.floor(Math.log(bytes) / Math.log(k))\r\n        return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + \" \" + sizes[i]\r\n    }\r\n\r\n\r\n    const uploadSaveHandler = async (event) => {\r\n\r\n        event.preventDefault();\r\n        const btnId = event.target.id\r\n        try {\r\n            _cfunc.btnIsDissablefunc({ btnId, state: true })\r\n            const parArr = readJsonDetail.fileFiled\r\n            const outerArr = []\r\n\r\n            compareParameter.forEach(ele => {\r\n                if ((ele.Value !== null)) {\r\n                    parArr[ele.FieldName] = ele.Value\r\n                }\r\n            })\r\n\r\n            readJsonDetail.invoice.forEach(inv => {\r\n                let parentObj;\r\n                let invoiceItems = []\r\n                inv.forEach(ele => {\r\n                    parentObj = {\r\n                        \"CustomerGSTTin\": ele[parArr.CustomerGSTTin] ? ele[parArr.CustomerGSTTin] : '',\r\n                        \"GrandTotal\": ele[parArr.GrandTotal] ? ele[parArr.GrandTotal] : '',\r\n                        \"RoundOffAmount\": ele[parArr.RoundOffAmount] ? ele[parArr.RoundOffAmount] : 0,\r\n                        \"InvoiceNumber\": ele[parArr.InvoiceNumber] ? ele[parArr.InvoiceNumber] : '',\r\n                        \"FullInvoiceNumber\": ele[parArr.FullInvoiceNumber] ? ele[parArr.FullInvoiceNumber] : '',\r\n                        \"Customer\": ele[parArr.Customer] ? ele[parArr.Customer] : '',\r\n                        \"Party\": _cfunc.loginPartyID(),\r\n                        CreatedBy: _cfunc.loginUserID(),\r\n                        UpdatedBy: _cfunc.loginUserID(),\r\n                        \"InvoiceDate\": ele[parArr.InvoiceDate] ? ele[parArr.InvoiceDate] : '',\r\n                    }\r\n\r\n                    invoiceItems.push({\r\n                        \"Item\": ele[parArr.Item] ? ele[parArr.Item] : '',\r\n                        \"Unit\": ele[parArr.Unit] ? ele[parArr.Unit] : '',\r\n                        \"BatchCode\": ele[parArr.BatchCode] ? ele[parArr.BatchCode] : '',\r\n                        \"Quantity\": ele[parArr.Quantity] ? ele[parArr.Quantity] : 0,\r\n                        \"BatchDate\": ele[parArr.BatchDate] ? ele[parArr.BatchDate] : '',\r\n                        \"BaseUnitQuantity\": ele[parArr.BaseUnitQuantity] ? ele[parArr.BaseUnitQuantity] : '',\r\n                        \"LiveBatch\": ele[parArr.LiveBatch] ? ele[parArr.LiveBatch] : '',\r\n                        \"MRP\": ele[parArr.MRP] ? ele[parArr.MRP] : '',\r\n                        \"MRPValue\": ele[parArr.MRPValue] ? ele[parArr.MRPValue] : '',\r\n                        \"Rate\": ele[parArr.Rate] ? ele[parArr.Rate] : '',\r\n                        \"BasicAmount\": ele[parArr.BasicAmount] ? ele[parArr.BasicAmount] : '',\r\n                        \"GSTAmount\": ele[parArr.GSTAmount] ? ele[parArr.GSTAmount] : '',\r\n                        \"GST\": ele[parArr.GST] ? ele[parArr.GST] : '',\r\n                        \"GSTValue\": ele[parArr.GSTValue] ? ele[parArr.GSTValue] : 0,\r\n                        \"CGST\": ele[parArr.CGST] ? ele[parArr.CGST] : 0,\r\n                        \"SGST\": ele[parArr.SGST] ? ele[parArr.SGST] : 0,\r\n                        \"IGST\": ele[parArr.IGST] ? ele[parArr.IGST] : 0,\r\n                        \"GSTPercentage\": ele[parArr.GSTPercentage] ? ele[parArr.GSTPercentage] : 0,\r\n                        \"CGSTPercentage\": ele[parArr.CGSTPercentage] ? ele[parArr.CGSTPercentage] : 0,\r\n                        \"SGSTPercentage\": ele[parArr.SGSTPercentage] ? ele[parArr.SGSTPercentage] : 0,\r\n                        \"IGSTPercentage\": ele[parArr.IGSTPercentage] ? ele[parArr.IGSTPercentage] : 0,\r\n                        \"Amount\": ele[parArr.Amount] ? ele[parArr.Amount] : 0,\r\n                        \"TaxType\": ele[parArr.TaxType] ? ele[parArr.TaxType] : '',\r\n                        \"DiscountType\": ele[parArr.DiscountType] ? ele[parArr.DiscountType] : '',\r\n                        \"Discount\": ele[parArr.Discount] ? ele[parArr.Discount] : 0,\r\n                        \"DiscountAmount\": ele[parArr.DiscountAmount] ? ele[parArr.DiscountAmount] : 0,\r\n\r\n                    })\r\n                })\r\n\r\n                outerArr.push({ ...parentObj, InvoiceItems: invoiceItems })\r\n            });\r\n\r\n            const jsonBody = JSON.stringify({ \"BulkData\": outerArr })\r\n            dispatch(InvoiceExcelUpload_save_action({ jsonBody, btnId }));\r\n\r\n        } catch (e) { _cfunc.btnIsDissablefunc({ btnId, state: false }) }\r\n    };\r\n\r\n\r\n    if (!(userPageAccessState === '')) {\r\n        return (\r\n            <React.Fragment>\r\n                <MetaTags>{_cfunc.metaTagLabel(userPageAccessState)}</MetaTags>\r\n                <PageLoadingSpinner isLoading={((partyDropDownLoading && (userAdminRole)) || compareParamLoading)} />\r\n\r\n                <form noValidate>\r\n                    <div className=\"page-content\">\r\n\r\n                        <div className=\"px-2 c_card_header text-black\" >\r\n                            <div className=\"px-2   c_card_filter text-black\" >\r\n                                {\r\n                                    userAdminRole ? <>\r\n                                        {/* <PartyDropdown_Common pageMode={pageMode}\r\n                                            partySelect={partySelect}\r\n                                            setPartyFunc={(e) => SetPartySelect(e)}\r\n                                            goButtonHandler={goButtonHandler}\r\n                                        /> */}\r\n\r\n                                        <div className=\"row pt-2\">\r\n                                            <Col sm=\"5\">\r\n                                                <FormGroup className=\"row px-1\">\r\n                                                    <Label className=\"col-sm-5 p-2\" style={{ width: \"83px\" }}>\r\n                                                        Party\r\n                                                    </Label>\r\n                                                    <Col sm=\"6\">\r\n                                                        <C_Select\r\n                                                            value={partySelect}\r\n                                                            isSearchable={true}\r\n                                                            isLoading={partyDropDownLoading}\r\n                                                            className=\"react-dropdown\"\r\n                                                            classNamePrefix=\"dropdown\"\r\n                                                            options={partyList.map((data) => ({\r\n                                                                value: data.id,\r\n                                                                label: data.Name,\r\n                                                            }))}\r\n\r\n                                                            onChange={(e) => { SetPartySelect(e) }}\r\n                                                            styles={{ menu: (provided) => ({ ...provided, zIndex: 2 }) }}\r\n                                                        />\r\n                                                    </Col>\r\n                                                </FormGroup>\r\n                                            </Col>\r\n                                            <Col sm=\"1\" className=\"mb-1\">\r\n                                                <Go_Button\r\n                                                    // loading={reducers.loading}\r\n                                                    onClick={goButtonHandler} />\r\n                                            </Col>\r\n                                        </div>\r\n                                    </>\r\n                                        : <>\r\n                                            {(!(compareParameter.length > 0)) ?\r\n                                                <div className=\"row \">\r\n                                                    <div className=\"d-flex justify-content-start p-2 \">\r\n                                                        <div>Please wait Downloading field Details. other wise check filed mapping </div>\r\n                                                        <div >\r\n                                                            <div className=\"dot-pulse\">\r\n                                                                <div className=\"bounce1\"></div>\r\n                                                                <div className=\"bounce2\"></div>\r\n                                                                <div className=\"bounce3\"></div>\r\n                                                            </div>\r\n                                                        </div>\r\n                                                    </div>\r\n                                                </div>\r\n                                                :\r\n                                                <div >\r\n                                                    <h4 className=\"pt-4 pb-4 text-primary\" >{\"Upload Your Excel.\"}</h4>\r\n                                                </div>}\r\n                                        </>\r\n                                }\r\n\r\n                            </div>\r\n\r\n                        </div>\r\n\r\n\r\n                        <div className=\"mb-3 mt-3\">\r\n\r\n\r\n                            <Dropzone\r\n                                onDrop={acceptedFiles => {\r\n                                    document.getElementById(\"demo1\").style.border = \"4px dotted green\";\r\n                                    handleAcceptedFiles(acceptedFiles)\r\n                                }}\r\n                            >\r\n                                {({ getRootProps, getInputProps }) => (\r\n                                    <div id='demo1' className=\"dropzone\">\r\n                                        <div\r\n                                            className=\"dz-message needsclick mt-2\"\r\n                                            {...getRootProps()}\r\n                                        >\r\n                                            <input {...getInputProps()} />\r\n                                            <div className=\"mb-3\">\r\n                                                <i className=\"display-4 text-muted bx bxs-cloud-upload\" />\r\n                                            </div>\r\n                                            <h4>Drop files here or click to upload.</h4>\r\n                                        </div>\r\n                                    </div>\r\n                                )}\r\n                            </Dropzone>\r\n\r\n                            <div className=\"dropzone-previews mt-3\" id=\"file-previews\">\r\n                                {selectedFiles.map((f, i) => {\r\n                                    return (\r\n                                        <Card\r\n                                            className=\"mt-1 mb-0 shadow-none border dz-processing dz-image-preview dz-success dz-complete\"\r\n                                            key={i + \"-file\"}\r\n                                        >\r\n                                            <div className=\"p-2 d-flex justify-containt-space-between\">\r\n\r\n                                                <Row className=\"align-items-center\">\r\n                                                    <Col className=\"col-auto\">\r\n                                                        <img\r\n                                                            data-dz-thumbnail=\"\"\r\n                                                            height=\"80\"\r\n                                                            className=\"avatar-sm rounded bg-light\"\r\n                                                            alt={f.name}\r\n                                                            src={f.preview}\r\n                                                        />\r\n                                                    </Col>\r\n                                                    <Col>\r\n                                                        <Link\r\n                                                            to=\"#\"\r\n                                                            className=\"text-muted font-weight-bold\"\r\n                                                        >\r\n                                                            {f.name}\r\n                                                        </Link>\r\n                                                        <p className=\"mb-0\">\r\n                                                            <strong>{f.formattedSize}</strong>\r\n                                                        </p>\r\n                                                    </Col>\r\n                                                </Row>\r\n                                            </div>\r\n\r\n                                        </Card>\r\n                                    )\r\n                                })}\r\n                                {preViewDivShow &&\r\n                                    <Card style={{ borderTop: \"0px\" }}>\r\n                                        <div id=\"filedetail\">\r\n\r\n                                            <details>\r\n                                                <summary>No. of Invoice: {readJsonDetail.invoice.size}</summary>\r\n                                                <div className=\"error-msg\">\r\n                                                    <p>\r\n                                                        {readJsonDetail.invoiceNO.map(i => (<Label>{i} ,&#160;</Label>))}\r\n                                                    </p>\r\n                                                </div>\r\n\r\n                                            </details>\r\n\r\n                                            <details>\r\n                                                <summary>No. of Party :{readJsonDetail.partyNO.length}</summary>\r\n                                                <div className=\"error-msg\">\r\n                                                    <p>\r\n                                                        {readJsonDetail.partyNO.map(i => (<Label>{i} ,&#160;</Label>))}\r\n                                                    </p>\r\n                                                </div>\r\n                                            </details>\r\n\r\n                                            <details>\r\n                                                <summary>No. of Dates :{readJsonDetail.invoiceDate.length}</summary>\r\n                                                <div className=\"error-msg\">\r\n                                                    <p>\r\n                                                        {readJsonDetail.invoiceDate.map(i => (<Label>{i} ,&#160;</Label>))}\r\n                                                    </p>\r\n                                                </div>\r\n                                            </details>\r\n\r\n                                            <details>\r\n                                                <summary>Total Amount :{readJsonDetail.amount}</summary>\r\n                                            </details>\r\n\r\n                                        </div>\r\n                                    </Card>\r\n                                }\r\n                            </div>\r\n\r\n\r\n                        </div>\r\n\r\n                        <div className=\"text- mt-4\" >\r\n                            {preViewDivShow ?\r\n\r\n                                <C_Button\r\n                                    type=\"button\"\r\n                                    id='btn-uploadBtnFunc'\r\n                                    className=\"btn btn-success\"\r\n                                    loading={saveBtnLoading}\r\n                                    onClick={uploadSaveHandler}\r\n                                >\r\n                                    Upload Files\r\n                                </C_Button>\r\n                                :\r\n                                <C_Button\r\n                                    type=\"button\"\r\n                                    id='btn-verify'\r\n                                    loading={saveBtnLoading}\r\n                                    className=\"btn btn-primary\"\r\n                                    onClick={veifyExcelBtn_Handler}\r\n                                >\r\n                                    Verify Files\r\n                                </C_Button>\r\n\r\n                            }\r\n                        </div>\r\n\r\n                    </div>\r\n\r\n                </form>\r\n\r\n\r\n            </React.Fragment >\r\n        );\r\n    }\r\n    else {\r\n        return (\r\n            <React.Fragment></React.Fragment>\r\n        )\r\n    }\r\n};\r\n\r\nexport default InvoiceExcelUpload\r\n\r\n\r\n\r\n\r\n\r\n\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\components\\Common\\PartyDropdown.js",["4035","4036","4037"],"import React, { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Col, FormGroup, Label } from \"reactstrap\";\r\nimport { C_Button } from \"./CommonButton\";\r\nimport { C_Select } from \"../../CustomValidateForm\";\r\nimport { CommonConsole, loginUserAdminRole } from \"./CommonFunction\";\r\nimport { customAlert } from \"../../CustomAlert/ConfirmDialog\";\r\nimport { commonPartyDropSelectAction } from \"../../store/Utilites/PartyDrodown/action\";\r\nimport { mode } from \"../../routes\";\r\n\r\nconst initialLocalStorageParty = () => {\r\n    try {\r\n        let party = JSON.parse(localStorage.getItem(\"selectedParty\"));\r\n        if (party.value === 0) {\r\n            return { value: 0, label: \"Select...\" }\r\n        }\r\n        return party\r\n    } catch (w) { CommonConsole(w) }\r\n    return { value: 0, label: \"Select...\" }\r\n}\r\n\r\nconst PartyDropdown = ({ goButtonHandler, changeButtonHandler, goBtnLoading, SAPLedgerOptions, pageMode }) => {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const [selectedParty, setSelectedParty] = useState(initialLocalStorageParty);\r\n    const [changeButtonShow, setChangeButtonShow] = useState(() => !(initialLocalStorageParty().value === 0));\r\n\r\n    const { partyList, partyDropdownLoading } = useSelector((state) => ({\r\n        partyList: state.CommonPartyDropdownReducer.commonPartyDropdown,\r\n        partyDropdownLoading: state.CommonPartyDropdownReducer.partyDropdownLoading,\r\n    }));\r\n\r\n    const updateSelectedParty = (newValue) => {\r\n        setSelectedParty(newValue);\r\n    };\r\n\r\n    useEffect(() => {\r\n\r\n        let party = JSON.parse(localStorage.getItem(\"selectedParty\"));\r\n        if (party.value === 0) {\r\n            setSelectedParty({ value: 0, label: \"Select...\", SAPPartyCode: \"\" })\r\n            setChangeButtonShow(false)\r\n        }\r\n    }, []);\r\n\r\n    const internalGoBtnHandler = async () => {\r\n        if (selectedParty.value === 0) {\r\n            customAlert({ Type: 3, Message: \"Please Select Party\" });\r\n            return;\r\n        }\r\n        dispatch(commonPartyDropSelectAction(selectedParty))  // new common party dropdown set\r\n        localStorage.setItem(\"selectedParty\", JSON.stringify(selectedParty));\r\n        if (goButtonHandler) {\r\n            await goButtonHandler();\r\n        }\r\n        setChangeButtonShow(true)\r\n    }\r\n\r\n    const internalChangeBtnHandler = () => {\r\n        if (changeButtonHandler) {\r\n            changeButtonHandler();\r\n        }\r\n        dispatch(commonPartyDropSelectAction({ value: 0, label: \"select...\", SAPPartyCode: \"\" }))// new common party dropdown set\r\n        localStorage.setItem(\"selectedParty\", JSON.stringify({ value: 0 }));\r\n        setSelectedParty({ value: 0, label: \"Select...\", SAPPartyCode: \"\" })\r\n        setChangeButtonShow(false)\r\n    };\r\n\r\n    const PartyDropdownOptions = partyList.map((data) => ({\r\n        value: data.id,\r\n        label: data.Name,\r\n        SAPPartyCode: data.SAPPartyCode\r\n    }))\r\n\r\n    return (\r\n        loginUserAdminRole() && (\r\n            <div className=\"px-2 c_card_header text-black mb-1\">\r\n                <div className=\"row pt-2\">\r\n                    <Col sm=\"5\">\r\n                        <FormGroup className=\"row\">\r\n                            <Label className=\"col-sm-5 p-2\" style={{ width: \"83px\" }}>\r\n                                Party\r\n                            </Label>\r\n                            <Col sm=\"6\">\r\n                                <C_Select\r\n                                    value={selectedParty}\r\n                                    styles={{ menu: (provided) => ({ ...provided, zIndex: 2 }) }}\r\n                                    isSearchable={true}\r\n                                    isLoading={partyDropdownLoading}\r\n                                    className=\"react-dropdown\"\r\n                                    classNamePrefix=\"dropdown\"\r\n                                    options={(SAPLedgerOptions === undefined) ? PartyDropdownOptions : SAPLedgerOptions}\r\n                                    isDisabled={(changeButtonShow && !(selectedParty.value === 0))}\r\n                                    onChange={(e) => updateSelectedParty(e)}\r\n                                />\r\n                            </Col>\r\n                        </FormGroup>\r\n                    </Col>\r\n\r\n                    <Col sm=\"1\">\r\n                        {(!(changeButtonShow)) ? (\r\n                            <C_Button\r\n                                type=\"button\"\r\n                                className=\"btn btn-outline-primary border-1 font-size-12 text-center\"\r\n                                onClick={internalGoBtnHandler}\r\n                            >\r\n                                Select\r\n                            </C_Button>\r\n                        ) : !(pageMode === mode.view || pageMode === mode.edit) && (\r\n                            <C_Button\r\n                                type=\"button\"\r\n                                spinnerColor={\"info\"}\r\n                                className=\"btn btn-outline-info border-1 font-size-12 \"\r\n                                onClick={internalChangeBtnHandler}\r\n                                loading={goBtnLoading}\r\n                            // forceDisabled={pageMode === mode.view || pageMode === mode.edit}\r\n                            >Change</C_Button>\r\n                        )}\r\n                    </Col>\r\n\r\n                </div>\r\n            </div>\r\n        )\r\n    );\r\n};\r\n\r\nexport default PartyDropdown;","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\ImportMaster\\RetailerExcelUpload\\readFile.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\ImportMaster\\InvoiceExcelUpload\\readFile.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\ImportExcelPartyMapRedux\\saga.js",["4038","4039"],"import { call, put, takeEvery } from \"redux-saga/effects\";\r\nimport {\r\n  InvoiceExcelUpload_save_Success,\r\n  GoButton_ImportExcelPartyMap_Success,\r\n  save_ImportExcelPartyMap_Sucess,\r\n  PartyExcelUpload_save_Success,\r\n  RetailerExcelUpload_save_action_Success,\r\n  RetailerExcelUploadApiErrorAction\r\n} from \"./action\";\r\nimport {\r\n  ExcelUpload_Invoice_Save_API,\r\n  ExcelUpload_Retailer_Save_API,\r\n  ImportMaster_Map_Customer_GoButton_API,\r\n  ImportMaster_Map_Customer_Save_API,\r\n  ImportMaster_Map_Item_GoButton_API,\r\n  ImportMaster_Map_Item_Save_API,\r\n  ImportMaster_Map_Unit_GoButton_API,\r\n  ImportMaster_Map_Unit_Save_API,\r\n} from \"../../../helpers/backend_helper\";\r\nimport {\r\n  INVOICE_EXCEL_UPLOAD_SAVE,\r\n  GO_BUTTON_IMPORT_EXCEL_PARTY_MAP,\r\n  SAVE_IMPORT_EXCEL_PARTY_MAP,\r\n  RETAILER_EXCEL_UPLOAD_SAVE,\r\n} from \"./actionType\";\r\nimport { CommonConsole } from \"../../../components/Common/CommonFunction\";\r\n\r\n\r\nfunction* GoButtonExcel_ImportMaster_GenFun({ config }) {              // Go buuton add Page API\r\n\r\n  const { mapType, partyId } = config\r\n\r\n  try {\r\n    let newResp = []\r\n    if (mapType === 1) {\r\n      const response = yield call(ImportMaster_Map_Customer_GoButton_API, config);\r\n      newResp = response.Data.map(i => ({\r\n        \"id\": i.id,\r\n        \"party\": !(i.Party_id === null) ? i.Party_id : partyId,\r\n        \"fieldName\": i.CustomerName,\r\n        \"fieldId\": i.Customer,\r\n        \"mapValue\": i.MapCustomer,\r\n      }))\r\n\r\n    } else if (mapType === 2) {\r\n      const response = yield call(ImportMaster_Map_Item_GoButton_API, config);\r\n      newResp = response.Data.map(i => ({\r\n        \"id\": i.id,\r\n        \"party\": !(i.Party_id === null) ? i.Party_id : partyId,\r\n        \"fieldName\": i.Name,\r\n        \"fieldId\": i.Item_id,\r\n        \"mapValue\": i.MapItem,\r\n      }))\r\n    } else {\r\n      const response = yield call(ImportMaster_Map_Unit_GoButton_API, config);\r\n\r\n      newResp = response.Data.map(i => ({\r\n        \"id\": i.id,\r\n        \"party\": !(i.Party_id === null) ? i.Party_id : partyId,\r\n        \"fieldName\": i.Name,\r\n        \"fieldId\": i.id,\r\n        \"mapValue\": i.MapUnit,\r\n      }))\r\n    }\r\n\r\n    yield put(GoButton_ImportExcelPartyMap_Success(newResp));\r\n\r\n  } catch (error) { yield put(RetailerExcelUploadApiErrorAction()) }\r\n}\r\n\r\nfunction* Save_Method_ForExcel_ImportMaster_GenFun({ config }) {  // Save API\r\n  const { mapType } = config\r\n  try {\r\n    if (mapType === 1) {\r\n      const response = yield call(ImportMaster_Map_Customer_Save_API, config);\r\n      yield put(save_ImportExcelPartyMap_Sucess(response));\r\n    }\r\n    else if (mapType === 2) {\r\n      const response = yield call(ImportMaster_Map_Item_Save_API, config);\r\n      yield put(save_ImportExcelPartyMap_Sucess(response));\r\n    }\r\n    else {\r\n      const response = yield call(ImportMaster_Map_Unit_Save_API, config);\r\n      yield put(save_ImportExcelPartyMap_Sucess(response));\r\n    }\r\n\r\n  } catch (error) { yield put(RetailerExcelUploadApiErrorAction()) }\r\n}\r\n\r\nfunction* InvoiceExcelUpload_save_GenFun({ config }) {  // Save API\r\n\r\n  try {\r\n    const response = yield call(ExcelUpload_Invoice_Save_API, config);\r\n    yield put(InvoiceExcelUpload_save_Success(response));\r\n\r\n  } catch (error) { yield put(RetailerExcelUploadApiErrorAction()) }\r\n}\r\n\r\nfunction* RetailerExcelUpload_save_GenFun({ config }) {  // Save API\r\n\r\n  try {\r\n    const response = yield call(ExcelUpload_Retailer_Save_API, config);\r\n    yield put(RetailerExcelUpload_save_action_Success(response));\r\n\r\n  } catch (error) { yield put(RetailerExcelUploadApiErrorAction()) }\r\n}\r\n\r\nfunction* ImportExcelPartyMap_Saga() {\r\n  yield takeEvery(GO_BUTTON_IMPORT_EXCEL_PARTY_MAP, GoButtonExcel_ImportMaster_GenFun)\r\n  yield takeEvery(SAVE_IMPORT_EXCEL_PARTY_MAP, Save_Method_ForExcel_ImportMaster_GenFun)\r\n  yield takeEvery(INVOICE_EXCEL_UPLOAD_SAVE, InvoiceExcelUpload_save_GenFun)\r\n  yield takeEvery(RETAILER_EXCEL_UPLOAD_SAVE, RetailerExcelUpload_save_GenFun)\r\n}\r\n\r\nexport default ImportExcelPartyMap_Saga;","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\ImportExcelPartyMapRedux\\reducer.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\ImportMaster\\ImportExcelFieldMap\\Index.js",["4040","4041","4042","4043","4044","4045","4046","4047","4048","4049","4050","4051","4052"],"import React, { useEffect, useState } from \"react\";\r\nimport {\r\n    Col,\r\n    FormGroup,\r\n    Input,\r\n    Label,\r\n} from \"reactstrap\";\r\nimport Select from \"react-select\";\r\nimport { MetaTags } from \"react-meta-tags\";\r\nimport {\r\n    BreadcrumbShowCountlabel,\r\n    commonPageField,\r\n    commonPageFieldSuccess\r\n} from \"../../../../store/actions\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { mySearchProps } from \"../../../../components/Common/SearchBox/MySearch\";\r\nimport * as pageId from \"../../../../routes/allPageID\";\r\nimport * as mode from \"../../../../routes/PageMode\";\r\nimport { Change_Button, Go_Button, PageLoadingSpinner, SaveButton } from \"../../../../components/Common/CommonButton\";\r\nimport * as _cfunc from \"../../../../components/Common/CommonFunction\";\r\nimport { comAddPageFieldFunc, initialFiledFunc, } from \"../../../../components/Common/validationFunction\";\r\nimport { getPartyListAPI } from \"../../../../store/Administrator/PartyRedux/action\";\r\nimport ToolkitProvider from \"react-bootstrap-table2-toolkit\";\r\nimport BootstrapTable from \"react-bootstrap-table-next\";\r\n// import { GoButton_ImportFiledMap_Add, GoButton_ImportFiledMap_AddSuccess, save_ImportFiledMap, save_ImportFiledMap_Success } from \"../../../../store/Administrator/ImportExportFieldMapRedux/action\";\r\nimport {\r\n    GoButton_ImportFiledMap_Add,\r\n    GoButton_ImportFiledMap_AddSuccess,\r\n    save_ImportFiledMap,\r\n    save_ImportFiledMap_Success\r\n} from \"../../../../store/Administrator/ImportExportFieldMapRedux/action\";\r\nimport { customAlert } from \"../../../../CustomAlert/ConfirmDialog\";\r\nimport PartyDropdown_Common from \"../../../../components/Common/PartyDropdown\";\r\nimport { C_Select } from \"../../../../CustomValidateForm\";\r\n\r\nconst ImportExcelFieldMap = (props) => {\r\n\r\n    const dispatch = useDispatch();\r\n    const history = useHistory()\r\n    const userAdminRole = _cfunc.loginUserAdminRole();\r\n\r\n    const [pageMode, setPageMode] = useState(mode.defaultsave);\r\n    const [userPageAccessState, setUserAccState] = useState('');\r\n    const [partySelect, SetPartySelect] = useState(\"\")\r\n\r\n    const fileds = {\r\n        id: \"\",\r\n        Party: \"\",\r\n        ImportType: \"\",\r\n        PatternType: \"\"\r\n    }\r\n\r\n    const [state, setState] = useState(initialFiledFunc(fileds))\r\n\r\n    //Access redux store Data /  'save_ModuleSuccess' action data\r\n    const {\r\n        postMsg,\r\n        pageField,\r\n        userAccess,\r\n        goButtonItem,\r\n        goBtnLoading,\r\n        partyDropDownLoading,\r\n        partyList,\r\n        saveBtnLoading\r\n    } = useSelector((state) => ({\r\n        postMsg: state.ImportExportFieldMap_Reducer.postMsg,\r\n\r\n        saveBtnLoading: state.ImportExportFieldMap_Reducer.saveBtnLoading,\r\n        goBtnLoading: state.ImportExportFieldMap_Reducer.goBtnLoading,\r\n\r\n        userAccess: state.Login.RoleAccessUpdateData,\r\n        pageField: state.CommonPageFieldReducer.pageField,\r\n        goButtonItem: state.ImportExportFieldMap_Reducer.addGoButton,\r\n\r\n        partyList: state.PartyMasterReducer.partyList,\r\n        partyDropDownLoading: state.PartyMasterReducer.goBtnLoading,\r\n\r\n    }));\r\n\r\n    useEffect(() => {\r\n        const page_Id = pageId.IMPORT_EXCEL_FIELD_MAP\r\n        dispatch(commonPageFieldSuccess(null));\r\n        dispatch(commonPageField(page_Id))\r\n        dispatch(getPartyListAPI());\r\n        dispatch(GoButton_ImportFiledMap_AddSuccess([]));\r\n        if (!userAdminRole) { goButtonHandler() }\r\n    }, []);\r\n\r\n    const location = { ...history.location }\r\n    const hasShowloction = location.hasOwnProperty(mode.editValue)\r\n    const hasShowModal = props.hasOwnProperty(mode.editValue)\r\n\r\n\r\n    // userAccess useEffect\r\n    useEffect(() => {\r\n        let userAcc = null;\r\n        let locationPath = location.pathname;\r\n        if (hasShowModal) {\r\n            locationPath = props.masterPath;\r\n        };\r\n        userAcc = userAccess.find((inx) => {\r\n            return (`/${inx.ActualPagePath}` === locationPath)\r\n        })\r\n        if (userAcc) {\r\n            setUserAccState(userAcc)\r\n            _cfunc.breadcrumbReturnFunc({ dispatch, userAcc });\r\n        };\r\n    }, [userAccess])\r\n\r\n    useEffect(() => {\r\n        if (pageField) {\r\n            const fieldArr = pageField.PageFieldMaster\r\n            comAddPageFieldFunc({ state, setState, fieldArr })\r\n        }\r\n    }, [pageField])\r\n\r\n    useEffect(async () => {\r\n\r\n        if ((postMsg.Status === true) && (postMsg.StatusCode === 200)) {\r\n            dispatch(save_ImportFiledMap_Success({ Status: false }))\r\n            customAlert({\r\n                Type: 1,\r\n                Message: postMsg.Message,\r\n            })\r\n\r\n\r\n        }\r\n        else if (postMsg.Status === true) {\r\n            dispatch(save_ImportFiledMap_Success({ Status: false }))\r\n            customAlert({\r\n                Type: 4,\r\n                Message: JSON.stringify(postMsg.Message),\r\n            })\r\n        }\r\n    }, [postMsg])\r\n\r\n\r\n    useEffect(() => {\r\n        dispatch(BreadcrumbShowCountlabel(`${\"Count\"} :${goButtonItem.length}`))\r\n    }, [goButtonItem])\r\n\r\n    useEffect(() => _cfunc.tableInputArrowUpDounFunc(\"#table_Arrow\"), [goButtonItem]);\r\n\r\n\r\n    const pagesListColumns = [\r\n        {\r\n            text: \"Field Name\",\r\n            dataField: \"FieldName\",\r\n        },\r\n        {\r\n            text: \"Data Type\",\r\n            dataField: \"ControlTypeName\",\r\n        },\r\n        {\r\n            text: \"Field Validation\",\r\n            dataField: \"FieldValidationName\",\r\n        },\r\n        {\r\n            text: \"Related Key Field\",\r\n            dataField: \"Value\",\r\n            formatter: (cellContent, row) => (\r\n                <>\r\n                    <div style={{ justifyContent: 'center' }} >\r\n                        <Col>\r\n                            <FormGroup className=\" col col-sm-4 \">\r\n                                <Input\r\n                                    type=\"text\"\r\n                                    key={`Value-${row.id}`}\r\n                                    defaultValue={cellContent}\r\n                                    onChange={(e) => row.Value = e.target.value}\r\n                                />\r\n                            </FormGroup>\r\n                        </Col>\r\n                    </div>\r\n\r\n                </>\r\n            ),\r\n        },\r\n\r\n    ];\r\n\r\n    async function goButtonHandler() {\r\n\r\n        let partyId = !userAdminRole ? _cfunc.loginPartyID() : partySelect.value;\r\n        const jsonBody = JSON.stringify({\r\n            PartyID: partyId,\r\n            CompanyID: _cfunc.loginCompanyID()\r\n        })\r\n        dispatch(GoButton_ImportFiledMap_Add({ jsonBody }))\r\n    };\r\n\r\n    function change_ButtonHandler(e) {\r\n        dispatch(GoButton_ImportFiledMap_AddSuccess([]))\r\n    }\r\n\r\n    function SaveHandler(event) {\r\n        event.preventDefault();\r\n\r\n        let jsonArr = []\r\n        const invalid = []\r\n        let partyId = ((_cfunc.loginIsSCMCompany() === 1)) ? _cfunc.loginPartyID() : partySelect.value;\r\n        goButtonItem.forEach(i => {\r\n\r\n            if ((((i.Value === '') || (i.Value === null)) && (i.IsCompulsory === true))) {\r\n                invalid.push({ [i.FieldName]: \"this filed Requird.\" })\r\n            }\r\n            if ((!(i.Value === '') && !(i.Value === null))) {\r\n                const obj = {\r\n                    Value: i.Value,\r\n                    ImportField: i.id,\r\n                    Party: partyId,\r\n                    Company: _cfunc.loginCompanyID(),\r\n                    CreatedBy: _cfunc.loginUserID(),\r\n                    UpdatedBy: _cfunc.loginUserID(),\r\n                }\r\n                jsonArr.push(obj)\r\n            }\r\n        })\r\n\r\n        if (invalid.length > 0) {\r\n            customAlert({ Type: 3, Message: invalid })\r\n            return\r\n        } else {\r\n            const jsonBody = JSON.stringify(jsonArr);\r\n            dispatch(save_ImportFiledMap({ jsonBody }));\r\n        }\r\n    };\r\n\r\n    if (!(userPageAccessState === '')) {\r\n        return (\r\n            <React.Fragment>\r\n                <MetaTags>{_cfunc.metaTagLabel(userPageAccessState)}</MetaTags>\r\n                <PageLoadingSpinner isLoading={((partyDropDownLoading && (userAdminRole)) || !pageField)} />\r\n\r\n\r\n                <div className=\"page-content\">\r\n                    {userAdminRole &&\r\n                        // <PartyDropdown_Common pageMode={pageMode}\r\n                        //     partySelect={partySelect}\r\n                        //     setPartyFunc={partyOnChngeHandler}\r\n                        //     goButtonHandler={goButtonHandler}\r\n                        //     changeBtnShow={!(goButtonItem.length === 0)}\r\n                        //     change_ButtonHandler={change_ButtonHandler}\r\n                        // />\r\n                        <div className=\"px-2   c_card_filter text-black\" >\r\n                            <div className=\"row pt-2\">\r\n                                <Col sm=\"5\">\r\n                                    <FormGroup className=\"row px-1\">\r\n                                        <Label className=\"col-sm-5 p-2\" style={{ width: \"83px\" }}>\r\n                                            Party\r\n                                        </Label>\r\n                                        <Col sm=\"6\">\r\n                                            <C_Select\r\n                                                value={partySelect}\r\n                                                isSearchable={true}\r\n                                                isLoading={partyDropDownLoading}\r\n                                                className=\"react-dropdown\"\r\n                                                classNamePrefix=\"dropdown\"\r\n                                                options={partyList.map((data) => ({\r\n                                                    value: data.id,\r\n                                                    label: data.Name,\r\n                                                }))}\r\n\r\n                                                onChange={(e) => { SetPartySelect(e) }}\r\n                                                styles={{ menu: (provided) => ({ ...provided, zIndex: 2 }) }}\r\n                                            />\r\n                                        </Col>\r\n                                    </FormGroup>\r\n                                </Col>\r\n                                <Col sm=\"1\" className=\"mb-1\">\r\n                                    {(goButtonItem.length === 0) ?\r\n                                        <Go_Button\r\n                                            loading={goBtnLoading}\r\n                                            onClick={goButtonHandler} />\r\n                                        :\r\n                                        <Change_Button onClick={change_ButtonHandler} />\r\n                                    }\r\n                                </Col>\r\n                            </div>\r\n                        </div>\r\n                    }\r\n                    <div >\r\n                        <ToolkitProvider\r\n                            keyField=\"id\"\r\n                            data={goButtonItem}\r\n                            columns={pagesListColumns}\r\n                            search\r\n                        >\r\n                            {toolkitProps => (\r\n                                <React.Fragment>\r\n                                    <div className=\"table mt-1\">\r\n                                        <BootstrapTable\r\n                                            bordered={true}\r\n                                            striped={false}\r\n                                            id=\"table_Arrow\"\r\n                                            noDataIndication={<div className=\"text-danger text-center \">Items Not available</div>}\r\n                                            classes={\"table align-middle  table-hover\"}\r\n                                            headerWrapperClasses={\"thead-light\"}\r\n\r\n                                            {...toolkitProps.baseProps}\r\n                                        />\r\n                                        {mySearchProps(toolkitProps.searchProps)}\r\n                                    </div>\r\n                                </React.Fragment>\r\n                            )\r\n                            }\r\n                        </ToolkitProvider>\r\n                    </div>\r\n                </div>\r\n\r\n                <FormGroup>\r\n                    <Col sm={2} style={{ marginLeft: \"-40px\" }} className={\"row save1\"}>\r\n                        {(goButtonItem.length > 0) &&\r\n                            <SaveButton\r\n                                pageMode={pageMode}\r\n                                loading={saveBtnLoading}\r\n                                userAcc={userPageAccessState}\r\n                                onClick={SaveHandler}\r\n                            />}\r\n                    </Col>\r\n                </FormGroup >\r\n\r\n            </React.Fragment>\r\n        );\r\n    }\r\n    else {\r\n        return (\r\n            <React.Fragment></React.Fragment>\r\n        )\r\n    }\r\n};\r\n\r\nexport default ImportExcelFieldMap\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\ImportMaster\\ImportExcelPartyMap\\Index.js",["4053","4054","4055","4056","4057","4058","4059","4060","4061","4062","4063","4064","4065","4066","4067"],"import React, { useEffect, useState } from \"react\";\r\nimport {\r\n    Col,\r\n    FormGroup,\r\n    Input,\r\n    Label,\r\n} from \"reactstrap\";\r\nimport Select from \"react-select\";\r\nimport { MetaTags } from \"react-meta-tags\";\r\nimport { BreadcrumbShowCountlabel, commonPageField, commonPageFieldSuccess, } from \"../../../../store/actions\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { mySearchProps } from \"../../../../components/Common/SearchBox/MySearch\";\r\nimport * as pageId from \"../../../../routes/allPageID\";\r\nimport * as mode from \"../../../../routes/PageMode\";\r\nimport { Change_Button, Go_Button, PageLoadingSpinner, SaveButton } from \"../../../../components/Common/CommonButton\";\r\nimport {\r\n    breadcrumbReturnFunc,\r\n    btnIsDissablefunc,\r\n    loginIsSCMCompany,\r\n    loginPartyID,\r\n    loginUserID,\r\n    metaTagLabel\r\n} from \"../../../../components/Common/CommonFunction\";\r\nimport {\r\n    comAddPageFieldFunc,\r\n    initialFiledFunc,\r\n    onChangeSelect,\r\n} from \"../../../../components/Common/validationFunction\";\r\nimport { getPartyListAPI, getPartyListAPISuccess } from \"../../../../store/Administrator/PartyRedux/action\";\r\nimport ToolkitProvider from \"react-bootstrap-table2-toolkit\";\r\nimport BootstrapTable from \"react-bootstrap-table-next\";\r\nimport { customAlert } from \"../../../../CustomAlert/ConfirmDialog\";\r\nimport {\r\n    GoButton_ImportExcelPartyMap,\r\n    GoButton_ImportExcelPartyMap_Success,\r\n    save_ImportExcelPartyMap,\r\n    save_ImportExcelPartyMap_Sucess\r\n} from \"../../../../store/Administrator/ImportExcelPartyMapRedux/action\";\r\nimport * as _cfunc from \"../../../../components/Common/CommonFunction\";\r\n\r\nconst ImportExcelPartyMap = (props) => {\r\n\r\n    const dispatch = useDispatch();\r\n    const history = useHistory()\r\n\r\n    const [pageMode, setPageMode] = useState(mode.defaultsave);\r\n    const [userPageAccessState, setUserAccState] = useState('');\r\n    const [mapTypeSelect, SetMapTypeSelect] = useState(\"\")\r\n    const [partySelect, SetPartySelect] = useState(\"\")\r\n\r\n    const fileds = {\r\n        Party: \"\",\r\n        MapType: \"\",\r\n    }\r\n\r\n    const [state, setState] = useState(initialFiledFunc(fileds))\r\n\r\n    //Access redux store Data /  'save_ModuleSuccess' action data\r\n    const {\r\n        postMsg,\r\n        updateMsg,\r\n        pageField,\r\n        userAccess,\r\n        goButtonArr,\r\n        partyList,\r\n        listBtnLoading,\r\n        saveBtnloading,\r\n        partyDropDownLoading\r\n    } = useSelector((state) => ({\r\n        saveBtnloading: state.GroupReducer.saveBtnloading,\r\n        listBtnLoading: state.ImportExcelPartyMap_Reducer.listBtnLoading,\r\n        postMsg: state.ImportExcelPartyMap_Reducer.postMsg,\r\n        updateMsg: state.BOMReducer.updateMsg,\r\n        userAccess: state.Login.RoleAccessUpdateData,\r\n        pageField: state.CommonPageFieldReducer.pageField,\r\n        goButtonArr: state.ImportExcelPartyMap_Reducer.addGoButton,\r\n        partyList: state.PartyMasterReducer.partyList,\r\n        partyDropDownLoading: state.PartyMasterReducer.goBtnLoading,\r\n    }));\r\n    useEffect(() => {\r\n        const page_Id = pageId.IMPORT_MASTER_MAP\r\n        dispatch(commonPageFieldSuccess(null));\r\n        dispatch(commonPageField(page_Id))\r\n        dispatch(getPartyListAPI());\r\n        dispatch(GoButton_ImportExcelPartyMap_Success([]));\r\n        return () => {\r\n            dispatch(getPartyListAPISuccess([]))\r\n            dispatch(GoButton_ImportExcelPartyMap_Success([]));\r\n            dispatch(commonPageFieldSuccess(null));\r\n        }\r\n\r\n    }, []);\r\n\r\n    const location = { ...history.location }\r\n    const hasShowloction = location.hasOwnProperty(mode.editValue)\r\n    const hasShowModal = props.hasOwnProperty(mode.editValue)\r\n\r\n    const values = { ...state.values }\r\n    const { isError } = state;\r\n    const { fieldLabel } = state;\r\n    // userAccess useEffect\r\n    useEffect(() => {\r\n        let userAcc = null;\r\n        let locationPath = location.pathname;\r\n        if (hasShowModal) {\r\n            locationPath = props.masterPath;\r\n        };\r\n        userAcc = userAccess.find((inx) => {\r\n            return (`/${inx.ActualPagePath}` === locationPath)\r\n        })\r\n        if (userAcc) {\r\n            setUserAccState(userAcc)\r\n            breadcrumbReturnFunc({ dispatch, userAcc });\r\n        };\r\n    }, [userAccess])\r\n\r\n    useEffect(() => {\r\n        if (pageField) {\r\n            const fieldArr = pageField.PageFieldMaster\r\n            comAddPageFieldFunc({ state, setState, fieldArr })\r\n        }\r\n    }, [pageField])\r\n\r\n\r\n    useEffect(() => {\r\n        dispatch(BreadcrumbShowCountlabel(`${\"Count\"} :${goButtonArr.length}`))\r\n    }, [goButtonArr])\r\n\r\n    useEffect(async () => {\r\n\r\n        if ((postMsg.Status === true) && (postMsg.StatusCode === 200)) {\r\n            dispatch(save_ImportExcelPartyMap_Sucess({ Status: false }))\r\n            customAlert({\r\n                Type: 1,\r\n                Message: postMsg.Message,\r\n            })\r\n        }\r\n        else if (postMsg.Status === true) {\r\n            dispatch(save_ImportExcelPartyMap_Sucess({ Status: false }))\r\n            customAlert({\r\n                Type: 4,\r\n                Message: JSON.stringify(postMsg.Message),\r\n            })\r\n        }\r\n    }, [postMsg])\r\n\r\n    useEffect(() => _cfunc.tableInputArrowUpDounFunc(\"#table_Arrow\"), [goButtonArr]);\r\n\r\n    const partyDropdown_Options = partyList.map((index) => ({\r\n        value: index.id,\r\n        label: index.Name,\r\n    }));\r\n\r\n    const mapTypeDropdown_Options = [{\r\n        value: 1,\r\n        label: \"Party\",\r\n    },\r\n    {\r\n        value: 2,\r\n        label: \"Item\",\r\n    },\r\n    {\r\n        value: 3,\r\n        label: \"Unit\",\r\n    }]\r\n\r\n\r\n    const pagesListColumns = [\r\n        {\r\n            text: \"Field Name\",\r\n            dataField: \"fieldName\",\r\n        },\r\n        {\r\n            text: \"Related Key Field\",\r\n            dataField: \"mapValue\",\r\n            formatter: (cellContent, row) => (\r\n                <>\r\n                    <div style={{ justifyContent: 'center' }} >\r\n                        <Col>\r\n                            <FormGroup className=\" col col-sm-4 \">\r\n                                <Input\r\n                                    type=\"text\"\r\n                                    key={`mapValue-${row.id}`}\r\n                                    defaultValue={cellContent}\r\n                                    onChange={(e) => row.mapValue = e.target.value}\r\n                                />\r\n                            </FormGroup>\r\n                        </Col>\r\n                    </div>\r\n                </>\r\n            ),\r\n        },\r\n    ];\r\n\r\n    async function goButtonHandler(event) {\r\n        event.preventDefault();\r\n        const btnId = event.target.id\r\n        try {\r\n            btnIsDissablefunc({ btnId, state: true })\r\n            let partyId = (((loginIsSCMCompany()) === 1)) ? loginPartyID() : values.Party.value;\r\n            let mapType = values.MapType.value;\r\n\r\n            dispatch(GoButton_ImportExcelPartyMap({ partyId, mapType }))\r\n        } catch (error) { }\r\n    };\r\n\r\n    function change_ButtonHandler(e) {\r\n        dispatch(GoButton_ImportExcelPartyMap_Success([]))\r\n    }\r\n\r\n    async function SaveHandler(event) {\r\n        event.preventDefault();\r\n\r\n\r\n        async function funcForParty() {\r\n            let jsonArr = []\r\n            await goButtonArr.forEach(i => {\r\n                if ((!(i.mapValue === '') && !(i.mapValue === null))) {\r\n                    jsonArr.push({\r\n                        \"Party\": i.party,\r\n                        \"Customer\": i.fieldId,\r\n                        \"MapCustomer\": i.mapValue,\r\n                        \"CreatedBy\": loginUserID(),\r\n                        \"UpdatedBy\": loginUserID()\r\n                    })\r\n                }\r\n            })\r\n\r\n\r\n            return jsonArr\r\n        }\r\n\r\n        async function funcForItem() {\r\n            let jsonArr = []\r\n            await goButtonArr.forEach(i => {\r\n                if ((!(i.mapValue === '') && !(i.mapValue === null))) {\r\n                    jsonArr.push({\r\n                        \"Party\": i.party,\r\n                        \"Item\": i.fieldId,\r\n                        \"MapItem\": i.mapValue,\r\n                        \"CreatedBy\": loginUserID(),\r\n                        \"UpdatedBy\": loginUserID()\r\n                    })\r\n                }\r\n            })\r\n            return jsonArr\r\n\r\n        }\r\n\r\n\r\n        async function funcForUnit() {\r\n            let jsonArr = []\r\n            await goButtonArr.forEach(i => {\r\n                if ((!(i.mapValue === '') && !(i.mapValue === null))) {\r\n                    jsonArr.push({\r\n                        \"Party\": i.party,\r\n                        \"Unit\": i.fieldId,\r\n                        \"MapUnit\": i.mapValue,\r\n                        \"CreatedBy\": loginUserID(),\r\n                        \"UpdatedBy\": loginUserID()\r\n                    })\r\n                }\r\n            })\r\n            return jsonArr\r\n        }\r\n        let mapType = values.MapType.value;\r\n\r\n        const jsonBody = JSON.stringify(\r\n            (mapType === 1) ? await funcForParty() :\r\n                (mapType === 2) ? await funcForItem() : await funcForUnit());\r\n\r\n        dispatch(save_ImportExcelPartyMap({ jsonBody, mapType, }));\r\n\r\n    };\r\n\r\n    if (!(userPageAccessState === '')) {\r\n        return (\r\n            <React.Fragment>\r\n                <MetaTags>{metaTagLabel(userPageAccessState)}</MetaTags>\r\n                <PageLoadingSpinner isLoading={((partyDropDownLoading && !(loginIsSCMCompany() === 1)) || !pageField)} />\r\n\r\n                <div className=\"page-content\">\r\n                    <div className=\"px-2 c_card_header text-black\" >\r\n                        <div className=\"px-2   c_card_filter text-black\" >\r\n                            <form onSubmit={(event) => goButtonHandler(event)} noValidate>\r\n                                <div className=\"row\">\r\n                                    <Col sm=\"5\" style={{ display: (loginIsSCMCompany() === 1) ? \"none\" : \"block\" }}>\r\n                                        <FormGroup className=\"mb-2 row mt-3 \" >\r\n                                            <Label className=\" p-2\"\r\n                                                style={{ maxWidth: \"115px\" }}>{fieldLabel.Party}</Label>\r\n                                            <Col style={{ maxWidth: \"300px\" }} >\r\n                                                <Select\r\n                                                    name=\"Party\"\r\n                                                    value={values.Party}\r\n                                                    isSearchable={true}\r\n                                                    isDisabled={!(goButtonArr.length === 0) && true}\r\n                                                    className=\"react-dropdown\"\r\n                                                    classNamePrefix=\"dropdown\"\r\n                                                    styles={{\r\n                                                        menu: provided => ({ ...provided, zIndex: 2 })\r\n                                                    }}\r\n                                                    options={partyDropdown_Options}\r\n                                                    onChange={(hasSelect, evn) => onChangeSelect({ hasSelect, evn, state, setState, })}\r\n                                                />\r\n                                                {isError.Party.length > 0 && (\r\n                                                    <span className=\"text-danger f-8\"><small>{isError.Party}</small></span>\r\n                                                )}\r\n\r\n                                            </Col>\r\n                                        </FormGroup>\r\n                                    </Col >\r\n                                    <Col sm=\"5\">\r\n                                        <FormGroup className=\"mb-2 row mt-3 \" >\r\n                                            <Label className=\" p-2\"\r\n                                                style={{ maxWidth: \"115px\" }}>{fieldLabel.MapType}</Label>\r\n                                            <Col style={{ maxWidth: \"300px\" }} >\r\n                                                <Select\r\n                                                    name=\"MapType\"\r\n                                                    value={values.MapType}\r\n                                                    isSearchable={true}\r\n                                                    styles={{\r\n                                                        menu: provided => ({ ...provided, zIndex: 2 })\r\n                                                    }}\r\n                                                    isDisabled={(!(goButtonArr.length === 0) || (partyDropDownLoading && !(loginIsSCMCompany() === 1)))}\r\n                                                    className=\"react-dropdown\"\r\n                                                    classNamePrefix=\"dropdown\"\r\n                                                    options={mapTypeDropdown_Options}\r\n                                                    onChange={(hasSelect, evn) => onChangeSelect({ hasSelect, evn, state, setState, })}\r\n                                                />\r\n                                                {isError.MapType.length > 0 && (\r\n                                                    <span className=\"text-danger f-8\"><small>{isError.MapType}</small></span>\r\n                                                )}\r\n                                            </Col>\r\n                                        </FormGroup>\r\n                                    </Col>\r\n\r\n                                    <Col sm=\"2\" className=\"mt-3 \">\r\n                                        {(goButtonArr.length === 0) ?\r\n                                            <Go_Button\r\n                                                forceDisabled={(partyDropDownLoading && !(loginIsSCMCompany() === 1))}\r\n                                                onClick={goButtonHandler} loading={listBtnLoading} />\r\n                                            :\r\n                                            <Change_Button onClick={change_ButtonHandler} />\r\n                                        }\r\n                                    </Col>\r\n                                </div>\r\n                            </form>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"mt-1\">\r\n                        <ToolkitProvider\r\n                            keyField=\"id\"\r\n                            data={goButtonArr}\r\n                            columns={pagesListColumns}\r\n                            search\r\n                        >\r\n                            {toolkitProps => (\r\n                                <React.Fragment>\r\n                                    <div className=\"table\">\r\n                                        <BootstrapTable\r\n                                            bordered={true}\r\n                                            id=\"table_Arrow\"\r\n                                            striped={false}\r\n                                            noDataIndication={<div className=\"text-danger text-center \">Items Not available</div>}\r\n                                            classes={\"table align-middle  table-hover\"}\r\n                                            headerWrapperClasses={\"thead-light\"}\r\n                                            {...toolkitProps.baseProps}\r\n                                        />\r\n                                        {mySearchProps(toolkitProps.searchProps)}\r\n                                    </div>\r\n                                </React.Fragment>\r\n                            )\r\n                            }\r\n                        </ToolkitProvider>\r\n\r\n\r\n                    </div>\r\n                </div>\r\n\r\n                <FormGroup>\r\n                    <Col sm={2} style={{ marginLeft: \"-40px\" }} className={\"row save1\"}>\r\n                        {(goButtonArr.length > 0) &&\r\n                            <SaveButton\r\n                                onclick={SaveHandler}\r\n                                pageMode={pageMode}\r\n                                userAcc={userPageAccessState}\r\n                                loading={saveBtnloading}\r\n                            // module={\"Import Master Map\"} \r\n                            />\r\n                        }\r\n                    </Col>\r\n                </FormGroup>\r\n\r\n            </React.Fragment>\r\n        );\r\n    }\r\n    else {\r\n        return (\r\n            <React.Fragment></React.Fragment>\r\n        )\r\n    }\r\n};\r\n\r\nexport default ImportExcelPartyMap\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\ImportExcelPartyMapRedux\\action.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\ImportExcelPartyMapRedux\\actionType.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\components\\Common\\PartyDropdownComp\\PartyDropdownList.js",["4068","4069"],"import React, { useEffect, useState, } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Button, Col, FormGroup, Label } from \"reactstrap\";\r\nimport Select from \"react-select\";\r\nimport { getPartyListAPI } from \"../../../store/Administrator/PartyRedux/action\";\r\n\r\nconst PartyDropdownList = (props) => {\r\n    \r\n    const dispatch = useDispatch();\r\n\r\n    const { state, setState, action } = props\r\n\r\n    const { PartyList } = useSelector((state) => ({\r\n        PartyList: state.PartyMasterReducer.partyList\r\n    }));\r\n    \r\n    useEffect(() => {\r\n        dispatch(getPartyListAPI())\r\n    }, []);\r\n\r\n    const Party_DropdownOptions = PartyList.map((data) => ({\r\n        value: data.id,\r\n        label: data.Name\r\n    }));\r\n\r\n    // const goButtonHandler = () => {\r\n    //     \r\n    //     if (state.length === 0) {\r\n    //         customAlert({\r\n    //             Type: 3,\r\n    //             Message: \"Select Party\",\r\n    //         })\r\n    //         return;\r\n    //     }\r\n    //     const jsonBody = JSON.stringify({\r\n    //         CompanyID: loginCompanyID(),\r\n    //         PartyID: loginPartyID(),\r\n\r\n    //     });\r\n    //     dispatch(action(jsonBody));\r\n    // }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"px-2   c_card_header text-black\" >\r\n                <div className=\"row\">\r\n                    <Col sm=\"5\">\r\n                        <FormGroup className=\" row mt-3 \" >\r\n                            <Label className=\"col-sm-5 p-2\"\r\n                                style={{ width: \"83px\" }}>Party</Label>\r\n                            <Col sm=\"6\">\r\n                                <Select\r\n                                    name=\"RoutesName\"\r\n                                    value={state}\r\n                                    isSearchable={true}\r\n                                    className=\"react-dropdown\"\r\n                                    classNamePrefix=\"dropdown\"\r\n                                    options={Party_DropdownOptions}\r\n                                    onChange={(e) => { setState(e) }}\r\n                                />\r\n                            </Col>\r\n                        </FormGroup>\r\n                    </Col>\r\n\r\n                    <Col sm=\"1\" className=\"mx-4 \">\r\n                        <Button type=\"button\" color=\"btn btn-outline-success border-2 font-size-12 m-3  \"\r\n                            onClick={() => action()}\r\n                        >Go</Button>\r\n                    </Col>\r\n                </div>\r\n            </div>\r\n        </React.Fragment >\r\n    );\r\n}\r\n\r\nexport default PartyDropdownList\r\n\r\n",["4070","4071"],"D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\ImportMaster\\ExcelUpload\\readFile.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\ImportMaster\\RetailerExcelUpload\\AllHndlerFunc.js",["4072","4073"],"\r\n// import { groupBy } from 'lodash';\r\nimport { groupBy, date_ymd_func, date_dmy_func, btnIsDissablefunc, loginPartyID, loginUserID, loginCompanyID } from '../../../../components/Common/CommonFunction';\r\nimport { customAlert } from '../../../../CustomAlert/ConfirmDialog';\r\nimport { InvoiceExcelUpload_save_action, RetailerExcelUpload_save_action } from '../../../../store/Administrator/ImportExcelPartyMapRedux/action';\r\n\r\nconst XLSX = require('xlsx');\r\n\r\n\r\n\r\n\r\n\r\n//###############################################################################################\r\n\r\n\r\nexport const readExcelFile = async ({ file, compareParameter }) => {\r\n\r\n\r\n    try {\r\n\r\n        processing(5)\r\n\r\n        function processing(t) {\r\n        }\r\n\r\n\r\n        const reader = new FileReader();\r\n        reader.readAsBinaryString(file);\r\n\r\n        const jsonResult = await new Promise(function (myResolve, myReject) {\r\n\r\n            reader.onload = (e) => {\r\n                try {\r\n                    const bstr = e.target.result;\r\n                    const workbook = XLSX.read(bstr, { type: \"binary\", cellDates: true });\r\n                    const sheetName = workbook.SheetNames[0];\r\n                    const worksheet = workbook.Sheets[sheetName];\r\n                    const result = XLSX.utils.sheet_to_json(worksheet);\r\n                    myResolve(result)\r\n                } catch (g) {\r\n                    myReject([])\r\n                }\r\n\r\n            }\r\n\r\n        });\r\n\r\n\r\n        let invalidMsg = []\r\n        let count = 0\r\n        const comparefilter = compareParameter.filter(f => (f.Value !== null))\r\n        if (comparefilter.length === 0) {\r\n            invalidMsg.push(`Import filed Not Map`)\r\n        }\r\n\r\n        jsonResult.forEach((r1, k) => {\r\n            comparefilter.forEach((c1) => {\r\n                if (c1.ControlTypeName === \"Date\") { r1[c1.Value] = date_ymd_func(r1[c1.Value]) }\r\n                const regExp = RegExp(c1.RegularExpression)\r\n\r\n                if (((r1[c1.Value]) || (c1.IsCompulsory))) {\r\n\r\n                    if (!(regExp.test(r1[c1.Value]))) {\r\n                        invalidMsg.push(`${c1.Value} :${r1[c1.Value]} is invalid Format`)\r\n                    }\r\n\r\n                }\r\n            })\r\n            count = count + (70 / jsonResult.length)\r\n            processing(count)\r\n        })\r\n        if (invalidMsg.length > 0) {\r\n            customAlert({\r\n                Type: 3,\r\n                Message: JSON.stringify(invalidMsg),\r\n            })\r\n            return []\r\n        }\r\n\r\n        return jsonResult\r\n\r\n    } catch (e) { }\r\n\r\n}\r\n\r\n//###############################################################################################\r\n\r\n\r\nexport async function retailer_FileDetails({ compareParameter = [], readjson = [], }) {\r\n\r\n\r\n    const fileFiled = {}\r\n\r\n    await compareParameter.forEach(ele => {\r\n        if ((ele.Value !== null)) {\r\n            fileFiled[ele.FieldName] = ele.Value\r\n        }\r\n    })\r\n\r\n\r\n    let invoiceNO = []\r\n    let partyNO = []\r\n    let invoiceDate = []\r\n    let amount = 0\r\n\r\n    readjson.forEach((index) => {\r\n\r\n        var invoiceFound = invoiceNO.find(i => (i === (index[fileFiled.InvoiceNumber])))\r\n        var partyFound = partyNO.find(i => (i === (index[fileFiled.Party])))\r\n        var dateFound = partyNO.find(i => (i === (index[fileFiled.InvoiceDate])))\r\n        amount = Number(amount) + Number(index[fileFiled.GrandTotal]);\r\n\r\n        if ((invoiceFound === undefined)) {\r\n            invoiceNO.push((index[fileFiled.InvoiceNumber]))\r\n        };\r\n        if ((partyFound === undefined)) {\r\n            partyNO.push((index[fileFiled.Party]))\r\n        };\r\n        if ((dateFound === undefined)) {\r\n            invoiceDate.push(date_dmy_func((index[fileFiled.InvoiceDate])))\r\n        };\r\n\r\n    })\r\n\r\n    const invoice = await groupBy(readjson, (index) => {\r\n        return (index[fileFiled.InvoiceNumber])\r\n    })\r\n\r\n\r\n    return { fileFiled, invoice, invoiceDate, amount, invoiceNO, partyNO }\r\n}\r\n\r\n//###############################################################################################\r\n\r\n\r\n\r\n\r\n\r\nexport const retailer_SaveHandler = async ({\r\n    event,\r\n    dispatch,\r\n    compareParameter,\r\n    readJsonDetail,\r\n    partySelect,\r\n    priceListSelect,\r\n    retailerId }) => {\r\n\r\n\r\n    event.preventDefault();\r\n    const btnId = event.target.id\r\n    try {\r\n        btnIsDissablefunc({ btnId, state: true })\r\n        const parArr = {}\r\n\r\n        await compareParameter.forEach(ele => {\r\n            if ((ele.Value !== null)) {\r\n                parArr[ele.FieldName] = ele.Value\r\n            }\r\n        })\r\n        const outerArr = []\r\n\r\n\r\n\r\n        readJsonDetail.forEach(ele => {\r\n            var a = {\r\n                \"Name\": ele[parArr.Name] ? ele[parArr.Name] : \"\",\r\n                \"PriceList\": priceListSelect.value,\r\n                \"PartyType\": retailerId,\r\n                \"Company\": loginCompanyID(),\r\n                \"PAN\": ele[parArr.PAN] ? ele[parArr.PAN] : \"\",\r\n                \"Email\": ele[parArr.Email] ? ele[parArr.Email] : \"\",\r\n                \"MobileNo\": ele[parArr.MobileNo] ? ele[parArr.MobileNo] : \"\",\r\n                \"AlternateContactNo\": ele[parArr.AlternateContactNo] ? ele[parArr.AlternateContactNo] : \"\",\r\n                \"State\": ele[parArr.State] ? ele[parArr.State] : \"\",\r\n                \"District\": ele[parArr.District] ? ele[parArr.District] : \"\",\r\n                \"City\": ele[parArr.City] ? ele[parArr.City] : \"\",\r\n                \"GSTIN\": ele[parArr.GSTIN] ? ele[parArr.GSTIN] : \"\",\r\n                \"MkUpMkDn\": ele[parArr.MkUpMkDn] ? ele[parArr.MkUpMkDn] : false,\r\n                \"CreatedBy\": loginUserID(),\r\n                \"UpdatedBy\": loginUserID(),\r\n                \"PartySubParty\": [\r\n                    {\r\n                        \"Party\": partySelect.value,\r\n                        \"CreatedBy\": loginUserID(),\r\n                        \"UpdatedBy\": loginUserID(),\r\n                        \"Route\": ele[parArr.Route] ? ele[parArr.Route] : \"\",\r\n                    }\r\n                ],\r\n                \"PartyAddress\": [\r\n                    {\r\n                        \"Address\": ele[parArr.Address] ? ele[parArr.Address] : \"\",\r\n                        \"FSSAINo\": ele[parArr.FSSAINo] ? ele[parArr.FSSAINo] : \"\",\r\n                        \"FSSAIExipry\": ele[parArr.FSSAIExipry] ? ele[parArr.FSSAIExipry] : \"\",\r\n                        \"PIN\": ele[parArr.PIN] ? ele[parArr.PIN] : \"\",\r\n                        \"IsDefault\": ele[parArr.IsDefault] ? ele[parArr.IsDefault] : true,\r\n                        \"fssaidocument\": ele[parArr.fssaidocument] ? ele[parArr.fssaidocument] : \"\",\r\n                    }\r\n                ],\r\n                \"PartyPrefix\": [\r\n                    {\r\n                        \"Orderprefix\": \"\",\r\n                        \"Invoiceprefix\": \"\",\r\n                        \"Grnprefix\": \"\",\r\n                        \"Receiptprefix\": \"\",\r\n                        \"WorkOrderprefix\": \"\",\r\n                        \"MaterialIssueprefix\": \"\",\r\n                        \"Demandprefix\": \"\",\r\n                        \"IBChallanprefix\": \"\",\r\n                        \"IBInwardprefix\": \"\"\r\n                    }\r\n                ]\r\n            }\r\n\r\n            outerArr.push(a)\r\n\r\n        });\r\n\r\n        const jsonBody = JSON.stringify({ \"BulkData\": outerArr })\r\n        dispatch(RetailerExcelUpload_save_action({ jsonBody, btnId }));\r\n\r\n    } catch (e) { btnIsDissablefunc({ btnId, state: false }) }\r\n};","D:\\Rohit\\Git projects\\Manthan\\src\\components\\Common\\PartyDropdownComp\\PartyDropdown.js",["4074","4075","4076","4077","4078","4079","4080","4081","4082","4083"],"import React, { useEffect, useState, } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Card, Col, FormGroup, Label, Row } from \"reactstrap\";\r\nimport Select from \"react-select\";\r\nimport { getPartyListAPI } from \"../../../store/Administrator/PartyRedux/action\";\r\nimport { getEmployeelist } from \"../../../store/Administrator/EmployeeRedux/action\";\r\nimport { loginCompanyID, loginCompanyName, loginEmployeeID } from \"../CommonFunction\";\r\nimport { getPartyTableList } from \"../../../store/Administrator/ManagementPartiesRedux/action\";\r\nimport { Party_Dropdown_List } from \"../../../store/CommonAPI/SupplierRedux/actions\";\r\n\r\nconst PartyDropdownMaster = (props) => {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const { state, setState } = props\r\n\r\n    const { values, fieldLabel } = state\r\n    const [company, setCompany] = useState([])\r\n    const { partyList } = useSelector((state) => ({\r\n        // partyList: state.CommonAPI_Reducer.partyList,\r\n        partyList: state.PartyMasterReducer.partyList,\r\n    }));\r\n\r\n    useEffect(() => {\r\n        // dispatch(Party_Dropdown_List(loginEmployeeID()))\r\n        dispatch(getPartyListAPI())\r\n    }, []);\r\n\r\n    const PartyList_Options = partyList.map((data) => ({\r\n        value: data.id,\r\n        label: data.Name\r\n    }));\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Card className=\" text-black \"\r\n                style={{ backgroundColor: \"\t#C8C8C8\" }}>\r\n\r\n                <div className=\" text-black mt-2\"  >\r\n\r\n                    {/* <Row className=\"col-12\"> */}\r\n                    {/* <Col className=\"col-4\" >\r\n                    <Label htmlFor=\"validationCustom01 \">Company </Label>\r\n                    <Select\r\n                        id=\"Party \"\r\n                        name=\"Party\"\r\n                        value={company}\r\n                        isSearchable={false}\r\n                        className=\"react-dropdown\"\r\n                        classNamePrefix=\"dropdown\"\r\n                        options={[{ value: 1, label:\"dfsd\" }]}\r\n                        // onChange={(e) => {\r\n                        //     setState((i) => {\r\n                        //         const a = { ...i }\r\n                        //         a.values.Party = e;\r\n                        //         return a\r\n                        //     })\r\n                        // }}\r\n                        onChange={(e) => { setCompany(e) }}\r\n                    />\r\n                </Col>\r\n                <Col md={1}> </Col> */}\r\n\r\n                    <div className=\"row \">\r\n                        <Col sm=\"6\">\r\n                            <FormGroup className=\" row\" >\r\n                                <Label className=\"col-sm-6 p-2\"\r\n                                    style={{ width: \"83px\", marginLeft: \"20px\" }}>{fieldLabel.Party}</Label>\r\n                                <Col sm=\"7\">\r\n                                    <Select\r\n                                        name=\"RoutesName\"\r\n                                        value={values.Party}\r\n                                        isSearchable={true}\r\n                                        className=\"react-dropdown\"\r\n                                        classNamePrefix=\"dropdown\"\r\n                                        options={PartyList_Options}\r\n                                        onChange={(e) => {\r\n                                            setState((i) => {\r\n                                                const a = { ...i }\r\n                                                a.values.Party = e;\r\n                                                return a\r\n                                            })\r\n                                        }}\r\n                                    />\r\n                                </Col>\r\n                            </FormGroup>\r\n                        </Col>\r\n                    </div>\r\n                </div>\r\n\r\n            </Card>\r\n        </React.Fragment >\r\n    );\r\n}\r\n\r\nexport default PartyDropdownMaster\r\n\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\ImportMaster\\ExcelUpload\\UploadExcel.js",["4084","4085","4086","4087","4088","4089","4090","4091","4092","4093","4094","4095","4096"],"import React, { useEffect, useState } from \"react\";\r\nimport {\r\n    Card,\r\n    Col,\r\n    FormGroup,\r\n    Label,\r\n    Row,\r\n} from \"reactstrap\";\r\nimport { MetaTags } from \"react-meta-tags\";\r\nimport { commonPageField, commonPageFieldSuccess, } from \"../../../../store/actions\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport Select from \"react-select\";\r\nimport * as pageId from \"../../../../routes/allPageID\";\r\nimport * as mode from \"../../../../routes/PageMode\";\r\nimport * as _cfunc from \"../../../../components/Common/CommonFunction\";\r\nimport {\r\n    comAddPageFieldFunc,\r\n    initialFiledFunc,\r\n} from \"../../../../components/Common/validationFunction\";\r\nimport { getPartyListAPI } from \"../../../../store/Administrator/PartyRedux/action\";\r\nimport Dropzone from \"react-dropzone\"\r\nimport { fileDetails, readExcelFile } from \"./readFile\";\r\nimport {\r\n    GoButton_ImportFiledMap_Add,\r\n    GoButton_ImportFiledMap_AddSuccess\r\n} from \"../../../../store/Administrator/ImportExportFieldMapRedux/action\";\r\nimport { customAlert } from \"../../../../CustomAlert/ConfirmDialog\";\r\nimport {\r\n    ExcelUpload_save_action,\r\n    ExcelUpload_save_action_Success\r\n} from \"../../../../store/Administrator/ImportMasterMapRedux/action\";\r\nimport './scss.scss'\r\n\r\n\r\nconst UploadExcel = (props) => {\r\n\r\n    const dispatch = useDispatch();\r\n    const history = useHistory()\r\n\r\n    const preDetails = { fileFiled: '', invoice: [], party: [], invoiceDate: '', amount: 0, invoiceNO: [], partyNO: [] }\r\n    const fileds = {\r\n        id: \"\",\r\n        Party: \"\",\r\n        ImportType: \"\",\r\n        PatternType: \"\"\r\n    }\r\n\r\n    const [state, setState] = useState(initialFiledFunc(fileds))\r\n\r\n    const [userPageAccessState, setUserAccState] = useState('');\r\n    const [selectedFiles, setselectedFiles] = useState([])\r\n    const [preUploadjson, setPreUploadjson] = useState([])\r\n    const [readJsonDetail, setReadJsonDetail] = useState(preDetails)\r\n    const [preViewDivShow, setPreViewDivShow] = useState(false)\r\n    const [partySelect, SetPartySelect] = useState([])\r\n\r\n\r\n    const {\r\n        postMsg,\r\n        pageField,\r\n        userAccess,\r\n        partyList,\r\n        compareParameter = []\r\n    } = useSelector((state) => ({\r\n        postMsg: state.ImportMasterMap_Reducer.excelPostMsg,\r\n        userAccess: state.Login.RoleAccessUpdateData,\r\n        pageField: state.CommonPageFieldReducer.pageField,\r\n        partyList: state.PartyMasterReducer.partyList,\r\n        compareParameter: state.ImportExportFieldMap_Reducer.addGoButton,\r\n    }));\r\n\r\n    useEffect(() => {\r\n        const page_Id = pageId.UPLOAD_EXCEL\r\n        dispatch(commonPageFieldSuccess(null));\r\n        dispatch(commonPageField(page_Id))\r\n        dispatch(getPartyListAPI());\r\n        dispatch(GoButton_ImportFiledMap_AddSuccess([]));\r\n        if ((_cfunc.loginIsSCMCompany() === 1)) {\r\n            goButtonHandler()\r\n        }\r\n        return () => {\r\n            dispatch(GoButton_ImportFiledMap_AddSuccess([]));\r\n        }\r\n    }, []);\r\n\r\n    const location = { ...history.location }\r\n    const hasShowloction = location.hasOwnProperty(mode.editValue)\r\n    const hasShowModal = props.hasOwnProperty(mode.editValue)\r\n\r\n    const values = { ...state.values }\r\n    const { isError } = state;\r\n    const { fieldLabel } = state;\r\n\r\n    // userAccess useEffect\r\n    useEffect(() => {\r\n        let userAcc = null;\r\n        let locationPath = location.pathname;\r\n        if (hasShowModal) {\r\n            locationPath = props.masterPath;\r\n        };\r\n        userAcc = userAccess.find((inx) => {\r\n            return (`/${inx.ActualPagePath}` === locationPath)\r\n        })\r\n        if (userAcc) {\r\n            setUserAccState(userAcc)\r\n            _cfunc.breadcrumbReturnFunc({ dispatch, userAcc });\r\n        };\r\n    }, [userAccess])\r\n\r\n\r\n    useEffect(() => {\r\n        if (pageField) {\r\n            const fieldArr = pageField.PageFieldMaster\r\n            comAddPageFieldFunc({ state, setState, fieldArr })\r\n        }\r\n    }, [pageField])\r\n\r\n    useEffect(async () => {\r\n\r\n        if ((postMsg.Status === true) && (postMsg.StatusCode === 200)) {\r\n            dispatch(ExcelUpload_save_action_Success({ Status: false }))\r\n            customAlert({\r\n                Type: 1,\r\n                Message: postMsg.Message,\r\n            })\r\n        }\r\n        else if (postMsg.Status === true) {\r\n            dispatch(ExcelUpload_save_action_Success({ Status: false }))\r\n            customAlert({\r\n                Type: 4,\r\n                Message: JSON.stringify(postMessage.Message),\r\n            })\r\n        }\r\n    }, [postMsg])\r\n\r\n    const PartyDropdown_Options = partyList.map((index) => ({\r\n        value: index.id,\r\n        label: index.Name,\r\n    }));\r\n\r\n\r\n    function goButtonHandler(e) {\r\n        let partyId = ((_cfunc.loginIsSCMCompany() === 1)) ? _cfunc.loginPartyID() : e.value;\r\n        const jsonBody = JSON.stringify({\r\n            PartyID: partyId,\r\n            CompanyID: _cfunc.loginCompanyID()\r\n        })\r\n        dispatch(GoButton_ImportFiledMap_Add({ jsonBody }))\r\n    };\r\n\r\n\r\n    async function upload() {\r\n\r\n        if (compareParameter.length === 0) {\r\n            customAlert({\r\n                Type: 3,\r\n                Message: \"Please wait Downloading field Details.\",\r\n            })\r\n            return\r\n        }\r\n\r\n        var files = selectedFiles;\r\n        if (files.length == 0) {\r\n            customAlert({\r\n                Type: 3,\r\n                Message: \"Please choose any file...\",\r\n            })\r\n            return;\r\n        }\r\n\r\n        var filename = files[0].name;\r\n        var extension = filename.substring(filename.lastIndexOf(\".\")).toUpperCase();\r\n        if (extension == '.XLS' || extension == '.XLSX' || extension == '.CSV') {\r\n\r\n\r\n            const readjson = await readExcelFile({ file: files[0], compareParameter, })\r\n            if (readjson.length > 0) {\r\n\r\n                const isdetails = await fileDetails({ compareParameter, readjson })\r\n                let { invoiceNO } = isdetails;\r\n                if ((invoiceNO.length > 0)) {\r\n                    setReadJsonDetail(isdetails)\r\n                    setPreUploadjson(readjson)\r\n                    setPreViewDivShow(true)\r\n                } else {\r\n                    customAlert({\r\n                        Type: 3,\r\n                        Message: \"Mapping not match.\"\r\n                    })\r\n                }\r\n                // const btnerify = document.getElementById(\"btn-verify\");\r\n                // const btnupload = document.getElementById('btn-upload');\r\n                // const filedetail = document.getElementById('filedetail');\r\n\r\n                // btnerify.style.display = \"none\"\r\n                // btnupload.style.display = \"block\"\r\n            }\r\n\r\n        } else {\r\n            customAlert({\r\n                Type: 3,\r\n                Message: \"Please select a valid excel file.\",\r\n            })\r\n        }\r\n    }\r\n\r\n\r\n    async function handleAcceptedFiles(files) {\r\n        if (compareParameter.length === 0) {\r\n            customAlert({\r\n                Type: 3,\r\n                Message: \"Please wait Downloading field Details.\",\r\n            })\r\n            return\r\n        }\r\n\r\n        if (selectedFiles.length > 0) {\r\n            const isConfirmed = await customAlert({\r\n                Type: 8,\r\n                Message: \"Do you confirm your choice?\",\r\n            });\r\n            if (!isConfirmed) {\r\n\r\n                return\r\n            }\r\n        };\r\n        \r\n        setReadJsonDetail(preDetails)\r\n        setPreUploadjson([])\r\n        setPreViewDivShow(false)\r\n        // try {\r\n        //     const btnerify = document.getElementById(\"btn-verify\")\r\n        //     const btnupload = document.getElementById('btn-upload')\r\n        //     const progDiv = document.getElementById(\"file-proccess\")\r\n\r\n        //     btnerify.style.display = \"block\"\r\n        //     btnupload.style.display = \"none\"\r\n        //     progDiv.style.display = \"none\"\r\n        // } catch (d) { }\r\n\r\n        files.map(file =>\r\n            Object.assign(file, {\r\n                preview: URL.createObjectURL(file),\r\n                formattedSize: formatBytes(file.size),\r\n            })\r\n        )\r\n        setselectedFiles(files)\r\n    }\r\n\r\n    function formatBytes(bytes, decimals = 2) {\r\n        if (bytes === 0) return \"0 Bytes\"\r\n        const k = 1024\r\n        const dm = decimals < 0 ? 0 : decimals\r\n        const sizes = [\"Bytes\", \"KB\", \"MB\", \"GB\", \"TB\", \"PB\", \"EB\", \"ZB\", \"YB\"]\r\n\r\n        const i = Math.floor(Math.log(bytes) / Math.log(k))\r\n        return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + \" \" + sizes[i]\r\n    }\r\n\r\n\r\n    const SaveHandler = async (event) => {\r\n\r\n        event.preventDefault();\r\n        const btnId = event.target.id\r\n        try {\r\n            _cfunc.btnIsDissablefunc({ btnId, state: true })\r\n            const parArr = readJsonDetail.fileFiled\r\n            const outerArr = []\r\n\r\n            compareParameter.forEach(ele => {\r\n                if ((ele.Value !== null)) {\r\n                    parArr[ele.FieldName] = ele.Value\r\n                }\r\n            })\r\n\r\n            readJsonDetail.invoice.forEach(inv => {\r\n                let parentObj;\r\n                let invoiceItems = []\r\n                inv.forEach(ele => {\r\n                    parentObj = {\r\n                        \"CustomerGSTTin\": ele[parArr.CustomerGSTTin] ? ele[parArr.CustomerGSTTin] : '',\r\n                        \"GrandTotal\": ele[parArr.GrandTotal] ? ele[parArr.GrandTotal] : '',\r\n                        \"RoundOffAmount\": ele[parArr.RoundOffAmount] ? ele[parArr.RoundOffAmount] : 0,\r\n                        \"InvoiceNumber\": ele[parArr.InvoiceNumber] ? ele[parArr.InvoiceNumber] : '',\r\n                        \"FullInvoiceNumber\": ele[parArr.FullInvoiceNumber] ? ele[parArr.FullInvoiceNumber] : '',\r\n                        \"Customer\": ele[parArr.Customer] ? ele[parArr.Customer] : '',\r\n                        \"Party\": _cfunc.loginPartyID(),\r\n                        CreatedBy: _cfunc.loginUserID(),\r\n                        UpdatedBy: _cfunc.loginUserID(),\r\n                        \"InvoiceDate\": ele[parArr.InvoiceDate] ? ele[parArr.InvoiceDate] : '',\r\n                    }\r\n\r\n                    invoiceItems.push({\r\n                        \"Item\": ele[parArr.Item] ? ele[parArr.Item] : '',\r\n                        \"Unit\": ele[parArr.Unit] ? ele[parArr.Unit] : '',\r\n                        \"BatchCode\": ele[parArr.BatchCode] ? ele[parArr.BatchCode] : '',\r\n                        \"Quantity\": ele[parArr.Quantity] ? ele[parArr.Quantity] : 0,\r\n                        \"BatchDate\": ele[parArr.BatchDate] ? ele[parArr.BatchDate] : '',\r\n                        \"BaseUnitQuantity\": ele[parArr.BaseUnitQuantity] ? ele[parArr.BaseUnitQuantity] : '',\r\n                        \"LiveBatch\": ele[parArr.LiveBatch] ? ele[parArr.LiveBatch] : '',\r\n                        \"MRP\": ele[parArr.MRP] ? ele[parArr.MRP] : '',\r\n                        \"MRPValue\": ele[parArr.MRPValue] ? ele[parArr.MRPValue] : '',\r\n                        \"Rate\": ele[parArr.Rate] ? ele[parArr.Rate] : '',\r\n                        \"BasicAmount\": ele[parArr.BasicAmount] ? ele[parArr.BasicAmount] : '',\r\n                        \"GSTAmount\": ele[parArr.GSTAmount] ? ele[parArr.GSTAmount] : '',\r\n                        \"GST\": ele[parArr.GST] ? ele[parArr.GST] : '',\r\n                        \"GSTValue\": ele[parArr.GSTValue] ? ele[parArr.GSTValue] : 0,\r\n                        \"CGST\": ele[parArr.CGST] ? ele[parArr.CGST] : 0,\r\n                        \"SGST\": ele[parArr.SGST] ? ele[parArr.SGST] : 0,\r\n                        \"IGST\": ele[parArr.IGST] ? ele[parArr.IGST] : 0,\r\n                        \"GSTPercentage\": ele[parArr.GSTPercentage] ? ele[parArr.GSTPercentage] : 0,\r\n                        \"CGSTPercentage\": ele[parArr.CGSTPercentage] ? ele[parArr.CGSTPercentage] : 0,\r\n                        \"SGSTPercentage\": ele[parArr.SGSTPercentage] ? ele[parArr.SGSTPercentage] : 0,\r\n                        \"IGSTPercentage\": ele[parArr.IGSTPercentage] ? ele[parArr.IGSTPercentage] : 0,\r\n                        \"Amount\": ele[parArr.Amount] ? ele[parArr.Amount] : 0,\r\n                        \"TaxType\": ele[parArr.TaxType] ? ele[parArr.TaxType] : '',\r\n                        \"DiscountType\": ele[parArr.DiscountType] ? ele[parArr.DiscountType] : '',\r\n                        \"Discount\": ele[parArr.Discount] ? ele[parArr.Discount] : 0,\r\n                        \"DiscountAmount\": ele[parArr.DiscountAmount] ? ele[parArr.DiscountAmount] : 0,\r\n\r\n                    })\r\n                })\r\n\r\n                outerArr.push({ ...parentObj, InvoiceItems: invoiceItems })\r\n            });\r\n\r\n            const jsonBody = JSON.stringify({ \"BulkData\": outerArr })\r\n            dispatch(ExcelUpload_save_action({ jsonBody, btnId }));\r\n\r\n        } catch (e) { _cfunc.btnIsDissablefunc({ btnId, state: false }) }\r\n    };\r\n\r\n\r\n    if (!(userPageAccessState === '')) {\r\n        return (\r\n            <React.Fragment>\r\n                <MetaTags>{_cfunc.metaTagLabel(userPageAccessState)}</MetaTags>\r\n\r\n                <form noValidate>\r\n                    <div className=\"page-content\">\r\n\r\n                        <div className=\"px-2 c_card_header text-black\" >\r\n                            <div className=\"px-2   c_card_filter text-black\" >\r\n                                {\r\n                                    (!(_cfunc.loginIsSCMCompany() === 1)) ? <>\r\n                                        <div className=\"row\">\r\n                                            <Col sm=\"3\">\r\n                                                <FormGroup className=\"mb-2 row mt-3 \" >\r\n                                                    <Label className=\" p-2\"\r\n\r\n                                                        style={{ width: \"115px\" }}>{fieldLabel.Party}</Label>\r\n                                                    <Col >\r\n                                                        <Select\r\n                                                            classNamePrefix=\"select2-Customer\"\r\n                                                            value={partySelect}\r\n                                                            options={PartyDropdown_Options}\r\n                                                            onChange={(e) => {\r\n                                                                SetPartySelect(e)\r\n                                                                goButtonHandler(e)\r\n                                                            }}\r\n                                                        />\r\n                                                    </Col>\r\n                                                </FormGroup>\r\n                                            </Col >\r\n                                        </div>\r\n                                    </>\r\n                                        : <>\r\n                                            {(!(compareParameter.length > 0)) ?\r\n                                                <div className=\"row \">\r\n                                                    <div className=\"d-flex justify-content-start p-2 \">\r\n                                                        <div>Please wait Downloading field Details.</div>\r\n                                                        <div >\r\n                                                            <div className=\"dot-pulse\">\r\n                                                                <div className=\"bounce1\"></div>\r\n                                                                <div className=\"bounce2\"></div>\r\n                                                                <div className=\"bounce3\"></div>\r\n                                                            </div>\r\n                                                        </div>\r\n                                                    </div>\r\n                                                </div>\r\n                                                :\r\n                                                <div >\r\n                                                    <h4 className=\"pt-4 pb-4 text-primary\" >{\"Upload Your Excel.\"}</h4>\r\n                                                </div>}\r\n\r\n\r\n                                        </>\r\n                                }\r\n\r\n                            </div>\r\n\r\n                        </div>\r\n\r\n\r\n                        <div className=\"mb-3 mt-3\">\r\n\r\n\r\n                            <Dropzone\r\n                                onDrop={acceptedFiles => {\r\n                                    document.getElementById(\"demo1\").style.border = \"4px dotted green\";\r\n                                    handleAcceptedFiles(acceptedFiles)\r\n                                }}\r\n                            >\r\n                                {({ getRootProps, getInputProps }) => (\r\n                                    <div id='demo1' className=\"dropzone\">\r\n                                        <div\r\n                                            className=\"dz-message needsclick mt-2\"\r\n                                            {...getRootProps()}\r\n                                        >\r\n                                            <input {...getInputProps()} />\r\n                                            <div className=\"mb-3\">\r\n                                                <i className=\"display-4 text-muted bx bxs-cloud-upload\" />\r\n                                            </div>\r\n                                            <h4>Drop files here or click to upload.</h4>\r\n                                        </div>\r\n                                    </div>\r\n                                )}\r\n                            </Dropzone>\r\n\r\n                            <div className=\"dropzone-previews mt-3\" id=\"file-previews\">\r\n                                {selectedFiles.map((f, i) => {\r\n                                    return (\r\n                                        <Card\r\n                                            className=\"mt-1 mb-0 shadow-none border dz-processing dz-image-preview dz-success dz-complete\"\r\n                                            key={i + \"-file\"}\r\n                                        >\r\n                                            <div className=\"p-2 d-flex justify-containt-space-between\">\r\n\r\n                                                <Row className=\"align-items-center\">\r\n                                                    <Col className=\"col-auto\">\r\n                                                        <img\r\n                                                            data-dz-thumbnail=\"\"\r\n                                                            height=\"80\"\r\n                                                            className=\"avatar-sm rounded bg-light\"\r\n                                                            alt={f.name}\r\n                                                            src={f.preview}\r\n                                                        />\r\n                                                    </Col>\r\n                                                    <Col>\r\n                                                        <Link\r\n                                                            to=\"#\"\r\n                                                            className=\"text-muted font-weight-bold\"\r\n                                                        >\r\n                                                            {f.name}\r\n                                                        </Link>\r\n                                                        <p className=\"mb-0\">\r\n                                                            <strong>{f.formattedSize}</strong>\r\n                                                        </p>\r\n                                                    </Col>\r\n                                                </Row>\r\n                                            </div>\r\n\r\n                                        </Card>\r\n                                    )\r\n                                })}\r\n                                {preViewDivShow &&\r\n                                    <Card style={{ borderTop: \"0px\" }}>\r\n                                        <div id=\"filedetail\">\r\n\r\n                                            <details>\r\n                                                <summary>No. of Invoice: {readJsonDetail.invoice.size}</summary>\r\n                                                <div className=\"error-msg\">\r\n                                                    <p>\r\n                                                        {readJsonDetail.invoiceNO.map(i => (<Label>{i} ,&#160;</Label>))}\r\n                                                    </p>\r\n                                                </div>\r\n\r\n                                            </details>\r\n\r\n                                            <details>\r\n                                                <summary>No. of Party :{readJsonDetail.party.size}</summary>\r\n                                                <div className=\"error-msg\">\r\n                                                    <p>\r\n                                                        {readJsonDetail.partyNO.map(i => (<Label>{i} ,&#160;</Label>))}\r\n                                                    </p>\r\n                                                </div>\r\n                                            </details>\r\n                                            <details>\r\n                                                <summary> From Dates :20-01-2021</summary>\r\n\r\n                                            </details>\r\n                                            <details>\r\n                                                <summary>Total Amount :{readJsonDetail.amount}</summary>\r\n                                            </details>\r\n                                            {/* <div className=\"error-msg\">\r\n    <i className=\"fa fa-error\"></i>\r\n    Total Amount:5454\r\n</div> */}\r\n                                        </div>\r\n                                    </Card>\r\n                                }\r\n                            </div>\r\n\r\n\r\n                        </div>\r\n\r\n                        <div className=\"text- mt-4\" >\r\n                            {preViewDivShow ?\r\n                                <button\r\n                                    type=\"button\"\r\n                                    // style={{ display: \"none\" }}\r\n                                    id='btn-upload'\r\n                                    className=\"btn btn-success \"\r\n                                    onClick={SaveHandler}\r\n                                >\r\n                                    Upload Files\r\n                                </button>\r\n                                :\r\n                                <button\r\n                                    type=\"button\"\r\n                                    id='btn-verify'\r\n                                    className=\"btn btn-primary \"\r\n                                    onClick={upload}\r\n                                >\r\n                                    Verify Files\r\n                                </button>\r\n                            }\r\n                        </div>\r\n\r\n\r\n\r\n                    </div>\r\n\r\n                </form>\r\n\r\n\r\n            </React.Fragment >\r\n        );\r\n    }\r\n    else {\r\n        return (\r\n            <React.Fragment></React.Fragment>\r\n        )\r\n    }\r\n};\r\n\r\nexport default UploadExcel\r\n\r\n\r\n\r\n\r\n\r\n\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\CityPages\\CityList.js",["4097","4098","4099","4100"],"\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport {\r\n    commonPageFieldList,\r\n    commonPageFieldListSuccess\r\n} from \"../../../store/actions\";\r\nimport Select from \"react-select\";\r\nimport CommonPurchaseList from \"../../../components/Common/CommonPurchaseList\"\r\nimport { Col, FormGroup, Label } from \"reactstrap\";\r\nimport { initialFiledFunc, onChangeSelect } from \"../../../components/Common/validationFunction\";\r\nimport { Go_Button, PageLoadingSpinner } from \"../../../components/Common/CommonButton\";\r\nimport * as _cfunc from \"../../../components/Common/CommonFunction\";\r\nimport { url, pageId } from \"../../../routes/index\"\r\nimport CityMaster from \"./CityMaster\";\r\nimport { getCityOnDistrict, getCityOnDistrictSuccess, getState } from \"../../../store/Administrator/EmployeeRedux/action\";\r\nimport { getDistrictOnState } from \"../../../store/Administrator/PartyRedux/action\";\r\nimport { C_Select } from \"../../../CustomValidateForm\";\r\n\r\nconst CityList = () => {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const fileds = {\r\n        StateName: \"\",\r\n        DistrictName: \"\",\r\n        DistrictID: \"\"\r\n    }\r\n    const [state, setState] = useState(() => initialFiledFunc(fileds))\r\n\r\n    const reducers = useSelector(\r\n        (state) => ({\r\n            listBtnLoading: state.CityReducer.listBtnLoading,\r\n            tableList: state.EmployeesReducer.City,\r\n            deleteMsg: state.ReceiptReducer.deleteMsg,\r\n            district: state.PartyMasterReducer.DistrictOnState,\r\n            State: state.EmployeesReducer.State,\r\n            userAccess: state.Login.RoleAccessUpdateData,\r\n            districtDropDownLoading: state.PartyMasterReducer.districtDropDownLoading,\r\n            pageField: state.CommonPageFieldReducer.pageFieldList,\r\n        })\r\n    );\r\n\r\n    const { pageField, State, district, districtDropDownLoading } = reducers;\r\n\r\n    const values = { ...state.values }\r\n\r\n    const action = {}\r\n\r\n    useEffect(() => {\r\n        const page_Id = pageId.CITY_LIST\r\n        dispatch(commonPageFieldListSuccess(null))\r\n        dispatch(commonPageFieldList(page_Id))\r\n        dispatch(getState());\r\n        dispatch(getCityOnDistrictSuccess([]))\r\n    }, []);\r\n\r\n    const State_DropdownOptions = State.map((data) => ({\r\n        value: data.id,\r\n        label: data.Name\r\n    }));\r\n\r\n    const District_DropdownOptions = district.map((data) => ({\r\n        value: data.id,\r\n        label: data.Name\r\n    }));\r\n\r\n    function goButtonHandler() {\r\n        dispatch(getCityOnDistrict(values.DistrictName.value))\r\n    }\r\n\r\n    function District_Dropdown_Handler(e) {\r\n\r\n        setState((i) => {\r\n            const a = { ...i }\r\n            a.values.DistrictID = \"\";\r\n            a.hasValid.DistrictID.valid = false\r\n            return a\r\n        })\r\n    }\r\n\r\n    function State_Dropdown_Handler(e) {\r\n        dispatch(getCityOnDistrictSuccess([]))\r\n        dispatch(getDistrictOnState(e.value))\r\n        setState((i) => {\r\n            const a = { ...i }\r\n            a.values.DistrictName = \"\";\r\n            a.hasValid.DistrictName.valid = false\r\n            return a\r\n        })\r\n    }\r\n\r\n    const HeaderContent = () => {\r\n        return (\r\n            <div className=\"px-2   c_card_filter text-black\" >\r\n                <div className=\"row\" >\r\n                    <Col sm=\"5\" className=\"\">\r\n                        <FormGroup className=\"mb- row mt-2 \" >\r\n                            <Label className=\"col-sm-5 p-2\"\r\n                                style={{ width: \"83px\" }}>State</Label>\r\n                            <Col sm=\"7\">\r\n                                <Select\r\n                                    name=\"StateName\"\r\n                                    id=\"state\"\r\n                                    value={values.StateName}\r\n                                    isSearchable={true}\r\n                                    classNamePrefix=\"dropdown\"\r\n                                    options={State_DropdownOptions}\r\n                                    styles={{\r\n                                        menu: provided => ({ ...provided, zIndex: 2 })\r\n                                    }}\r\n                                    onChange={(hasSelect, evn) => {\r\n                                        onChangeSelect({ hasSelect, evn, state, setState, })\r\n                                        State_Dropdown_Handler(hasSelect)\r\n                                    }}\r\n                                />\r\n                            </Col>\r\n                        </FormGroup>\r\n                    </Col>\r\n\r\n                    <Col sm=\"6\" className=\"\">\r\n                        <FormGroup className=\"mb- row mt-2 \" >\r\n                            <Label className=\"col-sm-5 p-2\"\r\n                                style={{ width: \"65px\" }}>District</Label>\r\n                            <Col sm=\"7\">\r\n                                <C_Select\r\n                                    name=\"DistrictName\"\r\n                                    value={values.DistrictName}\r\n                                    isSearchable={true}\r\n                                    className=\"react-dropdown\"\r\n                                    classNamePrefix=\"dropdown\"\r\n                                    styles={{\r\n                                        menu: provided => ({ ...provided, zIndex: 2 })\r\n                                    }}\r\n                                    isLoading={districtDropDownLoading}\r\n                                    options={District_DropdownOptions}\r\n                                    onChange={(hasSelect, evn) => {\r\n                                        onChangeSelect({ hasSelect, evn, state, setState, })\r\n                                        District_Dropdown_Handler(hasSelect)\r\n                                    }}\r\n                                />\r\n                            </Col>\r\n                        </FormGroup>\r\n                    </Col>\r\n                    <Col sm=\"1\" className=\"mt-2 \">\r\n                        <Go_Button loading={reducers.loading} onClick={goButtonHandler} />\r\n                    </Col>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <PageLoadingSpinner isLoading={(reducers.listBtnLoading || !pageField)} />\r\n            <div className=\"page-content\">\r\n                {\r\n                    (pageField) &&\r\n                    <CommonPurchaseList\r\n                        action={action}\r\n                        reducers={reducers}\r\n                        showBreadcrumb={false}\r\n                        newBtnPath={url.CITY}\r\n                        masterPath={url.CITY}\r\n                        HeaderContent={HeaderContent}\r\n                        goButnFunc={goButtonHandler}\r\n                        ButtonMsgLable={\"CityMaster\"}\r\n                        deleteName={\"DistrictName\"}\r\n                        MasterModal={CityMaster}\r\n\r\n                    />\r\n                }\r\n\r\n            </div>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default CityList;","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Report\\OrderSummaryRedux\\reducer.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Report\\OrderSummaryRedux\\saga.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\Reports\\OrderSummaryReport\\OrderSummary.js",["4101","4102","4103","4104","4105","4106","4107","4108","4109","4110"],"import React, { useEffect, useMemo, useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { Card, CardBody, Col, FormGroup, Input, Label, Row } from \"reactstrap\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { initialFiledFunc } from \"../../components/Common/validationFunction\";\r\nimport { C_Button } from \"../../components/Common/CommonButton\";\r\nimport { C_DatePicker, C_Select } from \"../../CustomValidateForm\";\r\nimport * as _cfunc from \"../../components/Common/CommonFunction\";\r\nimport { mode, pageId } from \"../../routes/index\"\r\nimport { MetaTags } from \"react-meta-tags\";\r\nimport { postOrderSummary_API, postOrderSummary_API_Success } from \"../../store/Report/OrderSummaryRedux/action\";\r\nimport * as XLSX from 'xlsx';\r\nimport { customAlert } from \"../../CustomAlert/ConfirmDialog\";\r\nimport ToolkitProvider from \"react-bootstrap-table2-toolkit\";\r\nimport BootstrapTable from \"react-bootstrap-table-next\";\r\nimport { mySearchProps } from \"../../components/Common/SearchBox/MySearch\";\r\nimport { BreadcrumbShowCountlabel, commonPageField, commonPageFieldSuccess } from \"../../store/actions\";\r\nimport { ReportComponent } from \"../ReportComponent\";\r\n\r\nconst OrderSummary = (props) => {\r\n\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n    const currentDate_ymd = _cfunc.date_ymd_func();\r\n    const isSCMParty = _cfunc.loginIsSCMParty();\r\n\r\n    const fileds = {\r\n        FromDate: currentDate_ymd,\r\n        ToDate: currentDate_ymd,\r\n        PartyName: { value: \"\", label: \"All\" },\r\n    }\r\n\r\n    const [state, setState] = useState(() => initialFiledFunc(fileds))\r\n    const [userPageAccessState, setUserAccState] = useState('');\r\n    const [groupByDate, setGroupByDate] = useState(false);\r\n    const [groupBySupplier, setGroupBySupplier] = useState(false);\r\n    const [groupByCustomer, setGroupByCustomer] = useState(false);\r\n    const [showTableData, setShowTableData] = useState([]);\r\n    const [orderSummaryApiData, setOrderSummaryApiData] = useState([]);\r\n    const [btnMode, setBtnMode] = useState(0);\r\n\r\n    const { userAccess, goButtonData, SSDD_List, partyLoading, goBtnLoading, pageField } = useSelector(\r\n        (state) => ({\r\n            goButtonData: state.OrderSummaryReducer.orderSummaryGobtn,\r\n            goBtnLoading: state.OrderSummaryReducer.goBtnLoading,\r\n            userAccess: state.Login.RoleAccessUpdateData,\r\n            SSDD_List: state.CommonPartyDropdownReducer.commonPartyDropdown,\r\n            partyLoading: state.CommonAPI_Reducer.SSDD_ListLoading,\r\n            pageField: state.CommonPageFieldReducer.pageField\r\n        })\r\n    );\r\n\r\n    const values = { ...state.values }\r\n\r\n    // Featch Modules List data  First Rendering\r\n    const location = { ...history.location }\r\n    const hasShowModal = props.hasOwnProperty(mode.editValue)\r\n\r\n    // userAccess useEffect\r\n    useEffect(() => {\r\n        let userAcc = null;\r\n        let locationPath = location.pathname;\r\n        if (hasShowModal) {\r\n            locationPath = props.masterPath;\r\n        };\r\n        userAcc = userAccess.find((inx) => {\r\n            return (`/${inx.ActualPagePath}` === locationPath)\r\n        })\r\n        if (userAcc) {\r\n            setUserAccState(userAcc)\r\n            _cfunc.breadcrumbReturnFunc({ dispatch, userAcc });\r\n        };\r\n    }, [userAccess])\r\n\r\n    useEffect(() => {\r\n        dispatch(commonPageFieldSuccess(null));\r\n        dispatch(commonPageField(pageId.ORDER_SUMMARY_REPORT));\r\n        return () => {\r\n            dispatch(commonPageFieldSuccess(null));\r\n            dispatch(postOrderSummary_API_Success({ Status: false }));\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n\r\n        try {\r\n\r\n            if ((goButtonData.Status === true) && (goButtonData.StatusCode === 200)) {\r\n                dispatch(postOrderSummary_API_Success({ Status: false }));\r\n                const { Data } = goButtonData\r\n                if ((btnMode === 2)) {\r\n                    setBtnMode(0);\r\n                    downloadExcelFunction(Data)\r\n                } else {\r\n                    setOrderSummaryApiData(Data);\r\n                }\r\n            }\r\n            else if ((goButtonData.Status === true) && (goButtonData.StatusCode === 204)) {\r\n                dispatch(postOrderSummary_API_Success({ Status: false }));\r\n                setBtnMode(0);\r\n                customAlert({\r\n                    Type: 3,\r\n                    Message: goButtonData.Message,\r\n                })\r\n            }\r\n        }\r\n        catch (e) { _cfunc.CommonConsole(e) }\r\n\r\n    }, [goButtonData]);\r\n\r\n    useEffect(() => {\r\n\r\n        if (orderSummaryApiData.length > 0) {\r\n            if (btnMode === 1) {\r\n                setBtnMode(0)\r\n                const groupData = groupByColumnsWithSumFunc(orderSummaryApiData);\r\n                const updatedTableData = groupData.map((item, index) => {\r\n                    let initaial = {\r\n                        ...item, keyId: index + 1,\r\n                    }\r\n                    if (item.OrderDate) {\r\n                        initaial.OrderDate = _cfunc.date_dmy_func(item.OrderDate)\r\n                    }\r\n                    return initaial\r\n                });\r\n                setShowTableData(updatedTableData);\r\n            }\r\n        }\r\n    }, [orderSummaryApiData, btnMode])\r\n\r\n    useEffect(() => {\r\n        if (showTableData.length === 0) {\r\n            setBtnMode(0)\r\n        }\r\n    }, [showTableData]);\r\n\r\n    const downloadExcelFunction = (excelTableData) => {\r\n        if ((btnMode === 2)) {\r\n            // const groupData = groupByColumnsWithSumFunc(excelTableData);\r\n            // _cfunc.CommonConsole(JSON.stringify(\"groupData\", excelTableData))\r\n            // const worksheet = XLSX.utils.json_to_sheet(groupData);\r\n            // const workbook = XLSX.utils.book_new();\r\n            // XLSX.utils.book_append_sheet(workbook, worksheet, \"Order Summary Report\");\r\n            // XLSX.writeFile(workbook, `From ${values.FromDate} To ${values.ToDate} ${isSCMParty ? values.PartyName.label : _cfunc.loginUserDetails().PartyName}.XLSX`);\r\n\r\n            ReportComponent({      // Download CSV\r\n                pageField,\r\n                excelData: excelTableData,\r\n                excelFileName: \"Order Summary Report\"\r\n            })\r\n        }\r\n    }\r\n\r\n    const groupByColumnsWithSumFunc = (jsonData) => {\r\n        let dynamicColumn = []\r\n        if (groupByDate) {\r\n            dynamicColumn.push('OrderDate')\r\n        }\r\n        if (groupBySupplier) {\r\n            dynamicColumn.push('SupplierName')\r\n        }\r\n        if (groupByCustomer) {\r\n            dynamicColumn.push('CustomerName')\r\n        }\r\n\r\n        let currentColumnName = [...dynamicColumn, ...['OrderNo','GroupName', 'SubGroup', 'MaterialName']]\r\n        const columnSumsByGroup = jsonData.reduce((result, item) => {\r\n            const groupKey = currentColumnName.map(columnName => item[columnName]).join('|');\r\n\r\n            if (!result[groupKey]) {\r\n                result[groupKey] = {\r\n                    sums: {},\r\n                    data: []\r\n                };\r\n\r\n                currentColumnName.forEach((key) => {\r\n                    result[groupKey].sums[key] = item[key];\r\n                })\r\n            }\r\n\r\n            const group = result[groupKey];\r\n            group.data.push(item);\r\n\r\n            Object.entries(item).forEach(([key, value]) => {\r\n                // if (((typeof value === 'number') && !(key === \"id\"))) {\r\n                //     group.sums[key] = (group.sums[key] || 0) + value;\r\n                // }\r\n                if (key === \"QtyInBox\") {\r\n                    group.sums[key] = (group.sums[key] || 0) + Number(value);\r\n                    group.sums[key] = + Number((group.sums[key]).toFixed());\r\n                }\r\n                if (key === \"QtyInKg\") {\r\n                    group.sums[key] = (group.sums[key] || 0) + Number(value);\r\n                    group.sums[key] = + Number((group.sums[key]).toFixed());\r\n                }\r\n                if (key === \"QtyInNo\") {\r\n                    group.sums[key] = (group.sums[key] || 0) + Number(value);\r\n                    group.sums[key] = + Number((group.sums[key]).toFixed());\r\n                }\r\n                if (key === \"Amount\") {\r\n                    group.sums[key] = (group.sums[key] || 0) + Number(value);\r\n                    group.sums[key] = + Number((group.sums[key]).toFixed());\r\n                }\r\n            });\r\n\r\n            return result;\r\n        }, {});\r\n        let arr = []\r\n        Object.keys(columnSumsByGroup).forEach(i => {\r\n            delete columnSumsByGroup[i].sums.Orderid\r\n            arr.push(columnSumsByGroup[i].sums)\r\n        })\r\n\r\n        return arr\r\n    };\r\n\r\n    const Party_Option = SSDD_List.map(i => ({\r\n        value: i.id,\r\n        label: i.Name\r\n    }));\r\n\r\n    Party_Option.unshift({\r\n        value: \"\",\r\n        label: \" All\"\r\n    });\r\n\r\n    const partySlectHandler = (e) => {\r\n\r\n        setState((i) => {\r\n            const a = { ...i }\r\n            a.values.PartyName = e;\r\n            a.hasValid.PartyName.valid = true\r\n            return a\r\n        })\r\n        setOrderSummaryApiData([]);\r\n        setShowTableData([]);\r\n    }\r\n\r\n    function excel_And_GoBtnHandler(e, Btnmode) {\r\n        setBtnMode(Btnmode);\r\n        const jsonBody = JSON.stringify({\r\n            \"FromDate\": values.FromDate,\r\n            \"ToDate\": values.ToDate,\r\n            \"CompanyID\": _cfunc.loginCompanyID(),\r\n            \"PartyID\": isSCMParty ? values.PartyName.value : _cfunc.loginPartyID()\r\n\r\n        });\r\n        dispatch(postOrderSummary_API({ jsonBody }));\r\n    }\r\n\r\n    function fromdateOnchange(e, date) {\r\n        setState((i) => {\r\n            const a = { ...i }\r\n            a.values.FromDate = date;\r\n            a.hasValid.FromDate.valid = true\r\n            return a\r\n        });\r\n        setShowTableData([]);\r\n    }\r\n\r\n    function todateOnchange(e, date) {\r\n        setState((i) => {\r\n            const a = { ...i }\r\n            a.values.ToDate = date;\r\n            a.hasValid.ToDate.valid = true\r\n            return a\r\n        });\r\n        setShowTableData([]);\r\n    }\r\n    function groupByDateHandler(e) {\r\n        setGroupByDate(e.target.checked)\r\n        setBtnMode(1)\r\n    }\r\n    function groupBySupplierHamdler(e) {\r\n        setGroupBySupplier(e.target.checked)\r\n        setBtnMode(1)\r\n    }\r\n    function groupByCustomerHamdler(e) {\r\n        setGroupByCustomer(e.target.checked)\r\n        setBtnMode(1)\r\n    }\r\n    const pagesListColumns = useMemo(() => {\r\n        let internalColumn = [{}];\r\n        if (showTableData.length > 0) {\r\n            internalColumn = [];\r\n\r\n            const objectAtIndex0 = showTableData[0];\r\n            for (const key in objectAtIndex0) {\r\n                if (!(key === \"keyId\")) {\r\n                    const column = {\r\n                        text: key,\r\n                        dataField: key,\r\n                        sort: true,\r\n                        classes: \"table-cursor-pointer\",\r\n                    };\r\n                    internalColumn.push(column);\r\n                }\r\n            }\r\n        }\r\n        return internalColumn\r\n\r\n    }, [showTableData]);\r\n\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <MetaTags>{_cfunc.metaTagLabel(userPageAccessState)}</MetaTags>\r\n            <div className=\"page-content\">\r\n                <div className=\"px-2   c_card_filter text-black\" >\r\n                    <div className=\"row\" >\r\n                        <Col sm={3} className=\"\">\r\n                            <FormGroup className=\"mb- row mt-3 mb-2 \" >\r\n                                <Label className=\"col-sm-4 p-2\"\r\n                                    style={{ width: \"83px\" }}>FromDate</Label>\r\n                                <Col sm=\"6\">\r\n                                    <C_DatePicker\r\n                                        options={{\r\n                                            altInput: true,\r\n                                            altFormat: \"d-m-Y\",\r\n                                            dateFormat: \"Y-m-d\",\r\n                                        }}\r\n                                        name='FromDate'\r\n                                        value={values.FromDate}\r\n                                        onChange={fromdateOnchange}\r\n                                    />\r\n                                </Col>\r\n                            </FormGroup>\r\n                        </Col>\r\n\r\n                        <Col sm={3} className=\"\">\r\n                            <FormGroup className=\"mb- row mt-3 mb-2\" >\r\n                                <Label className=\"col-sm-4 p-2\"\r\n                                    style={{ width: \"65px\" }}>ToDate</Label>\r\n                                <Col sm=\"6\">\r\n                                    <C_DatePicker\r\n                                        options={{\r\n                                            altInput: true,\r\n                                            altFormat: \"d-m-Y\",\r\n                                            dateFormat: \"Y-m-d\",\r\n                                        }}\r\n                                        name=\"ToDate\"\r\n                                        value={values.ToDate}\r\n                                        onChange={todateOnchange}\r\n                                    />\r\n                                </Col>\r\n                            </FormGroup>\r\n                        </Col>\r\n\r\n                        {isSCMParty &&\r\n                            <Col sm={3} className=\"\">\r\n                                <FormGroup className=\"mb- row mt-3\" >\r\n                                    <Label className=\"col-sm-4 p-2\"\r\n                                        style={{ width: \"65px\" }}>Party</Label>\r\n                                    <Col sm=\"7\">\r\n                                        <C_Select\r\n                                            name=\"PartyName\"\r\n                                            value={values.PartyName}\r\n                                            isSearchable={true}\r\n                                            isLoading={partyLoading}\r\n                                            className=\"react-dropdown\"\r\n                                            classNamePrefix=\"dropdown\"\r\n                                            styles={{\r\n                                                menu: provided => ({ ...provided, zIndex: 2 })\r\n                                            }}\r\n                                            options={Party_Option}\r\n                                            onChange={partySlectHandler}\r\n\r\n                                        />\r\n                                    </Col>\r\n                                </FormGroup>\r\n                            </Col>\r\n                        }\r\n\r\n                        <Col sm={1} className=\"mt-3\" >\r\n                            <C_Button\r\n                                type=\"button\"\r\n                                spinnerColor=\"white\"\r\n                                loading={btnMode === 1 && goBtnLoading}\r\n                                className=\"btn btn-success\"\r\n                                onClick={(e) => excel_And_GoBtnHandler(e, 1)}\r\n                            >\r\n                                Show\r\n                            </C_Button>\r\n\r\n                        </Col>\r\n\r\n                        <Col sm=\"2\" className=\"mt-3 \">\r\n\r\n                            <C_Button\r\n                                type=\"button\"\r\n                                spinnerColor=\"white\"\r\n                                loading={btnMode === 2 && goBtnLoading}\r\n                                className=\"btn btn-primary\"\r\n                                onClick={(e) => excel_And_GoBtnHandler(e, 2)}\r\n                            >\r\n                                Excel Download\r\n                            </C_Button>\r\n                        </Col>\r\n                    </div>\r\n                </div>\r\n\r\n                <Card className=\"mt-1\">\r\n                    <CardBody className=\"c_card_body text-black\">\r\n                        <Row>\r\n                            <Col sm={4} >\r\n                                <FormGroup className=\"row mt-n3 mb-n4\">\r\n                                    <Label className=\"col-4 p-2\" >By Date Group</Label>\r\n                                    <Col sm=\"4\" style={{ marginTop: '9px', }}>\r\n                                        <Input type=\"checkbox\"\r\n                                            checked={groupByDate}\r\n                                            onChange={groupByDateHandler} />\r\n                                    </Col>\r\n                                </FormGroup>\r\n                            </Col>\r\n\r\n                            <Col sm={4} >\r\n                                <FormGroup className=\"row mt-n3 mb-n4\">\r\n                                    <Label className=\"col-4 p-2\" >By Supplier Name</Label>\r\n                                    <Col sm=\"4\" style={{ marginTop: '9px', }}>\r\n                                        <Input type=\"checkbox\"\r\n                                            checked={groupBySupplier}\r\n                                            onChange={groupBySupplierHamdler}\r\n                                        />\r\n                                    </Col>\r\n                                </FormGroup>\r\n                            </Col>\r\n                            <Col sm={4} >\r\n                                <FormGroup className=\"row mt-n3 mb-n4\">\r\n                                    <Label className=\"col-4 p-2\" >By Customer Name</Label>\r\n                                    <Col sm=\"4\" style={{ marginTop: '9px', }}>\r\n                                        <Input type=\"checkbox\"\r\n                                            checked={groupByCustomer}\r\n                                            onChange={groupByCustomerHamdler}\r\n                                        />\r\n                                    </Col>\r\n                                </FormGroup>\r\n                            </Col>\r\n                        </Row>\r\n                    </CardBody>\r\n                </Card>\r\n\r\n                <div className=\"\">\r\n                    <ToolkitProvider\r\n                        keyField={\"keyId\"}\r\n                        data={showTableData}\r\n                        columns={pagesListColumns}\r\n                        search\r\n                    >\r\n                        {(toolkitProps,) => (\r\n                            <React.Fragment>\r\n                                <Row>\r\n                                    <Col xl=\"12\">\r\n                                        <div className=\"table-responsive table\">\r\n                                            <BootstrapTable\r\n                                                keyField={\"id\"}\r\n                                                classes={\"table  table-bordered table-hover\"}\r\n                                                noDataIndication={\r\n                                                    <div className=\"text-danger text-center \">\r\n                                                        Record Not available\r\n                                                    </div>\r\n                                                }\r\n                                                onDataSizeChange={({ dataSize }) => {\r\n                                                    dispatch(BreadcrumbShowCountlabel(`Count:${dataSize}`));\r\n                                                }}\r\n                                                {...toolkitProps.baseProps}\r\n                                            />\r\n                                            {mySearchProps(toolkitProps.searchProps)}\r\n                                        </div>\r\n                                    </Col>\r\n                                </Row>\r\n\r\n                            </React.Fragment>\r\n                        )}\r\n                    </ToolkitProvider>\r\n\r\n                </div>\r\n            </div>\r\n        </React.Fragment >\r\n    )\r\n}\r\n\r\nexport default OrderSummary;","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Report\\OrderSummaryRedux\\actionType.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Report\\OrderSummaryRedux\\action.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\ItemPages\\ItemMaster\\Weightage_Tab\\index.js",["4111","4112"],"import React, { useEffect, useState } from \"react\";\r\nimport {\r\n    Card,\r\n    CardBody,\r\n    Col,\r\n    Input,\r\n    Label,\r\n    Row,\r\n} from \"reactstrap\";\r\n\r\nfunction WeightageTab(props) {\r\n    \r\n    const { weightageTabMaster, setWeightageTabMaster } = props;\r\n\r\n    const handleInputChange = (event) => {\r\n        const { name, value } = event.target;\r\n\r\n        // Update the state with the new value\r\n        setWeightageTabMaster((prevWeightageTabMaster) => ({\r\n            ...prevWeightageTabMaster,\r\n            [name]: value,\r\n        }));\r\n    };\r\n\r\n    return (\r\n        <Row>\r\n            <Col md={12}>\r\n                <Card className=\"text-black\">\r\n                    <CardBody className=\"c_card_body\">\r\n                        <Row className=\"mt-3\">\r\n                            <Col className=\"col col-12 \">\r\n                                <Row>\r\n                                    <div className=\"mb-3 col col-sm-4\">\r\n                                        <Label>Breadth</Label>\r\n                                        <Input\r\n                                            type=\"text\"\r\n                                            name=\"Breadth\"\r\n                                            value={weightageTabMaster.Breadth}\r\n                                            placeholder=\"Please Enter Breadth\"\r\n                                            onChange={handleInputChange}\r\n                                        />\r\n                                    </div>\r\n\r\n                                    <div className=\"mb-3 col col-sm-4\">\r\n                                        <Label>Height</Label>\r\n                                        <Input\r\n                                            type=\"text\"\r\n                                            name=\"Height\"\r\n                                            value={weightageTabMaster.Height}\r\n                                            placeholder=\"Please Enter Height\"\r\n                                            onChange={handleInputChange}\r\n                                        />\r\n                                    </div>\r\n\r\n                                    <div className=\"mb-3 col col-sm-4\">\r\n                                        <Label>Length</Label>\r\n                                        <Input\r\n                                            type=\"text\"\r\n                                            name=\"Length\"\r\n                                            value={weightageTabMaster.Length}\r\n                                            placeholder=\"Please Enter Length\"\r\n                                            onChange={handleInputChange}\r\n                                        />\r\n                                    </div>\r\n\r\n                                    <div className=\"mb-3 col col-sm-4\">\r\n                                        <Label>Grammage</Label>\r\n                                        <Input\r\n                                            type=\"text\"\r\n                                            name=\"Grammage\"\r\n                                            value={weightageTabMaster.Grammage}\r\n                                            placeholder=\"Please Enter Grammage\"\r\n                                            onChange={handleInputChange}\r\n                                        />\r\n                                    </div>\r\n\r\n                                    <div className=\"mb-3 col col-sm-4\">\r\n                                        <Label>Storing Condition</Label>\r\n                                        <Input\r\n                                            type=\"text\"\r\n                                            name=\"StoringCondition\"\r\n                                            value={weightageTabMaster.StoringCondition}\r\n                                            placeholder=\"Please Enter Storing Condition\"\r\n                                            onChange={handleInputChange}\r\n                                        />\r\n                                    </div>\r\n                                </Row>\r\n                            </Col>\r\n                        </Row>\r\n                    </CardBody>\r\n                </Card>\r\n            </Col>\r\n        </Row>\r\n    );\r\n}\r\n\r\nexport default WeightageTab;","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\InvoiceConfiguration\\InvoiceConfiguration.js",["4113","4114","4115","4116","4117","4118","4119","4120","4121","4122","4123","4124"],"import React, { useEffect, useState } from \"react\";\r\nimport {\r\n    Card,\r\n    CardBody,\r\n    CardHeader,\r\n    Col,\r\n    Container,\r\n    FormGroup,\r\n    Input,\r\n    Label,\r\n    Row\r\n} from \"reactstrap\";\r\nimport Select from \"react-select\";\r\nimport { MetaTags } from \"react-meta-tags\";\r\nimport {\r\n    Breadcrumb_inputName,\r\n    commonPageField,\r\n    commonPageFieldSuccess,\r\n    editGroupIDSuccess,\r\n    saveGroupMaster,\r\n    saveGroupMaster_Success,\r\n    updateGroupIDSuccess\r\n} from \"../../../store/actions\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {\r\n    comAddPageFieldFunc,\r\n    formValid,\r\n    initialFiledFunc,\r\n    onChangeSelect,\r\n\r\n    resetFunction\r\n} from \"../../../components/Common/validationFunction\";\r\nimport { getGroupTypeslist } from \"../../../store/Administrator/GroupTypeRedux/action\";\r\nimport { SaveButton } from \"../../../components/Common/CommonButton\";\r\nimport {\r\n    btnIsDissablefunc,\r\n    loginCompanyID,\r\n    loginUserDetails,\r\n    loginUserID,\r\n    metaTagLabel\r\n} from \"../../../components/Common/CommonFunction\";\r\nimport { mode, url, pageId } from \"../../../routes/index\";\r\nimport { customAlert } from \"../../../CustomAlert/ConfirmDialog\";\r\nimport { saveMsgUseEffect, userAccessUseEffect } from \"../../../components/Common/CommonUseEffect\";\r\nimport { getpartysetting_API, savePartySetting, savePartySettingMaster_Success } from \"../../../store/Administrator/PartySetting/action\";\r\n\r\nconst InvoiceConfiguration = (props) => {\r\n\r\n    const history = useHistory()\r\n    const dispatch = useDispatch();\r\n\r\n    const fileds = {\r\n        // PaymentQR: \"\",\r\n        HSNCodeDigit: \"\",\r\n        TCSAmountRound: \"\",\r\n        InvoiceAmountRound: \"\",\r\n        Invoicea4: \"\",\r\n        ShowBatch: \"\",\r\n        AddressInInvoice: \"\",\r\n        AutoEInvoice: \"\",\r\n        EInvoiceApplicable: \"\",\r\n        CreditDebitAmountRound: \"\"\r\n        // IsTCSPercentageforNonValidatedPANCustomer: \"\",\r\n        // IsTCSPercentageforValidatedPANCustomer: \"\"\r\n    }\r\n\r\n    const [state, setState] = useState(() => initialFiledFunc(fileds))\r\n    const [pageMode, setPageMode] = useState(mode.defaultsave);\r\n    const [modalCss, setModalCss] = useState(false);\r\n    const [userPageAccessState, setUserAccState] = useState('');\r\n    const [hsnDropOption] = useState([{ value: \"1\", label: \"4 Digits\" }, { value: \"2\", label: \"6 Digits\" }, { value: \"3\", label: \"8 Digits\" }])\r\n    const [editCreatedBy, seteditCreatedBy] = useState(\"\");\r\n\r\n\r\n    //Access redux store Data /  'save_ModuleSuccess' action data\r\n    const {\r\n        PartySettingdata,\r\n        updateMsg,\r\n        pageField,\r\n        postMsg,\r\n        saveBtnloading,\r\n        userAccess } = useSelector((state) => ({\r\n            saveBtnloading: state.GroupReducer.saveBtnloading,\r\n            postMsg: state.PartySettingReducer.postMsg,\r\n            PartySettingdata: state.PartySettingReducer.PartySettingdata,\r\n            updateMsg: state.GroupReducer.updateMsg,\r\n            userAccess: state.Login.RoleAccessUpdateData,\r\n            pageField: state.CommonPageFieldReducer.pageField\r\n        }));\r\n\r\n    const { values } = state\r\n    const { isError } = state;\r\n    const { fieldLabel } = state;\r\n\r\n    const { Data = {} } = PartySettingdata;\r\n\r\n\r\n    const location = { ...history.location }\r\n    const hasShowloction = location.hasOwnProperty(mode.editValue)\r\n    const hasShowModal = props.hasOwnProperty(mode.editValue)\r\n\r\n    useEffect(() => {\r\n        const page_Id = pageId.INVOICE_CONFIGURATION\r\n        dispatch(commonPageFieldSuccess(null));\r\n        dispatch(commonPageField(page_Id))\r\n        dispatch(getpartysetting_API(loginUserDetails().Party_id, loginCompanyID()))\r\n\r\n\r\n    }, []);\r\n\r\n    // userAccess useEffect\r\n    useEffect(() => userAccessUseEffect({\r\n        props,\r\n        userAccess,\r\n        dispatch,\r\n        setUserAccState,\r\n    }), [userAccess]);\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        if ((hasShowloction || hasShowModal)) {\r\n\r\n            let hasEditVal = null\r\n            if (hasShowloction) {\r\n                setPageMode(location.pageMode)\r\n                hasEditVal = location.editValue\r\n            }\r\n            else if (hasShowModal) {\r\n                hasEditVal = props.editValue\r\n                setPageMode(props.pageMode)\r\n                setModalCss(true)\r\n            }\r\n\r\n            if (hasEditVal) {\r\n\r\n                const { id, Name, GroupType, GroupTypeName } = hasEditVal\r\n                const { values, fieldLabel, hasValid, required, isError } = { ...state }\r\n\r\n                values.Name = Name;\r\n                values.id = id\r\n                values.GroupTypeName = { label: GroupTypeName, value: GroupType };\r\n\r\n                hasValid.Name.valid = true;\r\n                hasValid.GroupTypeName.valid = true;\r\n\r\n                setState({ values, fieldLabel, hasValid, required, isError })\r\n                dispatch(Breadcrumb_inputName(hasEditVal.Name))\r\n                seteditCreatedBy(hasEditVal.CreatedBy)\r\n            }\r\n            dispatch(editGroupIDSuccess({ Status: false }))\r\n        }\r\n    }, [])\r\n\r\n\r\n\r\n    useEffect(() => saveMsgUseEffect({\r\n        postMsg, pageMode,\r\n        history, dispatch,\r\n        postSuccss: savePartySettingMaster_Success,\r\n        resetFunc: { fileds, state, setState },\r\n        listPath: url.INVOICE_CONFIGURATION,\r\n    }), [postMsg])\r\n\r\n    useEffect(() => {\r\n        dispatch(getpartysetting_API(loginUserDetails().Party_id, loginCompanyID()))\r\n    }, [postMsg])\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        if (updateMsg.Status === true && updateMsg.StatusCode === 200 && !modalCss) {\r\n            setState(() => resetFunction(fileds, state))// Clear form values\r\n            history.push({\r\n                pathname: url.GROUP_lIST,\r\n            })\r\n        } else if (updateMsg.Status === true && !modalCss) {\r\n            dispatch(updateGroupIDSuccess({ Status: false }));\r\n            customAlert({\r\n                Type: 3,\r\n                Message: JSON.stringify(updateMsg.Message),\r\n            })\r\n        }\r\n    }, [updateMsg, modalCss]);\r\n\r\n\r\n    useEffect(() => {\r\n        if (pageField) {\r\n            const fieldArr = pageField.PageFieldMaster\r\n            comAddPageFieldFunc({ state, setState, fieldArr })\r\n        }\r\n    }, [pageField])\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        if (Object.keys(Data).length > 1) {\r\n\r\n            if (Data.HSNCodeDigit.Value === \"1\") {\r\n                Data.HSNCodeDigit.Value = { value: \"1\", label: \"4 Digits\" }\r\n            }\r\n            if (Data.HSNCodeDigit.Value === \"2\") {\r\n                Data.HSNCodeDigit.Value = { value: \"2\", label: \"6 Digits\" }\r\n            }\r\n            if (Data.HSNCodeDigit.Value === \"3\") {\r\n                Data.HSNCodeDigit.Value = { value: \"3\", label: \"8 Digits\" }\r\n            } else {\r\n                Data.HSNCodeDigit.Value = { value: \"3\", label: \"8 Digits\" }\r\n            }\r\n\r\n            setState((i) => {\r\n                debugger\r\n                const a = { ...i }\r\n                a.values.Invoicea4 = Data.A4Print;\r\n                a.values.AddressInInvoice = Data.AddressOnInvoice;\r\n                a.values.HSNCodeDigit = Data.HSNCodeDigit;\r\n                a.values.InvoiceAmountRound = Data.InvoiceAmountRoundConfiguration;\r\n                a.values.ShowBatch = Data.ShowBatchNoOnInvoicePrint;\r\n                a.values.TCSAmountRound = Data.TCSAmountRoundConfiguration;\r\n                a.values.EInvoiceApplicable = Data.EInvoiceApplicable;\r\n                a.values.AutoEInvoice = Data.AutoEInvoice;\r\n                a.values.CreditDebitAmountRound = Data.CreditDebitAmountRoundConfiguration;\r\n\r\n\r\n                // a.values.IsTCSPercentageforValidatedPANCustomer = Data.IsTCSPercentageforValidatedPANCustomer;\r\n                // a.values.IsTCSPercentageforNonValidatedPANCustomer = Data.IsTCSPercentageforNonValidatedPANCustomer;\r\n\r\n                return a\r\n            })\r\n        }\r\n\r\n    }, [Data])\r\n\r\n\r\n    const onChangeSelecthandler = (e) => {\r\n\r\n        setState((i) => {\r\n            const a = { ...i }\r\n            a.values.HSNCodeDigit.Value = e;\r\n            return a\r\n        })\r\n\r\n    }\r\n\r\n\r\n    const onchangeHandler = async (event, key, type) => {\r\n\r\n        const file = event.target.files[0]\r\n        const convertBase64 = (file) => {\r\n            return new Promise((resolve, reject) => {\r\n                const fileReader = new FileReader()\r\n                fileReader.readAsDataURL(file);\r\n                fileReader.onload = () => {\r\n                    resolve(fileReader.result)\r\n                };\r\n                fileReader.onerror = (error) => {\r\n                    reject(error)\r\n                }\r\n            })\r\n        }\r\n        const base64 = await convertBase64(file);\r\n        setState((i) => {\r\n            const a = { ...i }\r\n            a.values.PaymentQR = base64;\r\n            return a\r\n        })\r\n\r\n    }\r\n\r\n    const SaveHandler = async (event) => {\r\n\r\n\r\n        const BulkData = []\r\n        event.preventDefault();\r\n        const btnId = event.target.id\r\n\r\n        try {\r\n            if (formValid(state, setState)) {\r\n                btnIsDissablefunc({ btnId, state: true })\r\n                Object.values(values).forEach(i => {\r\n\r\n\r\n                    if (i.SystemSetting === \"HSN Code Digit\") {\r\n                        i.Value = i.Value.value\r\n                    }\r\n\r\n                    const arr = {\r\n                        Setting: i.id,\r\n                        Party: loginUserDetails().Party_id,\r\n                        Company: loginCompanyID(),\r\n                        CreatedBy: loginUserID(),\r\n                        Value: i.Value\r\n                    }\r\n                    BulkData.push(arr)\r\n\r\n                })\r\n\r\n                const jsonBody = JSON.stringify({\r\n                    BulkData: BulkData\r\n                });\r\n\r\n                dispatch(savePartySetting({ jsonBody, btnId }));\r\n\r\n            }\r\n        } catch (e) { btnIsDissablefunc({ btnId, state: false }) }\r\n    };\r\n\r\n\r\n    // IsEditMode_Css is use of module Edit_mode (reduce page-content marging)\r\n    var IsEditMode_Css = ''\r\n    if ((modalCss) || (pageMode === mode.dropdownAdd)) { IsEditMode_Css = \"-5.5%\" };\r\n\r\n    if (!(userPageAccessState === '')) {\r\n        return (\r\n            <React.Fragment>\r\n                <div className=\"page-content\" style={{ marginTop: IsEditMode_Css }}>\r\n                    <Container fluid>\r\n                        <MetaTags>{metaTagLabel(userPageAccessState)}</MetaTags>\r\n\r\n                        <Card className=\"text-black\">\r\n                            <CardHeader className=\"card-header   text-black c_card_header\" >\r\n                                <h4 className=\"card-title text-black\">{userPageAccessState.PageDescription}</h4>\r\n                                <p className=\"card-title-desc text-black\">{userPageAccessState.PageDescriptionDetails}</p>\r\n                            </CardHeader>\r\n\r\n                            <CardBody className=\" vh-10 0 text-black \" >\r\n                                <form noValidate>\r\n\r\n                                    <Card>\r\n                                        <CardBody className=\"c_card_body\">\r\n                                            <Row>\r\n                                                <Col md={4} >\r\n                                                    <FormGroup className=\"mb-3 \">\r\n                                                        <Label htmlFor=\"validationCustom01\">Payment QR</Label>\r\n                                                        <Col sm={7} >\r\n\r\n                                                            <Input type=\"file\" className=\"form-control \"\r\n                                                                name=\"image\"\r\n                                                                id=\"file\"\r\n                                                                accept=\".jpg, .jpeg, .png\"\r\n                                                                onChange={(event) => { onchangeHandler(event, \"ImageUpload\") }}\r\n                                                            />\r\n                                                        </Col>\r\n\r\n\r\n                                                    </FormGroup>\r\n                                                </Col>\r\n\r\n                                                <Col md={4} >\r\n                                                    <FormGroup className=\"mb-3\">\r\n                                                        <Label htmlFor=\"validationCustom01\"> {fieldLabel.HSNCodeDigit} </Label>\r\n                                                        <Col sm={7} >\r\n\r\n                                                            <Select\r\n                                                                name=\"HSNCodeDigit\"\r\n                                                                value={values.HSNCodeDigit.Value}\r\n                                                                className=\"react-dropdown\"\r\n                                                                classNamePrefix=\"dropdown\"\r\n                                                                options={hsnDropOption}\r\n                                                                onChange={(evn) => onChangeSelecthandler(evn)}\r\n\r\n                                                            />\r\n\r\n                                                        </Col>\r\n                                                    </FormGroup>\r\n                                                </Col>\r\n                                                {/* <Col sm={4}>\r\n                                                    <FormGroup className=\"mb-3\">\r\n                                                        <Label htmlFor=\"validationCustom01\">  {fieldLabel.CreditDebitAmountRoundConfiguration} </Label>\r\n                                                        <Col sm={7} >\r\n                                                            <Input\r\n                                                                // style={{ marginLeft: \"53px\" }}\r\n                                                                type=\"text\"\r\n                                                                className=\"p-2\"\r\n                                                                defaultValue={values.IsTCSPercentageforValidatedPANCustomer.Value}\r\n                                                                onChange={(e) => {\r\n                                                                    setState((i) => {\r\n                                                                        const a = { ...i }\r\n                                                                        a.values.IsTCSPercentageforValidatedPANCustomer.Value = e.target.value;\r\n                                                                        return a\r\n                                                                    })\r\n                                                                }}\r\n                                                            >\r\n                                                            </Input>\r\n\r\n                                                        </Col>\r\n                                                    </FormGroup>\r\n                                                </Col> */}\r\n\r\n                                            </Row>\r\n\r\n                                            <Row>\r\n                                                <Col sm={4}>\r\n                                                    <FormGroup className=\"mb-3\">\r\n                                                        <Row>\r\n                                                            <Col sm={5} >\r\n                                                                <Label htmlFor=\"validationCustom01\"> {fieldLabel.TCSAmountRound} </Label>\r\n                                                            </Col>\r\n                                                            <Col sm={7} >\r\n                                                                <Input\r\n                                                                    style={{ marginLeft: \"53px\" }}\r\n                                                                    type=\"checkbox\"\r\n                                                                    className=\"p-2\"\r\n                                                                    checked={values.TCSAmountRound.Value === \"0\" ? false : true}\r\n                                                                    onChange={(e) => {\r\n                                                                        setState((i) => {\r\n                                                                            const a = { ...i }\r\n                                                                            a.values.TCSAmountRound.Value = e.target.checked === false ? \"0\" : \"1\";\r\n                                                                            return a\r\n                                                                        })\r\n                                                                    }}\r\n                                                                >\r\n                                                                </Input>\r\n\r\n                                                            </Col>\r\n                                                        </Row>\r\n                                                    </FormGroup>\r\n                                                </Col>\r\n                                                {/* </Row> */}\r\n\r\n                                                <Col sm={8}>\r\n                                                    <FormGroup className=\"mb-3\">\r\n                                                        <Row>\r\n                                                            <Col sm={3} >\r\n                                                                <Label htmlFor=\"validationCustom01\"> {fieldLabel.InvoiceAmountRound} </Label>\r\n                                                            </Col>\r\n                                                            <Col sm={9} >\r\n                                                                <Input\r\n                                                                    style={{ marginLeft: \"53px\" }}\r\n                                                                    type=\"checkbox\"\r\n                                                                    className=\"p-2\"\r\n                                                                    checked={values.InvoiceAmountRound.Value === \"0\" ? false : true}\r\n                                                                    onChange={(e) => {\r\n                                                                        setState((i) => {\r\n                                                                            const a = { ...i }\r\n                                                                            a.values.InvoiceAmountRound.Value = e.target.checked === false ? \"0\" : \"1\";\r\n                                                                            return a\r\n                                                                        })\r\n                                                                    }}\r\n                                                                >\r\n                                                                </Input>\r\n\r\n                                                            </Col>\r\n                                                        </Row>\r\n                                                    </FormGroup>\r\n                                                </Col>\r\n\r\n\r\n\r\n                                            </Row>\r\n\r\n                                            <Row>\r\n                                                <Col sm={4}>\r\n                                                    <FormGroup className=\"mb-3\">\r\n                                                        <Row>\r\n                                                            <Col sm={5} >\r\n                                                                <Label htmlFor=\"validationCustom01\">{fieldLabel.Invoicea4} </Label>\r\n                                                            </Col>\r\n                                                            <Col sm={7} >\r\n                                                                <Input\r\n                                                                    style={{ marginLeft: \"53px\" }}\r\n                                                                    type=\"checkbox\"\r\n                                                                    className=\"p-2\"\r\n                                                                    checked={values.Invoicea4.Value === \"0\" ? false : true}\r\n                                                                    onChange={(e) => {\r\n\r\n                                                                        setState((i) => {\r\n                                                                            const a = { ...i }\r\n                                                                            a.values.Invoicea4.Value = e.target.checked === false ? \"0\" : \"1\";\r\n                                                                            return a\r\n                                                                        })\r\n                                                                    }}\r\n                                                                >\r\n                                                                </Input>\r\n\r\n                                                            </Col>\r\n                                                        </Row>\r\n                                                    </FormGroup>\r\n                                                </Col>\r\n\r\n\r\n                                                <Col sm={8}>\r\n                                                    <FormGroup className=\"mb-3\">\r\n                                                        <Row>\r\n                                                            <Col sm={3} >\r\n                                                                <Label htmlFor=\"validationCustom01\"> {fieldLabel.ShowBatch} </Label>\r\n                                                            </Col>\r\n                                                            <Col sm={9} >\r\n                                                                <Input\r\n                                                                    style={{ marginLeft: \"53px\" }}\r\n                                                                    type=\"checkbox\"\r\n                                                                    className=\"p-2\"\r\n                                                                    checked={values.ShowBatch.Value === \"0\" ? false : true}\r\n                                                                    onChange={(e) => {\r\n                                                                        setState((i) => {\r\n                                                                            const a = { ...i }\r\n                                                                            a.values.ShowBatch.Value = e.target.checked === false ? \"0\" : \"1\";\r\n                                                                            return a\r\n                                                                        })\r\n                                                                    }}\r\n                                                                >\r\n                                                                </Input>\r\n\r\n                                                            </Col>\r\n                                                        </Row>\r\n                                                    </FormGroup>\r\n                                                </Col>\r\n\r\n                                            </Row>\r\n                                            <Row>\r\n                                                <Col sm={4}>\r\n                                                    <FormGroup className=\"mb-3\">\r\n                                                        <Row>\r\n                                                            <Col sm={5} >\r\n                                                                <Label htmlFor=\"validationCustom01\">  {fieldLabel.EInvoiceApplicable} </Label>\r\n                                                            </Col>\r\n                                                            <Col sm={7} >\r\n                                                                <Input\r\n                                                                    style={{ marginLeft: \"53px\" }}\r\n                                                                    type=\"checkbox\"\r\n                                                                    className=\"p-2\"\r\n                                                                    disabled={values.AutoEInvoice.Value === \"1\" ? true : false}\r\n                                                                    checked={values.EInvoiceApplicable.Value === \"0\" ? false : true}\r\n                                                                    onChange={(e) => {\r\n\r\n                                                                        setState((i) => {\r\n                                                                            const a = { ...i }\r\n                                                                            a.values.EInvoiceApplicable.Value = e.target.checked === false ? \"0\" : \"1\";\r\n\r\n                                                                            return a\r\n                                                                        })\r\n                                                                    }}\r\n                                                                >\r\n                                                                </Input>\r\n\r\n                                                            </Col>\r\n                                                        </Row>\r\n                                                    </FormGroup>\r\n                                                </Col>\r\n\r\n\r\n                                                <Col sm={8}>\r\n                                                    <FormGroup className=\"mb-3\">\r\n                                                        <Row>\r\n                                                            <Col sm={3} >\r\n                                                                <Label htmlFor=\"validationCustom01\">  {fieldLabel.AutoEInvoice} </Label>\r\n                                                            </Col>\r\n                                                            <Col sm={9} >\r\n                                                                <Input\r\n                                                                    style={{ marginLeft: \"53px\" }}\r\n                                                                    type=\"checkbox\"\r\n                                                                    className=\"p-2\"\r\n                                                                    disabled={values.EInvoiceApplicable.Value === \"1\" ? false : true}\r\n                                                                    checked={values.AutoEInvoice.Value === \"0\" ? false : true}\r\n                                                                    onChange={(e) => {\r\n\r\n                                                                        setState((i) => {\r\n                                                                            const a = { ...i }\r\n                                                                            a.values.AutoEInvoice.Value = e.target.checked === false ? \"0\" : \"1\";\r\n\r\n                                                                            return a\r\n                                                                        })\r\n                                                                    }}\r\n                                                                >\r\n                                                                </Input>\r\n\r\n                                                            </Col>\r\n                                                        </Row>\r\n                                                    </FormGroup>\r\n                                                </Col>\r\n\r\n\r\n\r\n\r\n                                            </Row>\r\n\r\n                                            <Row>\r\n\r\n                                                <Col sm={4}>\r\n                                                    <FormGroup className=\"mb-3\">\r\n                                                        <Row>\r\n                                                            <Col sm={5} >\r\n                                                                <Label htmlFor=\"validationCustom01\">  {fieldLabel.CreditDebitAmountRound} </Label>\r\n                                                            </Col>\r\n                                                            <Col sm={7} >\r\n                                                                <Input\r\n                                                                    style={{ marginLeft: \"53px\" }}\r\n                                                                    type=\"checkbox\"\r\n                                                                    className=\"p-2\"\r\n                                                                    checked={values.CreditDebitAmountRound.Value === \"0\" ? false : true}\r\n                                                                    onChange={(e) => {\r\n                                                                        setState((i) => {\r\n                                                                            const a = { ...i }\r\n                                                                            a.values.CreditDebitAmountRound.Value = e.target.checked === false ? \"0\" : \"1\";\r\n                                                                            return a\r\n                                                                        })\r\n                                                                    }}\r\n                                                                >\r\n                                                                </Input>\r\n\r\n                                                            </Col>\r\n                                                        </Row>\r\n                                                    </FormGroup>\r\n                                                </Col>\r\n                                            </Row>\r\n\r\n\r\n\r\n                                            <FormGroup className=\"mt-1\">\r\n                                                <Row>\r\n                                                    <Col sm={2}>\r\n                                                        <SaveButton\r\n                                                            loading={saveBtnloading}\r\n                                                            pageMode={pageMode}\r\n                                                            onClick={SaveHandler}\r\n                                                            userAcc={userPageAccessState}\r\n                                                            editCreatedBy={editCreatedBy}\r\n                                                            module={\"GroupMaster\"}\r\n                                                        />\r\n                                                    </Col>\r\n                                                </Row>\r\n                                            </FormGroup>\r\n                                        </CardBody>\r\n                                    </Card>\r\n                                </form>\r\n                            </CardBody>\r\n                        </Card>\r\n                    </Container>\r\n                </div>\r\n            </React.Fragment >\r\n        );\r\n    }\r\n    else {\r\n        return (\r\n            <React.Fragment></React.Fragment>\r\n        )\r\n    }\r\n};\r\n\r\nexport default InvoiceConfiguration\r\n\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\PartySetting\\action.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\PartySetting\\reducer.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\PartySetting\\saga.js",["4125"],"import { call, put, takeLatest } from \"redux-saga/effects\";\r\nimport { getpartysettingApiErrorAction, getpartysetting_API_Success, postOrderSummary_API_Success, savePartySettingMaster_Success } from \"./action\";\r\nimport { GET_PARTY_SETTING_API, SAVE_PARTY_SETTING_MASTER } from \"./actionType\";\r\nimport { PartySettingApi, save_PartySetting_API } from \"../../../helpers/backend_helper\";\r\n\r\n\r\n\r\nfunction* Save_Method_ForPartySetting_GenFun({ config }) {\r\n\r\n    try {\r\n\r\n        const response = yield call(save_PartySetting_API, config);\r\n        yield put(savePartySettingMaster_Success(response));\r\n    } catch (error) { yield put(getpartysettingApiErrorAction()) }\r\n}\r\n\r\nfunction* PartySetting_GenFunc(config) {\r\n\r\n    try {\r\n        \r\n        const response = yield call(PartySettingApi, config.Party_id, config.Comapny_id);\r\n        const singleObject = {};\r\n        const SystemSetting = {};\r\n        for (const item of response.Data) {\r\n            SystemSetting[item.SystemSetting.replace(/\\s/g, '')] = item.Value\r\n            singleObject[item.SystemSetting.replace(/\\s/g, '')] = {\r\n                SystemSetting: item.SystemSetting,\r\n                Value: item.Value,\r\n                id: item.id\r\n            };\r\n\r\n        }\r\n        response[\"Data\"] = singleObject\r\n        sessionStorage.setItem(\"SystemSetting\", JSON.stringify(SystemSetting))\r\n\r\n        response['SystemSetting'] = SystemSetting\r\n        yield put(getpartysetting_API_Success(response))\r\n\r\n    } catch (error) { yield put(getpartysettingApiErrorAction()) }\r\n}\r\n\r\nfunction* PartySettingSaga() {\r\n    yield takeLatest(SAVE_PARTY_SETTING_MASTER, Save_Method_ForPartySetting_GenFun)\r\n    yield takeLatest(GET_PARTY_SETTING_API, PartySetting_GenFunc)\r\n}\r\n\r\nexport default PartySettingSaga;","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\PartySetting\\actionType.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Inventory\\StockEntry\\StockEntry.js",["4126","4127","4128","4129","4130","4131","4132","4133"],"import React, { useEffect, useState } from \"react\";\r\nimport {\r\n    Col,\r\n    FormGroup,\r\n    Label,\r\n    Input,\r\n    Row,\r\n    Button\r\n} from \"reactstrap\";\r\nimport { MetaTags } from \"react-meta-tags\";\r\nimport { commonPageFieldSuccess } from \"../../../store/actions\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { commonPageField } from \"../../../store/actions\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {\r\n    comAddPageFieldFunc,\r\n    formValid,\r\n    initialFiledFunc,\r\n    onChangeSelect,\r\n\r\n} from \"../../../components/Common/validationFunction\";\r\nimport Select from \"react-select\";\r\nimport { SaveButton } from \"../../../components/Common/CommonButton\";\r\nimport { url, mode, pageId } from \"../../../routes/index\"\r\nimport { customAlert } from \"../../../CustomAlert/ConfirmDialog\";\r\nimport { CInput, C_DatePicker, C_Select } from \"../../../CustomValidateForm/index\";\r\nimport { decimalRegx, } from \"../../../CustomValidateForm/RegexPattern\";\r\nimport { goButtonPartyItemAddPageSuccess, goButtonPartyItemAddPage } from \"../../../store/Administrator/PartyItemsRedux/action\";\r\nimport { StockEntry_GO_button_api_For_Item } from \"../../../helpers/backend_helper\";\r\nimport * as _cfunc from \"../../../components/Common/CommonFunction\";\r\nimport \"../../../pages/Sale/SalesReturn/salesReturn.scss\";\r\nimport { saveStockEntryAction, saveStockEntrySuccess } from \"../../../store/Inventory/StockEntryRedux/action\";\r\nimport { mySearchProps } from \"../../../components/Common/SearchBox/MySearch\";\r\nimport BootstrapTable from \"react-bootstrap-table-next\";\r\nimport ToolkitProvider from \"react-bootstrap-table2-toolkit\";\r\nimport PartyDropdown_Common from \"../../../components/Common/PartyDropdown\";\r\n\r\nconst StockEntry = (props) => {\r\n\r\n    const dispatch = useDispatch();\r\n    const history = useHistory()\r\n    const currentDate_ymd = _cfunc.date_ymd_func();\r\n\r\n    const [pageMode] = useState(mode.defaultsave);\r\n    const [userPageAccessState, setUserAccState] = useState('');\r\n\r\n    const fileds = {\r\n        Date: currentDate_ymd,\r\n        ItemName: \"\",\r\n    }\r\n\r\n    const [state, setState] = useState(initialFiledFunc(fileds))\r\n    const [TableArr, setTableArr] = useState([]);\r\n\r\n    //Access redux store Data /  'save_ModuleSuccess' action data\r\n    const {\r\n        postMsg,\r\n        ItemList,\r\n        pageField,\r\n        userAccess,\r\n        saveBtnloading,\r\n        partyItemListLoading\r\n    } = useSelector((state) => ({\r\n        partyItemListLoading: state.PartyItemsReducer.partyItemListLoading,\r\n        saveBtnloading: state.StockEntryReducer.saveBtnloading,\r\n        postMsg: state.StockEntryReducer.postMsg,\r\n        ItemList: state.PartyItemsReducer.partyItem,\r\n        userAccess: state.Login.RoleAccessUpdateData,\r\n        pageField: state.CommonPageFieldReducer.pageField,\r\n    }));\r\n\r\n    useEffect(() => {\r\n        const page_Id = pageId.STOCK_ENTRY\r\n        dispatch(commonPageFieldSuccess(null));\r\n        dispatch(commonPageField(page_Id))\r\n        dispatch(goButtonPartyItemAddPage({\r\n            jsonBody: JSON.stringify({\r\n                ..._cfunc.loginJsonBody(),\r\n                PartyID: _cfunc.loginSelectedPartyID()\r\n            })\r\n        }))\r\n    }, []);\r\n\r\n    const location = { ...history.location }\r\n    const hasShowModal = props.hasOwnProperty(mode.editValue)\r\n\r\n    const values = { ...state.values }\r\n    const { fieldLabel } = state;\r\n\r\n    // userAccess useEffect\r\n    useEffect(() => {\r\n        let userAcc = null;\r\n        let locationPath = location.pathname;\r\n        if (hasShowModal) {\r\n            locationPath = props.masterPath;\r\n        };\r\n        userAcc = userAccess.find((inx) => {\r\n            return (`/${inx.ActualPagePath}` === locationPath)\r\n        })\r\n        if (userAcc) {\r\n            setUserAccState(userAcc)\r\n            _cfunc.breadcrumbReturnFunc({ dispatch, userAcc });\r\n        };\r\n    }, [userAccess])\r\n\r\n    useEffect(() => {\r\n        if (pageField) {\r\n            const fieldArr = pageField.PageFieldMaster\r\n            comAddPageFieldFunc({ state, setState, fieldArr })\r\n        }\r\n    }, [pageField])\r\n\r\n    useEffect(() => {\r\n        if ((postMsg.Status === true) && (postMsg.StatusCode === 200)) {\r\n            dispatch(saveStockEntrySuccess({ Status: false }))\r\n            setTableArr([])\r\n            customAlert({\r\n                Type: 1,\r\n                Message: postMsg.Message,\r\n                RedirectPath: url.STOCK_ENTRY,\r\n            })\r\n        }\r\n        else if (postMsg.Status === true) {\r\n            dispatch(saveStockEntrySuccess({ Status: false }))\r\n            customAlert({\r\n                Type: 4,\r\n                Message: JSON.stringify(postMsg.Message),\r\n            })\r\n        }\r\n    }, [postMsg])\r\n\r\n    function Date_Onchange(e, date) {\r\n        setState((i) => {\r\n            const a = { ...i }\r\n            a.values.Date = date;\r\n            a.hasValid.Date.valid = true\r\n            return a\r\n        })\r\n    }\r\n\r\n    const itemList = ItemList.map((index) => ({\r\n        value: index.Item,\r\n        label: index.ItemName,\r\n        itemCheck: index.selectCheck\r\n    }));\r\n\r\n    const ItemList_Options = itemList.filter((index) => {\r\n        return index.itemCheck === true\r\n    });\r\n\r\n    const pagesListColumns = [\r\n        {\r\n            text: \"Item Name\",\r\n            dataField: \"id\",\r\n            classes: () => \"\",\r\n            formatter: (cellContent, row, key) => {\r\n                return (\r\n                    <Label>{row.ItemName}</Label>\r\n                )\r\n            }\r\n        },\r\n        {\r\n            text: \"Quantity\",\r\n            dataField: \"\",\r\n            classes: () => \"\",\r\n            formatter: (cellContent, row, key) => {\r\n\r\n                return (<span style={{ justifyContent: 'center' }}>\r\n                    <CInput\r\n                        id={`Qty${key}`}\r\n                        key={`Qty${row.id}`}\r\n                        autoComplete=\"off\"\r\n                        type=\"text\"\r\n                        cpattern={decimalRegx}\r\n                        className=\"text-end\"\r\n                        onChange={(e) => { row.Qty = e.target.value }}\r\n                    />\r\n                </span>)\r\n            }\r\n        },\r\n        {\r\n            text: \"Unit\",\r\n            dataField: \"\",\r\n            classes: () => \"\",\r\n            style: { minWidth: \"10vw\" },\r\n            formatter: (cellContent, row, key,) => {\r\n\r\n                return (<span style={{ justifyContent: 'center' }}>\r\n                    <Select\r\n                        id={`Unit${key}`}\r\n                        name=\"Unit\"\r\n                        isSearchable={true}\r\n                        defaultValue={row.defaultUnit}\r\n                        className=\"react-dropdown\"\r\n                        classNamePrefix=\"dropdown\"\r\n                        options={row.Unit_DropdownOptions}\r\n                        styles={{\r\n                            menu: provided => ({ ...provided, zIndex: 2 })\r\n                        }}\r\n                        onChange={(event) => {\r\n                            row.defaultUnit = event\r\n                        }}\r\n                    />\r\n                </span>)\r\n            }\r\n        },\r\n        {\r\n            text: \"MRP\",\r\n            dataField: \"\",\r\n            style: { minWidth: \"10vw\" },\r\n            classes: () => \"\",\r\n            formatter: (cellContent, row, key) => {\r\n\r\n                return (\r\n                    <>\r\n                        <span >\r\n                            <Select\r\n                                id={`MRP${key}`}\r\n                                name=\"MRP\"\r\n                                defaultValue={row.defaultMRP}\r\n                                isSearchable={true}\r\n                                className=\"react-dropdown \"\r\n                                classNamePrefix=\"dropdown\"\r\n                                options={row.MRP_DropdownOptions}\r\n                                onChange={(event) => { row.defaultMRP = event }}\r\n                            />\r\n                        </span></>)\r\n            }\r\n        },\r\n        {\r\n            text: \"GST\",\r\n            dataField: \"\",\r\n            style: { minWidth: \"10vw\" },\r\n            classes: () => \"\",\r\n            formatter: (cellContent, row, key) => {\r\n                return (<span >\r\n                    <Select\r\n                        id={`GST${key}`}\r\n                        name=\"GST\"\r\n                        defaultValue={row.defaultGST}\r\n                        isSearchable={true}\r\n                        className=\"react-dropdown\"\r\n                        classNamePrefix=\"dropdown\"\r\n                        options={row.ItemGSTHSNDetails}\r\n                        onChange={(event) => { row.defaultGST = event }}\r\n                    />\r\n                </span>)\r\n            }\r\n        },\r\n        {\r\n            text: \"BatchCode\",\r\n            dataField: \"\",\r\n            classes: () => \"\",\r\n            formatter: (cellContent, row, key) => {\r\n\r\n                return (<span >\r\n                    <Input\r\n                        id=\"\"\r\n                        key={row.id}\r\n                        defaultValue={row.BatchCode}\r\n                        type=\"text\"\r\n                        className=\" text-center\"\r\n                        onChange={(event) => { row.BatchCode = event.target.value }}\r\n                    />\r\n                </span>)\r\n            }\r\n        },\r\n        {\r\n            text: \"BatchDate\",\r\n            dataField: \"\",\r\n            classes: () => \"\",\r\n            formatter: (cellContent, row, key) => {\r\n\r\n                return (<span style={{ justifyContent: 'center' }}>\r\n                    <C_DatePicker\r\n                        name='Date'\r\n                        value={row.BatchDate}\r\n                        onChange={(e, date) => {\r\n                            row.BatchDate = _cfunc.date_ymd_func(date)\r\n                        }}\r\n                    />\r\n                </span>)\r\n            }\r\n        },\r\n        {\r\n            text: \"Action \",\r\n            dataField: \"\",\r\n            formatExtraData: { TableArr: TableArr, setTableArr: setTableArr },\r\n            formatter: (cellContent, row, _key, formatExtraData) => (\r\n                <>\r\n                    <div style={{ justifyContent: 'center' }} >\r\n                        <Col>\r\n                            <FormGroup className=\" col col-sm-4 \">\r\n                                <Button\r\n                                    id={\"deleteid\"}\r\n                                    type=\"button\"\r\n                                    className=\"badge badge-soft-danger font-size-12 btn btn-danger waves-effect waves-light w-xxs border border-light\"\r\n                                    data-mdb-toggle=\"tooltip\" data-mdb-placement=\"top\" title='Delete MRP'\r\n                                    onClick={(e) => { deleteButtonAction(row, formatExtraData) }}\r\n                                >\r\n                                    <i className=\"mdi mdi-delete font-size-18\"></i>\r\n                                </Button>\r\n                            </FormGroup>\r\n                        </Col>\r\n                    </div>\r\n                </>\r\n            ),\r\n        },\r\n    ];\r\n\r\n    const AddPartyHandler = async () => {\r\n\r\n        // Display alert if Item Name is empty\r\n        if (values.ItemName === '') {\r\n            customAlert({\r\n                Type: 4,\r\n                Message: `Select Item Name`\r\n            });\r\n            return;\r\n        }\r\n\r\n        try {\r\n            // Fetch data from the API\r\n            const apiResponse = await StockEntry_GO_button_api_For_Item(values.ItemName.value);\r\n\r\n            // Convert API response to desired format\r\n            const convert_ApiResponse = apiResponse.Data.InvoiceItems.map((i) => {\r\n\r\n                const UnitDroupDownOptions = i.ItemUnitDetails.map((unit) => ({\r\n                    label: unit.UnitName,\r\n                    value: unit.Unit,\r\n                    IsBase: unit.IsBase,\r\n                    BaseUnitQuantity: unit.BaseUnitQuantity,\r\n                }));\r\n\r\n                const Default_Unit = UnitDroupDownOptions.find(unit => unit.IsBase);\r\n\r\n                const MRP_DropdownOptions = i.ItemMRPDetails.map((mrp) => ({\r\n                    label: mrp.MRPValue,\r\n                    value: mrp.MRP,\r\n                }));\r\n\r\n                const Highest_MRP = MRP_DropdownOptions.reduce((prev, current) => {\r\n                    return prev.MRP > current.MRP ? prev : current;\r\n                });\r\n\r\n                const GST_DropdownOptions = i.ItemGSTDetails.map((gst) => ({\r\n                    label: gst.GSTPercentage,\r\n                    value: gst.GST,\r\n                }));\r\n\r\n                const Highest_GST = GST_DropdownOptions.reduce((prev, current) => {\r\n                    return prev.GST > current.GST ? prev : current;\r\n                });\r\n\r\n                return {\r\n                    UnitDroupDownOptions,\r\n                    MRP_DropdownOptions,\r\n                    GST_DropdownOptions,\r\n                    Default_Unit,\r\n                    Highest_MRP,\r\n                    Highest_GST,\r\n                    ItemName: i.ItemName,\r\n                    ItemId: i.Item,\r\n                    Quantity: i.Quantity,\r\n                };\r\n            });\r\n\r\n            const initialTableData = [...TableArr];\r\n            const dateString = currentDate_ymd.replace(/-/g, \"\");//Convert date To DateString \r\n\r\n            const existingBatchCodes = {};//existing Batch Codes form compare in table \r\n\r\n            convert_ApiResponse.forEach((index) => {\r\n                const itemId = index.ItemId;\r\n\r\n                let batchCodeCounter = 0;\r\n                initialTableData.forEach((tableItem) => {\r\n                    if (tableItem.ItemId === itemId) {\r\n                        const existingBatchCode = tableItem.BatchCode.split('_').pop(); // Extract the batchCode from existing BatchCode\r\n                        batchCodeCounter = Math.max(batchCodeCounter, parseInt(existingBatchCode, 10) + 1);\r\n                    }\r\n                });\r\n\r\n                let newBatchCode = `${dateString}_${itemId}_${_cfunc.loginPartyID()}_${batchCodeCounter}`;\r\n\r\n                while (existingBatchCodes[newBatchCode]) {\r\n                    batchCodeCounter++;\r\n                    newBatchCode = `${dateString}_${itemId}_${_cfunc.loginPartyID()}_${batchCodeCounter}`;\r\n                }\r\n\r\n                existingBatchCodes[newBatchCode] = true;// Record the new batch code as existing\r\n\r\n                initialTableData.push({\r\n                    id: initialTableData.length + 1, // Use initialTableData length+1 as the ID\r\n                    Unit_DropdownOptions: index.UnitDroupDownOptions,\r\n                    MRP_DropdownOptions: index.MRP_DropdownOptions,\r\n                    ItemGSTHSNDetails: index.GST_DropdownOptions,\r\n                    ItemName: index.ItemName,\r\n                    ItemId: itemId,\r\n                    Quantity: index.Quantity,\r\n                    BatchDate: currentDate_ymd,\r\n                    BatchCode: newBatchCode,\r\n                    defaultUnit: index.Default_Unit,\r\n                    defaultMRP: index.Highest_MRP,\r\n                    defaultGST: index.Highest_GST,\r\n                });\r\n\r\n\r\n            });\r\n            setState((prevState) => {\r\n                const newState = { ...prevState };\r\n                newState.values.ItemName = \"\";\r\n                newState.hasValid.ItemName.valid = true;\r\n                return newState;\r\n            });\r\n\r\n            initialTableData.sort((a, b) => b.id - a.id);\r\n            setTableArr(initialTableData);\r\n\r\n\r\n        } catch (w) { }\r\n    }\r\n\r\n    function deleteButtonAction(row, { TableArr = [], setTableArr }) {\r\n\r\n        const newArr = TableArr.filter((index) => !(index.id === row.id))\r\n        setTableArr(newArr)\r\n    }\r\n\r\n    const SaveHandler = async (event) => {\r\n\r\n        event.preventDefault();\r\n\r\n        const btnId = event.target.id\r\n\r\n        const ReturnItems = TableArr.map((index) => {\r\n\r\n            return ({\r\n                \"Item\": index.ItemId,\r\n                \"ItemName\": index.ItemName,\r\n                \"Quantity\": index.Qty,\r\n                \"MRP\": index.defaultMRP.value,\r\n                \"Unit\": index.defaultUnit.value,\r\n                \"GST\": index.defaultGST.value,\r\n                \"MRPValue\": index.defaultMRP.label,\r\n                \"GSTPercentage\": index.defaultGST.label,\r\n                \"BatchDate\": index.BatchDate,\r\n                \"BatchCode\": index.BatchCode,\r\n                \"BatchCodeID\": 0\r\n            })\r\n        })\r\n\r\n        const filterData = ReturnItems.map(({ ItemName, ...rest }) => rest).filter((i) => {\r\n            return i.Quantity > 0;\r\n        });\r\n\r\n        if (filterData.length === 0) {\r\n            customAlert({\r\n                Type: 4,\r\n                Message: \" Please Enter One Item Quantity\"\r\n            })\r\n            return _cfunc.btnIsDissablefunc({ btnId, state: false })\r\n        }\r\n\r\n        const invalidMsg1 = []\r\n\r\n        ReturnItems.forEach((i) => {\r\n\r\n            if ((i.Unit === undefined) || (i.Unit === null)) {\r\n                invalidMsg1.push(`${i.ItemName} : Unit Is Required`)\r\n            }\r\n            else if ((i.MRP === undefined) || (i.MRP === null)) {\r\n                invalidMsg1.push(`${i.ItemName} : MRP Is Required`)\r\n            }\r\n            else if ((i.GST === undefined) || (i.GST === null)) {\r\n                invalidMsg1.push(`${i.ItemName} : GST Is Required`)\r\n            }\r\n            else if ((i.BatchCode === \"\") || (i.BatchCode === undefined)) {\r\n                invalidMsg1.push(`${i.ItemName} : BatchCode Is Required`)\r\n            };\r\n        })\r\n\r\n        if (invalidMsg1.length > 0) {\r\n            customAlert({\r\n                Type: 4,\r\n                Message: JSON.stringify(invalidMsg1)\r\n            })\r\n            return _cfunc.btnIsDissablefunc({ btnId, state: false })\r\n        }\r\n\r\n        try {\r\n            if (formValid(state, setState)) {\r\n                _cfunc.btnIsDissablefunc({ btnId, state: true })\r\n\r\n                const jsonBody = JSON.stringify({\r\n                    \"PartyID\": _cfunc.loginPartyID(),\r\n                    \"CreatedBy\": _cfunc.loginUserID(),\r\n                    \"Date\": values.Date,\r\n                    \"Mode\": 1,\r\n                    \"StockItems\": filterData\r\n                }\r\n                );\r\n                dispatch(saveStockEntryAction({ jsonBody, btnId }));\r\n            }\r\n\r\n        } catch (e) { _cfunc.btnIsDissablefunc({ btnId, state: false }) }\r\n    };\r\n\r\n    function partyOnChngeButtonHandler() {\r\n        dispatch(goButtonPartyItemAddPageSuccess([]))\r\n        setTableArr([])\r\n        setState((i) => {\r\n            const a = { ...i }\r\n            a.values.ItemName = '';\r\n            a.hasValid.ItemName.valid = true\r\n            return a\r\n        })\r\n    }\r\n\r\n    function goButtonHandler() {\r\n        dispatch(goButtonPartyItemAddPage({\r\n            jsonBody: JSON.stringify({ ..._cfunc.loginJsonBody(), PartyID: _cfunc.loginSelectedPartyID() })\r\n        }))\r\n    }\r\n\r\n    if (!(userPageAccessState === '')) {\r\n        return (\r\n            <React.Fragment>\r\n                <MetaTags>{_cfunc.metaTagLabel(userPageAccessState)}</MetaTags>\r\n                <div className=\"page-content\">\r\n                    <PartyDropdown_Common pageMode={pageMode}\r\n                        goButtonHandler={goButtonHandler}\r\n                        changeButtonHandler={partyOnChngeButtonHandler} />\r\n\r\n                    <form noValidate>\r\n                        <div className=\"px-3 c_card_filter header text-black mb-1\" >\r\n\r\n                            <Row>\r\n                                <Col sm=\"6\">\r\n                                    <FormGroup className=\"row mt-2\" >\r\n                                        <Label className=\"col-sm-1 p-2\"\r\n                                            style={{ width: \"115px\", marginRight: \"0.4cm\" }}>{fieldLabel.Date}  </Label>\r\n                                        <Col sm=\"7\">\r\n                                            <C_DatePicker\r\n                                                name='Date'\r\n                                                value={values.Date}\r\n                                                onChange={Date_Onchange}\r\n                                            />\r\n                                        </Col>\r\n                                    </FormGroup>\r\n                                </Col >\r\n\r\n                                <Col sm=\"6\">\r\n                                    <FormGroup className=\" row mt-2 \" >\r\n                                        <Label className=\"col-sm-1 p-2\"\r\n                                            style={{ width: \"115px\", marginRight: \"0.4cm\" }}>{fieldLabel.ItemName} </Label>\r\n                                        <Col sm=\"7\">\r\n                                            <C_Select\r\n                                                id=\"ItemName \"\r\n                                                name=\"ItemName\"\r\n                                                value={values.ItemName}\r\n                                                isSearchable={true}\r\n                                                isLoading={partyItemListLoading}\r\n                                                className=\"react-dropdown\"\r\n                                                classNamePrefix=\"dropdown\"\r\n                                                styles={{\r\n                                                    menu: provided => ({ ...provided, zIndex: 2 })\r\n                                                }}\r\n                                                options={ItemList_Options}\r\n                                                onChange={(hasSelect, evn) => {\r\n                                                    onChangeSelect({ hasSelect, evn, state, setState, })\r\n                                                }}\r\n                                            />\r\n                                        </Col>\r\n\r\n                                        <Col sm=\"1\" className=\"mx-6 mt-1\">\r\n                                            {\r\n                                                < Button type=\"button\" color=\"btn btn-outline-primary border-1 font-size-11 text-center\"\r\n                                                    onClick={(e,) => AddPartyHandler(e, \"add\")}\r\n                                                > Add</Button>\r\n                                            }\r\n\r\n                                        </Col>\r\n                                    </FormGroup>\r\n                                </Col >\r\n\r\n                            </Row>\r\n                        </div>\r\n                        <div style={{ color: \"red\", fontSize: \"18px\" }} className=\"sliding-text\" >  Warning: If new stock is added then previous stock will be zero.  </div>\r\n\r\n                        <ToolkitProvider\r\n                            keyField={\"id\"}\r\n                            data={TableArr}\r\n                            columns={pagesListColumns}\r\n                            search\r\n                        >\r\n                            {(toolkitProps,) => (\r\n                                <React.Fragment>\r\n                                    <Row>\r\n                                        <Col xl=\"12\">\r\n                                            <div className=\"table-responsive table\" style={{ minHeight: \"45vh\" }}>\r\n                                                <BootstrapTable\r\n                                                    keyField={\"id\"}\r\n                                                    id=\"table_Arrow\"\r\n                                                    classes={\"table  table-bordered table-hover \"}\r\n                                                    noDataIndication={\r\n                                                        <div className=\"text-danger text-center \">\r\n                                                            Items Not available\r\n                                                        </div>\r\n                                                    }\r\n                                                    onDataSizeChange={(e) => {\r\n                                                        _cfunc.tableInputArrowUpDounFunc(\"#table_Arrow\")\r\n                                                    }}\r\n                                                    {...toolkitProps.baseProps}\r\n                                                />\r\n                                                {mySearchProps(toolkitProps.searchProps)}\r\n                                            </div>\r\n                                        </Col>\r\n                                    </Row>\r\n\r\n                                </React.Fragment>\r\n                            )}\r\n                        </ToolkitProvider>\r\n\r\n\r\n                        {\r\n                            TableArr.length > 0 ?\r\n                                <FormGroup>\r\n                                    <Col sm={2} style={{ marginLeft: \"-40px\" }} className={\"row save1\"}>\r\n                                        <SaveButton pageMode={pageMode}\r\n                                            loading={saveBtnloading}\r\n                                            onClick={SaveHandler}\r\n                                            userAcc={userPageAccessState}\r\n                                        />\r\n\r\n                                    </Col>\r\n                                </FormGroup >\r\n                                : null\r\n                        }\r\n\r\n                    </form >\r\n                </div >\r\n            </React.Fragment >\r\n        );\r\n    }\r\n    else {\r\n        return (\r\n            <React.Fragment></React.Fragment>\r\n        )\r\n    }\r\n};\r\n\r\nexport default StockEntry\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Inventory\\StockEntryRedux\\saga.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Inventory\\StockEntryRedux\\action.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Inventory\\StockEntryRedux\\reducer.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Inventory\\StockEntryRedux\\actionType.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\Reports\\PratyLedger\\Page.js",["4134"],"import jsPDF from \"jspdf\";\r\nimport \"jspdf-autotable\";\r\nimport * as style from './ReportStyle'\r\nimport { Data } from \"./DemoData\";\r\nimport { date_dmy_func } from \"../../components/Common/CommonFunction\";\r\n\r\nvar pageHeder = function (doc, data) {\r\n    style.pageBorder(doc, data);\r\n    style.pageHeder(doc, data);     //Title\r\n    style.reportHeder1(doc, data);\r\n};\r\nfunction reportBody(doc, data) {\r\n    style.tableBody(doc, data);\r\n}\r\nfunction pageFooter(doc, data) {\r\n    style.pageFooter(doc, data);\r\n}\r\n\r\n\r\nconst PartyLedgerReport = (data1) => {\r\n\r\n    const data = data1[0]\r\n    var doc = new jsPDF('p', 'pt', 'a4');\r\n    pageHeder(doc, data);\r\n    reportBody(doc, data);\r\n    pageFooter(doc, data);\r\n\r\n    doc.setProperties({\r\n        title: `PartyLedger_Report From ${date_dmy_func(data.FormDate)} To ${date_dmy_func(data.ToDate)} `\r\n    });\r\n    function generateSaveAndOpenPDFReport() {\r\n        const pdfUrl = URL.createObjectURL(doc.output('blob'));\r\n        window.open(pdfUrl);\r\n    }\r\n    generateSaveAndOpenPDFReport();\r\n};\r\n\r\nexport default PartyLedgerReport;","D:\\Rohit\\Git projects\\Manthan\\src\\Reports\\PratyLedger\\DemoData.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\Reports\\PratyLedger\\ReportStyle.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\Reports\\PratyLedger\\TableData.js",["4135","4136"],"import { date_dmy_func } from \"../../components/Common/CommonFunction\";\r\nimport { numberWithCommas } from \"../Report_common_function\";\r\n\r\nexport const columns = [\r\n    \"Date\",\r\n    \"Document No\",\r\n    \"Particular\",\r\n    \"DR-Amount \",\r\n    \"CR-Amount \",\r\n    \"Balance\",\r\n];\r\nexport const PageHedercolumns = [\r\n    \"Distributor\",\r\n    \"Customer\"\r\n]\r\nexport const Rows = (data) => {\r\n\r\n    const { InvoiceItems = [] } = data\r\n    InvoiceItems.sort((firstItem, secondItem) => firstItem.GSTPercentage - secondItem.GSTPercentage);\r\n    const returnArr = [];\r\n    let TotalCash = 0\r\n    let TotalInQuantity = 0\r\n    let TotalOutQuantity = 0\r\n    let TotalRecieptAmount = 0\r\n    let TotalBalance = 0\r\n    let TotalInAmount = 0\r\n\r\n    InvoiceItems.forEach((element, key) => {\r\n\r\n        const tableitemRow = [\r\n            `${date_dmy_func(element.Date)}`,\r\n            `${element.DocumentNO}`,\r\n            `${element.Particular}`,\r\n            `${numberWithCommas(Number(element.Amount).toFixed(2))}`,\r\n            `${numberWithCommas(Number(element.RecieptAmount).toFixed(2))}`,\r\n            `${numberWithCommas(Number(element.Balance).toFixed(2))}`,\r\n\r\n        ];\r\n\r\n        function totalLots() {\r\n            TotalInAmount = Number(TotalInAmount) + Number(element.Amount)\r\n            TotalRecieptAmount = Number(TotalRecieptAmount) + Number(element.RecieptAmount)\r\n            TotalCash = Number(TotalCash) + Number(element.Cash)\r\n            TotalBalance = Number(TotalBalance) + Number(element.Balance)\r\n        };\r\n\r\n        function totalrow() {\r\n            return [\r\n                \" \",\r\n                \" \",\r\n                \"Monthly Total\",\r\n                `${numberWithCommas(Number(TotalInAmount).toFixed(2))}`,\r\n                `${numberWithCommas(Number(TotalRecieptAmount).toFixed(2))}`,\r\n                \"\"\r\n            ];\r\n        };\r\n\r\n\r\n        function OpeningBalance() {\r\n            return [\r\n                \" \",\r\n                \" \",\r\n                \"Opening Balance\",\r\n                ``,\r\n                \"\",\r\n                `${numberWithCommas(Number(data.Open).toFixed(2))}`,\r\n            ];\r\n        };\r\n\r\n        function ClosingBalance() {\r\n            return [\r\n                \" \",\r\n                \" \",\r\n                \"Closing Balance\",\r\n                ``,\r\n                \"\",\r\n                `${numberWithCommas(Number(data.Close).toFixed(2))}`,\r\n            ];\r\n        };\r\n\r\n        function TaxFreeSale() {\r\n            return [\r\n                \" \",\r\n                \" \",\r\n                \"Tax Free Sale\",\r\n                `${numberWithCommas(Number(data.TaxFreeSale).toFixed(2))}`,\r\n                \"\",\r\n                ``,\r\n            ];\r\n        };\r\n        function Taxablesale5() {\r\n            return [\r\n                \" \",\r\n                \" \",\r\n                \"Taxable sale 5.00 %\",\r\n                `${numberWithCommas(Number(data.TaxableSale5).toFixed(2))}`,\r\n                \"\",\r\n                ``,\r\n            ];\r\n        }; function Tax5() {\r\n            return [\r\n                \" \",\r\n                \" \",\r\n                \"Tax 5.00 %\",\r\n                `${numberWithCommas(Number(data.GSTAmount5).toFixed(2))}`,\r\n                \"\",\r\n                ``,\r\n            ];\r\n        }; function Taxablesale12() {\r\n            return [\r\n                \" \",\r\n                \" \",\r\n                \"Taxable sale 12.00 %\",\r\n                `${numberWithCommas(Number(data.TaxableSale12).toFixed(2))}`,\r\n                \"\",\r\n                ``,\r\n            ];\r\n        }; function Tax12() {\r\n            return [\r\n                \" \",\r\n                \" \",\r\n                \"Tax 12.00 %\",\r\n                `${numberWithCommas(Number(data.GSTAmount12).toFixed(2))}`,\r\n                \"\",\r\n                ``,\r\n            ];\r\n        }; function Taxablesale18() {\r\n            return [\r\n                \" \",\r\n                \" \",\r\n                \"Taxable sale 18.00 %\",\r\n                `${numberWithCommas(Number(data.TaxableSale18).toFixed(2))}`,\r\n                \"\",\r\n                ``,\r\n            ];\r\n        };\r\n        function Tax18() {\r\n            return [\r\n                \" \",\r\n                \" \",\r\n                \"Tax 18.00 %\",\r\n                `${numberWithCommas(Number(data.GSTAmount18).toFixed(2))}`,\r\n                \"\",\r\n                ``,\r\n            ];\r\n        };\r\n        function TotalTaxableScale() {\r\n            return [\r\n                \" \",\r\n                \" \",\r\n                \"Total Taxable Scale\",\r\n                `${numberWithCommas(Number(data.TotalTaxableSale).toFixed(2))}`,\r\n                \"\",\r\n                ``,\r\n            ];\r\n        };\r\n        function TotalCreditNote() {\r\n            return [\r\n                \" \",\r\n                \" \",\r\n                \"Total Credit Note\",\r\n                \"\",\r\n                `${numberWithCommas(Number(data.TotalCreditNote).toFixed(2))}`,\r\n                ``,\r\n            ];\r\n        };\r\n        function TotalDebitNote() {\r\n            return [\r\n                \" \",\r\n                \" \",\r\n                \"Total Debit Note\",\r\n                `${numberWithCommas(Number(data.TotalDebitNote).toFixed(2))}`,\r\n                ``,\r\n                ``,\r\n            ];\r\n        };\r\n        function TotalTCS() {\r\n            return [\r\n                \" \",\r\n                \" \",\r\n                \"Total TCS\",\r\n                `${numberWithCommas(Number(data.TotalTCS).toFixed(2))}`,\r\n                \"\",\r\n                ``,\r\n            ];\r\n        };\r\n\r\n        function BlankRow() {\r\n            return [\r\n                \" \",\r\n                \" \",\r\n                \"\",\r\n                ``,\r\n                \"\",\r\n                ``,\r\n            ];\r\n        };\r\n\r\n        if (key === 0) {\r\n            returnArr.push(OpeningBalance());\r\n        }\r\n        returnArr.push(tableitemRow);\r\n        data[\"tableTot\"] = totalLots()\r\n        if (key === InvoiceItems.length - 1) {\r\n            returnArr.push(totalrow());\r\n            returnArr.push(ClosingBalance());\r\n            returnArr.push(BlankRow());\r\n            returnArr.push(TaxFreeSale());\r\n            returnArr.push(Taxablesale5());\r\n            returnArr.push(Tax5());\r\n            returnArr.push(Taxablesale12());\r\n            returnArr.push(Tax12());\r\n            returnArr.push(Taxablesale18());\r\n            returnArr.push(Tax18());\r\n            returnArr.push(TotalTaxableScale());\r\n            returnArr.push(TotalCreditNote());\r\n            returnArr.push(TotalDebitNote());\r\n            returnArr.push(TotalTCS());\r\n\r\n        }\r\n    })\r\n\r\n\r\n    return returnArr;\r\n}\r\nexport const ReportHederRows = (data) => {\r\n    var reportArray = [\r\n        [`In the books of ${data.Distributor}`],\r\n        [`Party Name : ${data.CustomerName}`, ` PAN No : ${data.DistributorPAN}`],\r\n        [`PAN No : ${data.CustomerPAN}`, `GSTIN :${data.DistributorGSTIN}`],\r\n        [`GSTIN :${data.CustomerGSTIN}`, `Opening Balance:  ${numberWithCommas(Number(data.Open).toFixed(2))}`],\r\n        [`Period : ${date_dmy_func(data.FormDate)} to ${date_dmy_func(data.ToDate)}`, `Closing Balance:  ${numberWithCommas(Number(data.Close).toFixed(2))}`]\r\n\r\n    ]\r\n\r\n    return reportArray;\r\n}","D:\\Rohit\\Git projects\\Manthan\\src\\Reports\\PratyLedger\\Partyledger.js",["4137","4138","4139","4140","4141","4142","4143","4144","4145"],"import React, { useEffect, useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { Col, FormGroup, Label } from \"reactstrap\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { initialFiledFunc, } from \"../../components/Common/validationFunction\";\r\nimport { C_Button } from \"../../components/Common/CommonButton\";\r\nimport { C_DatePicker, C_Select } from \"../../CustomValidateForm\";\r\nimport * as _cfunc from \"../../components/Common/CommonFunction\";\r\nimport { mode, } from \"../../routes/index\"\r\nimport { MetaTags } from \"react-meta-tags\";\r\nimport { GetVenderSupplierCustomer, GetVenderSupplierCustomerSuccess, getpdfReportdata, getpdfReportdataSuccess } from \"../../store/actions\";\r\nimport { customAlert } from \"../../CustomAlert/ConfirmDialog\";\r\nimport * as report from '../ReportIndex'\r\nimport { PartyLedgerReport_API } from \"../../helpers/backend_helper\";\r\nimport C_Report from \"../../components/Common/C_Report\";\r\nimport PartyDropdown_Common from \"../../components/Common/PartyDropdown\";\r\n\r\nconst PartyLedger = (props) => {\r\n\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n    const currentDate_ymd = _cfunc.date_ymd_func();\r\n\r\n    const fileds = {\r\n        FromDate: currentDate_ymd,\r\n        ToDate: currentDate_ymd,\r\n        Customer: ''\r\n    }\r\n\r\n    const [state, setState] = useState(() => initialFiledFunc(fileds))\r\n    const [subPageMode] = useState(history.location.pathname);\r\n    const [userPageAccessState, setUserAccState] = useState('');\r\n\r\n    const reducers = useSelector(\r\n        (state) => ({\r\n            pdfdata: state.PdfReportReducers.pdfdata,\r\n            goBtnLoading: state.PdfReportReducers.goBtnLoading,\r\n            supplier: state.CommonAPI_Reducer.vendorSupplierCustomer,\r\n            userAccess: state.Login.RoleAccessUpdateData,\r\n            SSDD_List: state.CommonAPI_Reducer.SSDD_List,\r\n            CustomerLoading: state.CommonAPI_Reducer.vendorSupplierCustomerLoading,\r\n            pageField: state.CommonPageFieldReducer.pageFieldList\r\n        })\r\n    );\r\n    const { userAccess, supplier, pdfdata, CustomerLoading } = reducers;\r\n\r\n    const values = { ...state.values }\r\n\r\n    // Featch Modules List data  First Rendering\r\n    const location = { ...history.location }\r\n    const hasShowModal = props.hasOwnProperty(mode.editValue)\r\n\r\n    // userAccess useEffect\r\n    useEffect(() => {\r\n        let userAcc = null;\r\n        let locationPath = location.pathname;\r\n        if (hasShowModal) {\r\n            locationPath = props.masterPath;\r\n        };\r\n        userAcc = userAccess.find((inx) => {\r\n            return (`/${inx.ActualPagePath}` === locationPath)\r\n        })\r\n        if (userAcc) {\r\n            setUserAccState(userAcc)\r\n            _cfunc.breadcrumbReturnFunc({ dispatch, userAcc });\r\n        };\r\n    }, [userAccess])\r\n\r\n    useEffect(() => {\r\n        dispatch(GetVenderSupplierCustomer({ subPageMode, \"PartyID\": _cfunc.loginSelectedPartyID() }))\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if ((pdfdata.Status === true) && (pdfdata.StatusCode === 204)) {\r\n            dispatch(getpdfReportdataSuccess({ Status: false }))\r\n            customAlert({\r\n                Type: 3,\r\n                Message: pdfdata.Message,\r\n            })\r\n            return\r\n        }\r\n    }, [pdfdata])\r\n\r\n    const CustomerOptions = supplier.map((i) => ({\r\n        value: i.id,\r\n        label: i.Name,\r\n    }))\r\n\r\n    const onselecthandel = (e) => {\r\n        setState((i) => {\r\n            const a = { ...i }\r\n            a.values.Customer = e;\r\n            a.hasValid.Customer.valid = true\r\n            return a\r\n        })\r\n    }\r\n\r\n    function goButtonHandler() {\r\n\r\n        if (_cfunc.loginSelectedPartyID() === 0) {\r\n            customAlert({ Type: 3, Message: \"Please Select Party\" });\r\n            return;\r\n        };\r\n        if (values.Customer === \"\") {\r\n            customAlert({ Type: 3, Message: \"Please Select Customer\" });\r\n            return;\r\n\r\n        }\r\n\r\n        const jsonBody = JSON.stringify({\r\n            \"FromDate\": values.FromDate,\r\n            \"ToDate\": values.ToDate,\r\n            \"Customer\": values.Customer.value,\r\n            \"Party\": _cfunc.loginSelectedPartyID()\r\n        });\r\n\r\n        let config = { ReportType: report.PartyLedger, jsonBody }\r\n\r\n        if (values.Customer === \"\") {\r\n            customAlert({\r\n                Type: 3,\r\n                Message: \"Please Select Customer\",\r\n            })\r\n            return\r\n        } else {\r\n            dispatch(getpdfReportdata(PartyLedgerReport_API, config))\r\n        }\r\n    }\r\n\r\n    function fromdateOnchange(e, date) {\r\n        setState((i) => {\r\n            const a = { ...i }\r\n            a.values.FromDate = date;\r\n            a.hasValid.FromDate.valid = true\r\n            return a\r\n        })\r\n    }\r\n\r\n    function todateOnchange(e, date) {\r\n        setState((i) => {\r\n            const a = { ...i }\r\n            a.values.ToDate = date;\r\n            a.hasValid.ToDate.valid = true\r\n            return a\r\n        })\r\n    }\r\n\r\n    function partySelectButtonHandler() {\r\n        dispatch(GetVenderSupplierCustomer({ subPageMode, \"PartyID\": _cfunc.loginSelectedPartyID() }));\r\n    }\r\n\r\n    function partyOnChngeButtonHandler() {\r\n        dispatch(getpdfReportdataSuccess({ Status: false }));\r\n        dispatch(GetVenderSupplierCustomerSuccess([]));\r\n        setState((i) => {\r\n            let a = { ...i }\r\n            a.values.Customer = { value: \"\", label: \"All\" }\r\n            a.hasValid.Customer.valid = true;\r\n            return a\r\n        })\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <MetaTags>{_cfunc.metaTagLabel(userPageAccessState)}</MetaTags>\r\n            <div className=\"page-content\">\r\n                <PartyDropdown_Common\r\n                    goButtonHandler={partySelectButtonHandler}\r\n                    changeButtonHandler={partyOnChngeButtonHandler} />\r\n\r\n                <div className=\"px-2   c_card_filter text-black\" >\r\n                    <div className=\"row\" >\r\n                        <Col sm={4} className=\"\">\r\n                            <FormGroup className=\"mb- row mt-3 mb-2 \" >\r\n                                <Label className=\"col-sm-4 p-2\"\r\n                                    style={{ width: \"83px\" }}>FromDate</Label>\r\n                                <Col sm=\"6\">\r\n                                    <C_DatePicker\r\n                                        name='FromDate'\r\n                                        value={values.FromDate}\r\n                                        onChange={fromdateOnchange}\r\n                                    />\r\n                                </Col>\r\n                            </FormGroup>\r\n                        </Col>\r\n\r\n                        <Col sm={4} className=\"\">\r\n                            <FormGroup className=\"mb- row mt-3 mb-2\" >\r\n                                <Label className=\"col-sm-4 p-2\"\r\n                                    style={{ width: \"65px\" }}>ToDate</Label>\r\n                                <Col sm=\"6\">\r\n                                    <C_DatePicker\r\n                                        name=\"ToDate\"\r\n                                        value={values.ToDate}\r\n                                        onChange={todateOnchange}\r\n                                    />\r\n                                </Col>\r\n                            </FormGroup>\r\n                        </Col>\r\n\r\n\r\n                        <Col sm={3} className=\"\">\r\n                            <FormGroup className=\"mb- row mt-3\" >\r\n                                <Label className=\"col-sm-4 p-2\"\r\n                                    style={{ width: \"80px\" }}>Customer</Label>\r\n                                <Col sm=\"7\">\r\n                                    <C_Select\r\n                                        name=\"Customer\"\r\n                                        value={values.Customer}\r\n                                        isSearchable={true}\r\n                                        isLoading={CustomerLoading}\r\n                                        className=\"react-dropdown\"\r\n                                        classNamePrefix=\"dropdown\"\r\n                                        styles={{\r\n                                            menu: provided => ({ ...provided, zIndex: 2 })\r\n                                        }}\r\n                                        options={CustomerOptions}\r\n                                        onChange={(e) => { onselecthandel(e) }}\r\n\r\n                                    />\r\n                                </Col>\r\n                            </FormGroup>\r\n                        </Col>\r\n\r\n\r\n                        <Col sm=\"1\" className=\"mt-3 \">\r\n                            <C_Button\r\n                                type=\"button\"\r\n                                className=\"btn btn-outline-primary border-1 font-size-12 text-center\"\r\n                                onClick={goButtonHandler}\r\n                                loading={reducers.goBtnLoading} >\r\n                                Print</C_Button>\r\n                        </Col>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <C_Report />\r\n        </React.Fragment >\r\n    )\r\n}\r\n\r\nexport default PartyLedger;","D:\\Rohit\\Git projects\\Manthan\\src\\Reports\\StockReport\\StockReport.js",["4146","4147","4148","4149","4150","4151","4152","4153"],"import React, { useEffect, useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { Col, FormGroup, Label } from \"reactstrap\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { C_Button } from \"../../components/Common/CommonButton\";\r\nimport { C_DatePicker } from \"../../CustomValidateForm\";\r\nimport * as _cfunc from \"../../components/Common/CommonFunction\";\r\nimport { MetaTags } from \"react-meta-tags\";\r\nimport Select from \"react-select\";\r\nimport { BreadcrumbShowCountlabel, commonPageField, commonPageFieldSuccess, getBaseUnit_ForDropDown, getBaseUnit_ForDropDownSuccess } from \"../../store/actions\";\r\nimport C_Report from \"../../components/Common/C_Report\";\r\nimport { customAlert } from \"../../CustomAlert/ConfirmDialog\";\r\nimport DynamicColumnHook from \"../../components/Common/TableCommonFunc\";\r\nimport { mode, pageId } from \"../../routes/index\"\r\nimport { stockReport_GoButton_API, stockReport_GoButton_API_Success } from \"../../store/Report/StockReport/action\";\r\nimport { ReportComponent } from \"../ReportComponent\";\r\nimport CustomTable from \"../../CustomTable2\";\r\n\r\nconst StockReport = (props) => {\r\n\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n    const currentDate_ymd = _cfunc.date_ymd_func();\r\n    const isSCMParty = _cfunc.loginIsSCMParty();\r\n\r\n    const [headerFilters, setHeaderFilters] = useState('');\r\n    const [userPageAccessState, setUserAccState] = useState('');\r\n\r\n    const [partyDropdown, setPartyDropdown] = useState(\"\");\r\n    const [unitDropdown, setUnitDropdown] = useState(\"\");\r\n    const [tableData, setTableData] = useState([]);\r\n    const [btnMode, setBtnMode] = useState(0);\r\n\r\n    const reducers = useSelector(\r\n        (state) => ({\r\n            listBtnLoading: state.StockReportReducer.listBtnLoading,\r\n            goButtonData: state.StockReportReducer.StockReportGobtn,\r\n            BaseUnit: state.ItemMastersReducer.BaseUnit,\r\n            SSDD_List: state.CommonPartyDropdownReducer.commonPartyDropdown,\r\n            userAccess: state.Login.RoleAccessUpdateData,\r\n            pageField: state.CommonPageFieldReducer.pageField\r\n        })\r\n    );\r\n\r\n    const { userAccess, BaseUnit, SSDD_List, pageField, goButtonData = [], } = reducers;\r\n    const { fromdate = currentDate_ymd, todate = currentDate_ymd } = headerFilters;\r\n\r\n    // Featch Modules List data  First Rendering\r\n    const location = { ...history.location }\r\n    const hasShowModal = props.hasOwnProperty(mode.editValue)\r\n\r\n    // userAccess useEffect\r\n    useEffect(() => {\r\n        let userAcc = null;\r\n        let locationPath = location.pathname;\r\n        if (hasShowModal) {\r\n            locationPath = props.masterPath;\r\n        };\r\n        userAcc = userAccess.find((inx) => {\r\n            return (`/${inx.ActualPagePath}` === locationPath)\r\n        })\r\n        if (userAcc) {\r\n            setUserAccState(userAcc)\r\n            _cfunc.breadcrumbReturnFunc({ dispatch, userAcc });\r\n        };\r\n    }, [userAccess])\r\n\r\n    useEffect(() => {\r\n\r\n        dispatch(getBaseUnit_ForDropDown());\r\n        dispatch(commonPageFieldSuccess(null));\r\n        dispatch(commonPageField(pageId.STOCK_REPORT));\r\n        dispatch(BreadcrumbShowCountlabel(`Count:${0}`));\r\n        return () => {\r\n            dispatch(commonPageFieldSuccess(null));\r\n            dispatch(stockReport_GoButton_API_Success([]));\r\n            dispatch(getBaseUnit_ForDropDownSuccess([]));\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        // This useEffect handles the response from the API call\r\n        try {\r\n            if ((goButtonData.Status === true) && (goButtonData.StatusCode === 200)) {\r\n                dispatch(stockReport_GoButton_API_Success([])); // Reset goButtonData\r\n                if (btnMode === 2) {\r\n                    ReportComponent({      // Download CSV\r\n                        pageField,\r\n                        excelData: goButtonData.Data,\r\n                        excelFileName: \"Current_Stock_Report\"\r\n                    })\r\n                }\r\n                else if (btnMode === 1) {\r\n                    setTableData(goButtonData.Data); // Update table data\r\n                }\r\n            } else if ((goButtonData.Status === true)) {\r\n                setTableData([]); // Clear table data if necessary\r\n            }\r\n            setBtnMode(0); // Reset button mode\r\n\r\n        } catch (e) {\r\n            console.log(e); // Log any errors\r\n        }\r\n    }, [goButtonData]);\r\n\r\n    useEffect(() => {\r\n        if (tableData.length === 0) {\r\n            setBtnMode(0)\r\n        }\r\n    }, [tableData]);\r\n\r\n    const [tableColumns] = DynamicColumnHook({ pageField })\r\n\r\n    const BaseUnit_DropdownOptions = BaseUnit.filter(index => index.Name === \"No\" || index.Name === \"Kg\" || index.Name === \"Box\")\r\n        .map(data => ({\r\n            value: data.id,\r\n            label: data.Name\r\n        }));\r\n\r\n    const Party_Option = SSDD_List.map(i => ({\r\n        value: i.id,\r\n        label: i.Name\r\n    }));\r\n\r\n    function goButtonHandler(e, btnMode) {\r\n\r\n        try {\r\n            setBtnMode(btnMode)\r\n            if (unitDropdown === \"\") {\r\n                customAlert({\r\n                    Type: 3,\r\n                    Message: \"Please Select Unit\"\r\n                })\r\n                setBtnMode(0)\r\n                return\r\n            }\r\n            else if ((isSCMParty) && (partyDropdown === \"\")) {\r\n                customAlert({ Type: 3, Message: \"Please Select Party\" });\r\n                setBtnMode(0)\r\n                return;\r\n            }\r\n\r\n            const jsonBody = JSON.stringify({\r\n                \"FromDate\": fromdate,\r\n                \"ToDate\": todate,\r\n                \"Unit\": unitDropdown.value,\r\n                \"PartyID\": partyDropdown === \"\" ? _cfunc.loginPartyID() : partyDropdown.value,\r\n            });\r\n\r\n            dispatch(stockReport_GoButton_API({ jsonBody }))\r\n\r\n        } catch (error) { _cfunc.CommonConsole(error) }\r\n    }\r\n\r\n    function fromdateOnchange(e, date) {\r\n        let newObj = { ...headerFilters }\r\n        newObj.fromdate = date\r\n        setHeaderFilters(newObj)\r\n    }\r\n\r\n    function todateOnchange(e, date) {\r\n        let newObj = { ...headerFilters }\r\n        newObj.todate = date\r\n        setHeaderFilters(newObj)\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <MetaTags>{_cfunc.metaTagLabel(userPageAccessState)}</MetaTags>\r\n            <div className=\"page-content\">\r\n                <div className=\"px-2 c_card_filter text-black mb-1\" >\r\n                    <div className=\"row\" >\r\n                        <Col sm={(isSCMParty) ? 2 : 3} className=\"\">\r\n                            <FormGroup className=\" mb-2 row mt-3 \" >\r\n                                <Label className=\"col-sm-4 p-2\"\r\n                                    style={{ width: \"66px\" }}>FromDate</Label>\r\n                                <Col sm={7}>\r\n                                    <C_DatePicker\r\n                                        name='fromdate'\r\n                                        value={fromdate}\r\n                                        disabled={true}\r\n                                        onChange={fromdateOnchange}\r\n                                    />\r\n                                </Col>\r\n                            </FormGroup>\r\n                        </Col>\r\n\r\n                        <Col sm={(isSCMParty) ? 2 : 3} className=\"\">\r\n                            <FormGroup className=\" row mt-3 \" >\r\n                                <Label className=\"col-sm-4 p-2\"\r\n                                    style={{ width: \"60px\" }}>ToDate</Label>\r\n                                <Col sm={7}>\r\n                                    <C_DatePicker\r\n                                        nane='todate'\r\n                                        value={todate}\r\n                                        disabled={true}\r\n                                        onChange={todateOnchange}\r\n                                    />\r\n                                </Col>\r\n                            </FormGroup>\r\n                        </Col>\r\n\r\n                        <Col sm={(isSCMParty) ? 2 : 3}>\r\n                            <FormGroup className=\" row mt-3 \" >\r\n                                <Label className=\"col-sm-2 p-2\"\r\n                                    style={{ width: \"85px\" }}>Unit</Label>\r\n                                <Col sm={7}>\r\n                                    <Select\r\n                                        name=\"Unit\"\r\n                                        value={unitDropdown}\r\n                                        isSearchable={true}\r\n                                        className=\"react-dropdown\"\r\n                                        classNamePrefix=\"dropdown\"\r\n                                        styles={{\r\n                                            menu: provided => ({ ...provided, zIndex: 2 })\r\n                                        }}\r\n                                        options={BaseUnit_DropdownOptions}\r\n                                        onChange={(e) => {\r\n                                            setUnitDropdown(e);\r\n                                            setTableData([]);\r\n                                        }}\r\n                                    />\r\n                                </Col>\r\n                            </FormGroup>\r\n                        </Col >\r\n\r\n                        {isSCMParty &&\r\n                            <Col sm={3}>\r\n                                <FormGroup className=\" row mt-3 \" >\r\n                                    <Label className=\"col-md-3 p-2 \"\r\n                                        style={{ width: \"90px\" }}>Party</Label>\r\n                                    <Col sm={7}>\r\n                                        <Select\r\n                                            name=\"Party\"\r\n                                            value={partyDropdown}\r\n                                            isSearchable={true}\r\n                                            className=\"react-dropdown\"\r\n                                            classNamePrefix=\"dropdown\"\r\n                                            styles={{\r\n                                                menu: provided => ({ ...provided, zIndex: 2 })\r\n                                            }}\r\n                                            options={Party_Option}\r\n                                            onChange={(e) => {\r\n                                                setPartyDropdown(e);\r\n                                                setTableData([]);\r\n                                            }}\r\n                                        />\r\n                                    </Col>\r\n                                </FormGroup>\r\n                            </Col >\r\n                        }\r\n\r\n                        <Col sm={1} className=\"mt-3\" >\r\n                            <C_Button\r\n                                type=\"button\"\r\n                                spinnerColor=\"white\"\r\n                                loading={btnMode === 1 && true}\r\n                                className=\"btn btn-success\"\r\n                                onClick={(e) => goButtonHandler(e, 1)}\r\n                            >\r\n                                Show\r\n                            </C_Button>\r\n\r\n                        </Col>\r\n\r\n                        <Col sm={2} className=\"mt-3 \">\r\n                            <C_Button\r\n                                type=\"button\"\r\n                                spinnerColor=\"white\"\r\n                                loading={btnMode === 2 && true}\r\n                                className=\"btn btn-primary\"\r\n                                onClick={(e) => goButtonHandler(e, 2)}\r\n                            >\r\n                                Excel Download\r\n                            </C_Button>\r\n                        </Col>\r\n                    </div>\r\n\r\n                </div>\r\n\r\n                <CustomTable\r\n                    keyField={\"id\"}\r\n                    data={tableData}\r\n                    columns={tableColumns}\r\n                    paginationEnabled={false}\r\n                    onDataSizeChange={({ dataCount }) => {\r\n                        dispatch(BreadcrumbShowCountlabel(`Count:${dataCount}`));\r\n                    }}\r\n                    noDataIndication={<div className=\"text-danger text-center table-cursor-pointer\"  >Data Not available</div>}\r\n                />\r\n            </div>\r\n            <C_Report />\r\n        </React.Fragment >\r\n    )\r\n}\r\n\r\nexport default StockReport;\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\CustomValidateForm\\C_Select.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Purchase\\Order\\OrderView.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Report\\StockReport\\reducer.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Report\\StockReport\\saga.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Report\\StockReport\\action.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Report\\StockReport\\actionType.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Sale\\SalesReturn\\SalesReturnList.js",["4154","4155","4156","4157","4158","4159","4160","4161","4162","4163","4164"],"import React, { useEffect, useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport {\r\n    commonPageFieldList,\r\n    commonPageFieldListSuccess,\r\n    getpdfReportdata\r\n} from \"../../../store/actions\";\r\nimport CommonPurchaseList from \"../../../components/Common/CommonPurchaseList\"\r\nimport { Col, FormGroup, Label } from \"reactstrap\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { initialFiledFunc } from \"../../../components/Common/validationFunction\";\r\nimport { GetVenderSupplierCustomer, GetVenderSupplierCustomerSuccess, Retailer_List, Retailer_List_Success } from \"../../../store/CommonAPI/SupplierRedux/actions\";\r\nimport { Go_Button, PageLoadingSpinner } from \"../../../components/Common/CommonButton\";\r\nimport SalesReturn from \"./SalesReturn\";\r\nimport { confirm_SalesReturn_Id, delete_SalesReturn_Id, delete_SalesReturn_Id_Succcess, post_Send_to_superStockiest_Id, salesReturnListAPI, salesReturnListAPISuccess } from \"../../../store/Sales/SalesReturnRedux/action\";\r\nimport { C_DatePicker, C_Select } from \"../../../CustomValidateForm\";\r\nimport * as _cfunc from \"../../../components/Common/CommonFunction\";\r\nimport { url, mode, pageId } from \"../../../routes/index\"\r\nimport SalesReturnView_Modal from \"./SalesReturnConfirm\";\r\nimport { customAlert } from \"../../../CustomAlert/ConfirmDialog\";\r\nimport * as report from '../../../Reports/ReportIndex'\r\nimport { ReturnPrint_API } from \"../../../helpers/backend_helper\";\r\nimport PartyDropdown_Common from \"../../../components/Common/PartyDropdown\";\r\n\r\nconst SalesReturnList = () => {\r\n\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n    const currentDate_ymd = _cfunc.date_ymd_func();\r\n\r\n    const fileds = {\r\n        FromDate: currentDate_ymd,\r\n        ToDate: currentDate_ymd,\r\n        Customer: { value: \"\", label: \"All\" }\r\n    }\r\n\r\n    const [state, setState] = useState(() => initialFiledFunc(fileds))\r\n\r\n    const [pageMode, setPageMode] = useState(mode.defaultList)\r\n    const [subPageMode, setSubPageMode] = useState(history.location.pathname);\r\n    const [otherState, setOtherState] = useState({ masterPath: '', newBtnPath: '', buttonMsgLable: '' });\r\n    const [PurchaseReturnMode_3_Access, setPurchaseReturnMode_3_Access] = useState(false)\r\n\r\n    let customerdropdownLabel = subPageMode === url.SALES_RETURN_LIST ? \"Customer\" : \"Supplier\"\r\n\r\n    const reducers = useSelector(\r\n        (state) => ({\r\n            sendToSSbtnLoading: state.SalesReturnReducer.sendToSSbtnLoading,\r\n            retailerDropLoading: state.CommonAPI_Reducer.retailerDropLoading,\r\n            vendorSupplierCustomerLoading: state.CommonAPI_Reducer.vendorSupplierCustomerLoading,\r\n            loading: state.SalesReturnReducer.loading,\r\n            supplier: state.CommonAPI_Reducer.vendorSupplierCustomer,\r\n            listBtnLoading: (state.SalesReturnReducer.listBtnLoading || state.PdfReportReducers.ReportBtnLoading),\r\n            tableList: state.SalesReturnReducer.salesReturnList,\r\n            sendToSSbtnTableData: state.SalesReturnReducer.sendToSSbtnTableData,\r\n            deleteMsg: state.SalesReturnReducer.deleteMsg,\r\n            RetailerList: state.CommonAPI_Reducer.RetailerList,\r\n            ReceiptType: state.ReceiptReducer.ReceiptType,\r\n            userAccess: state.Login.RoleAccessUpdateData,\r\n            pageField: state.CommonPageFieldReducer.pageFieldList,\r\n            ApprovrMsg: state.SalesReturnReducer.ApprovrMsg,\r\n        })\r\n    );\r\n\r\n    const { pageField, RetailerList, supplier, sendToSSbtnTableData, userAccess, ApprovrMsg, loading, sendToSSbtnLoading, retailerDropLoading, vendorSupplierCustomerLoading } = reducers;\r\n\r\n    const values = { ...state.values }\r\n\r\n    const action = {\r\n        getList: salesReturnListAPI,\r\n        deleteId: delete_SalesReturn_Id,\r\n        deleteSucc: delete_SalesReturn_Id_Succcess\r\n    }\r\n\r\n    // userAccess useEffect\r\n    useEffect(() => {\r\n\r\n        userAccess.find((index) => {\r\n            if (index.id === pageId.PURCHASE_RETURN_MODE_3) {\r\n                return setPurchaseReturnMode_3_Access(true)\r\n            }\r\n        });\r\n    }, [userAccess])\r\n\r\n    // Featch Modules List data  First Rendering\r\n    useEffect(() => {\r\n        let page_Id = '';\r\n        let page_Mode = mode.defaultList;\r\n        let masterPath = '';\r\n        let newBtnPath = false;\r\n        let buttonMsgLable = '';\r\n\r\n        if (subPageMode === url.PURCHASE_RETURN_LIST) {\r\n            page_Id = pageId.PURCHASE_RETURN_LIST\r\n            masterPath = url.PURCHASE_RETURN\r\n            newBtnPath = url.PURCHASE_RETURN\r\n            buttonMsgLable = \"Purchase Return\"\r\n        }\r\n        else if (subPageMode === url.SALES_RETURN_LIST) {\r\n            page_Id = pageId.SALES_RETURN_LIST;\r\n            masterPath = url.SALES_RETURN\r\n            newBtnPath = url.SALES_RETURN\r\n            buttonMsgLable = \"Sales Return\"\r\n        }\r\n        setPageMode(page_Mode)\r\n        setSubPageMode(subPageMode)\r\n        setOtherState({ masterPath, newBtnPath, buttonMsgLable })\r\n        dispatch(commonPageFieldListSuccess(null))\r\n        dispatch(commonPageFieldList(page_Id))\r\n        if (!(_cfunc.loginSelectedPartyID() === 0)) {\r\n            goButtonHandler()\r\n        }\r\n\r\n        return () => {\r\n            dispatch(salesReturnListAPISuccess([]));\r\n            dispatch(GetVenderSupplierCustomerSuccess([]));\r\n            dispatch(Retailer_List_Success([]));\r\n        }\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n\r\n        if ((sendToSSbtnTableData.Status === true) && (sendToSSbtnTableData.StatusCode === 200)) {\r\n            history.push({\r\n                pathname: url.PURCHASE_RETURN_MODE_3\r\n            })\r\n        }\r\n    }, [sendToSSbtnTableData])\r\n\r\n    useEffect(() => {\r\n        const jsonBody = JSON.stringify({\r\n            Type: 1,\r\n            PartyID: _cfunc.loginSelectedPartyID(),\r\n            CompanyID: _cfunc.loginCompanyID()\r\n        });\r\n        dispatch(Retailer_List(jsonBody));\r\n        dispatch(GetVenderSupplierCustomer({ subPageMode, PartyID: _cfunc.loginSelectedPartyID() }))\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if ((ApprovrMsg.Status === true) && (ApprovrMsg.StatusCode === 200)) {\r\n            goButtonHandler()\r\n        }\r\n    }, [ApprovrMsg])\r\n\r\n    const customerOptions = RetailerList.map((index) => ({\r\n        value: index.id,\r\n        label: index.Name,\r\n    }));\r\n\r\n    customerOptions.unshift({\r\n        value: \"\",\r\n        label: \" All\"\r\n    });\r\n\r\n    const supplierOptions = supplier.map((i) => ({\r\n        value: i.id,\r\n        label: i.Name,\r\n    }));\r\n\r\n    supplierOptions.unshift({\r\n        value: \"\",\r\n        label: \" All\"\r\n    });\r\n\r\n    const goButtonHandler = () => {\r\n\r\n        try {\r\n            if (_cfunc.loginSelectedPartyID() === 0) {\r\n                customAlert({ Type: 3, Message: \"Please Select Party\" });\r\n                return;\r\n            };\r\n            const salesReturnJsonBody = JSON.stringify({\r\n                FromDate: values.FromDate,\r\n                ToDate: values.ToDate,\r\n                CustomerID: values.Customer.value,\r\n                PartyID: _cfunc.loginSelectedPartyID(),\r\n            });\r\n            const purchaseReturnJsonBody = JSON.stringify({\r\n                FromDate: values.FromDate,\r\n                ToDate: values.ToDate,\r\n                CustomerID: _cfunc.loginSelectedPartyID(),\r\n                PartyID: values.Customer.value,\r\n            });\r\n\r\n            let jsonBody;\r\n            if (subPageMode === url.SALES_RETURN_LIST) {\r\n                jsonBody = (salesReturnJsonBody);\r\n            }\r\n            else {\r\n                jsonBody = (purchaseReturnJsonBody);\r\n            }\r\n            dispatch(salesReturnListAPI(jsonBody));\r\n        } catch (error) { }\r\n        return\r\n    };\r\n\r\n    function fromdateOnchange(e, date) {\r\n        setState((i) => {\r\n            const a = { ...i }\r\n            a.values.FromDate = date;\r\n            a.hasValid.FromDate.valid = true\r\n            return a\r\n        })\r\n    }\r\n\r\n    function todateOnchange(e, date) {\r\n        setState((i) => {\r\n            const a = { ...i }\r\n            a.values.ToDate = date;\r\n            a.hasValid.ToDate.valid = true\r\n            return a\r\n        })\r\n    }\r\n\r\n    function CustomerOnChange(e) {\r\n        setState((i) => {\r\n            const a = { ...i }\r\n            a.values.Customer = e;\r\n            a.hasValid.Customer.valid = true\r\n            return a\r\n        })\r\n    }\r\n\r\n    function viewApprovalBtnFunc(config) {\r\n        config[\"viewMode\"] = subPageMode\r\n        dispatch(confirm_SalesReturn_Id(config))\r\n    }\r\n\r\n    function downBtnFunc(config) {\r\n        config[\"ReportType\"] = report.Return;\r\n        dispatch(getpdfReportdata(ReturnPrint_API, config))\r\n    }\r\n\r\n    const partySelectButtonHandler = () => {\r\n        const jsonBody = JSON.stringify({\r\n            Type: 1,\r\n            PartyID: _cfunc.loginSelectedPartyID(),\r\n            CompanyID: _cfunc.loginCompanyID()\r\n        });\r\n        dispatch(Retailer_List(jsonBody));\r\n        dispatch(GetVenderSupplierCustomer({ subPageMode, PartyID: _cfunc.loginSelectedPartyID() }))\r\n        goButtonHandler()\r\n    }\r\n\r\n    function partySelectOnChangeHandler() {\r\n        dispatch(salesReturnListAPISuccess([]));\r\n        dispatch(Retailer_List_Success([]));\r\n        dispatch(GetVenderSupplierCustomerSuccess([]));\r\n\r\n        setState((i) => {\r\n            let a = { ...i }\r\n            a.values.Customer = { value: \"\", label: \"All\" }\r\n            a.hasValid.Customer.valid = true;\r\n            return a\r\n        })\r\n    }\r\n\r\n    const HeaderContent = () => {\r\n        return (\r\n            <div className=\"px-2   c_card_filter text-black\" >\r\n                <div className=\"row\" >\r\n                    <Col sm=\"3\" className=\"\">\r\n                        <FormGroup className=\"mb- row mt-3 \" >\r\n                            <Label className=\"col-sm-5 p-2\"\r\n                                style={{ width: \"83px\" }}>FromDate</Label>\r\n                            <Col sm=\"7\">\r\n                                <C_DatePicker\r\n                                    name='FromDate'\r\n                                    value={values.FromDate}\r\n                                    onChange={fromdateOnchange}\r\n                                />\r\n                            </Col>\r\n                        </FormGroup>\r\n                    </Col>\r\n\r\n                    <Col sm=\"3\" className=\"\">\r\n                        <FormGroup className=\"mb- row mt-3 \" >\r\n                            <Label className=\"col-sm-5 p-2\"\r\n                                style={{ width: \"65px\" }}>ToDate</Label>\r\n                            <Col sm=\"7\">\r\n                                <C_DatePicker\r\n                                    name=\"ToDate\"\r\n                                    value={values.ToDate}\r\n                                    onChange={todateOnchange}\r\n                                />\r\n                            </Col>\r\n                        </FormGroup>\r\n                    </Col>\r\n\r\n                    <Col sm=\"5\">\r\n                        <FormGroup className=\"mb-2 row mt-3 \" >\r\n                            <Label className=\"col-md-4 p-2\"\r\n\r\n                                style={{ width: \"115px\" }}>{customerdropdownLabel}</Label>\r\n                            <Col sm=\"5\">\r\n                                <C_Select\r\n                                    name=\"Customer\"\r\n                                    classNamePrefix=\"select2-Customer\"\r\n                                    value={values.Customer}\r\n                                    isLoading={subPageMode === url.SALES_RETURN_LIST ? retailerDropLoading : vendorSupplierCustomerLoading}\r\n                                    options={subPageMode === url.SALES_RETURN_LIST ? customerOptions : supplierOptions}\r\n                                    onChange={CustomerOnChange}\r\n                                    styles={{\r\n                                        menu: provided => ({ ...provided, zIndex: 2 })\r\n                                    }}\r\n                                />\r\n                            </Col>\r\n                        </FormGroup>\r\n                    </Col >\r\n\r\n                    <Col sm=\"1\" className=\"mt-3 \">\r\n                        <Go_Button loading={reducers.loading} onClick={goButtonHandler} />\r\n                    </Col>\r\n                </div>\r\n            </div >\r\n        )\r\n    }\r\n\r\n    const selectSaveBtnHandler = (row = []) => {\r\n\r\n        let ischeck = row.filter(i => (i.selectCheck))\r\n        if (!ischeck.length > 0) {\r\n            customAlert({\r\n                Type: 4,\r\n                Message: \"Please Select One Checkbox\",\r\n            });\r\n            return\r\n        }\r\n        let idString = ischeck.map(obj => obj.id).join(',')\r\n        let jsonBody = JSON.stringify({ PartyID: _cfunc.loginSelectedPartyID(), ReturnID: idString })\r\n        dispatch(post_Send_to_superStockiest_Id({ jsonBody, ReturnID: idString }))\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"page-content\">\r\n                <PageLoadingSpinner isLoading={(loading || !pageField)} />\r\n\r\n                <PartyDropdown_Common pageMode={pageMode}\r\n                    goButtonHandler={partySelectButtonHandler}\r\n                    changeButtonHandler={partySelectOnChangeHandler} />\r\n\r\n                {\r\n                    (pageField) ?\r\n                        <CommonPurchaseList\r\n                            action={action}\r\n                            reducers={reducers}\r\n                            showBreadcrumb={false}\r\n                            MasterModal={SalesReturn}\r\n                            masterPath={otherState.masterPath}\r\n                            newBtnPath={otherState.newBtnPath}\r\n                            pageMode={pageMode}\r\n                            viewApprovalBtnFunc={viewApprovalBtnFunc}\r\n                            HeaderContent={HeaderContent}\r\n                            downBtnFunc={downBtnFunc}\r\n                            goButnFunc={goButtonHandler}\r\n                            ButtonMsgLable={otherState.buttonMsgLable}\r\n                            deleteName={\"FullReturnNumber\"}\r\n                            totalAmountShow={true}\r\n                            selectCheckParams={{\r\n                                isShow: ((subPageMode === url.SALES_RETURN_LIST) && PurchaseReturnMode_3_Access),\r\n                                selectSaveBtnHandler: selectSaveBtnHandler,\r\n                                selectSaveBtnLabel: \"Send To Supplier\",\r\n                                selectHeaderLabel: \"Select\",\r\n                                selectSaveBtnLoading: sendToSSbtnLoading\r\n                            }}\r\n\r\n                        />\r\n                        : null\r\n                }\r\n            </div>\r\n            <SalesReturnView_Modal />\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default SalesReturnList;","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Sale\\SalesReturn\\SalesReturn.js",["4165","4166","4167","4168","4169","4170","4171","4172","4173","4174","4175","4176","4177","4178","4179","4180","4181","4182","4183","4184","4185","4186","4187","4188"],"import React, { useEffect, useState } from \"react\";\r\nimport {\r\n    Col,\r\n    FormGroup,\r\n    Label,\r\n    Input,\r\n    Row,\r\n    Button,\r\n    Modal,\r\n} from \"reactstrap\";\r\nimport { MetaTags } from \"react-meta-tags\";\r\nimport { BreadcrumbShowCountlabel, Breadcrumb_inputName, Retailer_List_Success, commonPageFieldSuccess, goButtonPartyItemAddPageSuccess } from \"../../../store/actions\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { commonPageField } from \"../../../store/actions\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {\r\n    comAddPageFieldFunc,\r\n    initialFiledFunc,\r\n    onChangeSelect,\r\n    onChangeText,\r\n    resetFunction,\r\n} from \"../../../components/Common/validationFunction\";\r\nimport Select from \"react-select\";\r\nimport { C_Button, SaveButton, } from \"../../../components/Common/CommonButton\";\r\nimport { url, mode, pageId } from \"../../../routes/index\"\r\nimport { Retailer_List } from \"../../../store/CommonAPI/SupplierRedux/actions\";\r\nimport { customAlert } from \"../../../CustomAlert/ConfirmDialog\";\r\nimport { postSelect_Field_for_dropdown } from \"../../../store/Administrator/PartyMasterBulkUpdateRedux/actions\";\r\nimport {\r\n    saveSalesReturnMaster,\r\n    InvoiceNumber,\r\n    InvoiceNumberSuccess,\r\n    saveSalesReturnMaster_Success,\r\n    SalesReturnAddBtn_Action,\r\n    SalesReturnAddBtn_Action_Succcess\r\n} from \"../../../store/Sales/SalesReturnRedux/action\";\r\nimport \"./salesReturn.scss\";\r\nimport { CInput, C_DatePicker, C_Select } from \"../../../CustomValidateForm/index\";\r\nimport { decimalRegx, } from \"../../../CustomValidateForm/RegexPattern\";\r\nimport { goButtonPartyItemAddPage } from \"../../../store/Administrator/PartyItemsRedux/action\";\r\nimport { return_discountCalculate_Func } from \"./SalesCalculation\";\r\nimport * as _cfunc from \"../../../components/Common/CommonFunction\";\r\nimport { mySearchProps } from \"../../../components/Common/SearchBox/MySearch\";\r\nimport BootstrapTable from \"react-bootstrap-table-next\";\r\nimport ToolkitProvider from \"react-bootstrap-table2-toolkit\";\r\nimport Slidewithcaption from \"../../../components/Common/CommonImageComponent\";\r\nimport NewCommonPartyDropdown from \"../../../components/Common/NewCommonPartyDropdown\";\r\n\r\nconst SalesReturn = (props) => {\r\n\r\n    const dispatch = useDispatch();\r\n    const history = useHistory()\r\n    const currentDate_ymd = _cfunc.date_ymd_func();\r\n    const { SaleableItemReasonID = '' } = _cfunc.loginSystemSetting();\r\n\r\n    const [pageMode] = useState(mode.defaultsave);\r\n    const [userPageAccessState, setUserAccState] = useState('');\r\n\r\n    const fileds = {\r\n        ReturnDate: currentDate_ymd,\r\n        Customer: \"\",\r\n        ItemName: \"\",\r\n        InvoiceNumber: \"\",\r\n        BatchCode: \"\",\r\n        Comment: \"\"\r\n    }\r\n\r\n    const [state, setState] = useState(initialFiledFunc(fileds))\r\n    const [discountDropOption] = useState([{ value: 1, label: \"Rs\" }, { value: 2, label: \"%\" }]);\r\n    const [TableArr, setTableArr] = useState([]);\r\n    const [ImageCount, setImageCount] = useState(0);\r\n\r\n    const [returnMode, setReturnMode] = useState(0); //(1==ItemWise) OR (2==invoiceWise)\r\n    const [imageTable, setImageTable] = useState([]);  // Selected Image Array\r\n\r\n    const [isSaleableStock, setIsSaleableStock] = useState(false);\r\n    const [ReturnReasonFilterData, setReturnReasonOptions] = useState([]);\r\n    const [filteredReasonArr, setFilteredReasonArr] = useState([]);\r\n    const [reasonArrExceptPartyID, setReasonArrExceptPartyID] = useState([]);\r\n\r\n    const [modal_backdrop, setmodal_backdrop] = useState(false);   // Image Model open Or not\r\n\r\n    //Access redux store Data /  'save_ModuleSuccess' action data\r\n    const {\r\n        postMsg,\r\n        RetailerList,\r\n        ItemList,\r\n        ReturnReasonListRedux,\r\n        InvoiceNo,\r\n        pageField,\r\n        userAccess,\r\n        addButtonData,\r\n        saveBtnloading,\r\n        addBtnLoading,\r\n        invoiceNoDropDownLoading,\r\n        retailerDropLoading,\r\n        commonPartyDropSelect\r\n    } = useSelector((state) => ({\r\n        addButtonData: state.SalesReturnReducer.addButtonData,\r\n        postMsg: state.SalesReturnReducer.postMsg,\r\n        RetailerList: state.CommonAPI_Reducer.RetailerList,\r\n        ItemList: state.PartyItemsReducer.partyItem,\r\n        ReturnReasonListRedux: state.PartyMasterBulkUpdateReducer.SelectField,\r\n        InvoiceNo: state.SalesReturnReducer.InvoiceNo,\r\n        userAccess: state.Login.RoleAccessUpdateData,\r\n        pageField: state.CommonPageFieldReducer.pageField,\r\n        saveBtnloading: state.SalesReturnReducer.saveBtnloading,\r\n        addBtnLoading: state.SalesReturnReducer.addBtnLoading,\r\n        invoiceNoDropDownLoading: state.SalesReturnReducer.invoiceNoDropDownLoading,\r\n        retailerDropLoading: state.CommonAPI_Reducer.retailerDropLoading,\r\n        commonPartyDropSelect: state.CommonPartyDropdownReducer.commonPartyDropSelect\r\n    }));\r\n\r\n    useEffect(() => {\r\n        dispatch(commonPageFieldSuccess(null));\r\n        dispatch(commonPageField(pageId.SALES_RETURN))\r\n        dispatch(BreadcrumbShowCountlabel(`${\"Total Amount\"} :${0}`))\r\n        return () => {\r\n            dispatch(Retailer_List_Success([]));\r\n        }\r\n    }, []);\r\n\r\n    // Common Party Dropdown useEffect\r\n    useEffect(() => {\r\n\r\n        if (commonPartyDropSelect.value > 0) {\r\n            const jsonBody = JSON.stringify({\r\n                Type: 1,\r\n                PartyID: commonPartyDropSelect.value,\r\n                CompanyID: _cfunc.loginCompanyID()\r\n            });\r\n            dispatch(Retailer_List(jsonBody));\r\n            dispatch(goButtonPartyItemAddPage({ jsonBody: JSON.stringify({ ..._cfunc.loginJsonBody(), \"PartyID\": commonPartyDropSelect.value }) }))\r\n        }\r\n\r\n        setState((i) => {\r\n\r\n            let a = { ...i }\r\n            a.values.Customer = \"\"\r\n            a.values.ItemName = \"\"\r\n            a.values.InvoiceNumber = ''\r\n\r\n            a.hasValid.Customer.valid = true;\r\n            a.hasValid.ItemName.valid = true;\r\n            a.hasValid.InvoiceNumber.valid = true;\r\n            return a\r\n        })\r\n        return () => {\r\n            dispatch(InvoiceNumberSuccess([]));\r\n            dispatch(goButtonPartyItemAddPageSuccess([]));\r\n            dispatch(Retailer_List_Success([]));\r\n            setTableArr([]);\r\n        }\r\n\r\n    }, [commonPartyDropSelect]);\r\n\r\n    useEffect(() => {\r\n        if (TableArr.length === 0) {\r\n            setReturnMode(0)\r\n        }\r\n    }, [TableArr]);\r\n\r\n    const location = { ...history.location }\r\n    const hasShowModal = props.hasOwnProperty(mode.editValue)\r\n\r\n    const values = { ...state.values }\r\n    const { isError } = state;\r\n    const { fieldLabel } = state;\r\n\r\n    useEffect(() => {// userAccess useEffect\r\n        let userAcc = null;\r\n        let locationPath = location.pathname;\r\n        if (hasShowModal) {\r\n            locationPath = props.masterPath;\r\n        };\r\n        userAcc = userAccess.find((inx) => {\r\n            return (`/${inx.ActualPagePath}` === locationPath)\r\n        })\r\n        if (userAcc) {\r\n            setUserAccState(userAcc)\r\n            _cfunc.breadcrumbReturnFunc({ dispatch, userAcc });\r\n        };\r\n    }, [userAccess])\r\n\r\n    useEffect(() => {// Return Reason dropdown Values\r\n        const jsonBody = JSON.stringify({\r\n            Company: _cfunc.loginCompanyID(),\r\n            TypeID: 8\r\n        });\r\n        dispatch(postSelect_Field_for_dropdown(jsonBody));\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (pageField) {\r\n            const fieldArr = pageField.PageFieldMaster\r\n            comAddPageFieldFunc({ state, setState, fieldArr })\r\n        }\r\n    }, [pageField])\r\n\r\n    useEffect(() => {\r\n        if ((postMsg.Status === true) && (postMsg.StatusCode === 200)) {\r\n            dispatch(saveSalesReturnMaster_Success({ Status: false }))\r\n            setTableArr([])\r\n            setState(() => resetFunction(fileds, state))// Clear form values  \r\n            dispatch(Breadcrumb_inputName(''))\r\n\r\n            if (pageMode === mode.dropdownAdd) {\r\n                customAlert({\r\n                    Type: 1,\r\n                    Message: postMsg.Message,\r\n                })\r\n            }\r\n            else {\r\n                let alterRepont = customAlert({\r\n                    Type: 1,\r\n                    Message: postMsg.Message,\r\n                })\r\n                if (alterRepont) {\r\n                    history.push({ pathname: url.SALES_RETURN_LIST })\r\n                }\r\n            }\r\n        }\r\n        else if (postMsg.Status === true) {\r\n            dispatch(saveSalesReturnMaster_Success({ Status: false }))\r\n            customAlert({\r\n                Type: 4,\r\n                Message: JSON.stringify(postMsg.Message),\r\n            })\r\n        }\r\n    }, [postMsg])\r\n\r\n    useEffect(() => {\r\n\r\n        if (addButtonData.StatusCode === 200 && addButtonData.Status === true) {\r\n            dispatch(SalesReturnAddBtn_Action_Succcess({ StatusCode: false }))\r\n            try {\r\n                const updateItemArr = [...TableArr];\r\n                let existingIds = updateItemArr.map(item => item.id);\r\n                let nextId = existingIds.length > 0 ? Math.max(...existingIds) + 1 : 1;\r\n\r\n                addButtonData.Data.forEach((i) => {\r\n                    const MRPOptions = i.ItemMRPDetails.map(i => ({ label: i.MRPValue, value: i.MRP, Rate: i.Rate }));\r\n                    const GSTOptions = i.ItemGSTDetails.map(i => ({ label: i.GSTPercentage, value: i.GST }));\r\n\r\n                    const highestMRP = i.ItemMRPDetails.reduce((prev, current) => {// Default highest GST when Return mode \"2==ItemWise\"\r\n                        return (prev.MRP > current.MRP) ? prev : current;\r\n                    }, '');\r\n\r\n                    const highestGST = i.ItemGSTDetails.reduce((prev, current) => {// Default  highest GST when Return mode \"2==ItemWise\"\r\n                        return (prev.GST > current.GST) ? prev : current;\r\n                    }, '');\r\n\r\n                    if (returnMode === 2) { //(returnMode === 2) ItemWise\r\n                        i.Rate = highestMRP.Rate || \"\";\r\n                        i.MRP = highestMRP.MRP || \"\";\r\n                        i.MRPValue = highestMRP.MRPValue || \"\";\r\n\r\n                        i.GST = highestGST.GST || \"\";\r\n                        i.GSTPercentage = highestGST.GSTPercentage || \"\";\r\n                    }\r\n\r\n                    const InvoiceQuantity = i.Quantity\r\n                    const newItemRow = {\r\n                        ...i,\r\n                        Quantity: '',\r\n                        InvoiceQuantity,\r\n                        id: nextId,\r\n                        MRPOptions,\r\n                        GSTOptions,\r\n                    }\r\n                    const caculate = return_discountCalculate_Func(newItemRow)\r\n                    newItemRow[\"roundedTotalAmount\"] = caculate.roundedTotalAmount;\r\n                    updateItemArr.push(newItemRow);\r\n                    nextId++;\r\n                });\r\n\r\n                let sumOfGrandTotal = updateItemArr.reduce((accumulator, currentObject) => accumulator + Number(currentObject[\"roundedTotalAmount\"]) || 0, 0);\r\n                let count_label = `${\"Total Amount\"} :${Number(sumOfGrandTotal).toLocaleString()}`\r\n                dispatch(BreadcrumbShowCountlabel(count_label));\r\n                updateItemArr.sort((a, b) => b.id - a.id);\r\n                setTableArr(updateItemArr);\r\n                setState((i) => {\r\n                    let a = { ...i }\r\n                    a.values.ItemName = \"\"\r\n                    a.hasValid.ItemName.valid = true;\r\n                    return a\r\n                })\r\n\r\n            } catch (error) { _cfunc.CommonConsole(error) }\r\n        }\r\n    }, [addButtonData])\r\n\r\n    //useeffect For image Mode set open\r\n    useEffect(() => {\r\n        if (imageTable.length > 0) {\r\n            setmodal_backdrop(true)\r\n        }\r\n    }, [imageTable])\r\n\r\n    const customerOptions = RetailerList.map((index) => ({\r\n        value: index.id,\r\n        label: index.Name,\r\n    }));\r\n\r\n    const itemList = ItemList.map((index) => ({\r\n        value: index.Item,\r\n        label: index.ItemName,\r\n        itemCheck: index.selectCheck\r\n    }));\r\n\r\n    const ItemList_Options = itemList.filter((index) => {\r\n        return index.itemCheck === true\r\n    });\r\n\r\n    useEffect(async () => {\r\n\r\n        try {\r\n            let partyIDsArray = SaleableItemReasonID.split(\",\").map(id => parseInt(id.trim(), 10));\r\n            let filteredReasons = ReturnReasonListRedux.filter(item => partyIDsArray.includes(item.id));\r\n            let reasonsExceptPartyID = ReturnReasonListRedux.filter(item => !partyIDsArray.includes(item.id));\r\n            setFilteredReasonArr(filteredReasons);\r\n            setReasonArrExceptPartyID(reasonsExceptPartyID);\r\n\r\n        } catch (e) { }\r\n\r\n    }, [ReturnReasonListRedux]);\r\n\r\n    useEffect(() => {\r\n\r\n        if (isSaleableStock) {\r\n            setReturnReasonOptions(filteredReasonArr);\r\n        } else {\r\n            setReturnReasonOptions(reasonArrExceptPartyID);\r\n        }\r\n    }, [isSaleableStock, filteredReasonArr, reasonArrExceptPartyID]);\r\n\r\n    const ReturnReasonOptions = ReturnReasonFilterData.map((index) => ({\r\n        value: index.id,\r\n        label: index.Name,\r\n    }));\r\n\r\n    const InvoiceNo_Options = InvoiceNo.map((index) => ({\r\n        value: index.Invoice,\r\n        label: index.FullInvoiceNumber,\r\n    }));\r\n\r\n    const pagesListColumns = [\r\n        {\r\n            text: \"Item Name\",\r\n            dataField: \"ItemName\",\r\n\r\n            formatter: (cell, row) => {\r\n                return (\r\n                    <Label style={{ minWidth: \"200px\" }}>{row.ItemName}</Label>\r\n                )\r\n            }\r\n        },\r\n\r\n        {\r\n            text: \"Invoice Qty\",\r\n            hidden: (returnMode === 1) ? false : true,\r\n            align: () => \"right\",\r\n            formatter: (cell, row) => <Label>{row.InvoiceQuantity}</Label>,\r\n\r\n        },\r\n        {\r\n            text: \"Quantity\",\r\n            dataField: \"\",\r\n            classes: () => \"sales-discount-row\",\r\n\r\n            formatExtraData: { TableArr },\r\n            formatter: (cell, row, key, { TableArr }) => {\r\n                return (\r\n                    <div className=\"parent\" >\r\n                        <div className=\"child\" style={{ minWidth: \"100px\" }}>\r\n                            <CInput\r\n\r\n                                defaultValue={row.Quantity}\r\n                                autoComplete=\"off\"\r\n                                type=\"text\"\r\n                                cpattern={decimalRegx}\r\n                                placeholder=\"Enter Quantity\"\r\n                                className=\"col col-sm text-end\"\r\n                                onChange={(event) => {\r\n                                    row[\"Quantity\"] = event.target.value;\r\n                                    totalAmountCalcuationFunc(row, TableArr)\r\n                                }}\r\n                            />\r\n                        </div>\r\n                        <div className=\"child mt-2 pl-1\">\r\n                            <label className=\"label\">&nbsp;{row.UnitName}</label>\r\n                        </div>\r\n\r\n                    </div>\r\n                )\r\n            }\r\n        },\r\n\r\n        {\r\n            text: \"MRP\",\r\n            dataField: \"MRP\",\r\n\r\n            formatExtraData: { TableArr },\r\n            formatter: (cell, row, key, { TableArr }) => {\r\n                return (\r\n                    <>\r\n                        <div style={{ minWidth: \"90px\" }}>\r\n                            <Select\r\n                                id={`MRP${key}`}\r\n                                name=\"MRP\"\r\n                                defaultValue={(row.MRP === \"\") ? \"\" : { value: row.MRP, label: row.MRPValue }}\r\n                                isSearchable={true}\r\n                                isDisabled={returnMode === 1 && true}\r\n                                className=\"react-dropdown\"\r\n                                classNamePrefix=\"dropdown\"\r\n                                options={row.MRPOptions}\r\n                                onChange={(event) => {\r\n                                    try {\r\n                                        row.MRP = event.value;\r\n                                        row.MRPValue = event.label;\r\n                                        row.Rate = event.Rate;\r\n                                        totalAmountCalcuationFunc(row, TableArr)\r\n                                        document.getElementById(`Rate-${key}-${row.id}`).value = event.Rate\r\n                                    } catch (error) {\r\n                                        _cfunc.CommonConsole(error)\r\n                                    }\r\n\r\n                                }}\r\n\r\n                            />\r\n                        </div>\r\n                    </>\r\n                )\r\n            }\r\n        },\r\n\r\n        {\r\n            text: \"GST\",\r\n            dataField: \"\",\r\n\r\n            formatExtraData: { TableArr },\r\n            formatter: (cell, row, key, { TableArr }) => {\r\n                return (<div style={{ minWidth: \"90px\" }}>\r\n                    <Select\r\n                        id={`GST${key}`}\r\n                        name=\"GST\"\r\n                        defaultValue={(row.GST === \"\") ? \"\" : { value: row.GST, label: row.GSTPercentage }}\r\n                        isSearchable={true}\r\n                        isDisabled={returnMode === 1 && true}\r\n                        className=\"react-dropdown\"\r\n                        classNamePrefix=\"dropdown\"\r\n                        options={row.GSTOptions}\r\n                        onChange={(event) => {\r\n                            row.GST = event.value;\r\n                            row.GSTPercentage = event.label;\r\n                            totalAmountCalcuationFunc(row, TableArr)\r\n                        }}\r\n                    />\r\n                </div>)\r\n            }\r\n        },\r\n        {\r\n            text: \"Basic Rate\",\r\n            dataField: \"\",\r\n\r\n            classes: () => \"sales-rate-row\",\r\n            formatExtraData: { TableArr },\r\n            formatter: (cellContent, row, key, { TableArr }) => {\r\n                if (!Number(row[\"DiscountType\"])) {\r\n                    row[\"DiscountType\"] = 2;\r\n                }\r\n                return (\r\n                    <>\r\n                        <div className=\"\">\r\n                            <div className=\"parent  mb-1\">\r\n                                <div className=\"child\">\r\n                                    <Select\r\n                                        id={`DicountType_${key}`}\r\n                                        classNamePrefix=\"select2-selection\"\r\n                                        defaultValue={discountDropOption[1]}\r\n                                        options={discountDropOption}\r\n                                        onChange={(e) => {\r\n                                            row.DiscountType = e.value;\r\n                                            row.Discount = ''\r\n                                            document.getElementById(`Discount-${key}`).value = ''//changr Discount value  by id\r\n                                            totalAmountCalcuationFunc(row, TableArr);\r\n                                        }}\r\n                                    />\r\n                                </div>\r\n                                <div className=\"child\">\r\n                                    <CInput\r\n                                        type=\"text\"\r\n                                        id={`Discount-${key}`}//this id use discount type onchange\r\n                                        placeholder=\"Dist.\"\r\n                                        className=\"text-end\"\r\n                                        cpattern={decimalRegx}\r\n                                        onChange={(e) => {\r\n                                            let e_val = Number(e.target.value);\r\n\r\n                                            // Check if discount type is \"percentage\"\r\n                                            if (Number(row.DiscountType) === 2) {// Discount type 2 represents \"percentage\"\r\n                                                // Limit the input to the range of 0 to 100\r\n                                                if (e_val >= 100) {\r\n                                                    e.target.value = 100; // Set the input value to 100 if it exceeds 100\r\n                                                } else if (!(e_val >= 0 && e_val < 100)) {\r\n                                                    e.target.value = \"\"; // Clear the input value if it is less than 0\r\n                                                }\r\n                                            }\r\n                                            row.Discount = e.target.value;\r\n                                            totalAmountCalcuationFunc(row, TableArr)\r\n                                        }}\r\n\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"parent\">\r\n                                <CInput\r\n                                    defaultValue={row.Rate}\r\n                                    id={`Rate-${key}-${row.id}`}//this id use discount type onchange\r\n                                    placeholder=\"Enter Rate\"\r\n                                    type=\"text\"\r\n                                    cpattern={decimalRegx}\r\n                                    className=\"text-end\"\r\n                                    onChange={(event) => {\r\n                                        row.Rate = event.target.value\r\n                                        totalAmountCalcuationFunc(row, TableArr)\r\n                                    }}\r\n                                />\r\n                            </div>\r\n\r\n                        </div>\r\n\r\n                    </>\r\n                );\r\n            },\r\n        },\r\n        {\r\n            text: \"Batch\",\r\n            dataField: \"\",\r\n            classes: () => \"sales-rate-row\",\r\n            formatter: (cell, row,) => {\r\n                return (\r\n                    <>\r\n                        <div className=\"\">\r\n                            <div className=\"parent mb-1\">\r\n                                <Input\r\n                                    defaultValue={row.BatchCode}\r\n                                    placeholder=\"Enter BatchCode\"\r\n                                    type=\"text\"\r\n                                    className=\"col col-sm text-center\"\r\n                                    onChange={(event) => { row.BatchCode = event.target.value }}\r\n                                />\r\n                            </div>\r\n                            <div className=\"parent\">\r\n                                <C_DatePicker\r\n                                    options={{\r\n                                        maxDate: 'today',\r\n                                        altInput: true,\r\n                                        altFormat: \"d-m-Y\",\r\n                                        dateFormat: \"Y-m-d\",\r\n                                    }}\r\n                                    placeholder=\"Enter BatchDate\"\r\n                                    defaultValue={row.BatchDate}\r\n                                    onChange={(e, date) => {\r\n                                        row.BatchDate = _cfunc.date_ymd_func(date)\r\n                                    }}\r\n                                />\r\n                            </div>\r\n\r\n                        </div>\r\n\r\n                    </>\r\n                );\r\n            },\r\n\r\n        },\r\n        {\r\n            text: \"Return Reason\",\r\n            dataField: \"\",\r\n            classes: () => \"sales-return-row\",\r\n            formatExtraData: { ReturnReasonOptions }, // Pass ReturnReasonOptions as part of formatExtraData\r\n\r\n            formatter: (cellContent, row, rowIndex, { ReturnReasonOptions }) => {\r\n                return (<>\r\n                    <div className=\"parent mb-1\">\r\n                        <div className=\"child\">\r\n                            <Select\r\n                                isSearchable={true}\r\n                                className=\"react-dropdown\"\r\n                                classNamePrefix=\"dropdown\"\r\n                                value={ReturnReasonOptions.find(option => option.value === row.defaultReason)}\r\n                                styles={{\r\n                                    menu: provided => ({ ...provided, zIndex: 2 })\r\n                                }}\r\n                                options={ReturnReasonOptions}\r\n                                onChange={event => {\r\n                                    row[\"defaultReason\"] = event.value;\r\n                                }}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"parent\">\r\n                        <div className=\"child\">\r\n                            <Input\r\n                                placeholder=\"Enter Comment\"\r\n                                defaultChecked={row.ItemComment}\r\n                                type=\"text\"\r\n                                onChange={(event) => { row.ItemComment = event.target.value }}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                </>\r\n                )\r\n            }\r\n        },\r\n\r\n        {\r\n            text: \"Image\",\r\n            dataField: \"\",\r\n            classes: () => \"sales-return-Image-row\",\r\n            formatExtraData: { ReturnReasonOptions }, // Pass ReturnReasonOptions as part of formatExtraData\r\n\r\n\r\n            formatter: (cellContent, row, key) => {\r\n\r\n                return (<span style={{ justifyContent: 'center', width: \"100px\" }}>\r\n                    <div>\r\n                        <div className=\"btn-group btn-group-example mb-3\" role=\"group\">\r\n                            <Input\r\n                                type=\"file\"\r\n                                className=\"form-control \"\r\n                                name=\"image\"\r\n                                multiple\r\n                                id=\"file\"\r\n                                accept=\".jpg, .jpeg, .png ,.pdf\"\r\n                                onChange={(event) => { imageSelectHandler(event, row) }}\r\n                            />\r\n                            <button name=\"image\"\r\n                                accept=\".jpg, .jpeg, .png ,.pdf\"\r\n                                onClick={(event) => {\r\n                                    if ((row.ImageURL) && (row.ImageURL.length === 0)) {\r\n                                        return setmodal_backdrop(false)\r\n                                    } else if ((row.ImageURL) && (row.ImageURL.length > 0)) {\r\n                                        imageShowHandler(row)\r\n                                    }\r\n                                }}\r\n                                id=\"ImageId\" type=\"button\" className=\"btn btn-primary \"> Show </button>\r\n                        </div>\r\n                        {/* Image Count: {row && row.ImageURL ? ImageCount : 0} */}\r\n                    </div>\r\n\r\n\r\n                </span>)\r\n            }\r\n        },\r\n        {\r\n            text: \"Action \",\r\n            dataField: \"\",\r\n            hidden: returnMode === 1 ? true : false,\r\n            formatExtraData: { TableArr },\r\n            formatter: (cellContent, row, key, { TableArr }) => (\r\n                <>\r\n                    <div style={{ justifyContent: 'center' }} >\r\n                        <Col>\r\n                            <FormGroup className=\" col col-sm-4 \">\r\n                                <Button\r\n                                    id={\"deleteid\"}\r\n                                    type=\"button\"\r\n                                    className=\"badge badge-soft-danger font-size-12 btn btn-danger waves-effect waves-light w-xxs border border-light\"\r\n                                    data-mdb-toggle=\"tooltip\" data-mdb-placement=\"top\" title='Delete MRP'\r\n                                    onClick={(e) => { deleteButtonAction(row, TableArr) }}>\r\n                                    <i className=\"mdi mdi-delete font-size-18\"></i>\r\n                                </Button>\r\n                            </FormGroup>\r\n                        </Col>\r\n                    </div>\r\n                </>\r\n            ),\r\n        },\r\n    ];\r\n\r\n    const totalAmountCalcuationFunc = (row, TablelistArray = []) => {\r\n        const caculate = return_discountCalculate_Func(row)\r\n        row.roundedTotalAmount = caculate.roundedTotalAmount;\r\n\r\n        let sumOfGrandTotal = TablelistArray.reduce((accumulator, currentObject) => accumulator + Number(currentObject[\"roundedTotalAmount\"]) || 0, 0);\r\n        let count_label = `${\"Total Amount\"} :${Number(sumOfGrandTotal).toLocaleString()}`\r\n        dispatch(BreadcrumbShowCountlabel(count_label))\r\n    }\r\n\r\n    const deleteButtonAction = (row, TablelistArray = []) => {\r\n        const newArr = TablelistArray.filter((index) => !(index.id === row.id))\r\n        let sumOfGrandTotal = newArr.reduce((accumulator, currentObject) => accumulator + Number(currentObject[\"roundedTotalAmount\"]) || 0, 0);\r\n        let count_label = `${\"Total Amount\"} :${Number(sumOfGrandTotal).toLocaleString()}`\r\n        dispatch(BreadcrumbShowCountlabel(count_label));\r\n        setTableArr(newArr)\r\n    }\r\n\r\n    const ReturnDate_Onchange = (e, date) => {\r\n        setState((i) => {\r\n            const a = { ...i }\r\n            a.values.ReturnDate = date;\r\n            a.hasValid.ReturnDate.valid = true\r\n            return a\r\n        })\r\n    }\r\n\r\n    const AddPartyHandler = async (byType) => {\r\n\r\n        const invalidMsg1 = []\r\n        if ((values.ItemName === '') && (byType === 'ItemWise')) {\r\n            invalidMsg1.push(`Select Item Name`)\r\n        }\r\n        if ((values.InvoiceNumber === '') && (values.Customer === '') && (byType === 'InvoiceWise')) {\r\n            invalidMsg1.push(`Select ${fieldLabel.Customer}.`)\r\n        }\r\n        else if ((values.InvoiceNumber === '') && (byType === 'InvoiceWise')) {\r\n            invalidMsg1.push(`Select Invoice No.`)\r\n        }\r\n\r\n        if (invalidMsg1.length > 0) {\r\n            customAlert({\r\n                Type: 4,\r\n                Message: JSON.stringify(invalidMsg1)\r\n            })\r\n            return\r\n        }\r\n\r\n        const jsonBody = JSON.stringify({\r\n            \"ItemID\": values.ItemName.value,\r\n            \"BatchCode\": values.BatchCode,\r\n            \"Customer\": values.Customer.value // Customer Swipe when Po return\r\n        })\r\n\r\n        const InvoiceId = values.InvoiceNumber ? values.InvoiceNumber.value : ''\r\n        const nrwReturnMode = (byType === 'ItemWise') ? 2 : 1 //(returnMode === 2) ItemWise\r\n        dispatch(SalesReturnAddBtn_Action({ jsonBody, InvoiceId, returnMode: nrwReturnMode }))\r\n        setReturnMode(nrwReturnMode)\r\n    }\r\n\r\n    const RetailerHandler = (event) => {\r\n        setState((i) => {\r\n            let a = { ...i }\r\n            a.values.ItemName = \"\"\r\n            a.values.InvoiceNumber = \"\"\r\n            a.values.Customer = event\r\n\r\n            a.hasValid.Customer.valid = true;\r\n            a.hasValid.ItemName.valid = true;\r\n            a.hasValid.InvoiceNumber.valid = true;\r\n\r\n            return a\r\n        })\r\n        setTableArr([])\r\n\r\n        const jsonBody = JSON.stringify({\r\n            PartyID: commonPartyDropSelect.value,\r\n            CustomerID: event.value\r\n        });\r\n\r\n        dispatch(InvoiceNumber(jsonBody));\r\n    }\r\n\r\n    const RetailerOnCancelClickHandler = () => {\r\n        setState((i) => {\r\n            let a = { ...i }\r\n            a.values.ItemName = \"\"\r\n            a.values.InvoiceNumber = \"\"\r\n            a.values.Customer = ''\r\n\r\n            a.hasValid.Customer.valid = true;\r\n            a.hasValid.ItemName.valid = true;\r\n            a.hasValid.InvoiceNumber.valid = true;\r\n            return a\r\n        })\r\n        setTableArr([])\r\n    }\r\n\r\n    const itemNameOnChangeHandler = (hasSelect, evn) => {\r\n        if (values.Customer === \"\") {\r\n            customAlert({ Type: 3, Message: `Please select ${fieldLabel.Customer}` })\r\n            return\r\n        }\r\n        onChangeSelect({ hasSelect, evn, state, setState, })\r\n        setReturnMode(2)\r\n    }\r\n\r\n    const imageSelectHandler = async (event, row) => { // image Select  handler\r\n\r\n        const file = Array.from(event.target.files)\r\n        const slides = file.map(item => {  //Create File to URl to Show Image of Particular row\r\n            return URL.createObjectURL(item);\r\n        })\r\n        row[\"Image\"] = file\r\n        row[\"ImageURL\"] = slides\r\n        setImageCount(slides.length)\r\n    }\r\n\r\n    const imageShowHandler = async (row) => { // image Show handler\r\n        const file = Array.from(row.Image)\r\n        const slides = file.map(item => {\r\n            return URL.createObjectURL(item);\r\n        })\r\n        setImageTable(slides)\r\n    }\r\n\r\n    const SaveHandler = async (event) => {\r\n        event.preventDefault();\r\n        const btnId = event.target.id;\r\n        let grand_total = 0;\r\n        const invalidMessages = [];\r\n\r\n        const filterData = TableArr.filter((i) => {\r\n            if (i.Quantity > 0) {\r\n                let msgString = ' Please Select';\r\n\r\n                if (i.MRP === '') { msgString = msgString + ', ' + \"MRP\" };\r\n                if (i.GST === '') { msgString = msgString + ', ' + \"GST\" };\r\n                if (i.BatchCode === '') { msgString = msgString + ', ' + \"BatchCode\" };\r\n                if (i.BatchDate === '') { msgString = msgString + ', ' + \"BatchDate\" };\r\n                if (!(Number(i.Rate) > 0)) { msgString = msgString + ', ' + \"Rate\" };\r\n                if (!i.defaultReason) { msgString = msgString + ', ' + \"Return Reason\" };\r\n\r\n                if (((!i.defaultReason) || (i.MRP === '') || (i.GST === '')\r\n                    || (i.BatchCode === '') || (i.BatchDate === '') || !(Number(i.Rate) > 0))) {\r\n                    invalidMessages.push({ [i.ItemName]: msgString });\r\n                }\r\n                return true\r\n            }\r\n        });\r\n\r\n\r\n        if (invalidMessages.length > 0) {\r\n            customAlert({\r\n                Type: 4,\r\n                Message: invalidMessages,\r\n            });\r\n            return;\r\n        }\r\n\r\n        if (filterData.length === 0) {\r\n            customAlert({\r\n                Type: 4,\r\n                Message: \"Please Enter One Item Quantity\",\r\n            });\r\n            return;\r\n        }\r\n        const formData = new FormData(); // Create a new FormData object\r\n\r\n        const ReturnItems = filterData.map((i, key) => {\r\n\r\n            if (!i.defaultReason) {\r\n                invalidMessages.append(i.ItemName, 'Select Return Reason'); // Add error message to FormData\r\n            }\r\n\r\n            const calculate = return_discountCalculate_Func(i);\r\n            grand_total += Number(calculate.roundedTotalAmount);\r\n\r\n            let ToatlImages = []\r\n            if (i.Image !== undefined) {\r\n                ToatlImages = Array.from(i.Image).map((item, key) => {\r\n                    formData.append(`uploaded_images_${i.Item}`, i.Image[key]);  //Sending image As a file \r\n                    return { Item_pic: `Purchase Return Image Count${key}` }\r\n                })\r\n            } else {\r\n                ToatlImages = []\r\n            }\r\n\r\n            return {\r\n                \"Item\": i.Item,\r\n                \"ItemName\": i.ItemName,\r\n                \"ApprovedQuantity\": i.Quantity,\r\n                \"Quantity\": i.Quantity,\r\n                \"Unit\": i.Unit,\r\n                \"BaseUnitQuantity\": i.BaseUnitQuantity,\r\n                \"BatchCode\": i.BatchCode,\r\n                \"BatchDate\": i.BatchDate,\r\n                \"BatchID\": 1,  //when Mode=1 then BatchID=1\r\n                \"MRP\": i.MRP,\r\n                \"MRPValue\": i.MRPValue,\r\n                \"Rate\": i.Rate,\r\n                \"GST\": i.GST,\r\n                \"ItemReason\": i.defaultReason ? i.defaultReason : \"\",\r\n                \"Comment\": i.ItemComment,\r\n                \"CGST\": Number(calculate.CGST_Amount).toFixed(2),\r\n                \"SGST\": Number(calculate.SGST_Amount).toFixed(2),\r\n                \"IGST\": Number(calculate.IGST_Amount).toFixed(2),\r\n                \"GSTPercentage\": calculate.GST_Percentage,\r\n                \"CGSTPercentage\": calculate.CGST_Percentage,\r\n                \"SGSTPercentage\": calculate.SGST_Percentage,\r\n                \"IGSTPercentage\": calculate.IGST_Percentage,\r\n                \"BasicAmount\": Number(calculate.discountBaseAmt).toFixed(2),\r\n                \"GSTAmount\": Number(calculate.roundedGstAmount).toFixed(2),\r\n                \"Amount\": Number(calculate.roundedTotalAmount).toFixed(2),\r\n                \"TaxType\": 'GST',\r\n                \"DiscountType\": calculate.discountType,\r\n                \"Discount\": calculate.discount,\r\n                \"DiscountAmount\": Number(calculate.disCountAmt).toFixed(2),\r\n                \"PurchaseReturn\": \"\",\r\n                \"SubReturn\": \"\",\r\n                \"ReturnItemImages\": ToatlImages,\r\n            };\r\n        });\r\n\r\n        try {\r\n            formData.append('ReturnDate', values.ReturnDate);\r\n            formData.append('ReturnReasonOptions', isSaleableStock ? 1 : 0);\r\n            formData.append('BatchCode', values.BatchCode);\r\n            formData.append('Customer', values.Customer.value);\r\n            formData.append('Party', commonPartyDropSelect.value);\r\n            formData.append('Comment', values.Comment);\r\n            formData.append('GrandTotal', Number(grand_total).toFixed(2));\r\n            formData.append('RoundOffAmount', (grand_total - Math.trunc(grand_total)).toFixed(2));\r\n            formData.append('CreatedBy', _cfunc.loginUserID());\r\n            formData.append('UpdatedBy', _cfunc.loginUserID());\r\n            formData.append('Mode', 1);\r\n            formData.append('IsApproved', 1);\r\n            formData.append('PurchaseReturnReferences', JSON.stringify([])); // Convert to JSON string\r\n            formData.append('ReturnItems', JSON.stringify(ReturnItems)); // Convert to JSON string\r\n\r\n            dispatch(saveSalesReturnMaster({ formData, btnId })); // Send FormData as the payload\r\n        } catch (e) {\r\n            _cfunc.CommonConsole(e);\r\n        }\r\n    };\r\n\r\n    function tog_backdrop() {\r\n        setmodal_backdrop(!modal_backdrop)\r\n        removeBodyCss()\r\n    }\r\n    function removeBodyCss() {\r\n        document.body.classList.add(\"no_padding\")\r\n    }\r\n\r\n    if (!(userPageAccessState === '')) {\r\n        return (\r\n            <React.Fragment>\r\n                <MetaTags>{_cfunc.metaTagLabel(userPageAccessState)}</MetaTags>\r\n\r\n                <div className=\"page-content\" >\r\n                    <NewCommonPartyDropdown pageMode={pageMode} />\r\n                    <Modal\r\n                        isOpen={modal_backdrop}\r\n                        toggle={() => {\r\n                            tog_backdrop()\r\n                        }}\r\n\r\n                        style={{ width: \"800px\", height: \"800px\", borderRadius: \"50%\" }}\r\n                        className=\"modal-dialog-centered \"\r\n\r\n                    >\r\n                        {(imageTable.length > 0) && <Slidewithcaption Images={imageTable} />}\r\n                    </Modal>\r\n\r\n                    <form noValidate>\r\n                        <div className=\"px-2 c_card_filter header text-black mb-1\" >\r\n                            <Row>\r\n                                <Col sm=\"6\">\r\n                                    <FormGroup className=\"row mt-2\" >\r\n                                        <Label className=\"col-sm-1 p-2\"\r\n                                            style={{ width: \"115px\", marginRight: \"0.4cm\" }}>{fieldLabel.ReturnDate}  </Label>\r\n                                        <Col sm=\"7\">\r\n                                            <C_DatePicker\r\n                                                name='ReturnDate'\r\n                                                value={values.ReturnDate}\r\n                                                onChange={ReturnDate_Onchange}\r\n                                            />\r\n                                        </Col>\r\n                                    </FormGroup>\r\n                                </Col >\r\n\r\n                                <Col sm=\"6\">\r\n                                    <FormGroup className=\" row mt-2 \" >\r\n                                        <Label className=\"col-sm-1 p-2\"\r\n                                            style={{ width: \"115px\", marginRight: \"0.4cm\" }}>{fieldLabel.Customer} </Label>\r\n                                        <Col sm=\"7\">\r\n                                            <C_Select\r\n                                                id=\"Customer \"\r\n                                                name=\"Customer\"\r\n                                                value={values.Customer}\r\n                                                isSearchable={true}\r\n                                                isLoading={retailerDropLoading}\r\n                                                isDisabled={((TableArr.length > 0)) ? true : false}\r\n                                                options={customerOptions}\r\n                                                styles={{\r\n                                                    menu: provided => ({ ...provided, zIndex: 2 })\r\n                                                }}\r\n                                                onChange={RetailerHandler}\r\n                                                onCancelClick={RetailerOnCancelClickHandler}\r\n                                            />\r\n                                            {isError.Customer.length > 0 && (\r\n                                                <span className=\"text-danger f-8\"><small>{isError.Customer}</small></span>\r\n                                            )}\r\n                                        </Col>\r\n\r\n                                    </FormGroup>\r\n                                </Col >\r\n                            </Row>\r\n\r\n                            <Row>\r\n                                <Col sm=\"6\">\r\n                                    <FormGroup className=\" row mt-1 \" >\r\n                                        <Label className=\"col-sm-1 p-2\"\r\n                                            style={{ width: \"115px\", marginRight: \"0.4cm\" }}>{fieldLabel.ItemName} </Label>\r\n                                        <Col sm=\"7\">\r\n                                            <C_Select\r\n                                                id=\"ItemName \"\r\n                                                name=\"ItemName\"\r\n                                                value={values.ItemName}\r\n                                                isDisabled={(returnMode === 1) ? true : false}\r\n                                                isSearchable={true}\r\n                                                className=\"react-dropdown\"\r\n                                                classNamePrefix=\"dropdown\"\r\n                                                styles={{\r\n                                                    menu: provided => ({ ...provided, zIndex: 2 })\r\n                                                }}\r\n\r\n                                                options={ItemList_Options}\r\n                                                onChange={itemNameOnChangeHandler}\r\n                                            />\r\n                                        </Col>\r\n                                    </FormGroup>\r\n                                </Col >\r\n\r\n                                <Col sm=\"6\">\r\n                                    <FormGroup className=\" row mt-1 \" >\r\n                                        <Label className=\"col-sm-1 p-2\"\r\n                                            style={{ width: \"115px\", marginRight: \"0.4cm\" }}>{fieldLabel.Comment} </Label>\r\n                                        <Col sm=\"7\">\r\n                                            <Input\r\n                                                name=\"Comment\"\r\n                                                id=\"Comment\"\r\n                                                value={values.Comment}\r\n                                                type=\"text\"\r\n                                                className={isError.Comment.length > 0 ? \"is-invalid form-control\" : \"form-control\"}\r\n                                                placeholder=\"Enter Comment\"\r\n                                                autoComplete='off'\r\n                                                onChange={(event) => {\r\n                                                    onChangeText({ event, state, setState })\r\n                                                }}\r\n                                            />\r\n                                            {isError.Comment.length > 0 && (\r\n                                                <span className=\"invalid-feedback\">{isError.Comment}</span>\r\n                                            )}\r\n                                        </Col>\r\n\r\n                                    </FormGroup>\r\n                                </Col >\r\n                            </Row>\r\n\r\n                            <Row>\r\n                                <Col sm=\"6\">\r\n                                    <FormGroup className=\" row mt-1 \" >\r\n                                        <Label className=\"col-sm-1 p-2\"\r\n                                            style={{ width: \"115px\", marginRight: \"0.4cm\" }}>{fieldLabel.BatchCode}</Label>\r\n                                        <Col sm=\"7\">\r\n                                            <Input\r\n                                                name=\"BatchCode\"\r\n                                                value={values.BatchCode}\r\n                                                placeholder=\"Enter BatchCode\"\r\n                                                type='text'\r\n                                                onChange={(event) => {\r\n                                                    onChangeText({ event, state, setState })\r\n                                                }}\r\n                                            />\r\n                                            {isError.BatchCode.length > 0 && (\r\n                                                <span className=\"text-danger f-8\"><small>{isError.BatchCode}</small></span>\r\n                                            )}\r\n\r\n\r\n                                        </Col>\r\n\r\n                                        <Col sm=\"1\" className=\"mx-6 mt-1\">\r\n\r\n                                            {(!(returnMode === 1)) &&///(returnMode === 1) InvoiceWise */}\r\n                                                <C_Button\r\n                                                    type=\"button\"\r\n                                                    loading={addBtnLoading}\r\n                                                    className=\"btn btn-outline-primary border-1 font-size-12 text-center\"\r\n                                                    onClick={() => AddPartyHandler(\"ItemWise\")}\r\n                                                >\r\n                                                    Add\r\n                                                </C_Button>\r\n                                            }\r\n\r\n                                        </Col>\r\n                                    </FormGroup>\r\n                                </Col >\r\n\r\n                                <Col sm=\"6\">\r\n                                    <FormGroup className=\" row mt-1 \" >\r\n                                        <Label className=\"col-sm-1 p-2\"\r\n                                            style={{ width: \"115px\", marginRight: \"0.4cm\" }}>IsSaleableStock</Label>\r\n                                        <Col sm=\"7\">\r\n                                            <Input\r\n                                                style={{ marginRight: \"0.4cm\", marginTop: \"10px\", width: \"15px\", height: \"15px\" }}\r\n                                                type=\"checkbox\"\r\n                                                disabled={TableArr.length > 0 && true}\r\n                                                defaultChecked={isSaleableStock}\r\n                                                onChange={(event) => { setIsSaleableStock(event.target.checked) }}\r\n                                            />\r\n\r\n                                        </Col>\r\n\r\n                                    </FormGroup>\r\n                                </Col >\r\n\r\n                                {/* <Col sm=\"6\">\r\n                                    <FormGroup className=\" row mt-1 \" >\r\n                                        <Label className=\"col-sm-1 p-2\"\r\n                                            style={{ width: \"115px\", marginRight: \"0.4cm\" }}>  {fieldLabel.InvoiceNumber}</Label>\r\n                                        <Col sm=\"7\">\r\n                                            <C_Select\r\n                                                id=\"InvoiceNumber \"\r\n                                                name=\"InvoiceNumber\"\r\n                                                value={values.InvoiceNumber}\r\n                                                //(returnMode === 2) ItemWise\r\n                                                isDisabled={((returnMode === 2) || invoiceNoDropDownLoading || (TableArr.length > 0)) ? true : false}\r\n                                                isSearchable={true}\r\n                                                isLoading={invoiceNoDropDownLoading}\r\n                                                styles={{\r\n                                                    menu: provided => ({ ...provided, zIndex: 2 })\r\n                                                }}\r\n                                                options={InvoiceNo_Options}\r\n                                                onChange={(hasSelect, evn) => {\r\n                                                    onChangeSelect({ hasSelect, evn, state, setState, })\r\n                                                    setReturnMode(1)\r\n                                                }}\r\n                                            />\r\n\r\n                                        </Col>\r\n                                        <Col sm=\"1\" className=\"mx-6 mt-1 \">\r\n                                            {((TableArr.length > 0) || (!(values.ItemName === \"\"))) ?\r\n                                                <Change_Button onClick={(e) => {\r\n                                                    setTableArr([])\r\n                                                    setState((i) => {\r\n                                                        let a = { ...i }\r\n                                                        a.values.ItemName = \"\"\r\n                                                        a.values.InvoiceNumber = \"\"\r\n                                                        return a\r\n                                                    })\r\n                                                }} />\r\n                                                :\r\n                                                (!(returnMode === 2)) &&//(returnMode === 2) ItemWise\r\n                                                <C_Button\r\n                                                    type=\"button\"\r\n                                                    loading={addBtnLoading}\r\n                                                    className=\"btn btn-outline-primary border-1 font-size-12 text-center\"\r\n                                                    onClick={() => AddPartyHandler(\"InvoiceWise\")}>\r\n                                                    Select\r\n                                                </C_Button>\r\n\r\n                                            }\r\n                                        </Col>\r\n                                    </FormGroup>\r\n                                </Col > */}\r\n\r\n                            </Row>\r\n                        </div>\r\n\r\n                        <div>\r\n                            <ToolkitProvider\r\n                                keyField={\"id\"}\r\n                                data={TableArr}\r\n                                columns={pagesListColumns}\r\n                                search\r\n                            >\r\n                                {(toolkitProps) => (\r\n                                    <React.Fragment>\r\n                                        <Row>\r\n                                            <Col xl=\"12\">\r\n                                                <div className=\"table-responsive table\" style={{ minHeight: \"60vh\" }}>\r\n                                                    <BootstrapTable\r\n                                                        keyField={\"id\"}\r\n                                                        key={`table-key-${returnMode}`}\r\n                                                        id=\"table_Arrow\"\r\n                                                        classes={\"table  table-bordered \"}\r\n                                                        noDataIndication={\r\n                                                            <div className=\"text-danger text-center \">\r\n                                                                Items Not available\r\n                                                            </div>\r\n                                                        }\r\n                                                        {...toolkitProps.baseProps}\r\n                                                        onDataSizeChange={(e) => {\r\n                                                            _cfunc.tableInputArrowUpDounFunc(\"#table_Arrow\")\r\n                                                        }}\r\n                                                    />\r\n                                                </div>\r\n                                            </Col>\r\n                                            {mySearchProps(toolkitProps.searchProps,)}\r\n                                        </Row>\r\n\r\n                                    </React.Fragment>\r\n                                )}\r\n                            </ToolkitProvider>\r\n                        </div>\r\n\r\n                        {\r\n                            TableArr.length > 0 ?\r\n                                <FormGroup>\r\n                                    <Col sm={2} style={{ marginLeft: \"-40px\" }} className={\"row save1\"}>\r\n                                        <SaveButton\r\n                                            pageMode={pageMode}\r\n                                            forceDisabled={addBtnLoading}\r\n                                            loading={saveBtnloading}\r\n                                            onClick={SaveHandler}\r\n                                            userAcc={userPageAccessState}\r\n                                            module={\"SalesReturn\"}\r\n                                        />\r\n\r\n                                    </Col>\r\n                                </FormGroup >\r\n                                : null\r\n                        }\r\n\r\n                    </form >\r\n                </div >\r\n            </React.Fragment >\r\n        );\r\n    }\r\n    else {\r\n        return (\r\n            <React.Fragment></React.Fragment>\r\n        )\r\n    }\r\n};\r\n\r\nexport default SalesReturn\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Sale\\LoadingSheet\\LoadingSheetUpdate.js",["4189","4190","4191","4192","4193","4194","4195","4196","4197","4198"],"import React, { useEffect, useState } from \"react\";\r\nimport {\r\n    Col,\r\n    FormGroup,\r\n    Label,\r\n    Button,\r\n    Spinner\r\n} from \"reactstrap\";\r\nimport { MetaTags } from \"react-meta-tags\";\r\nimport { commonPageFieldSuccess } from \"../../../store/actions\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { commonPageField } from \"../../../store/actions\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { url, mode, pageId } from \"../../../routes/index\"\r\nimport { LoadingSheet_GoBtn_API_Succcess, UpdateLoadingSheetSucccess } from \"../../../store/Sales/LoadingSheetRedux/action\";\r\nimport ToolkitProvider from \"react-bootstrap-table2-toolkit\";\r\nimport BootstrapTable from \"react-bootstrap-table-next\";\r\nimport { mySearchProps } from \"../../../components/Common/SearchBox/MySearch\";\r\nimport { GetOpeningBalance, ReceiptGoButtonMaster, ReceiptGoButtonMaster_Success } from \"../../../store/Accounting/Receipt/action\";\r\nimport { customAlert } from \"../../../CustomAlert/ConfirmDialog\";\r\nimport DynamicColumnHook, { selectAllCheck } from \"../../../components/Common/TableCommonFunc\";\r\nimport { C_DatePicker } from \"../../../CustomValidateForm\";\r\nimport * as _cfunc from \"../../../components/Common/CommonFunction\";\r\n\r\nconst LoadingSheetUpdate = (props) => {\r\n\r\n    const dispatch = useDispatch();\r\n    const history = useHistory()\r\n    const currentDate_ymd = _cfunc.date_ymd_func();\r\n\r\n    const [subPageMode] = useState(history.location.pathname)\r\n    const [userPageAccessState, setUserAccState] = useState('');\r\n    const [loadingDate, setLoadingDate] = useState(currentDate_ymd);\r\n    const [tableListData, setTableListData] = useState([]);\r\n    const [partyDetails, setPartyDetails] = useState({});\r\n\r\n    const {\r\n        listBtnLoading,\r\n        userAccess,\r\n        LoadingSheetUpdateList,\r\n        makeReceipt,\r\n        OpeningBalance,\r\n        pageField,\r\n        commonPartyDropSelect\r\n    } = useSelector((state) => ({\r\n        listBtnLoading: state.ReceiptReducer.listBtnLoading,\r\n        LoadingSheetUpdateList: state.LoadingSheetReducer.LoadingSheetUpdate,\r\n        userAccess: state.Login.RoleAccessUpdateData,\r\n        pageField: state.CommonPageFieldReducer.pageField,\r\n        makeReceipt: state.ReceiptReducer.ReceiptGoButton,\r\n        OpeningBalance: state.ReceiptReducer.OpeningBalance,\r\n        commonPartyDropSelect: state.CommonPartyDropdownReducer.commonPartyDropSelect\r\n    }));\r\n\r\n    // const { ReceiptFlag } = LoadingSheetUpdateList\r\n    // const lastColumn = () => ({\r\n    //     text: \"Action\",\r\n    //     dataField: \"\",\r\n    //     formatExtraData: { listBtnLoading },\r\n    //     // hidden: true,\r\n    //     formatter: (cellContent, row, key, { listBtnLoading }) => {\r\n    //         const { ReceiptFlag } = row\r\n\r\n    //         return (<></>\r\n    //             // <span style={{ justifyContent: 'center' }}>\r\n    //             //     <Button\r\n    //             //         type=\"button\"\r\n    //             //         id={`btn-makeBtn-${row.id}`}\r\n    //             //         title={\"Make Receipt\"}\r\n    //             //         disabled={listBtnLoading || ReceiptFlag}\r\n    //             //         className={makeBtnCss}\r\n    //             //         onClick={(e) => {\r\n    //             //             makeBtnFunc(e, row)\r\n    //             //         }}\r\n    //             //     >\r\n    //             //         {(listBtnLoading === `btn-makeBtn-${row.id}`) ?\r\n    //             //             <Spinner style={{ height: \"16px\", width: \"16px\" }} color=\"white\" />\r\n    //             //             : <span style={{ marginLeft: \"6px\", marginRight: \"6px\" }}\r\n    //             //                 className=\" fas fa-file-invoice\" ></span>\r\n    //             //         }\r\n    //             //     </Button></span>\r\n    //         )\r\n    //     }\r\n    // })\r\n\r\n    useEffect(() => {\r\n        dispatch(LoadingSheet_GoBtn_API_Succcess([]))\r\n        const page_Id = pageId.LOADING_SHEET_LIST_UPDATE\r\n        dispatch(commonPageFieldSuccess(null));\r\n        dispatch(commonPageField(page_Id))\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n\r\n        if ((LoadingSheetUpdateList.Status === true) && (LoadingSheetUpdateList.StatusCode === 200)) {\r\n            dispatch(UpdateLoadingSheetSucccess({ Status: false }))\r\n            setTableListData(LoadingSheetUpdateList.Data.InvoiceParent)\r\n            setPartyDetails(LoadingSheetUpdateList.Data.PartyDetails)\r\n        }\r\n\r\n    }, [LoadingSheetUpdateList])\r\n\r\n    const location = { ...history.location }\r\n    const hasShowModal = props.hasOwnProperty(mode.editValue)\r\n\r\n    const [tableColumns] = DynamicColumnHook({ pageField, reducers: { listBtnLoading } })\r\n\r\n    // userAccess useEffect\r\n    useEffect(() => {\r\n        let userAcc = null;\r\n        let locationPath = location.pathname;\r\n        if (hasShowModal) {\r\n            locationPath = props.masterPath;\r\n        };\r\n        userAcc = userAccess.find((inx) => {\r\n            return (`/${inx.ActualPagePath}` === locationPath)\r\n        })\r\n        if (userAcc) {\r\n            setUserAccState(userAcc)\r\n            _cfunc.breadcrumbReturnFunc({ dispatch, userAcc });\r\n        };\r\n\r\n    }, [userAccess])\r\n\r\n    useEffect(() => {\r\n\r\n        if ((makeReceipt.Status === true) && (makeReceipt.StatusCode === 200) && !(OpeningBalance === '')) {\r\n            dispatch(ReceiptGoButtonMaster_Success({ ...makeReceipt, Status: false }))\r\n\r\n            history.push({\r\n                pathname: makeReceipt.path,\r\n                pageMode: makeReceipt.pageMode,\r\n                editValue: makeReceipt.ListData,\r\n            })\r\n        }\r\n    }, [makeReceipt, OpeningBalance])\r\n\r\n    // function makeBtnFunc(e, row) {\r\n    //     var { CustomerID, id } = row\r\n    //     try {\r\n    //         const jsonBody = JSON.stringify({\r\n    //             PartyID: _cfunc.loginPartyID(),\r\n    //             CustomerID: CustomerID,\r\n    //             InvoiceID: (id).toString()\r\n    //         });\r\n\r\n    //         const jsonBody1 = JSON.stringify({\r\n    //             PartyID: _cfunc.loginPartyID(),\r\n    //             CustomerID: CustomerID,\r\n    //             ReceiptDate: currentDate_ymd\r\n    //         });\r\n\r\n    //         const config = { jsonBody, pageMode: mode.modeSTPList, path: url.RECEIPTS, ListData: row, btnId: `btn-makeBtn-${id}` }\r\n    //         dispatch(ReceiptGoButtonMaster(config));\r\n    //         dispatch(GetOpeningBalance(jsonBody1));\r\n\r\n    //     } catch (e) { }\r\n    // }\r\n\r\n    function rowSelected() {\r\n        return tableListData.map((index) => { return (index.selectCheck) && index.id })\r\n    }\r\n\r\n    const nonSelectedRow = () => {\r\n        return tableListData.filter(row => row.ReceiptFlag).map(row => row.id)\r\n    }\r\n\r\n    function DateOnchange(e, date) {\r\n        setLoadingDate(date)\r\n    }\r\n\r\n    function MakeReceiptForAll() {\r\n\r\n        const result = tableListData.filter(index => index.selectCheck === true).map(index => index.id);\r\n\r\n        const LoadingNumber = result.toString()\r\n\r\n        const jsonBody = JSON.stringify({\r\n            PartyID: commonPartyDropSelect.value,\r\n            CustomerID: \"\",\r\n            InvoiceID: LoadingNumber\r\n        });\r\n\r\n        const body = { jsonBody }\r\n\r\n        if (LoadingNumber === \"\") {\r\n            customAlert({\r\n                Type: 3,\r\n                Message: \"Select At Least One Invoice\",\r\n            })\r\n        }\r\n        else {\r\n            dispatch(ReceiptGoButtonMaster(body))\r\n            history.push(url.BULK_RECIPT);\r\n        }\r\n    }\r\n\r\n    const pagesListColumns = [\r\n        {\r\n            text: \"Bill Date\",\r\n            dataField: \"InvoiceDate\",\r\n        },\r\n\r\n        {\r\n            text: \"Bill NO\",\r\n            dataField: \"FullInvoiceNumber\",\r\n        },\r\n\r\n        {\r\n            text: \"Customer Name\",\r\n            dataField: \"Customer\",\r\n        },\r\n\r\n        {\r\n            text: \"Amount\",\r\n            dataField: \"AmountPaid\",\r\n            align: \"right\"\r\n        },\r\n\r\n    ];\r\n\r\n    if (!(userPageAccessState === '')) {\r\n        return (\r\n            <React.Fragment>\r\n                <MetaTags>{_cfunc.metaTagLabel(userPageAccessState)}</MetaTags>\r\n\r\n                <div className=\"page-content\" style={{ marginBottom: \"5cm\" }}>\r\n                    <div id=\"id1\"></div>\r\n\r\n                    <form noValidate>\r\n                        <div className=\"px-2 c_card_filter header text-black mb-2\" >\r\n\r\n                            <div className=\" row \">\r\n                                <Col sm=\"6\">\r\n                                    <FormGroup className=\" row mt-2\" >\r\n                                        <Label className=\"col-sm-1 p-2\"\r\n                                            style={{ width: \"115px\" }}>Loading NO :</Label>\r\n                                        <Col sm=\"7\">\r\n                                            <Label className=\" mt-2\">{partyDetails.LoadingSheetNo}</Label>\r\n                                        </Col>\r\n                                    </FormGroup>\r\n                                </Col >\r\n\r\n                                <Col sm=\"6\">\r\n                                    <FormGroup className=\" row mt-2\" >\r\n                                        <Label className=\"col-sm-1 p-2\"\r\n                                            style={{ width: \"115px\", marginRight: \"0.4cm\" }}>Loading Date </Label>\r\n                                        <Col sm=\"7\">\r\n                                            <C_DatePicker\r\n                                                name='Date'\r\n                                                value={loadingDate}\r\n                                                onChange={DateOnchange}\r\n                                            />\r\n                                        </Col>\r\n                                    </FormGroup>\r\n                                </Col >\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"mt-n1\">\r\n                            <ToolkitProvider\r\n                                keyField=\"id\"\r\n                                data={tableListData}\r\n                                columns={pagesListColumns}\r\n                                search\r\n                            >\r\n                                {toolkitProps => (\r\n                                    <React.Fragment>\r\n                                        <div className=\"table\">\r\n                                            <BootstrapTable\r\n                                                keyField={\"id\"}\r\n                                                bordered={true}\r\n                                                striped={false}\r\n                                                selectRow={selectAllCheck({\r\n                                                    rowSelected: rowSelected(),\r\n                                                    nonSelectable: nonSelectedRow(),\r\n                                                })}\r\n                                                noDataIndication={<div className=\"text-danger text-center \">Record Not available</div>}\r\n                                                classes={\"table align-middle table-nowrap table-hover\"}\r\n                                                headerWrapperClasses={\"thead-light\"}\r\n\r\n                                                {...toolkitProps.baseProps}\r\n\r\n                                            />\r\n                                            {mySearchProps(toolkitProps.searchProps)}\r\n                                        </div>\r\n\r\n                                    </React.Fragment>\r\n                                )\r\n                                }\r\n                            </ToolkitProvider>\r\n                        </div>\r\n\r\n                        {\r\n                            tableListData.length > 0 ?\r\n                                <FormGroup>\r\n                                    <Col sm={2} className={\"row save1\"}>\r\n                                        <button type=\"button\" style={{ width: \"120px\" }}\r\n                                            onClick={MakeReceiptForAll}\r\n                                            className=\"btn btn-primary  waves-effect waves-light\">\r\n                                            Make Receipt</button>\r\n                                    </Col>\r\n                                </FormGroup >\r\n                                : null\r\n                        }\r\n\r\n\r\n                    </form >\r\n                </div >\r\n            </React.Fragment >\r\n        );\r\n    }\r\n    else {\r\n        return (\r\n            <React.Fragment></React.Fragment>\r\n        )\r\n    }\r\n};\r\n\r\nexport default LoadingSheetUpdate\r\n\r\n\r\n\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Sale\\LoadingSheet\\LoadingSheet.js",["4199","4200","4201","4202","4203","4204","4205","4206","4207","4208","4209","4210","4211"],"import React, { useEffect, useState } from \"react\";\r\nimport {\r\n    Col,\r\n    FormGroup,\r\n    Label,\r\n    Row\r\n} from \"reactstrap\";\r\nimport { MetaTags } from \"react-meta-tags\";\r\nimport { BreadcrumbShowCountlabel, Breadcrumb_inputName, commonPageFieldSuccess } from \"../../../store/actions\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { commonPageField } from \"../../../store/actions\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {\r\n    comAddPageFieldFunc,\r\n    formValid,\r\n    initialFiledFunc,\r\n    onChangeSelect,\r\n    resetFunction,\r\n} from \"../../../components/Common/validationFunction\";\r\nimport Select from \"react-select\";\r\nimport { Change_Button, Go_Button, SaveButton } from \"../../../components/Common/CommonButton\";\r\nimport * as pageId from \"../../../routes//allPageID\";\r\nimport * as url from \"../../../routes/route_url\";\r\nimport * as mode from \"../../../routes/PageMode\";\r\nimport { GetRoutesList } from \"../../../store/Administrator/RoutesRedux/actions\";\r\nimport { invoiceListGoBtnfilter } from \"../../../store/Sales/Invoice/action\";\r\nimport { getVehicleList } from \"../../../store/Administrator/VehicleRedux/action\";\r\nimport {\r\n    LoadingSheet_GoBtn_API,\r\n    LoadingSheet_GoBtn_API_Succcess,\r\n    SaveLoadingSheetMaster,\r\n    SaveLoadingSheetMasterSucccess\r\n} from \"../../../store/Sales/LoadingSheetRedux/action\";\r\nimport ToolkitProvider from \"react-bootstrap-table2-toolkit\";\r\nimport BootstrapTable from \"react-bootstrap-table-next\";\r\nimport { mySearchProps } from \"../../../components/Common/SearchBox/MySearch\";\r\nimport { getDriverList, getDriverListSuccess } from \"../../../store/Administrator/DriverRedux/action\";\r\nimport { selectAllCheck } from \"../../../components/Common/TableCommonFunc\";\r\nimport * as _cfunc from \"../../../components/Common/CommonFunction\";\r\nimport { C_DatePicker } from \"../../../CustomValidateForm\";\r\nimport { customAlert } from \"../../../CustomAlert/ConfirmDialog\";\r\nimport { GetRoutesListSuccess } from \"../../../store/Administrator/RoutesRedux/actions\";\r\nimport { getVehicleListSuccess } from \"../../../store/Administrator/VehicleRedux/action\";\r\nimport NewCommonPartyDropdown from \"../../../components/Common/NewCommonPartyDropdown\";\r\n\r\nconst LoadingSheet = (props) => {\r\n\r\n    const dispatch = useDispatch();\r\n    const history = useHistory()\r\n    const currentDate_ymd = _cfunc.date_ymd_func();\r\n\r\n    const [pageMode] = useState(mode.defaultsave);\r\n    const [userPageAccessState, setUserAccState] = useState('');\r\n\r\n    const fileds = {\r\n        id: \"\",\r\n        Date: currentDate_ymd,\r\n        FromDate: currentDate_ymd,\r\n        ToDate: currentDate_ymd,\r\n        RouteName: [],\r\n        VehicleNumber: \"\",\r\n        DriverName: \"\"\r\n    }\r\n\r\n    const [state, setState] = useState(initialFiledFunc(fileds))\r\n\r\n    const {\r\n        postMsg,\r\n        pageField,\r\n        userAccess,\r\n        VehicleNumber = [],\r\n        RoutesList,\r\n        GoButton,\r\n        Driver,\r\n        saveBtnloading,\r\n        goBtnloadingSpinner,\r\n        commonPartyDropSelect\r\n    } = useSelector((state) => ({\r\n        saveBtnloading: state.LoadingSheetReducer.saveBtnloading,\r\n        postMsg: state.LoadingSheetReducer.postMsg,\r\n        goBtnloadingSpinner: state.LoadingSheetReducer.goBtnloadingSpinner,\r\n        GoButton: state.LoadingSheetReducer.goBtnLoadingSheet,\r\n        updateMsg: state.BOMReducer.updateMsg,\r\n        userAccess: state.Login.RoleAccessUpdateData,\r\n        pageField: state.CommonPageFieldReducer.pageField,\r\n        VehicleNumber: state.VehicleReducer.VehicleList,\r\n        RoutesList: state.RoutesReducer.RoutesList,\r\n        Driver: state.DriverReducer.DriverList,\r\n        commonPartyDropSelect: state.CommonPartyDropdownReducer.commonPartyDropSelect\r\n    }));\r\n\r\n    const { Data = [] } = GoButton;\r\n\r\n    useEffect(() => {\r\n        dispatch(LoadingSheet_GoBtn_API_Succcess([]))\r\n        const page_Id = pageId.LOADING_SHEET\r\n        dispatch(commonPageFieldSuccess(null));\r\n        dispatch(commonPageField(page_Id))\r\n    }, []);\r\n\r\n    // Common Party Dropdown useEffect\r\n    useEffect(() => {\r\n\r\n        if (commonPartyDropSelect.value > 0) {\r\n            dispatch(GetRoutesList({ ..._cfunc.loginJsonBody(), \"PartyID\": commonPartyDropSelect.value }));\r\n            dispatch(getVehicleList({ ..._cfunc.loginJsonBody(), \"PartyID\": commonPartyDropSelect.value }));\r\n            dispatch(getDriverList({ ..._cfunc.loginJsonBody(), \"PartyID\": commonPartyDropSelect.value }));\r\n        }\r\n        setState((i) => {\r\n            let a = { ...i }\r\n            a.values.RouteName = []\r\n            a.values.VehicleNumber = \"\"\r\n            a.values.DriverName = ''\r\n\r\n            a.hasValid.RouteName.valid = true;\r\n            a.hasValid.VehicleNumber.valid = true;\r\n            a.hasValid.DriverName.valid = true;\r\n            return a\r\n        });\r\n        return () => {\r\n            dispatch(GetRoutesListSuccess([]));\r\n            dispatch(getVehicleListSuccess([]));\r\n            dispatch(getDriverListSuccess([]));\r\n            dispatch(LoadingSheet_GoBtn_API_Succcess([]));\r\n        }\r\n\r\n    }, [commonPartyDropSelect]);\r\n\r\n    useEffect(() => {\r\n        dispatch(BreadcrumbShowCountlabel(`Count:${Data.length}`))\r\n    }, [GoButton]);\r\n\r\n    const location = { ...history.location }\r\n    const hasShowModal = props.hasOwnProperty(mode.editValue)\r\n\r\n    const values = { ...state.values }\r\n    const { isError } = state;\r\n    const { fieldLabel } = state;\r\n\r\n    // userAccess useEffect\r\n    useEffect(() => {\r\n        let userAcc = null;\r\n        let locationPath = location.pathname;\r\n        if (hasShowModal) {\r\n            locationPath = props.masterPath;\r\n        };\r\n        userAcc = userAccess.find((inx) => {\r\n            return (`/${inx.ActualPagePath}` === locationPath)\r\n        })\r\n        if (userAcc) {\r\n            setUserAccState(userAcc)\r\n            _cfunc.breadcrumbReturnFunc({ dispatch, userAcc });\r\n        };\r\n    }, [userAccess])\r\n\r\n    useEffect(async () => {\r\n        if ((postMsg.Status === true) && (postMsg.StatusCode === 200)) {\r\n            dispatch(SaveLoadingSheetMasterSucccess({ Status: false }))\r\n            setState(() => resetFunction(fileds, state))// Clear form values  \r\n            dispatch(Breadcrumb_inputName(''))\r\n            dispatch(LoadingSheet_GoBtn_API_Succcess([]))\r\n            if (pageMode === mode.dropdownAdd) {\r\n                customAlert({\r\n                    Type: 1,\r\n                    Message: postMsg.Message,\r\n                })\r\n            }\r\n            else {\r\n                let isPermission = await customAlert({\r\n                    Type: 1,\r\n                    Message: postMsg.Message,\r\n                })\r\n                if (isPermission) {\r\n                    history.push({ pathname: url.LOADING_SHEET_LIST })\r\n                }\r\n            }\r\n        }\r\n        else if (postMsg.Status === true) {\r\n            dispatch(SaveLoadingSheetMasterSucccess({ Status: false }))\r\n            customAlert({\r\n                Type: 4,\r\n                Message: JSON.stringify(postMsg.Message),\r\n            })\r\n        }\r\n    }, [postMsg])\r\n\r\n    useEffect(() => {\r\n        if (pageField) {\r\n            const fieldArr = pageField.PageFieldMaster\r\n            comAddPageFieldFunc({ state, setState, fieldArr })\r\n        }\r\n    }, [pageField])\r\n\r\n    const RoutesListOptions = RoutesList.map((index) => ({\r\n        value: index.id,\r\n        label: index.Name,\r\n        IsActive: index.IsActive\r\n    }));\r\n\r\n    const RouteName_Options = RoutesListOptions.filter((index) => {\r\n        return index.IsActive === true\r\n    });\r\n\r\n    const VehicleNumber_Options = VehicleNumber.map((index) => ({\r\n        value: index.id,\r\n        label: index.VehicleNumber,\r\n    }));\r\n\r\n    const Driver_Options = Driver.map((index) => ({\r\n        value: index.id,\r\n        label: index.Name,\r\n    }));\r\n\r\n    const pagesListColumns = [\r\n        {\r\n            text: \"Invoice Date\",\r\n            dataField: \"preInvoiceDate\",\r\n        },\r\n        {\r\n            text: \"Invoice Number\",\r\n            dataField: \"FullInvoiceNumber\",\r\n        },\r\n        {\r\n            text: \"Customer\",\r\n            dataField: \"Customer\",\r\n        },\r\n        {\r\n            text: \"GrandTotal\",\r\n            dataField: \"GrandTotal\",\r\n        },\r\n    ];\r\n\r\n    const onChangeBtnHandler = () => {\r\n        dispatch(LoadingSheet_GoBtn_API_Succcess([]))\r\n    }\r\n\r\n    function goButtonHandler() {\r\n\r\n        if (values.RouteName.length === 0) {\r\n            customAlert({\r\n                Type: 4,\r\n                Status: true,\r\n                Message: \"RouteName Is Required\",\r\n            });\r\n            return;\r\n        }\r\n\r\n        const isRoute = values.RouteName.filter(i => !(i.value === '')).map(obj => obj.value).join(','); //commas separate\r\n\r\n        const jsonBody = JSON.stringify({\r\n            FromDate: values.FromDate,\r\n            ToDate: values.ToDate,\r\n            Party: commonPartyDropSelect.value,\r\n            Route: isRoute,\r\n            LoadingSheetID: \"\"\r\n        });\r\n        dispatch(LoadingSheet_GoBtn_API(jsonBody));\r\n    }\r\n\r\n    const saveHandler = async (event) => {\r\n\r\n        event.preventDefault();\r\n        const btnId = event.target.id;\r\n\r\n        const { totalInvoices, GrandTotal, LoadingSheetDetails } = Data.reduce(\r\n            (acc, index) => {\r\n                if (index.selectCheck === true) {\r\n                    acc.totalInvoices++;\r\n                    acc.GrandTotal += parseFloat(index.GrandTotal);\r\n                    acc.LoadingSheetDetails.push({ Invoice: index.id });\r\n                }\r\n                return acc;\r\n            },\r\n            { totalInvoices: 0, GrandTotal: 0, LoadingSheetDetails: [] }\r\n        );\r\n\r\n        if (LoadingSheetDetails.length === 0) {\r\n            customAlert({\r\n                Type: 4,\r\n                Status: true,\r\n                Message: \"Atleast One Invoice Is Select...!\",\r\n            });\r\n            return;\r\n        }\r\n\r\n        try {\r\n\r\n            if (formValid(state, setState)) {\r\n                const isRoute = values.RouteName.filter(i => !(i.value === '')).map(obj => obj.value).join(',');\r\n                const jsonBody = JSON.stringify({\r\n                    Date: values.Date,\r\n                    Party: commonPartyDropSelect.value,\r\n                    Route: isRoute,\r\n                    Vehicle: values.VehicleNumber.value,\r\n                    Driver: values.DriverName.value,\r\n                    TotalAmount: GrandTotal.toFixed(2),\r\n                    InvoiceCount: totalInvoices,\r\n                    CreatedBy: _cfunc.loginUserID(),\r\n                    UpdatedBy: _cfunc.loginUserID(),\r\n                    LoadingSheetDetails: LoadingSheetDetails\r\n                });\r\n\r\n                dispatch(SaveLoadingSheetMaster({ jsonBody, btnId }));\r\n            }\r\n        } catch (e) {\r\n            _cfunc.CommonConsole(e);\r\n        }\r\n    };\r\n\r\n    function DateOnchange(e, date) {\r\n        setState((i) => {\r\n            const a = { ...i }\r\n            a.values.Date = date;\r\n            a.hasValid.Date.valid = true\r\n            return a\r\n        })\r\n    }\r\n\r\n    function FromDateOnchange(e, date) {\r\n        setState((i) => {\r\n            const a = { ...i }\r\n            a.values.FromDate = date;\r\n            a.hasValid.FromDate.valid = true\r\n            return a\r\n        })\r\n    }\r\n\r\n    function ToDateOnchange(e, date) {\r\n        setState((i) => {\r\n            const a = { ...i }\r\n            a.values.ToDate = date;\r\n            a.hasValid.ToDate.valid = true\r\n            return a\r\n        })\r\n    }\r\n\r\n    if (!(userPageAccessState === '')) {\r\n        return (\r\n            <React.Fragment>\r\n                <MetaTags>{_cfunc.metaTagLabel(userPageAccessState)}</MetaTags>\r\n                <div className=\"page-content\" style={{ marginBottom: \"5cm\" }}>\r\n\r\n                    <NewCommonPartyDropdown pageMode={pageMode} />\r\n\r\n                    <form noValidate>\r\n                        <div className=\"px-2 c_card_filter header text-black mb-1\" >\r\n\r\n                            <div className=\" row \">\r\n                                <Col sm=\"6\">\r\n                                    <FormGroup className=\" row mt-2\" >\r\n                                        <Label className=\"col-sm-1 p-2\"\r\n                                            style={{ width: \"115px\", marginRight: \"0.4cm\" }}>{fieldLabel.Date}  </Label>\r\n                                        <Col sm=\"7\">\r\n                                            <C_DatePicker\r\n                                                name='Date'\r\n                                                value={values.Date}\r\n                                                onChange={DateOnchange}\r\n                                                options={{\r\n                                                    maxDate: new Date(new Date().setMonth(new Date().getMonth() + 1)),\r\n                                                    altInput: true,\r\n                                                    altFormat: \"d-m-Y\",\r\n                                                    dateFormat: \"Y-m-d\",\r\n                                                }}\r\n                                            />\r\n                                        </Col>\r\n\r\n                                    </FormGroup>\r\n                                </Col >\r\n\r\n                                <Col sm=\"6\">\r\n                                    <FormGroup className=\" row mt-2\" >\r\n                                        <Label className=\"col-sm-1 p-2\"\r\n                                            style={{ width: \"115px\", marginRight: \"0.4cm\" }}>  {fieldLabel.DriverName}</Label>\r\n                                        <Col sm=\"7\">\r\n                                            <Select\r\n                                                name=\"DriverName\"\r\n                                                value={values.DriverName}\r\n                                                isSearchable={true}\r\n                                                className=\"react-dropdown\"\r\n                                                classNamePrefix=\"dropdown\"\r\n                                                styles={{\r\n                                                    menu: provided => ({ ...provided, zIndex: 2 })\r\n                                                }}\r\n                                                options={Driver_Options}\r\n                                                onChange={(hasSelect, evn) => {\r\n                                                    onChangeSelect({ hasSelect, evn, state, setState });\r\n                                                }\r\n                                                }\r\n                                            />\r\n                                            {isError.DriverName.length > 0 && (\r\n                                                <span className=\"text-danger f-8\"><small>{isError.DriverName}</small></span>\r\n                                            )}\r\n                                        </Col>\r\n                                    </FormGroup>\r\n                                </Col >\r\n                            </div>\r\n\r\n                            <div className=\"  row \">\r\n                                <Col sm=\"6\">\r\n                                    <FormGroup className=\" row mt-2\" >\r\n                                        <Label className=\"col-sm-1 p-2\"\r\n                                            style={{ width: \"115px\", marginRight: \"0.4cm\" }}>{fieldLabel.FromDate} </Label>\r\n                                        <Col sm=\"7\">\r\n                                            <C_DatePicker\r\n                                                name='FromDate'\r\n                                                value={values.FromDate}\r\n                                                disabled={Data.length > 0 && true}\r\n                                                onChange={FromDateOnchange}\r\n                                            />\r\n                                        </Col>\r\n\r\n                                    </FormGroup>\r\n                                </Col >\r\n\r\n                                <Col sm=\"6\">\r\n                                    <FormGroup className=\" row mt-2\" >\r\n                                        <Label className=\"col-sm-1 p-2\"\r\n                                            style={{ width: \"115px\", marginRight: \"0.4cm\" }}> {fieldLabel.ToDate}</Label>\r\n                                        <Col sm=\"7\">\r\n                                            <C_DatePicker\r\n                                                name='ToDate'\r\n                                                value={values.ToDate}\r\n                                                disabled={Data.length > 0 && true}\r\n                                                onChange={ToDateOnchange}\r\n                                            />\r\n                                        </Col>\r\n                                    </FormGroup>\r\n                                </Col >\r\n\r\n                            </div>\r\n\r\n                            <div className=\"row \">\r\n                                <Col sm=\"6\">\r\n                                    <FormGroup className=\" row mt-2\" >\r\n                                        <Label className=\"col-sm-1 p-2\"\r\n                                            style={{ width: \"115px\", marginRight: \"0.4cm\" }}>{fieldLabel.RouteName} </Label>\r\n                                        <Col sm=\"7\">\r\n                                            <Select\r\n                                                name=\"RouteName\"\r\n                                                value={values.RouteName}\r\n                                                isSearchable={true}\r\n                                                isMulti={true}\r\n                                                isDisabled={Data.length > 0 && true}\r\n                                                className=\"react-dropdown\"\r\n                                                classNamePrefix=\"dropdown\"\r\n                                                styles={{\r\n                                                    menu: provided => ({ ...provided, zIndex: 2 })\r\n                                                }}\r\n                                                options={RouteName_Options}\r\n                                                onChange={(hasSelect, evn) => {\r\n                                                    onChangeSelect({ hasSelect, evn, state, setState });\r\n                                                }\r\n                                                }\r\n                                            />\r\n\r\n                                        </Col>\r\n\r\n                                    </FormGroup>\r\n                                </Col >\r\n\r\n                                <Col sm=\"6\">\r\n                                    <FormGroup className=\" row mt-2\" >\r\n                                        <Label className=\"col-sm-1 p-2\"\r\n                                            style={{ width: \"115px\", marginRight: \"0.4cm\" }}> {fieldLabel.VehicleNumber}</Label>\r\n                                        <Col sm=\"7\">\r\n                                            <Select\r\n                                                name=\"VehicleNumber\"\r\n                                                value={values.VehicleNumber}\r\n                                                isSearchable={true}\r\n                                                className=\"react-dropdown\"\r\n                                                classNamePrefix=\"dropdown\"\r\n                                                styles={{\r\n                                                    menu: provided => ({ ...provided, zIndex: 2 })\r\n                                                }}\r\n                                                options={VehicleNumber_Options}\r\n                                                onChange={(hasSelect, evn) => {\r\n                                                    onChangeSelect({ hasSelect, evn, state, setState });\r\n                                                }\r\n                                                }\r\n                                            />\r\n                                            {isError.VehicleNumber.length > 0 && (\r\n                                                <span className=\"text-danger f-8\"><small>{isError.VehicleNumber}</small></span>\r\n                                            )}\r\n                                        </Col>\r\n                                        <Col sm=\"1\" className=\"mx-4 \">\r\n                                            {!Data.length > 0 ?\r\n                                                < Go_Button loading={goBtnloadingSpinner} onClick={(e) => goButtonHandler()} />\r\n                                                : <Change_Button\r\n                                                    onClick={(e) => onChangeBtnHandler()}\r\n                                                />\r\n                                            }\r\n\r\n\r\n                                        </Col>\r\n                                    </FormGroup>\r\n                                </Col >\r\n                            </div>\r\n                        </div>\r\n\r\n                        <ToolkitProvider\r\n                            keyField={\"id\"}\r\n                            data={Data}\r\n                            columns={pagesListColumns}\r\n                            search\r\n                        >\r\n                            {(toolkitProps,) => (\r\n                                <React.Fragment>\r\n                                    <Row>\r\n                                        <Col xl=\"12\">\r\n                                            <div className=\"table-responsive table\">\r\n                                                <BootstrapTable\r\n                                                    keyField={\"id\"}\r\n                                                    id=\"table_Arrow\"\r\n                                                    selectRow={selectAllCheck({})}\r\n                                                    classes={\"table  table-bordered table-hover\"}\r\n                                                    noDataIndication={\r\n                                                        <div className=\"text-danger text-center \">\r\n                                                            Record Not available\r\n                                                        </div>\r\n                                                    }\r\n                                                    onDataSizeChange={(e) => {\r\n                                                        _cfunc.tableInputArrowUpDounFunc(\"#table_Arrow\")\r\n                                                    }}\r\n                                                    {...toolkitProps.baseProps}\r\n                                                />\r\n                                                {mySearchProps(toolkitProps.searchProps)}\r\n                                            </div>\r\n                                        </Col>\r\n                                    </Row>\r\n\r\n                                </React.Fragment>\r\n                            )}\r\n                        </ToolkitProvider>\r\n                        {\r\n                            Data.length > 0 ?\r\n                                <FormGroup>\r\n                                    <Col sm={2} style={{ marginLeft: \"-70px\" }} className={\"row save1\"}>\r\n                                        <SaveButton pageMode={pageMode}\r\n                                            loading={saveBtnloading}\r\n                                            forceDisabled={goBtnloadingSpinner}\r\n                                            onClick={saveHandler}\r\n                                            userAcc={userPageAccessState}\r\n                                        />\r\n\r\n                                    </Col>\r\n                                </FormGroup >\r\n                                : null\r\n                        }\r\n\r\n                    </form >\r\n                </div >\r\n            </React.Fragment >\r\n        );\r\n    }\r\n    else {\r\n        return (\r\n            <React.Fragment></React.Fragment>\r\n        )\r\n    }\r\n};\r\n\r\nexport default LoadingSheet\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Sale\\LoadingSheet\\LoadingSheetList.js",["4212","4213","4214","4215","4216","4217","4218"],"import React, { useEffect, useState, } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport {\r\n    BreadcrumbShowCountlabel,\r\n    commonPageFieldList,\r\n    commonPageFieldListSuccess\r\n} from \"../../../store/actions\";\r\nimport LoadingSheet from \"./LoadingSheet\";\r\nimport {\r\n    DeleteLoadingSheet,\r\n    DeleteLoadingSheetSucccess,\r\n    LoadingSheetListAction,\r\n    LoadingSheetListActionSuccess,\r\n    UpdateLoadingSheet,\r\n\r\n} from \"../../../store/Sales/LoadingSheetRedux/action\";\r\nimport { LoadingSheet_API, MultipleInvoice_API } from \"../../../helpers/backend_helper\";\r\nimport * as report from '../../../Reports/ReportIndex'\r\nimport { getpdfReportdata } from \"../../../store/Utilites/PdfReport/actions\";\r\nimport { Col, FormGroup, Label } from \"reactstrap\";\r\nimport CommonPurchaseList from \"../../../components/Common/CommonPurchaseList\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { C_DatePicker } from \"../../../CustomValidateForm\";\r\nimport * as _cfunc from \"../../../components/Common/CommonFunction\";\r\nimport { url, mode, pageId } from \"../../../routes/index\"\r\nimport { Go_Button, PageLoadingSpinner } from \"../../../components/Common/CommonButton\";\r\nimport PartyDropdown_Common from \"../../../components/Common/PartyDropdown\";\r\nimport { customAlert } from \"../../../CustomAlert/ConfirmDialog\";\r\n\r\nconst LoadingSheetList = () => {\r\n    const history = useHistory();\r\n    const dispatch = useDispatch();\r\n    const currentDate_ymd = _cfunc.date_ymd_func()\r\n\r\n    const [headerFilters, setHeaderFilters] = useState('');\r\n    const [pageMode] = useState(mode.defaultList);\r\n\r\n    const reducers = useSelector(\r\n        (state) => ({\r\n            loading: state.LoadingSheetReducer.loading,\r\n            listBtnLoading: (state.LoadingSheetReducer.listBtnLoading || state.PdfReportReducers.ReportBtnLoading),\r\n            tableList: state.LoadingSheetReducer.LoadingSheetlist,\r\n            deleteMsg: state.LoadingSheetReducer.deleteMsg,\r\n            userAccess: state.Login.RoleAccessUpdateData,\r\n            pageField: state.CommonPageFieldReducer.pageFieldList,\r\n            LoadingSheetUpdateList: state.LoadingSheetReducer.LoadingSheetUpdate,\r\n        })\r\n    );\r\n\r\n    const { fromdate = currentDate_ymd, todate = currentDate_ymd } = headerFilters;\r\n    const { pageField, LoadingSheetUpdateList } = reducers;\r\n\r\n\r\n    const action = {\r\n        getList: LoadingSheetListAction,\r\n        deleteId: DeleteLoadingSheet,\r\n        deleteSucc: DeleteLoadingSheetSucccess\r\n    }\r\n\r\n    let page_Id = pageId.LOADING_SHEET_LIST\r\n    // Featch Modules List data  First Rendering\r\n    useEffect(() => {\r\n        dispatch(commonPageFieldListSuccess(null))\r\n        dispatch(commonPageFieldList(page_Id))\r\n        // dispatch(BreadcrumbShowCountlabel(`${\"LoadingSheet Count\"} :0`))\r\n        if (!(_cfunc.loginSelectedPartyID() === 0)) {\r\n            goButtonHandler()\r\n        }\r\n        return () => {\r\n            dispatch(LoadingSheetListActionSuccess([]))\r\n        }\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if ((LoadingSheetUpdateList.Status === true) && (LoadingSheetUpdateList.StatusCode === 200)) {\r\n            history.push({\r\n                pathname: LoadingSheetUpdateList.path,\r\n            })\r\n        }\r\n    }, [LoadingSheetUpdateList])\r\n\r\n    const goButtonHandler = () => {\r\n        try {\r\n            if ((_cfunc.loginSelectedPartyID() === 0)) {\r\n                customAlert({ Type: 3, Message: \"Please Select Party\" });\r\n                return;\r\n            };\r\n            const jsonBody = JSON.stringify({\r\n                FromDate: fromdate,\r\n                ToDate: todate,\r\n                PartyID: _cfunc.loginSelectedPartyID(),\r\n            });\r\n\r\n            dispatch(LoadingSheetListAction(jsonBody));\r\n        } catch (error) { }\r\n        return\r\n    };\r\n\r\n    function fromdateOnchange(e, date) {\r\n        let newObj = { ...headerFilters }\r\n        newObj.fromdate = date\r\n        setHeaderFilters(newObj)\r\n    }\r\n\r\n    function todateOnchange(e, date) {\r\n        let newObj = { ...headerFilters }\r\n        newObj.todate = date\r\n        setHeaderFilters(newObj)\r\n    }\r\n\r\n    function downBtnFunc(config) {\r\n\r\n        if (config.btnmode === \"MultiInvoice\") {\r\n            config[\"ReportType\"] = report.invoice;\r\n            config[\"forceA5\"] = true;\r\n            dispatch(getpdfReportdata(MultipleInvoice_API, config))\r\n        } else {\r\n            config[\"ReportType\"] = report.VanLoadingPartyWiseInvoice\r\n            dispatch(getpdfReportdata(LoadingSheet_API, config))\r\n        }\r\n    }\r\n\r\n    const otherBtn_1Func = (list) => {\r\n        dispatch(UpdateLoadingSheet({ RowId: list.rowData.id, path: url.LOADING_SHEET_LIST_UPDATE, btnId: `btn-otherBtn_1-${list.id}` }));\r\n    };\r\n\r\n\r\n    const partySelectButtonHandler = () => {\r\n        goButtonHandler()\r\n    }\r\n\r\n    function partyOnChngeButtonHandler() {\r\n        dispatch(LoadingSheetListActionSuccess([]))\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <PageLoadingSpinner isLoading={reducers.loading || !pageField} />\r\n\r\n            <div className=\"page-content\">\r\n\r\n                <PartyDropdown_Common pageMode={pageMode}\r\n                    goButtonHandler={partySelectButtonHandler}\r\n                    changeButtonHandler={partyOnChngeButtonHandler} />\r\n\r\n                <div className=\"px-2  c_card_filter text-black \" >\r\n                    <div className=\"row\">\r\n                        <div className=\" row mt-2 mb-1\">\r\n                            <Col sm=\"5\" className=\"\">\r\n                                <FormGroup className=\" row\" >\r\n                                    <Label className=\"col-sm-5 p-2\"\r\n                                        style={{ width: \"83px\" }}>From Date</Label>\r\n                                    <Col sm=\"7\">\r\n                                        <C_DatePicker\r\n                                            options={{\r\n                                                maxDate: new Date(new Date().setMonth(new Date().getMonth() + 1)),\r\n                                                altInput: true,\r\n                                                altFormat: \"d-m-Y\",\r\n                                                dateFormat: \"Y-m-d\",\r\n                                            }}\r\n                                            name='fromdate'\r\n                                            value={fromdate}\r\n                                            onChange={fromdateOnchange}\r\n                                        />\r\n                                    </Col>\r\n                                </FormGroup>\r\n                            </Col>\r\n                            <Col sm=\"6\" className=\"\">\r\n                                <FormGroup className=\"row\" >\r\n                                    <Label className=\"col-sm-5 p-2\"\r\n                                        style={{ width: \"65px\" }}>To Date</Label>\r\n                                    <Col sm=\"7\">\r\n                                        <C_DatePicker\r\n                                            options={{\r\n                                                maxDate: new Date(new Date().setMonth(new Date().getMonth() + 1)),\r\n                                                altInput: true,\r\n                                                altFormat: \"d-m-Y\",\r\n                                                dateFormat: \"Y-m-d\",\r\n                                            }}\r\n                                            nane='todate'\r\n                                            value={todate}\r\n                                            onChange={todateOnchange}\r\n                                        />\r\n                                    </Col>\r\n                                </FormGroup>\r\n                            </Col>\r\n                            <Col sm=\"1\" className=\"\">\r\n                                <Go_Button loading={reducers.loading}\r\n                                    id={'LoadingSheet'}\r\n                                    onClick={goButtonHandler} />\r\n                            </Col>\r\n                        </div>\r\n\r\n                    </div>\r\n                </div>\r\n                {\r\n                    (pageField) ?\r\n                        <CommonPurchaseList\r\n                            action={action}\r\n                            reducers={reducers}\r\n                            showBreadcrumb={false}\r\n                            pageMode={pageMode}\r\n                            masterPath={LoadingSheet}\r\n                            newBtnPath={url.LOADING_SHEET}\r\n                            goButnFunc={goButtonHandler}\r\n                            downBtnFunc={downBtnFunc}\r\n                            otherBtn_1Func={otherBtn_1Func}\r\n                            ButtonMsgLable={\"LoadingSheet\"}\r\n                            deleteName={\"LoadingSheetNo\"}\r\n                            MasterModal={LoadingSheet}\r\n                            totalAmountShow={true}\r\n                        />\r\n\r\n                        : null\r\n                }\r\n            </div>\r\n\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default LoadingSheetList;","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Sale\\SalesReturn\\SalesCalculation.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Sale\\SalesReturn\\SalesReturnConfirm.js",["4219"],"import BootstrapTable from \"react-bootstrap-table-next\";\r\nimport ToolkitProvider from \"react-bootstrap-table2-toolkit\";\r\nimport { Card, CardBody, FormGroup, Input, Modal, Spinner, } from \"reactstrap\";\r\nimport { mySearchProps } from \"../../../components/Common/SearchBox/MySearch\";\r\nimport React, { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { CommonConsole, date_dmy_func, date_ymd_func, loginRoleID, loginSystemSetting, loginUserID, tableInputArrowUpDounFunc } from \"../../../components/Common/CommonFunction\";\r\nimport { confirm_SalesReturn_Id_Succcess, returnApprove, returnApprove_Success } from \"../../../store/actions\";\r\nimport { useState } from \"react\";\r\nimport { customAlert } from \"../../../CustomAlert/ConfirmDialog\";\r\nimport { url } from \"../../../routes\";\r\nimport { table_ArrowUseEffect } from \"../../../components/Common/CommonUseEffect\";\r\nimport { CInput, onlyNumberRegx } from \"../../../CustomValidateForm\";\r\n\r\nconst ViewDetails_Modal = () => {\r\n\r\n    const dispatch = useDispatch();\r\n    const { ReturnFinalApprovalRole = '' } = loginSystemSetting()\r\n\r\n    const [modal_view, setModal_view] = useState(false);\r\n    const [tableArray, setTableArray] = useState({});\r\n\r\n    const { viewData_redux = [], ApprovrMsg, saveBtnloading } = useSelector((state) => ({\r\n        viewData_redux: state.SalesReturnReducer.confirmBtnData, // modify Redux State\r\n        ApprovrMsg: state.SalesReturnReducer.ApprovrMsg,// modify Redux State\r\n        saveBtnloading: state.SalesReturnReducer.saveBtnloading // modify Redux State\r\n    }))\r\n\r\n    useEffect(() => {\r\n\r\n        try {\r\n            if ((viewData_redux.Status === true)) {\r\n                if (viewData_redux.Data.length > 0) {\r\n                    setTableArray(viewData_redux.Data[0])// modify Custom Table Data\r\n                    setModal_view(true);\r\n                }\r\n\r\n            }\r\n        } catch (error) { CommonConsole(error) }\r\n    }, [viewData_redux]);\r\n\r\n    useEffect(() => {\r\n\r\n        if ((ApprovrMsg.Status === true) && (ApprovrMsg.StatusCode === 200)) {\r\n            dispatch(confirm_SalesReturn_Id_Succcess({ Status: false }))\r\n            dispatch(returnApprove_Success({ Status: false }))\r\n            customAlert({\r\n                Type: 1,\r\n                Message: ApprovrMsg.Message,\r\n            })\r\n            setModal_view(false);\r\n\r\n        }\r\n    }, [ApprovrMsg])\r\n    if (Object.keys(tableArray).length > 0) {\r\n        tableArray.ReturnItems.sort((a, b) => {   //Sort With Same Item Name  \r\n            if (a.ItemName === b.ItemName) {\r\n                return 0;\r\n            }\r\n            return b.ItemName.localeCompare(a.ItemName);\r\n        });\r\n    }\r\n\r\n    function modalToggleFunc() {\r\n        setModal_view(false);\r\n        dispatch(confirm_SalesReturn_Id_Succcess({ Status: false }))// modify Custom Api Action call\r\n    }\r\n\r\n    useEffect(() => table_ArrowUseEffect(\"#table_Arrow\"), [viewData_redux]);\r\n\r\n    function QuantityHandler(event, row,) {\r\n\r\n        let input = event.target.value\r\n\r\n        let v1 = Number(row.Quantity);\r\n        let v2 = Number(input)\r\n        if (!(v1 >= v2)) {\r\n            event.target.value = v1;\r\n        }\r\n        row.ApprovedQuantity = input;\r\n    }\r\n\r\n    const pagesListColumns = [\r\n        {\r\n            text: \"Item Name\",\r\n            dataField: \"ItemName\",\r\n            formatter: (value, row, k) => (\r\n                <>\r\n                    <div >{`${(row.ItemName)}`}</div>\r\n                </>\r\n            )\r\n\r\n\r\n        },\r\n\r\n        {\r\n            text: \"Dist Name (Retailer Name)\",\r\n            dataField: \"primarySource\",\r\n            style: { width: \"200px\" },\r\n            formatter: (value, row, k) => (\r\n                <>\r\n                    <div  >{`${row.primarySource}`}</div>\r\n                </>\r\n            )\r\n\r\n\r\n        },\r\n\r\n\r\n        {\r\n            text: \"Quantity\",\r\n            dataField: \"Quantity\",\r\n            formatter: (value, row, k) => (\r\n                <>\r\n                    <div>{`${Number(row.Quantity).toFixed(0)} ${row.UnitName}`}</div>\r\n                </>\r\n            )\r\n        },\r\n        {\r\n            text: \"Basic Rate\",\r\n            dataField: \"Rate\",\r\n        },\r\n        {\r\n            text: \"Batch\",\r\n            dataField: \"ItemName\",\r\n            formatter: (cellContent, index) => (\r\n                <>\r\n                    <div style={{ width: \"120px\" }}>{`${index.BatchCode}`}</div>\r\n                    <div style={{ width: \"120px\" }}>{`${date_dmy_func(index.BatchDate)}`}</div>\r\n                </>\r\n            )\r\n        },\r\n        {\r\n            text: \"NOC\",\r\n            dataField: \"ItemReason\",\r\n        },\r\n\r\n        {\r\n            text: \"Approve Quantity\",\r\n            dataField: \"Quantity\",\r\n            hidden: tableArray.viewMode === url.PURCHASE_RETURN_LIST ? true : false,\r\n            formatter: (value, row, k,) => {\r\n                if (tableArray.viewMode === url.PURCHASE_RETURN_LIST) {\r\n\r\n                    return <div style={{ width: \"120px\" }}>{`${Number(row.Quantity).toFixed(0)} ${row.UnitName}`}</div>\r\n                } else {\r\n\r\n                    let defaultQuantity = tableArray.IsApproved ? row.ApprovedQuantity : row.Quantity;\r\n                    return (\r\n                        <div>\r\n                            <CInput\r\n                                defaultValue={Number(defaultQuantity)}\r\n                                autoComplete=\"off\"\r\n                                type=\"text\"\r\n                                disabled={tableArray.IsApproved}\r\n                                cpattern={onlyNumberRegx}\r\n                                className=\"col col-sm text-end\"\r\n                                onChange={(event) => {\r\n                                    QuantityHandler(event, row)\r\n                                }}\r\n                            />\r\n                        </div>\r\n                    )\r\n                }\r\n            },\r\n        },\r\n        {\r\n            text: \"Comment\",\r\n            dataField: \"\",\r\n            hidden: tableArray.viewMode === url.PURCHASE_RETURN_LIST ? true : false,\r\n            formatter: (value, row, k) => {\r\n                return (\r\n                    <div>\r\n                        <Input\r\n                            key={`ApproveComment-${k}`}\r\n                            id={`ApproveComment-${k}`}\r\n                            defaultValue={row.ApproveComment}\r\n                            autoComplete=\"off\"\r\n                            placeholder=\"Enter Comment\"\r\n                            onChange={(e) => {\r\n                                row[\"ApproveComment\"] = e.target.value\r\n                            }}\r\n                        />\r\n                    </div>\r\n                )\r\n            },\r\n        },\r\n    ];\r\n\r\n    const SaveHandler = async (event) => {\r\n\r\n        const btnId = event.target.id\r\n        try {\r\n            const tableItemArray = []\r\n            let inValideUnits = []\r\n            tableArray.ReturnItems.forEach(index => {\r\n                \r\n                const approvedQty = index.ApprovedQuantity ? index.ApprovedQuantity : index.Quantity\r\n                const Comment = index.ApproveComment ? index.ApproveComment : null\r\n\r\n                if (index.ApprovedQuantity === \"\") {\r\n                    inValideUnits.push({ [`${index.ItemName}`]: `Please Enter Approve Quantity` })\r\n                } else if (Number(approvedQty) >= 0) {\r\n                    const ReturnItems = {\r\n                        \"id\": index.id,\r\n                        \"Item\": index.Item,\r\n                        \"Unit\": 1,\r\n                        \"ApprovedQuantity\": approvedQty,\r\n                        \"ApproveComment\": Comment,\r\n                        \"Approvedby\": loginUserID(),\r\n                        \"ItemComment\": index.ItemComment,\r\n                        \"Quantity\": index.Quantity,\r\n                        \"BaseUnitQuantity\": index.BaseUnitQuantity,\r\n                        \"MRPValue\": index.MRPValue,\r\n                        \"Rate\": index.Rate,\r\n                        \"BasicAmount\": index.BasicAmount,\r\n                        \"TaxType\": index.TaxType,\r\n                        \"GSTPercentage\": index.GSTPercentage,\r\n                        \"GSTAmount\": index.GSTAmount,\r\n                        \"Amount\": index.Amount,\r\n                        \"CGST\": index.CGST,\r\n                        \"SGST\": index.SGST,\r\n                        \"IGST\": index.IGST,\r\n                        \"CGSTPercentage\": index.CGSTPercentage,\r\n                        \"SGSTPercentage\": index.SGSTPercentage,\r\n                        \"IGSTPercentage\": index.IGSTPercentage,\r\n                        \"BatchDate\": index.BatchDate,\r\n                        \"BatchCode\": index.BatchCode,\r\n                        \"CreatedOn\": index.CreatedOn,\r\n                        \"GST\": index.GST,\r\n                        \"ItemName\": index.ItemName,\r\n                        \"MRP\": index.MRP,\r\n                        \"PurchaseReturn\": index.PurchaseReturn,\r\n                        \"UnitName\": index.UnitName,\r\n                        \"ItemReason\": index.ItemReasonID,\r\n                        \"Comment\": index.Comment,\r\n                        \"primarySourceID\": index.primarySourceID,\r\n                        \"ApprovedByCompany\": null,\r\n                        \"FinalApprovalDate\": null\r\n                    }\r\n\r\n                    const allowedRoles = ReturnFinalApprovalRole.split(\",\").map(role => parseInt(role.trim()));\r\n\r\n                    if (allowedRoles.includes(loginRoleID())) {\r\n                        ReturnItems.ApprovedByCompany = Number(approvedQty).toFixed(2);\r\n                        ReturnItems.FinalApprovalDate = date_ymd_func();\r\n                    }\r\n                    tableItemArray.push(ReturnItems)\r\n                }\r\n            })\r\n\r\n            const jsonBody = JSON.stringify({\r\n                \"ReturnID\": viewData_redux.Data[0].ReturnID,\r\n                \"UserID\": loginUserID(),\r\n                \"ReturnItem\": tableItemArray\r\n            });\r\n\r\n            if (inValideUnits.length > 0) {\r\n                customAlert({\r\n                    Type: 3,\r\n                    Message: inValideUnits\r\n                })\r\n\r\n            } else {\r\n                dispatch(returnApprove({ jsonBody, btnId }));\r\n            }\r\n\r\n        } catch (e) { }\r\n    };\r\n\r\n    return (\r\n        <Modal\r\n            isOpen={modal_view}\r\n            toggle={modalToggleFunc}\r\n            size=\"xl\"\r\n        >\r\n            <Card>\r\n                <CardBody className=\"c_card_body\">\r\n                    <div className=\"modal-body\">\r\n                        {tableArray.viewMode === url.PURCHASE_RETURN_LIST ?\r\n                            <h2 className=\"text-center\">Purchase Return Items</h2> :\r\n                            <h2 className=\"text-center\">Sales Return Items</h2>}\r\n                        <div className=\"mt-n1\">\r\n                            <ToolkitProvider\r\n                                keyField=\"id\"\r\n                                key=\"RetrunItem\"\r\n                                data={tableArray.ReturnItems}\r\n                                columns={pagesListColumns}\r\n                                search\r\n                            >\r\n                                {toolkitProps => (\r\n                                    <React.Fragment>\r\n                                        <div className=\"table\">\r\n                                            <BootstrapTable\r\n                                                keyField={\"id\"}\r\n                                                id=\"table_Arrow\"\r\n                                                noDataIndication={<div className=\"text-danger text-center \">Record Not available</div>}\r\n                                                classes={\"table  table-bordered table-hover\"}\r\n                                                headerWrapperClasses={\"thead-light\"}\r\n                                                onDataSizeChange={(e) => {\r\n                                                    tableInputArrowUpDounFunc(\"#table_Arrow\")\r\n                                                }}\r\n                                                {...toolkitProps.baseProps}\r\n\r\n                                            />\r\n                                            {mySearchProps(toolkitProps.searchProps)}\r\n                                        </div>\r\n\r\n                                    </React.Fragment>\r\n                                )\r\n                                }\r\n                            </ToolkitProvider>\r\n                            {(!(tableArray.viewMode === url.PURCHASE_RETURN_LIST) && !tableArray.IsApproved) &&\r\n                                <FormGroup>\r\n                                    <div>\r\n\r\n                                        {saveBtnloading ? <button\r\n                                            title={`Save`}\r\n                                            className=\"btn btn-primary w-md\"\r\n                                            autoFocus={false}\r\n                                        >  Saving.. &nbsp;\r\n                                            <Spinner style={{ height: \"13px\", width: \"13px\" }} color=\"white\" />\r\n                                        </button>\r\n                                            :\r\n                                            <button\r\n                                                type=\"submit\"\r\n                                                autoFocus={false}\r\n                                                title={`Save `}\r\n                                                className=\"btn btn-primary w-md\"\r\n                                                onClick={SaveHandler}\r\n                                            > <i className=\"fas fa-save me-2\"></i> Save\r\n                                            </button>}\r\n                                    </div>\r\n                                </FormGroup >}\r\n\r\n                        </div>\r\n                    </div>\r\n                </CardBody>\r\n            </Card>\r\n        </Modal>\r\n    )\r\n\r\n}\r\nexport default ViewDetails_Modal;\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\Discount\\DiscountMaster.js",["4220","4221","4222","4223","4224","4225","4226","4227","4228","4229","4230","4231","4232","4233","4234","4235","4236","4237","4238"],"import React, { useEffect, useState } from \"react\";\r\nimport {\r\n    Col,\r\n    FormGroup,\r\n    Label,\r\n    Input,\r\n    Row,\r\n\r\n} from \"reactstrap\";\r\nimport { MetaTags } from \"react-meta-tags\";\r\nimport { GetVenderSupplierCustomer, GetVenderSupplierCustomerSuccess, Retailer_List, Retailer_List_Success, commonPageFieldSuccess } from \"../../../store/actions\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { commonPageField } from \"../../../store/actions\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {\r\n    comAddPageFieldFunc,\r\n    initialFiledFunc,\r\n    onChangeSelect,\r\n    resetFunction,\r\n\r\n} from \"../../../components/Common/validationFunction\";\r\nimport { mode, pageId, url } from \"../../../routes/index\"\r\nimport \"../../Sale/SalesReturn/salesReturn.scss\";\r\nimport { CInput, C_DatePicker, C_Select, decimalRegx } from \"../../../CustomValidateForm/index\";\r\nimport * as _cfunc from \"../../../components/Common/CommonFunction\";\r\nimport { mySearchProps } from \"../../../components/Common/SearchBox/MySearch\";\r\nimport BootstrapTable from \"react-bootstrap-table-next\";\r\nimport ToolkitProvider from \"react-bootstrap-table2-toolkit\";\r\nimport { Change_Button, Go_Button, SaveButton } from \"../../../components/Common/CommonButton\";\r\nimport PriceDropOptions from \"../PartyMaster/MasterAdd/FirstTab/PriceDropOptions\";\r\nimport { priceListByPartyAction } from \"../../../store/Administrator/PriceList/action\";\r\nimport Select from \"react-select\";\r\nimport { DiscountCustomer_Dropdown_Action, DiscountCustomer_Dropdown_Success, DiscountPartyType_Dropdown_Action, DiscountPartyType_Dropdown_Success, goBtnDiscountAddActionSuccess, saveDiscountAction, saveDiscountActionSuccess } from \"../../../store/Administrator/DiscountRedux/actions\";\r\nimport { customAlert } from \"../../../CustomAlert/ConfirmDialog\";\r\nimport { goBtnDiscountAddAction } from \"../../../store/Administrator/DiscountRedux/actions\";\r\nimport { priceListByPartyActionSuccess } from \"../../../store/Administrator/PriceList/action\";\r\nimport NewCommonPartyDropdown from \"../../../components/Common/NewCommonPartyDropdown\";\r\n\r\nconst DiscountMaster = (props) => {\r\n\r\n    const dispatch = useDispatch();\r\n    const history = useHistory()\r\n    const currentDate_ymd = _cfunc.date_ymd_func();\r\n\r\n    const [pageMode] = useState(mode.defaultsave);\r\n    const [userPageAccessState, setUserAccState] = useState('');\r\n\r\n    const fileds = {\r\n        FromDate: currentDate_ymd,\r\n        ToDate: currentDate_ymd,\r\n        Partytype: \"\",\r\n        CustomerName: { value: \"\", label: \"All\" },\r\n        PriceListName: \"\",\r\n    }\r\n\r\n    const [state, setState] = useState(initialFiledFunc(fileds))\r\n    const [subPageMode] = useState(history.location.pathname)\r\n    const [priceListSelect, setPriceListSelect] = useState({ value: '' });\r\n    const [discountDropOption] = useState([{ value: 1, label: \"Rs\" }, { value: 2, label: \"%\" }])\r\n    const [changeAllDiscount, setChangeAllDiscount] = useState(false)\r\n    const [discountValueAll, setDiscountValueAll] = useState(\"\");\r\n    const [discountTypeAll, setDiscountTypeAll] = useState({ value: 2, label: \" % \" });\r\n    const [forceReload, setForceReload] = useState(false)\r\n    const [tableData, setTableData] = useState([]);\r\n\r\n    //Access redux store Data /  'save_ModuleSuccess' action data\r\n\r\n    const {\r\n        gobtnDiscount_redux,\r\n        partyType_redux,\r\n        priceListByPartyType,\r\n        postMsg,\r\n        customer,\r\n        pageField,\r\n        userAccess,\r\n        goBtnLoading,\r\n        saveBtnloading,\r\n        partyTypeDropDownLoading,\r\n        customerDropDownLoading,\r\n        commonPartyDropSelect\r\n    } = useSelector((state) => ({\r\n        gobtnDiscount_redux: state.DiscountReducer.gobtnDiscount_redux,\r\n        postMsg: state.DiscountReducer.postMsg,\r\n        partyType_redux: state.DiscountReducer.partyType,\r\n        priceListByPartyType: state.PriceListReducer.priceListByPartyType,\r\n        customer: state.DiscountReducer.customer,\r\n        userAccess: state.Login.RoleAccessUpdateData,\r\n        pageField: state.CommonPageFieldReducer.pageField,\r\n        goBtnLoading: state.DiscountReducer.goBtnLoading,\r\n        saveBtnloading: state.DiscountReducer.saveBtnloading,\r\n        partyTypeDropDownLoading: state.DiscountReducer.partyTypeDropDownLoading,\r\n        customerDropDownLoading: state.DiscountReducer.customerDropDownLoading,\r\n        commonPartyDropSelect: state.CommonPartyDropdownReducer.commonPartyDropSelect\r\n    }));\r\n\r\n    useEffect(() => {\r\n        dispatch(commonPageFieldSuccess(null));\r\n        dispatch(commonPageField(pageId.DISCOUNT_MASTER))\r\n        return () => {\r\n            dispatch(commonPageFieldSuccess(null));\r\n        }\r\n    }, []);\r\n\r\n    // Common Party Dropdown useEffect\r\n    useEffect(() => {\r\n\r\n        if (commonPartyDropSelect.value > 0) {\r\n            const jsonBody = JSON.stringify({\r\n                Type: 1,\r\n                PartyID: commonPartyDropSelect.value,\r\n                CompanyID: _cfunc.loginCompanyID()\r\n            });\r\n            dispatch(DiscountPartyType_Dropdown_Action(commonPartyDropSelect.value))\r\n            dispatch(Retailer_List(jsonBody));\r\n            dispatch(GetVenderSupplierCustomer({ subPageMode, RouteID: \"\", \"PartyID\": commonPartyDropSelect.value }));\r\n        }\r\n        setState((i) => {\r\n\r\n            let a = { ...i }\r\n            a.values.CustomerName = { value: \"\", label: \"All\" };\r\n            a.values.Partytype = \"\"\r\n            a.values.PriceListName = ''\r\n\r\n            a.hasValid.CustomerName.valid = true;\r\n            a.hasValid.Partytype.valid = true;\r\n            a.hasValid.PriceListName.valid = true;\r\n            return a\r\n        })\r\n        return () => {\r\n            dispatch(GetVenderSupplierCustomerSuccess([]));\r\n            dispatch(Retailer_List_Success([]));\r\n            dispatch(DiscountCustomer_Dropdown_Success([]));\r\n            dispatch(DiscountPartyType_Dropdown_Success([]));\r\n            dispatch(priceListByPartyActionSuccess([]));\r\n            setTableData([]);\r\n            dispatch(goBtnDiscountAddActionSuccess([]));\r\n        }\r\n\r\n    }, [commonPartyDropSelect]);\r\n\r\n    useEffect(() => {// userAccess useEffect\r\n        let userAcc = null;\r\n        let locationPath = location.pathname;\r\n        if (hasShowModal) {\r\n            locationPath = props.masterPath;\r\n        };\r\n        userAcc = userAccess.find((inx) => {\r\n            return (`/${inx.ActualPagePath}` === locationPath)\r\n        })\r\n        if (userAcc) {\r\n            setUserAccState(userAcc)\r\n            _cfunc.breadcrumbReturnFunc({ dispatch, userAcc });\r\n        };\r\n    }, [userAccess])\r\n\r\n    const location = { ...history.location }\r\n    const hasShowModal = props.hasOwnProperty(mode.editValue)\r\n\r\n    const values = { ...state.values }\r\n    const { isError } = state;\r\n    const { fieldLabel } = state;\r\n\r\n    useEffect(() => {\r\n        if (pageField) {\r\n            const fieldArr = pageField.PageFieldMaster\r\n            comAddPageFieldFunc({ state, setState, fieldArr })\r\n        }\r\n    }, [pageField])\r\n\r\n    useEffect(() => _cfunc.tableInputArrowUpDounFunc(\"#table_Arrow\"), [tableData]);\r\n\r\n    useEffect(async () => {\r\n        if ((postMsg.Status === true) && (postMsg.StatusCode === 200)) {\r\n\r\n            dispatch(saveDiscountActionSuccess({ Status: false }))\r\n            setTableData([])\r\n            setState(() => resetFunction(fileds, state))// Clear form values  \r\n            setPriceListSelect({ value: '', label: '' })\r\n            if (pageMode === mode.dropdownAdd) {\r\n                customAlert({\r\n                    Type: 1,\r\n                    Message: postMsg.Message,\r\n                })\r\n            }\r\n            else {\r\n                let isPermission = await customAlert({\r\n                    Type: 1,\r\n                    Status: true,\r\n                    Message: postMsg.Message,\r\n                })\r\n                if (isPermission) {\r\n                    history.push({ pathname: url.DISCOUNT_LIST })\r\n                }\r\n            }\r\n        }\r\n        else if (postMsg.Status === true) {\r\n            dispatch(saveDiscountActionSuccess({ Status: false }))\r\n            customAlert({\r\n                Type: 4,\r\n                Message: JSON.stringify(postMsg.Message),\r\n            })\r\n        }\r\n    }, [postMsg])\r\n\r\n    useEffect(() => {\r\n\r\n        if (gobtnDiscount_redux.Status === true) {\r\n            const { Data = [] } = gobtnDiscount_redux;\r\n            const UpdatedTableData = Data.map((item, index) => {\r\n                return {\r\n                    ...item, tableId: index + 1,\r\n                    preDiscountValue: item.Discount,\r\n                };\r\n            });\r\n            setTableData(UpdatedTableData);\r\n            dispatch(goBtnDiscountAddActionSuccess([]))\r\n        }\r\n    }, [gobtnDiscount_redux]);\r\n\r\n    useEffect(() => {\r\n        if (priceListSelect.value > 0) {\r\n            const config = {\r\n                PartyID: commonPartyDropSelect.value,\r\n                PartyTypeID: values.Partytype.value,\r\n                PricelistID: priceListSelect.value\r\n            }\r\n            dispatch(DiscountCustomer_Dropdown_Action(config))\r\n        }\r\n        setState((i) => {\r\n            const a = { ...i }\r\n            a.values.CustomerName = { value: \"\", label: \"All\" };\r\n            a.hasValid.CustomerName.valid = false\r\n            return a\r\n        })\r\n    }, [priceListSelect]);\r\n\r\n    const PartyTypeOptions = partyType_redux.map((i) => ({\r\n        value: i.id,\r\n        label: i.Name,\r\n    }));\r\n\r\n    const customerOptions = customer.map((index) => ({\r\n        value: index.id,\r\n        label: index.Name,\r\n    }));\r\n\r\n    customerOptions.unshift({ value: \"\", label: \"All\" });\r\n\r\n    const pagesListColumns = [\r\n        {\r\n            text: \"Group Name\",\r\n            dataField: \"GroupName\",\r\n        }, {\r\n            text: \"Sub Group Name\",\r\n            dataField: \"SubGroupName\",\r\n        },\r\n        {\r\n            text: \"Item Name\",\r\n            dataField: \"ItemName\",\r\n        },\r\n\r\n        {//*************** Discount Type ******************* */\r\n            text: \"Discount Type\",\r\n            formatExtraData: {\r\n                discountValueAll: discountValueAll,\r\n                discountTypeAll: discountTypeAll,\r\n                changeAllDiscount: changeAllDiscount,\r\n                forceReload: forceReload,\r\n                tableList: tableData\r\n            },\r\n\r\n            headerFormatter: () => {\r\n                return (\r\n                    <div className=\"row\">\r\n                        {tableData.length <= 0 ?\r\n                            <div className=\"col col-5\" style={{ marginTop: \"10px\" }}>\r\n                                <Label>Discount Type</Label>\r\n                            </div>\r\n                            :\r\n                            <>\r\n                                <div className=\"col col-5\" style={{ marginTop: \"10px\" }} >\r\n                                    <Label >Discount Type</Label>\r\n                                </div>\r\n                                <div className=\"col col-6\" >\r\n                                    <Select\r\n                                        type=\"text\"\r\n                                        defaultValue={discountTypeAll}\r\n                                        classNamePrefix=\"select2-selection\"\r\n                                        options={discountDropOption}\r\n                                        style={{ textAlign: \"right\" }}\r\n                                        onChange={(e) => {\r\n                                            setChangeAllDiscount(true);\r\n                                            setDiscountTypeAll(e);\r\n                                            setDiscountValueAll('');\r\n                                        }}\r\n                                    />\r\n                                </div>\r\n                            </>\r\n                        }\r\n\r\n                    </div>\r\n                );\r\n            },\r\n\r\n            formatter: (cellContent, index1, key, formatExtraData) => {\r\n                let { tableList, discountValueAll, discountTypeAll } = formatExtraData;\r\n\r\n                if (formatExtraData.changeAllDiscount) {\r\n                    index1[\"DiscountType\"] = discountTypeAll.value;\r\n                }\r\n                if (!index1.DiscountType) { index1[\"DiscountType\"] = discountTypeAll.value }\r\n\r\n                const defaultDiscountTypelabel =\r\n                    index1.DiscountType === 1 ? discountDropOption[0] : discountDropOption[1];\r\n\r\n                return (\r\n                    <>\r\n                        <div className=\"mb-2\">\r\n                            <div className=\"parent\">\r\n\r\n                                <div className=\"child\">\r\n                                    <Select\r\n                                        id={`DicountType_${key}`}\r\n                                        classNamePrefix=\"select2-selection\"\r\n                                        key={`DicountType_${key}-${index1.tableId}`}\r\n                                        value={defaultDiscountTypelabel}\r\n                                        options={discountDropOption}\r\n                                        isDisabled={(index1.RecordCount === 1) && true}\r\n                                        onChange={(e) => {\r\n\r\n                                            setChangeAllDiscount(false);\r\n                                            setForceReload(!forceReload);\r\n                                            index1.DiscountType = e.value;\r\n                                        }}\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </>\r\n                );\r\n            },\r\n            headerStyle: () => {\r\n                return { width: '300px', };\r\n            }\r\n        },\r\n\r\n        {//***************  Discount ******************************* */\r\n            text: \"Discount \",\r\n            formatExtraData: {\r\n                discountValueAll: discountValueAll,\r\n                discountTypeAll: discountTypeAll,\r\n                changeAllDiscount: changeAllDiscount,\r\n                forceReload: forceReload,\r\n                tableList: tableData,\r\n            },\r\n            headerFormatter: () => {\r\n                return (\r\n\r\n                    <div className=\"row\">\r\n                        {tableData.length <= 0 ?\r\n                            <div className=\"col col-3\" style={{ marginTop: \"10px\" }}>\r\n                                <Label>Discount</Label>\r\n                            </div>\r\n                            :\r\n                            <>\r\n                                <div className=\"col col-3\" style={{ marginTop: \"10px\" }} >\r\n                                    <Label >Discount</Label>\r\n                                </div>\r\n                                <div className=\"col col-5\" >\r\n                                    <CInput\r\n                                        type=\"text\"\r\n                                        className=\"input\"\r\n                                        autoComplete='off'\r\n                                        style={{ textAlign: \"right\" }}\r\n                                        cpattern={decimalRegx}\r\n                                        value={discountValueAll}\r\n                                        onChange={(e) => {\r\n                                            let e_val = Number(e.target.value);\r\n\r\n                                            // Check if discount type is \"percentage\"\r\n                                            if (discountTypeAll.value === 2) {// Discount type 2 represents \"percentage\"\r\n                                                // Limit the input to the range of 0 to 100\r\n                                                if (e_val > 100) {\r\n                                                    e.target.value = 100; // Set the input value to 100 if it exceeds 100\r\n                                                } else if (!(e_val >= 0 && e_val < 100)) {\r\n                                                    e.target.value = \"\"; // Clear the input value if it is less than 0\r\n                                                }\r\n                                            }\r\n                                            setChangeAllDiscount(true);\r\n                                            setDiscountValueAll(e.target.value);\r\n                                        }}\r\n                                    />\r\n                                </div>\r\n                            </>\r\n                        }\r\n                    </div>\r\n\r\n                );\r\n            },\r\n\r\n            classes: () => \"invoice-discount-row\",\r\n            formatter: (cellContent, index1, key, formatExtraData) => {\r\n\r\n                let { tableList, discountValueAll, discountTypeAll, showMessage } = formatExtraData;\r\n\r\n                if (formatExtraData.changeAllDiscount) {\r\n                    index1[\"Discount\"] = discountValueAll;\r\n                    index1[\"DiscountType\"] = discountTypeAll.value;\r\n                }\r\n\r\n                if (!index1.DiscountType) { index1.DiscountType = discountTypeAll.value }\r\n\r\n                return (\r\n                    <>\r\n                        <div className=\"parent\">\r\n                            <div className=\"child\">\r\n                                <CInput\r\n                                    className=\"input\"\r\n                                    id={`Dicount_${key}-${index1.tableId}`}\r\n                                    style={{ textAlign: \"right\" }}\r\n                                    type=\"text\"\r\n                                    disabled={(index1.RecordCount === 1) && true}\r\n                                    autoComplete='off'\r\n                                    value={index1.Discount}\r\n                                    cpattern={decimalRegx}\r\n                                    onChange={(e) => {\r\n                                        let e_val = Number(e.target.value);\r\n                                        // Check if discount type is \"percentage\"\r\n                                        if (index1.DiscountType === 2) { // Discount type 2 represents \"percentage\"\r\n                                            // Limit the input to the range of 0 to 100\r\n                                            if (e_val > 100) {\r\n                                                e.target.value = 100; // Set the input value to 100 if it exceeds 100\r\n                                            } else if (!(e_val >= 0 && e_val < 100)) {\r\n                                                e.target.value = ''; // Clear the input value if it is less than 0\r\n                                            }\r\n                                        }\r\n                                        index1.Discount = e.target.value;\r\n                                        setForceReload(!forceReload);\r\n                                        setChangeAllDiscount(false);\r\n                                    }}\r\n                                />\r\n                                {/* {((index1.Discount === null) && (index1.RecordCount === 1)) &&\r\n                                    <span className=\"text-danger f-8\">\r\n                                        <small>This item is already discounted...!</small>\r\n                                    </span>\r\n                                } */}\r\n                            </div>\r\n\r\n                        </div>\r\n                    </>\r\n                );\r\n            },\r\n            headerStyle: () => {\r\n                return { width: '300px', };\r\n            }\r\n        },\r\n    ];\r\n\r\n    const FromDate_Onchange = (e, date) => {\r\n        setState((i) => {\r\n            const a = { ...i }\r\n            a.values.FromDate = date;\r\n            a.hasValid.FromDate.valid = true\r\n            return a\r\n        })\r\n    }\r\n\r\n    const ToDate_Onchange = (e, date) => {\r\n        setState((i) => {\r\n            const a = { ...i }\r\n            a.values.ToDate = date;\r\n            a.hasValid.ToDate.valid = true\r\n            return a\r\n        })\r\n    }\r\n\r\n    const priceListOnClick = function () {\r\n\r\n        const hasNone = document.getElementById(\"price-drop\").style;\r\n\r\n        if ((priceListByPartyType.length > 0)) {\r\n\r\n            if ((hasNone.display === \"none\") || (hasNone.display === \"\")) {\r\n                hasNone.display = \"block\";\r\n            } else {\r\n                hasNone.display = \"none\";\r\n            }\r\n        }\r\n    };\r\n\r\n    function partyTypeOnChange(hasSelect, evn) {\r\n        onChangeSelect({ hasSelect, evn, state, setState })\r\n        setPriceListSelect({ label: \"\", value: \"\" })\r\n        setState((i) => {\r\n            const a = { ...i }\r\n            a.values.CustomerName = { value: \"\", label: \"All\" };\r\n            a.hasValid.CustomerName.valid = false\r\n            return a\r\n        })\r\n        dispatch(priceListByPartyAction(hasSelect.value))\r\n    }\r\n\r\n    function goButtonHandler() {\r\n\r\n        if (values.Partytype === '') {\r\n            customAlert({\r\n                Type: 4,\r\n                Message: \"Select Party Type\",\r\n            });\r\n            return;\r\n        }\r\n\r\n        else if (priceListSelect.value === '') {\r\n            customAlert({\r\n                Type: 4,\r\n                Message: \"Select PriceList\",\r\n            });\r\n            return;\r\n        }\r\n\r\n        const jsonBody = JSON.stringify({\r\n            \"FromDate\": values.FromDate,\r\n            \"ToDate\": values.ToDate,\r\n            \"Party\": commonPartyDropSelect.value,\r\n            \"PartyType\": values.Partytype.value,\r\n            \"PriceList\": priceListSelect.value,\r\n            \"Customer\": values.CustomerName === \"\" ? \"\" : values.CustomerName.value,\r\n        });\r\n        dispatch(goBtnDiscountAddAction({ jsonBody }))\r\n    }\r\n\r\n    const saveHandler = async (event) => {\r\n        event.preventDefault();\r\n\r\n        try {\r\n            const filteredDiscounts = tableData.reduce((filteredDiscountTable, currentValue) => {\r\n                if (currentValue.Discount > 0) {\r\n                    filteredDiscountTable.push({\r\n                        \"FromDate\": values.FromDate,\r\n                        \"ToDate\": values.ToDate,\r\n                        \"DiscountType\": currentValue.DiscountType,\r\n                        \"Discount\": currentValue.Discount,\r\n                        \"PartyType\": values.Partytype.value,\r\n                        \"PriceList\": priceListSelect.value,\r\n                        \"Customer\": values.CustomerName === \"\" ? \"\" : values.CustomerName.value,\r\n                        \"Item\": currentValue.ItemID,\r\n                        \"Party\": commonPartyDropSelect.value,\r\n                        \"CreatedBy\": _cfunc.loginUserID(),\r\n                        \"UpdatedBy\": _cfunc.loginUserID(),\r\n                        \"id\": currentValue.id\r\n                    });\r\n                }\r\n                return filteredDiscountTable;\r\n            }, []);\r\n\r\n\r\n            const Find = filteredDiscounts.filter((index) => {   // condition for margin save without 0\r\n                return ((index.Discount > 0) && (index.id === null))\r\n            })\r\n            if ((Find.length === 0)) {\r\n                customAlert({\r\n                    Type: 4,\r\n                    Message: \"Please Enter One Item Discount\",\r\n                });\r\n                return;\r\n            }\r\n            const jsonBody = JSON.stringify(Find);\r\n\r\n            if (pageMode === mode.edit) {\r\n                // dispatch(updateDiscountID({ jsonBody, updateId: editVal.id, gotoInvoiceMode }))\r\n\r\n            } else {\r\n\r\n                dispatch(saveDiscountAction({ jsonBody }))\r\n            }\r\n        } catch (error) {\r\n            _cfunc.CommonConsole(\"dicount_Save\", error);\r\n        }\r\n    }\r\n\r\n    if (!(userPageAccessState === '')) {\r\n        return (\r\n            <React.Fragment>\r\n                <MetaTags>{_cfunc.metaTagLabel(userPageAccessState)}</MetaTags>\r\n\r\n                <div className=\"page-content\" >\r\n                    <NewCommonPartyDropdown pageMode={pageMode} />\r\n                    <form noValidate>\r\n                        <div className=\"px-2 c_card_filter header text-black mb-1\" >\r\n\r\n                            <Row>\r\n                                <Col sm=\"6\">\r\n                                    <FormGroup className=\"row mt-2\" >\r\n                                        <Label className=\"col-sm-1 p-2\"\r\n                                            style={{ width: \"115px\", marginRight: \"0.4cm\" }}>{fieldLabel.FromDate}  </Label>\r\n                                        <Col sm=\"7\">\r\n                                            <C_DatePicker\r\n                                                options={{\r\n                                                    altInput: true,\r\n                                                    altFormat: \"d-m-Y\",\r\n                                                    dateFormat: \"Y-m-d\",\r\n                                                    maxDate: new Date(new Date().setMonth(new Date().getMonth() + 1)),// Set the maximum date\r\n                                                }}\r\n                                                name='FromDate'\r\n                                                disabled={(tableData.length > 0) && true}\r\n                                                value={values.FromDate}\r\n                                                onChange={FromDate_Onchange}\r\n                                            />\r\n                                        </Col>\r\n                                    </FormGroup>\r\n                                </Col >\r\n\r\n                                <Col sm=\"6\">\r\n                                    <FormGroup className=\"row mt-2\" >\r\n                                        <Label className=\"col-sm-1 p-2\"\r\n                                            style={{ width: \"115px\", marginRight: \"0.4cm\" }}>{fieldLabel.ToDate}  </Label>\r\n                                        <Col sm=\"7\">\r\n                                            <C_DatePicker\r\n                                                options={{\r\n                                                    altInput: true,\r\n                                                    altFormat: \"d-m-Y\",\r\n                                                    dateFormat: \"Y-m-d\",\r\n                                                    maxDate: new Date(new Date().setMonth(new Date().getMonth() + 1)),// Set the maximum date\r\n                                                }}\r\n                                                name='ToDate'\r\n                                                disabled={(tableData.length > 0) && true}\r\n                                                value={values.ToDate}\r\n                                                onChange={ToDate_Onchange}\r\n                                            />\r\n                                        </Col>\r\n\r\n                                    </FormGroup>\r\n                                </Col >\r\n\r\n                            </Row>\r\n\r\n                            <Row>\r\n                                <Col sm=\"6\">\r\n                                    <FormGroup className=\" row mt-2 \" >\r\n                                        <Label className=\"col-sm-1 p-2\"\r\n                                            style={{ width: \"115px\", marginRight: \"0.4cm\" }}>{fieldLabel.Partytype} </Label>\r\n                                        <Col sm=\"7\">\r\n                                            <C_Select\r\n                                                id=\"Partytype \"\r\n                                                name=\"Partytype\"\r\n                                                value={values.Partytype}\r\n                                                isDisabled={(tableData.length > 0) && true}\r\n                                                isSearchable={true}\r\n                                                options={PartyTypeOptions}\r\n                                                isLoading={partyTypeDropDownLoading}\r\n                                                styles={{\r\n                                                    menu: provided => ({ ...provided, zIndex: 2 })\r\n                                                }}\r\n                                                onChange={partyTypeOnChange}\r\n                                            />\r\n                                        </Col>\r\n                                    </FormGroup>\r\n                                </Col >\r\n                                <Col sm=\"6\">\r\n                                    <FormGroup className=\" row mt-2 \" >\r\n                                        <Label className=\"col-sm-1 p-2\"\r\n                                            style={{ width: \"115px\", marginRight: \"0.4cm\" }}>{fieldLabel.PriceListName} </Label>\r\n                                        <Col sm=\"7\">\r\n\r\n                                            <Input\r\n                                                value={priceListSelect.label}\r\n                                                disabled={(tableData.length > 0) && true}\r\n                                                autoComplete={\"off\"}\r\n                                                placeholder=\"Select...\"\r\n                                                onClick={priceListOnClick}\r\n                                            >\r\n                                            </Input>\r\n\r\n                                            <PriceDropOptions\r\n                                                data={priceListByPartyType}\r\n                                                priceList={priceListSelect}\r\n                                                setPriceSelect={setPriceListSelect} />\r\n                                        </Col>\r\n                                    </FormGroup>\r\n                                </Col >\r\n                            </Row>\r\n\r\n                            <Row>\r\n                                <Col sm=\"6\">\r\n                                    <FormGroup className=\" row mt-2 \" >\r\n                                        <Label className=\"col-sm-1 p-2\"\r\n                                            style={{ width: \"115px\", marginRight: \"0.4cm\" }}>{fieldLabel.CustomerName} </Label>\r\n                                        <Col sm=\"7\">\r\n                                            <C_Select\r\n                                                id=\"CustomerName \"\r\n                                                name=\"CustomerName\"\r\n                                                value={values.CustomerName}\r\n                                                isDisabled={(tableData.length > 0) && true}\r\n                                                isSearchable={true}\r\n                                                isLoading={customerDropDownLoading}\r\n                                                options={customerOptions}\r\n                                                styles={{\r\n                                                    menu: provided => ({ ...provided, zIndex: 2 })\r\n                                                }}\r\n                                                onChange={(hasSelect, evn) => {\r\n                                                    onChangeSelect({ hasSelect, evn, state, setState });\r\n                                                }\r\n                                                }\r\n                                            />\r\n\r\n                                        </Col>\r\n                                    </FormGroup>\r\n                                </Col >\r\n\r\n                                <Col md={4}> </Col>\r\n\r\n                                <Col sm=\"1\" className=\"mx-6 mt-1 \">\r\n                                    {!tableData.length > 0 ?\r\n                                        <Go_Button\r\n                                            loading={goBtnLoading}\r\n                                            onClick={goButtonHandler}>\r\n                                        </Go_Button>\r\n                                        :\r\n                                        <Change_Button\r\n                                            onClick={(e) => setTableData([])}\r\n                                        />\r\n                                    }\r\n                                </Col>\r\n                            </Row>\r\n                        </div>\r\n\r\n                        <div>\r\n                            <ToolkitProvider\r\n                                keyField={\"tableId\"}\r\n                                data={tableData}\r\n                                columns={pagesListColumns}\r\n                                search\r\n                            >\r\n\r\n                                {(toolkitProps) => (\r\n                                    <React.Fragment>\r\n                                        <Row>\r\n                                            <Col xl=\"12\">\r\n                                                <div className=\"table-responsive table\" style={{ minHeight: \"60vh\" }}>\r\n                                                    <BootstrapTable\r\n                                                        keyField={\"tableId\"}\r\n                                                        id=\"table_Arrow\"\r\n                                                        classes={\"table  table-bordered \"}\r\n                                                        noDataIndication={\r\n                                                            <div className=\"text-danger text-center \">\r\n                                                                Record Not available\r\n                                                            </div>\r\n                                                        }\r\n                                                        onDataSizeChange={(e) => {\r\n                                                            _cfunc.tableInputArrowUpDounFunc(\"#table_Arrow\")\r\n                                                        }}\r\n                                                        {...toolkitProps.baseProps}\r\n                                                    />\r\n                                                </div>\r\n                                            </Col>\r\n                                            {mySearchProps(toolkitProps.searchProps,)}\r\n                                        </Row>\r\n\r\n                                    </React.Fragment>\r\n                                )}\r\n                            </ToolkitProvider>\r\n                        </div>\r\n\r\n                    </form >\r\n\r\n                    {\r\n                        (tableData.length > 0) &&\r\n                        <div className=\"row save1\" >\r\n                            <SaveButton\r\n                                loading={saveBtnloading}\r\n                                editCreatedBy={\"editCreatedBy\"}\r\n                                pageMode={pageMode}\r\n                                userAcc={userPageAccessState}\r\n                                onClick={saveHandler}\r\n                            // forceDisabled={goBtnloading}\r\n                            />\r\n\r\n                        </div>\r\n                    }\r\n\r\n                </div >\r\n            </React.Fragment >\r\n        );\r\n    }\r\n    else {\r\n        return (\r\n            <React.Fragment></React.Fragment>\r\n        )\r\n    }\r\n};\r\n\r\nexport default DiscountMaster\r\n\r\n\r\n\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\PageMasterRedux\\saga.js",["4239"],"import { call, put, takeLatest } from \"redux-saga/effects\";\r\nimport {\r\n\r\n\r\n  edit_PageListID_Success,\r\n  getControlTypesSuccess,\r\n  getFieldValidationsSuccess,\r\n  Get_pageListAction_Success,\r\n  getPageAccess_DropDown_API_Success,\r\n  RelatedPageListDropdownSuccess,\r\n  save_PageMaster_Success,\r\n  update_PageListId_Success,\r\n  PageMasterApiErrorAction,\r\n  delete_PageListID_Success,\r\n  getPageTypeSuccess,\r\n  getFieldValidationsForALLTypeSuccess,\r\n} from \"./actions\";\r\nimport {\r\n  ControlTypes_DropDown_Api,\r\n  PageMaster_Delete_API,\r\n  PageMaster_Edit_API,\r\n  PageMaster_Get_API,\r\n  GetFieldValidationOnControlType_DropDown_API,\r\n  PageMaster_Post_API,\r\n  showPagesListOnPageAccess_DropDown_List,\r\n  showPagesListOnPageType_DropDown_List,\r\n  PageMaster_Update_API,\r\n  get_PageType_HPages\r\n} from \"../../../helpers/backend_helper\";\r\nimport {\r\n  DELETE_PAGE_LIST_ID_ACTION,\r\n  EDIT_PAGE_LIST_ID_ACTION,\r\n  GET_CONTROL_TYPES,\r\n  GET_FIELD_VALIDATIONS,\r\n  GET_PAGES_LIST_ACTION,\r\n  GET_PAGEACCESS_DROPDOWN_API,\r\n  RELATED_PAGELIST_DROPDOWN_ACTION,\r\n  SAVE_PAGE_MASTER_ACTION,\r\n  UPDATE_PAGE_LIST_ID_ACTION,\r\n  GET_PAGETYPE,\r\n  GET_FIELD_VALIDATIONS_FOR_ALL_TYPE,\r\n} from \"./actionType\";\r\nimport { CommonConsole } from \"../../../components/Common/CommonFunction\";\r\n\r\n// List API\r\nfunction* PagesList_GenFun() {\r\n  try {\r\n    const response = yield call(PageMaster_Get_API);\r\n    yield put(Get_pageListAction_Success(response.Data));\r\n  } catch (error) { yield put(PageMasterApiErrorAction()) }\r\n}\r\n\r\n// Post API\r\nfunction* savePageMaster_GenFun({ config }) {\r\n  try {\r\n    const response = yield call(PageMaster_Post_API, config);\r\n    yield put(save_PageMaster_Success(response));\r\n  } catch (error) { yield put(PageMasterApiErrorAction()) }\r\n}\r\n\r\n// Edit API\r\nfunction* edit_pageListID_GenFun({ config }) {\r\n  const { btnmode } = config;\r\n  try {\r\n    let response = yield call(PageMaster_Edit_API, config);\r\n    response.pageMode = btnmode\r\n    yield put(edit_PageListID_Success(response));\r\n  } catch (error) { yield put(PageMasterApiErrorAction()) }\r\n}\r\n\r\n// Update API\r\nfunction* update_PageListID_GenFun({ config }) {\r\n  try {\r\n    const response = yield call(PageMaster_Update_API, config);\r\n    yield put(update_PageListId_Success(response))\r\n  } catch (error) { yield put(PageMasterApiErrorAction()) }\r\n}\r\n\r\n// Delete API\r\nfunction* delete_pageListID_GenFun({ config }) {\r\n  try {\r\n    const response = yield call(PageMaster_Delete_API, config);\r\n    yield put(delete_PageListID_Success(response))\r\n  } catch (error) { yield put(PageMasterApiErrorAction()) }\r\n}\r\n\r\n//  Related Page List dropdown \r\nfunction* RelatedPageList_DropDown_GenFun() {\r\n  try {\r\n    const response = yield call(showPagesListOnPageType_DropDown_List);\r\n    yield put(RelatedPageListDropdownSuccess(response.Data));\r\n  } catch (error) { yield put(PageMasterApiErrorAction()) }\r\n}\r\n\r\n//  PageType dropdown list\r\nfunction* PageType_DropDown_GenFunc() {\r\n  try {\r\n    const response = yield call(get_PageType_HPages);\r\n    yield put(getPageTypeSuccess(response.Data));\r\n  } catch (error) { yield put(PageMasterApiErrorAction()) }\r\n}\r\n\r\n//  PageAccess dropdown list\r\nfunction* PageAccess_DropDown_GenFun() {\r\n  try {\r\n    const response = yield call(showPagesListOnPageAccess_DropDown_List);\r\n    yield put(getPageAccess_DropDown_API_Success(response.Data));\r\n  } catch (error) { yield put(PageMasterApiErrorAction()) }\r\n}\r\n\r\n//  Control Types dropdown list\r\nfunction* ControlTypes_DropDown_GenFun() {\r\n  try {\r\n    const response = yield call(ControlTypes_DropDown_Api);\r\n    yield put(getControlTypesSuccess(response.Data));\r\n  } catch (error) { yield put(PageMasterApiErrorAction()) }\r\n}\r\n\r\n//  Field Validations dropdown list\r\nfunction* FieldValidations_DropDown_GenFun({ id }) {\r\n  try {\r\n    const response = yield call(GetFieldValidationOnControlType_DropDown_API, id);\r\n    yield put(getFieldValidationsSuccess(response.Data));\r\n  } catch (error) {\r\n    CommonConsole(error);\r\n    yield put(PageMasterApiErrorAction());\r\n  }\r\n}\r\n\r\n//  Field Validations dropdown list\r\nfunction* FieldValidationsForAllTypeGenFun({ }) {\r\n  try {\r\n    const type1Resp = yield call(GetFieldValidationOnControlType_DropDown_API, 1);\r\n    const type2Resp = yield call(GetFieldValidationOnControlType_DropDown_API, 2);\r\n    const type3Resp = yield call(GetFieldValidationOnControlType_DropDown_API, 3);\r\n    const type4Resp = yield call(GetFieldValidationOnControlType_DropDown_API, 4);\r\n    if ((type1Resp.StatusCode === 200)\r\n      || (type2Resp.StatusCode === 200)\r\n      || (type3Resp.StatusCode === 200)\r\n      || (type4Resp.StatusCode === 200)) {\r\n\r\n      let response = [\r\n        { type: 1, data: type1Resp.Data },\r\n        { type: 2, data: type2Resp.Data },\r\n        { type: 3, data: type3Resp.Data },\r\n        { type: 4, data: type4Resp.Data }\r\n      ]\r\n      yield put(getFieldValidationsForALLTypeSuccess(response));\r\n    }\r\n  } catch (error) {\r\n    CommonConsole(error);\r\n    yield put(PageMasterApiErrorAction());\r\n  }\r\n}\r\n\r\nfunction* HPageSaga() {\r\n  yield takeLatest(SAVE_PAGE_MASTER_ACTION, savePageMaster_GenFun)\r\n  yield takeLatest(GET_PAGES_LIST_ACTION, PagesList_GenFun);\r\n  yield takeLatest(EDIT_PAGE_LIST_ID_ACTION, edit_pageListID_GenFun);\r\n  yield takeLatest(UPDATE_PAGE_LIST_ID_ACTION, update_PageListID_GenFun);\r\n  yield takeLatest(DELETE_PAGE_LIST_ID_ACTION, delete_pageListID_GenFun)\r\n  yield takeLatest(RELATED_PAGELIST_DROPDOWN_ACTION, RelatedPageList_DropDown_GenFun)\r\n  yield takeLatest(GET_PAGEACCESS_DROPDOWN_API, PageAccess_DropDown_GenFun)\r\n  yield takeLatest(GET_CONTROL_TYPES, ControlTypes_DropDown_GenFun)\r\n  yield takeLatest(GET_FIELD_VALIDATIONS, FieldValidations_DropDown_GenFun)\r\n  yield takeLatest(GET_PAGETYPE, PageType_DropDown_GenFunc)\r\n  yield takeLatest(GET_FIELD_VALIDATIONS_FOR_ALL_TYPE, FieldValidationsForAllTypeGenFun)\r\n}\r\n\r\nexport default HPageSaga;\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\PageMasterRedux\\reducer.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\PageMasterRedux\\actions.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\PageMasterRedux\\actionType.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\Reports\\GenericSaleReport\\GenericSaleReport.js",["4240","4241","4242","4243","4244","4245","4246","4247","4248","4249"],"import React, { useEffect, useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { Col, FormGroup, Label, Row } from \"reactstrap\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { C_Button } from \"../../components/Common/CommonButton\";\r\nimport { C_DatePicker, C_Select } from \"../../CustomValidateForm\";\r\nimport * as _cfunc from \"../../components/Common/CommonFunction\";\r\nimport { mode, pageId } from \"../../routes/index\"\r\nimport { MetaTags } from \"react-meta-tags\";\r\nimport { GoButton_For_GenericSale_Action, GoButton_For_GenericSale_Success } from \"../../store/Report/GenericSaleRedux/action\";\r\nimport * as XLSX from 'xlsx';\r\nimport ToolkitProvider from \"react-bootstrap-table2-toolkit\";\r\nimport BootstrapTable from \"react-bootstrap-table-next\";\r\nimport { mySearchProps } from \"../../components/Common/SearchBox/MySearch\";\r\nimport { BreadcrumbShowCountlabel, commonPageField, commonPageFieldSuccess } from \"../../store/actions\";\r\nimport DynamicColumnHook from \"../../components/Common/TableCommonFunc\";\r\nimport { ReportComponent } from \"../ReportComponent\";\r\n\r\nconst GenericSaleReport = (props) => {\r\n\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n    const currentDate_ymd = _cfunc.date_ymd_func();\r\n    const isSCMParty = _cfunc.loginIsSCMParty();\r\n\r\n    const [headerFilters, setHeaderFilters] = useState('');\r\n    const [userPageAccessState, setUserAccState] = useState('');\r\n    const [distributorDropdown, setDistributorDropdown] = useState([{ value: \"\", label: \"All\" }]);\r\n    const [tableData, setTableData] = useState([]);\r\n    const [btnMode, setBtnMode] = useState(0);\r\n\r\n    const {\r\n        goButtonData = [],\r\n        pageField,\r\n        userAccess,\r\n        Distributor,\r\n        partyDropdownLoading\r\n    } = useSelector((state) => ({\r\n        goButtonData: state.GenericSaleReportReducer.genericSaleGobtn,\r\n        partyDropdownLoading: state.CommonPartyDropdownReducer.partyDropdownLoading,\r\n        Distributor: state.CommonPartyDropdownReducer.commonPartyDropdown,\r\n        userAccess: state.Login.RoleAccessUpdateData,\r\n        pageField: state.CommonPageFieldReducer.pageField\r\n    })\r\n    );\r\n\r\n    const { fromdate = currentDate_ymd, todate = currentDate_ymd } = headerFilters;\r\n\r\n    // Featch Modules List data  First Rendering\r\n    const location = { ...history.location }\r\n    const hasShowModal = props.hasOwnProperty(mode.editValue)\r\n\r\n    useEffect(() => {\r\n        dispatch(commonPageFieldSuccess(null));\r\n        dispatch(commonPageField(pageId.GENERIC_SALE_REPORT))\r\n\r\n    }, []);\r\n\r\n    // userAccess useEffect\r\n    useEffect(() => {\r\n        let userAcc = null;\r\n        let locationPath = location.pathname;\r\n        if (hasShowModal) {\r\n            locationPath = props.masterPath;\r\n        };\r\n        userAcc = userAccess.find((inx) => {\r\n            return (`/${inx.ActualPagePath}` === locationPath)\r\n        })\r\n        if (userAcc) {\r\n            setUserAccState(userAcc)\r\n            _cfunc.breadcrumbReturnFunc({ dispatch, userAcc });\r\n        };\r\n    }, [userAccess])\r\n\r\n    useEffect(() => {\r\n        dispatch(BreadcrumbShowCountlabel(`Count:${0} ₹ ${0.00}`));\r\n        return () => {\r\n            setTableData([]);\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (tableData.length === 0) {\r\n            setBtnMode(0)\r\n        }\r\n\r\n    }, [tableData]);\r\n\r\n    const Party_Option = Distributor.map(i => ({\r\n        value: i.id,\r\n        label: i.Name\r\n    }));\r\n\r\n    const [tableColumns] = DynamicColumnHook({ pageField, })\r\n\r\n    useEffect(() => {\r\n\r\n        try {\r\n            if ((goButtonData.Status === true) && (goButtonData.StatusCode === 200)) {\r\n                setBtnMode(0);\r\n                const { Data } = goButtonData\r\n                if (btnMode === 2) {\r\n                    ReportComponent({      // Download CSV\r\n                        pageField,\r\n                        excelData: Data,\r\n                        excelFileName: \"Generic Sale Report\"\r\n                    })\r\n                    dispatch(GoButton_For_GenericSale_Success([]));\r\n                    setDistributorDropdown([{ value: \"\", label: \"All\" }])\r\n                }\r\n                else {\r\n                    const UpdatedTableData = Data.map((item, index) => {\r\n\r\n                        return {\r\n                            ...item, id: index + 1,\r\n                        };\r\n                    });\r\n                    setTableData(UpdatedTableData);\r\n                    dispatch(GoButton_For_GenericSale_Success([]));\r\n                }\r\n            }\r\n            else if ((goButtonData.Status === true)) {\r\n                setTableData([]);\r\n            }\r\n            setBtnMode(0);\r\n        }\r\n        catch (e) { console.log(e) }\r\n\r\n    }, [goButtonData]);\r\n\r\n    function excel_And_GoBtnHandler(e, Btnmode) {\r\n\r\n        setBtnMode(Btnmode);\r\n\r\n        var isDistributorDropdown = ''\r\n        if (distributorDropdown[0].value === \"\") {\r\n            isDistributorDropdown = Party_Option.filter(i => !(i.value === '')).map(obj => obj.value).join(',');\r\n        }\r\n        else {\r\n            isDistributorDropdown = distributorDropdown.filter(i => !(i.value === '')).map(obj => obj.value).join(',');\r\n        }\r\n\r\n        const jsonBody = JSON.stringify({\r\n            \"FromDate\": fromdate,\r\n            \"ToDate\": todate,\r\n            \"Party\": !(isSCMParty) ? _cfunc.loginPartyID().toString() : isDistributorDropdown,\r\n        });\r\n        let config = { jsonBody }\r\n        dispatch(GoButton_For_GenericSale_Action(config));\r\n    }\r\n\r\n    function fromdateOnchange(e, date) {\r\n\r\n        let newObj = { ...headerFilters }\r\n        newObj.fromdate = date\r\n        setHeaderFilters(newObj)\r\n        setTableData([]);\r\n    }\r\n\r\n    function todateOnchange(e, date) {\r\n\r\n        let newObj = { ...headerFilters }\r\n        newObj.todate = date\r\n        setHeaderFilters(newObj);\r\n        setTableData([]);\r\n    }\r\n\r\n    function PartyDrodownOnChange(e = []) {\r\n\r\n        if (e.length === 0) {\r\n            e = [{ value: \"\", label: \"All\" }]\r\n        } else {\r\n            e = e.filter(i => !(i.value === ''))\r\n        }\r\n        setDistributorDropdown(e);\r\n        setTableData([]);\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <MetaTags>{_cfunc.metaTagLabel(userPageAccessState)}</MetaTags>\r\n\r\n            <div className=\"page-content\">\r\n                <div className=\"px-2   c_card_filter text-black mb-1\" >\r\n                    <div className=\"row\" >\r\n                        <Col sm={3} className=\"\">\r\n                            <FormGroup className=\"mb- row mt-3 mb-2 \" >\r\n                                <Label className=\"col-sm-4 p-2\"\r\n                                    style={{ width: \"83px\" }}>FromDate</Label>\r\n                                <Col sm=\"6\">\r\n                                    <C_DatePicker\r\n                                        name='FromDate'\r\n                                        value={fromdate}\r\n                                        onChange={fromdateOnchange}\r\n                                    />\r\n                                </Col>\r\n                            </FormGroup>\r\n                        </Col>\r\n\r\n                        <Col sm={3} className=\"\">\r\n                            <FormGroup className=\"mb- row mt-3 mb-2\" >\r\n                                <Label className=\"col-sm-4 p-2\"\r\n                                    style={{ width: \"65px\" }}>ToDate</Label>\r\n                                <Col sm=\"6\">\r\n                                    <C_DatePicker\r\n                                        name=\"ToDate\"\r\n                                        value={todate}\r\n                                        onChange={todateOnchange}\r\n                                    />\r\n                                </Col>\r\n                            </FormGroup>\r\n                        </Col>\r\n\r\n                        {isSCMParty &&\r\n                            <Col sm={3} className=\"\">\r\n                                <FormGroup className=\"mb- row mt-3\" >\r\n                                    <Label className=\"col-sm-4 p-2\"\r\n                                        style={{ width: \"65px\", marginRight: \"20px\" }}>Party</Label>\r\n                                    <Col sm=\"8\">\r\n                                        <C_Select\r\n                                            name=\"Distributor\"\r\n                                            value={distributorDropdown}\r\n                                            isSearchable={true}\r\n                                            isMulti={true}\r\n                                            isLoading={partyDropdownLoading}\r\n                                            className=\"react-dropdown\"\r\n                                            classNamePrefix=\"dropdown\"\r\n                                            styles={{\r\n                                                menu: provided => ({ ...provided, zIndex: 2 })\r\n                                            }}\r\n                                            options={Party_Option}\r\n                                            onChange={PartyDrodownOnChange}\r\n                                        />\r\n                                    </Col>\r\n                                </FormGroup>\r\n                            </Col>\r\n                        }\r\n\r\n                        <Col sm={1} className=\"mt-3\" >\r\n                            <C_Button\r\n                                type=\"button\"\r\n                                spinnerColor=\"white\"\r\n                                loading={btnMode === 1 && true}\r\n                                className=\"btn btn-success\"\r\n                                onClick={(e) => excel_And_GoBtnHandler(e, 1)}\r\n                            >\r\n                                Show\r\n                            </C_Button>\r\n\r\n                        </Col>\r\n\r\n                        <Col sm={2} className=\"mt-3 \">\r\n                            <C_Button\r\n                                type=\"button\"\r\n                                spinnerColor=\"white\"\r\n                                loading={btnMode === 2 && true}\r\n                                className=\"btn btn-primary\"\r\n                                onClick={(e) => excel_And_GoBtnHandler(e, 2)}\r\n                            >\r\n                                Excel Download\r\n                            </C_Button>\r\n                        </Col>\r\n                    </div>\r\n                </div>\r\n\r\n                <div>\r\n                    <ToolkitProvider\r\n                        keyField={\"id\"}\r\n                        data={tableData}\r\n                        columns={tableColumns}\r\n                        search\r\n                    >\r\n                        {(toolkitProps,) => (\r\n                            <React.Fragment>\r\n                                <Row>\r\n                                    <Col xl=\"12\">\r\n                                        <div className=\"table-responsive table\">\r\n                                            <BootstrapTable\r\n                                                keyField={\"id\"}\r\n                                                classes={\"table  table-bordered table-hover\"}\r\n                                                noDataIndication={\r\n                                                    <div className=\"text-danger text-center \">\r\n                                                        Record Not available\r\n                                                    </div>\r\n                                                }\r\n                                                onDataSizeChange={({ dataSize }) => {\r\n                                                    dispatch(BreadcrumbShowCountlabel(`Count:${dataSize}`));\r\n                                                }}\r\n                                                {...toolkitProps.baseProps}\r\n                                            />\r\n                                            {mySearchProps(toolkitProps.searchProps)}\r\n                                        </div>\r\n                                    </Col>\r\n                                </Row>\r\n\r\n                            </React.Fragment>\r\n                        )}\r\n                    </ToolkitProvider>\r\n\r\n                </div>\r\n\r\n            </div>\r\n\r\n        </React.Fragment >\r\n    )\r\n}\r\n\r\nexport default GenericSaleReport;","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\DiscountRedux\\saga.js",["4250"],"import { call, delay, put, takeEvery } from \"redux-saga/effects\";\r\nimport { date_dmy_func, loginPartyID } from \"../../../components/Common/CommonFunction\";\r\nimport {\r\n  Discount_Delete_Api,\r\n  Discount_List_Api,\r\n  Discount_Save_Api,\r\n  Discount_Edit_Api,\r\n  Discount_Update_Api,\r\n  Discount_Go_Button_Api,\r\n  DiscountPartyType_Dropdown_API,\r\n  DiscountCustomer_Dropdown_API\r\n} from \"../../../helpers/backend_helper\";\r\nimport {\r\n  deleteDiscountIDSuccess,\r\n  editDiscountIDSuccess,\r\n  getDiscountListSuccess,\r\n  saveDiscountActionSuccess,\r\n  updateDiscountIDSuccess,\r\n  discountApiErrorAction,\r\n  goBtnDiscountAddActionSuccess,\r\n  DiscountPartyType_Dropdown_Success,\r\n  DiscountCustomer_Dropdown_Success\r\n} from \"./actions\";\r\nimport {\r\n  DELETE_DISCOUNT_ID,\r\n  DISCOUNT_CUSTOMER_DROPDOWN_ACTION,\r\n  DISCOUNT_PARTY_TYPE_DROPDOWN_ACTION,\r\n  EDIT_DISCOUNT_ID,\r\n  GET_DISCOUNT_LIST,\r\n  GO_BUTTON_DISCOUNT_ACTION,\r\n  SAVE_DISCOUNT_SUBMIT,\r\n  UPDATE_DISCOUNT_ID,\r\n} from \"./actionType\";\r\n\r\n// Discount Master Go button API\r\nfunction* GoBtn_Discount_GenFunc({ config }) {\r\n\r\n  try {\r\n    yield delay(100)\r\n    const response = yield call(Discount_Go_Button_Api, config);\r\n    yield put(goBtnDiscountAddActionSuccess(response));\r\n  } catch (error) { yield put(discountApiErrorAction()) }\r\n}\r\n\r\nfunction* Save_Method_ForDiscount_GenFun({ config }) {\r\n  try {\r\n    const response = yield call(Discount_Save_Api, config);\r\n    yield put(saveDiscountActionSuccess(response));\r\n  } catch (error) { yield put(discountApiErrorAction()) }\r\n}\r\n\r\n// Discount List API\r\nfunction* Get_Discount_List_GenFunc({ filterBody }) {\r\n\r\n  try {\r\n    const response = yield call(Discount_List_Api, filterBody);\r\n    const newList = yield response.Data.map((i) => {\r\n      if (i.DiscountType === 2) {\r\n        i.DiscountType = \"%\"\r\n      }\r\n      else {\r\n        i.DiscountType = \"Rs\"\r\n      }\r\n      i.FromDate = date_dmy_func(i.FromDate)\r\n      i.ToDate = date_dmy_func(i.ToDate)\r\n      return i\r\n    })\r\n\r\n    yield put(getDiscountListSuccess(newList));\r\n  } catch (error) { yield put(discountApiErrorAction()) }\r\n}\r\n\r\nfunction* deleteDiscount_ID({ config }) {\r\n  try {\r\n    const response = yield call(Discount_Delete_Api, config);\r\n    yield put(deleteDiscountIDSuccess(response))\r\n  } catch (error) { yield put(discountApiErrorAction()) }\r\n}\r\n\r\nfunction* editDiscount_ID({ config }) {\r\n  const { btnmode } = config;\r\n  try {\r\n    const response = yield call(Discount_Edit_Api, config);\r\n    response.pageMode = btnmode\r\n    yield put(editDiscountIDSuccess(response));\r\n  } catch (error) { yield put(discountApiErrorAction()) }\r\n}\r\n\r\nfunction* update_Discount({ config }) {\r\n  try {\r\n    const response = yield call(Discount_Update_Api, config);\r\n    yield put(updateDiscountIDSuccess(response))\r\n  } catch (error) { yield put(discountApiErrorAction()) }\r\n}\r\n\r\n// Party Type Drodown API\r\nfunction* DiscountPartyTypeDropdown_GenFunc(config) {\r\n  debugger\r\n  // const config = { \"PartyID\": loginPartyID() }\r\n  try {\r\n    const response = yield call(DiscountPartyType_Dropdown_API, config);\r\n    yield put(DiscountPartyType_Dropdown_Success(response.Data))\r\n  } catch (error) { yield put(discountApiErrorAction()) }\r\n}\r\n\r\n//customer dependancy Drodown API\r\nfunction* DiscountCustomerDropdown_GenFunc({ config }) {\r\n\r\n  try {\r\n    const response = yield call(DiscountCustomer_Dropdown_API, config);\r\n    yield put(DiscountCustomer_Dropdown_Success(response.Data))\r\n  } catch (error) { yield put(discountApiErrorAction()) }\r\n}\r\n\r\nfunction* DiscountSaga() {\r\n  yield takeEvery(GO_BUTTON_DISCOUNT_ACTION, GoBtn_Discount_GenFunc);\r\n  yield takeEvery(GET_DISCOUNT_LIST, Get_Discount_List_GenFunc);\r\n  yield takeEvery(EDIT_DISCOUNT_ID, editDiscount_ID);\r\n  yield takeEvery(SAVE_DISCOUNT_SUBMIT, Save_Method_ForDiscount_GenFun);\r\n  yield takeEvery(DELETE_DISCOUNT_ID, deleteDiscount_ID);\r\n  yield takeEvery(UPDATE_DISCOUNT_ID, update_Discount);\r\n  yield takeEvery(DISCOUNT_PARTY_TYPE_DROPDOWN_ACTION, DiscountPartyTypeDropdown_GenFunc);\r\n  yield takeEvery(DISCOUNT_CUSTOMER_DROPDOWN_ACTION, DiscountCustomerDropdown_GenFunc);\r\n\r\n}\r\n\r\nexport default DiscountSaga;\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\DiscountRedux\\reducer.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\DiscountRedux\\actions.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Administrator\\DiscountRedux\\actionType.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Report\\GenericSaleRedux\\reducer.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Report\\GenericSaleRedux\\saga.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Report\\GenericSaleRedux\\action.js",["4251"],"import {\r\n    GENERIC_SALE_REPORT_API_ERROR_ACTION,\r\n    GO_BUTTON_FOR_GENERIC_SALE_ACTION,\r\n    GO_BUTTON_FOR_GENERIC_SALE_SUCCESS\r\n} from \"./actionType\";\r\n\r\nexport const GoButton_For_GenericSale_Action = (config) => ({\r\n    type: GO_BUTTON_FOR_GENERIC_SALE_ACTION,\r\n    config\r\n});\r\n\r\nexport const GoButton_For_GenericSale_Success = resp => ({\r\n    type: GO_BUTTON_FOR_GENERIC_SALE_SUCCESS,\r\n    payload: resp,\r\n})\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Report\\GenericSaleRedux\\actionType.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Report\\RetailerDataRedux\\saga.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Report\\RetailerDataRedux\\reducer.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\Reports\\RetailerDataReport\\RetailerDataReport.js",["4252","4253","4254","4255","4256","4257"],"import React, { useEffect, useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { Col, FormGroup, Label } from \"reactstrap\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { Go_Button } from \"../../components/Common/CommonButton\";\r\nimport * as _cfunc from \"../../components/Common/CommonFunction\";\r\nimport { mode, pageId } from \"../../routes/index\"\r\nimport { MetaTags } from \"react-meta-tags\";\r\nimport { SSDD_List_under_Company, commonPageField, commonPageFieldSuccess } from \"../../store/actions\";\r\nimport { customAlert } from \"../../CustomAlert/ConfirmDialog\";\r\nimport { postRetailerData_API, postRetailerData_API_Success } from \"../../store/Report/RetailerDataRedux/action\";\r\nimport { C_Select } from \"../../CustomValidateForm\";\r\nimport { ReportComponent } from \"../ReportComponent\";\r\n\r\nconst RetailerDataReport = (props) => {\r\n\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n\r\n    const [userPageAccessState, setUserAccState] = useState('');\r\n    const [partydropdown, setPartydropdown] = useState({ value: 0, label: \" All\" })\r\n\r\n    const reducers = useSelector(\r\n        (state) => ({\r\n            listBtnLoading: state.RetailerDataReducer.listBtnLoading,\r\n            partyLoading: state.CommonAPI_Reducer.SSDD_ListLoading,\r\n            RetailerGobtn: state.RetailerDataReducer.RetailerGobtn,\r\n            userAccess: state.Login.RoleAccessUpdateData,\r\n            SSDD_List: state.CommonAPI_Reducer.SSDD_List,\r\n            pageField: state.CommonPageFieldReducer.pageField\r\n        })\r\n    );\r\n    const { userAccess, SSDD_List, listBtnLoading, partyLoading, pageField } = reducers;\r\n    const { RetailerGobtn = [] } = reducers\r\n\r\n    // Featch Modules List data  First Rendering\r\n    const location = { ...history.location }\r\n    const hasShowModal = props.hasOwnProperty(mode.editValue)\r\n\r\n    // userAccess useEffect\r\n    useEffect(() => {\r\n        let userAcc = null;\r\n        let locationPath = location.pathname;\r\n        if (hasShowModal) {\r\n            locationPath = props.masterPath;\r\n        };\r\n        userAcc = userAccess.find((inx) => {\r\n            return (`/${inx.ActualPagePath}` === locationPath)\r\n        })\r\n        if (userAcc) {\r\n            setUserAccState(userAcc)\r\n            _cfunc.breadcrumbReturnFunc({ dispatch, userAcc });\r\n        };\r\n    }, [userAccess])\r\n\r\n    useEffect(() => {\r\n        dispatch(commonPageFieldSuccess(null));\r\n        dispatch(commonPageField(pageId.RETAILER_DATA_REPORT));\r\n        dispatch(SSDD_List_under_Company());\r\n        return () => {\r\n            dispatch(commonPageFieldSuccess(null));\r\n            dispatch(postRetailerData_API_Success([]));\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        try {\r\n            if ((RetailerGobtn.Status === true) && (RetailerGobtn.StatusCode === 200)) {\r\n                const { Data } = RetailerGobtn\r\n                ReportComponent({      // Download CSV\r\n                    pageField,\r\n                    excelData: Data.ReportExportSerializerDetails,\r\n                    excelFileName: \"Retailer Data Report\"\r\n                })\r\n                dispatch(postRetailerData_API_Success([]));\r\n            }\r\n            else if ((RetailerGobtn.Status === true) && (RetailerGobtn.StatusCode === 204)) {\r\n                dispatch(postRetailerData_API_Success([]));\r\n                customAlert({\r\n                    Type: 3,\r\n                    Message: JSON.stringify(RetailerGobtn.Message),\r\n                })\r\n            }\r\n        }\r\n        catch (e) { { _cfunc.CommonConsole(e) } }\r\n\r\n    }, [RetailerGobtn]);\r\n\r\n    const Party_Option = SSDD_List.map(i => ({\r\n        value: i.id,\r\n        label: i.Name\r\n    }));\r\n\r\n    Party_Option.unshift({\r\n        value: 0,\r\n        label: \"All\"\r\n    });\r\n\r\n    function goButtonHandler() {\r\n        dispatch(postRetailerData_API(JSON.stringify({ \"Party\": partydropdown.value })));\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <MetaTags>{_cfunc.metaTagLabel(userPageAccessState)}</MetaTags>\r\n            <div className=\"page-content\">\r\n                <div className=\"px-2   c_card_filter text-black\" >\r\n                    <div className=\"row\" >\r\n\r\n                        <Col sm={4} >\r\n                            <FormGroup className=\"mb- row mt-3 mb-2\" >\r\n                                <Label className=\"col-sm-4 p-2\"\r\n                                    style={{ width: \"65px\" }}>Party</Label>\r\n                                <Col sm=\"8\">\r\n                                    <C_Select\r\n                                        name=\"party\"\r\n                                        value={partydropdown}\r\n                                        isSearchable={true}\r\n                                        isLoading={partyLoading}\r\n                                        className=\"react-dropdown\"\r\n                                        classNamePrefix=\"dropdown\"\r\n                                        styles={{\r\n                                            menu: provided => ({ ...provided, zIndex: 2 })\r\n                                        }}\r\n                                        options={Party_Option}\r\n                                        onChange={(e) => { setPartydropdown(e) }}\r\n                                    />\r\n                                </Col>\r\n                            </FormGroup>\r\n                        </Col>\r\n\r\n                        <Col sm=\"1\" className=\"mt-3 mb-3 \">\r\n                            <Go_Button onClick={goButtonHandler} loading={listBtnLoading} />\r\n                        </Col>\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n        </React.Fragment >\r\n    )\r\n}\r\n\r\nexport default RetailerDataReport;","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Report\\RetailerDataRedux\\actionType.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Report\\RetailerDataRedux\\action.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\Discount\\DiscountList.js",["4258","4259","4260","4261","4262"],"import React, { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { BreadcrumbRadioButtonView, commonPageFieldList, commonPageFieldListSuccess } from \"../../../store/actions\";\r\nimport * as pageId from \"../../../routes/allPageID\"\r\nimport * as url from \"../../../routes/route_url\";\r\nimport * as _cfunc from \"../../../components/Common/CommonFunction\";\r\nimport CommonPurchaseList from \"../../../components/Common/CommonPurchaseList\";\r\nimport { Go_Button, PageLoadingSpinner } from \"../../../components/Common/CommonButton\";\r\nimport DiscountMaster from \"./DiscountMaster\";\r\nimport { Col, FormGroup, Label, Row } from \"reactstrap\";\r\nimport { C_DatePicker } from \"../../../CustomValidateForm\";\r\nimport { deleteDiscountIDSuccess, deleteDiscount_ID, getDiscountList, getDiscountListSuccess } from \"../../../store/Administrator/DiscountRedux/actions\";\r\nimport { customAlert } from \"../../../CustomAlert/ConfirmDialog\";\r\nimport PartyDropdown_Common from \"../../../components/Common/PartyDropdown\";\r\n\r\nconst DiscountList = () => {\r\n\r\n    const dispatch = useDispatch();\r\n    const currentDate_ymd = _cfunc.date_ymd_func();\r\n    const [headerFilters, setHeaderFilters] = useState('');\r\n\r\n    const reducers = useSelector(\r\n        (state) => ({\r\n            listBtnLoading: state.DiscountReducer.listBtnLoading,\r\n            tableList: state.DiscountReducer.discountList,\r\n            deleteMsg: state.DiscountReducer.deleteMsg,\r\n            userAccess: state.Login.RoleAccessUpdateData,\r\n            pageField: state.CommonPageFieldReducer.pageFieldList,\r\n            goBtnLoading: state.DiscountReducer.goBtnLoading,\r\n        })\r\n    );\r\n    const { pageField, goBtnLoading } = reducers\r\n    const { fromdate = currentDate_ymd, todate = currentDate_ymd } = headerFilters;\r\n\r\n    const action = {\r\n        deleteId: deleteDiscount_ID,\r\n        deleteSucc: deleteDiscountIDSuccess\r\n    }\r\n\r\n    useEffect(() => {\r\n        const page_Id = pageId.DISCOUNT_LIST;\r\n        dispatch(commonPageFieldListSuccess(null));\r\n        dispatch(BreadcrumbRadioButtonView(true));\r\n        dispatch(commonPageFieldList(page_Id));\r\n        if (!(_cfunc.loginSelectedPartyID() === 0)) {\r\n            goButtonHandler()\r\n        }\r\n        return () => {\r\n            dispatch(getDiscountListSuccess([]));\r\n            dispatch(commonPageFieldListSuccess(null));\r\n        }\r\n    }, []);\r\n\r\n    const goButtonHandler = () => {\r\n        try {\r\n            if (_cfunc.loginSelectedPartyID() === 0) {\r\n                customAlert({ Type: 3, Message: \"Please Select Party\" });\r\n                return;\r\n            };\r\n            const jsonBody = JSON.stringify({\r\n                \"FromDate\": fromdate,\r\n                \"ToDate\": todate,\r\n                \"Party\": _cfunc.loginSelectedPartyID()\r\n            });\r\n\r\n            dispatch(getDiscountList(jsonBody));\r\n        } catch (error) { }\r\n        return\r\n    };\r\n\r\n    function fromdateOnchange(e, date) {\r\n        let newObj = { ...headerFilters }\r\n        newObj.fromdate = date\r\n        setHeaderFilters(newObj)\r\n    }\r\n\r\n    function todateOnchange(e, date) {\r\n        let newObj = { ...headerFilters }\r\n        newObj.todate = date\r\n        setHeaderFilters(newObj)\r\n    }\r\n\r\n    function partyOnChngeButtonHandler() {\r\n        dispatch(getDiscountListSuccess([]));\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <PageLoadingSpinner isLoading={(goBtnLoading || !pageField)} />\r\n            <div className=\"page-content\">\r\n                <PartyDropdown_Common \r\n                    changeButtonHandler={partyOnChngeButtonHandler}\r\n                />\r\n                <div className=\"px-3 c_card_filter header text-black mb-1\" >\r\n\r\n                    <Row >\r\n                        <Col sm=\"6\" className=\"mt-1 mb-1\">\r\n                            <FormGroup className=\"row mt-2\" >\r\n                                <Label className=\"col-sm-1 p-2\"\r\n                                    style={{ width: \"115px\", marginRight: \"0.1cm\" }}>FromDate </Label>\r\n                                <Col sm=\"7\">\r\n                                    <C_DatePicker\r\n                                        options={{\r\n                                            altInput: true,\r\n                                            altFormat: \"d-m-Y\",\r\n                                            dateFormat: \"Y-m-d\",\r\n                                            maxDate: new Date(new Date().setMonth(new Date().getMonth() + 1)),// Set the maximum date\r\n                                        }}\r\n                                        name='Date'\r\n                                        value={fromdate}\r\n                                        onChange={fromdateOnchange}\r\n                                    />\r\n                                </Col>\r\n                            </FormGroup>\r\n                        </Col >\r\n\r\n                        <Col sm=\"6\" className=\"mt-1 mb-1\" >\r\n                            <FormGroup className=\" row mt-2 \" >\r\n                                <Label className=\"col-sm-1 p-2\"\r\n                                    style={{ width: \"115px\", marginRight: \"0.1cm\" }}>ToDate</Label>\r\n                                <Col sm=\"7\">\r\n                                    <C_DatePicker\r\n                                        options={{\r\n                                            altInput: true,\r\n                                            altFormat: \"d-m-Y\",\r\n                                            dateFormat: \"Y-m-d\",\r\n                                            maxDate: new Date(new Date().setMonth(new Date().getMonth() + 1)),// Set the maximum date\r\n                                        }}\r\n                                        name='Date'\r\n                                        value={todate}\r\n                                        onChange={todateOnchange}\r\n                                    />\r\n                                </Col>\r\n\r\n                                <Col md={1}></Col>\r\n                                <Col sm=\"1\" className=\"mx-6\" >\r\n                                    < Go_Button\r\n                                        loading={goBtnLoading}\r\n                                        onClick={(e) => goButtonHandler()}\r\n                                    />\r\n\r\n                                </Col>\r\n                            </FormGroup>\r\n                        </Col >\r\n                    </Row>\r\n                </div>\r\n\r\n                {\r\n                    (pageField) &&\r\n                    <div className=\"mt-n1\">\r\n                        <CommonPurchaseList\r\n                            action={action}\r\n                            reducers={reducers}\r\n                            showBreadcrumb={false}\r\n                            MasterModal={DiscountMaster}\r\n                            masterPath={url.DISCOUNT_MASTER}\r\n                            newBtnPath={url.DISCOUNT_MASTER}\r\n                            ButtonMsgLable={\"Discount\"}\r\n                            deleteName={\"CustomerName\"}\r\n                            goButnFunc={goButtonHandler}\r\n                        />\r\n                    </div>\r\n\r\n                }\r\n            </div>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default DiscountList;\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Purchase\\Return\\PurchaseReturnMode3.js",["4263","4264","4265","4266","4267","4268","4269","4270","4271","4272"],"import React, { useEffect, useState } from \"react\";\r\nimport {\r\n    Col,\r\n    FormGroup,\r\n    Label,\r\n    Input,\r\n    Row,\r\n\r\n} from \"reactstrap\";\r\nimport { MetaTags } from \"react-meta-tags\";\r\nimport { BreadcrumbShowCountlabel, commonPageFieldSuccess, post_Send_to_superStockiest_Id_Succcess, saveSalesReturnMaster, saveSalesReturnMaster_Success } from \"../../../store/actions\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { commonPageField } from \"../../../store/actions\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {\r\n    comAddPageFieldFunc,\r\n    initialFiledFunc,\r\n    onChangeSelect,\r\n    onChangeText,\r\n    resetFunction,\r\n\r\n} from \"../../../components/Common/validationFunction\";\r\nimport { mode, pageId, url } from \"../../../routes/index\"\r\nimport { GetVenderSupplierCustomer, GetVenderSupplierCustomerSuccess, } from \"../../../store/CommonAPI/SupplierRedux/actions\";\r\nimport \"../../Sale/SalesReturn/salesReturn.scss\";\r\nimport { CInput, C_DatePicker, C_Select, decimalRegx } from \"../../../CustomValidateForm/index\";\r\nimport * as _cfunc from \"../../../components/Common/CommonFunction\";\r\nimport { mySearchProps } from \"../../../components/Common/SearchBox/MySearch\";\r\nimport BootstrapTable from \"react-bootstrap-table-next\";\r\nimport ToolkitProvider from \"react-bootstrap-table2-toolkit\";\r\nimport { SaveButton } from \"../../../components/Common/CommonButton\";\r\nimport { return_discountCalculate_Func } from \"../../Sale/SalesReturn/SalesCalculation\";\r\nimport { customAlert } from \"../../../CustomAlert/ConfirmDialog\";\r\n\r\nconst PurchaseReturnMode3 = (props) => {\r\n\r\n    const dispatch = useDispatch();\r\n    const history = useHistory()\r\n    const currentDate_ymd = _cfunc.date_ymd_func();\r\n    const [userPageAccessState, setUserAccState] = useState('');\r\n\r\n    const fileds = {\r\n        ReturnDate: currentDate_ymd,\r\n        Customer: \"\",\r\n        Comment: \"\"\r\n    }\r\n\r\n    const [state, setState] = useState(initialFiledFunc(fileds))\r\n    const [subPageMode] = useState(history.location.pathname)\r\n    const [tableData, setTableData] = useState([]);\r\n    const [returnItemIDs, setReturnItemIDs] = useState(\"\");\r\n\r\n    //Access redux store Data /  'save_ModuleSuccess' action data\r\n    const {\r\n        sendToSSbtnTableData,\r\n        saveBtnloading,\r\n        postMsg,\r\n        supplier,\r\n        pageField,\r\n        userAccess,\r\n        commonPartyDropSelect\r\n    } = useSelector((state) => ({\r\n        saveBtnloading: state.SalesReturnReducer.saveBtnloading,\r\n        sendToSSbtnTableData: state.SalesReturnReducer.sendToSSbtnTableData,\r\n        supplier: state.CommonAPI_Reducer.vendorSupplierCustomer,\r\n        postMsg: state.SalesReturnReducer.postMsg,\r\n        userAccess: state.Login.RoleAccessUpdateData,\r\n        pageField: state.CommonPageFieldReducer.pageField,\r\n        commonPartyDropSelect: state.CommonPartyDropdownReducer.commonPartyDropSelect\r\n    }));\r\n\r\n    useEffect(() => {\r\n        if (sendToSSbtnTableData.Status === true) {\r\n\r\n            const { Data = [] } = sendToSSbtnTableData;\r\n\r\n            let grand_total = 0;\r\n            const UpdatedTableData = Data.map((item, index) => {\r\n                const calculate = return_discountCalculate_Func(item);\r\n\r\n                item[\"roundedTotalAmount\"] = calculate.roundedTotalAmount\r\n                grand_total += Number(calculate.roundedTotalAmount);\r\n\r\n                return {\r\n                    ...item, id: index + 1,\r\n                    salesQuantity: item.Quantity,\r\n                    Quantity: item.ApprovedQuantity,\r\n                    tableBatchDate: _cfunc.date_dmy_func(item.BatchDate)\r\n                };\r\n            });\r\n\r\n            setTableData(UpdatedTableData);\r\n            let count_label = `${\"Total Amount\"} :${_cfunc.amountCommaSeparateFunc(grand_total)}`\r\n            dispatch(BreadcrumbShowCountlabel(count_label))\r\n            dispatch(post_Send_to_superStockiest_Id_Succcess({ Status: false }))\r\n            setReturnItemIDs(sendToSSbtnTableData.ReturnItemID)\r\n        }\r\n\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        dispatch(commonPageFieldSuccess(null));\r\n        dispatch(commonPageField(pageId.PURCHASE_RETURN_MODE_3))\r\n    }, []);\r\n\r\n    // Common Party Dropdown useEffect\r\n    useEffect(() => {\r\n\r\n        if (commonPartyDropSelect.value > 0) {\r\n            dispatch(GetVenderSupplierCustomer({ subPageMode: url.PURCHASE_RETURN, RouteID: \"\", \"PartyID\": commonPartyDropSelect.value }))\r\n        }\r\n        return () => {\r\n            dispatch(GetVenderSupplierCustomerSuccess([]));\r\n        }\r\n    }, [commonPartyDropSelect]);\r\n\r\n    const location = { ...history.location }\r\n    const hasShowModal = props.hasOwnProperty(mode.editValue)\r\n\r\n    const values = { ...state.values }\r\n    const { isError } = state;\r\n    const { fieldLabel } = state;\r\n\r\n    useEffect(() => {// userAccess useEffect\r\n        let userAcc = null;\r\n        let locationPath = location.pathname;\r\n        if (hasShowModal) {\r\n            locationPath = props.masterPath;\r\n        };\r\n        userAcc = userAccess.find((inx) => {\r\n            return (`/${inx.ActualPagePath}` === locationPath)\r\n        })\r\n        if (userAcc) {\r\n            setUserAccState(userAcc)\r\n            _cfunc.breadcrumbReturnFunc({ dispatch, userAcc });\r\n        };\r\n    }, [userAccess])\r\n\r\n    useEffect(() => {\r\n        if (pageField) {\r\n            const fieldArr = pageField.PageFieldMaster\r\n            comAddPageFieldFunc({ state, setState, fieldArr })\r\n        }\r\n    }, [pageField])\r\n\r\n    useEffect(async () => {\r\n        if ((postMsg.Status === true) && (postMsg.StatusCode === 200)) {\r\n            dispatch(saveSalesReturnMaster_Success({ Status: false }))\r\n\r\n            setState(() => resetFunction(fileds, state))// Clear form values  \r\n            await customAlert({\r\n                Type: 1,\r\n                Message: postMsg.Message,\r\n            })\r\n            history.push({ pathname: url.PURCHASE_RETURN_LIST })\r\n        }\r\n        else if (postMsg.Status === true) {\r\n            dispatch(saveSalesReturnMaster_Success({ Status: false }))\r\n            customAlert({\r\n                Type: 4,\r\n                Message: JSON.stringify(postMsg.Message),\r\n            })\r\n        }\r\n    }, [postMsg])\r\n\r\n    const supplierOptions = supplier.map((i) => ({\r\n        value: i.id,\r\n        label: i.Name,\r\n    }));\r\n\r\n    function QuantityHandler(event, row, tableData) {\r\n\r\n        let input = event.target.value\r\n\r\n        let v1 = Number(row.salesQuantity);\r\n        let v2 = Number(input)\r\n        if (!(v1 >= v2)) {\r\n            event.target.value = v1;\r\n        }\r\n        row.Quantity = input;\r\n        totalAmountCalcuationFunc(row, tableData)\r\n    }\r\n\r\n    const pagesListColumns = [\r\n        {\r\n            text: \"Item Name\",\r\n            dataField: \"ItemName\",\r\n            headerStyle: () => {\r\n                return { width: '150px', textAlign: 'center' };\r\n            }\r\n        },\r\n\r\n        {\r\n            text: \"Quantity\",\r\n            dataField: \"\",\r\n            classes: () => \"sales-discount-row\",\r\n            hidden: false,\r\n            formatExtraData: { tableData },\r\n            formatter: (cell, row, key, { tableData }) => {\r\n                return (\r\n                    <div className=\"parent\" >\r\n                        <div className=\"child\" style={{ minWidth: \"100px\" }}>\r\n                            <CInput\r\n                                defaultValue={row.Quantity}\r\n                                autoComplete=\"off\"\r\n                                disabled={true}\r\n                                type=\"text\"\r\n                                cpattern={decimalRegx}\r\n                                className=\"col col-sm text-end\"\r\n                                onChange={(event) => {\r\n                                    QuantityHandler(event, row, tableData)\r\n                                }}\r\n                            />\r\n                        </div>\r\n\r\n                    </div>\r\n                )\r\n            },\r\n            headerStyle: () => {\r\n                return { width: '120px', textAlign: 'center' };\r\n            }\r\n        },\r\n\r\n        {\r\n            text: \"Unit\",\r\n            dataField: \"UnitName\",\r\n            headerStyle: () => {\r\n                return { width: '80px', textAlign: 'center' };\r\n            }\r\n        },\r\n\r\n        {\r\n            text: \"MRP\",\r\n            dataField: \"MRPValue\",\r\n            formatter: (value, row, k) => {\r\n                return (\r\n                    <span >\r\n                        <Input type=\"text\"\r\n                            id={`MRPValue${k}`}\r\n                            key={`MRPValue${row.id}`}\r\n                            disabled={true}\r\n                            className=\"text-end\"\r\n                            defaultValue={row.MRPValue}\r\n                            autoComplete=\"off\"\r\n                            onChange={(e) => { row[\"MRPValue\"] = e.target.value }}\r\n                        />\r\n                    </span>\r\n                )\r\n            },\r\n\r\n            headerStyle: () => {\r\n                return { width: '140px', textAlign: 'center' };\r\n            }\r\n        },\r\n\r\n        {\r\n            text: \"Basic Rate\",\r\n            dataField: \"\",\r\n            formatExtraData: { tableData },\r\n            formatter: (cellContent, row, key, { tableData }) => {\r\n\r\n                return (\r\n                    <span >\r\n                        <CInput\r\n                            defaultValue={row.Rate}\r\n                            id={`Rate-${key}-${row.id}`}//this id use discount type onchange\r\n                            // placeholder=\"Enter Rate\"\r\n                            type=\"text\"\r\n                            disabled={true}\r\n                            cpattern={decimalRegx}\r\n                            className=\"text-end\"\r\n                            onChange={(event) => {\r\n                                row.Rate = event.target.value\r\n                                totalAmountCalcuationFunc(row, tableData)\r\n                            }}\r\n                        />\r\n                    </span>\r\n                )\r\n            },\r\n\r\n            headerStyle: () => {\r\n                return { width: '140px', textAlign: 'center' };\r\n            }\r\n        },\r\n\r\n        {\r\n            text: \"BatchDate\",\r\n            dataField: \"tableBatchDate\",\r\n        },\r\n        {\r\n            text: \"BatchCode\",\r\n            dataField: \"BatchCode\",\r\n        },\r\n\r\n        {\r\n            text: \"Reason\",\r\n            dataField: \"ItemReasonName\",\r\n        },\r\n\r\n        {\r\n            text: \"Comment\",\r\n            dataField: \"ItemComment\",\r\n        },\r\n    ];\r\n\r\n    const totalAmountCalcuationFunc = (row, TablelistArray = []) => {\r\n\r\n        const caculate = return_discountCalculate_Func(row)\r\n        row.roundedTotalAmount = caculate.roundedTotalAmount;\r\n\r\n        let sumOfGrandTotal = TablelistArray.reduce((accumulator, currentObject) => accumulator + Number(currentObject[\"roundedTotalAmount\"]) || 0, 0);\r\n        let count_label = `${\"Total Amount\"} :${_cfunc.amountCommaSeparateFunc(sumOfGrandTotal)}`\r\n        dispatch(BreadcrumbShowCountlabel(count_label))\r\n    }\r\n\r\n    const ReturnDate_Onchange = (e, date) => {\r\n        setState((i) => {\r\n            const a = { ...i }\r\n            a.values.ReturnDate = date;\r\n            a.hasValid.ReturnDate.valid = true\r\n            return a\r\n        })\r\n    }\r\n\r\n    const SaveHandler = async (event) => {\r\n\r\n        event.preventDefault();\r\n        const btnId = event.target.id;\r\n        let grand_total = 0;\r\n\r\n        if (values.Customer === \"\") {\r\n            customAlert({\r\n                Type: 4,\r\n                Message: \"Please Select Supplier\",\r\n            });\r\n            return;\r\n        }\r\n        const PurchaseReturnReferences = returnItemIDs\r\n            .split(\",\")\r\n            .map(item => ({ SubReturn: parseInt(item.trim()) }));\r\n        const formData = new FormData(); // Create a new FormData object\r\n\r\n        const ReturnItems = tableData.reduce((filterdItem, i) => {\r\n\r\n            if (Number(i.Quantity) > 0) {\r\n                const calculate = return_discountCalculate_Func(i);\r\n\r\n                grand_total += Number(calculate.roundedTotalAmount);\r\n\r\n                filterdItem.push({\r\n                    \"Item\": i.Item,\r\n                    \"Quantity\": i.Quantity,\r\n                    \"Unit\": i.Unit,\r\n                    \"BaseUnitQuantity\": i.BaseUnitQuantity,\r\n                    \"BatchCode\": i.BatchCode,\r\n                    \"BatchDate\": i.BatchDate,\r\n                    \"BatchID\": 1,\r\n                    \"MRP\": i.MRP,\r\n                    \"MRPValue\": i.MRPValue,\r\n                    \"Rate\": i.Rate,\r\n                    \"GST\": i.GST,\r\n                    \"ItemReason\": i.ItemReason,\r\n                    \"Comment\": i.ItemComment,\r\n                    \"CGST\": Number(calculate.CGST_Amount).toFixed(2),\r\n                    \"SGST\": Number(calculate.SGST_Amount).toFixed(2),\r\n                    \"IGST\": Number(calculate.IGST_Amount).toFixed(2),\r\n                    \"GSTPercentage\": calculate.GST_Percentage,\r\n                    \"CGSTPercentage\": calculate.CGST_Percentage,\r\n                    \"SGSTPercentage\": calculate.SGST_Percentage,\r\n                    \"IGSTPercentage\": calculate.IGST_Percentage,\r\n                    \"BasicAmount\": Number(calculate.discountBaseAmt).toFixed(2),\r\n                    \"GSTAmount\": Number(calculate.roundedGstAmount).toFixed(2),\r\n                    \"Amount\": Number(calculate.roundedTotalAmount).toFixed(2),\r\n                    \"TaxType\": 'GST',\r\n                    \"DiscountType\": calculate.discountType,\r\n                    \"Discount\": calculate.discount,\r\n                    \"DiscountAmount\": Number(calculate.disCountAmt).toFixed(2),\r\n                    \"PurchaseReturn\": i.PurchaseReturn,\r\n                    \"SubReturn\": i.PurchaseReturn,\r\n                    \"primarySourceID\": i.primarySourceID,\r\n                    \"ReturnItemImages\": [],\r\n                });\r\n            }\r\n            return filterdItem\r\n        }, [])\r\n\r\n        try {\r\n\r\n            formData.append('ReturnDate', values.ReturnDate);\r\n            formData.append('ReturnReason', '');\r\n            formData.append('BatchCode', values.BatchCode);\r\n            formData.append('Customer', commonPartyDropSelect.value);\r\n            formData.append('Party', values.Customer.value);\r\n            formData.append('Comment', values.Comment);\r\n            formData.append('GrandTotal', grand_total.toFixed(2));\r\n            formData.append('RoundOffAmount', (grand_total - Math.trunc(grand_total)).toFixed(2))\r\n            formData.append('CreatedBy', _cfunc.loginUserID());\r\n            formData.append('UpdatedBy', _cfunc.loginUserID());\r\n            formData.append('Mode', 3);\r\n            formData.append('IsApproved', 0);\r\n            formData.append('PurchaseReturnReferences', JSON.stringify(PurchaseReturnReferences)); // Convert to JSON string\r\n            formData.append('ReturnItems', JSON.stringify(ReturnItems)); // Convert to JSON strin\r\n\r\n            dispatch(saveSalesReturnMaster({ formData, btnId }));\r\n\r\n        } catch (e) { _cfunc.CommonConsole(e) }\r\n    };\r\n\r\n    if (!(userPageAccessState === '')) {\r\n        return (\r\n            <React.Fragment>\r\n                <MetaTags>{_cfunc.metaTagLabel(userPageAccessState)}</MetaTags>\r\n\r\n                <div className=\"page-content\" >\r\n\r\n                    <form noValidate>\r\n                        <div className=\"px-2 c_card_filter header text-black mb-1\" >\r\n\r\n                            <Row>\r\n                                <Col sm=\"6\">\r\n                                    <FormGroup className=\"row mt-2\" >\r\n                                        <Label className=\"col-sm-1 p-2\"\r\n                                            style={{ width: \"115px\", marginRight: \"0.4cm\" }}>{fieldLabel.ReturnDate}  </Label>\r\n                                        <Col sm=\"7\">\r\n                                            <C_DatePicker\r\n                                                name='ReturnDate'\r\n                                                value={values.ReturnDate}\r\n                                                onChange={ReturnDate_Onchange}\r\n                                            />\r\n                                        </Col>\r\n                                    </FormGroup>\r\n                                </Col >\r\n                            </Row>\r\n\r\n                            <Row>\r\n                                <Col sm=\"6\">\r\n                                    <FormGroup className=\" row mt-2 \" >\r\n                                        <Label className=\"col-sm-1 p-2\"\r\n                                            style={{ width: \"115px\", marginRight: \"0.4cm\" }}>{fieldLabel.Customer} </Label>\r\n                                        <Col sm=\"7\">\r\n                                            <C_Select\r\n                                                id=\"Customer \"\r\n                                                name=\"Customer\"\r\n                                                value={values.Customer}\r\n                                                isSearchable={true}\r\n                                                options={supplierOptions}\r\n                                                styles={{\r\n                                                    menu: provided => ({ ...provided, zIndex: 2 })\r\n                                                }}\r\n                                                onChange={(hasSelect, evn) => {\r\n                                                    onChangeSelect({ hasSelect, evn, state, setState });\r\n                                                }\r\n                                                }\r\n\r\n                                            />\r\n                                            {isError.Customer.length > 0 && (\r\n                                                <span className=\"text-danger f-8\"><small>{isError.Customer}</small></span>\r\n                                            )}\r\n                                        </Col>\r\n\r\n                                    </FormGroup>\r\n                                </Col >\r\n\r\n                                <Col sm=\"6\">\r\n                                    <FormGroup className=\" row mt-1 \" >\r\n                                        <Label className=\"col-sm-1 p-2\"\r\n                                            style={{ width: \"115px\", marginRight: \"0.4cm\" }}>{fieldLabel.Comment} </Label>\r\n                                        <Col sm=\"7\">\r\n                                            <Input\r\n                                                name=\"Comment\"\r\n                                                id=\"Comment\"\r\n                                                value={values.Comment}\r\n                                                type=\"text\"\r\n                                                className={isError.Comment.length > 0 ? \"is-invalid form-control\" : \"form-control\"}\r\n                                                placeholder=\"Enter Comment\"\r\n                                                autoComplete='off'\r\n                                                onChange={(event) => {\r\n                                                    onChangeText({ event, state, setState })\r\n                                                }}\r\n                                            />\r\n                                            {isError.Comment.length > 0 && (\r\n                                                <span className=\"invalid-feedback\">{isError.Comment}</span>\r\n                                            )}\r\n                                        </Col>\r\n\r\n                                    </FormGroup>\r\n                                </Col >\r\n                            </Row>\r\n\r\n                        </div>\r\n\r\n                        <div>\r\n                            <ToolkitProvider\r\n                                keyField={\"id\"}\r\n                                data={tableData}\r\n                                columns={pagesListColumns}\r\n                                search\r\n                            >\r\n                                {(toolkitProps) => (\r\n                                    <React.Fragment>\r\n                                        <Row>\r\n                                            <Col xl=\"12\">\r\n                                                <div className=\"table-responsive table\" style={{ minHeight: \"45vh\" }}>\r\n                                                    <BootstrapTable\r\n                                                        keyField={\"id\"}\r\n                                                        id=\"table_Arrow\"\r\n                                                        classes={\"table  table-bordered \"}\r\n                                                        noDataIndication={\r\n                                                            <div className=\"text-danger text-center \">\r\n                                                                Record Not available\r\n                                                            </div>\r\n                                                        }\r\n                                                        onDataSizeChange={(e) => {\r\n                                                            _cfunc.tableInputArrowUpDounFunc(\"#table_Arrow\")\r\n                                                        }}\r\n                                                        {...toolkitProps.baseProps}\r\n                                                    />\r\n                                                </div>\r\n                                            </Col>\r\n                                            {mySearchProps(toolkitProps.searchProps,)}\r\n                                        </Row>\r\n\r\n                                    </React.Fragment>\r\n                                )}\r\n                            </ToolkitProvider>\r\n                        </div>\r\n\r\n                    </form >\r\n\r\n                    {\r\n                        tableData.length > 0 ?\r\n                            <div >\r\n                                <FormGroup>\r\n                                    <Col sm={2} style={{ marginLeft: \"-40px\" }} className={\"row save1\"} >\r\n                                        <SaveButton\r\n                                            pageMode={mode.modeSTPsave}\r\n                                            loading={saveBtnloading}\r\n                                            onClick={SaveHandler}\r\n                                            userAcc={userPageAccessState}\r\n                                            module={\"SalesReturn\"}\r\n                                        />\r\n\r\n                                    </Col>\r\n                                </FormGroup >\r\n                            </div>\r\n                            : null\r\n                    }\r\n\r\n                </div >\r\n            </React.Fragment >\r\n        );\r\n    }\r\n    else {\r\n        return (\r\n            <React.Fragment></React.Fragment>\r\n        )\r\n    }\r\n};\r\n\r\nexport default PurchaseReturnMode3\r\n\r\n\r\n\r\n\r\n\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Purchase\\Return\\PurchaseReturn.js",["4273","4274","4275","4276","4277","4278","4279","4280","4281","4282","4283","4284","4285","4286","4287","4288","4289","4290","4291"],"import React, { useEffect, useState } from \"react\";\r\nimport {\r\n    Col,\r\n    FormGroup,\r\n    Label,\r\n    Input,\r\n    Row,\r\n    Button,\r\n    Table,\r\n    Modal,\r\n} from \"reactstrap\";\r\nimport { MetaTags } from \"react-meta-tags\";\r\nimport { BreadcrumbShowCountlabel, Breadcrumb_inputName, commonPageFieldSuccess } from \"../../../store/actions\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { commonPageField } from \"../../../store/actions\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {\r\n    comAddPageFieldFunc,\r\n    initialFiledFunc,\r\n    onChangeSelect,\r\n    onChangeText,\r\n    resetFunction,\r\n} from \"../../../components/Common/validationFunction\";\r\nimport Select from \"react-select\";\r\nimport { Change_Button, C_Button, SaveButton, } from \"../../../components/Common/CommonButton\";\r\nimport { url, mode, pageId } from \"../../../routes/index\"\r\nimport { GetVenderSupplierCustomer, GetVenderSupplierCustomerSuccess } from \"../../../store/CommonAPI/SupplierRedux/actions\";\r\nimport { customAlert } from \"../../../CustomAlert/ConfirmDialog\";\r\nimport { postSelect_Field_for_dropdown } from \"../../../store/Administrator/PartyMasterBulkUpdateRedux/actions\";\r\nimport { saveSalesReturnMaster, InvoiceNumber, InvoiceNumberSuccess, saveSalesReturnMaster_Success, SalesReturnAddBtn_Action, SalesReturnAddBtn_Action_Succcess } from \"../../../store/Sales/SalesReturnRedux/action\";\r\nimport \"./purchaseReturn.scss\";\r\nimport { CInput, C_DatePicker, C_Select } from \"../../../CustomValidateForm/index\";\r\nimport { decimalRegx, } from \"../../../CustomValidateForm/RegexPattern\";\r\nimport { goButtonPartyItemAddPage, goButtonPartyItemAddPageSuccess } from \"../../../store/Administrator/PartyItemsRedux/action\";\r\nimport { innerStockCaculation, returnQtyOnChange, return_discountCalculate_Func, stockQtyOnChange } from \"./PurchaseReturnCalculation\";\r\nimport * as _cfunc from \"../../../components/Common/CommonFunction\";\r\nimport { mySearchProps } from \"../../../components/Common/SearchBox/MySearch\";\r\nimport BootstrapTable from \"react-bootstrap-table-next\";\r\nimport ToolkitProvider from \"react-bootstrap-table2-toolkit\";\r\nimport { Tbody, Thead } from \"react-super-responsive-table\";\r\nimport Slidewithcaption from \"../../../components/Common/CommonImageComponent\";\r\nimport NewCommonPartyDropdown from \"../../../components/Common/NewCommonPartyDropdown\";\r\n\r\nconst PurchaseReturn = (props) => {\r\n\r\n    const dispatch = useDispatch();\r\n    const history = useHistory()\r\n    const currentDate_ymd = _cfunc.date_ymd_func();\r\n    const { SaleableItemReasonID = '' } = _cfunc.loginSystemSetting();\r\n\r\n    const [pageMode] = useState(mode.defaultsave);\r\n    const [userPageAccessState, setUserAccState] = useState('');\r\n\r\n    const fileds = {\r\n        ReturnDate: currentDate_ymd,\r\n        Customer: \"\",\r\n        ItemName: \"\",\r\n        InvoiceNumber: \"\",\r\n        BatchCode: \"\",\r\n        Comment: \"\"\r\n    }\r\n\r\n    const [state, setState] = useState(initialFiledFunc(fileds))\r\n    const [TableArr, setTableArr] = useState([]);\r\n    const [returnMode, setReturnMode] = useState(0); //(1==ItemWise) OR (2==invoiceWise)\r\n    const [imageTable, setImageTable] = useState([]);\r\n\r\n    // for invoicer page heder dicount functionality useSate ************************************\r\n    const [discountValueAll, setDiscountValueAll] = useState(\"\");\r\n    const [discountTypeAll, setDiscountTypeAll] = useState({ value: 2, label: \" % \" });\r\n    const [discountDropOption] = useState([{ value: 1, label: \"Rs\" }, { value: 2, label: \"%\" }])\r\n    const [changeAllDiscount, setChangeAllDiscount] = useState(false)\r\n    const [forceReload, setForceReload] = useState(false)\r\n    const [modal_backdrop, setmodal_backdrop] = useState(false);   // Image Model open Or not\r\n\r\n\r\n    // ****************************************************************************\r\n\r\n    // for IsSaleableStock Checkbox functionality useSate ************************************\r\n    const [isSaleableStock, setIsSaleableStock] = useState(false);\r\n    const [ReturnReasonFilterData, setReturnReasonOptions] = useState([]);\r\n    const [filteredReasonArr, setFilteredReasonArr] = useState([]);\r\n    const [reasonArrExceptPartyID, setReasonArrExceptPartyID] = useState([]);\r\n\r\n    //Access redux store Data /  'save_ModuleSuccess' action data\r\n    const {\r\n        postMsg,\r\n        ItemList,\r\n        ReturnReasonListRedux,\r\n        InvoiceNo,\r\n        pageField,\r\n        userAccess,\r\n        supplierDrodownLoading,\r\n        supplier,\r\n        addButtonData,\r\n        saveBtnloading,\r\n        addBtnLoading,\r\n        invoiceNoDropDownLoading,\r\n        commonPartyDropSelect\r\n    } = useSelector((state) => ({\r\n        addButtonData: state.SalesReturnReducer.addButtonData,\r\n        postMsg: state.SalesReturnReducer.postMsg,\r\n        supplierDrodownLoading: state.CommonAPI_Reducer.vendorSupplierCustomerLoading,\r\n        supplier: state.CommonAPI_Reducer.vendorSupplierCustomer,\r\n        ItemList: state.PartyItemsReducer.partyItem,\r\n        ReturnReasonListRedux: state.PartyMasterBulkUpdateReducer.SelectField,\r\n        InvoiceNo: state.SalesReturnReducer.InvoiceNo,\r\n        userAccess: state.Login.RoleAccessUpdateData,\r\n        pageField: state.CommonPageFieldReducer.pageField,\r\n        saveBtnloading: state.SalesReturnReducer.saveBtnloading,\r\n        addBtnLoading: state.SalesReturnReducer.addBtnLoading,\r\n        invoiceNoDropDownLoading: state.SalesReturnReducer.invoiceNoDropDownLoading,\r\n        commonPartyDropSelect: state.CommonPartyDropdownReducer.commonPartyDropSelect\r\n    }));\r\n\r\n    useEffect(() => {\r\n        dispatch(InvoiceNumberSuccess([]))\r\n        dispatch(commonPageFieldSuccess(null));\r\n        dispatch(commonPageField(pageId.PURCHASE_RETURN))\r\n        dispatch(BreadcrumbShowCountlabel(`${\"Total Amount\"} :${0}`))\r\n    }, []);\r\n\r\n    // Common Party Dropdown useEffect\r\n    useEffect(() => {\r\n\r\n        if (commonPartyDropSelect.value > 0) {\r\n            dispatch(goButtonPartyItemAddPage({ jsonBody: JSON.stringify({ ..._cfunc.loginJsonBody(), \"PartyID\": commonPartyDropSelect.value }) }))\r\n            dispatch(GetVenderSupplierCustomer({ subPageMode: url.PURCHASE_RETURN, RouteID: \"\", \"PartyID\": commonPartyDropSelect.value }))\r\n        }\r\n        setState((i) => {\r\n            let a = { ...i }\r\n            a.values.ItemName = ''\r\n            a.values.Customer = \"\"\r\n\r\n            a.hasValid.ItemName.valid = true;\r\n            a.hasValid.Customer.valid = true;\r\n            return a\r\n        });\r\n        return () => {\r\n            dispatch(GetVenderSupplierCustomerSuccess([]));\r\n            dispatch(goButtonPartyItemAddPageSuccess([]));\r\n            dispatch(InvoiceNumberSuccess([]));\r\n            setTableArr([]);\r\n        }\r\n\r\n    }, [commonPartyDropSelect]);\r\n\r\n    useEffect(() => {\r\n        if (TableArr.length === 0) {\r\n            setReturnMode(0)\r\n        }\r\n    }, [TableArr]);\r\n\r\n    const location = { ...history.location }\r\n    const hasShowModal = props.hasOwnProperty(mode.editValue)\r\n\r\n    const values = { ...state.values }\r\n    const { isError } = state;\r\n    const { fieldLabel } = state;\r\n\r\n\r\n    useEffect(() => {// userAccess useEffect\r\n        let userAcc = null;\r\n        let locationPath = location.pathname;\r\n        if (hasShowModal) {\r\n            locationPath = props.masterPath;\r\n        };\r\n        userAcc = userAccess.find((inx) => {\r\n            return (`/${inx.ActualPagePath}` === locationPath)\r\n        })\r\n        if (userAcc) {\r\n            setUserAccState(userAcc)\r\n            _cfunc.breadcrumbReturnFunc({ dispatch, userAcc });\r\n        };\r\n    }, [userAccess])\r\n\r\n    useEffect(() => {// Return Reason dropdown Values\r\n        const jsonBody = JSON.stringify({\r\n            Company: _cfunc.loginCompanyID(),\r\n            TypeID: 8\r\n        });\r\n        dispatch(postSelect_Field_for_dropdown(jsonBody));\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (pageField) {\r\n            const fieldArr = pageField.PageFieldMaster\r\n            comAddPageFieldFunc({ state, setState, fieldArr })\r\n        }\r\n    }, [pageField])\r\n    useEffect(() => {\r\n        if (imageTable.length > 0) {\r\n            setmodal_backdrop(true)\r\n        }\r\n    }, [imageTable])\r\n\r\n    useEffect(() => {\r\n        if ((postMsg.Status === true) && (postMsg.StatusCode === 200)) {\r\n            dispatch(saveSalesReturnMaster_Success({ Status: false }))\r\n            setTableArr([])\r\n            setState(() => resetFunction(fileds, state))// Clear form values  \r\n            dispatch(Breadcrumb_inputName(''))\r\n\r\n            if (pageMode === mode.dropdownAdd) {\r\n                customAlert({\r\n                    Type: 1,\r\n                    Message: postMsg.Message,\r\n                })\r\n            }\r\n            else {\r\n                let alterRepont = customAlert({\r\n                    Type: 1,\r\n                    Message: postMsg.Message,\r\n                })\r\n                if (alterRepont) {\r\n                    history.push({ pathname: url.PURCHASE_RETURN_LIST })\r\n                }\r\n            }\r\n        }\r\n        else if (postMsg.Status === true) {\r\n            dispatch(saveSalesReturnMaster_Success({ Status: false }))\r\n            customAlert({\r\n                Type: 4,\r\n                Message: JSON.stringify(postMsg.Message),\r\n            })\r\n        }\r\n    }, [postMsg])\r\n\r\n    useEffect(() => {\r\n\r\n        if (addButtonData.StatusCode === 200 && addButtonData.Status === true) {\r\n            dispatch(SalesReturnAddBtn_Action_Succcess({ StatusCode: false }))\r\n            try {\r\n                const updateItemArr = [...TableArr];\r\n                let existingIds = updateItemArr.map(item => item.id);\r\n                let nextId = existingIds.length > 0 ? Math.max(...existingIds) + 1 : 1;\r\n\r\n                addButtonData.Data.forEach((i) => {\r\n                    const MRPOptions = i.ItemMRPDetails.map(i => ({ label: i.MRPValue, value: i.MRP, Rate: i.Rate }));\r\n                    const GSTOptions = i.ItemGSTDetails.map(i => ({ label: i.GSTPercentage, value: i.GST }));\r\n\r\n                    const highestMRP = i.ItemMRPDetails.reduce((prev, current) => {// Default highest GST when Return mode \"2==ItemWise\"\r\n                        return (prev.MRP > current.MRP) ? prev : current;\r\n                    }, '');\r\n\r\n                    const highestGST = i.ItemGSTDetails.reduce((prev, current) => {// Default  highest GST when Return mode \"2==ItemWise\"\r\n                        return (prev.GST > current.GST) ? prev : current;\r\n                    }, '');\r\n\r\n                    if (returnMode === 2) { //(returnMode === 2) ItemWise\r\n                        i.Rate = highestMRP.Rate || \"\";\r\n                        i.MRP = highestMRP.MRP || \"\";\r\n                        i.MRPValue = highestMRP.MRPValue || \"\";\r\n\r\n                        i.GST = highestGST.GST || \"\";\r\n                        i.GSTPercentage = highestGST.GSTPercentage || \"\";\r\n                    }\r\n\r\n                    let ItemTotalStock = i.StockDetails.reduce((accumulator, currentObject) => accumulator + Number(currentObject[\"BaseUnitQuantity\"]) || 0, 0);\r\n                    const InvoiceQuantity = i.Quantity\r\n\r\n                    const newItemRow = {\r\n                        ...i,\r\n                        Quantity: '',\r\n                        itemTotalAmount: 0,\r\n                        InvoiceQuantity,\r\n                        ItemTotalStock,\r\n                        id: nextId,\r\n                        MRPOptions,\r\n                        GSTOptions,\r\n                    }\r\n                    // const caculate = return_discountCalculate_Func(newItemRow)\r\n                    // newItemRow[\"roundedTotalAmount\"] = caculate.roundedTotalAmount;\r\n\r\n                    updateItemArr.push(newItemRow);\r\n                    nextId++;\r\n                });\r\n\r\n                // let sumOfGrandTotal = updateItemArr.reduce((accumulator, currentObject) => accumulator + Number(currentObject[\"itemTotalAmount\"]) || 0, 0);\r\n                // let count_label = `${\"Total Amount\"} :${Number(sumOfGrandTotal).toLocaleString()}`\r\n                // dispatch(BreadcrumbShowCountlabel(count_label));\r\n                updateItemArr.sort((a, b) => b.id - a.id);\r\n                setTableArr(updateItemArr);\r\n                setState((i) => {\r\n                    let a = { ...i }\r\n                    a.values.ItemName = \"\"\r\n                    a.hasValid.ItemName.valid = true;\r\n                    return a\r\n                })\r\n\r\n            } catch (error) { _cfunc.CommonConsole(error) }\r\n        }\r\n    }, [addButtonData])\r\n\r\n    useEffect(async () => {\r\n\r\n        try {\r\n            let partyIDsArray = SaleableItemReasonID.split(\",\").map(id => parseInt(id.trim(), 10));\r\n            let filteredReasons = ReturnReasonListRedux.filter(item => partyIDsArray.includes(item.id));\r\n            let reasonsExceptPartyID = ReturnReasonListRedux.filter(item => !partyIDsArray.includes(item.id));\r\n            setFilteredReasonArr(filteredReasons);\r\n            setReasonArrExceptPartyID(reasonsExceptPartyID);\r\n\r\n        } catch (e) { }\r\n\r\n    }, [ReturnReasonListRedux]);\r\n\r\n    useEffect(() => {\r\n\r\n        if (isSaleableStock) {\r\n            setReturnReasonOptions(filteredReasonArr);\r\n        } else {\r\n            setReturnReasonOptions(reasonArrExceptPartyID);\r\n        }\r\n    }, [isSaleableStock, filteredReasonArr, reasonArrExceptPartyID]);\r\n\r\n    const itemList = ItemList.map((index) => ({\r\n        value: index.Item,\r\n        label: index.ItemName,\r\n        itemCheck: index.selectCheck\r\n    }));\r\n\r\n    const ItemList_Options = itemList.filter((index) => {\r\n        return index.itemCheck === true\r\n    });\r\n\r\n    const ReturnReasonOptions = ReturnReasonFilterData.map((index) => ({\r\n        value: index.id,\r\n        label: index.Name,\r\n    }));\r\n\r\n    const InvoiceNo_Options = InvoiceNo.map((index) => ({\r\n        value: index.Invoice,\r\n        label: index.FullInvoiceNumber,\r\n    }));\r\n\r\n    const supplierOptions = supplier.map((i) => ({\r\n        value: i.id,\r\n        label: i.Name,\r\n    }));\r\n\r\n    const pagesListColumns = [\r\n        {\r\n            text: \"Item Name\",\r\n            dataField: \"ItemName\",\r\n            hidden: false,\r\n            formatter: (cell, row) => {\r\n                return (\r\n                    <Label style={{ minWidth: \"15%\" }}>{row.ItemName}</Label>\r\n                )\r\n            }\r\n        },\r\n\r\n        {//***************Quantity********************************************************************* */\r\n            text: \"Quantity/Unit\",\r\n            dataField: \"\",\r\n            formatExtraData: { tableList: TableArr },\r\n            // classes: () => ('invoice-quantity-row1'),\r\n            formatter: (cellContent, index1, _key, { tableList = [] }) => (\r\n                <>\r\n                    <div className=\"div-1 mb-2\" >\r\n                        <CInput\r\n                            type=\"text\"\r\n                            cpattern={decimalRegx}\r\n                            disabled={pageMode === 'edit' ? true : false}\r\n                            id={`returnQty-${index1.id}-${_key}`}\r\n                            className=\"input\"\r\n                            style={{ textAlign: \"right\" }}\r\n                            key={index1.id}\r\n                            autoComplete=\"off\"\r\n                            defaultValue={index1.Quantity}\r\n                            onChange={(event) => {\r\n                                returnQtyOnChange(event, index1, _key);\r\n                                totalAmountCalcuationFunc(tableList);\r\n                            }}\r\n                        />\r\n                    </div>\r\n                    <div className=\"div-1 \">\r\n                        <div>\r\n                            <Input\r\n                                disabled\r\n                                defaultValue={index1.UnitName}\r\n                            ></Input>\r\n                        </div>\r\n                    </div>\r\n                    {/* <div className=\"bottom-div\">\r\n                        <span>Order-Qty :</span>\r\n                        <samp>{index1.OrderQty}</samp>\r\n                        <samp>{index1.UnitName}</samp>\r\n                    </div> */}\r\n                </>\r\n            ),\r\n        },\r\n        {\r\n            text: \"Invoice Qty\",\r\n            hidden: (returnMode === 1) ? false : true,\r\n            align: () => \"right\",\r\n            formatter: (cell, row) => <Label>{row.InvoiceQuantity}</Label>,\r\n        },\r\n        {//***************StockDetails********************************************************************* */\r\n            text: \"Stock Details\",\r\n            dataField: \"StockDetails\",\r\n            formatExtraData: { tableList: TableArr },\r\n            formatter: (cellContent, index1, _key, { tableList }) => (\r\n                <div>\r\n                    <Table className=\"table table-responsive mb-1\">\r\n                        <Thead>\r\n                            <tr >\r\n                                <th style={{ zIndex: -1 }}>BatchCode</th>\r\n                                <th style={{ zIndex: -1 }}>\r\n                                    <div>\r\n                                        <samp>Stock Quantity</samp>\r\n                                    </div>\r\n                                </th >\r\n                                <th style={{ zIndex: -1 }}>\r\n                                    <div>\r\n                                        <samp>Quantity</samp>\r\n                                    </div>\r\n                                </th>\r\n                                <th style={{ zIndex: -1 }}>Basic Rate</th>\r\n                                <th style={{ zIndex: -1 }}>MRP</th>\r\n                            </tr>\r\n                        </Thead>\r\n                        <Tbody>\r\n                            {cellContent.map((index2) => (\r\n                                <tr key={index1.id}>\r\n                                    <td>\r\n                                        <div style={{}}>{index2.BatchCode}</div>\r\n                                    </td>\r\n                                    <td>\r\n                                        <div style={{ textAlign: \"right\" }}>\r\n                                            <samp id={`ActualQuantity-${index1.id}-${index2.id}`}>{index2.BaseUnitQuantity}</samp>\r\n                                        </div>\r\n                                    </td>\r\n                                    <td>\r\n                                        <div style={{}}>\r\n                                            <Input\r\n                                                type=\"text\"\r\n                                                autoComplete=\"off\"\r\n                                                disabled={pageMode === 'edit' ? true : false}\r\n                                                style={{ textAlign: \"right\" }}\r\n                                                id={`batchQty${index1.id}-${index2.id}-${_key}`}\r\n                                                defaultValue={index2.Qty}\r\n                                                onChange={(event) => {\r\n                                                    stockQtyOnChange(event, index1, index2, _key);\r\n                                                    totalAmountCalcuationFunc(tableList);\r\n                                                }}\r\n                                            ></Input>\r\n                                        </div>\r\n                                    </td>\r\n                                    <td>\r\n                                        <div style={{ width: \"50px\" }}>\r\n                                            <span id={`stockItemRate-${index1.id}-${index2.id}`}>{_cfunc.amountCommaSeparateFunc(index2.Rate)}</span>\r\n                                        </div>\r\n                                    </td>\r\n                                    <td>\r\n                                        <div style={{ width: \"50px\" }}>{index2.MRP}</div>\r\n                                    </td>\r\n                                </tr>\r\n                            ))}\r\n                        </Tbody>\r\n                    </Table>\r\n                </div>\r\n            ),\r\n        },\r\n\r\n        {//***************Discount********************************************************************* */\r\n            text: \"Discount/unit\",\r\n            dataField: \"\",\r\n            formatExtraData: {\r\n                discountValueAll: discountValueAll,\r\n                discountTypeAll: discountTypeAll,\r\n                changeAllDiscount: changeAllDiscount,\r\n                forceReload: forceReload,\r\n                tableList: TableArr\r\n            },\r\n            classes: () => \"invoice-discount-row\",\r\n            headerFormatter: () => {\r\n                return (\r\n                    <div className=\"\">\r\n                        {TableArr.length <= 0 ?\r\n                            <div className=\"col col-3 mt-2\">\r\n                                <Label>Discount/unit</Label>\r\n                            </div>\r\n                            :\r\n                            <div className=\"row\">\r\n                                <div className=\" mt-n2 mb-n2\">\r\n                                    <Label>Discount/unit</Label>\r\n                                </div>\r\n                                <div className=\"col col-6\" >\r\n                                    <Select\r\n                                        type=\"text\"\r\n                                        defaultValue={discountTypeAll}\r\n                                        classNamePrefix=\"select2-selection\"\r\n                                        options={discountDropOption}\r\n                                        style={{ textAlign: \"right\" }}\r\n                                        onChange={(e) => {\r\n                                            setChangeAllDiscount(true);\r\n                                            setDiscountTypeAll(e);\r\n                                            setDiscountValueAll('');\r\n                                        }}\r\n                                    />\r\n                                </div>\r\n                                <div className=\"col col-6\" >\r\n                                    <CInput\r\n                                        type=\"text\"\r\n                                        className=\"input\"\r\n                                        style={{ textAlign: \"right\" }}\r\n                                        cpattern={decimalRegx}\r\n                                        value={discountValueAll}\r\n                                        onChange={(e) => {\r\n                                            let e_val = Number(e.target.value);\r\n\r\n                                            // Check if discount type is \"percentage\"\r\n                                            if (discountTypeAll.value === 2) {// Discount type 2 represents \"percentage\"\r\n                                                // Limit the input to the range of 0 to 100\r\n                                                if (e_val > 100) {\r\n                                                    e.target.value = 100; // Set the input value to 100 if it exceeds 100\r\n                                                } else if (!(e_val >= 0 && e_val < 100)) {\r\n                                                    e.target.value = \"\"; // Clear the input value if it is less than 0\r\n                                                }\r\n                                            }\r\n\r\n                                            setChangeAllDiscount(true);\r\n                                            setDiscountValueAll(e.target.value);\r\n                                        }}\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                        }\r\n                    </div>\r\n                );\r\n            },\r\n            formatter: (cellContent, index1, _key, formatExtraData) => {\r\n                let { tableList, discountValueAll, discountTypeAll } = formatExtraData;\r\n\r\n                if (formatExtraData.changeAllDiscount) {\r\n                    index1.Discount = discountValueAll;\r\n                    index1.DiscountType = discountTypeAll.value;\r\n                    innerStockCaculation(index1, _key);\r\n                    totalAmountCalcuationFunc(tableList);\r\n                }\r\n                if (!index1.DiscountType) { index1[\"DiscountType\"] = discountTypeAll.value }\r\n\r\n                const defaultDiscountTypelabel =\r\n                    index1.DiscountType === 1 ? discountDropOption[0] : discountDropOption[1];\r\n\r\n                return (\r\n                    <>\r\n                        <div className=\"mb-2\">\r\n                            <div className=\"parent\">\r\n                                <div className=\"child\">\r\n                                    <label className=\"label\">Type&nbsp;&nbsp;&nbsp;</label>\r\n                                </div>\r\n                                <div className=\"child\">\r\n                                    <Select\r\n                                        // id={`DicountType_${key}`}\r\n                                        classNamePrefix=\"select2-selection\"\r\n                                        // key={`DicountType_${key}-${index1.id}`}\r\n                                        value={defaultDiscountTypelabel}\r\n                                        options={discountDropOption}\r\n                                        onChange={(e) => {\r\n                                            setChangeAllDiscount(false);\r\n                                            setForceReload(!forceReload);\r\n                                            index1.DiscountType = e.value;\r\n                                            index1.Discount = '';\r\n                                            innerStockCaculation(index1, _key);\r\n                                            totalAmountCalcuationFunc(tableList);\r\n                                        }}\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div>\r\n                            <div className=\"parent\">\r\n                                <div className=\"child\">\r\n                                    <label className=\"label\">Value&nbsp;</label>\r\n                                </div>\r\n                                <div className=\"child\">\r\n                                    <CInput\r\n                                        className=\"input\"\r\n                                        // id={`Dicount_${key}-${index1.id}`}\r\n                                        style={{ textAlign: \"right\" }}\r\n                                        type=\"text\"\r\n                                        value={index1.Discount}\r\n                                        cpattern={decimalRegx}\r\n                                        onChange={(e) => {\r\n\r\n                                            let e_val = Number(e.target.value);\r\n                                            // Check if discount type is \"percentage\"\r\n                                            if (index1.DiscountType === 2) { // Discount type 2 represents \"percentage\"\r\n                                                // Limit the input to the range of 0 to 100\r\n                                                if (e_val > 100) {\r\n                                                    e.target.value = 100; // Set the input value to 100 if it exceeds 100\r\n                                                } else if (!(e_val >= 0 && e_val < 100)) {\r\n                                                    e.target.value = ''; // Clear the input value if it is less than 0\r\n                                                }\r\n                                            }\r\n                                            index1.Discount = e.target.value;\r\n                                            setChangeAllDiscount(false);\r\n                                            setForceReload(!forceReload);\r\n                                            innerStockCaculation(index1);\r\n                                            totalAmountCalcuationFunc(tableList);\r\n                                        }}\r\n\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"bottom-div\">\r\n                            <div>Amount:</div>\r\n                            <div id={`itemTotalAmount-${index1.id}-${_key}`}>\r\n                                {_cfunc.amountCommaSeparateFunc(index1.itemTotalAmount)}\r\n                            </div>\r\n                        </div>\r\n                    </>\r\n                );\r\n            },\r\n        },\r\n\r\n        {\r\n            text: \"Return Reason\",\r\n            dataField: \"\",\r\n            classes: () => \"sales-return-row\",\r\n            formatExtraData: { ReturnReasonOptions }, // Pass ReturnReasonOptions as part of formatExtraData\r\n\r\n            formatter: (cellContent, row, rowIndex, { ReturnReasonOptions }) => {\r\n                return (<>\r\n                    <div className=\"parent mb-1\">\r\n                        <div className=\"child\">\r\n                            <Select\r\n                                isSearchable={true}\r\n                                className=\"react-dropdown\"\r\n                                classNamePrefix=\"dropdown\"\r\n                                value={ReturnReasonOptions.find(option => option.value === row.defaultReason)}\r\n                                styles={{\r\n                                    menu: provided => ({ ...provided, zIndex: 2 })\r\n                                }}\r\n                                options={ReturnReasonOptions}\r\n                                onChange={event => {\r\n                                    row[\"defaultReason\"] = event.value;\r\n                                }}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"parent\">\r\n                        <div className=\"child\">\r\n                            <Input\r\n                                placeholder=\"Enter Comment\"\r\n                                defaultChecked={row.ItemComment}\r\n                                type=\"text\"\r\n                                onChange={(event) => { row.ItemComment = event.target.value }}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                </>\r\n                )\r\n            }\r\n        },\r\n        {\r\n            text: \"Image\",\r\n            dataField: \"\",\r\n            classes: () => \"sales-return-Image-row\",\r\n            formatExtraData: { ReturnReasonOptions }, // Pass ReturnReasonOptions as part of formatExtraData\r\n\r\n\r\n            formatter: (cellContent, row, key) => {\r\n\r\n                return (<span style={{ justifyContent: 'center', width: \"100px\" }}>\r\n                    <div>\r\n                        <div className=\"btn-group btn-group-example mb-3\" role=\"group\">\r\n                            <Input\r\n                                type=\"file\"\r\n                                className=\"form-control \"\r\n                                name=\"image\"\r\n                                multiple\r\n                                id=\"file\"\r\n                                accept=\".jpg, .jpeg, .png ,.pdf\"\r\n                                onChange={(event) => { imageSelectHandler(event, row) }}\r\n                            />\r\n                            <button name=\"image\"\r\n                                accept=\".jpg, .jpeg, .png ,.pdf\"\r\n                                onClick={(event) => {\r\n\r\n                                    if ((row.ImageURL) && (row.ImageURL.length === 0)) {\r\n                                        return setmodal_backdrop(false)\r\n                                    } else if ((row.ImageURL) && (row.ImageURL.length > 0)) {\r\n                                        imageShowHandler(row)\r\n                                    }\r\n                                }}\r\n                                id=\"ImageId\" type=\"button\" className=\"btn btn-primary \"> Show </button>\r\n                        </div>\r\n                        {/* Image Count: {row && row.ImageURL ? ImageCount : 0} */}\r\n                    </div>\r\n\r\n\r\n                </span>)\r\n            }\r\n        },\r\n\r\n        {\r\n            text: \"Action \",\r\n            dataField: \"\",\r\n            hidden: returnMode === 1 ? true : false,\r\n            formatExtraData: { TableArr, addBtnLoading },\r\n            formatter: (cellContent, row, key, { TableArr, addBtnLoading }) => (\r\n                <>\r\n                    <div style={{ justifyContent: 'center' }} >\r\n                        <Col>\r\n                            <FormGroup className=\" col col-sm-4 \">\r\n                                <Button\r\n                                    id={\"deleteid\"}\r\n                                    type=\"button\"\r\n                                    disabled={addBtnLoading}\r\n                                    className=\"badge badge-soft-danger font-size-12 btn btn-danger waves-effect waves-light w-xxs border border-light\"\r\n                                    data-mdb-toggle=\"tooltip\" data-mdb-placement=\"top\" title='Delete MRP'\r\n                                    onClick={(e) => { deleteButtonAction(row, TableArr) }}>\r\n                                    <i className=\"mdi mdi-delete font-size-18\"></i>\r\n                                </Button>\r\n                            </FormGroup>\r\n                        </Col>\r\n                    </div>\r\n                </>\r\n            ),\r\n        },\r\n    ];\r\n\r\n    const totalAmountCalcuationFunc = (tableList = []) => {\r\n\r\n        let sumOfGrandTotal = tableList.reduce((accumulator, currentObject) => accumulator + Number(currentObject[\"itemTotalAmount\"]) || 0, 0);\r\n        let count_label = `${\"Total Amount\"} :${Number(sumOfGrandTotal).toLocaleString()}`\r\n        dispatch(BreadcrumbShowCountlabel(count_label))\r\n    }\r\n\r\n    const deleteButtonAction = (row, TablelistArray = []) => {\r\n        const newArr = TablelistArray.filter((index) => !(index.id === row.id))\r\n        let sumOfGrandTotal = newArr.reduce((accumulator, currentObject) => accumulator + Number(currentObject[\"itemTotalAmount\"]) || 0, 0);\r\n        let count_label = `${\"Total Amount\"} :${Number(sumOfGrandTotal).toLocaleString()}`\r\n        dispatch(BreadcrumbShowCountlabel(count_label));\r\n        setTableArr(newArr)\r\n    }\r\n\r\n    const ReturnDate_Onchange = (e, date) => {\r\n        setState((i) => {\r\n            const a = { ...i }\r\n            a.values.ReturnDate = date;\r\n            a.hasValid.ReturnDate.valid = true\r\n            return a\r\n        })\r\n    }\r\n\r\n    const AddPartyHandler = async (byType) => {\r\n\r\n        const invalidMsg1 = []\r\n        if ((values.ItemName === '') && (byType === 'ItemWise')) {\r\n            invalidMsg1.push(`Select Item Name`)\r\n        }\r\n        if ((values.InvoiceNumber === '') && (values.Customer === '') && (byType === 'InvoiceWise')) {\r\n            invalidMsg1.push(`Select ${fieldLabel.Customer}.`)\r\n        }\r\n        else if ((values.InvoiceNumber === '') && (byType === 'InvoiceWise')) {\r\n            invalidMsg1.push(`Select Invoice No.`)\r\n        }\r\n\r\n        if (invalidMsg1.length > 0) {\r\n            customAlert({\r\n                Type: 4,\r\n                Message: JSON.stringify(invalidMsg1)\r\n            })\r\n            return\r\n        }\r\n\r\n        const jsonBody = JSON.stringify({\r\n            \"ItemID\": values.ItemName.value,\r\n            \"BatchCode\": values.BatchCode,\r\n            \"Customer\": commonPartyDropSelect.value// Customer Swipe when Po return\r\n        })\r\n\r\n        const InvoiceId = values.InvoiceNumber ? values.InvoiceNumber.value : ''\r\n        const nrwReturnMode = (byType === 'ItemWise') ? 2 : 1 //(returnMode === 2) ItemWise\r\n        dispatch(SalesReturnAddBtn_Action({ jsonBody, InvoiceId, returnMode: nrwReturnMode }))\r\n        setReturnMode(nrwReturnMode)\r\n    }\r\n\r\n    const RetailerHandler = (event) => {\r\n        setState((i) => {\r\n            let a = { ...i }\r\n            a.values.ItemName = \"\"\r\n            a.values.InvoiceNumber = \"\"\r\n            a.values.Customer = event\r\n\r\n            a.hasValid.Customer.valid = true;\r\n            a.hasValid.ItemName.valid = true;\r\n            a.hasValid.InvoiceNumber.valid = true;\r\n\r\n            return a\r\n        })\r\n        setTableArr([])\r\n\r\n        const jsonBody = JSON.stringify({\r\n            PartyID: commonPartyDropSelect.value,\r\n            CustomerID: event.value\r\n        });\r\n\r\n        dispatch(InvoiceNumber(jsonBody));\r\n    }\r\n\r\n    const RetailerOnCancelClickHandler = () => {\r\n        setState((i) => {\r\n            let a = { ...i }\r\n            a.values.ItemName = \"\"\r\n            a.values.InvoiceNumber = \"\"\r\n            a.values.Customer = ''\r\n\r\n            a.hasValid.Customer.valid = true;\r\n            a.hasValid.ItemName.valid = true;\r\n            a.hasValid.InvoiceNumber.valid = true;\r\n            return a\r\n        })\r\n        setTableArr([])\r\n    }\r\n\r\n    const itemNameOnChangeHandler = (hasSelect, evn) => {\r\n        if (values.Customer === \"\") {\r\n            customAlert({ Type: 3, Message: `Please select ${fieldLabel.Customer}` })\r\n            return\r\n        }\r\n        onChangeSelect({ hasSelect, evn, state, setState, })\r\n        setReturnMode(2)\r\n    }\r\n\r\n    const imageSelectHandler = async (event, row) => { // image Select  handler\r\n\r\n        const file = Array.from(event.target.files)\r\n        const slides = file.map(item => {  //Create File to URl to Show Image of Particular row\r\n            return URL.createObjectURL(item);\r\n        })\r\n        row[\"Image\"] = file\r\n        row[\"ImageURL\"] = slides\r\n    }\r\n\r\n    const imageShowHandler = async (row) => { // image Show handler\r\n\r\n        const file = Array.from(row.Image)\r\n        const slides = file.map(item => {\r\n            return URL.createObjectURL(item);\r\n        })\r\n        setImageTable(slides)\r\n    }\r\n\r\n    function tog_backdrop() {\r\n        setmodal_backdrop(!modal_backdrop)\r\n        removeBodyCss()\r\n    }\r\n    function removeBodyCss() {\r\n        document.body.classList.add(\"no_padding\")\r\n    }\r\n\r\n    const SaveHandler = async (event) => {\r\n\r\n        event.preventDefault();\r\n        try {\r\n\r\n            const invalidMessages = [];\r\n\r\n            const filterData = TableArr.filter((index) => {\r\n                if (index.Quantity > 0) {\r\n                    let msgString = ' Select';\r\n\r\n                    if (index.StockInValid) {\r\n                        invalidMessages.push(`${index.ItemName}:${index.StockInvalidMsg}`);\r\n                        return\r\n                    };\r\n\r\n                    if (!index.defaultReason) { msgString = msgString + ', ' + \"Return Reason\" };\r\n\r\n                    if (!index.defaultReason) {\r\n                        invalidMessages.push({ [index.ItemName]: msgString });\r\n                    }\r\n                    return true\r\n                }\r\n            });\r\n\r\n            if (invalidMessages.length > 0) {\r\n                customAlert({\r\n                    Type: 4,\r\n                    Message: invalidMessages,\r\n                });\r\n                return;\r\n            }\r\n\r\n            if (filterData.length === 0) {\r\n                customAlert({\r\n                    Type: 4,\r\n                    Message: \"Please Enter One Item Quantity\",\r\n                });\r\n                return;\r\n            }\r\n            const formData = new FormData(); // Create a new FormData object\r\n\r\n            // IsComparGstIn= compare Supplier and Customer are Same State by GSTIn Number\r\n            const IsComparGstIn = { GSTIn_1: values.Customer.GSTIN, GSTIn_2: _cfunc.loginUserGSTIN() }\r\n\r\n            const { processedItems, grandTotal } = filterData.reduce(({ processedItems, grandTotal }, index) => {\r\n                let ToatlImages = []\r\n                if (index.Image !== undefined) {\r\n                    ToatlImages = Array.from(index.Image).map((item, key) => {\r\n                        formData.append(`uploaded_images_${index.Item}`, index.Image[key]);  //Sending image As a file \r\n                        return { Item_pic: `Purchase Return Image Count${key}` }\r\n                    })\r\n                } else {\r\n                    ToatlImages = []\r\n                }\r\n\r\n                index.StockDetails.forEach((ele) => {\r\n                    if (ele.Qty > 0) {\r\n\r\n\r\n                        //**calculate Amount, Discount Amount based on Discount type */\r\n                        const calculate = return_discountCalculate_Func(ele, index, IsComparGstIn);\r\n                        grandTotal += Number(calculate.roundedTotalAmount)\r\n                        processedItems.push({\r\n                            \"Item\": index.Item,\r\n                            \"ItemName\": index.ItemName,\r\n                            \"Unit\": index.Unit,\r\n                            \"BatchCode\": ele.BatchCode,\r\n                            \"Quantity\": Number(ele.Qty).toFixed(3),\r\n                            \"BatchDate\": ele.BatchDate,\r\n                            \"BatchID\": ele.id,\r\n                            \"BaseUnitQuantity\": Number(ele.BaseUnitQuantity).toFixed(3),\r\n                            \"LiveBatch\": ele.LiveBatche,\r\n                            \"MRP\": ele.LiveBatcheMRPID,\r\n                            \"MRPValue\": ele.MRP, //changes\r\n                            \"Rate\": Number(ele.Rate).toFixed(2),\r\n\r\n                            \"GST\": ele.LiveBatcheGSTID,\r\n                            \"CGST\": Number(calculate.CGST_Amount).toFixed(2),\r\n                            \"SGST\": Number(calculate.SGST_Amount).toFixed(2),\r\n                            \"IGST\": Number(calculate.IGST_Amount).toFixed(2),\r\n\r\n                            \"GSTPercentage\": calculate.GST_Percentage,\r\n                            \"CGSTPercentage\": calculate.CGST_Percentage,\r\n                            \"SGSTPercentage\": calculate.SGST_Percentage,\r\n                            \"IGSTPercentage\": calculate.IGST_Percentage,\r\n\r\n                            \"BasicAmount\": Number(calculate.discountBaseAmt).toFixed(2),\r\n                            \"GSTAmount\": Number(calculate.roundedGstAmount).toFixed(2),\r\n                            \"Amount\": Number(calculate.roundedTotalAmount).toFixed(2),\r\n\r\n                            \"TaxType\": 'GST',\r\n                            \"DiscountType\": index.DiscountType,\r\n                            \"Discount\": Number(index.Discount) || 0,\r\n                            \"DiscountAmount\": Number(calculate.disCountAmt).toFixed(2),\r\n\r\n                            \"ItemReason\": index.defaultReason ? index.defaultReason : \"\",\r\n                            \"Comment\": index.ItemComment,\r\n                            \"ApprovedQuantity\": \"\",\r\n                            \"PurchaseReturn\": \"\",\r\n                            \"SubReturn\": \"\",\r\n                            \"ReturnItemImages\": ToatlImages,\r\n                        });\r\n                    }\r\n                });\r\n                return { processedItems, grandTotal };\r\n            }, { processedItems: [], grandTotal: 0 });\r\n\r\n\r\n            formData.append('ReturnDate', values.ReturnDate);\r\n            formData.append('ReturnReason', '');\r\n            formData.append('BatchCode', values.BatchCode);\r\n            formData.append('Customer', commonPartyDropSelect.value);\r\n\r\n            formData.append('Party', values.Customer.value);\r\n            formData.append('Comment', values.Comment);\r\n            formData.append('GrandTotal', Number(grandTotal).toFixed(2));\r\n            formData.append('RoundOffAmount', (grandTotal - Math.trunc(grandTotal)).toFixed(2));\r\n            formData.append('CreatedBy', _cfunc.loginUserID());\r\n            formData.append('UpdatedBy', _cfunc.loginUserID());\r\n            formData.append('Mode', 2);\r\n            formData.append('IsApproved', 0);\r\n            formData.append('ReturnItems', JSON.stringify(processedItems)); // Convert to JSON string\r\n            formData.append('PurchaseReturnReferences', JSON.stringify([])); // Convert to JSON string\r\n\r\n            dispatch(saveSalesReturnMaster({ formData }));\r\n\r\n        } catch (e) { _cfunc.CommonConsole(e) }\r\n    };\r\n\r\n    if (!(userPageAccessState === '')) {\r\n        return (\r\n            <React.Fragment>\r\n                <MetaTags>{_cfunc.metaTagLabel(userPageAccessState)}</MetaTags>\r\n\r\n                <div className=\"page-content\">\r\n                    <NewCommonPartyDropdown pageMode={pageMode} />\r\n                    <Modal\r\n                        isOpen={modal_backdrop}\r\n                        toggle={() => {\r\n                            tog_backdrop()\r\n                        }}\r\n\r\n                        style={{ width: \"800px\", height: \"800px\", borderRadius: \"50%\" }}\r\n                        className=\"modal-dialog-centered \"\r\n                    >\r\n                        {(imageTable.length > 0) && <Slidewithcaption Images={imageTable} />}\r\n                    </Modal>\r\n\r\n                    <form noValidate>\r\n                        <div className=\"px-2 c_card_filter header text-black mb-1\" >\r\n\r\n                            <Row>\r\n                                <Col sm=\"6\">\r\n                                    <FormGroup className=\"row mt-2\" >\r\n                                        <Label className=\"col-sm-1 p-2\"\r\n                                            style={{ width: \"115px\", marginRight: \"0.4cm\" }}>{fieldLabel.ReturnDate}  </Label>\r\n                                        <Col sm=\"7\">\r\n                                            <C_DatePicker\r\n                                                name='ReturnDate'\r\n                                                value={values.ReturnDate}\r\n                                                onChange={ReturnDate_Onchange}\r\n                                            />\r\n                                        </Col>\r\n                                    </FormGroup>\r\n                                </Col >\r\n\r\n                                <Col sm=\"6\">\r\n                                    <FormGroup className=\" row mt-2 \" >\r\n                                        <Label className=\"col-sm-1 p-2\"\r\n                                            style={{ width: \"115px\", marginRight: \"0.4cm\" }}>{fieldLabel.Customer} </Label>\r\n                                        <Col sm=\"7\">\r\n                                            <C_Select\r\n                                                id=\"Customer \"\r\n                                                name=\"Customer\"\r\n                                                value={values.Customer}\r\n                                                isSearchable={true}\r\n                                                isLoading={supplierDrodownLoading}\r\n                                                isDisabled={((TableArr.length > 0) || addBtnLoading) ? true : false}\r\n                                                options={supplierOptions}\r\n                                                styles={{\r\n                                                    menu: provided => ({ ...provided, zIndex: 2 })\r\n                                                }}\r\n                                                onChange={RetailerHandler}\r\n                                                onCancelClick={RetailerOnCancelClickHandler}\r\n                                            />\r\n                                            {isError.Customer.length > 0 && (\r\n                                                <span className=\"text-danger f-8\"><small>{isError.Customer}</small></span>\r\n                                            )}\r\n                                        </Col>\r\n\r\n                                    </FormGroup>\r\n                                </Col >\r\n                            </Row>\r\n\r\n                            <Row>\r\n                                <Col sm=\"6\">\r\n                                    <FormGroup className=\" row mt-1 \" >\r\n                                        <Label className=\"col-sm-1 p-2\"\r\n                                            style={{ width: \"115px\", marginRight: \"0.4cm\" }}>{fieldLabel.ItemName} </Label>\r\n                                        <Col sm=\"7\">\r\n                                            <C_Select\r\n                                                id=\"ItemName \"\r\n                                                name=\"ItemName\"\r\n                                                value={values.ItemName}\r\n                                                isDisabled={(returnMode === 1) ? true : false}\r\n                                                isSearchable={true}\r\n                                                className=\"react-dropdown\"\r\n                                                classNamePrefix=\"dropdown\"\r\n                                                styles={{\r\n                                                    menu: provided => ({ ...provided, zIndex: 2 })\r\n                                                }}\r\n                                                options={ItemList_Options}\r\n                                                onChange={itemNameOnChangeHandler}\r\n                                            />\r\n                                        </Col>\r\n                                    </FormGroup>\r\n                                </Col >\r\n\r\n                                <Col sm=\"6\">\r\n                                    <FormGroup className=\" row mt-1 \" >\r\n                                        <Label className=\"col-sm-1 p-2\"\r\n                                            style={{ width: \"115px\", marginRight: \"0.4cm\" }}>{fieldLabel.Comment} </Label>\r\n                                        <Col sm=\"7\">\r\n                                            <Input\r\n                                                name=\"Comment\"\r\n                                                id=\"Comment\"\r\n                                                value={values.Comment}\r\n                                                type=\"text\"\r\n                                                className={isError.Comment.length > 0 ? \"is-invalid form-control\" : \"form-control\"}\r\n                                                placeholder=\"Enter Comment\"\r\n                                                autoComplete='off'\r\n                                                onChange={(event) => {\r\n                                                    onChangeText({ event, state, setState })\r\n                                                }}\r\n                                            />\r\n                                            {isError.Comment.length > 0 && (\r\n                                                <span className=\"invalid-feedback\">{isError.Comment}</span>\r\n                                            )}\r\n                                        </Col>\r\n\r\n                                    </FormGroup>\r\n                                </Col >\r\n                            </Row>\r\n\r\n                            <Row>\r\n                                <Col sm=\"6\">\r\n                                    <FormGroup className=\" row mt-1 \" >\r\n                                        <Label className=\"col-sm-1 p-2\"\r\n                                            style={{ width: \"115px\", marginRight: \"0.4cm\" }}>{fieldLabel.BatchCode}</Label>\r\n                                        <Col sm=\"7\">\r\n                                            <Input\r\n                                                name=\"BatchCode\"\r\n                                                value={values.BatchCode}\r\n                                                placeholder=\"Enter BatchCode\"\r\n                                                type='text'\r\n                                                onChange={(event) => {\r\n                                                    onChangeText({ event, state, setState })\r\n                                                }}\r\n                                            />\r\n                                            {isError.BatchCode.length > 0 && (\r\n                                                <span className=\"text-danger f-8\"><small>{isError.BatchCode}</small></span>\r\n                                            )}\r\n\r\n                                        </Col>\r\n                                        <Col sm=\"1\" className=\"mx-6 mt-1\">\r\n                                            {\r\n                                                (!(returnMode === 1)) &&///(returnMode === 1) InvoiceWise\r\n                                                <C_Button\r\n                                                    type=\"button\"\r\n                                                    loading={addBtnLoading}\r\n                                                    className=\"btn btn-outline-primary border-1 font-size-12 text-center\"\r\n                                                    onClick={() => AddPartyHandler(\"ItemWise\")}>\r\n                                                    Add\r\n                                                </C_Button>\r\n                                            }\r\n\r\n                                        </Col>\r\n                                    </FormGroup>\r\n                                </Col >\r\n                                {/* <Col sm=\"6\">\r\n                                    <FormGroup className=\" row mt-1 \" >\r\n                                        <Label className=\"col-sm-1 p-2\"\r\n                                            style={{ width: \"115px\", marginRight: \"0.4cm\" }}>  {fieldLabel.InvoiceNumber}</Label>\r\n                                        <Col sm=\"7\">\r\n                                            <C_Select\r\n                                                id=\"InvoiceNumber \"\r\n                                                name=\"InvoiceNumber\"\r\n                                                value={values.InvoiceNumber}\r\n                                                //(returnMode === 2) ItemWise\r\n                                                // isDisabled={((returnMode === 2) || invoiceNoDropDownLoading || (TableArr.length > 0)) ? true : false}\r\n                                                isDisabled={true}\r\n                                                isSearchable={true}\r\n                                                isLoading={invoiceNoDropDownLoading}\r\n                                                styles={{\r\n                                                    menu: provided => ({ ...provided, zIndex: 2 })\r\n                                                }}\r\n                                                options={InvoiceNo_Options}\r\n                                                onChange={(hasSelect, evn) => {\r\n                                                    onChangeSelect({ hasSelect, evn, state, setState, })\r\n                                                    setReturnMode(1)\r\n                                                }}\r\n                                            />\r\n\r\n                                        </Col>\r\n                                        <Col sm=\"1\" className=\"mx-6 mt-1 \">\r\n                                            {((TableArr.length > 0) || (!(values.ItemName === \"\"))) ?\r\n                                                <Change_Button\r\n                                                    forceDisabled={addBtnLoading}\r\n                                                    onClick={(e) => {\r\n                                                        setTableArr([])\r\n                                                        setState((i) => {\r\n                                                            let a = { ...i }\r\n                                                            a.values.ItemName = \"\"\r\n                                                            a.values.InvoiceNumber = \"\"\r\n                                                            return a\r\n                                                        })\r\n                                                    }} />\r\n                                                :\r\n                                                (!(returnMode === 2)) &&//(returnMode === 2) ItemWise\r\n                                                <C_Button\r\n                                                    type=\"button\"\r\n                                                    loading={addBtnLoading}\r\n                                                    className=\"btn btn-outline-primary border-1 font-size-12 text-center\"\r\n                                                    onClick={() => AddPartyHandler(\"InvoiceWise\")}>\r\n                                                    Select\r\n                                                </C_Button>\r\n                                            }\r\n                                        </Col>\r\n                                    </FormGroup>\r\n                                </Col > */}\r\n\r\n                                <Col sm=\"6\">\r\n                                    <FormGroup className=\" row mt-1 \" >\r\n                                        <Label className=\"col-sm-1 p-2\"\r\n                                            style={{ width: \"115px\", marginRight: \"0.4cm\" }}>IsSaleableStock</Label>\r\n                                        <Col sm=\"7\">\r\n                                            <Input\r\n                                                style={{ marginRight: \"0.4cm\", marginTop: \"10px\", width: \"15px\", height: \"15px\" }}\r\n                                                type=\"checkbox\"\r\n                                                disabled={TableArr.length > 0 && true}\r\n                                                defaultChecked={isSaleableStock}\r\n                                                onChange={(event) => { setIsSaleableStock(event.target.checked) }}\r\n                                            />\r\n\r\n                                        </Col>\r\n\r\n                                    </FormGroup>\r\n                                </Col >\r\n                            </Row>\r\n\r\n                        </div>\r\n\r\n                        <div>\r\n                            <ToolkitProvider\r\n                                keyField={\"id\"}\r\n                                data={TableArr}\r\n                                columns={pagesListColumns}\r\n                                search\r\n                            >\r\n                                {(toolkitProps) => (\r\n                                    <React.Fragment>\r\n                                        <Row>\r\n                                            <Col xl=\"12\">\r\n                                                <div className=\"table-responsive table\" style={{ minHeight: \"60vh\" }}>\r\n                                                    <BootstrapTable\r\n                                                        keyField={\"id\"}\r\n                                                        key={`table-key-${returnMode}`}\r\n                                                        id=\"table_Arrow\"\r\n                                                        classes={\"table  table-bordered \"}\r\n                                                        noDataIndication={\r\n                                                            <div className=\"text-danger text-center \">\r\n                                                                Items Not available\r\n                                                            </div>\r\n                                                        }\r\n                                                        {...toolkitProps.baseProps}\r\n                                                        onDataSizeChange={(e) => {\r\n                                                            _cfunc.tableInputArrowUpDounFunc(\"#table_Arrow\")\r\n                                                        }}\r\n                                                    />\r\n                                                </div>\r\n                                            </Col>\r\n                                            {mySearchProps(toolkitProps.searchProps,)}\r\n                                        </Row>\r\n\r\n                                    </React.Fragment>\r\n                                )}\r\n                            </ToolkitProvider>\r\n                        </div>\r\n\r\n                        {\r\n                            TableArr.length > 0 ?\r\n                                <FormGroup>\r\n                                    <Col sm={2} style={{ marginLeft: \"-40px\" }} className={\"row save1\"}>\r\n                                        <SaveButton\r\n                                            pageMode={pageMode}\r\n                                            forceDisabled={addBtnLoading}\r\n                                            loading={saveBtnloading}\r\n                                            onClick={SaveHandler}\r\n                                            userAcc={userPageAccessState}\r\n                                            module={\"SalesReturn\"}\r\n                                        />\r\n                                    </Col>\r\n                                </FormGroup >\r\n                                : null\r\n                        }\r\n\r\n                    </form >\r\n                </div >\r\n            </React.Fragment >\r\n        );\r\n    }\r\n    else {\r\n        return (\r\n            <React.Fragment></React.Fragment>\r\n        )\r\n    }\r\n};\r\n\r\nexport default PurchaseReturn\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Purchase\\Return\\PurchaseReturnCalculation.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\Reports\\StockReport\\StockReport_1.js",["4292","4293","4294","4295","4296","4297","4298","4299","4300","4301","4302","4303","4304","4305","4306","4307"],"import React, { useEffect, useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { Col, FormGroup, Label, Row } from \"reactstrap\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { C_Button } from \"../../components/Common/CommonButton\";\r\nimport { C_DatePicker, C_Select } from \"../../CustomValidateForm\";\r\nimport * as _cfunc from \"../../components/Common/CommonFunction\";\r\nimport { mode, pageId, url } from \"../../routes/index\"\r\nimport { MetaTags } from \"react-meta-tags\";\r\nimport C_Report from \"../../components/Common/C_Report\";\r\nimport { StockProcessing_API_Success, StockProcessing_Action, stockReport_1_GoButton_API, stockReport_1_GoButton_API_Success } from \"../../store/Report/StockReport/action\";\r\nimport { commonPageField, commonPageFieldSuccess, getBaseUnit_ForDropDown, getBaseUnit_ForDropDownSuccess, getpdfReportdata } from \"../../store/actions\";\r\nimport { customAlert } from \"../../CustomAlert/ConfirmDialog\";\r\nimport { StockReport_1_GoBtn_API } from \"../../helpers/backend_helper\";\r\nimport * as report from '../ReportIndex'\r\nimport { ReportComponent } from \"../ReportComponent\";\r\n\r\nconst StockReport_1 = (props) => {\r\n\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n    const currentDate_ymd = _cfunc.date_ymd_func();\r\n    const isSCMParty = _cfunc.loginIsSCMParty();\r\n\r\n    const [headerFilters, setHeaderFilters] = useState('');\r\n    const [userPageAccessState, setUserAccState] = useState('');\r\n    const [unitDropdown, setUnitDropdown] = useState(\"\");\r\n    const [tableData, setTableData] = useState([]);\r\n    const [PartyDropdown, setPartyDropdown] = useState(\"\");\r\n\r\n    const [btnMode, setBtnMode] = useState(0);\r\n\r\n    const reducers = useSelector(\r\n        (state) => ({\r\n            goBtnLoading: state.PdfReportReducers.goBtnLoading,\r\n            stockProcessingLoading: state.StockReportReducer.stockProcessingLoading,\r\n            StockProcessingBtn: state.StockReportReducer.StockProcessingBtn,\r\n            StockReport_1_Gobtb: state.StockReportReducer.StockReport_1_Gobtb,\r\n            party: state.CommonPartyDropdownReducer.commonPartyDropdown,\r\n            pdfdata: state.PdfReportReducers.pdfdata,\r\n            BaseUnit: state.ItemMastersReducer.BaseUnit,\r\n            userAccess: state.Login.RoleAccessUpdateData,\r\n            pageField: state.CommonPageFieldReducer.pageField\r\n        })\r\n    );\r\n    const { StockReport_1_Gobtb, pdfdata, pageField, party } = reducers\r\n\r\n    const { userAccess, BaseUnit, StockProcessingBtn, } = reducers;\r\n    const { fromdate = currentDate_ymd, todate = currentDate_ymd } = headerFilters;\r\n\r\n    // Featch Modules List data  First Rendering\r\n    const location = { ...history.location }\r\n    const hasShowModal = props.hasOwnProperty(mode.editValue)\r\n\r\n    // userAccess useEffect\r\n    useEffect(() => {\r\n        let userAcc = null;\r\n        let locationPath = location.pathname;\r\n        if (hasShowModal) {\r\n            locationPath = props.masterPath;\r\n        };\r\n        userAcc = userAccess.find((inx) => {\r\n            return (`/${inx.ActualPagePath}` === locationPath)\r\n        })\r\n        if (userAcc) {\r\n            setUserAccState(userAcc)\r\n            _cfunc.breadcrumbReturnFunc({ dispatch, userAcc });\r\n        };\r\n    }, [userAccess])\r\n\r\n    useEffect(() => {\r\n        dispatch(commonPageFieldSuccess(null));\r\n        dispatch(commonPageField(pageId.STOCK_REPORT_1));\r\n        dispatch(getBaseUnit_ForDropDown());\r\n        return () => {\r\n            dispatch(commonPageFieldSuccess(null));\r\n            dispatch(stockReport_1_GoButton_API_Success([]))\r\n            dispatch(getBaseUnit_ForDropDownSuccess([]));\r\n        }\r\n\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (tableData.length === 0) {\r\n            setBtnMode(0)\r\n        }\r\n    }, [tableData]);\r\n\r\n    useEffect(() => {\r\n        try {\r\n\r\n            if ((StockReport_1_Gobtb.Status === true) && (StockReport_1_Gobtb.StatusCode === 200)) {\r\n                setBtnMode(0);\r\n                const { StockDetails } = StockReport_1_Gobtb.Data[0]\r\n                if (btnMode === 2) {\r\n                    ReportComponent({      // Download CSV\r\n                        pageField,\r\n                        excelData: StockDetails,\r\n                        excelFileName: \"SNS Report\"\r\n                    })\r\n                    dispatch(stockReport_1_GoButton_API_Success([]));\r\n                }\r\n            }\r\n\r\n            else if ((StockReport_1_Gobtb.Status === true) && (StockReport_1_Gobtb.StatusCode === 204)) {\r\n                customAlert({\r\n                    Type: 3,\r\n                    Message: \"Records Not available \",\r\n                })\r\n                setBtnMode(0);\r\n                dispatch(stockReport_1_GoButton_API_Success([]));\r\n                return\r\n            }\r\n            setBtnMode(0);\r\n        }\r\n        catch (e) { console.log(e) }\r\n\r\n    }, [StockReport_1_Gobtb]);\r\n\r\n    useEffect(() => {\r\n        try {\r\n            if (btnMode === 1) {\r\n                if ((pdfdata.Status === true) && (pdfdata.StatusCode === 204)) {\r\n                    customAlert({\r\n                        Type: 3,\r\n                        Message: \"Records Not available \",\r\n                    })\r\n                    setBtnMode(0);\r\n                    return\r\n                }\r\n            }\r\n            setBtnMode(0);\r\n            dispatch(stockReport_1_GoButton_API_Success([]));\r\n        }\r\n        catch (e) { console.log(e) }\r\n\r\n    }, [pdfdata]);\r\n\r\n    useEffect(async () => {\r\n\r\n        if ((StockProcessingBtn.Status === true) && (StockProcessingBtn.StatusCode === 200)) {\r\n            dispatch(StockProcessing_API_Success([]))\r\n            customAlert({\r\n                Type: 1,\r\n                Message: StockProcessingBtn.Message,\r\n            })\r\n\r\n        }\r\n        else if (StockProcessingBtn.Status === true) {\r\n            dispatch(StockProcessing_API_Success([]))\r\n            customAlert({\r\n                Type: 4,\r\n                Message: JSON.stringify(StockProcessingBtn.Message),\r\n            })\r\n        }\r\n    }, [StockProcessingBtn])\r\n\r\n    const Party_Option = party.map(i => ({\r\n        value: i.id,\r\n        label: i.Name\r\n    }));\r\n\r\n    const BaseUnit_DropdownOptions = BaseUnit.filter(index => index.Name === \"No\" || index.Name === \"Kg\" || index.Name === \"Box\")\r\n        .map(data => ({\r\n            value: data.id,\r\n            label: data.Name\r\n        }));\r\n\r\n    function StockProccessHandler() {\r\n\r\n        const btnId = `gobtn-${url.STOCK_REPORT_1}`\r\n        const jsonBody = JSON.stringify({\r\n            \"FromDate\": fromdate,\r\n            \"ToDate\": todate,\r\n            \"Party\": _cfunc.loginPartyID(),\r\n        });\r\n        dispatch(StockProcessing_Action({ jsonBody, btnId }))\r\n    }\r\n\r\n    function excel_And_GoBtnHandler(e, btnMode) {\r\n\r\n        setBtnMode(btnMode);\r\n        if (unitDropdown === \"\") {\r\n            customAlert({\r\n                Type: 4,\r\n                Message: \"Please Select Unit\"\r\n            })\r\n            setBtnMode(0);\r\n            return\r\n        }\r\n        if ((isSCMParty) && (PartyDropdown === \"\")) {\r\n            customAlert({ Type: 4, Message: \"Please Select Party\" });\r\n            return;\r\n        }\r\n        const jsonBody = JSON.stringify({\r\n            \"FromDate\": fromdate,\r\n            \"ToDate\": todate,\r\n            \"Unit\": unitDropdown.value,\r\n            \"Party\": isSCMParty ? PartyDropdown.value : _cfunc.loginPartyID()\r\n        });\r\n\r\n        let config = { ReportType: report.Stock, jsonBody }\r\n        if (btnMode === 2) {\r\n            dispatch(stockReport_1_GoButton_API(config))\r\n        }\r\n        else {\r\n            dispatch(getpdfReportdata(StockReport_1_GoBtn_API, config))\r\n        }\r\n    }\r\n\r\n    function fromdateOnchange(e, date) {\r\n        let newObj = { ...headerFilters }\r\n        newObj.fromdate = date\r\n        setHeaderFilters(newObj)\r\n    }\r\n\r\n    function todateOnchange(e, date) {\r\n        let newObj = { ...headerFilters }\r\n        newObj.todate = date\r\n        setHeaderFilters(newObj)\r\n    }\r\n\r\n    const FromDateColumn = (\r\n        <FormGroup className=\" mb-2 row mt-3 \" >\r\n            <Label className=\"col-sm-4 p-2\"\r\n                style={{ width: \"66px\" }}>FromDate</Label>\r\n            <Col sm={7}>\r\n                <C_DatePicker\r\n                    name='fromdate'\r\n                    value={fromdate}\r\n                    onChange={fromdateOnchange}\r\n                />\r\n            </Col>\r\n        </FormGroup>\r\n    );\r\n\r\n    const ToDateColumn = (\r\n        <FormGroup className=\" row mt-3 \" >\r\n            <Label className=\"col-sm-4 p-2\"\r\n                style={{ width: \"60px\" }}>ToDate</Label>\r\n            <Col sm={7}>\r\n                <C_DatePicker\r\n                    nane='todate'\r\n                    value={todate}\r\n                    onChange={todateOnchange}\r\n                />\r\n            </Col>\r\n        </FormGroup>\r\n    );\r\n\r\n    const UnitColumn = (\r\n        <FormGroup className=\" row\" >\r\n            <Label className=\"col-sm-2 p-2\"\r\n                style={{ width: \"60px\" }}>Unit</Label>\r\n            <Col sm={7}>\r\n                <C_Select\r\n                    name=\"Unit\"\r\n                    value={unitDropdown}\r\n                    isDisabled={tableData.length > 0 && true}\r\n                    isSearchable={true}\r\n                    className=\"react-dropdown\"\r\n                    classNamePrefix=\"dropdown\"\r\n                    styles={{\r\n                        menu: provided => ({ ...provided, zIndex: 2 })\r\n                    }}\r\n                    options={BaseUnit_DropdownOptions}\r\n                    onChange={(e) => { setUnitDropdown(e) }}\r\n                />\r\n            </Col>\r\n        </FormGroup>\r\n    );\r\n\r\n    const PartyColumn = (\r\n        <FormGroup className=\" row\" >\r\n            <Label className=\"col-sm-2 p-2\"\r\n                style={{ width: \"60px\" }}>Party</Label>\r\n            <Col sm={7}>\r\n                <C_Select\r\n                    name=\"Party\"\r\n                    value={PartyDropdown}\r\n                    isSearchable={true}\r\n                    className=\"react-dropdown\"\r\n                    classNamePrefix=\"dropdown\"\r\n                    styles={{\r\n                        menu: provided => ({ ...provided, zIndex: 2 })\r\n                    }}\r\n                    options={Party_Option}\r\n                    onChange={(e) => { setPartyDropdown(e) }}\r\n                />\r\n            </Col>\r\n        </FormGroup>\r\n    );\r\n\r\n    const StockProcessColumn = (\r\n        <C_Button\r\n            type=\"button\"\r\n            spinnerColor=\"white\"\r\n            loading={reducers.stockProcessingLoading}\r\n            className=\"btn btn-outline-info border-1 font-size-10 text-center\"\r\n            onClick={() => StockProccessHandler()}\r\n        >\r\n            Stock Process\r\n        </C_Button>\r\n    );\r\n\r\n    const PrintBtnColumn = (\r\n        <C_Button\r\n            type=\"button\"\r\n            spinnerColor=\"white\"\r\n            className=\"btn btn-success\"\r\n            onClick={(e) => excel_And_GoBtnHandler(e, 1)}\r\n        >\r\n            Print\r\n        </C_Button>\r\n    );\r\n\r\n    const ExcelBtnColumn = (\r\n        <C_Button\r\n            type=\"button\"\r\n            spinnerColor=\"white\"\r\n            loading={btnMode === 2 && true}\r\n            className=\"btn btn-primary\"\r\n            onClick={(e) => excel_And_GoBtnHandler(e, 2)}\r\n        >\r\n            Excel Download\r\n        </C_Button>\r\n    );\r\n  \r\n    return (\r\n        <React.Fragment>\r\n            <MetaTags>{_cfunc.metaTagLabel(userPageAccessState)}</MetaTags>\r\n            <div className=\"page-content\">\r\n                <div className=\"px-2 c_card_filter text-black\" >\r\n\r\n                    {isSCMParty ? (\r\n                        <>\r\n                            <div className=\"row\" >\r\n                                <Col sm={4}>{FromDateColumn} </Col>\r\n\r\n                                <Col sm={4}>{ToDateColumn} </Col>\r\n\r\n                                <Col sm={1} className=\"mt-3 ml-5 px-2 p-1\"> {StockProcessColumn} </Col>\r\n                            </div>\r\n\r\n                            <div className=\"row mb-1\">\r\n                                <Col sm={4}>{UnitColumn} </Col>\r\n\r\n                                <Col sm={4}> {PartyColumn}</Col>\r\n\r\n                                <Col sm={1}>{PrintBtnColumn}</Col>\r\n\r\n                                <Col sm={2}> {ExcelBtnColumn} </Col>\r\n                            </div>\r\n                        </>\r\n\r\n                    ) : (\r\n                        <div className=\"row\">\r\n                            <Col sm={2}>{FromDateColumn}</Col>\r\n\r\n                            <Col sm={2}> {ToDateColumn} </Col>\r\n\r\n                            <Col sm={3} className=\"mt-3\"> {UnitColumn}  </Col >\r\n\r\n                            <Col sm={1} className=\"mt-3 ml-5 px-2 p-1\"> {StockProcessColumn}</Col>\r\n\r\n                            <Col sm={1} className=\"mt-3\" >  {PrintBtnColumn}  </Col>\r\n\r\n                            <Col sm={2} className=\"mt-3 \"> {ExcelBtnColumn}  </Col>\r\n\r\n                        </div>\r\n                    )}\r\n\r\n                </div>\r\n\r\n            </div>\r\n            <C_Report />\r\n        </React.Fragment >\r\n    )\r\n}\r\n\r\nexport default StockReport_1;","D:\\Rohit\\Git projects\\Manthan\\src\\Reports\\PurchaseReturnReport\\Page.js",["4308"],"import jsPDF from \"jspdf\";\r\nimport \"jspdf-autotable\";\r\nimport * as style from './ReportStyle';\r\nimport { date_dmy_func, loginSystemSetting } from \"../../components/Common/CommonFunction\";\r\n\r\n\r\nconst pageHeder = (doc, data) => {\r\n    style.pageBorder(doc, data);\r\n    style.pageHeder(doc, data);     //Title\r\n    style.reportHeder1(doc, data);\r\n    style.reportHeder3(doc, data);    //Invoice ID , Date\r\n    return true;\r\n};\r\n\r\nconst reportBody = (doc, data) => {\r\n    style.tableBody(doc, data);\r\n};\r\n\r\nfunction pageFooter(doc, data) {\r\n    style.pageFooter(doc, data);\r\n    if (data.PrintType) {\r\n        style.reportFooterForA5(doc, data);\r\n\r\n    } else {\r\n        style.reportFooter(doc, data);\r\n\r\n    }\r\n\r\n}\r\n\r\nconst ReturnReport = (data) => {\r\n    const systemSetting = loginSystemSetting();\r\n    data[\"PrintType\"] = (systemSetting.A4Print === \"1\" ? false : true)\r\n    if (systemSetting.A4Print === \"1\") {\r\n        var doc = new jsPDF('p', 'pt', 'a4');\r\n    } else {\r\n        var doc = new jsPDF('l', 'pt', 'a5');\r\n    }\r\n    pageHeder(doc, data);\r\n    reportBody(doc, data);\r\n    pageFooter(doc, data);\r\n\r\n    doc.setProperties({\r\n        title: `Return Report (${date_dmy_func(data.ReturnDate)}) `\r\n    });\r\n    \r\n    function generateSaveAndOpenPDFReport() {\r\n        const pdfUrl = URL.createObjectURL(doc.output('blob'));\r\n        const options = { filename: \"ReturnReport\" }\r\n        window.open(pdfUrl, options);\r\n    }\r\n    generateSaveAndOpenPDFReport();\r\n}\r\n\r\n\r\nexport default ReturnReport;","D:\\Rohit\\Git projects\\Manthan\\src\\Reports\\PurchaseReturnReport\\ReportStyle.js",["4309","4310","4311"],"\r\nimport { CurrentTime, compareGSTINState, currentDate_dmy, date_dmy_func } from \"../../components/Common/CommonFunction\";\r\nimport { numberWithCommas, toWords } from \"../Report_common_function\";\r\nimport * as table from './TableData'\r\nimport { url } from \"../../routes\";\r\n\r\n\r\nlet initial_y = 0\r\n\r\n// export const pageBorder = (doc) => {\r\n\r\n//     doc.setDrawColor(0, 0, 0);\r\n//     doc.line(570, 16, 30, 16);//horizontal line (Top)\r\n//     doc.line(30, 815, 30, 16);//vertical line (left)\r\n//     doc.line(570, 815, 570, 16);//vertical line (Right)\r\n//     doc.line(570, 815, 30, 815);//horizontal line (Bottom)   \r\n// }\r\n\r\n\r\n\r\nexport const pageBorder = (doc, data) => {\r\n\r\n    doc.setDrawColor(0, 0, 0);\r\n    doc.line(570, 16, 30, 16);//horizontal line (Top)\r\n    doc.line(30, data.PrintType ? 379 : 815, 30, 16);//vertical line (left)\r\n    doc.line(570, data.PrintType ? 379 : 815, 570, 16);//vertical line (Right)\r\n    doc.line(570, data.PrintType ? 379 : 815, 30, data.PrintType ? 379 : 815);//horizontal line (Bottom)   \r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport const pageHeder = (doc, data) => {\r\n    doc.setDrawColor(0, 0, 0);\r\n    doc.line(408, 50, 408, 16);//vertical right 1\r\n    doc.line(570, 50, 30, 50)  //horizontal line 1 billby upper for repeat header\r\n    doc.addFont(\"Arial\", 'Normal')\r\n    doc.setFont('Arial')\r\n    doc.setFontSize(18)\r\n    if (data.subPageMode === url.PURCHASE_RETURN_LIST) {\r\n        doc.text(' PURCHASE RETURN', 160, 40,)\r\n    } else {\r\n        doc.text(' SALES RETURN', 160, 40,)\r\n\r\n    }\r\n}\r\n\r\nexport const reportHeder1 = (doc, data) => {\r\n\r\n    doc.setFont('Tahoma')\r\n    doc.setFontSize(11)\r\n    doc.setFont(undefined, 'bold')\r\n    doc.text(\"Return by\", 110, 63)\r\n    doc.text('Return to', 390, 63)\r\n\r\n    doc.setDrawColor(0, 0, 0);\r\n    doc.line(570, 50, 30, 50) //horizontal line 1 ReturnBy And ReturnTo upper\r\n    doc.line(570, 67, 30, 67);//horizontal line 1 ReturnBy And ReturnTo Below\r\n\r\n    var BilledByStyle = {\r\n\r\n        didDrawCell: (data1) => {\r\n\r\n            const rowIdx = data1.row.index;\r\n            const colIdx = data1.column.index;\r\n            if (rowIdx === 0 && colIdx === 0) {\r\n                let x = data1.cursor.x + 2\r\n                let y = data1.cursor.y + 8\r\n                doc.setFontSize(8)\r\n                doc.setFont(undefined, 'bold')\r\n                doc.text('Customer: ', x, y)\r\n            };\r\n            if (rowIdx === 1 && colIdx === 0) {\r\n\r\n                let x = data1.cursor.x + 2\r\n                let y = data1.cursor.y + 8\r\n                doc.setFontSize(8)\r\n                doc.setFont(undefined, 'bold')\r\n                doc.text('Address: ', x, y)\r\n            };\r\n            if (rowIdx === 2 && colIdx === 0) {\r\n\r\n                let x = data1.cursor.x + 2\r\n                let y = data1.cursor.y + 8\r\n                doc.setFontSize(8)\r\n                doc.setFont(undefined, 'bold')\r\n                doc.text('State: ', x, y)\r\n            };\r\n            if (rowIdx === 3 && colIdx === 0) {\r\n\r\n                let x = data1.cursor.x + 2\r\n                let y = data1.cursor.y + 8\r\n                doc.setFontSize(8)\r\n                doc.setFont(undefined, 'bold')\r\n                doc.text('GSTIN: ', x, y)\r\n            };\r\n            if (rowIdx === 4 && colIdx === 0) {\r\n\r\n                let x = data1.cursor.x + 2\r\n                let y = data1.cursor.y + 8\r\n                doc.setFontSize(8)\r\n                doc.setFont(undefined, 'bold')\r\n                doc.text('FSSAI No: ', x, y)\r\n            };\r\n            if (rowIdx === 5 && colIdx === 0) {\r\n\r\n                let x = data1.cursor.x + 2\r\n                let y = data1.cursor.y + 8\r\n                doc.setFontSize(8)\r\n                doc.setFont(undefined, 'bold')\r\n                doc.text('Mobile No: ', x, y)\r\n            };\r\n\r\n        },\r\n        margin: {\r\n            top: 45, left: 30, right: 35,\r\n        },\r\n        showHead: 'always',\r\n        theme: 'plain',\r\n        styles: {\r\n            overflow: 'linebreak',\r\n            fontSize: 8,\r\n            height: 0,\r\n        },\r\n        bodyStyles: {\r\n            columnWidth: 'wrap',\r\n            textColor: [30, 30, 30],\r\n            cellPadding: data.PrintType ? 1 : 2,\r\n            fontSize: 8,\r\n            fontStyle: 'normal',\r\n            lineColor: [0, 0, 0]\r\n        },\r\n        columnStyles: {\r\n            0: {\r\n                valign: \"top\",\r\n                columnWidth: 260,\r\n                halign: 'lfet',\r\n            }\r\n        },\r\n        tableLineColor: \"black\",\r\n\r\n        startY: 67\r\n    };\r\n\r\n    var BilledToStyle = {\r\n        didDrawCell: (data1) => {\r\n\r\n            const rowIdx = data1.row.index;\r\n            const colIdx = data1.column.index;\r\n            if (rowIdx === 0 && colIdx === 0) {\r\n                let x = data1.cursor.x + 2\r\n                let y = data1.cursor.y + 8\r\n                doc.setFontSize(8)\r\n                doc.setFont(undefined, 'bold')\r\n                doc.text('Party: ', x, y)\r\n            };\r\n            if (rowIdx === 1 && colIdx === 0) {\r\n\r\n                let x = data1.cursor.x + 2\r\n                let y = data1.cursor.y + 8\r\n                doc.setFontSize(8)\r\n                doc.setFont(undefined, 'bold')\r\n                doc.text('Address: ', x, y)\r\n            };\r\n            if (rowIdx === 2 && colIdx === 0) {\r\n\r\n                let x = data1.cursor.x + 2\r\n                let y = data1.cursor.y + 8\r\n                doc.setFontSize(8)\r\n                doc.setFont(undefined, 'bold')\r\n                doc.text('State: ', x, y)\r\n            };\r\n            if (rowIdx === 3 && colIdx === 0) {\r\n\r\n                let x = data1.cursor.x + 2\r\n                let y = data1.cursor.y + 8\r\n                doc.setFontSize(8)\r\n                doc.setFont(undefined, 'bold')\r\n                doc.text('GSTIN: ', x, y)\r\n            };\r\n            if (rowIdx === 4 && colIdx === 0) {\r\n\r\n                let x = data1.cursor.x + 2\r\n                let y = data1.cursor.y + 8\r\n                doc.setFontSize(8)\r\n                doc.setFont(undefined, 'bold')\r\n                doc.text('FSSAI No: ', x, y)\r\n            };\r\n            if (rowIdx === 5 && colIdx === 0) {\r\n\r\n                let x = data1.cursor.x + 2\r\n                let y = data1.cursor.y + 8\r\n                doc.setFontSize(8)\r\n                doc.setFont(undefined, 'bold')\r\n                doc.text('Mobile No: ', x, y)\r\n            };\r\n\r\n        },\r\n        margin: {\r\n            top: 45, left: 292, right: 35,\r\n        },\r\n        showHead: 'always',\r\n        theme: 'plain',\r\n        styles: {\r\n            overflow: 'linebreak',\r\n            fontSize: 8,\r\n            height: 0,\r\n        },\r\n        bodyStyles: {\r\n            columnWidth: 'wrap',\r\n            textColor: [30, 30, 30],\r\n            cellPadding: data.PrintType ? 1 : 2,\r\n            fontSize: 8,\r\n            fontStyle: 'normal',\r\n            lineColor: [0, 0, 0]\r\n        },\r\n        columnStyles: {\r\n            0: {\r\n                valign: \"top\",\r\n                columnWidth: 270,\r\n                halign: 'lfet',\r\n            },\r\n        },\r\n        tableLineColor: \"black\",\r\n        startY: 67,\r\n    };\r\n\r\n\r\n\r\n    const priLength = () => {\r\n        \r\n        let final_y = doc.previousAutoTable.finalY\r\n        if (final_y > initial_y) {\r\n            initial_y = final_y\r\n        }\r\n\r\n    }\r\n\r\n    doc.autoTable(table.BilledBy, table.ReturnByRow(data), BilledByStyle);\r\n    priLength()\r\n\r\n    doc.autoTable(table.BilledTo, table.ReturnToRow(data), BilledToStyle);\r\n    priLength()\r\n\r\n}\r\n\r\n\r\n\r\n\r\nexport const reportHeder3 = (doc, data) => {\r\n    var date = date_dmy_func(data.ReturnDate)\r\n    doc.setFont('Tahoma')\r\n    doc.setFontSize(10)\r\n    doc.line(570, 33, 408, 33) //horizontal line 1 billby upper\r\n    doc.setFont(undefined, 'bold')\r\n    doc.text(`Return No:   ${data.FullReturnNumber}`, 415, 27) //Invoice Id\r\n    doc.text(`Return Date: ${date}`, 415, 43) //Invoice date\r\n\r\n}\r\n\r\n\r\nexport const reportFooter = (doc, data) => {\r\n\r\n    let stringNumber = toWords(Number(data.GrandTotal))\r\n\r\n    doc.setDrawColor(0, 0, 0);\r\n    doc.line(570, 730, 30, 730);//horizontal line Footer 1\r\n    doc.line(435, 745, 30, 745);//horizontal line Footer 2\r\n    doc.line(435, 775, 30, 775);//horizontal line Footer 3\r\n    doc.line(435, 795, 30, 795);//horizontal line Footer 3\r\n    doc.line(435, 730, 435, 815);//vertical right Sub Total   \r\n    doc.setFont('Tahoma')\r\n\r\n    const a = data.ReturnItems.map((data) => ({\r\n\r\n        CGST: Number(data.CGST),\r\n        SGST: Number(data.SGST),\r\n        BasicAmount: Number(data.BasicAmount),\r\n        Discount: Number(data.DiscountAmount),\r\n        IGST: Number(data.IGST)\r\n    }));\r\n    var totalCGST = 0;\r\n    var totalSGST = 0;\r\n    var TotalBasicAmount = 0;\r\n    var TotalDiscount = 0\r\n    var totalICGST = 0\r\n    a.forEach(arg => {\r\n        totalCGST += arg.CGST;\r\n        totalSGST += arg.SGST;\r\n        TotalBasicAmount += arg.BasicAmount;\r\n        TotalDiscount += arg.Discount;\r\n        totalICGST += arg.IGST\r\n\r\n    });\r\n    const TotalGST = totalCGST + totalSGST;\r\n    doc.setFontSize(8)\r\n\r\n\r\n\r\n    doc.text(`Total Basic:`, 440, 738,)\r\n    doc.text(`${numberWithCommas(Number(TotalBasicAmount).toFixed(2))}`, 567, 738, 'right')\r\n\r\n    doc.text(`Total Disc:`, 440, 748,)\r\n    doc.text(` ${numberWithCommas(Number(TotalDiscount).toFixed(2))}`, 567, 748, 'right')\r\n\r\n    doc.text(`Total CGST:`, 440, 758)\r\n    doc.text(`${numberWithCommas(Number(totalCGST).toFixed(2))}`, 567, 758, 'right')\r\n\r\n    doc.text(`Total SGST:`, 440, 768,)\r\n    doc.text(`${numberWithCommas(Number(totalSGST).toFixed(2))}`, 567, 768, 'right')\r\n\r\n    doc.text(`Total GST:`, 440, 778,)\r\n    doc.text(` ${numberWithCommas(Number(TotalGST).toFixed(2))}`, 567, 778, 'right')\r\n\r\n    doc.text(`Round Off:`, 440, 788,)\r\n    doc.text(` ${numberWithCommas(Number(data.RoundOffAmount).toFixed(2))}`, 567, 788, 'right')\r\n\r\n    doc.setFont(undefined, 'Normal')\r\n    doc.setFontSize(10)\r\n    doc.setFont(undefined, 'bold')\r\n    doc.text(`Total Amount :`, 440, 812,)\r\n    const GrandTotal = Number(data.GrandTotal)\r\n\r\n    const Total = numberWithCommas((GrandTotal).toFixed(2))\r\n    doc.text(`${Total}`, 567, 812, 'right')\r\n    doc.setFont(undefined, 'Normal')\r\n    doc.setFont('Tahoma')\r\n    doc.setFontSize(9)\r\n    doc.setFont('Tahoma')\r\n    doc.setFontSize(8)\r\n    doc.setFont(\"Arimo\");\r\n    doc.text(`I/we hearby certify that food/foods mentioned in this invoice is/are warranted to be\r\n         of the nature and quantity which it/these purports to be `, 34, 782)\r\n    doc.setFontSize(10)\r\n    doc.text(`Signature `, 280, 810,)\r\n    doc.text(`Prepared by :${data.PartyName} `, 35, 810,)\r\n    doc.setFontSize(8)\r\n\r\n\r\n    doc.setFont(undefined, 'bold')\r\n    doc.text(`Rupees:`, 33, 740,)\r\n    doc.addFont(\"Arial\", 'Normal')\r\n    doc.setFont(\"Arimo\");\r\n\r\n    doc.text(`${stringNumber}`, 65, 740,)\r\n\r\n    let ReturnReasonDetails = {\r\n        margin: {\r\n            top: 45, left: 30, right: 35,\r\n        },\r\n        showHead: 'always',\r\n        theme: 'plain',\r\n        styles: {\r\n            overflow: 'linebreak',\r\n            fontSize: 8,\r\n            height: 0,\r\n        },\r\n        bodyStyles: {\r\n            columnWidth: 'wrap',\r\n            textColor: [30, 30, 30],\r\n            cellPadding: 4,\r\n            fontSize: 8,\r\n            fontStyle: 'bold',\r\n            lineColor: [0, 0, 0]\r\n        },\r\n        columnStyles: {\r\n            0: {\r\n                valign: \"top\",\r\n                columnWidth: 250,\r\n                halign: 'lfet',\r\n            },\r\n\r\n        },\r\n        tableLineColor: \"black\",\r\n\r\n        startY: 745,\r\n\r\n    };\r\n\r\n    doc.autoTable(table.Return, table.ReturnReason(data), ReturnReasonDetails);\r\n\r\n}\r\n\r\n\r\nexport const reportFooterForA5 = (doc, data) => {\r\n    let stringNumber = toWords(Number(data.GrandTotal))\r\n    doc.setDrawColor(0, 0, 0);\r\n    doc.line(435, 308, 30, 308);//horizontal line Footer 3 Ruppe section\r\n    doc.line(570, 295, 30, 295);//horizontal line Footer 2\r\n    doc.line(435, 295, 435, 379);  //footer vartical line\r\n    doc.setFont('Tahoma')\r\n    doc.line(435, 340, 30, 340);//horizontal line (Bottom)\r\n    doc.line(435, 362, 30, 362); //horizontal line Sginature upper line\r\n    doc.line(570, 365, 435, 365); //horizontal line Sginature upper line \r\n\r\n\r\n\r\n\r\n\r\n\r\n    const a = data.ReturnItems.map((data) => ({\r\n\r\n        CGST: Number(data.CGST),\r\n        SGST: Number(data.SGST),\r\n        BasicAmount: Number(data.BasicAmount),\r\n        Discount: Number(data.DiscountAmount),\r\n        IGST: Number(data.IGST)\r\n    }));\r\n    var totalCGST = 0;\r\n    var totalSGST = 0;\r\n    var TotalBasicAmount = 0;\r\n    var TotalDiscount = 0\r\n    var totalICGST = 0\r\n    a.forEach(arg => {\r\n        totalCGST += arg.CGST;\r\n        totalSGST += arg.SGST;\r\n        TotalBasicAmount += arg.BasicAmount;\r\n        TotalDiscount += arg.Discount;\r\n        totalICGST += arg.IGST\r\n\r\n    });\r\n    const TotalGST = totalCGST + totalSGST;\r\n    doc.setFontSize(8)\r\n\r\n\r\n\r\n\r\n    doc.text(`Total Basic:`, 440, 302,)\r\n    doc.text(`${numberWithCommas(TotalBasicAmount.toFixed(2))}`, 567, 302, 'right')\r\n\r\n    doc.text(`Total Disc:`, 440, 312,)\r\n    doc.text(`${numberWithCommas(TotalDiscount.toFixed(2))}`, 567, 312, 'right')\r\n\r\n    doc.text(`Total CGST:`, 440, 322)\r\n    doc.text(`${numberWithCommas(totalCGST.toFixed(2))}`, 567, 322, 'right')\r\n\r\n    doc.text(`Total SGST:`, 440, 332,)\r\n    doc.text(`${numberWithCommas(totalSGST.toFixed(2))}`, 567, 332, 'right')\r\n\r\n    doc.text(`Total GST:`, 440, 342,)\r\n    doc.text(` ${numberWithCommas(TotalGST.toFixed(2))}`, 567, 342, 'right')\r\n\r\n\r\n\r\n    doc.text(`Round Off:`, 440, 352,)\r\n    doc.text(` ${Number(data.RoundOffAmount).toFixed(2)}`, 567, 352, 'right')\r\n\r\n    doc.setFont(undefined, 'Normal')\r\n    doc.setFontSize(10)\r\n    doc.setFont(undefined, 'bold')\r\n    doc.text(`Total Amount :`, 439, 375,)\r\n    const Total = numberWithCommas(Number(data.GrandTotal).toFixed(2))\r\n    doc.text(`${Total}`, 567, 376, 'right')\r\n    doc.setFont(undefined, 'Normal')\r\n    doc.setFont('Tahoma')\r\n    doc.setFontSize(9)\r\n    doc.setFont('Tahoma')\r\n    doc.setFontSize(8)\r\n    doc.text(`Prepared by `, 35, 785,)\r\n    doc.text(`Received By `, 180, 785,)\r\n    doc.setFontSize(10)\r\n    doc.text(`${data.PartyName} `, 390, 785,)\r\n    doc.setFontSize(10)\r\n    doc.text(`${data.CustomerName} `, 140, 811,)\r\n    doc.setFontSize(9)\r\n\r\n\r\n    doc.setFont(\"Arimo\");\r\n    doc.text(`I/we hearby certify that food/foods mentioned in this invoice is/are warranted to be\r\n of the nature and quantity which it/these purports to be `, 34, 348,)\r\n    doc.text(`Signature `, 280, 372,)\r\n    doc.text(`Prepared by :${data.PartyName} `, 35, 372,)\r\n\r\n    doc.setFont(undefined, 'bold')\r\n    doc.text(`Rupees:`, 33, 305,)\r\n    doc.addFont(\"Arial\", 'Normal')\r\n    doc.setFontSize(8)\r\n\r\n    doc.text(`${stringNumber}`, 65, 305,)\r\n\r\n    let ReturnReasonDetails = {\r\n        margin: {\r\n            top: 45, left: 30, right: 35,\r\n        },\r\n        showHead: 'always',\r\n        theme: 'plain',\r\n        styles: {\r\n            overflow: 'linebreak',\r\n            fontSize: 8,\r\n            height: 0,\r\n        },\r\n        bodyStyles: {\r\n            columnWidth: 'wrap',\r\n            textColor: [30, 30, 30],\r\n            cellPadding: 4,\r\n            fontSize: 8,\r\n            fontStyle: 'bold',\r\n            lineColor: [0, 0, 0]\r\n        },\r\n        columnStyles: {\r\n            0: {\r\n                valign: \"top\",\r\n                columnWidth: 250,\r\n                halign: 'lfet',\r\n            },\r\n\r\n        },\r\n        tableLineColor: \"black\",\r\n\r\n        startY: 308,\r\n\r\n    };\r\n\r\n    doc.autoTable(table.Return, table.ReturnReason(data), ReturnReasonDetails);\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport const tableBody = (doc, data) => {\r\n    var options = {\r\n        didDrawCell: (data1) => {\r\n\r\n            const rowIdx = data1.row.index;\r\n            const colIdx = data1.column.index;\r\n            if (rowIdx === 0 && colIdx === 8) {\r\n                if (data1.row.cells[8].raw === \"          CGST           %        Amount\") {\r\n\r\n                    const cellWidth = data1.cell.width;\r\n                    const cellHeight = data1.cell.height;\r\n                    const startX = data1.cell.x;\r\n                    const startY = data1.cell.y + cellHeight / 2;\r\n                    const endX = startX + cellWidth;\r\n                    const endY = startY;\r\n\r\n                    const startXVertical = data1.cell.x + cellWidth / 2; // X-coordinate at the middle of the cell\r\n                    const startY1vertical = data1.cell.y + 9;\r\n                    const endYvertical = startY + cellHeight;\r\n\r\n                    doc.line(startXVertical - 5, startY1vertical + 1, startXVertical - 5, endYvertical + 1); // Draw a vertical line\r\n                    doc.line(startX, startY, endX, endY);\r\n                }\r\n            }\r\n            if (rowIdx === 0 && colIdx === 10) {\r\n                if (data1.row.cells[10].raw === \"          SGST           %        Amount\") {\r\n\r\n                    const cellWidth = data1.cell.width;\r\n                    const cellHeight = data1.cell.height;\r\n                    const startX = data1.cell.x;\r\n                    const startY = data1.cell.y + cellHeight / 2;\r\n                    const endX = startX + cellWidth;\r\n                    const endY = startY;\r\n\r\n                    const startXVertical = data1.cell.x + cellWidth / 2; // X-coordinate at the middle of the cell\r\n                    const startY1vertical = data1.cell.y + 9;\r\n                    const endYvertical = startY + cellHeight;\r\n\r\n                    doc.line(startXVertical - 5, startY1vertical + 1, startXVertical - 5, endYvertical + 1); // Draw a vertical line\r\n                    doc.line(startX, startY, endX, endY);\r\n                }\r\n            }\r\n\r\n\r\n\r\n\r\n\r\n        },\r\n        didParseCell: (data1) => {\r\n            if (data1.row.cells[9].raw === \"isaddition\") {\r\n                data1.row.cells[1].colSpan = 5\r\n                // data1.row.cells[3].colSpan = 5\r\n                data1.row.cells[8].colSpan = 2\r\n                data1.row.cells[10].colSpan = 2\r\n\r\n                data1.row.cells[1].styles.fontSize = 7\r\n                data1.row.cells[1].styles.halign = \"right\"    // Alignment for  cgst and Total in spanrow\r\n\r\n                data1.row.cells[8].styles.fontSize = 7\r\n                data1.row.cells[7].styles.fontSize = 7\r\n                data1.row.cells[10].styles.fontSize = 7\r\n                data1.row.cells[12].styles.fontSize = 7\r\n                data1.row.cells[1].styles.fontStyle = \"bold\"\r\n                data1.row.cells[8].styles.fontStyle = \"bold\"\r\n                data1.row.cells[7].styles.fontStyle = \"bold\"\r\n                data1.row.cells[10].styles.fontStyle = \"bold\"\r\n                data1.row.cells[12].styles.fontStyle = \"bold\"\r\n\r\n            }\r\n\r\n            if (data1.row.cells[1].raw === \"Item Name\") {\r\n\r\n                data1.row.cells[8].colSpan = 2\r\n                data1.row.cells[10].colSpan = 2\r\n            }\r\n\r\n        },\r\n        margin: {\r\n            left: 30, right: 25, top: 63,\r\n        },\r\n        theme: 'grid',\r\n        headerStyles: {\r\n            cellPadding: 2,\r\n            lineWidth: 0.5,\r\n            valign: 'top',\r\n            fontStyle: 'bold',\r\n            halign: 'center',    //'center' or 'right'\r\n            fillColor: \"white\",\r\n            textColor: [0, 0, 0], //Black     \r\n            fontSize: 7,\r\n            rowHeight: 10,\r\n            lineColor: \"black\"\r\n        },\r\n        bodyStyles: {\r\n            textColor: [30, 30, 30],\r\n            cellPadding: 3,\r\n            fontSize: 7,\r\n            columnWidth: 'wrap',\r\n            lineColor: [0, 0, 0],\r\n        },\r\n        columnStyles: {\r\n            0: {\r\n                valign: \"top\",\r\n                fontSize: 6,\r\n                columnWidth: 15,\r\n            },\r\n            1: {\r\n                valign: \"top\",\r\n                columnWidth: 137,\r\n            },\r\n            2: {\r\n                columnWidth: 50,\r\n                halign: 'right',\r\n            },\r\n            3: {\r\n                columnWidth: 28,\r\n                halign: 'right',\r\n            },\r\n            4: {\r\n                columnWidth: 33,\r\n                halign: 'right',\r\n            },\r\n            5: {\r\n                columnWidth: 35,\r\n                halign: 'right',\r\n            },\r\n            6: {\r\n                columnWidth: 35,\r\n                halign: 'right',\r\n            },\r\n\r\n            7: {\r\n                columnWidth: 45,\r\n                halign: 'right',\r\n            },\r\n            8: {\r\n                columnWidth: 24,\r\n                halign: 'right',\r\n            },\r\n            9: {\r\n                columnWidth: 34,\r\n                halign: 'right',\r\n            },\r\n            10: {\r\n                columnWidth: 24,\r\n                halign: 'right',\r\n            },\r\n            11: {\r\n                columnWidth: 34,\r\n                halign: 'right',\r\n            },\r\n            12: {\r\n                columnWidth: 46,\r\n                halign: 'right',\r\n            },\r\n        },\r\n        tableLineColor: \"black\",\r\n        startY: initial_y,\r\n    };\r\n\r\n    doc.setLineWidth(0.5);\r\n\r\n    doc.line(292, initial_y, 292, 50);//vertical line between billby billto\r\n    doc.line(570, initial_y, 30, initial_y) //horizontal line 1 billby upper\r\n\r\n    doc.autoTable(table.columns, table.Rows(data), options,);\r\n    const optionsTable4 = {\r\n        margin: {\r\n            left: 30, right: 30, bottom: 140\r\n        },\r\n    };\r\n    doc.autoTable(optionsTable4);\r\n\r\n}\r\n\r\nexport const pageFooter = (doc, data) => {\r\n\r\n    const pageCount = doc.internal.getNumberOfPages()\r\n    doc.setFont('helvetica', 'Normal')\r\n    doc.setFontSize(8)\r\n    for (var i = 1; i <= pageCount; i++) {\r\n        doc.setPage(i)\r\n        pageHeder(doc, data)\r\n        pageBorder(doc, data)\r\n        reportHeder3(doc, data)\r\n        doc.setFont('helvetica', 'Normal')\r\n        if (data.PrintType) {\r\n            doc.text('Page' + String(i) + ' of ' + String(pageCount), 500, 390,)\r\n            doc.text('Print Date :' + String(currentDate_dmy) + ' Time ' + String(CurrentTime()), 30, 390,)\r\n        } else {\r\n            doc.text('Page ' + String(i) + ' of ' + String(pageCount), 520, 828,)\r\n            doc.text('Print Date :' + String(currentDate_dmy) + ' Time ' + String(CurrentTime()), 30, 828,)\r\n        }\r\n\r\n    }\r\n}\r\n\r\n// original","D:\\Rohit\\Git projects\\Manthan\\src\\Reports\\PurchaseReturnReport\\TableData.js",["4312","4313"],"import { numberWithCommas } from \"../Report_common_function\";\r\n\r\n\r\nexport const columns = [\r\n    \"SR\",\r\n    \"Item Name\",\r\n    \"Quantity (UOM)\",\r\n    \"MRP\",\r\n    \"Rate\",\r\n    \"Discount\",\r\n    \"Discount Amount \",\r\n    \"Taxable Amount\",\r\n    \"          CGST           %        Amount\",\r\n    \"CGST Amount\",\r\n    \"          SGST           %        Amount\",\r\n    \"SGST Amount\",\r\n    \"Amount\",\r\n];\r\n\r\n\r\n\r\n\r\nexport const Footercolumn = [\r\n    \"\",\r\n]\r\nexport const Return = [\r\n    \"Return\",\r\n]\r\nexport const BilledBy = [\r\n    \"Billed by\",\r\n]\r\nexport const BilledTo = [\r\n    \"Billed by\",\r\n]\r\nexport const DetailsOfTransport = [\r\n    \"Billed by\",\r\n]\r\n\r\nexport const Bankcolumn = [\r\n    \"\",\r\n    \"\",\r\n    \"\",\r\n]\r\n\r\nexport const Rows = (data) => {\r\n\r\n    const { ReturnItems = [] } = data\r\n    ReturnItems.sort((firstItem, secondItem) => firstItem.GSTPercentage - secondItem.GSTPercentage);\r\n    const returnArr = [];\r\n    let Gst = 0\r\n    let totalBasicAmount = 0\r\n    let totalCGst = 0\r\n    let totalSGst = 0\r\n    let totalAmount = 0\r\n    let totalQuantity = 0\r\n    let SrNO = 1\r\n    let TotalGst = 0\r\n    let GSTPercentage = 0\r\n\r\n    const groupedItems = ReturnItems.reduce((accumulator, currentItem) => {\r\n\r\n        const { HSNCode, ItemName, Rate, Discount, CGST, SGST, Amount, DiscountAmount, BasicAmount, Quantity, UnitName, MRPValue, CGSTPercentage, SGSTPercentage, GSTPercentage, BatchCode, BatchDate, DiscountType, PrimaryUnitName } = currentItem;\r\n        const key = ItemName + '_' + MRPValue + \"_\" + Discount;\r\n        if (accumulator[key]) {\r\n            accumulator[key].DiscountAmount += Number(DiscountAmount);\r\n            accumulator[key].Quantity += Number(Quantity);\r\n            accumulator[key].BasicAmount += Number(BasicAmount);\r\n            accumulator[key].CGST += Number(CGST);\r\n            accumulator[key].SGST += Number(SGST);\r\n            accumulator[key].Amount += Number(Amount);\r\n            accumulator[key].BatchCode += BatchCode;\r\n            accumulator[key].BatchDate += BatchDate;\r\n            accumulator[key].quantityString += ` ,  ${BatchCode} ${BatchDate} `;\r\n        } else {\r\n            accumulator[key] = {\r\n                ItemName, HSNCode,\r\n                MRPValue, DiscountType, Rate, Discount, CGST: Number(CGST), SGST: Number(SGST), Amount: Number(Amount), DiscountAmount: Number(DiscountAmount), BasicAmount: Number(BasicAmount), Quantity: Number(Quantity), UnitName, CGSTPercentage, SGSTPercentage, GSTPercentage, BatchDate, BatchCode: BatchCode, BatchDate: BatchDate, quantityString: `  ${BatchCode}  ${BatchDate}`, PrimaryUnitName\r\n            };\r\n        }\r\n        return accumulator;\r\n    }, {});\r\n\r\n    Object.values(groupedItems).forEach((element, key) => {\r\n\r\n        const tableitemRow = [\r\n            SrNO++,\r\n            ` ${element.ItemName}`,\r\n            `${Number(element.Quantity).toFixed(2)} ${element.UnitName}`,\r\n            `${numberWithCommas(Number(element.MRPValue).toFixed(2))}`,\r\n            `${numberWithCommas(Number(element.Rate).toFixed(2))}`,\r\n            element.Discount === null ? \"\" : `${element.Discount} ${element.DiscountType === \"1\" ? \"Rs\" : \"%\"}`,\r\n            `${numberWithCommas(Number(element.DiscountAmount).toFixed(2))}`,\r\n            `${numberWithCommas(Number(element.BasicAmount).toFixed(2))}`,\r\n            `${Number(element.CGSTPercentage).toFixed(1)}%`,\r\n            `${numberWithCommas(Number(element.CGST).toFixed(2))}`,\r\n            `${Number(element.SGSTPercentage).toFixed(1)}%`,\r\n            `${numberWithCommas(Number(element.SGST).toFixed(2))}`,\r\n            `${numberWithCommas(Number(element.Amount).toFixed(2))}`,\r\n        ];\r\n\r\n        function totalLots() {\r\n            totalQuantity = Number(totalQuantity) + Number(element.Quantity)\r\n            totalCGst = Number(totalCGst) + Number(element.CGST)\r\n            totalSGst = Number(totalSGst) + Number(element.SGST)\r\n            totalAmount = Number(totalAmount) + Number(element.Amount)\r\n            totalBasicAmount = Number(totalBasicAmount) + Number(element.BasicAmount)\r\n            TotalGst = totalCGst + totalSGst;\r\n            GSTPercentage = Number(element.CGSTPercentage) + Number(element.SGSTPercentage)\r\n            let cgst = data[\"tableTot\"].TotalCGst\r\n            return ({ TotalCGst: Number(totalCGst) + Number(cgst) })\r\n\r\n        };\r\n\r\n\r\n        function totalrow() {\r\n\r\n            return [\r\n                \"\",\r\n                ` GST ${(parseFloat(GSTPercentage))}%  Total:${numberWithCommas(Number(TotalGst).toFixed(2))} `,\r\n                \" \",\r\n                ``,\r\n                \"\",\r\n                \"\",\r\n                ``,\r\n                `${numberWithCommas(Number(totalBasicAmount).toFixed(2))}`,\r\n                `${numberWithCommas(Number(totalCGst).toFixed(2))}`,\r\n                \"isaddition\",\r\n                `${numberWithCommas(Number(totalSGst).toFixed(2))}`,\r\n                \"\",\r\n                `${numberWithCommas(Number(totalAmount).toFixed(2))}`,\r\n            ];\r\n        };\r\n        const BatchRow = [\r\n            `Batch:  ${element.quantityString} `,\r\n            `Batch`,\r\n            \" \",\r\n            ``,\r\n            \"\",\r\n            \"\",\r\n            \"\",\r\n            \"\",\r\n            ``,\r\n            \"\",\r\n            ``,\r\n            \"\",\r\n            ``,\r\n        ]\r\n\r\n        if (Gst === 0) { Gst = element.GSTPercentage };\r\n        let aa = { TotalCGst: 0, totalSGst: 0 }\r\n        if (data[\"tableTot\"] === undefined) { data[\"tableTot\"] = aa }\r\n\r\n        if ((Gst === element.GSTPercentage)) {\r\n            data[\"tableTot\"] = totalLots()\r\n            returnArr.push(tableitemRow)\r\n\r\n        }\r\n\r\n\r\n        else {\r\n            returnArr.push(totalrow());\r\n            returnArr.push(tableitemRow);\r\n            totalBasicAmount = 0\r\n            totalCGst = 0\r\n            totalSGst = 0\r\n            totalAmount = 0\r\n            totalQuantity = 0\r\n\r\n            data[\"tableTot\"] = totalLots()\r\n            Gst = element.GSTPercentage;\r\n        }\r\n        if (key === Object.keys(groupedItems).length - 1) {\r\n            returnArr.push(totalrow());\r\n        }\r\n    })\r\n    return returnArr;\r\n}\r\n\r\n\r\nexport const ReturnByRow = (data) => {\r\n\r\n    var ReturnByArray = [\r\n        [`                    ${data.CustomerName}`],\r\n        [`                 ${data.CustomerAddress}`],\r\n        [`            ${data.CustomerState}`],\r\n        [`              ${data.CustomerGSTIN}`,],\r\n        [`                   ${data.CustomerFSSAINo}`],\r\n        [`                   ${data.CustomerMobileNo}`],\r\n    ]\r\n    return ReturnByArray;\r\n}\r\nexport const ReturnToRow = (data) => {\r\n\r\n    var ReturnToArray = [\r\n        [`             ${data.PartyName}`],\r\n        [`                  ${data.PartyAddress}`],\r\n        [`            ${data.PartyState}`],\r\n        [`               ${data.PartyGSTIN}`],\r\n        [`                   ${data.PartyFSSAINo}`],\r\n        [`                   ${data.PartyMobileNo}`],\r\n    ]\r\n\r\n    return ReturnToArray;\r\n}\r\n\r\n\r\n\r\nexport const ReturnReason = (data) => {\r\n\r\n    var ReturnReasonArray = [\r\n        [`Return Reason :${data.ReturnReason === null ? \"\" : data.ReturnReason}`],\r\n    ]\r\n\r\n    return ReturnReasonArray;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\components\\Common\\AfterLoginApiFunc.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Utilites\\PartyDrodown\\saga.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Utilites\\PartyDrodown\\reducer.js",["4314"],"import { COMMON_PARTY_DROPDOWN, COMMON_PARTY_DROPDOWN_SUCCESS, COMMON_PARTY_DROP_SELECT_ACTION, COMMON_PARTY_DROP_SELECT_ACTION_SUCCESS } from \"./actionType\"\r\n\r\nconst INIT_STATE = {\r\n    commonPartyDropdown: [],\r\n    partyDropdownLoading: false,\r\n    commonPartyDropSelect: { value: 0, label: \"select...\", SAPPartyCode: \"\" }\r\n}\r\n\r\nconst CommonPartyDropdownReducer = (state = INIT_STATE, action) => {\r\n\r\n    switch (action.type) {\r\n\r\n        case COMMON_PARTY_DROPDOWN:\r\n            return {\r\n                ...state,\r\n                partyDropdownLoading: true\r\n            }\r\n        case COMMON_PARTY_DROPDOWN_SUCCESS:\r\n            return {\r\n                ...state,\r\n                commonPartyDropdown: action.payload,\r\n                partyDropdownLoading: false\r\n            }\r\n\r\n\r\n        case COMMON_PARTY_DROP_SELECT_ACTION:\r\n\r\n            return {\r\n                ...state,\r\n                commonPartyDropSelect: action.payload,\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default CommonPartyDropdownReducer;","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Utilites\\PartyDrodown\\actionType.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Utilites\\PartyDrodown\\action.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\Reports\\ClaimReportSummary\\ClaimReport.js",["4315","4316","4317","4318","4319","4320","4321","4322","4323","4324","4325","4326","4327"],"import React, { useEffect, useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { Col, FormGroup, Input, Label, Row } from \"reactstrap\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { initialFiledFunc } from \"../../components/Common/validationFunction\";\r\nimport { C_Button } from \"../../components/Common/CommonButton\";\r\nimport * as _cfunc from \"../../components/Common/CommonFunction\";\r\nimport { mode } from \"../../routes/index\"\r\nimport { MetaTags } from \"react-meta-tags\";\r\nimport { getpdfReportdata, getpdfReportdataSuccess } from \"../../store/actions\";\r\nimport { customAlert } from \"../../CustomAlert/ConfirmDialog\";\r\nimport * as report from '../ReportIndex'\r\nimport { ClaimSummary_API, MasterClaimSummary_API } from \"../../helpers/backend_helper\";\r\nimport C_Report from \"../../components/Common/C_Report\";\r\nimport { claimList_API, claimList_API_Success, deleteClaimSuccess, delete_Claim_ID, postClaimMasterCreate_API, postMasterClaimCreat_API_Success } from \"../../store/Report/ClaimSummary/action\";\r\nimport ToolkitProvider from \"react-bootstrap-table2-toolkit\";\r\nimport BootstrapTable from \"react-bootstrap-table-next\";\r\nimport { mySearchProps } from \"../../components/Common/SearchBox/MySearch\";\r\n\r\nconst CWClaimBtnCss = \"badge badge-soft-primary font-size-18 btn btn-primary waves-effect waves-light w-xxs border border-light\"\r\nconst createClaimBtnCss = \"badge badge-soft-success font-size-18 btn btn-success waves-effect waves-light w-xxs border border-light\"\r\nconst deltBtnCss = \"badge badge-soft-danger font-size-18 btn btn-danger waves-effect waves-light w-xxs border border-light\"\r\n\r\n\r\nconst SelectedMonth = () => _cfunc.getCurrentMonthAndYear()\r\nconst FirstAndLastDate = () => _cfunc.getFirstAndLastDateOfMonth(SelectedMonth());\r\nconst fileds = () => ({\r\n    FromDate: FirstAndLastDate().firstDate,\r\n    ToDate: FirstAndLastDate().lastDate,\r\n    PartyName: \"\",\r\n    HeaderFromDate: _cfunc.date_ymd_func(),\r\n    HeaderToDate: _cfunc.date_ymd_func(),\r\n    SelectedMonth: SelectedMonth(),\r\n})\r\n\r\n\r\n\r\nconst ClaimSummary = (props) => {\r\n\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n    //function to convert selected month and year to date format initial date\r\n\r\n    const [state, setState] = useState(() => initialFiledFunc(fileds()))\r\n    const [subPageMode] = useState(history.location.pathname);\r\n    const [userPageAccessState, setUserAccState] = useState('');\r\n    const [jsonBody, setjsonBody] = useState({});\r\n\r\n\r\n\r\n\r\n    const reducers = useSelector(\r\n        (state) => ({\r\n            deleteMsg: state.ClaimSummaryReducer.deleteMsg,\r\n            ClaimListData: state.ClaimSummaryReducer.ClaimListData,\r\n            ClaimSummaryGobtn: state.ClaimSummaryReducer.ClaimSummaryGobtn,\r\n            pdfdata: state.PdfReportReducers.pdfdata,\r\n            ReportBtnLoading: (state.PdfReportReducers.ReportBtnLoading) || (state.ClaimSummaryReducer.CreateClaimLoading) || (state.ClaimSummaryReducer.DeleteBtnLoading),\r\n            supplier: state.CommonAPI_Reducer.vendorSupplierCustomer,\r\n            userAccess: state.Login.RoleAccessUpdateData,\r\n            SSDD_List: state.CommonAPI_Reducer.SSDD_List,\r\n            pageField: state.CommonPageFieldReducer.pageFieldList\r\n        })\r\n    );\r\n    const { userAccess, supplier, pdfdata, ClaimSummaryGobtn, deleteMsg, ClaimListData } = reducers;\r\n    const { Data = [] } = ClaimListData\r\n    const values = { ...state.values }\r\n    Data.sort((a, b) => b.id - a.id);\r\n    // Featch Modules List data  First Rendering\r\n    const location = { ...history.location }\r\n    const hasShowModal = props.hasOwnProperty(mode.editValue)\r\n\r\n    // userAccess useEffect\r\n    useEffect(() => {\r\n        let userAcc = null;\r\n        let locationPath = location.pathname;\r\n        if (hasShowModal) {\r\n            locationPath = props.masterPath;\r\n        };\r\n        userAcc = userAccess.find((inx) => {\r\n            return (`/${inx.ActualPagePath}` === locationPath)\r\n        })\r\n        if (userAcc) {\r\n            setUserAccState(userAcc)\r\n            _cfunc.breadcrumbReturnFunc({ dispatch, userAcc });\r\n        };\r\n    }, [userAccess])\r\n\r\n    useEffect(() => {\r\n        MonthAndYearOnchange(values.SelectedMonth, \"InitialDate\")\r\n        return () => {\r\n            dispatch(claimList_API_Success([]))\r\n        }\r\n    }, [])\r\n\r\n\r\n    useEffect(() => {\r\n        if ((pdfdata.Status === true) && (pdfdata.StatusCode === 204)) {\r\n            dispatch(getpdfReportdataSuccess({ Status: false }))\r\n            customAlert({\r\n                Type: 3,\r\n                Message: pdfdata.Message,\r\n            })\r\n            return\r\n        }\r\n    }, [pdfdata])\r\n\r\n    useEffect(() => {\r\n        if ((ClaimSummaryGobtn.Status === true) && (ClaimSummaryGobtn.StatusCode === 200)) {\r\n            dispatch(claimList_API(jsonBody))\r\n            dispatch(postMasterClaimCreat_API_Success([]))\r\n            customAlert({\r\n                Type: 1,\r\n                Message: ClaimSummaryGobtn.Message,\r\n            })\r\n            return\r\n        }\r\n    }, [ClaimSummaryGobtn])\r\n\r\n\r\n    useEffect(() => {\r\n        if ((deleteMsg.Status === true) && (deleteMsg.StatusCode === 200)) {\r\n            dispatch(deleteClaimSuccess({ Status: false }))\r\n            dispatch(claimList_API(jsonBody))\r\n            customAlert({\r\n                Type: 1,\r\n                Message: deleteMsg.Message,\r\n            })\r\n            return\r\n        }\r\n    }, [deleteMsg])\r\n\r\n    // useEffect(() => {\r\n    //     if ((ClaimListData.Status === true) && (ClaimListData.StatusCode === 200)) {\r\n    //         setisClaimList(true)\r\n    //     }\r\n    // }, [ClaimListData])\r\n\r\n\r\n\r\n\r\n    function goButtonHandler(reportType, row, btnId) {\r\n\r\n        const jsonBody = JSON.stringify({\r\n            \"FromDate\": row.selectedDate.FromDate,\r\n            \"ToDate\": row.selectedDate.ToDate,\r\n            \"Party\": row.PartyID,\r\n            \"Mode\": (reportType === report.ClaimSummary) ? 1 : 2,\r\n            \"LoginParty\": (reportType === \"createClaim\") ? _cfunc.loginSelectedPartyID() : undefined,\r\n        });\r\n        let config = { ReportType: reportType, jsonBody, btnId: btnId, ToDate: row.selectedDate.ToDate, FromDate: row.selectedDate.FromDate, ClaimID: row.id, PartyName: row.PartyName }\r\n\r\n        if (reportType === report.CompanyWiseBudget) {\r\n            dispatch(getpdfReportdata(MasterClaimSummary_API, config))\r\n\r\n        }\r\n        if (reportType === \"createClaim\") {\r\n            dispatch(postClaimMasterCreate_API(config))\r\n        }\r\n\r\n        if ((reportType === report.CustomerWiseReturn) || (reportType === report.ClaimSummary)) {\r\n            dispatch(getpdfReportdata(ClaimSummary_API, config))\r\n        }\r\n    }\r\n\r\n    const deleteHandler = async (row, btnId) => {\r\n        const jsonBody = JSON.stringify({\r\n            \"FromDate\": row.selectedDate.FromDate,\r\n            \"ToDate\": row.selectedDate.ToDate,\r\n            \"Party\": row.PartyID,\r\n        });\r\n        let config = { jsonBody, btnId: btnId }\r\n\r\n        const isConfirmed = await customAlert({\r\n            Type: 7,\r\n            Message: \"Do you want To Delete Claim ?\",\r\n        });\r\n\r\n        if (isConfirmed) {\r\n            dispatch(delete_Claim_ID(config))\r\n        }\r\n    }\r\n\r\n    function MonthAndYearOnchange(e, InitialDate) {\r\n        dispatch(claimList_API_Success([]))\r\n        \r\n        let selectedMonth = \"\"\r\n        if (InitialDate) {\r\n            selectedMonth = e\r\n        } else {\r\n            selectedMonth = e.target.value\r\n        }\r\n        //function to convert selected month and year to date format first and last date of month\r\n\r\n        const { firstDate, lastDate } = _cfunc.getFirstAndLastDateOfMonth(selectedMonth);\r\n        setState((i) => {\r\n            const a = { ...i }\r\n            a.values.FromDate = firstDate;\r\n            a.hasValid.FromDate.valid = true\r\n            a.values.ToDate = lastDate;\r\n            a.hasValid.ToDate.valid = true\r\n            a.values.SelectedMonth = selectedMonth;\r\n            a.hasValid.SelectedMonth.valid = true\r\n            return a\r\n        })\r\n        const jsonBody = JSON.stringify({\r\n            \"FromDate\": firstDate,\r\n            \"ToDate\": lastDate,\r\n            \"Party\": _cfunc.loginSelectedPartyID()\r\n        });\r\n\r\n\r\n        let config = { jsonBody }\r\n        setjsonBody(config)\r\n        dispatch(claimList_API(config))\r\n    }\r\n\r\n    const getFormattedDate = (date, format) => {\r\n        const year = date.getFullYear();\r\n        const month = String(date.getMonth() + 1).padStart(2, '0');\r\n        return format.replace('yyyy', year).replace('MM', month);\r\n    };\r\n\r\n    const currentMonth = getFormattedDate(new Date(), \"yyyy-MM\");\r\n\r\n    const pagesListColumns = [\r\n        {\r\n            text: \"id\",\r\n            dataField: \"id\",\r\n            style: {\r\n                width: \"60px\"\r\n            },\r\n        },\r\n        {\r\n            text: \"Party\",\r\n            dataField: \"PartyName\",\r\n        },\r\n        {\r\n            text: \"Purchase Amount\",\r\n            dataField: \"PrimaryAmount\",\r\n        },\r\n        {\r\n            text: \"Sale Amount\",\r\n            dataField: \"SecondaryAmount\",\r\n        },\r\n        {\r\n            text: \"Claim Amount\",\r\n            dataField: \"ReturnAmount\",\r\n        },\r\n\r\n        {\r\n            text: \"Action\",\r\n            dataField: \"\",\r\n            style: {\r\n                width: \"300px\"\r\n            },\r\n            formatExtraData: { btnLoading: reducers.ReportBtnLoading, selectedDate: values },\r\n            formatter: (value, row, key, { btnLoading, selectedDate }) => {\r\n                //selected date push to row to pass json accurate selectdate value format\r\n                row[\"selectedDate\"] = selectedDate\r\n                \r\n                return (\r\n                    <>\r\n                        <div className=\" d-flex justify-content-start  gap-2\" >\r\n                            <div\r\n                                className=\"mt-3  mb-3\">\r\n                                <C_Button\r\n                                    loading={btnLoading === `gobtn-${\"createClaim\"}-${row.id}-${key}`}\r\n                                    type=\"button\"\r\n                                    // forceDisabled={row.id !== null} \r\n                                    style={{ width: \"100px\", cursor: ((row.id === null) && (row.returncnt !== null)) ? \"pointer\" : \"not-allowed\" }}\r\n                                    title=\"Create Claim\"\r\n                                    spinnerColor=\"white\"\r\n                                    className={row.returncnt === null ? deltBtnCss : createClaimBtnCss}\r\n                                    onClick={(e) => { ((row.id === null) && (row.returncnt !== null)) ? goButtonHandler(\"createClaim\", row, `gobtn-${\"createClaim\"}-${row.id}-${key}`) : void (0) }}\r\n                                >\r\n                                    {row.id !== null ? \"Created\" : \"Create\"}\r\n                                    {row.returncnt !== null && row.id === null && <i className=\"fas fa-pencil-alt font-size-13\"></i>}\r\n                                    {row.returncnt === null && <i className=\"  fas fa-ban font-size-13\"></i>}\r\n\r\n\r\n                                </C_Button>\r\n                            </div>\r\n\r\n                            <div\r\n                                className=\"mt-3  mb-3\">\r\n\r\n\r\n                                <C_Button\r\n                                    loading={btnLoading === `gobtn-${report.CustomerWiseReturn}-${row.id}-${key}`}\r\n                                    type=\"button\"\r\n\r\n                                    title=\"Customer Wise Claim Summary\"\r\n                                    spinnerColor=\"white\"\r\n                                    style={{ cursor: row.id === null ? \"not-allowed\" : \"pointer\" }}\r\n                                    forceDisabled={row.id === null}\r\n                                    className={CWClaimBtnCss}\r\n                                    onClick={(e) => { goButtonHandler(report.CustomerWiseReturn, row, `gobtn-${report.CustomerWiseReturn}-${row.id}-${key}`) }}\r\n                                >\r\n                                    <i className=\"fas fa-file-contract\"></i>\r\n\r\n                                </C_Button>\r\n\r\n                            </div>\r\n\r\n\r\n                            <div\r\n                                className=\"mt-3 mb-3 \">\r\n                                <C_Button\r\n                                    loading={btnLoading === `gobtn-${report.ClaimSummary}-${row.id}-${key}`}\r\n                                    type=\"button\"\r\n                                    title=\"Item Wise Claim Summary\"\r\n                                    spinnerColor=\"white\"\r\n                                    style={{ cursor: row.id === null ? \"not-allowed\" : \"pointer\" }}\r\n                                    forceDisabled={row.id === null}\r\n                                    className={CWClaimBtnCss}\r\n                                    onClick={(e) => { goButtonHandler(report.ClaimSummary, row, `gobtn-${report.ClaimSummary}-${row.id}-${key}`) }}\r\n                                >\r\n                                    <i className=\" fas fa-file-signature\"></i>\r\n\r\n                                </C_Button>\r\n\r\n                            </div>\r\n                            <div\r\n                                className=\"mt-3  mb-3\">\r\n                                <C_Button\r\n                                    loading={btnLoading === `gobtn-${report.CompanyWiseBudget}-${row.id}-${key}`}\r\n\r\n                                    type=\"button\"\r\n                                    title=\"Master Claim Summary\"\r\n                                    forceDisabled={row.id === null}\r\n                                    spinnerColor=\"white\"\r\n                                    style={{ cursor: row.id === null ? \"not-allowed\" : \"pointer\" }}\r\n                                    className={CWClaimBtnCss}\r\n                                    onClick={(e) => { goButtonHandler(report.CompanyWiseBudget, row, `gobtn-${report.CompanyWiseBudget}-${row.id}-${key}`) }}\r\n                                >\r\n                                    <i className=\"far fa-file-alt\"></i>\r\n                                </C_Button>\r\n\r\n\r\n                            </div>\r\n                            <div\r\n                                className=\"mt-3  mb-3\">\r\n                                <C_Button\r\n                                    loading={btnLoading === `deletebtn-${row.id}-${key}`}\r\n                                    type=\"button\"\r\n                                    forceDisabled={row.id === null}\r\n                                    title=\"Delete Claim\"\r\n                                    spinnerColor=\"white\"\r\n                                    className={deltBtnCss}\r\n                                    onClick={(e) => { deleteHandler(row, `deletebtn-${row.id}-${key}`) }}\r\n                                >\r\n                                    <i className=\"mdi mdi-delete font-size-20\"></i>\r\n                                </C_Button>\r\n\r\n                            </div>\r\n                        </div>\r\n                    </>\r\n                )\r\n            },\r\n        },\r\n\r\n\r\n    ];\r\n    return (\r\n        <React.Fragment>\r\n            <MetaTags>{_cfunc.metaTagLabel(userPageAccessState)}</MetaTags>\r\n            <div className=\"page-content\">\r\n                {/* <div className=\"px-2 mb-1  c_card_filter text-black\" >\r\n                    <div className=\"row\" >\r\n                        <Col sm={4} className=\"\">\r\n                            <FormGroup className=\"mb- row mt-3 mb-2 \" >\r\n                                <Label className=\"col-sm-4 p-2\"\r\n                                    style={{ width: \"83px\" }}>FromDate</Label>\r\n                                <Col sm=\"6\">\r\n                                    <C_DatePicker\r\n                                        name='FromDate'\r\n                                        value={values.HeaderFromDate}\r\n                                        onChange={fromdateOnchange}\r\n                                    />\r\n                                </Col>\r\n                            </FormGroup>\r\n                        </Col>\r\n\r\n                        <Col sm={4} className=\"\">\r\n                            <FormGroup className=\"mb- row mt-3 mb-2\" >\r\n                                <Label className=\"col-sm-4 p-2\"\r\n                                    style={{ width: \"65px\" }}>ToDate</Label>\r\n                                <Col sm=\"6\">\r\n                                    <C_DatePicker\r\n                                        name=\"ToDate\"\r\n                                        value={values.HeaderToDate}\r\n                                        onChange={todateOnchange}\r\n                                    />\r\n                                </Col>\r\n                            </FormGroup>\r\n                        </Col>\r\n                        <Col sm={2} className=\"mt-3\" >\r\n                            <C_Button\r\n                                type=\"button\"\r\n                                style={{ width: \"50px\" }}\r\n                                spinnerColor=\"white\"\r\n                                // loading={GstR1BtnLoading}\r\n                                className=\"btn btn-success\"\r\n                                onClick={() => goButtonHeaderHandler()}\r\n                            >\r\n                                Go\r\n                            </C_Button>\r\n                        </Col>\r\n\r\n                    </div>\r\n                </div> */}\r\n\r\n                <div className=\"px-2   c_card_filter text-black\" >\r\n                    <div className=\"row\" >\r\n                        <Col sm={6}>\r\n                            <FormGroup className=\"mb- row mt-2\" >\r\n                                <Label style={{ width: \"83px\" }} className=\"col-sm-1 p-2 \">Month</Label>\r\n                                <Col sm=\"4\">\r\n                                    <Input className=\"form-control\"\r\n                                        type=\"month\"\r\n                                        defaultValue={values.SelectedMonth}\r\n                                        id=\"example-month-input\"\r\n                                        onChange={MonthAndYearOnchange}\r\n                                        max={currentMonth}\r\n                                    />\r\n                                </Col>\r\n                            </FormGroup>\r\n                        </Col>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"mt-2\">\r\n                    <ToolkitProvider\r\n                        keyField={\"Item_id\"}\r\n                        data={Data}\r\n                        columns={pagesListColumns}\r\n                        search\r\n                    >\r\n                        {(toolkitProps,) => (\r\n                            <React.Fragment>\r\n                                <Row>\r\n                                    <Col xl=\"12\">\r\n                                        <div className=\"table-responsive table \"  >\r\n                                            <BootstrapTable\r\n                                                keyField={\"Item_id\"}\r\n                                                id=\"table_Arrow\"\r\n                                                classes={\"table  table-bordered table-hover \"}\r\n                                                noDataIndication={\r\n                                                    <div className=\"text-danger text-center table-cursor-pointer\">\r\n                                                        Record Not available\r\n                                                    </div>\r\n                                                }\r\n                                                onDataSizeChange={(e) => {\r\n                                                    _cfunc.tableInputArrowUpDounFunc(\"#table_Arrow\")\r\n                                                }}\r\n                                                {...toolkitProps.baseProps}\r\n                                            />\r\n                                            {mySearchProps(toolkitProps.searchProps)}\r\n                                        </div>\r\n                                    </Col>\r\n                                </Row>\r\n\r\n                            </React.Fragment>\r\n                        )}\r\n                    </ToolkitProvider>\r\n                </div>\r\n            </div>\r\n            <C_Report />\r\n        </React.Fragment >\r\n    )\r\n}\r\n\r\nexport default ClaimSummary;","D:\\Rohit\\Git projects\\Manthan\\src\\Reports\\ClaimReportSummary\\Page.js",["4328"],"import jsPDF from \"jspdf\";\r\nimport \"jspdf-autotable\";\r\nimport * as style from './ReportStyle';\r\nimport { date_dmy_func } from \"../../components/Common/CommonFunction\";\r\nimport { Data } from \"./DemoData\";\r\n\r\nconst pageHeder = (doc, data) => {\r\n    style.pageBorder(doc, data);\r\n    style.pageHeder(doc, data);\r\n    style.reportHeder1(doc, data);\r\n    return true;\r\n};\r\n\r\nconst reportBody = (doc, data) => {\r\n    style.tableBody(doc, data);\r\n};\r\n\r\nfunction pageFooter(doc, data) {\r\n    style.pageFooter(doc, data);\r\n    style.reportFooter(doc, data);\r\n}\r\n\r\nconst ClaimSummaryReport = (data) => {\r\n\r\n    var doc = new jsPDF('p', 'pt', 'a4');\r\n    pageHeder(doc, data);\r\n    reportBody(doc, data);\r\n    pageFooter(doc, data);\r\n\r\n    doc.setProperties({\r\n        title: `Item Wise Summary Report ${date_dmy_func(data.Period.FromDate)} To ${date_dmy_func(data.Period.ToDate)}`\r\n    });\r\n    function generateSaveAndOpenPDFReport() {\r\n        const pdfUrl = URL.createObjectURL(doc.output('blob'));\r\n        window.open(pdfUrl);\r\n    }\r\n    generateSaveAndOpenPDFReport();\r\n\r\n\r\n}\r\n\r\nexport default ClaimSummaryReport;\r\n\r\n\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\Reports\\CustomerWiseReturnReport\\Page.js",["4329","4330"],"import jsPDF from \"jspdf\";\r\nimport \"jspdf-autotable\";\r\nimport * as style from './ReportStyle';\r\nimport { date_dmy_func, loginSystemSetting } from \"../../components/Common/CommonFunction\";\r\nimport { Data } from \"./DemoData\";\r\n\r\n\r\n\r\nconst pageHeder = (doc, data) => {\r\n    style.pageBorder(doc, data);\r\n    style.pageHeder(doc, data);     //Title\r\n    style.reportHeder1(doc, data);\r\n    return true;\r\n};\r\n\r\nconst reportBody = (doc, data) => {\r\n    style.tableBody(doc, data);\r\n};\r\n\r\nfunction pageFooter(doc, data) {\r\n    style.pageFooter(doc, data);\r\n    style.reportFooter(doc, data);\r\n\r\n}\r\n\r\nconst CustomerWiseReturnReport = (data) => {\r\n\r\n    var doc = new jsPDF('p', 'pt', 'a4');\r\n    pageHeder(doc, data);\r\n    reportBody(doc, data);\r\n    pageFooter(doc, data);\r\n\r\n    doc.setProperties({\r\n        title: `Customer Wise Return Report ${date_dmy_func(data.Period.FromDate)} To ${date_dmy_func(data.Period.ToDate)}`\r\n    });\r\n\r\n    function generateSaveAndOpenPDFReport() {\r\n        const pdfUrl = URL.createObjectURL(doc.output('blob'));\r\n        window.open(pdfUrl);\r\n    }\r\n    generateSaveAndOpenPDFReport();\r\n}\r\n\r\nexport default CustomerWiseReturnReport;","D:\\Rohit\\Git projects\\Manthan\\src\\Reports\\CompanyWiseBugetReport\\Page.js",["4331"],"import jsPDF from \"jspdf\";\r\nimport \"jspdf-autotable\";\r\nimport * as style from './ReportStyle'\r\nimport { Data } from \"./DemoData\";\r\nimport { date_dmy_func } from \"../../components/Common/CommonFunction\";\r\n\r\nvar pageHeder = function (doc, data) {\r\n    style.pageBorder(doc, data);\r\n    style.pageHeder(doc, data);\r\n    // style.reportHeder1(doc, data);\r\n\r\n};\r\nfunction reportBody(doc, data) {\r\n    style.tableBody(doc, data);\r\n}\r\nfunction pageFooter(doc, data) {\r\n    style.pageFooter(doc, data);\r\n}\r\n\r\nconst CompanyWiseBudgetReport = (data) => {\r\n\r\n    var doc = new jsPDF('p', 'pt', 'a4');\r\n    try {\r\n        pageHeder(doc, data);\r\n        reportBody(doc, data);\r\n        pageFooter(doc, data);\r\n        doc.setProperties({\r\n            title: `Master Claim Report ${date_dmy_func(data.Period.FromDate)} To ${date_dmy_func(data.Period.ToDate)} `\r\n        });\r\n        function generateSaveAndOpenPDFReport() {\r\n\r\n            const pdfUrl = URL.createObjectURL(doc.output(\"blob\"));\r\n            window.open(pdfUrl);\r\n        }\r\n        generateSaveAndOpenPDFReport();\r\n    } catch (error) {\r\n        console.log(\"MasterClaim_Report Error\", error)\r\n    }\r\n\r\n\r\n}\r\nexport default CompanyWiseBudgetReport;","D:\\Rohit\\Git projects\\Manthan\\src\\CustomTable2\\index.js",["4332","4333","4334"],"import React, { useState, useMemo, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './CustomTable.scss';\r\nimport { customTableSearch } from '../components/Common/SearchBox/MySearch';\r\nimport BootstrapTable from 'react-bootstrap-table-next';\r\nimport CustomPagination from './TablePagination';\r\n\r\n\r\nconst CustomTable = ({\r\n    data,\r\n    columns,\r\n    keyField,\r\n    defaultSearchText,\r\n    onDataSizeChange,\r\n    itemsPerPage = 15,\r\n    paginationEnabled = false,\r\n    classes,\r\n    updatedRowBlinkId,\r\n    ...rest\r\n}) => {\r\n\r\n\r\n    const [searchText, setSearchText] = useState(defaultSearchText || '');\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n\r\n    const handleSearch = (val) => {\r\n        setSearchText(val);\r\n        setCurrentPage(1);\r\n    };\r\n\r\n    customTableSearch({ onSearch: handleSearch });\r\n\r\n    const handlePageChange = (page) => {\r\n        setCurrentPage(page);\r\n    };\r\n\r\n    const rowClesess = (row) => {\r\n        let cs = '';\r\n        if (row.IsRecordDeleted) {\r\n            cs += '_deleted-Row '; // Add a space after the class name\r\n        }\r\n        if ((row[keyField] === updatedRowBlinkId)) {\r\n            cs += '_row-blink '; // Add a space after the class name\r\n        }\r\n        return cs;\r\n    };\r\n\r\n    const sortCaretFunction = {\r\n        sortCaret: (order, column) => {\r\n            if (!order) {\r\n                return null;\r\n            } else if (order === 'asc') {\r\n                return <i className=\"fas fa-arrow-up pl-1 font-size-12\"></i>;\r\n            } else if (order === 'desc') {\r\n                return <i className=\"fas fa-arrow-down pl-1 font-size-12\"></i>;\r\n            }\r\n            return null;\r\n        }\r\n    };\r\n\r\n\r\n    useEffect(() => {\r\n        handleSearch(searchText);\r\n    }, []);\r\n\r\n    const filteredData = useMemo(() => {\r\n        return data.filter((row) =>\r\n            columns.some((column) => {\r\n                const columnValue = row[column.dataField];\r\n                const isHidden = column.hidden;\r\n\r\n                if (columnValue === null || isHidden || columnValue === undefined) {\r\n                    return false;\r\n                }\r\n                return columnValue.toString().toLowerCase().includes(searchText.toLowerCase());\r\n            })\r\n        );\r\n    }, [data, searchText, columns]);\r\n\r\n    const pageCount = Math.ceil(filteredData.length / itemsPerPage);\r\n    const startIndex = (currentPage - 1) * itemsPerPage;\r\n    const endIndex = currentPage * itemsPerPage;\r\n\r\n    const slicedData = useMemo(() => {\r\n        onDataSizeChange({ dataCount: filteredData.length, filteredData: filteredData }); // Notify the parent about the filtered data count\r\n        return paginationEnabled ? filteredData.slice(startIndex, endIndex) : filteredData;\r\n    }, [filteredData, startIndex, endIndex, paginationEnabled]);\r\n\r\n\r\n    return (\r\n        <div className=\"table-responsive\"  >\r\n            <BootstrapTable data={slicedData} columns={columns}\r\n                keyField={keyField}\r\n                classes='custom-table'\r\n                rowClasses={rowClesess}\r\n                sort={sortCaretFunction}\r\n                {...rest} />\r\n\r\n            {paginationEnabled &&\r\n                <CustomPagination\r\n                    pageCount={pageCount}\r\n                    currentPage={currentPage}\r\n                    handlePageChange={handlePageChange}\r\n                />\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nCustomTable.propTypes = {\r\n    keyField: PropTypes.string.isRequired,\r\n    data: PropTypes.array.isRequired,\r\n    columns: PropTypes.array.isRequired,\r\n    defaultSearchText: PropTypes.string,\r\n    onDataSizeChange: PropTypes.func,\r\n    itemsPerPage: PropTypes.number,\r\n    paginationEnabled: PropTypes.bool,\r\n    classes: PropTypes.string,\r\n    // ... Add any other props here\r\n};\r\nexport default CustomTable;\r\n\r\n\r\nfunction rowClesess(row) {\r\n\r\n    let cs = '';\r\n\r\n    if (row.IsRecordDeleted) {\r\n        cs += '_deleted-Row '; // Add a space after the class name\r\n    }\r\n    if ((row[this.keyField] === this.updatedRowBlinkId)) {\r\n        cs += '_row-blink '; // Add a space after the class name\r\n    }\r\n\r\n    return cs;\r\n};","D:\\Rohit\\Git projects\\Manthan\\src\\Reports\\CustomerWiseReturnReport\\ReportStyle.js",["4335","4336","4337"],"\r\nimport { CurrentTime, compareGSTINState, currentDate_dmy, date_dmy_func } from \"../../components/Common/CommonFunction\";\r\nimport * as table from './TableData'\r\nimport { url } from \"../../routes\";\r\nimport { numberWithCommas, toWords } from \"../Report_common_function\";\r\n\r\n\r\nlet initial_y = 0\r\n\r\nexport const pageBorder = (doc) => {\r\n\r\n    doc.setDrawColor(0, 0, 0);\r\n    doc.line(570, 16, 30, 16);//horizontal line (Top)\r\n    doc.line(30, 815, 30, 16);//vertical line (left)\r\n    doc.line(570, 815, 570, 16);//vertical line (Right)\r\n    doc.line(570, 815, 30, 815);//horizontal line (Bottom)   \r\n}\r\n\r\n\r\nexport const pageHeder = (doc, data) => {\r\n    doc.setDrawColor(0, 0, 0);\r\n    doc.line(408, 63, 408, 16);//vertical right 1\r\n    doc.line(570, 63, 30, 63)  //horizontal line 1 billby upper for repeat header\r\n    doc.addFont(\"Arial\", 'Normal')\r\n    doc.setFont('Arial')\r\n    doc.setFontSize(18)\r\n    doc.text(' CUSTOMER WISE RETURN SUMMARY', 70, 45,)\r\n}\r\n\r\nexport const reportHeder1 = (doc, data) => {\r\n    doc.setFont('Tahoma')\r\n    doc.setFontSize(11)\r\n    doc.setFont(undefined, 'bold')\r\n    doc.setDrawColor(0, 0, 0);\r\n    doc.line(570, 63, 30, 63) //horizontal line 1 billby upper\r\n    doc.line(408, 63, 408, 16);//vertical line header section billby \r\n    doc.line(570, 32, 408, 32);//horizontal line 3\r\n    doc.line(570, 47, 408, 47);//horizontal line 3\r\n\r\n\r\n\r\n    var BilledByStyle = {\r\n        margin: {\r\n            top: 45, left: 30, right: 35,\r\n        },\r\n        didDrawCell: (data1) => {\r\n            const rowIdx = data1.row.index;\r\n            const colIdx = data1.column.index;\r\n            if (rowIdx === 0 && colIdx === 0) {\r\n                let x = data1.cursor.x + 2\r\n                let y = data1.cursor.y + 8\r\n                doc.setFontSize(8)\r\n                doc.setFont(undefined, 'bold')\r\n                doc.text('Customer: ', x, y)\r\n            };\r\n            if (rowIdx === 1 && colIdx === 0) {\r\n                let x = data1.cursor.x + 2\r\n                let y = data1.cursor.y + 8\r\n                doc.setFontSize(8)\r\n                doc.setFont(undefined, 'bold')\r\n                doc.text('Address: ', x, y)\r\n            };\r\n\r\n            if (rowIdx === 2 && colIdx === 0) {\r\n                let x = data1.cursor.x + 2\r\n                let y = data1.cursor.y + 8\r\n                doc.setFontSize(8)\r\n                doc.setFont(undefined, 'bold')\r\n                doc.text('Mobile No: ', x, y)\r\n            };\r\n\r\n        },\r\n\r\n        showHead: 'always',\r\n        theme: 'plain',\r\n        styles: {\r\n            overflow: 'linebreak',\r\n            fontSize: 8,\r\n            height: 0,\r\n        },\r\n        bodyStyles: {\r\n            columnWidth: 'wrap',\r\n            textColor: [30, 30, 30],\r\n            cellPadding: 2,\r\n            fontSize: 8,\r\n            fontStyle: 'normal',\r\n            lineColor: [0, 0, 0]\r\n        },\r\n        columnStyles: {\r\n            0: {\r\n                valign: \"top\",\r\n                columnWidth: 260,\r\n                halign: 'lfet',\r\n            }\r\n        },\r\n        tableLineColor: \"black\",\r\n\r\n        startY: 63\r\n    };\r\n\r\n    var BilledToStyle = {\r\n\r\n        didDrawCell: (data1) => {\r\n            const rowIdx = data1.row.index;\r\n            const colIdx = data1.column.index;\r\n            if (rowIdx === 0 && colIdx === 0) {\r\n                let x = data1.cursor.x + 2\r\n                let y = data1.cursor.y + 9\r\n                doc.setFontSize(8)\r\n                doc.setFont(undefined, 'bold')\r\n                doc.text('GSTIN No: ', x, y)\r\n            };\r\n            if (rowIdx === 1 && colIdx === 0) {\r\n                let x = data1.cursor.x + 2\r\n                let y = data1.cursor.y + 9\r\n                doc.setFontSize(8)\r\n                doc.setFont(undefined, 'bold')\r\n                doc.text('FSSAI No: ', x, y)\r\n            };\r\n\r\n\r\n\r\n        },\r\n        margin: {\r\n            top: 45, left: 292, right: 35,\r\n        },\r\n        showHead: 'always',\r\n        theme: 'plain',\r\n        styles: {\r\n            overflow: 'linebreak',\r\n            fontSize: 8,\r\n            height: 0,\r\n        },\r\n        bodyStyles: {\r\n            columnWidth: 'wrap',\r\n            textColor: [30, 30, 30],\r\n            cellPadding: data.PrintType ? 1 : 2,\r\n            fontSize: 8,\r\n            fontStyle: 'normal',\r\n            lineColor: [0, 0, 0]\r\n        },\r\n        columnStyles: {\r\n            0: {\r\n                valign: \"top\",\r\n                columnWidth: 270,\r\n                halign: 'lfet',\r\n            },\r\n        },\r\n        tableLineColor: \"black\",\r\n        startY: 63,\r\n    };\r\n\r\n\r\n    const priLength = () => {\r\n        let final_y = doc.previousAutoTable.finalY\r\n        if (final_y > initial_y) {\r\n            initial_y = final_y\r\n        }\r\n\r\n    }\r\n\r\n    doc.autoTable(table.BilledBy, table.BilledByRow(data), BilledByStyle);\r\n    priLength()\r\n\r\n    doc.autoTable(table.BilledTo, table.BilledToRow(data), BilledToStyle);\r\n    priLength()\r\n\r\n    doc.line(290, initial_y, 290, 63);//Vertical line \r\n\r\n\r\n}\r\n\r\nexport const reportHeder3 = (doc, data) => {\r\n    doc.line(570, 32, 408, 32);// horizontal line Repeat\r\n    doc.line(570, 47, 408, 47);// horizontal line Repeat\r\n    doc.setFont('Tahoma')\r\n    doc.setFontSize(10)\r\n    doc.setFont(undefined, 'bold')\r\n    doc.text(`From Date:  ${date_dmy_func(data.Period.FromDate)}`, 415, 25)\r\n    doc.text(`To Date:       ${date_dmy_func(data.Period.ToDate)}`, 415, 40)\r\n    doc.text(`Claim ID :       ${data.Period.ClaimID}`, 415, 57)\r\n\r\n\r\n}\r\n\r\nexport const tableBody = (doc, data) => {\r\n    var options = {\r\n        didParseCell: (data1) => {\r\n\r\n            if (data1.row.cells[0].raw === \"Total\") {\r\n                data1.row.cells[1].colSpan = 3\r\n\r\n                data1.row.cells[0].styles.fontSize = 7\r\n                data1.row.cells[5].styles.fontSize = 7\r\n                data1.row.cells[6].styles.fontSize = 7\r\n                data1.row.cells[9].styles.fontSize = 7\r\n                data1.row.cells[11].styles.fontSize = 7\r\n                data1.row.cells[6].styles.fontSize = 7\r\n                data1.row.cells[10].styles.fontSize = 7\r\n                data1.row.cells[12].styles.fontSize = 7\r\n\r\n\r\n                data1.row.cells[0].styles.fontStyle = \"bold\"\r\n                data1.row.cells[5].styles.fontStyle = \"bold\"\r\n                data1.row.cells[6].styles.fontStyle = \"bold\"\r\n                data1.row.cells[9].styles.fontStyle = \"bold\"\r\n                data1.row.cells[11].styles.fontStyle = \"bold\"\r\n                data1.row.cells[10].styles.fontStyle = \"bold\"\r\n                data1.row.cells[12].styles.fontStyle = \"bold\"\r\n\r\n\r\n            }\r\n\r\n\r\n\r\n        },\r\n        margin: {\r\n            left: 30, right: 25, top: 63,\r\n        },\r\n        theme: 'grid',\r\n        headerStyles: {\r\n            cellPadding: 2,\r\n            lineWidth: 1,\r\n            valign: 'top',\r\n            fontStyle: 'bold',\r\n            halign: 'center',\r\n            fillColor: \"white\",\r\n            textColor: [0, 0, 0],\r\n            fontSize: 7,\r\n            rowHeight: 10,\r\n            lineColor: [0, 0, 0]\r\n        },\r\n        bodyStyles: {\r\n            textColor: [30, 30, 30],\r\n            cellPadding: 3,\r\n            fontSize: 7,\r\n            columnWidth: 'wrap',\r\n            lineColor: [0, 0, 0],\r\n        },\r\n        columnStyles: {\r\n\r\n            0: {\r\n                valign: \"top\",\r\n                columnWidth: 42,\r\n            },\r\n            1: {\r\n                columnWidth: 25,\r\n                halign: 'right',\r\n            },\r\n            2: {\r\n                columnWidth: 79,\r\n                halign: 'left',\r\n            },\r\n            3: {\r\n                columnWidth: 75,\r\n                halign: 'left',\r\n            },\r\n            4: {\r\n                columnWidth: 30,\r\n                halign: 'right',\r\n            },\r\n            5: {\r\n                columnWidth: 37,\r\n                halign: 'right',\r\n            },\r\n\r\n            6: {\r\n                columnWidth: 37,\r\n                halign: 'right',\r\n            },\r\n            7: {\r\n                columnWidth: 35,\r\n                halign: 'right',\r\n            },\r\n            8: {\r\n                columnWidth: 40,\r\n                halign: 'right',\r\n            },\r\n            9: {\r\n                columnWidth: 37,\r\n                halign: 'right',\r\n            },\r\n            10: {\r\n                columnWidth: 33,\r\n                halign: 'right',\r\n            },\r\n            11: {\r\n                columnWidth: 34,\r\n                halign: 'right',\r\n            },\r\n            12: {\r\n                columnWidth: 36,\r\n                halign: 'right',\r\n            },\r\n        },\r\n        tableLineColor: \"black\",\r\n        startY: initial_y,\r\n    };\r\n\r\n    doc.autoTable(table.columns, table.Rows(data), options,);\r\n    const optionsTable4 = {\r\n        margin: {\r\n            left: 30, right: 30, bottom: 140\r\n        },\r\n    };\r\n    doc.autoTable(optionsTable4);\r\n\r\n}\r\n\r\nexport const reportFooter = (doc, data) => {\r\n    doc.setDrawColor(0, 0, 0);\r\n    doc.line(570, 730, 30, 730);//horizontal line Footer 1\r\n    doc.line(435, 745, 30, 745);//horizontal line Footer 2\r\n    doc.line(435, 775, 30, 775);//horizontal line Footer 3\r\n    doc.line(435, 795, 30, 795);//horizontal line Footer 3\r\n    doc.line(435, 730, 435, 815);//vertical right Sub Total\r\n    doc.setFont('Tahoma')\r\n\r\n    const a = data.ClaimSummaryItemDetails.map((data) => ({\r\n\r\n        CGST: Number(data.CGST),\r\n        SGST: Number(data.SGST),\r\n        Amount: Number(data.Amount),\r\n        Discount: Number(data.DiscountAmount),\r\n\r\n    }));\r\n    var totalCGST = 0;\r\n    var totalSGST = 0;\r\n    var TotalAmount = 0;\r\n    var TotalDiscount = 0\r\n\r\n    a.forEach(arg => {\r\n        totalCGST += arg.CGST;\r\n        totalSGST += arg.SGST;\r\n        TotalAmount += arg.Amount;\r\n        TotalDiscount += arg.Discount;\r\n\r\n    });\r\n    const TotalGST = totalCGST + totalSGST;\r\n    let stringNumber = toWords(Number(TotalAmount))\r\n\r\n\r\n    doc.setFontSize(8)\r\n\r\n\r\n    doc.text(`Total Amount:`, 440, 748,)\r\n    doc.text(`${numberWithCommas(Number(TotalAmount).toFixed(2))}`, 567, 748, 'right')\r\n\r\n    // doc.text(`Total Disc:`, 440, 748,)\r\n    // doc.text(` ${numberWithCommas(Number(TotalDiscount).toFixed(2))}`, 567, 748, 'right')\r\n\r\n    doc.text(`Total CGST:`, 440, 758)\r\n    doc.text(`${numberWithCommas(Number(totalCGST).toFixed(2))}`, 567, 758, 'right')\r\n\r\n    doc.text(`Total SGST:`, 440, 768,)\r\n    doc.text(`${numberWithCommas(Number(totalSGST).toFixed(2))}`, 567, 768, 'right')\r\n\r\n    doc.text(`Total GST:`, 440, 778,)\r\n    doc.text(` ${numberWithCommas(Number(TotalGST).toFixed(2))}`, 567, 778, 'right')\r\n\r\n\r\n    doc.setFont(undefined, 'Normal')\r\n    doc.setFontSize(10)\r\n    doc.setFont(undefined, 'bold')\r\n    doc.text(`Total Amount :`, 440, 812,)\r\n\r\n\r\n    const Total = numberWithCommas((TotalAmount).toFixed(2))\r\n    doc.text(`${Total}`, 567, 812, 'right')\r\n    doc.setFont(undefined, 'Normal')\r\n    doc.setFont('Tahoma')\r\n    doc.setFontSize(9)\r\n    doc.setFont('Tahoma')\r\n    doc.setFontSize(8)\r\n    doc.setFont(\"Arimo\");\r\n    doc.setFontSize(10)\r\n    doc.text(`Signature `, 280, 810,)\r\n    doc.text(`Prepared by :${data.PartyDetails.PartyName} `, 35, 810,)\r\n    doc.setFontSize(8)\r\n    doc.text(`${stringNumber}`, 65, 740,)\r\n\r\n    doc.setFont(undefined, 'bold')\r\n    doc.text(`Rupees:`, 33, 740,)\r\n    doc.addFont(\"Arial\", 'Normal')\r\n    doc.setFont(\"Arimo\");\r\n}\r\n\r\nexport const pageFooter = (doc, data) => {\r\n    const pageCount = doc.internal.getNumberOfPages()\r\n    doc.setFont('helvetica', 'Normal')\r\n    doc.setFontSize(8)\r\n    for (var i = 1; i <= pageCount; i++) {\r\n        doc.setPage(i)\r\n        pageHeder(doc, data)\r\n        pageBorder(doc, data)\r\n        reportHeder3(doc, data)\r\n        doc.setFont('helvetica', 'Normal')\r\n        doc.text('Page ' + String(i) + ' of ' + String(pageCount), 520, 828,)\r\n        doc.text('Print Date :' + String(currentDate_dmy) + ' Time ' + String(CurrentTime()), 30, 828,)\r\n\r\n    }\r\n}\r\n\r\n// original","D:\\Rohit\\Git projects\\Manthan\\src\\Reports\\ClaimReportSummary\\DemoData.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\Reports\\ClaimReportSummary\\ReportStyle.js",["4338","4339","4340"],"\r\nimport { CurrentTime, compareGSTINState, currentDate_dmy, date_dmy_func } from \"../../components/Common/CommonFunction\";\r\nimport * as table from './TableData'\r\nimport { url } from \"../../routes\";\r\nimport { numberWithCommas, toWords } from \"../Report_common_function\";\r\n\r\n\r\nlet initial_y = 0\r\n\r\nexport const pageBorder = (doc) => {\r\n\r\n    doc.setDrawColor(0, 0, 0);\r\n    doc.line(570, 16, 30, 16);//horizontal line (Top)\r\n    doc.line(30, 815, 30, 16);//vertical line (left)\r\n    doc.line(570, 815, 570, 16);//vertical line (Right)\r\n    doc.line(570, 815, 30, 815);//horizontal line (Bottom)   \r\n}\r\n\r\n\r\nexport const pageHeder = (doc, data) => {\r\n    doc.setDrawColor(0, 0, 0);\r\n    doc.line(408, 63, 408, 16);//vertical Line header repeat header\r\n    doc.line(570, 63, 30, 63)  //horizontal line upper for repeat header\r\n    doc.addFont(\"Arial\", 'Normal')\r\n    doc.setFont('Arial')\r\n    doc.setFontSize(18)\r\n    doc.text(' ITEM WISE CLAIM SUMMARY', 110, 45,)\r\n}\r\n\r\nexport const reportHeder1 = (doc, data) => {\r\n\r\n    doc.setFont('Tahoma')\r\n    doc.setFontSize(11)\r\n    doc.setFont(undefined, 'bold')\r\n    doc.setDrawColor(0, 0, 0);\r\n    doc.line(570, 63, 30, 63) //horizontal line 1 billby upper\r\n    doc.line(570, 32, 408, 32);//horizontal line 3\r\n    doc.line(570, 47, 408, 47);//horizontal line 3\r\n\r\n\r\n\r\n    var BilledByStyle = {\r\n        margin: {\r\n            top: 45, left: 30, right: 35,\r\n        },\r\n        didDrawCell: (data1) => {\r\n            const rowIdx = data1.row.index;\r\n            const colIdx = data1.column.index;\r\n            if (rowIdx === 0 && colIdx === 0) {\r\n                let x = data1.cursor.x + 2\r\n                let y = data1.cursor.y + 8\r\n                doc.setFontSize(8)\r\n                doc.setFont(undefined, 'bold')\r\n                doc.text('Customer: ', x, y)\r\n            };\r\n            if (rowIdx === 1 && colIdx === 0) {\r\n                let x = data1.cursor.x + 2\r\n                let y = data1.cursor.y + 8\r\n                doc.setFontSize(8)\r\n                doc.setFont(undefined, 'bold')\r\n                doc.text('Address: ', x, y)\r\n            };\r\n\r\n            if (rowIdx === 2 && colIdx === 0) {\r\n                let x = data1.cursor.x + 2\r\n                let y = data1.cursor.y + 8\r\n                doc.setFontSize(8)\r\n                doc.setFont(undefined, 'bold')\r\n                doc.text('Mobile No: ', x, y)\r\n            };\r\n\r\n        },\r\n\r\n        showHead: 'always',\r\n        theme: 'plain',\r\n        styles: {\r\n            overflow: 'linebreak',\r\n            fontSize: 8,\r\n            height: 0,\r\n        },\r\n        bodyStyles: {\r\n            columnWidth: 'wrap',\r\n            textColor: [30, 30, 30],\r\n            cellPadding: 2,\r\n            fontSize: 8,\r\n            fontStyle: 'normal',\r\n            lineColor: [0, 0, 0]\r\n        },\r\n        columnStyles: {\r\n            0: {\r\n                valign: \"top\",\r\n                columnWidth: 260,\r\n                halign: 'lfet',\r\n            }\r\n        },\r\n        tableLineColor: \"black\",\r\n\r\n        startY: 63\r\n    };\r\n\r\n    var BilledToStyle = {\r\n\r\n        didDrawCell: (data1) => {\r\n            const rowIdx = data1.row.index;\r\n            const colIdx = data1.column.index;\r\n            if (rowIdx === 0 && colIdx === 0) {\r\n                let x = data1.cursor.x + 2\r\n                let y = data1.cursor.y + 9\r\n                doc.setFontSize(8)\r\n                doc.setFont(undefined, 'bold')\r\n                doc.text('GSTIN No: ', x, y)\r\n            };\r\n            if (rowIdx === 1 && colIdx === 0) {\r\n                let x = data1.cursor.x + 2\r\n                let y = data1.cursor.y + 9\r\n                doc.setFontSize(8)\r\n                doc.setFont(undefined, 'bold')\r\n                doc.text('FSSAI No: ', x, y)\r\n            };\r\n\r\n\r\n\r\n        },\r\n        margin: {\r\n            top: 45, left: 292, right: 35,\r\n        },\r\n        showHead: 'always',\r\n        theme: 'plain',\r\n        styles: {\r\n            overflow: 'linebreak',\r\n            fontSize: 8,\r\n            height: 0,\r\n        },\r\n        bodyStyles: {\r\n            columnWidth: 'wrap',\r\n            textColor: [30, 30, 30],\r\n            cellPadding: data.PrintType ? 1 : 2,\r\n            fontSize: 8,\r\n            fontStyle: 'normal',\r\n            lineColor: [0, 0, 0]\r\n        },\r\n        columnStyles: {\r\n            0: {\r\n                valign: \"top\",\r\n                columnWidth: 270,\r\n                halign: 'lfet',\r\n            },\r\n        },\r\n        tableLineColor: \"black\",\r\n        startY: 63,\r\n    };\r\n\r\n\r\n    const priLength = () => {\r\n        let final_y = doc.previousAutoTable.finalY\r\n        if (final_y > initial_y) {\r\n            initial_y = final_y\r\n        }\r\n\r\n    }\r\n\r\n    doc.autoTable(table.BilledBy, table.BilledByRow(data), BilledByStyle);\r\n    priLength()\r\n\r\n    doc.autoTable(table.BilledTo, table.BilledToRow(data), BilledToStyle);\r\n    priLength()\r\n\r\n    doc.line(290, initial_y, 290, 63);//Vertical line \r\n\r\n\r\n}\r\n\r\nexport const reportHeder3 = (doc, data) => {\r\n\r\n    doc.line(570, 32, 408, 32);//horizontal Line repeat on next page\r\n    doc.line(570, 47, 408, 47);//horizontal Line repeat on next pagef\r\n    doc.setFont('Tahoma')\r\n    doc.setFontSize(10)\r\n    doc.setFont(undefined, 'bold')\r\n    doc.text(`From Date:  ${date_dmy_func(data.Period.FromDate)}`, 415, 26)\r\n    doc.text(`To Date:       ${date_dmy_func(data.Period.ToDate)}`, 415, 42)\r\n    doc.text(`Claim ID:       ${data.Period.ClaimID}`, 415, 58)\r\n\r\n\r\n}\r\n\r\nexport const tableBody = (doc, data) => {\r\n    var options = {\r\n        didParseCell: (data1) => {\r\n            if (data1.row.cells[1].raw === \"Total\") {\r\n                data1.row.cells[0].colSpan = 2\r\n\r\n                data1.row.cells[0].styles.fontSize = 7\r\n                data1.row.cells[2].styles.fontSize = 7\r\n                data1.row.cells[3].styles.fontSize = 7\r\n\r\n                data1.row.cells[1].styles.fontSize = 7\r\n                data1.row.cells[9].styles.fontSize = 7\r\n                data1.row.cells[10].styles.fontSize = 7\r\n                data1.row.cells[11].styles.fontSize = 7\r\n\r\n                data1.row.cells[0].styles.fontStyle = \"bold\"\r\n                data1.row.cells[2].styles.fontStyle = \"bold\"\r\n                data1.row.cells[3].styles.fontStyle = \"bold\"\r\n\r\n                data1.row.cells[1].styles.fontStyle = \"bold\"\r\n                data1.row.cells[9].styles.fontStyle = \"bold\"\r\n                data1.row.cells[10].styles.fontStyle = \"bold\"\r\n                data1.row.cells[11].styles.fontStyle = \"bold\"\r\n\r\n            }\r\n\r\n\r\n\r\n        },\r\n        margin: {\r\n            left: 30, right: 25, top: 63,\r\n        },\r\n        theme: 'grid',\r\n        headerStyles: {\r\n            cellPadding: 2,\r\n            lineWidth: 1,\r\n            valign: 'top',\r\n            fontStyle: 'bold',\r\n            halign: 'center',    //'center' or 'right'\r\n            fillColor: \"white\",\r\n            textColor: [0, 0, 0], //Black     \r\n            fontSize: 7,\r\n            rowHeight: 10,\r\n            lineColor: [0, 0, 0]\r\n        },\r\n        bodyStyles: {\r\n            textColor: [30, 30, 30],\r\n            cellPadding: 3,\r\n            fontSize: 7,\r\n            columnWidth: 'wrap',\r\n            lineColor: [0, 0, 0],\r\n        },\r\n        columnStyles: {\r\n\r\n            0: {\r\n                valign: \"top\",\r\n                columnWidth: 110,\r\n            },\r\n            1: {\r\n                columnWidth: 35,\r\n                halign: 'right',\r\n            },\r\n            2: {\r\n                columnWidth: 40,\r\n                halign: 'right',\r\n            },\r\n            3: {\r\n                columnWidth: 40,\r\n                halign: 'right',\r\n            },\r\n            4: {\r\n                columnWidth: 35,\r\n                halign: 'right',\r\n            },\r\n            5: {\r\n                columnWidth: 40,\r\n                halign: 'right',\r\n            },\r\n\r\n            6: {\r\n                columnWidth: 40,\r\n                halign: 'right',\r\n            },\r\n            7: {\r\n                columnWidth: 40,\r\n                halign: 'right',\r\n            },\r\n            8: {\r\n                columnWidth: 40,\r\n                halign: 'right',\r\n            },\r\n            9: {\r\n                columnWidth: 40,\r\n                halign: 'right',\r\n            },\r\n            10: {\r\n                columnWidth: 40,\r\n                halign: 'right',\r\n            },\r\n            11: {\r\n                columnWidth: 40,\r\n                halign: 'right',\r\n            },\r\n\r\n        },\r\n        tableLineColor: \"black\",\r\n        startY: initial_y,\r\n    };\r\n\r\n    doc.autoTable(table.columns, table.Rows(data), options,);\r\n    const optionsTable4 = {\r\n        margin: {\r\n            left: 30, right: 30, bottom: 140\r\n        },\r\n    };\r\n    doc.autoTable(optionsTable4);\r\n\r\n}\r\n\r\nexport const reportFooter = (doc, data) => {\r\n\r\n    // doc.addImage(upi_qr_code, 'PNG', 359, 747, 75, 65)\r\n    doc.setDrawColor(0, 0, 0);\r\n    doc.line(570, 730, 30, 730);//horizontal line Footer 1\r\n    doc.line(435, 745, 30, 745);//horizontal line Footer 2\r\n    doc.line(435, 775, 30, 775);//horizontal line Footer 3\r\n    doc.line(435, 795, 30, 795);//horizontal line Footer 3\r\n\r\n    doc.line(435, 730, 435, 815);//vertical right Sub Total\r\n    // doc.line(360, 745, 360, 815);//vertical right Qr Code    /////////////////\r\n    doc.setFont('Tahoma')\r\n\r\n    const a = data.ClaimSummaryItemDetails.map((data) => ({\r\n\r\n        CGST: Number(data.CGST),\r\n        SGST: Number(data.SGST),\r\n        Amount: Number(data.Amount),\r\n        Discount: Number(data.DiscountAmount),\r\n\r\n    }));\r\n    var totalCGST = 0;\r\n    var totalSGST = 0;\r\n    var TotalAmount = 0;\r\n    var TotalDiscount = 0\r\n\r\n    a.forEach(arg => {\r\n        totalCGST += arg.CGST;\r\n        totalSGST += arg.SGST;\r\n        TotalAmount += arg.Amount;\r\n        TotalDiscount += arg.Discount;\r\n\r\n    });\r\n    const TotalGST = totalCGST + totalSGST;\r\n    // const GrandTotal = TotalGST + TotalAmount;\r\n    let stringNumber = toWords(Number(TotalAmount))\r\n\r\n\r\n    doc.setFontSize(8)\r\n\r\n\r\n    doc.text(`Total Amount:`, 440, 738,)\r\n    doc.text(`${numberWithCommas(Number(TotalAmount).toFixed(2))}`, 567, 738, 'right')\r\n\r\n    doc.text(`Total Disc:`, 440, 748,)\r\n    doc.text(` ${numberWithCommas(Number(TotalDiscount).toFixed(2))}`, 567, 748, 'right')\r\n\r\n    doc.text(`Total CGST:`, 440, 758)\r\n    doc.text(`${numberWithCommas(Number(totalCGST).toFixed(2))}`, 567, 758, 'right')\r\n\r\n    doc.text(`Total SGST:`, 440, 768,)\r\n    doc.text(`${numberWithCommas(Number(totalSGST).toFixed(2))}`, 567, 768, 'right')\r\n\r\n    doc.text(`Total GST:`, 440, 778,)\r\n    doc.text(` ${numberWithCommas(Number(TotalGST).toFixed(2))}`, 567, 778, 'right')\r\n\r\n\r\n    doc.setFont(undefined, 'Normal')\r\n    doc.setFontSize(10)\r\n    doc.setFont(undefined, 'bold')\r\n    doc.text(`Total Amount :`, 440, 812,)\r\n\r\n\r\n    const Total = numberWithCommas((TotalAmount).toFixed(2))\r\n    doc.text(`${Total}`, 567, 812, 'right')\r\n    doc.setFont(undefined, 'Normal')\r\n    doc.setFont('Tahoma')\r\n    doc.setFontSize(9)\r\n    doc.setFont('Tahoma')\r\n    doc.setFontSize(8)\r\n    doc.setFont(\"Arimo\");\r\n    // doc.text(`I/we hearby certify that food/foods mentioned in this invoice is/are warranted to be\r\n    //      of the nature and quantity which it/these purports to be `, 34, 782)\r\n    doc.setFontSize(10)\r\n    doc.text(`Signature `, 280, 810,)\r\n    doc.text(`Prepared by :${data.PartyDetails.PartyName} `, 35, 810,)\r\n    doc.setFontSize(8)\r\n    doc.text(`${stringNumber}`, 65, 740,)\r\n\r\n\r\n    doc.setFont(undefined, 'bold')\r\n    doc.text(`Rupees:`, 33, 740,)\r\n    doc.addFont(\"Arial\", 'Normal')\r\n    doc.setFont(\"Arimo\");\r\n\r\n\r\n    let ReturnReasonDetails = {\r\n        margin: {\r\n            top: 45, left: 30, right: 35,\r\n        },\r\n        showHead: 'always',\r\n        theme: 'plain',\r\n        styles: {\r\n            overflow: 'linebreak',\r\n            fontSize: 8,\r\n            height: 0,\r\n        },\r\n        bodyStyles: {\r\n            columnWidth: 'wrap',\r\n            textColor: [30, 30, 30],\r\n            cellPadding: 4,\r\n            fontSize: 8,\r\n            fontStyle: 'bold',\r\n            lineColor: [0, 0, 0]\r\n        },\r\n        columnStyles: {\r\n            0: {\r\n                valign: \"top\",\r\n                columnWidth: 250,\r\n                halign: 'lfet',\r\n            },\r\n\r\n        },\r\n        tableLineColor: \"black\",\r\n\r\n        startY: 745,\r\n\r\n    };\r\n\r\n    // doc.autoTable(table.Return, table.ReturnReason(data), ReturnReasonDetails);\r\n}\r\n\r\n\r\nexport const pageFooter = (doc, data) => {\r\n\r\n    const pageCount = doc.internal.getNumberOfPages()\r\n    doc.setFont('helvetica', 'Normal')\r\n    doc.setFontSize(8)\r\n    for (var i = 1; i <= pageCount; i++) {\r\n        doc.setPage(i)\r\n        pageHeder(doc, data)\r\n        pageBorder(doc, data)\r\n        reportHeder3(doc, data)\r\n        doc.setFont('helvetica', 'Normal')\r\n        doc.text('Page ' + String(i) + ' of ' + String(pageCount), 520, 828,)\r\n        doc.text('Print Date :' + String(currentDate_dmy) + ' Time ' + String(CurrentTime()), 30, 828,)\r\n\r\n    }\r\n}\r\n\r\n// original","D:\\Rohit\\Git projects\\Manthan\\src\\Reports\\CustomerWiseReturnReport\\DemoData.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\Reports\\CompanyWiseBugetReport\\DemoData.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\Reports\\CompanyWiseBugetReport\\ReportStyle.js",["4341"],"\r\nimport { CurrentTime, currentDate_dmy, date_dmy_func } from '../../components/Common/CommonFunction';\r\nimport { numberWithCommas } from '../Report_common_function';\r\nimport * as table from './TableData'\r\nlet initial_y = 0\r\n\r\n\r\nexport const pageBorder = (doc) => {\r\n    doc.line(570, 25, 30, 25);//horizontal line (Top)\r\n    doc.line(30, 815, 30, 25);//vertical line (left)\r\n    doc.line(570, 815, 570, 25);//vertical line (Right)\r\n    doc.line(570, 815, 30, 815);//horizontal line (Bottom)   \r\n}\r\n\r\n\r\n\r\nexport const reportHeder1 = (doc, data) => {\r\n\r\n    doc.setFontSize(18)\r\n    doc.text(`Chitale Bandhu Mithalwale`, 300, 45, 'center')\r\n    doc.setFontSize(12)\r\n    doc.setFont(undefined, 'bold')\r\n    doc.text(`Claim ID : ${data.Period.ClaimID}`, 450, 40)\r\n\r\n}\r\n\r\n\r\nexport const pageHeder = (doc, data) => {\r\n\r\n    const StartDate = date_dmy_func(data.Period.FromDate).split('-');\r\n    const EndDate = date_dmy_func(data.Period.ToDate).split('-');\r\n    const monthIndex = parseInt(StartDate[1]) - 1;\r\n    const months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\r\n    const monthName = months[monthIndex];\r\n\r\n    doc.setDrawColor(0, 0, 0);\r\n    doc.setFont('Arial')\r\n\r\n    doc.setFont(undefined, 'bold')\r\n    doc.setFontSize(11)\r\n    doc.text(`${data.Period.PartyName}`, 300, 65, 'center')\r\n    doc.setFont(undefined, 'normal')\r\n\r\n    doc.text(`Company wise Budget Report From ${StartDate[0]}-${monthName} To ${EndDate[0]}-${monthName} `, 300, 75, 'center')\r\n    doc.text(`Expiry From Retailer(Approved/NonApproved)`, 300, 85, 'center')\r\n    // doc.text(`GT And Xpress Claim`, 300, 95, 'center')\r\n    doc.line(570, 52, 30, 52);//horizontal Line Below Name\r\n}\r\nexport const tableBody = (doc, data) => {\r\n    let tableStartY = 100;\r\n\r\n    data.ReasonwiseMasterClaim.forEach((index1) => {\r\n\r\n        Object.keys(index1).forEach((index2) => {\r\n            doc.setFont(undefined, 'bold')\r\n            doc.text(`${index2}`, 300, (tableStartY - 5), 'center')\r\n\r\n            const options = {\r\n\r\n                didParseCell: (data1) => {\r\n\r\n                    if (data1.row.cells[0].raw === \"Total\") {\r\n\r\n                        data1.row.cells[1].styles.fontSize = 8\r\n                        data1.row.cells[2].styles.fontSize = 8\r\n                        data1.row.cells[3].styles.fontSize = 8\r\n                        data1.row.cells[4].styles.fontSize = 8\r\n                        data1.row.cells[5].styles.fontSize = 8\r\n                        data1.row.cells[6].styles.fontSize = 8\r\n                        data1.row.cells[7].styles.fontSize = 8\r\n                        data1.row.cells[0].styles.fontStyle = \"bold\"\r\n                        data1.row.cells[1].styles.fontStyle = \"bold\"\r\n                        data1.row.cells[2].styles.fontStyle = \"bold\"\r\n                        data1.row.cells[3].styles.fontStyle = \"bold\"\r\n                        data1.row.cells[4].styles.fontStyle = \"bold\"\r\n                        data1.row.cells[5].styles.fontStyle = \"bold\"\r\n                        data1.row.cells[6].styles.fontStyle = \"bold\"\r\n                        data1.row.cells[7].styles.fontStyle = \"bold\"\r\n                        data1.row.cells[0].rowSpan = 1\r\n                    }\r\n\r\n                    if (data1.cell.raw === numberWithCommas(Number(index1[index2][0].PurchaseAmount).toFixed(2))) {\r\n\r\n                        if (data1.row.cells[0].raw === \"Total\") {\r\n\r\n                            data1.row.cells[1].styles.valign = \"top\"\r\n                        } else {\r\n                            data1.row.cells[1].styles.halign = \"right\"\r\n                            data1.row.cells[1].styles.valign = \"center\"\r\n\r\n                            data1.row.cells[1].rowSpan = index1[index2].length\r\n                        }\r\n                    }\r\n                    if (data1.cell.raw === numberWithCommas(Number(index1[index2][0].SaleAmount).toFixed(2))) {\r\n\r\n                        if (data1.row.cells[0].raw === \"Total\") {\r\n\r\n                            data1.row.cells[2].styles.valign = \"top\"\r\n                        } else {\r\n                            data1.row.cells[2].styles.halign = \"right\"\r\n                            data1.row.cells[2].styles.valign = \"center\"\r\n                            data1.row.cells[2].rowSpan = index1[index2].length\r\n                        }\r\n                    }\r\n                    if (data1.row.index === 0) {\r\n\r\n                        if (data1.row.cells[4].raw === numberWithCommas(Number(index1[index2][0].NetSaleValue).toFixed(2))) {\r\n\r\n                            data1.row.cells[4].text[0] = `${numberWithCommas(Number(index1[index2].TotalNetPurchaseValue).toFixed(2))}`\r\n                            data1.row.cells[4].styles.halign = \"right\"\r\n                            data1.row.cells[4].styles.valign = \"center\"\r\n\r\n                            data1.row.cells[4].rowSpan = index1[index2].length\r\n                        }\r\n                    }\r\n\r\n\r\n\r\n                },\r\n                margin: {\r\n                    left: 30, right: 25,//200 bottom\r\n                },\r\n                theme: 'grid',\r\n                headerStyles: {\r\n                    cellPadding: 4,\r\n                    lineWidth: 0.5,\r\n                    valign: 'top',\r\n                    fontStyle: 'bold',\r\n                    halign: 'center',    //'center' or 'right'\r\n                    fillColor: \"white\",\r\n                    textColor: [0, 0, 0], //Black     \r\n                    fontSize: 8,\r\n                    rowHeight: 10,\r\n                    lineColor: \"black\"\r\n                },\r\n                bodyStyles: {\r\n                    textColor: [30, 30, 30],\r\n                    cellPadding: 3,\r\n                    fontSize: 7,\r\n                    columnWidth: 'wrap',\r\n                    lineColor: [0, 0, 0],\r\n                },\r\n                columnStyles: {\r\n                    0: {\r\n                        valign: \"top\",\r\n                        columnWidth: 125,\r\n                    },\r\n                    1: {\r\n                        columnWidth: 70,\r\n                        halign: 'right',\r\n\r\n                    },\r\n                    2: {\r\n                        columnWidth: 70,\r\n                        halign: 'right',\r\n                    },\r\n                    3: {\r\n                        columnWidth: 55,\r\n                        halign: 'right',\r\n                    },\r\n                    4: {\r\n                        columnWidth: 55,\r\n                        halign: 'right',\r\n                    },\r\n                    5: {\r\n                        columnWidth: 55,\r\n                        halign: 'right',\r\n                    },\r\n                    6: {\r\n                        columnWidth: 55,\r\n                        halign: 'right',\r\n                    },\r\n                    7: {\r\n                        columnWidth: 55,\r\n                        halign: 'right',\r\n                    },\r\n                    8: {\r\n                        columnWidth: 55,\r\n                        halign: 'right',\r\n                    },\r\n                },\r\n                startY: tableStartY,\r\n            }\r\n            doc.autoTable(table.columns, table.Rows(index1[index2]), options);\r\n            tableStartY = doc.previousAutoTable.finalY + 20;\r\n        })\r\n    })\r\n    const ProductWiseoptions = {\r\n        didParseCell: (data1) => {\r\n            if (data1.row.cells[0].raw === \"Total\") {\r\n                data1.row.cells[1].styles.fontSize = 8\r\n                data1.row.cells[2].styles.fontSize = 8\r\n                data1.row.cells[3].styles.fontSize = 8\r\n                data1.row.cells[4].styles.fontSize = 8\r\n                data1.row.cells[5].styles.fontSize = 8\r\n                data1.row.cells[6].styles.fontSize = 8\r\n                data1.row.cells[7].styles.fontSize = 8\r\n\r\n                data1.row.cells[0].styles.fontStyle = \"bold\"\r\n                data1.row.cells[1].styles.fontStyle = \"bold\"\r\n                data1.row.cells[2].styles.fontStyle = \"bold\"\r\n                data1.row.cells[3].styles.fontStyle = \"bold\"\r\n                data1.row.cells[4].styles.fontStyle = \"bold\"\r\n                data1.row.cells[5].styles.fontStyle = \"bold\"\r\n                data1.row.cells[6].styles.fontStyle = \"bold\"\r\n                data1.row.cells[7].styles.fontStyle = \"bold\"\r\n\r\n            }\r\n\r\n        },\r\n        margin: {\r\n            left: 30, right: 25, top: 60\r\n        },\r\n        theme: 'grid',\r\n        headerStyles: {\r\n            cellPadding: 4,\r\n            lineWidth: 0.5,\r\n            valign: 'top',\r\n            fontStyle: 'bold',\r\n            halign: 'center',\r\n            fillColor: \"white\",\r\n            textColor: [0, 0, 0],\r\n            fontSize: 8,\r\n            rowHeight: 10,\r\n            lineColor: \"black\"\r\n        },\r\n        bodyStyles: {\r\n            textColor: [30, 30, 30],\r\n            cellPadding: 3,\r\n            fontSize: 7,\r\n            columnWidth: 'wrap',\r\n            lineColor: [0, 0, 0],\r\n        },\r\n        columnStyles: {\r\n\r\n            0: {\r\n                columnWidth: 125,\r\n                halign: 'left',\r\n\r\n            },\r\n            1: {\r\n                columnWidth: 70,\r\n                halign: 'right',\r\n            },\r\n            2: {\r\n                columnWidth: 70,\r\n                halign: 'right',\r\n            },\r\n            3: {\r\n                columnWidth: 55,\r\n                halign: 'right',\r\n            },\r\n            4: {\r\n                columnWidth: 55,\r\n                halign: 'right',\r\n            },\r\n            5: {\r\n                columnWidth: 55,\r\n                halign: 'right',\r\n            },\r\n            6: {\r\n                columnWidth: 55,\r\n                halign: 'right',\r\n            },\r\n            7: {\r\n                columnWidth: 55,\r\n                halign: 'right',\r\n            },\r\n            8: {\r\n                columnWidth: 55,\r\n                halign: 'right',\r\n            },\r\n        },\r\n        tableLineColor: \"black\",\r\n        startY: doc.previousAutoTable.finalY + 20,\r\n    }\r\n\r\n    doc.setFont(undefined, 'bold')\r\n    doc.text(`Product Wise Budget Report`, 300, doc.previousAutoTable.finalY + 14, 'center')\r\n    doc.autoTable(table.ProductWisecolumns, table.ProductWiseRows(data), ProductWiseoptions);\r\n}\r\n\r\nexport const pageFooter = (doc, data) => {\r\n    const pageCount = doc.internal.getNumberOfPages()\r\n    doc.setFont('helvetica', 'Normal')\r\n    for (var i = 1; i <= pageCount; i++) {\r\n        doc.setPage(i)\r\n        doc.setFont(undefined, 'bold')\r\n\r\n        pageBorder(doc, data)\r\n        reportHeder1(doc, data)\r\n        doc.setFont(undefined, 'normal')\r\n        doc.setFontSize(8)\r\n\r\n\r\n        doc.text('Page ' + String(i) + ' of ' + String(pageCount), 520, 824,)\r\n        doc.text('Print Date :' + String(currentDate_dmy) + ' Time ' + String(CurrentTime()), 30, 824,)\r\n    }\r\n}\r\n\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\Reports\\CustomerWiseReturnReport\\TableData.js",["4342"],"import { date_dmy_func } from \"../../components/Common/CommonFunction\";\r\nimport { numberWithCommas } from \"../Report_common_function\";\r\n\r\nexport const columns = [\r\n    \"Date \",\r\n    \"Doc No\",\r\n    \"Customer Name\",\r\n    \"Item Name\",\r\n    \"MRP \",\r\n    \"Return Quantity\",\r\n    \"Approve Quantity\",\r\n    \"Rate Without GST\",\r\n    \"Discount Amount\",\r\n    \"Taxable Amount\",\r\n    \"GST %\",\r\n    \"GST Amount\",\r\n    \"Amount\",\r\n];\r\n\r\n\r\n\r\nexport const Footercolumn = [\r\n    \"\",\r\n]\r\nexport const Return = [\r\n    \"Return\",\r\n]\r\nexport const BilledBy = [\r\n    \"Billed by\",\r\n]\r\nexport const BilledTo = [\r\n    \"Billed by\",\r\n]\r\nexport const DetailsOfTransport = [\r\n    \"Billed by\",\r\n]\r\n\r\nexport const Bankcolumn = [\r\n    \"\",\r\n    \"\",\r\n    \"\",\r\n]\r\n\r\nexport const Rows = (data) => {\r\n\r\n    const { ClaimSummaryItemDetails = [] } = data\r\n    function extractNumber(fullReturnNumber) {\r\n        const match = fullReturnNumber.match(/\\d+/);\r\n        return match ? parseInt(match[0]) : 0;\r\n    }\r\n    ClaimSummaryItemDetails.sort((a, b) => extractNumber(a.FullReturnNumber) - extractNumber(b.FullReturnNumber));\r\n\r\n    const returnArr = [];\r\n    let Gst = 0\r\n    let totalTaxableAmount = 0\r\n    let totalGst = 0\r\n    let totalAmount = 0\r\n    let totalQuantity = 0\r\n    let totalApprovedQuantity = 0\r\n\r\n\r\n\r\n\r\n    let GSTPercentage = 0\r\n\r\n    ClaimSummaryItemDetails.forEach((element, key) => {\r\n\r\n        const TotalGST = (Number(element.CGST)) + (Number(element.SGST))\r\n        const tableitemRow = [\r\n            `${date_dmy_func(element.ReturnDate)}`,\r\n            `${(element.FullReturnNumber)}`,\r\n            `${(element.CustomerName)}`,\r\n            `${(element.ItemName)}`,\r\n            `${numberWithCommas(Number(element.MRP).toFixed(2))}`,\r\n            `${numberWithCommas(Number(element.Quantity).toFixed(2))}`,\r\n            `${numberWithCommas(Number(element.ApprovedQuantity).toFixed(2))}`,\r\n            `${numberWithCommas(Number(element.Rate).toFixed(2))}`,\r\n            `${numberWithCommas(Number(element.DiscountAmount).toFixed(2))}`,\r\n            `${numberWithCommas(Number(element.TaxableAmount).toFixed(2))}`,\r\n            `${numberWithCommas(Number(element.GST).toFixed(2))}%`,\r\n            `${numberWithCommas(Number(TotalGST).toFixed(2))}`,\r\n            `${numberWithCommas(Number(element.Amount).toFixed(2))}`,\r\n        ];\r\n\r\n        function totalLots() {\r\n            totalQuantity = Number(totalQuantity) + Number(element.Quantity)\r\n            totalApprovedQuantity = Number(totalApprovedQuantity) + Number(element.ApprovedQuantity)\r\n            totalTaxableAmount = Number(totalTaxableAmount) + Number(element.TaxableAmount)\r\n            totalGst = Number(totalGst) + Number(TotalGST)\r\n            totalAmount = Number(totalAmount) + Number(element.Amount);\r\n            GSTPercentage = Number(element.GST)\r\n\r\n        };\r\n\r\n        function totalrow() {\r\n\r\n            return [\r\n                `Total`,\r\n                ` `,\r\n                ``,\r\n                ``,\r\n                ``,\r\n                `${numberWithCommas(Number(totalQuantity).toFixed(2))}`,\r\n                `${numberWithCommas(Number(totalApprovedQuantity).toFixed(2))}`,\r\n                ``,\r\n                ``,\r\n                `${numberWithCommas(Number(totalTaxableAmount).toFixed(2))}`,\r\n                ``,\r\n                `${numberWithCommas(Number(totalGst).toFixed(2))}`,\r\n                `${numberWithCommas(Number(totalAmount).toFixed(2))}`,\r\n\r\n            ];\r\n        };\r\n\r\n\r\n        if (Gst === 0) { Gst = element.GST };\r\n        let aa = { TotalCGst: 0, totalSGst: 0 }\r\n        if (data[\"tableTot\"] === undefined) { data[\"tableTot\"] = aa }\r\n\r\n        if ((Gst === element.GST)) {\r\n            data[\"tableTot\"] = totalLots()\r\n            returnArr.push(tableitemRow)\r\n\r\n        }\r\n\r\n\r\n        else {\r\n            // returnArr.push(totalrow());\r\n            returnArr.push(tableitemRow);\r\n\r\n            data[\"tableTot\"] = totalLots()\r\n            Gst = element.GST;\r\n        }\r\n        if (key === ClaimSummaryItemDetails.length - 1) {\r\n            returnArr.push(totalrow());\r\n        }\r\n    })\r\n    return returnArr;\r\n}\r\n\r\n\r\nexport const BilledByRow = (data) => {\r\n\r\n    var BilledByArray = [\r\n        [`                  ${data.PartyDetails.PartyName}`],\r\n        [`                  ${data.PartyDetails.Address}`],\r\n        [`                  ${data.PartyDetails.MobileNo}`],\r\n    ]\r\n    return BilledByArray;\r\n}\r\nexport const BilledToRow = (data) => {\r\n\r\n    var BilledToArray = [\r\n        [`                   ${data.PartyDetails.GSTIN}`],\r\n        [`                  ${data.PartyDetails.FSSAINo}`],\r\n    ]\r\n\r\n    return BilledToArray;\r\n}\r\nexport const DetailsOfTransportRow = (data) => {\r\n\r\n    var DetailsOfTransportArray = [\r\n\r\n        [`Claim No: {}`],\r\n        [`Period :`],\r\n\r\n    ]\r\n\r\n    return DetailsOfTransportArray;\r\n}\r\n\r\nexport const ReturnReason = (data) => {\r\n\r\n    var ReturnReasonArray = [\r\n        [`Return Reason :${data.ReturnReason === null ? \"\" : data.ReturnReason}`],\r\n    ]\r\n\r\n    return ReturnReasonArray;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\Reports\\CompanyWiseBugetReport\\TableData.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\Reports\\ClaimReportSummary\\TableData.js",["4343","4344","4345"],"import { numberWithCommas } from \"../Report_common_function\";\r\n\r\n\r\nexport const columns = [\r\n    \"Item Name\",\r\n    \"MRP\",\r\n    \"Return Quantity\",\r\n    \"Approve Quantity\",\r\n    \"GST %\",\r\n    \"Rate without GST \",\r\n    \"Discount %\",\r\n    \"Discount Amount\",\r\n    \"Taxable Amount\",\r\n    \"CGST Amount\",\r\n    \"SGST Amount\",\r\n    \"Amount\",\r\n];\r\n\r\n\r\n\r\n\r\nexport const Footercolumn = [\r\n    \"\",\r\n]\r\nexport const Return = [\r\n    \"Return\",\r\n]\r\nexport const BilledBy = [\r\n    \"Billed by\",\r\n]\r\nexport const BilledTo = [\r\n    \"Billed by\",\r\n]\r\nexport const DetailsOfTransport = [\r\n    \"Billed by\",\r\n]\r\n\r\nexport const Bankcolumn = [\r\n    \"\",\r\n    \"\",\r\n    \"\",\r\n]\r\n\r\nexport const Rows = (data) => {\r\n\r\n    const { ClaimSummaryItemDetails = [] } = data\r\n    ClaimSummaryItemDetails.sort((firstItem, secondItem) => firstItem.GSTPercentage - secondItem.GSTPercentage);\r\n    const returnArr = [];\r\n    let Gst = 0\r\n    let totalBasicAmount = 0\r\n    let totalCGst = 0\r\n    let totalSGst = 0\r\n    let totalAmount = 0\r\n    let totalReturnQuantity = 0\r\n    let totalApproveQuantity = 0\r\n    let SrNO = 1\r\n    let TotalGst = 0\r\n    let GSTPercentage = 0\r\n\r\n\r\n    ClaimSummaryItemDetails.forEach((element, key) => {\r\n\r\n        const tableitemRow = [\r\n            `${element.ItemName}`,\r\n            `${numberWithCommas(Number(element.MRP).toFixed(2))}`,\r\n            `${numberWithCommas(Number(element.Quantity).toFixed(2))}`,\r\n            `${numberWithCommas(Number(element.ApprovedQuantity).toFixed(2))}`,\r\n            `${numberWithCommas(Number(element.GST).toFixed(2))}%`,\r\n            `${numberWithCommas(Number(element.Rate).toFixed(2))}`,\r\n            `${numberWithCommas(Number(element.Discount).toFixed(2))}`,\r\n            `${numberWithCommas(Number(element.DiscountAmount).toFixed(2))}`,\r\n            `${numberWithCommas(Number(element.TaxableAmount).toFixed(2))}`,\r\n            `${numberWithCommas(Number(element.CGST).toFixed(2))}`,\r\n            `${numberWithCommas(Number(element.SGST).toFixed(2))}`,\r\n            `${numberWithCommas(Number(element.Amount).toFixed(2))}`,\r\n        ];\r\n\r\n        function totalLots() {\r\n            totalReturnQuantity = Number(totalReturnQuantity) + Number(element.Quantity)\r\n            totalApproveQuantity = Number(totalApproveQuantity) + Number(element.ApprovedQuantity)\r\n            totalCGst = Number(totalCGst) + Number(element.CGST)\r\n            totalSGst = Number(totalSGst) + Number(element.SGST)\r\n            totalAmount = Number(totalAmount) + Number(element.Amount)\r\n            TotalGst = totalCGst + totalSGst;\r\n            GSTPercentage = Number(element.GST)\r\n            let cgst = data[\"tableTot\"].TotalCGst\r\n            return ({ TotalCGst: Number(totalCGst) + Number(cgst) })\r\n\r\n        };\r\n\r\n        function totalrow() {\r\n\r\n            return [\r\n                `GST ${(Number(GSTPercentage))}% Total`,\r\n                `Total`,\r\n                ` ${numberWithCommas(Number(totalReturnQuantity).toFixed(2))}`,\r\n                `${numberWithCommas(Number(totalApproveQuantity).toFixed(2))}`,\r\n                ``,\r\n                ``,\r\n                ``,\r\n                ``,\r\n                ``,\r\n                `${numberWithCommas(Number(totalCGst).toFixed(2))}`,\r\n                `${numberWithCommas(Number(totalSGst).toFixed(2))}`,\r\n                `${numberWithCommas(Number(totalAmount).toFixed(2))}`,\r\n\r\n            ];\r\n        };\r\n\r\n        if (Gst === 0) { Gst = element.GST };\r\n        let aa = { TotalCGst: 0, totalSGst: 0 }\r\n        if (data[\"tableTot\"] === undefined) { data[\"tableTot\"] = aa }\r\n\r\n        if ((Gst === element.GST)) {\r\n            data[\"tableTot\"] = totalLots()\r\n            returnArr.push(tableitemRow)\r\n        }\r\n\r\n\r\n        else {\r\n            returnArr.push(totalrow());\r\n            returnArr.push(tableitemRow);\r\n            totalBasicAmount = 0\r\n            totalCGst = 0\r\n            totalSGst = 0\r\n            totalAmount = 0\r\n            totalReturnQuantity = 0\r\n            totalApproveQuantity = 0\r\n            data[\"tableTot\"] = totalLots()\r\n            Gst = element.GST;\r\n        }\r\n        if (key === ClaimSummaryItemDetails.length - 1) {\r\n            returnArr.push(totalrow());\r\n        }\r\n    })\r\n    return returnArr;\r\n}\r\n\r\n\r\nexport const BilledByRow = (data) => {\r\n\r\n    var BilledByArray = [\r\n        [`                   ${data.PartyDetails.PartyName}`],\r\n        [`                 ${data.PartyDetails.Address}`],\r\n        [`                   ${data.PartyDetails.MobileNo}`],\r\n    ]\r\n    return BilledByArray;\r\n}\r\nexport const BilledToRow = (data) => {\r\n\r\n\r\n    var BilledToArray = [\r\n        [`                   ${data.PartyDetails.GSTIN}`],\r\n        [`                  ${data.PartyDetails.FSSAINo}`],\r\n    ]\r\n\r\n    return BilledToArray;\r\n}\r\nexport const DetailsOfTransportRow = (data) => {\r\n\r\n    var DetailsOfTransportArray = [\r\n\r\n        [`Claim No: {}`],\r\n        [`Period :`],\r\n\r\n    ]\r\n\r\n    return DetailsOfTransportArray;\r\n}\r\n\r\nexport const ReturnReason = (data) => {\r\n\r\n    var ReturnReasonArray = [\r\n        [`Return Reason :${data.ReturnReason === null ? \"\" : data.ReturnReason}`],\r\n    ]\r\n\r\n    return ReturnReasonArray;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Report\\ClaimSummary\\saga.js",["4346","4347","4348","4349"],"import { call, put, takeLatest } from \"redux-saga/effects\";\r\nimport {\r\n    CLAIM_LIST_API,\r\n    DELETE_CLAIM_ID,\r\n    POST_CLAIM_CREATE_SUMMARY_API,\r\n    POST_ORDER_SUMMARY_API,\r\n} from \"./actionType\";\r\nimport { MasterClaimCreatApiErrorAction, OrderSummaryApiErrorAction, claimList_API_Success, deleteClaimSuccess, postMasterClaimCreat_API_Success, postOrderSummary_API_Success } from \"./action\";\r\nimport { ClaimList_API, MasterClaimCreate_API, OderSummary_GoBtn_API, delete_Claim_API } from \"../../../helpers/backend_helper\";\r\nimport { loginPartyID } from \"../../../components/Common/CommonFunction\";\r\n\r\nfunction* MasterClaimCreat_GenFunc({ config }) {\r\n\r\n    try {\r\n        const response = yield call(MasterClaimCreate_API, config);\r\n        yield put(postMasterClaimCreat_API_Success(response))\r\n    } catch (error) { yield put(MasterClaimCreatApiErrorAction()) }\r\n}\r\n\r\nfunction* ClaimList_GenFunc({ config }) {\r\n    const Party_ID = loginPartyID()\r\n    try {\r\n        const response = yield call(ClaimList_API, config);\r\n        let NewResponse = []\r\n        if (config.Type === \"List\") {\r\n\r\n            for (const item of response.Data) {\r\n                if (item.id !== null) {\r\n                    let isDeleteDisable = false\r\n\r\n                    if (item.PartyID === Party_ID) {\r\n                        isDeleteDisable = true\r\n                    }\r\n\r\n                    const newItem = {\r\n                        ...item,\r\n                        MonthStartDate: config.MonthStartDate,\r\n                        MonthEndDate: config.MonthEndDate,\r\n                        forceDeleteHide: isDeleteDisable,\r\n\r\n                    };\r\n                    NewResponse.push(newItem);\r\n                }\r\n            }\r\n        } else {\r\n\r\n            for (const item of response.Data) {\r\n                if (item.id === null) {\r\n                    let isCreatDisable = false\r\n\r\n                    if (item.PartyID === Party_ID) {\r\n                        isCreatDisable = true\r\n                    }\r\n                    const newItem = {\r\n                        ...item,\r\n                        forceCreateHide: isCreatDisable,\r\n                    };\r\n                    NewResponse.push(newItem);\r\n                }\r\n            }\r\n\r\n        }\r\n\r\n        yield put(claimList_API_Success(NewResponse))\r\n    } catch (error) { yield put(MasterClaimCreatApiErrorAction()) }\r\n}\r\n\r\nfunction* Delete_Claim_ID_GenFunc({ config }) {                    // delete API\r\n\r\n    try {\r\n        const response = yield call(delete_Claim_API, config);\r\n        yield put(deleteClaimSuccess(response))\r\n    } catch (error) { yield put(MasterClaimCreatApiErrorAction()) }\r\n}\r\n\r\nfunction* MasterClaimCreatSaga() {\r\n\r\n    yield takeLatest(CLAIM_LIST_API, ClaimList_GenFunc)\r\n    yield takeLatest(POST_CLAIM_CREATE_SUMMARY_API, MasterClaimCreat_GenFunc)\r\n    yield takeLatest(DELETE_CLAIM_ID, Delete_Claim_ID_GenFunc)\r\n\r\n}\r\n\r\nexport default MasterClaimCreatSaga;","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Report\\ClaimSummary\\action.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Report\\ClaimSummary\\actionType.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Report\\ClaimSummary\\reducer.js",["4350","4351"],"import { CLAIM_LIST_API, CLAIM_LIST_API_SUCCESS, DELETE_CLAIM_ID, DELETE_CLAIM_ID_SUCCESS, POST_CLAIM_CREATE_SUMMARY_API, POST_CLAIM_CREATE_SUMMARY_API_ERROR_ACTION, POST_CLAIM_CREATE_SUMMARY_API_SUCCESS, POST_ORDER_SUMMARY_API, POST_ORDER_SUMMARY_API_SUCCESS } from \"./actionType\"\r\n\r\nconst INIT_STATE = {\r\n    ClaimSummaryGobtn: [],\r\n    CreateClaimLoading: false,\r\n    deleteMsg: { Status: false },\r\n    DeleteBtnLoading: false,\r\n    ClaimListData: [],\r\n\r\n\r\n}\r\n\r\nconst ClaimSummaryReducer = (state = INIT_STATE, action) => {\r\n\r\n    switch (action.type) {\r\n\r\n        case POST_CLAIM_CREATE_SUMMARY_API:\r\n            return {\r\n                ...state,\r\n                CreateClaimLoading: action.config.btnId\r\n            }\r\n\r\n        case POST_CLAIM_CREATE_SUMMARY_API_SUCCESS:\r\n            return {\r\n                ...state,\r\n                ClaimSummaryGobtn: action.payload,\r\n                CreateClaimLoading: false\r\n            }\r\n\r\n        case CLAIM_LIST_API:\r\n            return {\r\n                ...state,\r\n                CreateClaimLoading: action.config.btnId\r\n            }\r\n\r\n        case CLAIM_LIST_API_SUCCESS:\r\n            return {\r\n                ...state,\r\n                ClaimListData: action.payload,\r\n                CreateClaimLoading: false\r\n            }\r\n\r\n        case DELETE_CLAIM_ID:\r\n            return {\r\n                ...state,\r\n                DeleteBtnLoading: action.config.btnId\r\n            };\r\n\r\n\r\n        case DELETE_CLAIM_ID_SUCCESS:\r\n            return {\r\n                ...state,\r\n                DeleteBtnLoading: false,\r\n                deleteMsg: action.payload,\r\n            };\r\n\r\n        case POST_CLAIM_CREATE_SUMMARY_API_ERROR_ACTION:\r\n            return {\r\n                ...state,\r\n                DeleteBtnLoading: false,\r\n                CreateClaimLoading: false\r\n            };\r\n\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default ClaimSummaryReducer;","D:\\Rohit\\Git projects\\Manthan\\src\\Reports\\PurchaseGSTReport\\PurchaseGSTReport.js.js",["4352","4353","4354","4355","4356","4357","4358","4359","4360","4361"],"import React, { useEffect, useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { Col, FormGroup, Input, Label, Row } from \"reactstrap\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { initialFiledFunc, } from \"../../components/Common/validationFunction\";\r\nimport { C_Button, Go_Button } from \"../../components/Common/CommonButton\";\r\nimport { C_DatePicker } from \"../../CustomValidateForm\";\r\nimport * as _cfunc from \"../../components/Common/CommonFunction\";\r\nimport { MetaTags } from \"react-meta-tags\";\r\nimport { BreadcrumbShowCountlabel, commonPageField, commonPageFieldSuccess } from \"../../store/actions\";\r\nimport BootstrapTable from \"react-bootstrap-table-next\";\r\nimport ToolkitProvider from \"react-bootstrap-table2-toolkit\";\r\nimport Select from \"react-select\";\r\nimport { postPurchaseGSTReport_API, postPurchaseGSTReport_API_Success } from \"../../store/Report/PurchaseGSTRedux/action\";\r\nimport { mySearchProps } from \"../../components/Common/SearchBox/MySearch\";\r\nimport { customAlert } from \"../../CustomAlert/ConfirmDialog\";\r\nimport { mode, url, pageId } from \"../../routes/index\"\r\nimport DynamicColumnHook from \"../../components/Common/TableCommonFunc\";\r\nimport Papa from 'papaparse';\r\nimport XLSX from 'react-csv';\r\nimport { ReportComponent } from \"../ReportComponent\";\r\n\r\nconst PurchaseGSTReport = (props) => {\r\n\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n    const currentDate_ymd = _cfunc.date_ymd_func();\r\n\r\n    const isSCMParty = _cfunc.loginIsSCMParty();\r\n\r\n    const fileds = {\r\n        FromDate: currentDate_ymd,\r\n        ToDate: currentDate_ymd,\r\n        CheckSelect: \"\"\r\n    }\r\n\r\n    const [state, setState] = useState(() => initialFiledFunc(fileds))\r\n    const [userPageAccessState, setUserAccState] = useState('');\r\n    const [GSTRateWise, setGSTRateWise] = useState(false);\r\n    const [PartyDropdown, setPartyDropdown] = useState(\"\");\r\n\r\n    const reducers = useSelector(\r\n        (state) => ({\r\n            tableData: state.PurchaseGSTReportReducer.PurchaseGSTGobtn,\r\n            ExcelBtnLoading: state.PurchaseGSTReportReducer.ExcelBtnLoading,\r\n            GoBtnLoading: state.PurchaseGSTReportReducer.GoBtnLoading,\r\n            Distributor: state.CommonPartyDropdownReducer.commonPartyDropdown,\r\n            userAccess: state.Login.RoleAccessUpdateData,\r\n            pageField: state.CommonPageFieldReducer.pageField\r\n        })\r\n    );\r\n\r\n    const { userAccess, tableData, ExcelBtnLoading, GoBtnLoading, Distributor, pageField } = reducers;\r\n    const { PurchaseGSTDetails = [], PurchaseGSTRateWiseDetails = [] } = tableData;\r\n\r\n    const values = { ...state.values }\r\n\r\n    // Featch Modules List data  First Rendering\r\n    const location = { ...history.location }\r\n    const hasShowModal = props.hasOwnProperty(mode.editValue)\r\n\r\n    // userAccess useEffect\r\n    useEffect(() => {\r\n        let userAcc = null;\r\n        let locationPath = location.pathname;\r\n        if (hasShowModal) {\r\n            locationPath = props.masterPath;\r\n        };\r\n        userAcc = userAccess.find((inx) => {\r\n            return (`/${inx.ActualPagePath}` === locationPath)\r\n        })\r\n        if (userAcc) {\r\n            setUserAccState(userAcc)\r\n            _cfunc.breadcrumbReturnFunc({ dispatch, userAcc });\r\n        };\r\n    }, [userAccess])\r\n\r\n    useEffect(() => {\r\n        dispatch(commonPageFieldSuccess(null));\r\n        dispatch(commonPageField(pageId.PURCHASE_GST_REPORT));\r\n        dispatch(BreadcrumbShowCountlabel(`Count:${0}`));\r\n        return () => {\r\n            dispatch(commonPageFieldSuccess(null));\r\n            dispatch(postPurchaseGSTReport_API_Success([]));\r\n        }\r\n    }, [])\r\n\r\n    const [tableColumns] = DynamicColumnHook({ pageField });\r\n\r\n    const updatedTableColumns = GSTRateWise\r\n        ? tableColumns.filter(column => (\r\n            column.dataField !== \"Name\" &&\r\n            column.dataField !== \"InvoiceNumber\" &&\r\n            column.dataField !== \"InvoiceDate\" &&\r\n            column.dataField !== \"FullInvoiceNumber\" &&\r\n            column.dataField !== \"DiscountAmount\" &&\r\n            column.dataField !== \"GSTRate\"\r\n        ))\r\n        : tableColumns;\r\n\r\n    const Party_Option = Distributor.map(i => ({\r\n        value: i.id,\r\n        label: i.Name\r\n    }));\r\n\r\n    function goButtonHandler() {\r\n\r\n        try {\r\n            const btnId = `gobtn-${url.PURCHASE_GST_REPORT}`\r\n            if ((isSCMParty) && (PartyDropdown === \"\")) {\r\n                customAlert({ Type: 3, Message: \"Please Select Party\" });\r\n                return;\r\n            }\r\n\r\n            const jsonBody = JSON.stringify({\r\n                \"FromDate\": values.FromDate,\r\n                \"ToDate\": values.ToDate,\r\n                \"Party\": PartyDropdown === \"\" ? _cfunc.loginPartyID() : PartyDropdown.value,\r\n                \"GSTRatewise\": GSTRateWise === true ? 1 : 0\r\n            });\r\n            let config = { jsonBody, btnId }\r\n            dispatch(postPurchaseGSTReport_API(config))\r\n            dispatch(postPurchaseGSTReport_API_Success([]));\r\n\r\n        } catch (error) { _cfunc.CommonConsole(error) }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (tableData.btnId === \"excel_btnId\") {\r\n            if (GSTRateWise ? PurchaseGSTRateWiseDetails.length : PurchaseGSTDetails.length > 1) {\r\n                ReportComponent({      // Download CSV\r\n                    pageField,\r\n                    excelData: GSTRateWise ? PurchaseGSTRateWiseDetails : PurchaseGSTDetails,\r\n                    excelFileName: \"Purchase GST Report\"\r\n                })\r\n                dispatch(postPurchaseGSTReport_API_Success([]));\r\n                setPartyDropdown('');\r\n            }\r\n        }\r\n    }, [tableData]);\r\n\r\n    function excelhandler() {\r\n\r\n        try {\r\n            if ((isSCMParty) && (PartyDropdown === \"\")) {\r\n                customAlert({ Type: 3, Message: \"Please Select Party\" });\r\n                return;\r\n            }\r\n\r\n            const jsonBody = JSON.stringify({\r\n                \"FromDate\": values.FromDate,\r\n                \"ToDate\": values.ToDate,\r\n                \"Party\": PartyDropdown === \"\" ? _cfunc.loginPartyID() : PartyDropdown.value,\r\n                \"GSTRatewise\": GSTRateWise === true ? 1 : 0\r\n            });\r\n            let config = { jsonBody, btnId: \"excel_btnId\" }\r\n            dispatch(postPurchaseGSTReport_API(config))\r\n            dispatch(postPurchaseGSTReport_API_Success([]));\r\n\r\n        } catch (error) { _cfunc.CommonConsole(error) }\r\n    }\r\n\r\n    const partyOnchange = (e) => {\r\n        setPartyDropdown(e)\r\n        dispatch(postPurchaseGSTReport_API_Success([]));\r\n    }\r\n\r\n    const rowStyle = (row, rowIndex) => {\r\n\r\n        if ((PurchaseGSTRateWiseDetails.length - 1) === rowIndex) {\r\n            const style = {};\r\n            style.backgroundColor = 'rgb(239, 239, 239)';\r\n            style.fontWeight = 'bold';\r\n            style.fontSize = '4';\r\n            return style;\r\n        }\r\n        if ((PurchaseGSTDetails.length - 1) === rowIndex) {\r\n            const style = {};\r\n            style.backgroundColor = 'rgb(239, 239, 239)';\r\n            style.fontWeight = 'bold';\r\n            style.fontSize = '4';\r\n            return style;\r\n        }\r\n    };\r\n\r\n    function fromdateOnchange(e, date) {\r\n        setState((i) => {\r\n            const a = { ...i }\r\n            a.values.FromDate = date;\r\n            a.hasValid.FromDate.valid = true\r\n            return a\r\n        })\r\n        dispatch(postPurchaseGSTReport_API_Success([]));\r\n    }\r\n\r\n    function todateOnchange(e, date) {\r\n        setState((i) => {\r\n            const a = { ...i }\r\n            a.values.ToDate = date;\r\n            a.hasValid.ToDate.valid = true\r\n            return a\r\n        })\r\n        dispatch(postPurchaseGSTReport_API_Success([]));\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <MetaTags>{_cfunc.metaTagLabel(userPageAccessState)}</MetaTags>\r\n            <div className=\"page-content\">\r\n                <div className=\"px-2   c_card_filter text-black\" >\r\n                    <div className=\"row\" >\r\n                        <Col sm={2} className=\"\">\r\n                            <FormGroup className=\"mb- row mt-3 mb-2 \" >\r\n                                <Label className=\"col-sm-4 p-2\"\r\n                                    style={{ width: \"78px\" }}>FromDate</Label>\r\n                                <Col sm=\"6\">\r\n                                    <C_DatePicker\r\n                                        name='FromDate'\r\n                                        value={values.FromDate}\r\n                                        onChange={fromdateOnchange}\r\n                                    />\r\n                                </Col>\r\n                            </FormGroup>\r\n                        </Col>\r\n\r\n                        <Col sm={2} className=\"\">\r\n                            <FormGroup className=\"mb- row mt-3 mb-2\" >\r\n                                <Label className=\"col-sm-4 p-2\"\r\n                                    style={{ width: \"65px\" }}>ToDate</Label>\r\n                                <Col sm=\"6\">\r\n                                    <C_DatePicker\r\n                                        name=\"ToDate\"\r\n                                        value={values.ToDate}\r\n                                        onChange={todateOnchange}\r\n                                    />\r\n                                </Col>\r\n                            </FormGroup>\r\n                        </Col>\r\n\r\n                        <Col sm={2} >\r\n                            <FormGroup className=\"mb- row mt-3 mb-2\">\r\n                                <Label style={{ width: \"110px\" }} className=\"col-4 p-2\" >GST Rate Wise</Label>\r\n                                <Col sm=\"2\" className=\" mt-2 \">\r\n                                    <Input type=\"checkbox\"\r\n                                        className=\"p-2\"\r\n                                        checked={GSTRateWise}\r\n                                        onChange={(e) => { setGSTRateWise(e.target.checked) }}\r\n                                    />\r\n                                </Col>\r\n                            </FormGroup>\r\n                        </Col>\r\n\r\n                        {isSCMParty &&\r\n                            <Col sm={3} className=\"\">\r\n                                <FormGroup className=\"mb- row mt-3\" >\r\n                                    <Label className=\"col-sm-4 p-2\"\r\n                                        style={{ width: \"50px\", marginRight: \"20px\" }}>Party</Label>\r\n                                    <Col sm=\"8\">\r\n                                        <Select\r\n                                            name=\"Party\"\r\n                                            value={PartyDropdown}\r\n                                            isSearchable={true}\r\n                                            className=\"react-dropdown\"\r\n                                            classNamePrefix=\"dropdown\"\r\n                                            styles={{\r\n                                                menu: provided => ({ ...provided, zIndex: 2 })\r\n                                            }}\r\n                                            options={Party_Option}\r\n                                            onChange={(e) => { partyOnchange(e) }}\r\n                                        />\r\n                                    </Col>\r\n                                </FormGroup>\r\n                            </Col>\r\n                        }\r\n\r\n                        <Col sm={1} className=\"mt-3 \">\r\n\r\n                            <C_Button\r\n                                type=\"button\"\r\n                                spinnerColor=\"white\"\r\n                                loading={GoBtnLoading === `gobtn-${url.PURCHASE_GST_REPORT}`}\r\n                                className=\"btn btn-success   \"\r\n                                onClick={goButtonHandler}\r\n                            >\r\n                                Show\r\n                            </C_Button>\r\n\r\n                        </Col>\r\n                        <Col sm={2} className=\"mt-3 \">\r\n                            <C_Button\r\n                                type=\"button\"\r\n                                spinnerColor=\"white\"\r\n                                loading={ExcelBtnLoading === `excel_btnId`}\r\n                                className=\"btn btn-primary  \"\r\n                                onClick={(e) => { excelhandler() }}\r\n                            >\r\n                                Excel Download\r\n                            </C_Button>\r\n                        </Col>\r\n\r\n                    </div>\r\n                </div>\r\n\r\n                <ToolkitProvider\r\n                    keyField={\"id\"}\r\n                    data={GSTRateWise ? PurchaseGSTRateWiseDetails : PurchaseGSTDetails}\r\n                    columns={updatedTableColumns}\r\n                >\r\n                    {(toolkitProps,) => (\r\n                        <React.Fragment>\r\n                            <Row>\r\n                                <Col xl=\"12\">\r\n                                    <div className=\"table-responsive table\">\r\n                                        <BootstrapTable\r\n                                            keyField={\"id\"}\r\n                                            rowStyle={rowStyle}\r\n                                            classes={\"table  table-bordered table-hover\"}\r\n                                            noDataIndication={\r\n                                                <div className=\"text-danger text-center \">\r\n                                                    Record Not available\r\n                                                </div>\r\n                                            }\r\n                                            onDataSizeChange={({ dataSize }) => {\r\n                                                dispatch(BreadcrumbShowCountlabel(`Count:${dataSize > 0 ? dataSize - 1 : 0}`));\r\n                                            }}\r\n                                            {...toolkitProps.baseProps}\r\n                                        />\r\n                                        {mySearchProps(toolkitProps.searchProps)}\r\n                                    </div>\r\n                                </Col>\r\n                            </Row>\r\n\r\n                        </React.Fragment>\r\n                    )}\r\n                </ToolkitProvider>\r\n            </div>\r\n\r\n        </React.Fragment >\r\n    )\r\n}\r\n\r\nexport default PurchaseGSTReport;","D:\\Rohit\\Git projects\\Manthan\\src\\Reports\\DamageStockReport\\index.js",["4362","4363","4364","4365","4366","4367"],"import React, { useEffect, useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { Col, FormGroup, Label } from \"reactstrap\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { C_DatePicker } from \"../../CustomValidateForm\";\r\nimport * as _cfunc from \"../../components/Common/CommonFunction\";\r\nimport { MetaTags } from \"react-meta-tags\";\r\nimport Select from \"react-select\";\r\nimport { BreadcrumbShowCountlabel, commonPageField, commonPageFieldSuccess, getBaseUnit_ForDropDown, getBaseUnit_ForDropDownSuccess } from \"../../store/actions\";\r\nimport C_Report from \"../../components/Common/C_Report\";\r\nimport { customAlert } from \"../../CustomAlert/ConfirmDialog\";\r\nimport { damageStockReport_GoButton_API, damageStockReport_GoButton_API_Success } from \"../../store/Report/DamageStockReportRedux/action\";\r\nimport DynamicColumnHook from \"../../components/Common/TableCommonFunc\";\r\nimport { mode, pageId } from \"../../routes/index\"\r\nimport CustomTable from \"../../CustomTable2\";\r\nimport PartyDropdownForReport, { ReportComponent, ShowAndExcelBtn } from \"../ReportComponent\";\r\n\r\nconst DamageStockReport = (props) => {\r\n\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n    const currentDate_ymd = _cfunc.date_ymd_func();\r\n    const isSCMParty = _cfunc.loginIsSCMParty();\r\n\r\n    const [headerFilters, setHeaderFilters] = useState('');\r\n    const [userPageAccessState, setUserAccState] = useState('');\r\n\r\n    const [partyDropdown, setPartyDropdown] = useState(\"\");\r\n    const [unitDropdown, setUnitDropdown] = useState(\"\");\r\n    const [tableData, setTableData] = useState([]);\r\n    const [btnMode, setBtnMode] = useState(0);\r\n\r\n    const reducers = useSelector(\r\n        (state) => ({\r\n            listBtnLoading: state.DamageStockReportReducer.listBtnLoading,\r\n            goButtonData: state.DamageStockReportReducer.StockReportGobtn,\r\n            BaseUnit: state.ItemMastersReducer.BaseUnit,\r\n            userAccess: state.Login.RoleAccessUpdateData,\r\n            pageField: state.CommonPageFieldReducer.pageField\r\n        })\r\n    );\r\n\r\n    const { userAccess, BaseUnit, pageField, goButtonData = [], } = reducers;\r\n    const { fromdate = currentDate_ymd, todate = currentDate_ymd } = headerFilters;\r\n\r\n    // Featch Modules List data  First Rendering\r\n    const location = { ...history.location }\r\n    const hasShowModal = props.hasOwnProperty(mode.editValue)\r\n\r\n    // userAccess useEffect\r\n    useEffect(() => {\r\n        let userAcc = null;\r\n        let locationPath = location.pathname;\r\n        if (hasShowModal) {\r\n            locationPath = props.masterPath;\r\n        };\r\n        userAcc = userAccess.find((inx) => {\r\n            return (`/${inx.ActualPagePath}` === locationPath)\r\n        })\r\n        if (userAcc) {\r\n            setUserAccState(userAcc)\r\n            _cfunc.breadcrumbReturnFunc({ dispatch, userAcc });\r\n        };\r\n    }, [userAccess])\r\n\r\n    useEffect(() => {\r\n\r\n        dispatch(getBaseUnit_ForDropDown());\r\n        dispatch(commonPageFieldSuccess(null));\r\n        dispatch(commonPageField(pageId.DAMAGE_STOCK_REPORT))\r\n        dispatch(BreadcrumbShowCountlabel(`Count:${0}`));\r\n        return () => {\r\n            dispatch(commonPageFieldSuccess(null));\r\n            dispatch(damageStockReport_GoButton_API_Success([]));\r\n            dispatch(getBaseUnit_ForDropDownSuccess([]));\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (tableData.length === 0) {\r\n            setBtnMode(0)\r\n        }\r\n    }, [tableData]);\r\n\r\n    useEffect(() => {\r\n\r\n        try {\r\n            if ((goButtonData.Status === true) && (goButtonData.StatusCode === 200)) {\r\n                setBtnMode(0);\r\n                if (btnMode === 2) {\r\n                    ReportComponent({      // Download CSV\r\n                        pageField,\r\n                        excelData: goButtonData.Data,\r\n                        excelFileName: \"Damage Stock Export\"\r\n                    })\r\n                    dispatch(damageStockReport_GoButton_API_Success([]));\r\n                }\r\n                else {\r\n                    setTableData(goButtonData.Data)\r\n                }\r\n            }\r\n            else if ((goButtonData.Status === true)) {\r\n                setTableData([]);\r\n            }\r\n            setBtnMode(0);\r\n        }\r\n        catch (e) { console.log(e) }\r\n\r\n    }, [goButtonData]);\r\n\r\n    const [tableColumns] = DynamicColumnHook({ pageField })\r\n\r\n    const BaseUnit_DropdownOptions = BaseUnit.filter(index => index.Name === \"No\" || index.Name === \"Kg\" || index.Name === \"Box\")\r\n        .map(data => ({\r\n            value: data.id,\r\n            label: data.Name\r\n        }));\r\n\r\n    function goButtonHandler(e, btnMode) {\r\n        try {\r\n            setBtnMode(btnMode)\r\n            if (unitDropdown === \"\") {\r\n                customAlert({\r\n                    Type: 3,\r\n                    Message: \"Please Select Unit\"\r\n                })\r\n                setBtnMode(0)\r\n                return\r\n            }\r\n            else if ((isSCMParty) && (partyDropdown === \"\")) {\r\n                customAlert({ Type: 3, Message: \"Please Select Party\" });\r\n                setBtnMode(0)\r\n                return;\r\n            }\r\n\r\n            const jsonBody = JSON.stringify({\r\n                \"FromDate\": fromdate,\r\n                \"ToDate\": todate,\r\n                \"Unit\": unitDropdown.value,\r\n                \"PartyID\": partyDropdown === \"\" ? _cfunc.loginPartyID() : partyDropdown.value,\r\n            });\r\n\r\n            dispatch(damageStockReport_GoButton_API({ jsonBody }))\r\n\r\n        } catch (error) { _cfunc.CommonConsole(error) }\r\n    }\r\n\r\n    function fromdateOnchange(e, date) {\r\n        let newObj = { ...headerFilters }\r\n        newObj.fromdate = date\r\n        setHeaderFilters(newObj)\r\n    }\r\n\r\n    function todateOnchange(e, date) {\r\n        let newObj = { ...headerFilters }\r\n        newObj.todate = date\r\n        setHeaderFilters(newObj)\r\n    }\r\n\r\n    function partyOnChangeHandler(e) {\r\n        setPartyDropdown(e);\r\n        setTableData([]);\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <MetaTags>{_cfunc.metaTagLabel(userPageAccessState)}</MetaTags>\r\n            <div className=\"page-content\">\r\n                <div className=\"px-2 c_card_filter text-black mb-1\" >\r\n                    <div className=\"row\" >\r\n                        <Col sm={(isSCMParty) ? 2 : 3} className=\"\">\r\n                            <FormGroup className=\" mb-2 row mt-3 \" >\r\n                                <Label className=\"col-sm-4 p-2\"\r\n                                    style={{ width: \"66px\" }}>FromDate</Label>\r\n                                <Col sm={7}>\r\n                                    <C_DatePicker\r\n                                        name='fromdate'\r\n                                        value={fromdate}\r\n                                        disabled={true}\r\n                                        onChange={fromdateOnchange}\r\n                                    />\r\n                                </Col>\r\n                            </FormGroup>\r\n                        </Col>\r\n\r\n                        <Col sm={(isSCMParty) ? 2 : 3} className=\"\">\r\n                            <FormGroup className=\" row mt-3 \" >\r\n                                <Label className=\"col-sm-4 p-2\"\r\n                                    style={{ width: \"60px\" }}>ToDate</Label>\r\n                                <Col sm={7}>\r\n                                    <C_DatePicker\r\n                                        nane='todate'\r\n                                        value={todate}\r\n                                        disabled={true}\r\n                                        onChange={todateOnchange}\r\n                                    />\r\n                                </Col>\r\n                            </FormGroup>\r\n                        </Col>\r\n\r\n                        <Col sm={(isSCMParty) ? 2 : 3}>\r\n                            <FormGroup className=\" row mt-3 \" >\r\n                                <Label className=\"col-sm-2 p-2\"\r\n                                    style={{ width: \"85px\" }}>Unit</Label>\r\n                                <Col sm={7}>\r\n                                    <Select\r\n                                        name=\"Unit\"\r\n                                        value={unitDropdown}\r\n                                        // isDisabled={tableData.length > 0 && true}\r\n                                        isSearchable={true}\r\n                                        className=\"react-dropdown\"\r\n                                        classNamePrefix=\"dropdown\"\r\n                                        styles={{\r\n                                            menu: provided => ({ ...provided, zIndex: 2 })\r\n                                        }}\r\n                                        options={BaseUnit_DropdownOptions}\r\n                                        onChange={(e) => {\r\n                                            setUnitDropdown(e);\r\n                                            setTableData([]);\r\n                                        }}\r\n                                    />\r\n                                </Col>\r\n                            </FormGroup>\r\n                        </Col >\r\n\r\n                        <PartyDropdownForReport  // Party Dropdown if isSCMParty true then Party dropdown show\r\n                            partyValue={partyDropdown}\r\n                            setPartyValue={partyOnChangeHandler}\r\n                        />\r\n\r\n                        <ShowAndExcelBtn  // Excel download and Show button function\r\n                            showLoading={btnMode === 1 && true}\r\n                            excelLoading={btnMode === 2 && true}\r\n                            showOnClick={(e) => goButtonHandler(e, 1)}\r\n                            excelOnClick={(e) => goButtonHandler(e, 2)}\r\n                        />\r\n\r\n                    </div>\r\n                </div>\r\n\r\n                <CustomTable\r\n                    keyField={\"id\"}\r\n                    data={tableData}\r\n                    columns={tableColumns}\r\n                    paginationEnabled={false}\r\n                    onDataSizeChange={({ dataCount }) => {\r\n                        dispatch(BreadcrumbShowCountlabel(`Count:${dataCount}`));\r\n                    }}\r\n                    noDataIndication={<div className=\"text-danger text-center table-cursor-pointer\"  >Data Not available</div>}\r\n                />\r\n\r\n            </div>\r\n            <C_Report />\r\n        </React.Fragment >\r\n    )\r\n}\r\n\r\nexport default DamageStockReport;;","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Report\\DamageStockReportRedux\\saga.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Report\\PurchaseGSTRedux\\saga.js",["4368","4369"],"import { call, put, takeLatest } from \"redux-saga/effects\";\r\nimport {\r\n    POST_PURCHASE_GST_REPORT_API,\r\n} from \"./actionType\";\r\nimport { postPurchaseGSTReport_API_Success, postPurchaseGSTReportApiErrorAction, postRetailerData_API_Success, RetailerDataApiErrorAction } from \"./action\";\r\nimport { PurchaseGSTReportSaga_GoBtn_API } from \"../../../helpers/backend_helper\";\r\nimport { date_dmy_func } from \"../../../components/Common/CommonFunction\";\r\n\r\nfunction* PurchaseGSTReport_Gen({ config }) {\r\n\r\n    try {\r\n\r\n        const response = yield call(PurchaseGSTReportSaga_GoBtn_API, config);\r\n        response.Data[\"btnId\"] = config.btnId;\r\n        let newresponse = []\r\n\r\n        if (response.Data.PurchaseGSTDetails) {\r\n            let TotalTaxableValue = 0\r\n            let TotalCGST = 0\r\n            let TotalSGST = 0\r\n            let TotalIGST = 0\r\n            let TotalGSTAmount = 0\r\n            let TotalDiscountAmount = 0\r\n            let TotalTotalValue = 0\r\n\r\n            newresponse = yield response.Data.PurchaseGSTDetails.map((i, key) => {\r\n                i.id = key + 1\r\n                TotalTaxableValue = Number(TotalTaxableValue) + Number(i.TaxableValue)\r\n                TotalCGST = Number(TotalCGST) + Number(i.CGST)\r\n                TotalSGST = Number(TotalSGST) + Number(i.SGST)\r\n                TotalIGST = Number(TotalIGST) + Number(i.IGST)\r\n                TotalGSTAmount = Number(TotalGSTAmount) + Number(i.GSTAmount)\r\n                TotalDiscountAmount = Number(TotalDiscountAmount) + Number(i.DiscountAmount)\r\n                TotalTotalValue = Number(TotalTotalValue) + Number(i.TotalValue)\r\n                i[\"InvoiceDate\"] = date_dmy_func(i.InvoiceDate)\r\n                return i\r\n            })\r\n\r\n            newresponse.push({\r\n                id: response.Data.PurchaseGSTDetails.length + 1,\r\n                Name: \"Total\",\r\n                TaxableValue: TotalTaxableValue.toFixed(2),\r\n                CGST: TotalCGST.toFixed(2),\r\n                SGST: TotalSGST.toFixed(2),\r\n                IGST: TotalIGST.toFixed(2),\r\n                GSTAmount: TotalGSTAmount.toFixed(2),\r\n                DiscountAmount: TotalDiscountAmount.toFixed(2),\r\n                TotalValue: TotalTotalValue.toFixed(2),\r\n            })\r\n\r\n        } else {\r\n\r\n\r\n            let TotalTaxableValue = 0\r\n            let TotalCGST = 0\r\n            let TotalSGST = 0\r\n            let TotalIGST = 0\r\n            let TotalGSTAmount = 0\r\n            let TotalTotalValue = 0\r\n\r\n            newresponse = yield response.Data.PurchaseGSTRateWiseDetails.map((i, key) => {\r\n                i.id = key + 1\r\n                TotalTaxableValue = Number(TotalTaxableValue) + Number(i.TaxableValue)\r\n                TotalCGST = Number(TotalCGST) + Number(i.CGST)\r\n                TotalSGST = Number(TotalSGST) + Number(i.SGST)\r\n                TotalIGST = Number(TotalIGST) + Number(i.IGST)\r\n                TotalGSTAmount = Number(TotalGSTAmount) + Number(i.GSTAmount)\r\n                TotalTotalValue = Number(TotalTotalValue) + Number(i.TotalValue)\r\n                return i\r\n            })\r\n\r\n            newresponse.push({\r\n                id: response.Data.PurchaseGSTRateWiseDetails.length + 1,\r\n                GSTPercentage: \"Total\",\r\n                TaxableValue: TotalTaxableValue.toFixed(2),\r\n                CGST: TotalCGST.toFixed(2),\r\n                SGST: TotalSGST.toFixed(2),\r\n                IGST: TotalIGST.toFixed(2),\r\n                GSTAmount: TotalGSTAmount.toFixed(2),\r\n                TotalValue: TotalTotalValue.toFixed(2),\r\n            })\r\n\r\n        }\r\n\r\n        if (response.Data.PurchaseGSTDetails) {\r\n            response.Data[\"PurchaseGSTDetails\"] = newresponse;\r\n        } else {\r\n            response.Data[\"PurchaseGSTRateWiseDetails\"] = newresponse;\r\n\r\n        }\r\n\r\n        yield put(postPurchaseGSTReport_API_Success(response.Data))\r\n    } catch (error) { yield put(postPurchaseGSTReportApiErrorAction()) }\r\n}\r\n\r\nfunction* PurchaseGSTReportSaga() {\r\n    yield takeLatest(POST_PURCHASE_GST_REPORT_API, PurchaseGSTReport_Gen)\r\n}\r\n\r\nexport default PurchaseGSTReportSaga;","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Report\\InvoiceDataExportRedux\\saga.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Report\\InvoiceDataExportRedux\\action.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Report\\InvoiceDataExportRedux\\actionType.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Report\\PurchaseGSTRedux\\action.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Report\\PurchaseGSTRedux\\actionType.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Report\\DamageStockReportRedux\\action.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Report\\DamageStockReportRedux\\actionType.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Report\\DamageStockReportRedux\\reducer.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Report\\InvoiceDataExportRedux\\reducer.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Report\\PurchaseGSTRedux\\reducer.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\Reports\\InvoiceDataExport\\InvoiceDataExport.js.js",["4370","4371","4372","4373","4374","4375","4376","4377"],"import React, { useEffect, useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { Col, FormGroup, Label, Row, } from \"reactstrap\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { initialFiledFunc } from \"../../components/Common/validationFunction\";\r\nimport { C_Button } from \"../../components/Common/CommonButton\";\r\nimport { C_DatePicker } from \"../../CustomValidateForm\";\r\nimport * as _cfunc from \"../../components/Common/CommonFunction\";\r\nimport { mode, pageId, url } from \"../../routes/index\"\r\nimport { MetaTags } from \"react-meta-tags\";\r\nimport { postInvoiceDataExport_API, postInvoiceDataExport_API_Success } from \"../../store/Report/InvoiceDataExportRedux/action\";\r\nimport ToolkitProvider from \"react-bootstrap-table2-toolkit\";\r\nimport BootstrapTable from \"react-bootstrap-table-next\";\r\nimport Select from \"react-select\";\r\nimport { mySearchProps } from \"../../components/Common/SearchBox/MySearch\";\r\nimport { BreadcrumbShowCountlabel, commonPageField, commonPageFieldSuccess } from \"../../store/actions\";\r\nimport { customAlert } from \"../../CustomAlert/ConfirmDialog\";\r\nimport DynamicColumnHook from \"../../components/Common/TableCommonFunc\";\r\nimport { ReportComponent } from \"../ReportComponent\";\r\n\r\nconst InvoiceDataExport = (props) => {\r\n\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n    const currentDate_ymd = _cfunc.date_ymd_func();\r\n    const isSCMParty = _cfunc.loginIsSCMParty();\r\n\r\n    const fileds = {\r\n        FromDate: currentDate_ymd,\r\n        ToDate: currentDate_ymd,\r\n\r\n    }\r\n    const [subPageMode] = useState(history.location.pathname);\r\n    const [state, setState] = useState(() => initialFiledFunc(fileds))\r\n    const [userPageAccessState, setUserAccState] = useState('');\r\n    const [PartyDropdown, setPartyDropdown] = useState(\"\");\r\n\r\n    const {\r\n        userAccess,\r\n        tableData = \"\",\r\n        ExcelBtnLoading,\r\n        GoBtnLoading,\r\n        Distributor,\r\n        pageField\r\n    } = useSelector((state) => ({\r\n        tableData: state.InvoiceDataExportReducer.InvoiceDataExportGobtn,\r\n        GoBtnLoading: state.InvoiceDataExportReducer.GoBtnLoading,\r\n        Distributor: state.CommonPartyDropdownReducer.commonPartyDropdown,\r\n        ExcelBtnLoading: state.InvoiceDataExportReducer.ExcelBtnLoading,\r\n        supplier: state.CommonAPI_Reducer.vendorSupplierCustomer,\r\n        userAccess: state.Login.RoleAccessUpdateData,\r\n        SSDD_List: state.CommonAPI_Reducer.SSDD_List,\r\n        pageField: state.CommonPageFieldReducer.pageField\r\n    })\r\n    );\r\n\r\n    const { Data = [], goBtnMode } = tableData;\r\n\r\n    const values = { ...state.values }\r\n\r\n    // Featch Modules List data  First Rendering\r\n    const location = { ...history.location }\r\n    const hasShowModal = props.hasOwnProperty(mode.editValue)\r\n\r\n    useEffect(() => {\r\n        let pageID\r\n        if (subPageMode === url.INVOICE_DATA_EXPORT) {\r\n            pageID = pageId.INVOICE_DATA_EXPORT\r\n        } else {\r\n            pageID = pageId.PURCHASE_DATA_EXPORT\r\n        }\r\n        dispatch(commonPageFieldSuccess(null));\r\n        dispatch(commonPageField(pageID));\r\n        dispatch(BreadcrumbShowCountlabel(`Count:${0}`));\r\n        return () => {\r\n            dispatch(commonPageFieldSuccess(null));\r\n        }\r\n    }, []);\r\n\r\n    // userAccess useEffect\r\n    useEffect(() => {\r\n        let userAcc = null;\r\n        let locationPath = location.pathname;\r\n        if (hasShowModal) {\r\n            locationPath = props.masterPath;\r\n        };\r\n        userAcc = userAccess.find((inx) => {\r\n            return (`/${inx.ActualPagePath}` === locationPath)\r\n        })\r\n        if (userAcc) {\r\n            setUserAccState(userAcc)\r\n            _cfunc.breadcrumbReturnFunc({ dispatch, userAcc });\r\n        };\r\n    }, [userAccess])\r\n\r\n    const [tableColumns] = DynamicColumnHook({ pageField })\r\n\r\n    useEffect(() => {\r\n        return () => { dispatch(postInvoiceDataExport_API_Success([])); }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (goBtnMode === \"downloadExcel\") {\r\n            let excelName\r\n            if (subPageMode === url.INVOICE_DATA_EXPORT) {\r\n                excelName = \"Invoice Data Export\"\r\n            } else {\r\n                excelName = \"Purchase Data Export\"\r\n            }\r\n            if (Data.length > 0) {\r\n                ReportComponent({      // Download CSV\r\n                    pageField,\r\n                    excelData: Data,\r\n                    excelFileName: excelName\r\n                })\r\n                dispatch(postInvoiceDataExport_API_Success([]));   // Reset Excel Data\r\n            }\r\n        }\r\n    }, [goBtnMode, Data, pageField]);\r\n\r\n\r\n    function goButtonHandler(goBtnMode) {\r\n\r\n        try {\r\n            let jsonBody\r\n\r\n            if ((isSCMParty) && (PartyDropdown === \"\")) {\r\n                customAlert({ Type: 3, Message: \"Please Select Party\" });\r\n                return;\r\n            };\r\n\r\n            if (subPageMode === url.PURCHASE_DATA_EXPORT) {\r\n                jsonBody = JSON.stringify({\r\n                    \"FromDate\": values.FromDate,\r\n                    \"ToDate\": values.ToDate,\r\n                    \"Party\": 0,\r\n                    \"Customer\": (isSCMParty) ? PartyDropdown.value : _cfunc.loginPartyID()\r\n                });\r\n            }\r\n            else {\r\n                jsonBody = JSON.stringify({\r\n                    \"FromDate\": values.FromDate,\r\n                    \"ToDate\": values.ToDate,\r\n                    \"Party\": (isSCMParty) ? PartyDropdown.value : _cfunc.loginPartyID(),\r\n                    \"Customer\": 0\r\n                });\r\n            }\r\n\r\n            const config = { jsonBody, goBtnMode: goBtnMode, btnId: goBtnMode };\r\n            dispatch(postInvoiceDataExport_API(config))\r\n\r\n        } catch (error) { _cfunc.CommonConsole(error) }\r\n    }\r\n\r\n    function fromdateOnchange(e, date) {\r\n        setState((i) => {\r\n            const a = { ...i }\r\n            a.values.FromDate = date;\r\n            a.hasValid.FromDate.valid = true\r\n            return a\r\n        })\r\n        dispatch(postInvoiceDataExport_API_Success([]))\r\n    }\r\n\r\n    function todateOnchange(e, date) {\r\n        setState((i) => {\r\n            const a = { ...i }\r\n            a.values.ToDate = date;\r\n            a.hasValid.ToDate.valid = true\r\n            return a\r\n        })\r\n        dispatch(postInvoiceDataExport_API_Success([]))\r\n    }\r\n\r\n    const partyOnchange = (e) => {\r\n        setPartyDropdown(e)\r\n        dispatch(postInvoiceDataExport_API_Success([]))\r\n    }\r\n\r\n    const Party_Option = Distributor.map(i => ({\r\n        value: i.id,\r\n        label: i.Name\r\n    }));\r\n\r\n\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <MetaTags>{_cfunc.metaTagLabel(userPageAccessState)}</MetaTags>\r\n            <div className=\"page-content\">\r\n                <div className=\"px-2   c_card_filter text-black\" >\r\n                    <div className=\"row\" >\r\n                        <Col sm={3} className=\"\">\r\n                            <FormGroup className=\"mb- row mt-3 mb-2 \" >\r\n                                <Label className=\"col-sm-4 p-2\"\r\n                                    style={{ width: \"83px\" }}>FromDate</Label>\r\n                                <Col sm=\"6\">\r\n                                    <C_DatePicker\r\n                                        name='FromDate'\r\n                                        value={values.FromDate}\r\n                                        onChange={fromdateOnchange}\r\n                                    />\r\n                                </Col>\r\n                            </FormGroup>\r\n                        </Col>\r\n                        <Col sm={3} className=\"\">\r\n                            <FormGroup className=\"mb- row mt-3 mb-2\" >\r\n                                <Label className=\"col-sm-4 p-2\"\r\n                                    style={{ width: \"65px\" }}>ToDate</Label>\r\n                                <Col sm=\"6\">\r\n                                    <C_DatePicker\r\n                                        name=\"ToDate\"\r\n                                        value={values.ToDate}\r\n                                        onChange={todateOnchange}\r\n                                    />\r\n                                </Col>\r\n                            </FormGroup>\r\n                        </Col>\r\n\r\n                        {isSCMParty &&\r\n                            <Col sm={3} className=\"\">\r\n                                <FormGroup className=\"mb- row mt-3\" >\r\n                                    <Label className=\"col-sm-4 p-2\"\r\n                                        style={{ width: \"65px\", marginRight: \"20px\" }}>Party</Label>\r\n                                    <Col sm=\"8\">\r\n                                        <Select\r\n                                            name=\"Party\"\r\n                                            value={PartyDropdown}\r\n                                            isSearchable={true}\r\n                                            className=\"react-dropdown\"\r\n                                            classNamePrefix=\"dropdown\"\r\n                                            styles={{\r\n                                                menu: provided => ({ ...provided, zIndex: 2 })\r\n                                            }}\r\n                                            options={Party_Option}\r\n                                            onChange={(e) => { partyOnchange(e) }}\r\n                                        />\r\n                                    </Col>\r\n                                </FormGroup>\r\n                            </Col>\r\n                        }\r\n                        <Col sm={1} className=\"mt-3 \">\r\n                            <C_Button\r\n                                type=\"button\"\r\n                                spinnerColor=\"white\"\r\n                                loading={GoBtnLoading === \"showOnTable\"}\r\n                                className=\"btn btn-success\"\r\n                                onClick={() => goButtonHandler(\"showOnTable\")}\r\n                            >\r\n                                Show\r\n                            </C_Button>\r\n\r\n                        </Col>\r\n\r\n                        <Col sm={2} className=\"mt-3 \">\r\n                            <C_Button\r\n                                type=\"button\"\r\n                                spinnerColor=\"white\"\r\n                                loading={ExcelBtnLoading === \"downloadExcel\"}\r\n                                className=\"btn btn-primary\"\r\n                                onClick={() => goButtonHandler(\"downloadExcel\")}\r\n                            >\r\n                                Excel Download\r\n                            </C_Button>\r\n                        </Col>\r\n\r\n\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"mt-1\">\r\n                    <ToolkitProvider\r\n                        keyField=\"PartyID\"\r\n                        data={Data}\r\n                        columns={tableColumns}\r\n                        search\r\n                    >\r\n                        {(toolkitProps,) => (\r\n                            <React.Fragment>\r\n                                <Row>\r\n                                    <Col xl=\"12\">\r\n                                        <div className=\"table-responsive table\">\r\n                                            <BootstrapTable\r\n                                                keyField=\"PartyID\"\r\n                                                classes={\"table  table-bordered table-hover\"}\r\n                                                noDataIndication={\r\n                                                    <div className=\"text-danger text-center \">\r\n                                                        Record Not available\r\n                                                    </div>\r\n                                                }\r\n                                                onDataSizeChange={({ dataSize }) => {\r\n                                                    dispatch(BreadcrumbShowCountlabel(`Count:${dataSize}`));\r\n                                                }}\r\n                                                {...toolkitProps.baseProps}\r\n                                            />\r\n                                            {mySearchProps(toolkitProps.searchProps)}\r\n                                        </div>\r\n                                    </Col>\r\n                                </Row>\r\n\r\n                            </React.Fragment>\r\n                        )}\r\n                    </ToolkitProvider>\r\n                </div>\r\n\r\n            </div>\r\n        </React.Fragment >\r\n    )\r\n}\r\n\r\nexport default InvoiceDataExport;","D:\\Rohit\\Git projects\\Manthan\\src\\Reports\\DeleteInvoiceDataExport\\index.js",["4378","4379","4380","4381","4382","4383","4384","4385","4386"],"import React, { useEffect, useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { Col, FormGroup, Label, Row, } from \"reactstrap\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { initialFiledFunc } from \"../../components/Common/validationFunction\";\r\nimport { C_Button } from \"../../components/Common/CommonButton\";\r\nimport { C_DatePicker } from \"../../CustomValidateForm\";\r\nimport * as _cfunc from \"../../components/Common/CommonFunction\";\r\nimport { mode, url, pageId } from \"../../routes/index\"\r\nimport { MetaTags } from \"react-meta-tags\";\r\nimport * as XLSX from 'xlsx';\r\nimport { postDeleteInvoiceDataExport_API, postDeleteInvoiceDataExport_API_Success } from \"../../store/Report/InvoiceDataExportRedux/action\";\r\nimport ToolkitProvider from \"react-bootstrap-table2-toolkit\";\r\nimport BootstrapTable from \"react-bootstrap-table-next\";\r\nimport Select from \"react-select\";\r\nimport { mySearchProps } from \"../../components/Common/SearchBox/MySearch\";\r\nimport { BreadcrumbShowCountlabel, commonPageField, commonPageFieldSuccess } from \"../../store/actions\";\r\nimport { customAlert } from \"../../CustomAlert/ConfirmDialog\";\r\nimport DynamicColumnHook from \"../../components/Common/TableCommonFunc\";\r\nimport { ReportComponent } from \"../ReportComponent\";\r\n\r\nconst DeleteInvoiceDataExport = (props) => {\r\n\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n    const currentDate_ymd = _cfunc.date_ymd_func();\r\n    const isSCMParty = _cfunc.loginIsSCMParty();\r\n\r\n    const fileds = {\r\n        FromDate: currentDate_ymd,\r\n        ToDate: currentDate_ymd,\r\n\r\n    }\r\n    const [state, setState] = useState(() => initialFiledFunc(fileds))\r\n    const [userPageAccessState, setUserAccState] = useState('');\r\n    const [PartyDropdown, setPartyDropdown] = useState(\"\");\r\n\r\n    const reducers = useSelector(\r\n        (state) => ({\r\n            tableData: state.InvoiceDataExportReducer.DeleteInvoiceDataExportGobtn,\r\n            GoBtnLoading: state.InvoiceDataExportReducer.GoBtnLoading,\r\n            Distributor: state.CommonPartyDropdownReducer.commonPartyDropdown,\r\n            ExcelBtnLoading: state.InvoiceDataExportReducer.ExcelBtnLoading,\r\n            userAccess: state.Login.RoleAccessUpdateData,\r\n            pageField: state.CommonPageFieldReducer.pageField\r\n        })\r\n    );\r\n\r\n    const { userAccess, tableData = [], ExcelBtnLoading, GoBtnLoading, Distributor, pageField } = reducers;\r\n    const { DeletedInvoiceExportSerializerDetails = [] } = tableData;\r\n\r\n    useEffect(() => {\r\n        dispatch(commonPageFieldSuccess(null));\r\n        dispatch(commonPageField(pageId.DELETE_INVOICE_DATA_EXPORT))\r\n        return () => {\r\n            dispatch(commonPageFieldSuccess(null));\r\n            dispatch(postDeleteInvoiceDataExport_API_Success([]))\r\n        }\r\n    }, []);\r\n\r\n    const [tableColumns] = DynamicColumnHook({ pageField })\r\n\r\n    const values = { ...state.values }\r\n\r\n    // Featch Modules List data  First Rendering\r\n    const location = { ...history.location }\r\n    const hasShowModal = props.hasOwnProperty(mode.editValue)\r\n\r\n    // userAccess useEffect\r\n    useEffect(() => {\r\n        let userAcc = null;\r\n        let locationPath = location.pathname;\r\n        if (hasShowModal) {\r\n            locationPath = props.masterPath;\r\n        };\r\n        userAcc = userAccess.find((inx) => {\r\n            return (`/${inx.ActualPagePath}` === locationPath)\r\n        })\r\n        if (userAcc) {\r\n            setUserAccState(userAcc)\r\n            _cfunc.breadcrumbReturnFunc({ dispatch, userAcc });\r\n        };\r\n    }, [userAccess])\r\n\r\n    useEffect(() => {\r\n        dispatch(BreadcrumbShowCountlabel(`Count:${0}`));\r\n        return () => {\r\n            dispatch(postDeleteInvoiceDataExport_API_Success([]));\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n\r\n        if (tableData.btnId === \"excel_btnId\") {\r\n            if (DeletedInvoiceExportSerializerDetails.length > 0) {\r\n                ReportComponent({                // Download CSV\r\n                    pageField,\r\n                    excelData: DeletedInvoiceExportSerializerDetails,\r\n                    excelFileName: \"Deleted Invoice Data Export\"\r\n                })\r\n                dispatch(postDeleteInvoiceDataExport_API_Success([]));\r\n            }\r\n        }\r\n    }, [tableData]);\r\n\r\n    function excelhandler() {\r\n\r\n        try {\r\n            if ((isSCMParty) && (PartyDropdown === \"\")) {\r\n                customAlert({ Type: 3, Message: \"Please Select Party\" });\r\n                return;\r\n            };\r\n            const jsonBody = JSON.stringify({\r\n                \"FromDate\": values.FromDate,\r\n                \"ToDate\": values.ToDate,\r\n                \"Party\": PartyDropdown === \"\" ? _cfunc.loginPartyID() : PartyDropdown.value,\r\n            });\r\n            let config = { jsonBody, btnId: \"excel_btnId\" }\r\n            dispatch(postDeleteInvoiceDataExport_API(config))\r\n            dispatch(postDeleteInvoiceDataExport_API_Success([]))\r\n\r\n        } catch (error) { _cfunc.CommonConsole(error) }\r\n    }\r\n\r\n    function goButtonHandler() {\r\n        try {\r\n            const btnId = `gobtn-${url.DELETE_INVOICE_DATA_EXPORT}`\r\n            if ((isSCMParty) && (PartyDropdown === \"\")) {\r\n                customAlert({ Type: 3, Message: \"Please Select Party\" });\r\n                return;\r\n            };\r\n            const jsonBody = JSON.stringify({\r\n                \"FromDate\": values.FromDate,\r\n                \"ToDate\": values.ToDate,\r\n                \"Party\": PartyDropdown === \"\" ? _cfunc.loginPartyID() : PartyDropdown.value,\r\n            });\r\n            let config = { jsonBody, btnId: btnId }\r\n            dispatch(postDeleteInvoiceDataExport_API(config))\r\n            dispatch(postDeleteInvoiceDataExport_API_Success([]))\r\n\r\n        } catch (error) { _cfunc.CommonConsole(error) }\r\n    }\r\n\r\n    function fromdateOnchange(e, date) {\r\n        setState((i) => {\r\n            const a = { ...i }\r\n            a.values.FromDate = date;\r\n            a.hasValid.FromDate.valid = true\r\n            return a\r\n        })\r\n        dispatch(postDeleteInvoiceDataExport_API_Success([]))\r\n    }\r\n\r\n    function todateOnchange(e, date) {\r\n        setState((i) => {\r\n            const a = { ...i }\r\n            a.values.ToDate = date;\r\n            a.hasValid.ToDate.valid = true\r\n            return a\r\n        })\r\n        dispatch(postDeleteInvoiceDataExport_API_Success([]))\r\n    }\r\n\r\n    const partyOnchange = (e) => {\r\n        setPartyDropdown(e)\r\n        dispatch(postDeleteInvoiceDataExport_API_Success([]))\r\n    }\r\n\r\n    const Party_Option = Distributor.map(i => ({\r\n        value: i.id,\r\n        label: i.Name\r\n    }));\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <MetaTags>{_cfunc.metaTagLabel(userPageAccessState)}</MetaTags>\r\n            <div className=\"page-content\">\r\n                <div className=\"px-2   c_card_filter text-black\" >\r\n                    <div className=\"row\" >\r\n                        <Col sm={3} className=\"\">\r\n                            <FormGroup className=\"mb- row mt-3 mb-2 \" >\r\n                                <Label className=\"col-sm-4 p-2\"\r\n                                    style={{ width: \"83px\" }}>FromDate</Label>\r\n                                <Col sm=\"6\">\r\n                                    <C_DatePicker\r\n                                        name='FromDate'\r\n                                        value={values.FromDate}\r\n                                        onChange={fromdateOnchange}\r\n                                    />\r\n                                </Col>\r\n                            </FormGroup>\r\n                        </Col>\r\n                        <Col sm={3} className=\"\">\r\n                            <FormGroup className=\"mb- row mt-3 mb-2\" >\r\n                                <Label className=\"col-sm-4 p-2\"\r\n                                    style={{ width: \"65px\" }}>ToDate</Label>\r\n                                <Col sm=\"6\">\r\n                                    <C_DatePicker\r\n                                        name=\"ToDate\"\r\n                                        value={values.ToDate}\r\n                                        onChange={todateOnchange}\r\n                                    />\r\n                                </Col>\r\n                            </FormGroup>\r\n                        </Col>\r\n\r\n                        {isSCMParty &&\r\n                            <Col sm={3} className=\"\">\r\n                                <FormGroup className=\"mb- row mt-3\" >\r\n                                    <Label className=\"col-sm-4 p-2\"\r\n                                        style={{ width: \"65px\", marginRight: \"20px\" }}>Party</Label>\r\n                                    <Col sm=\"8\">\r\n                                        <Select\r\n                                            name=\"Party\"\r\n                                            value={PartyDropdown}\r\n                                            isSearchable={true}\r\n                                            className=\"react-dropdown\"\r\n                                            classNamePrefix=\"dropdown\"\r\n                                            styles={{\r\n                                                menu: provided => ({ ...provided, zIndex: 2 })\r\n                                            }}\r\n                                            options={Party_Option}\r\n                                            onChange={(e) => { partyOnchange(e) }}\r\n                                        />\r\n                                    </Col>\r\n                                </FormGroup>\r\n                            </Col>\r\n                        }\r\n                        <Col sm={1} className=\"mt-3 \">\r\n                            <C_Button\r\n                                type=\"button\"\r\n                                spinnerColor=\"white\"\r\n                                loading={GoBtnLoading === `gobtn-${url.DELETE_INVOICE_DATA_EXPORT}`}\r\n                                className=\"btn btn-success   \"\r\n                                onClick={goButtonHandler}\r\n                            >\r\n                                Show\r\n                            </C_Button>\r\n\r\n                        </Col>\r\n\r\n                        <Col sm={2} className=\"mt-3 \">\r\n                            <C_Button\r\n                                type=\"button\"\r\n                                spinnerColor=\"white\"\r\n                                loading={ExcelBtnLoading === `excel_btnId`}\r\n                                className=\"btn btn-primary   \"\r\n                                onClick={(e) => { excelhandler() }}\r\n                            >\r\n                                Excel Download\r\n                            </C_Button>\r\n                        </Col>\r\n\r\n\r\n                    </div>\r\n                </div>\r\n                <div className=\"mt-1\">\r\n                    <ToolkitProvider\r\n                        keyField=\"PartyID\"\r\n                        // data={tableData.btnId !== \"excel_btnId\" ? DeletedInvoiceExportSerializerDetails : [{}]}\r\n                        // columns={tableData.btnId !== \"excel_btnId\" ? tableColumns : [{}]}\r\n                        data={DeletedInvoiceExportSerializerDetails}\r\n                        columns={tableColumns}\r\n                        search\r\n                    >\r\n                        {(toolkitProps,) => (\r\n                            <React.Fragment>\r\n                                <Row>\r\n                                    <Col xl=\"12\">\r\n                                        <div className=\"table-responsive table\">\r\n                                            <BootstrapTable\r\n                                                keyField=\"PartyID\"\r\n                                                classes={\"table  table-bordered table-hover\"}\r\n                                                noDataIndication={\r\n                                                    <div className=\"text-danger text-center \">\r\n                                                        Record Not available\r\n                                                    </div>\r\n                                                }\r\n                                                onDataSizeChange={({ dataSize }) => {\r\n                                                    dispatch(BreadcrumbShowCountlabel(`Count:${dataSize > 0 && dataSize - 1}`));\r\n                                                }}\r\n                                                {...toolkitProps.baseProps}\r\n                                            />\r\n                                            {mySearchProps(toolkitProps.searchProps)}\r\n                                        </div>\r\n                                    </Col>\r\n                                </Row>\r\n\r\n                            </React.Fragment>\r\n                        )}\r\n                    </ToolkitProvider>\r\n                </div>\r\n\r\n            </div>\r\n        </React.Fragment >\r\n    )\r\n}\r\n\r\nexport default DeleteInvoiceDataExport;","D:\\Rohit\\Git projects\\Manthan\\src\\CustomTable2\\TableWrapper.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\Reports\\GSTR1Report\\GSTR1Report.js",["4387","4388","4389","4390","4391","4392","4393","4394","4395","4396","4397"],"import React, { useEffect, useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { Col, FormGroup, Label } from \"reactstrap\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { initialFiledFunc, } from \"../../components/Common/validationFunction\";\r\nimport { C_Button, Go_Button } from \"../../components/Common/CommonButton\";\r\nimport { C_DatePicker } from \"../../CustomValidateForm\";\r\nimport * as _cfunc from \"../../components/Common/CommonFunction\";\r\nimport { mode, } from \"../../routes/index\"\r\nimport { MetaTags } from \"react-meta-tags\";\r\nimport * as report from '../ReportIndex'\r\nimport C_Report from \"../../components/Common/C_Report\";\r\nimport { GST_R1_Report_API, GST_R1_Report_API_Success, GST_R3B_Report_API, GST_R3B_Report_API_Success } from \"../../store/Report/GSTR1ReportRedux/action\";\r\nimport PartyDropdown_Common from \"../../components/Common/PartyDropdown\";\r\nimport { customAlert } from \"../../CustomAlert/ConfirmDialog\";\r\n\r\nconst GSTR1Report = (props) => {\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n    const currentDate_ymd = _cfunc.date_ymd_func();\r\n\r\n    const fileds = {\r\n        FromDate: currentDate_ymd,\r\n        ToDate: currentDate_ymd,\r\n        Customer: { value: \"\", label: \"All\" },\r\n    }\r\n\r\n    const [state, setState] = useState(() => initialFiledFunc(fileds))\r\n    const [userPageAccessState, setUserAccState] = useState('');\r\n\r\n    const reducers = useSelector(\r\n        (state) => ({\r\n            GstR3BReportData: state.GSTR1ReportReducer.GstR3BReportData,\r\n            GstR1ReportData: state.GSTR1ReportReducer.GstR1ReportData,\r\n            GstR3BBtnLoading: state.GSTR1ReportReducer.GstR3BBtnLoading,\r\n            GstR1BtnLoading: state.GSTR1ReportReducer.GstR1BtnLoading,\r\n\r\n            supplier: state.CommonAPI_Reducer.vendorSupplierCustomer,\r\n            userAccess: state.Login.RoleAccessUpdateData,\r\n            SSDD_List: state.CommonAPI_Reducer.SSDD_List,\r\n            CustomerLoading: state.CommonAPI_Reducer.vendorSupplierCustomerLoading,\r\n            pageField: state.CommonPageFieldReducer.pageFieldList\r\n        })\r\n    );\r\n    const { userAccess, GstR3BReportData = [], GstR1ReportData = [], GstR1BtnLoading, GstR3BBtnLoading, } = reducers;\r\n\r\n    const values = { ...state.values }\r\n\r\n    // Featch Modules List data  First Rendering\r\n    const location = { ...history.location }\r\n    const hasShowModal = props.hasOwnProperty(mode.editValue)\r\n\r\n    // userAccess useEffect\r\n    useEffect(() => {\r\n        let userAcc = null;\r\n        let locationPath = location.pathname;\r\n        if (hasShowModal) {\r\n            locationPath = props.masterPath;\r\n        };\r\n        userAcc = userAccess.find((inx) => {\r\n            return (`/${inx.ActualPagePath}` === locationPath)\r\n        })\r\n        if (userAcc) {\r\n            setUserAccState(userAcc)\r\n            _cfunc.breadcrumbReturnFunc({ dispatch, userAcc });\r\n        };\r\n    }, [userAccess])\r\n\r\n    useEffect(() => {\r\n        if ((GstR3BReportData.length !== 0)) {\r\n\r\n            const blob = new Blob([GstR3BReportData], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });\r\n            const url = URL.createObjectURL(blob);\r\n            const link = document.createElement('a');\r\n            link.href = url;\r\n            link.download = `GST_R3B_Report_From_(${values.FromDate})_To_(${values.ToDate}).xlsx`;\r\n            link.click();\r\n            dispatch(GST_R3B_Report_API_Success([]))\r\n        } else if ((GstR1ReportData.length !== 0)) {\r\n            const blob = new Blob([GstR1ReportData], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });\r\n            const url = URL.createObjectURL(blob);\r\n            const link = document.createElement('a');\r\n            link.href = url;\r\n            link.download = `GST_R1_Report_From_(${values.FromDate})_To_(${values.ToDate}).xlsx`;\r\n            link.click();\r\n            dispatch(GST_R1_Report_API_Success([]))\r\n        }\r\n\r\n    }, [GstR3BReportData, GstR1ReportData])\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            dispatch(GST_R3B_Report_API_Success([]))\r\n            dispatch(GST_R1_Report_API_Success([]))\r\n        }\r\n    }, [])\r\n\r\n    function goButtonHandler(Type) {\r\n\r\n        if (_cfunc.loginSelectedPartyID() === 0) {\r\n            customAlert({ Type: 3, Message: \"Please Select Party\" });\r\n            return;\r\n        };\r\n\r\n        const jsonBody = JSON.stringify({\r\n            \"FromDate\": values.FromDate,\r\n            \"ToDate\": values.ToDate,\r\n            \"Party\": _cfunc.loginSelectedPartyID()\r\n        });\r\n\r\n        let config = { jsonBody }\r\n        if (Type === \"GSTR1\") {\r\n            dispatch(GST_R1_Report_API(config))\r\n        } else {\r\n            dispatch(GST_R3B_Report_API(config))\r\n        }\r\n    }\r\n\r\n    function fromdateOnchange(e, date) {\r\n        setState((i) => {\r\n            const a = { ...i }\r\n            a.values.FromDate = date;\r\n            a.hasValid.FromDate.valid = true\r\n            return a\r\n        })\r\n    }\r\n\r\n    function todateOnchange(e, date) {\r\n        setState((i) => {\r\n            const a = { ...i }\r\n            a.values.ToDate = date;\r\n            a.hasValid.ToDate.valid = true\r\n            return a\r\n        })\r\n    }\r\n\r\n    function partyOnChngeButtonHandler() {\r\n        dispatch(GST_R3B_Report_API_Success([]))\r\n        dispatch(GST_R1_Report_API_Success([]))\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <MetaTags>{_cfunc.metaTagLabel(userPageAccessState)}</MetaTags>\r\n            <div className=\"page-content\">\r\n\r\n                <PartyDropdown_Common\r\n                    changeButtonHandler={partyOnChngeButtonHandler} />\r\n\r\n                <div className=\"px-2   c_card_filter text-black\" >\r\n                    <div className=\"row\" >\r\n                        <Col sm={3} className=\"\">\r\n                            <FormGroup className=\"mb- row mt-3 mb-2 \" >\r\n                                <Label className=\"col-sm-4 p-2\"\r\n                                    style={{ width: \"83px\" }}>FromDate</Label>\r\n                                <Col sm=\"6\">\r\n                                    <C_DatePicker\r\n                                        name='FromDate'\r\n                                        value={values.FromDate}\r\n                                        onChange={fromdateOnchange}\r\n                                    />\r\n                                </Col>\r\n                            </FormGroup>\r\n                        </Col>\r\n\r\n                        <Col sm={3} className=\"\">\r\n                            <FormGroup className=\"mb- row mt-3 mb-2\" >\r\n                                <Label className=\"col-sm-4 p-2\"\r\n                                    style={{ width: \"65px\" }}>ToDate</Label>\r\n                                <Col sm=\"6\">\r\n                                    <C_DatePicker\r\n                                        name=\"ToDate\"\r\n                                        value={values.ToDate}\r\n                                        onChange={todateOnchange}\r\n                                    />\r\n                                </Col>\r\n                            </FormGroup>\r\n                        </Col>\r\n                        <Col sm={2} className=\"mt-3\" >\r\n                            <C_Button\r\n                                type=\"button\"\r\n                                style={{ width: \"90px\" }}\r\n                                spinnerColor=\"white\"\r\n                                loading={GstR1BtnLoading}\r\n                                className=\"btn btn-primary\"\r\n                                onClick={() => goButtonHandler(\"GSTR1\")}\r\n                            >\r\n                                GST R1\r\n                            </C_Button>\r\n                        </Col>\r\n\r\n                        <Col sm={2} className=\"mt-3\" >\r\n                            <C_Button\r\n                                type=\"button\"\r\n                                style={{ width: \"90px\" }}\r\n                                spinnerColor=\"white\"\r\n                                loading={GstR3BBtnLoading}\r\n                                className=\"btn btn-primary\"\r\n                                onClick={() => goButtonHandler(\"GSTR3B\")}\r\n                            >\r\n                                GST R3B\r\n                            </C_Button>\r\n                        </Col>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <C_Report />\r\n        </React.Fragment >\r\n    )\r\n}\r\n\r\nexport default GSTR1Report;","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Report\\GSTR1ReportRedux\\saga.js",["4398"],"import { call, put, takeLatest } from \"redux-saga/effects\";\r\nimport {\r\n    GST_3B_REPORT_API,\r\n    GST_R1_REPORT_API,\r\n    GST_R3B_REPORT_API,\r\n} from \"./actionType\";\r\nimport {\r\n    GST_R1_Report_API_ErrorAction,\r\n    GST_R1_Report_API_Success,\r\n    GST_R3B_Report_API_Success,\r\n} from \"./action\";\r\nimport { Gst_R1_Report_API, Gst_R3B_Report_API, } from \"../../../helpers/backend_helper\";\r\nfunction* GstR1Report_Gen({ config }) {\r\n    try {\r\n        const response = yield call(Gst_R1_Report_API, config);\r\n        \r\n        yield put(GST_R1_Report_API_Success(response))\r\n    } catch (error) { yield put(GST_R1_Report_API_ErrorAction()) }\r\n}\r\n\r\nfunction* GstR3BReport_Gen({ config }) {\r\n    try {\r\n        const response = yield call(Gst_R3B_Report_API, config);\r\n        \r\n        yield put(GST_R3B_Report_API_Success(response))\r\n    } catch (error) { yield put(GST_R1_Report_API_ErrorAction()) }\r\n}\r\n\r\nfunction* GstR1ReportSaga() {\r\n    yield takeLatest(GST_R3B_REPORT_API, GstR3BReport_Gen)\r\n    yield takeLatest(GST_R1_REPORT_API, GstR1Report_Gen)\r\n\r\n\r\n\r\n}\r\n\r\nexport default GstR1ReportSaga;","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Report\\GSTR1ReportRedux\\action.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Report\\GSTR1ReportRedux\\actionType.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Report\\GSTR1ReportRedux\\reducer.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\Reports\\ReturnReport\\ReturnReport.js",["4399","4400","4401","4402","4403","4404","4405","4406","4407"],"import React, { useEffect, useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { Col, FormGroup, Label, Row } from \"reactstrap\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { C_Button } from \"../../components/Common/CommonButton\";\r\nimport { C_DatePicker, C_Select } from \"../../CustomValidateForm\";\r\nimport * as _cfunc from \"../../components/Common/CommonFunction\";\r\nimport { mode, pageId } from \"../../routes/index\"\r\nimport { MetaTags } from \"react-meta-tags\";\r\nimport * as XLSX from 'xlsx';\r\nimport ToolkitProvider from \"react-bootstrap-table2-toolkit\";\r\nimport BootstrapTable from \"react-bootstrap-table-next\";\r\nimport { mySearchProps } from \"../../components/Common/SearchBox/MySearch\";\r\nimport { BreadcrumbShowCountlabel, commonPageField, commonPageFieldSuccess } from \"../../store/actions\";\r\nimport DynamicColumnHook from \"../../components/Common/TableCommonFunc\";\r\nimport { Return_Report_Action, Return_Report_Action_Success } from \"../../store/Report/ReturnReportRedux/action\";\r\n\r\nconst ReturnReport = (props) => {\r\n\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n    const currentDate_ymd = _cfunc.date_ymd_func();\r\n    const isSCMParty = _cfunc.loginIsSCMParty();\r\n\r\n    const [headerFilters, setHeaderFilters] = useState('');\r\n    const [userPageAccessState, setUserAccState] = useState('');\r\n    const [distributorDropdown, setDistributorDropdown] = useState([{ value: \"\", label: \"All\" }]);\r\n    const [tableData, setTableData] = useState([]);\r\n    const [btnMode, setBtnMode] = useState(0);\r\n\r\n    const {\r\n        goButtonData,\r\n        pageField,\r\n        userAccess,\r\n        Distributor,\r\n        partyDropdownLoading\r\n    } = useSelector((state) => ({\r\n        goButtonData: state.ReturnReportReducer.returnReportData,\r\n        partyDropdownLoading: state.CommonPartyDropdownReducer.partyDropdownLoading,\r\n        Distributor: state.CommonPartyDropdownReducer.commonPartyDropdown,\r\n        userAccess: state.Login.RoleAccessUpdateData,\r\n        pageField: state.CommonPageFieldReducer.pageField\r\n    })\r\n    );\r\n    \r\n    const { fromdate = currentDate_ymd, todate = currentDate_ymd } = headerFilters;\r\n\r\n    // Featch Modules List data  First Rendering\r\n    const location = { ...history.location }\r\n    const hasShowModal = props.hasOwnProperty(mode.editValue)\r\n\r\n    useEffect(() => {\r\n\r\n        dispatch(commonPageFieldSuccess(null));\r\n        dispatch(commonPageField(pageId.RETURN_REPORT))\r\n\r\n    }, []);\r\n\r\n    // userAccess useEffect\r\n    useEffect(() => {\r\n        let userAcc = null;\r\n        let locationPath = location.pathname;\r\n        if (hasShowModal) {\r\n            locationPath = props.masterPath;\r\n        };\r\n        userAcc = userAccess.find((inx) => {\r\n            return (`/${inx.ActualPagePath}` === locationPath)\r\n        })\r\n        if (userAcc) {\r\n            setUserAccState(userAcc)\r\n            _cfunc.breadcrumbReturnFunc({ dispatch, userAcc });\r\n        };\r\n    }, [userAccess])\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            setTableData([]);\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (tableData.length === 0) {\r\n            setBtnMode(0)\r\n        }\r\n        dispatch(BreadcrumbShowCountlabel(`Return Count:${tableData.length}`));\r\n    }, [tableData]);\r\n\r\n    const Party_Option = Distributor.map(i => ({\r\n        value: i.id,\r\n        label: i.Name\r\n    }));\r\n\r\n    const [tableColumns] = DynamicColumnHook({ pageField, })\r\n\r\n    useEffect(() => {\r\n\r\n        try {\r\n            if ((goButtonData.Status === true) && (goButtonData.StatusCode === 200)) {\r\n                setBtnMode(0);\r\n\r\n                if (btnMode === 2) {\r\n                    const worksheet = XLSX.utils.json_to_sheet(goButtonData.Data);\r\n                    const workbook = XLSX.utils.book_new();\r\n                    XLSX.utils.book_append_sheet(workbook, worksheet, \"ReturnReport\");\r\n                    XLSX.writeFile(workbook, `Return Report From ${_cfunc.date_dmy_func(fromdate)} To ${_cfunc.date_dmy_func(todate)}.xlsx`);\r\n\r\n                    dispatch(Return_Report_Action_Success([]));\r\n                    setDistributorDropdown([{ value: \"\", label: \"All\" }])\r\n                }\r\n                else {\r\n                    const UpdatedTableData = goButtonData.Data.map((item, index) => {\r\n\r\n                        return {\r\n                            ...item, id: index + 1,\r\n                        };\r\n                    });\r\n                    setTableData(UpdatedTableData);\r\n                    dispatch(Return_Report_Action_Success([]));\r\n\r\n                }\r\n            }\r\n            else if ((goButtonData.Status === true)) {\r\n                setTableData([]);\r\n            }\r\n            setBtnMode(0);\r\n        }\r\n        catch (e) { console.log(e) }\r\n\r\n    }, [goButtonData]);\r\n\r\n    function excel_And_GoBtnHandler(e, Btnmode) {\r\n\r\n        setBtnMode(Btnmode);\r\n\r\n        var isDistributorDropdown = ''\r\n        if (distributorDropdown[0].value === \"\") {\r\n            isDistributorDropdown = Party_Option.filter(i => !(i.value === '')).map(obj => obj.value).join(',');\r\n        }\r\n        else {\r\n            isDistributorDropdown = distributorDropdown.filter(i => !(i.value === '')).map(obj => obj.value).join(',');\r\n        }\r\n\r\n        const jsonBody = JSON.stringify({\r\n            \"FromDate\": fromdate,\r\n            \"ToDate\": todate,\r\n            \"Party\": !(isSCMParty) ? _cfunc.loginPartyID().toString() : isDistributorDropdown,\r\n        });\r\n        let config = { jsonBody }\r\n        dispatch(Return_Report_Action(config));\r\n    }\r\n\r\n    function fromdateOnchange(e, date) {\r\n\r\n        let newObj = { ...headerFilters }\r\n        newObj.fromdate = date\r\n        setHeaderFilters(newObj)\r\n        setTableData([]);\r\n    }\r\n\r\n    function todateOnchange(e, date) {\r\n\r\n        let newObj = { ...headerFilters }\r\n        newObj.todate = date\r\n        setHeaderFilters(newObj);\r\n        setTableData([]);\r\n    }\r\n\r\n    function PartyDrodownOnChange(e = []) {\r\n\r\n        if (e.length === 0) {\r\n            e = [{ value: \"\", label: \"All\" }]\r\n        } else {\r\n            e = e.filter(i => !(i.value === ''))\r\n        }\r\n        setDistributorDropdown(e);\r\n        setTableData([]);\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <MetaTags>{_cfunc.metaTagLabel(userPageAccessState)}</MetaTags>\r\n\r\n            <div className=\"page-content\">\r\n                <div className=\"px-2   c_card_filter text-black mb-1\" >\r\n                    <div className=\"row\" >\r\n                        <Col sm={3} className=\"\">\r\n                            <FormGroup className=\"mb- row mt-3 mb-2 \" >\r\n                                <Label className=\"col-sm-4 p-2\"\r\n                                    style={{ width: \"83px\" }}>FromDate</Label>\r\n                                <Col sm=\"6\">\r\n                                    <C_DatePicker\r\n                                        name='FromDate'\r\n                                        value={fromdate}\r\n                                        onChange={fromdateOnchange}\r\n                                    />\r\n                                </Col>\r\n                            </FormGroup>\r\n                        </Col>\r\n\r\n                        <Col sm={3} className=\"\">\r\n                            <FormGroup className=\"mb- row mt-3 mb-2\" >\r\n                                <Label className=\"col-sm-4 p-2\"\r\n                                    style={{ width: \"65px\" }}>ToDate</Label>\r\n                                <Col sm=\"6\">\r\n                                    <C_DatePicker\r\n                                        name=\"ToDate\"\r\n                                        value={todate}\r\n                                        onChange={todateOnchange}\r\n                                    />\r\n                                </Col>\r\n                            </FormGroup>\r\n                        </Col>\r\n\r\n                        {isSCMParty &&\r\n                            <Col sm={3} className=\"\">\r\n                                <FormGroup className=\"mb- row mt-3\" >\r\n                                    <Label className=\"col-sm-4 p-2\"\r\n                                        style={{ width: \"65px\", marginRight: \"20px\" }}>Party</Label>\r\n                                    <Col sm=\"8\">\r\n                                        <C_Select\r\n                                            name=\"Distributor\"\r\n                                            value={distributorDropdown}\r\n                                            isSearchable={true}\r\n                                            isMulti={true}\r\n                                            isLoading={partyDropdownLoading}\r\n                                            className=\"react-dropdown\"\r\n                                            classNamePrefix=\"dropdown\"\r\n                                            styles={{\r\n                                                menu: provided => ({ ...provided, zIndex: 2 })\r\n                                            }}\r\n                                            options={Party_Option}\r\n                                            onChange={PartyDrodownOnChange}\r\n                                        />\r\n                                    </Col>\r\n                                </FormGroup>\r\n                            </Col>\r\n                        }\r\n\r\n                        <Col sm={1} className=\"mt-3\" >\r\n                            <C_Button\r\n                                type=\"button\"\r\n                                spinnerColor=\"white\"\r\n                                loading={btnMode === 1 && true}\r\n                                className=\"btn btn-success\"\r\n                                onClick={(e) => excel_And_GoBtnHandler(e, 1)}\r\n                            >\r\n                                Show\r\n                            </C_Button>\r\n\r\n                        </Col>\r\n\r\n                        <Col sm={2} className=\"mt-3 \">\r\n                            <C_Button\r\n                                type=\"button\"\r\n                                spinnerColor=\"white\"\r\n                                loading={btnMode === 2 && true}\r\n                                className=\"btn btn-primary\"\r\n                                onClick={(e) => excel_And_GoBtnHandler(e, 2)}\r\n                            >\r\n                                Excel Download\r\n                            </C_Button>\r\n                        </Col>\r\n                    </div>\r\n                </div>\r\n\r\n                <div>\r\n                    <ToolkitProvider\r\n                        keyField={\"id\"}\r\n                        data={tableData}\r\n                        columns={tableColumns}\r\n                        search\r\n                    >\r\n                        {(toolkitProps,) => (\r\n                            <React.Fragment>\r\n                                <Row>\r\n                                    <Col xl=\"12\">\r\n                                        <div className=\"table-responsive table\">\r\n                                            <BootstrapTable\r\n                                                keyField={\"id\"}\r\n                                                classes={\"table  table-bordered table-hover\"}\r\n                                                noDataIndication={\r\n                                                    <div className=\"text-danger text-center \">\r\n                                                        Record Not available\r\n                                                    </div>\r\n                                                }\r\n                                                {...toolkitProps.baseProps}\r\n                                            />\r\n                                            {mySearchProps(toolkitProps.searchProps)}\r\n                                        </div>\r\n                                    </Col>\r\n                                </Row>\r\n\r\n                            </React.Fragment>\r\n                        )}\r\n                    </ToolkitProvider>\r\n\r\n                </div>\r\n\r\n            </div>\r\n\r\n        </React.Fragment >\r\n    )\r\n}\r\n\r\nexport default ReturnReport;","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Report\\ReturnReportRedux\\saga.js",["4408"],"import { call, put, takeLatest } from \"redux-saga/effects\";\r\nimport { RETURN_REPORT_ACTION } from \"./actionType\";\r\nimport { Return_Report_Action_Success, Return_Report_ErrorAction } from \"./action\";\r\nimport { ReturnReport_API } from \"../../../helpers/backend_helper\";\r\nimport { CommonConsole } from \"../../../components/Common/CommonFunction\";\r\n\r\nfunction* ReturnReport_GenFunc({ config }) {\r\n\r\n\r\n    try {\r\n        const response = yield call(ReturnReport_API, config);\r\n        response.Data.map((i) => {\r\n            i[\"FullReturnNumber\"] = (`${i.FullReturnNumber}(${i.id})`);\r\n            return i;\r\n        });\r\n        yield put(Return_Report_Action_Success(response))\r\n    } catch (error) { yield put(Return_Report_ErrorAction()) }\r\n}\r\n\r\nfunction* ReturnReportSaga() {\r\n    yield takeLatest(RETURN_REPORT_ACTION, ReturnReport_GenFunc)\r\n}\r\n\r\nexport default ReturnReportSaga;","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Report\\ReturnReportRedux\\action.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Report\\ReturnReportRedux\\actionType.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Report\\ReturnReportRedux\\reducer.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\CustomTable2\\TablePagination.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\helpers\\axios_Config.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\Reports\\ReportComponent.js",["4409","4410","4411","4412"],"import React, { useState } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { Col, FormGroup, Label } from \"reactstrap\";\r\nimport Papa from 'papaparse';\r\nimport { C_Button } from \"../components/Common/CommonButton\";\r\nimport { C_Select } from \"../CustomValidateForm\";\r\nimport { loginIsSCMParty } from \"../components/Common/CommonFunction\";\r\n\r\nexport function ReportComponent({ pageField, excelData, excelFileName }) {\r\n    debugger\r\n    const csvColumns = pageField.PageFieldMaster\r\n        .filter(column => column.ShowInListPage) // Only include columns where ShowInListPage is true\r\n        .sort((a, b) => a.ListPageSeq - b.ListPageSeq) // Sort columns by ListPageSeq in ascending order\r\n        .map(column => column.ControlID); // Extract ControlID as column headers\r\n\r\n    const csvHeaderColumns = pageField.PageFieldMaster\r\n        .filter(column => column.ShowInListPage) // Only include columns where ShowInListPage is true\r\n        .sort((a, b) => a.ListPageSeq - b.ListPageSeq) // Sort columns by ListPageSeq in ascending order\r\n        .map(column => column.FieldLabel); // Extract FieldLabel as column headers\r\n\r\n    // Map the data to include only the properties corresponding to the columns\r\n    const csvData = excelData.map(item =>\r\n        csvColumns.map(column => item[column])\r\n    );\r\n\r\n    // Combine column headers and data into a single array\r\n    const csvContent = [csvHeaderColumns, ...csvData];\r\n\r\n    // Create the CSV content\r\n    const csvContentString = Papa.unparse(csvContent, { header: true });\r\n\r\n    // Create and trigger the download\r\n    const blob = new Blob([csvContentString], { type: \"text/csv\" });\r\n    const url = URL.createObjectURL(blob);\r\n\r\n    const a = document.createElement(\"a\");\r\n    a.href = url;\r\n    a.download = `${excelFileName}.csv`;\r\n    a.click();\r\n\r\n    URL.revokeObjectURL(url);\r\n\r\n}\r\n\r\nexport const ShowAndExcelBtn = (props) => {\r\n    const { showLoading, excelLoading, showOnClick, excelOnClick } = props\r\n\r\n    return (\r\n        <>\r\n            <Col sm={1} className=\"mt-3\" >\r\n                <C_Button\r\n                    type=\"button\"\r\n                    spinnerColor=\"white\"\r\n                    loading={showLoading}\r\n                    className=\"btn btn-success\"\r\n                    onClick={showOnClick}\r\n                >\r\n                    Show\r\n                </C_Button>\r\n\r\n            </Col>\r\n\r\n            <Col sm={2} className=\"mt-3 \">\r\n                <C_Button\r\n                    type=\"button\"\r\n                    spinnerColor=\"white\"\r\n                    loading={excelLoading}\r\n                    className=\"btn btn-primary\"\r\n                    onClick={excelOnClick}\r\n                >\r\n                    Excel Download\r\n                </C_Button>\r\n            </Col>\r\n        </>)\r\n\r\n}\r\n\r\nconst PartyDropdownForReport = (props) => {\r\n\r\n    const isSCMParty = loginIsSCMParty();\r\n    const { partyValue, setPartyValue } = props\r\n\r\n    const { partyList, partyDropdownLoading } = useSelector((state) => ({\r\n        partyList: state.CommonPartyDropdownReducer.commonPartyDropdown,\r\n        partyDropdownLoading: state.CommonPartyDropdownReducer.partyDropdownLoading,\r\n    }));\r\n\r\n    const PartyDropdownOptions = partyList.map((data) => ({\r\n        value: data.id,\r\n        label: data.Name,\r\n        SAPPartyCode: data.SAPPartyCode\r\n    }))\r\n\r\n    return (\r\n        isSCMParty && (\r\n            <>\r\n                <Col sm={3}>\r\n                    <FormGroup className=\" row mt-3 \" >\r\n                        <Label className=\"col-md-3 p-2 \"\r\n                            style={{ width: \"90px\" }}>Party</Label>\r\n                        <Col sm={7}>\r\n                            <C_Select\r\n                                value={partyValue}\r\n                                styles={{ menu: (provided) => ({ ...provided, zIndex: 2 }) }}\r\n                                isSearchable={true}\r\n                                isLoading={partyDropdownLoading}\r\n                                className=\"react-dropdown\"\r\n                                classNamePrefix=\"dropdown\"\r\n                                options={PartyDropdownOptions}\r\n                                onChange={(e) => setPartyValue(e)}\r\n                            />\r\n                        </Col>\r\n                    </FormGroup>\r\n                </Col >\r\n            </>\r\n        )\r\n    );\r\n};\r\n\r\nexport default PartyDropdownForReport;\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\Reports\\ItemRegisterReport\\ItemRegisterReport.js",["4413","4414","4415","4416","4417","4418","4419","4420","4421","4422","4423"],"import React, { useEffect, useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { Col, FormGroup, Label } from \"reactstrap\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { initialFiledFunc, } from \"../../components/Common/validationFunction\";\r\nimport { C_Button } from \"../../components/Common/CommonButton\";\r\nimport { C_DatePicker, C_Select } from \"../../CustomValidateForm\";\r\nimport * as _cfunc from \"../../components/Common/CommonFunction\";\r\nimport { mode, } from \"../../routes/index\"\r\nimport { MetaTags } from \"react-meta-tags\";\r\nimport { GetVenderSupplierCustomer, GetVenderSupplierCustomerSuccess, getBaseUnit_ForDropDown, goButtonPartyItemAddPage, getpdfReportdata, getpdfReportdataSuccess } from \"../../store/actions\";\r\nimport { customAlert } from \"../../CustomAlert/ConfirmDialog\";\r\nimport * as report from '../ReportIndex'\r\nimport { ItemRegister_API, PartyLedgerReport_API } from \"../../helpers/backend_helper\";\r\nimport C_Report from \"../../components/Common/C_Report\";\r\nimport PartyDropdown_Common from \"../../components/Common/PartyDropdown\";\r\n\r\nconst ItemRegisterReport = (props) => {\r\n\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n    const currentDate_ymd = _cfunc.date_ymd_func();\r\n\r\n    const fileds = {\r\n        FromDate: currentDate_ymd,\r\n        ToDate: currentDate_ymd,\r\n        Item: \"\",\r\n        Unit: \"\",\r\n\r\n    }\r\n\r\n    const [state, setState] = useState(() => initialFiledFunc(fileds))\r\n    const [subPageMode] = useState(history.location.pathname);\r\n    const [userPageAccessState, setUserAccState] = useState('');\r\n\r\n    const reducers = useSelector(\r\n        (state) => ({\r\n            pdfdata: state.PdfReportReducers.pdfdata,\r\n            ItemList: state.PartyItemsReducer.partyItem,\r\n            BaseUnit: state.ItemMastersReducer.BaseUnit,\r\n            goBtnLoading: state.PdfReportReducers.goBtnLoading,\r\n            supplier: state.CommonAPI_Reducer.vendorSupplierCustomer,\r\n            userAccess: state.Login.RoleAccessUpdateData,\r\n            SSDD_List: state.CommonAPI_Reducer.SSDD_List,\r\n            CustomerLoading: state.CommonAPI_Reducer.vendorSupplierCustomerLoading,\r\n            pageField: state.CommonPageFieldReducer.pageFieldList\r\n        })\r\n    );\r\n    const { userAccess, pdfdata, CustomerLoading, ItemList, BaseUnit } = reducers;\r\n\r\n    const values = { ...state.values }\r\n\r\n    // Featch Modules List data  First Rendering\r\n    const location = { ...history.location }\r\n    const hasShowModal = props.hasOwnProperty(mode.editValue)\r\n\r\n    // userAccess useEffect\r\n    useEffect(() => {\r\n        let userAcc = null;\r\n        let locationPath = location.pathname;\r\n        if (hasShowModal) {\r\n            locationPath = props.masterPath;\r\n        };\r\n        userAcc = userAccess.find((inx) => {\r\n            return (`/${inx.ActualPagePath}` === locationPath)\r\n        })\r\n        if (userAcc) {\r\n            setUserAccState(userAcc)\r\n            _cfunc.breadcrumbReturnFunc({ dispatch, userAcc });\r\n        };\r\n    }, [userAccess])\r\n\r\n    useEffect(() => {\r\n        dispatch(getBaseUnit_ForDropDown());\r\n        const jsonBody = JSON.stringify({ ..._cfunc.loginJsonBody() });\r\n        dispatch(goButtonPartyItemAddPage({jsonBody}));\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if ((pdfdata.Status === true) && (pdfdata.StatusCode === 204)) {\r\n            dispatch(getpdfReportdataSuccess({ Status: false }))\r\n            customAlert({\r\n                Type: 3,\r\n                Message: pdfdata.Message,\r\n            })\r\n            return\r\n        }\r\n    }, [pdfdata])\r\n\r\n    const ItemOptions = ItemList.map((i) => ({\r\n        value: i.Item,\r\n        label: i.ItemName,\r\n    }))\r\n\r\n    const BaseUnit_DropdownOptions = BaseUnit.filter(index => index.Name === \"No\" || index.Name === \"Kg\" || index.Name === \"Box\")\r\n        .map(data => ({\r\n            value: data.id,\r\n            label: data.Name\r\n        }));\r\n    const onselecthandel = (e) => {\r\n        setState((i) => {\r\n            const a = { ...i }\r\n            a.values.Item = e;\r\n            a.hasValid.Item.valid = true\r\n            return a\r\n        })\r\n    }\r\n\r\n    const onUnitselecthandel = (e) => {\r\n        setState((i) => {\r\n            const a = { ...i }\r\n            a.values.Unit = e;\r\n            a.hasValid.Unit.valid = true\r\n            return a\r\n        })\r\n    }\r\n\r\n    function goButtonHandler() {\r\n\r\n        if (_cfunc.loginSelectedPartyID() === 0) {\r\n            customAlert({ Type: 3, Message: \"Please Select Party\" });\r\n            return;\r\n        };\r\n\r\n        const jsonBody = JSON.stringify({\r\n            \"FromDate\": values.FromDate,\r\n            \"ToDate\": values.ToDate,\r\n            \"Item\": values.Item.value,\r\n            \"Unit\": values.Unit.value,\r\n            \"Party\": _cfunc.loginSelectedPartyID()\r\n        });\r\n\r\n        let config = {\r\n            ReportType: report.ItemRegister, jsonBody, ItemName: values.Item.label, FromDate: values.FromDate, ToDate: values.ToDate, Unit: values.Unit\r\n        }\r\n\r\n        if (values.Item === \"\") {\r\n            customAlert({\r\n                Type: 3,\r\n                Message: \"Please Select Item\",\r\n            })\r\n            return\r\n        } else if (values.Unit === \"\") {\r\n            customAlert({\r\n                Type: 3,\r\n                Message: \"Please Select Unit\",\r\n            })\r\n            return\r\n        } else {\r\n            dispatch(getpdfReportdata(ItemRegister_API, config))\r\n        }\r\n    }\r\n\r\n    function fromdateOnchange(e, date) {\r\n        setState((i) => {\r\n            const a = { ...i }\r\n            a.values.FromDate = date;\r\n            a.hasValid.FromDate.valid = true\r\n            return a\r\n        })\r\n    }\r\n\r\n    function todateOnchange(e, date) {\r\n        setState((i) => {\r\n            const a = { ...i }\r\n            a.values.ToDate = date;\r\n            a.hasValid.ToDate.valid = true\r\n            return a\r\n        })\r\n    }\r\n\r\n    function partySelectButtonHandler() {\r\n        dispatch(GetVenderSupplierCustomer({ subPageMode, \"PartyID\": _cfunc.loginSelectedPartyID() }));\r\n    }\r\n\r\n    function partyOnChngeButtonHandler() {\r\n        dispatch(getpdfReportdataSuccess({ Status: false }));\r\n        dispatch(GetVenderSupplierCustomerSuccess([]));\r\n        setState((i) => {\r\n            let a = { ...i }\r\n            a.values.Item = { value: \"\", label: \"All\" }\r\n            a.hasValid.Item.valid = true;\r\n            return a\r\n        })\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <MetaTags>{_cfunc.metaTagLabel(userPageAccessState)}</MetaTags>\r\n            <div className=\"page-content\">\r\n                <PartyDropdown_Common \r\n                    goButtonHandler={partySelectButtonHandler}\r\n                    changeButtonHandler={partyOnChngeButtonHandler} />\r\n\r\n                <div className=\"px-2   c_card_filter text-black\" >\r\n                    <div className=\"row\" >\r\n                        <Col lg={0} className=\"\">\r\n                            <FormGroup className=\"mb- row mt-3 mb-2 \" >\r\n                                <Label className=\"col-sm-4 p-2\"\r\n                                    style={{ width: \"70px\" }}>FromDate</Label>\r\n                                <Col sm={6}>\r\n                                    <C_DatePicker\r\n                                        name='FromDate'\r\n                                        value={values.FromDate}\r\n                                        onChange={fromdateOnchange}\r\n                                    />\r\n                                </Col>\r\n                            </FormGroup>\r\n                        </Col>\r\n\r\n                        <Col lg={0} className=\"\">\r\n                            <FormGroup className=\"mb- row mt-3 mb-2\" >\r\n                                <Label className=\"col-sm-4 p-2\"\r\n                                    style={{ width: \"55px\" }}>ToDate</Label>\r\n                                <Col sm={6}>\r\n                                    <C_DatePicker\r\n                                        name=\"ToDate\"\r\n                                        value={values.ToDate}\r\n                                        onChange={todateOnchange}\r\n                                    />\r\n                                </Col>\r\n                            </FormGroup>\r\n                        </Col>\r\n\r\n\r\n                        <Col sm={3} className=\"\">\r\n                            <FormGroup className=\"mb- row mt-3\" >\r\n                                <Label className=\"col-sm-4 p-2\"\r\n                                    style={{ width: \"70px\" }}>Item</Label>\r\n                                <Col sm={7}>\r\n                                    <C_Select\r\n                                        name=\"Item\"\r\n                                        value={values.Item}\r\n                                        isSearchable={true}\r\n                                        isLoading={CustomerLoading}\r\n                                        className=\"react-dropdown\"\r\n                                        classNamePrefix=\"dropdown\"\r\n                                        styles={{\r\n                                            menu: provided => ({ ...provided, zIndex: 2 })\r\n                                        }}\r\n                                        options={ItemOptions}\r\n                                        onChange={(e) => { onselecthandel(e) }}\r\n\r\n                                    />\r\n                                </Col>\r\n                            </FormGroup>\r\n                        </Col>\r\n\r\n                        <Col sm={3} className=\"\">\r\n                            <FormGroup className=\"mb- row mt-3\" >\r\n                                <Label className=\"col-sm-4 p-2\"\r\n                                    style={{ width: \"70px\" }}>Unit</Label>\r\n                                <Col sm={6}>\r\n                                    <C_Select\r\n                                        name=\"Unit\"\r\n                                        value={values.Unit}\r\n                                        isSearchable={true}\r\n                                        isLoading={CustomerLoading}\r\n                                        className=\"react-dropdown\"\r\n                                        classNamePrefix=\"dropdown\"\r\n                                        styles={{\r\n                                            menu: provided => ({ ...provided, zIndex: 2 })\r\n                                        }}\r\n                                        options={BaseUnit_DropdownOptions}\r\n                                        onChange={(e) => { onUnitselecthandel(e) }}\r\n                                    />\r\n                                </Col>\r\n                            </FormGroup>\r\n                        </Col>\r\n\r\n\r\n                        <Col sm={1} className=\"mt-3 \">\r\n                            <C_Button\r\n                                type=\"button\"\r\n                                className=\"btn btn-outline-primary border-1 font-size-12 text-center\"\r\n                                onClick={goButtonHandler}\r\n                                loading={reducers.goBtnLoading} >\r\n                                Print</C_Button>\r\n                        </Col>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <C_Report />\r\n        </React.Fragment >\r\n    )\r\n}\r\n\r\nexport default ItemRegisterReport;","D:\\Rohit\\Git projects\\Manthan\\src\\Reports\\ItemRegisterReport\\Page.js",["4424"],"import jsPDF from \"jspdf\";\r\nimport \"jspdf-autotable\";\r\nimport * as style from './ReportStyle'\r\nimport { Data } from \"./DemoData\";\r\n\r\nvar pageHeder = function (doc, data) {\r\n    style.pageBorder(doc, data);\r\n    style.pageHeder(doc, data);     //Title\r\n    style.reportHeder1(doc, data);\r\n    style.reportHeder2(doc, data);\r\n    style.reportHeder3(doc, data);    //Invoice ID , Date  \r\n\r\n};\r\nfunction reportBody(doc, data) {\r\n    style.tableBody(doc, data);\r\n}\r\nfunction pageFooter(doc, data) {\r\n    style.pageFooter(doc, data);\r\n    // style.reportFooter(doc, data);\r\n}\r\n\r\nconst ItemRegisterReport = (data) => {\r\n    var doc = new jsPDF('p', 'pt', 'a4');\r\n    pageHeder(doc, data);\r\n    reportBody(doc, data);\r\n    pageFooter(doc, data);\r\n    doc.setProperties({\r\n        title: \"Material  Register\"\r\n    });\r\n\r\n    function generateSaveAndOpenPDFReport() {\r\n        const pdfUrl = URL.createObjectURL(doc.output('blob'));\r\n        window.open(pdfUrl);\r\n    }\r\n    generateSaveAndOpenPDFReport();\r\n\r\n}\r\nexport default ItemRegisterReport;","D:\\Rohit\\Git projects\\Manthan\\src\\Reports\\ItemRegisterReport\\ReportStyle.js",["4425","4426","4427"],"\r\nimport reportHederPng from \"../../assets/images/reportHeder.png\"\r\nimport upi_qr_code from \"../../assets/images/upi_qr_code.png\"\r\nimport * as table from './TableData'\r\nimport { toWords } from \"../Report_common_function\";\r\nimport { CurrentTime, currentDate_dmy, date_dmy_func, loginUserDetails } from \"../../components/Common/CommonFunction\";\r\n\r\n\r\nexport const pageBorder = (doc) => {\r\n    doc.setDrawColor('black');\r\n    doc.line(570, 17, 30, 17);//horizontal line (Top)\r\n    doc.line(30, 815, 30, 17);//vertical line (left)\r\n    doc.line(570, 815, 570, 17);//vertical line (Right)\r\n    doc.line(570, 815, 30, 815);//horizontal line (Bottom)   \r\n}\r\nexport const pageHeder = (doc, data) => {\r\n    doc.addFont(\"Arial\", 'Normal')\r\n    doc.setFont('Arial')\r\n    doc.setFontSize(15)\r\n    doc.text('Material Register', 200, 40,) //Tax invoice Header\r\n}\r\nexport const reportHeder1 = (doc, data) => {\r\n    doc.setFont('Tahoma')\r\n    doc.setFontSize(11)\r\n    doc.setFont(undefined, 'bold')\r\n    const UserDetails = loginUserDetails()\r\n\r\n    doc.text(`*** ${UserDetails.PartyName} ***`, 300, 75, 'center')  //bill by \r\n    doc.line(570, 60, 30, 60) //horizontal line 1 billby upper\r\n    doc.line(570, 80, 30, 80);//horizontal line 3\r\n\r\n\r\n    doc.line(408, 60, 408, 17);//vertical header report Name Section\r\n    // doc.line(250, 134, 250, 80);//vertical right 2\r\n    // doc.line(570, 134, 30, 134);//horizontal line table \r\n\r\n\r\n    doc.line(250, 100, 570, 100) //horizontal line Current date upper\r\n    doc.line(250, 117, 570, 117) //horizontal line Current date upper\r\n\r\n\r\n\r\n\r\n    var options3 = {\r\n        didParseCell: (data1) => {\r\n\r\n            if (data1.row.cells[1].raw.includes(':')) {\r\n                data1.row.cells[1].colSpan = 2\r\n\r\n            }\r\n        },\r\n        didDrawCell: (data1) => {\r\n\r\n\r\n            const rowIdx = data1.row.index;\r\n            const colIdx = data1.column.index;\r\n            if (rowIdx === 0 && colIdx === 0) {\r\n                let x = data1.cursor.x + 2\r\n                let y = data1.cursor.y + 10\r\n                doc.setFontSize(9)\r\n                doc.setFont(undefined, 'bold')\r\n                doc.text('Customer: ', x, y)\r\n            };\r\n            if (rowIdx === 0 && colIdx === 1) {\r\n\r\n                let x = data1.cursor.x + 2\r\n                let y = data1.cursor.y + 10\r\n                doc.setFontSize(9)\r\n                doc.setFont(undefined, 'bold')\r\n                doc.text('Material: ', x, y)\r\n            };\r\n            if (rowIdx === 1 && colIdx === 0) {\r\n\r\n                let x = data1.cursor.x + 2\r\n                let y = data1.cursor.y + 10\r\n                doc.setFontSize(9)\r\n                doc.setFont(undefined, 'bold')\r\n                doc.text('From Date: ', x, y)\r\n            };\r\n            if (rowIdx === 2 && colIdx === 0) {\r\n\r\n                let x = data1.cursor.x + 2\r\n                let y = data1.cursor.y + 10\r\n                doc.setFontSize(9)\r\n                doc.setFont(undefined, 'bold')\r\n                doc.text('FSSAI No: ', x, y)\r\n            };\r\n            if (rowIdx === 1 && colIdx === 1) {\r\n\r\n                let x = data1.cursor.x + 2\r\n                let y = data1.cursor.y + 10\r\n                doc.setFontSize(9)\r\n                doc.setFont(undefined, 'bold')\r\n                doc.text('To Date: ', x, y)\r\n            };\r\n            if (rowIdx === 2 && colIdx === 1) {\r\n\r\n                let x = data1.cursor.x + 2\r\n                let y = data1.cursor.y + 10\r\n                doc.setFontSize(9)\r\n                doc.setFont(undefined, 'bold')\r\n                doc.text('To Date: ', x, y)\r\n            };\r\n            // if (rowIdx === 1 && colIdx === 2) {\r\n\r\n            //     let x = data1.cursor.x + 2\r\n            //     let y = data1.cursor.y + 10\r\n            //     doc.setFontSize(9)\r\n            //     doc.setFont(undefined, 'bold')\r\n            //     doc.text('Open Balance:', x, y)\r\n            // };\r\n            // if (rowIdx === 2 && colIdx === 2) {\r\n\r\n            //     let x = data1.cursor.x + 2\r\n            //     let y = data1.cursor.y + 10\r\n            //     doc.setFontSize(9)\r\n            //     doc.setFont(undefined, 'bold')\r\n            //     doc.text('Close Balance: ', x, y)\r\n            // };\r\n\r\n\r\n\r\n        },\r\n        margin: {\r\n            top: 20, left: 30, right: 35,\r\n        },\r\n        showHead: 'always',\r\n        theme: 'grid',\r\n        styles: {\r\n            overflow: 'linebreak',\r\n            fontSize: 8,\r\n        },\r\n\r\n        bodyStyles: {\r\n            columnWidth: 'wrap',\r\n            textColor: [30, 30, 30],\r\n            cellPadding: 3,\r\n            fontSize: 9,\r\n            lineColor: [0, 0, 0]\r\n        },\r\n        columnStyles: {\r\n            0: {\r\n                valign: \"top\",\r\n                columnWidth: 230,\r\n                halign: 'lfet',\r\n            },\r\n            1: {\r\n                columnWidth: 147,\r\n                halign: 'left',\r\n            },\r\n            2: {\r\n                columnWidth: 163,\r\n                halign: 'left',\r\n            },\r\n        },\r\n        tableLineColor: \"black\",\r\n        startY: 80\r\n    };\r\n    doc.autoTable(table.PageHedercolumns, table.ReportHederRows(data), options3);\r\n}\r\n\r\nexport const reportHeder2 = (doc, data) => {\r\n    doc.setFont('Tahoma')\r\n    doc.setFontSize(10)\r\n    doc.setFont(undefined, 'bold')\r\n\r\n}\r\n\r\nexport const reportHeder3 = (doc, data) => {\r\n\r\n    doc.setFont('Tahoma')\r\n    doc.setFontSize(10)\r\n    doc.line(570, 35, 408, 35) //horizontal line 1 billby upper\r\n    doc.line(408, 55, 408, 17);//vertical header report Name Section\r\n\r\n    doc.setFont(undefined, 'bold')\r\n    doc.text(`Report No:`, 415, 30) //Invoice Id\r\n    doc.text(`Date:  ${date_dmy_func()} `, 415, 50) //Invoice date\r\n\r\n    doc.setFontSize(11)\r\n    // doc.text(`Material: ${data.ItemName}`, 415, 75) //Invoice date\r\n\r\n\r\n\r\n}\r\n// original\r\n\r\nexport const reportFooter = (doc, data) => {\r\n    // doc.autoTable(table.ReportFotterColumns2, table.ReportFooterRow2(data),);\r\n    doc.setFontSize(9)\r\n}\r\nexport const tableBody = (doc, data) => {\r\n    const tableRow = table.Rows(data);\r\n    console.log(tableRow)\r\n    var options = {\r\n\r\n        didParseCell: (data1) => {\r\n\r\n\r\n\r\n            if (data1.row.cells[0].raw === \"Total\") {\r\n                data1.row.cells[0].colSpan = 2\r\n\r\n                data1.row.cells[0].styles.fontSize = 8\r\n                data1.row.cells[0].styles.fontStyle = \"bold\"\r\n\r\n                data1.row.cells[3].styles.fontSize = 8\r\n                data1.row.cells[3].styles.fontStyle = \"bold\"\r\n\r\n                data1.row.cells[4].styles.fontSize = 8\r\n                data1.row.cells[4].styles.fontStyle = \"bold\"\r\n\r\n                data1.row.cells[5].styles.fontSize = 8\r\n                data1.row.cells[5].styles.fontStyle = \"bold\"\r\n\r\n                data1.row.cells[6].styles.fontSize = 8\r\n                data1.row.cells[6].styles.fontStyle = \"bold\"\r\n\r\n                data1.row.cells[7].styles.fontSize = 8\r\n                data1.row.cells[7].styles.fontStyle = \"bold\"\r\n            }\r\n\r\n\r\n            if (data1.row.cells[2].raw === \"Total\") {\r\n                \r\n                data1.row.cells[0].colSpan = 10\r\n                data1.row.cells[0].styles.fontSize = 9\r\n                data1.row.cells[0].styles.fontStyle = \"bold\"\r\n\r\n\r\n            }\r\n\r\n\r\n            if (data1.cell.raw === \"STOCK\") {\r\n\r\n                // data1.cell.styles.fontStyle = \"bold\"\r\n                // data1.row.cells[2].styles.fontSize = 9\r\n                data1.row.cells[0].styles.fontStyle = \"bold\"\r\n                data1.row.cells[1].styles.fontStyle = \"bold\"\r\n                data1.row.cells[2].styles.fontStyle = \"bold\"\r\n                data1.row.cells[3].styles.fontStyle = \"bold\"\r\n                data1.row.cells[9].styles.fontStyle = \"bold\"\r\n            }\r\n\r\n            if (data1.column.index === 4) {\r\n                if (data1.cell.raw !== \"0.00\") {\r\n                    data1.row.cells[4].styles.fontStyle = \"bold\"\r\n\r\n                }\r\n\r\n            }\r\n            if (data1.column.index === 5) {\r\n                if (data1.cell.raw !== \"0.00\") {\r\n                    data1.row.cells[5].styles.fontStyle = \"bold\"\r\n\r\n                }\r\n\r\n            } if (data1.column.index === 6) {\r\n                if (data1.cell.raw !== \"0.00\") {\r\n                    data1.row.cells[6].styles.fontStyle = \"bold\"\r\n\r\n                }\r\n\r\n            } if (data1.column.index === 7) {\r\n                if (data1.cell.raw !== \"0.00\") {\r\n                    data1.row.cells[7].styles.fontStyle = \"bold\"\r\n\r\n                }\r\n\r\n            }\r\n            if (data1.column.index === 8) {\r\n                if (data1.cell.raw !== \"0.00\") {\r\n                    data1.row.cells[8].styles.fontStyle = \"bold\"\r\n\r\n                }\r\n\r\n            }\r\n\r\n\r\n\r\n        },\r\n\r\n        margin: {\r\n            left: 30, right: 25, top: 55\r\n        },\r\n        theme: 'grid',\r\n        headerStyles: {\r\n            cellPadding: 4,\r\n            lineWidth: 1,\r\n            valign: 'top',\r\n            fontStyle: 'bold',\r\n            halign: 'center',    //'center' or 'right'\r\n            fillColor: \"white\",\r\n            textColor: [0, 0, 0], //Black     \r\n            fontSize: 8,\r\n            rowHeight: 10,\r\n            lineColor: [0, 0, 0]\r\n        },\r\n        bodyStyles: {\r\n            textColor: [30, 30, 30],\r\n            cellPadding: 3,\r\n            fontSize: 7,\r\n            columnWidth: 'wrap',\r\n            lineColor: [0, 0, 0],\r\n        },\r\n        columnStyles: {\r\n            0: {\r\n                columnWidth: 19,\r\n                halign: 'left',\r\n\r\n            },\r\n            1: {\r\n                columnWidth: 80,\r\n                halign: 'left',\r\n\r\n            },\r\n            2: {\r\n                columnWidth: 90,\r\n                halign: 'left',\r\n            },\r\n            3: {\r\n                columnWidth: 60,\r\n                halign: 'right',\r\n            },\r\n            4: {\r\n                columnWidth: 40,\r\n                halign: 'right',\r\n            },\r\n            5: {\r\n                columnWidth: 60,\r\n                halign: 'right',\r\n            },\r\n            6: {\r\n                columnWidth: 47,\r\n                halign: 'right',\r\n            },\r\n            7: {\r\n                columnWidth: 50,\r\n                halign: 'right',\r\n            },\r\n            8: {\r\n                columnWidth: 45,\r\n                halign: 'right',\r\n            },\r\n            9: {\r\n                columnWidth: 49,\r\n                halign: 'right',\r\n            },\r\n\r\n\r\n        },\r\n        tableLineColor: \"black\",\r\n        startY: doc.autoTableEndPosY(),// 45,\r\n    };\r\n\r\n    doc.autoTable(table.columns, table.Rows(data), options, {\r\n\r\n\r\n    });\r\n    // Auto table for footer\r\n    const optionsTable4 = {\r\n        margin: {\r\n            left: 30, right: 30, bottom: 100\r\n        },\r\n        showHead: 'never',\r\n    };\r\n\r\n    doc.autoTable(optionsTable4);\r\n\r\n    doc.autoTable({\r\n        html: '#table',\r\n        didParseCell(data) {\r\n            if (data.cell.row.index === 0) {\r\n                data.cell.styles.textColor = [255, 255, 255];\r\n                data.cell.styles.fillColor = '#FF5783';\r\n            }\r\n        }\r\n    })\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\nexport const pageFooter = (doc, data) => {\r\n\r\n\r\n    const pageCount = doc.internal.getNumberOfPages()\r\n    doc.setFont('helvetica', 'Normal')\r\n    doc.setFontSize(8)\r\n    for (var i = 1; i <= pageCount; i++) {\r\n        doc.setPage(i)\r\n        pageHeder(doc, data)\r\n        pageBorder(doc)\r\n        reportHeder3(doc, data)\r\n        doc.setFontSize(8)\r\n\r\n        doc.setFont('helvetica', 'Normal')\r\n        doc.text('Page ' + String(i) + ' of ' + String(pageCount), 540, 828,)\r\n\r\n        doc.text('Print Date :' + String(currentDate_dmy) + ' Time ' + String(CurrentTime()), 30, 828,)\r\n\r\n    }\r\n}\r\n\r\n\r\n\r\n// original","D:\\Rohit\\Git projects\\Manthan\\src\\Reports\\ItemRegisterReport\\DemoData.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\Reports\\ItemRegisterReport\\TableData.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\Reports\\ItemSaleReport\\index.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Report\\ItemSaleReport\\reducer.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Report\\ItemSaleReport\\action.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Report\\ItemSaleReport\\actionType.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Report\\ItemSaleReport\\saga.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\Reports\\ClaimReportSummary\\ClaimSummaryMaster.js",["4428","4429","4430","4431","4432","4433","4434","4435","4436","4437","4438","4439","4440","4441"],"import React, { useEffect, useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { Col, FormGroup, Input, Label, Row } from \"reactstrap\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { initialFiledFunc } from \"../../components/Common/validationFunction\";\r\nimport { C_Button } from \"../../components/Common/CommonButton\";\r\nimport * as _cfunc from \"../../components/Common/CommonFunction\";\r\nimport { mode, pageId, url } from \"../../routes/index\"\r\nimport { MetaTags } from \"react-meta-tags\";\r\nimport { commonPageField, commonPageFieldSuccess, getpdfReportdata, getpdfReportdataSuccess } from \"../../store/actions\";\r\nimport { customAlert } from \"../../CustomAlert/ConfirmDialog\";\r\nimport * as report from '../ReportIndex'\r\nimport { ClaimSummary_API, MasterClaimSummary_API } from \"../../helpers/backend_helper\";\r\nimport C_Report from \"../../components/Common/C_Report\";\r\nimport { claimList_API, claimList_API_Success, deleteClaimSuccess, delete_Claim_ID, postClaimMasterCreate_API, postMasterClaimCreat_API_Success } from \"../../store/Report/ClaimSummary/action\";\r\nimport ToolkitProvider from \"react-bootstrap-table2-toolkit\";\r\nimport BootstrapTable from \"react-bootstrap-table-next\";\r\nimport { mySearchProps } from \"../../components/Common/SearchBox/MySearch\";\r\n\r\nconst CWClaimBtnCss = \"badge badge-soft-primary font-size-18 btn btn-primary waves-effect waves-light w-xxs border border-light\"\r\nconst createClaimBtnCss = \"badge badge-soft-success font-size-18 btn btn-success waves-effect waves-light w-xxs border border-light\"\r\nconst deltBtnCss = \"badge badge-soft-danger font-size-18 btn btn-danger waves-effect waves-light w-xxs border border-light\"\r\n\r\n\r\nconst SelectedMonth = () => _cfunc.getCurrentMonthAndYear()\r\nconst FirstAndLastDate = () => _cfunc.getFirstAndLastDateOfMonth(SelectedMonth());\r\nconst fileds = () => ({\r\n    FromDate: FirstAndLastDate().firstDate,\r\n    ToDate: FirstAndLastDate().lastDate,\r\n    PartyName: \"\",\r\n    HeaderFromDate: _cfunc.date_ymd_func(),\r\n    HeaderToDate: _cfunc.date_ymd_func(),\r\n    SelectedMonth: SelectedMonth(),\r\n})\r\n\r\n\r\n\r\nconst ClaimSummaryMaster = (props) => {\r\n\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n    //function to convert selected month and year to date format initial date\r\n\r\n    const [state, setState] = useState(() => initialFiledFunc(fileds()))\r\n    const [subPageMode] = useState(history.location.pathname);\r\n    const [userPageAccessState, setUserAccState] = useState('');\r\n    const [jsonBody, setjsonBody] = useState({});\r\n\r\n\r\n\r\n\r\n    const reducers = useSelector(\r\n        (state) => ({\r\n            deleteMsg: state.ClaimSummaryReducer.deleteMsg,\r\n            ClaimListData: state.ClaimSummaryReducer.ClaimListData,\r\n            ClaimSummaryGobtn: state.ClaimSummaryReducer.ClaimSummaryGobtn,\r\n            pdfdata: state.PdfReportReducers.pdfdata,\r\n            ReportBtnLoading: (state.PdfReportReducers.ReportBtnLoading) || (state.ClaimSummaryReducer.CreateClaimLoading) || (state.ClaimSummaryReducer.DeleteBtnLoading),\r\n            supplier: state.CommonAPI_Reducer.vendorSupplierCustomer,\r\n            userAccess: state.Login.RoleAccessUpdateData,\r\n            SSDD_List: state.CommonAPI_Reducer.SSDD_List,\r\n            pageField: state.CommonPageFieldReducer.pageFieldList\r\n        })\r\n    );\r\n    const { userAccess, supplier, pdfdata, ClaimSummaryGobtn, deleteMsg, ClaimListData } = reducers;\r\n    // const filteredData = ClaimListData.filter(Party => Party.id === null);\r\n    ClaimListData.sort((a, b) => b.returncnt - a.returncnt);\r\n\r\n    const values = { ...state.values }\r\n\r\n    // Featch Modules List data  First Rendering\r\n    const location = { ...history.location }\r\n    const hasShowModal = props.hasOwnProperty(mode.editValue)\r\n\r\n\r\n\r\n    // userAccess useEffect\r\n    useEffect(() => {\r\n\r\n        let userAcc = null;\r\n        let locationPath = location.pathname;\r\n        if (hasShowModal) {\r\n            locationPath = props.masterPath;\r\n        };\r\n        userAcc = userAccess.find((inx) => {\r\n            return (`/${inx.ActualPagePath}` === locationPath)\r\n        })\r\n        if (userAcc) {\r\n            setUserAccState(userAcc)\r\n            _cfunc.breadcrumbReturnFunc({ dispatch, userAcc });\r\n        };\r\n    }, [userAccess])\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        // const page_Id = pageId.CLAIM_SUMMARY_MASTER//changes\r\n        // dispatch(commonPageFieldSuccess(null));\r\n        // dispatch(commonPageField(page_Id))\r\n        MonthAndYearOnchange(values.SelectedMonth, \"InitialDate\")\r\n        return () => {\r\n            dispatch(claimList_API_Success([]))\r\n        }\r\n    }, [])\r\n\r\n\r\n    useEffect(() => {\r\n        if ((pdfdata.Status === true) && (pdfdata.StatusCode === 204)) {\r\n            dispatch(getpdfReportdataSuccess({ Status: false }))\r\n            customAlert({\r\n                Type: 3,\r\n                Message: pdfdata.Message,\r\n            })\r\n            return\r\n        }\r\n    }, [pdfdata])\r\n\r\n    useEffect(() => {\r\n        if ((ClaimSummaryGobtn.Status === true) && (ClaimSummaryGobtn.StatusCode === 200)) {\r\n            dispatch(claimList_API(jsonBody))\r\n            dispatch(postMasterClaimCreat_API_Success([]))\r\n            customAlert({\r\n                Type: 1,\r\n                Message: ClaimSummaryGobtn.Message,\r\n\r\n            })\r\n            history.push({ pathname: url.CLAIM_SUMMARY_lIST })\r\n            return\r\n        }\r\n    }, [ClaimSummaryGobtn])\r\n\r\n\r\n    useEffect(() => {\r\n        if ((deleteMsg.Status === true) && (deleteMsg.StatusCode === 200)) {\r\n            dispatch(deleteClaimSuccess({ Status: false }))\r\n            dispatch(claimList_API(jsonBody))\r\n            customAlert({\r\n                Type: 1,\r\n                Message: deleteMsg.Message,\r\n            })\r\n            return\r\n        }\r\n    }, [deleteMsg])\r\n\r\n\r\n\r\n    function goButtonHandler(reportType, row, btnId) {\r\n\r\n        const jsonBody = JSON.stringify({\r\n            \"FromDate\": row.selectedDate.FromDate,\r\n            \"ToDate\": row.selectedDate.ToDate,\r\n            \"Party\": row.PartyID,\r\n            \"Mode\": (reportType === report.ClaimSummary) ? 1 : 2,\r\n            \"LoginParty\": (reportType === \"createClaim\") ? _cfunc.loginSelectedPartyID() : undefined,\r\n        });\r\n        let config = { ReportType: reportType, jsonBody, btnId: btnId, ToDate: row.selectedDate.ToDate, FromDate: row.selectedDate.FromDate, ClaimID: row.id, PartyName: row.PartyName }\r\n\r\n        if (reportType === report.CompanyWiseBudget) {\r\n            dispatch(getpdfReportdata(MasterClaimSummary_API, config))\r\n\r\n        }\r\n        if (reportType === \"createClaim\") {\r\n            dispatch(postClaimMasterCreate_API(config))\r\n        }\r\n\r\n        if ((reportType === report.CustomerWiseReturn) || (reportType === report.ClaimSummary)) {\r\n            dispatch(getpdfReportdata(ClaimSummary_API, config))\r\n        }\r\n    }\r\n\r\n    const deleteHandler = async (row, btnId) => {\r\n        const jsonBody = JSON.stringify({\r\n            \"FromDate\": row.selectedDate.FromDate,\r\n            \"ToDate\": row.selectedDate.ToDate,\r\n            \"Party\": row.PartyID,\r\n        });\r\n        let config = { jsonBody, btnId: btnId }\r\n\r\n        const isConfirmed = await customAlert({\r\n            Type: 7,\r\n            Message: \"Do you want To Delete Claim ?\",\r\n        });\r\n\r\n        if (isConfirmed) {\r\n            dispatch(delete_Claim_ID(config))\r\n        }\r\n    }\r\n\r\n    function MonthAndYearOnchange(e, InitialDate) {\r\n        dispatch(claimList_API_Success([]))\r\n\r\n        let selectedMonth = \"\"\r\n        if (InitialDate) {\r\n            selectedMonth = e\r\n        } else {\r\n            selectedMonth = e.target.value\r\n        }\r\n        //function to convert selected month and year to date format first and last date of month\r\n\r\n        const { firstDate, lastDate } = _cfunc.getFirstAndLastDateOfMonth(selectedMonth);\r\n        setState((i) => {\r\n            const a = { ...i }\r\n            a.values.FromDate = firstDate;\r\n            a.hasValid.FromDate.valid = true\r\n            a.values.ToDate = lastDate;\r\n            a.hasValid.ToDate.valid = true\r\n            a.values.SelectedMonth = selectedMonth;\r\n            a.hasValid.SelectedMonth.valid = true\r\n            return a\r\n        })\r\n        const jsonBody = JSON.stringify({\r\n            \"FromDate\": firstDate,\r\n            \"ToDate\": lastDate,\r\n            \"Party\": _cfunc.loginSelectedPartyID()\r\n        });\r\n\r\n\r\n        let config = { jsonBody }\r\n        setjsonBody(config)\r\n        dispatch(claimList_API(config))\r\n    }\r\n\r\n    const getFormattedDate = (date, format) => {\r\n        const year = date.getFullYear();\r\n        const month = String(date.getMonth() + 1).padStart(2, '0');\r\n        return format.replace('yyyy', year).replace('MM', month);\r\n    };\r\n\r\n    const currentMonth = getFormattedDate(new Date(), \"yyyy-MM\");\r\n\r\n    const pagesListColumns = [\r\n\r\n        {\r\n            text: \"Party\",\r\n            dataField: \"PartyName\",\r\n        },\r\n        {\r\n            text: \"Return Count\",\r\n            dataField: \"returncnt\",\r\n            formatter: (cellContent, index) => (\r\n                <>\r\n                    <div >{`${Number(index.returncnt) === 0 ? \"0\" : index.returncnt}`}</div>\r\n                </>\r\n            )\r\n\r\n        },\r\n\r\n        {\r\n            text: \"Action\",\r\n            dataField: \"\",\r\n            style: {\r\n                width: \"300px\"\r\n            },\r\n            formatExtraData: { btnLoading: reducers.ReportBtnLoading, selectedDate: values },\r\n            formatter: (value, row, key, { btnLoading, selectedDate }) => {\r\n                row[\"selectedDate\"] = selectedDate\r\n                // Condition For Claim Generation \r\n                // 1) row Id is (Not Null) then Claim is all Ready Created Will not Show in Master page Table\r\n                // 2) Logged-in-User Can Not Creat Claim or delete claim \r\n                // 3) If Return Count Is greater than 0 then only claim create  \r\n                return (\r\n                    <>\r\n\r\n                        <div className=\" d-flex justify-content-start  gap-2\" >\r\n                            <div\r\n                                className=\"mt-3  mb-3\">\r\n                                <C_Button\r\n                                    loading={btnLoading === `gobtn-${\"createClaim\"}-${row.id}-${key}`}\r\n                                    type=\"button\"\r\n                                    style={{ width: \"100px\", cursor: ((Number(row.id) === 0) && (Number(row.returncnt) > 0)) ? \"pointer\" : \"not-allowed\" }}\r\n                                    title=\"Create Claim\"\r\n                                    spinnerColor=\"white\"\r\n                                    className={((Number(row.returncnt) === 0) || (row.forceCreateHide)) ? deltBtnCss : createClaimBtnCss}\r\n                                    onClick={(e) => {\r\n                                        if ((Number(row.returncnt) > 0) && (!row.forceCreateHide)) {\r\n                                            goButtonHandler(\"createClaim\", row, `gobtn-${\"createClaim\"}-${row.id}-${key}`)\r\n                                        }\r\n                                    }}\r\n                                >\r\n                                    {(Number(row.id) > 0) ? \"Created\" : \"Create\"}\r\n                                    {((Number(row.returncnt) > 0) && (!row.forceCreateHide)) && <i className=\"fas fa-pencil-alt font-size-13\"></i>}\r\n                                    {((Number(row.returncnt) === 0) || (row.forceCreateHide)) && <i className=\"  fas fa-ban font-size-13\"></i>}\r\n\r\n\r\n                                </C_Button>\r\n                            </div>\r\n                        </div>\r\n                    </>\r\n                )\r\n            },\r\n        },\r\n\r\n\r\n    ];\r\n    return (\r\n        <React.Fragment>\r\n            <MetaTags>{_cfunc.metaTagLabel(userPageAccessState)}</MetaTags>\r\n            <div className=\"page-content\">\r\n                <div className=\"px-2   c_card_filter text-black\" >\r\n                    <div className=\"row\" >\r\n                        <Col sm={6}>\r\n                            <FormGroup className=\"mb- row mt-2\" >\r\n                                <Label style={{ width: \"83px\" }} className=\"col-sm-1 p-2 \">Month</Label>\r\n                                <Col sm=\"4\">\r\n                                    <Input className=\"form-control\"\r\n                                        type=\"month\"\r\n                                        defaultValue={values.SelectedMonth}\r\n                                        id=\"example-month-input\"\r\n                                        onChange={MonthAndYearOnchange}\r\n                                        max={currentMonth}\r\n                                    />\r\n                                </Col>\r\n                            </FormGroup>\r\n                        </Col>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"mt-2\">\r\n                    <ToolkitProvider\r\n                        keyField={\"Item_id\"}\r\n                        data={ClaimListData}\r\n                        columns={pagesListColumns}\r\n                        search\r\n                    >\r\n                        {(toolkitProps,) => (\r\n                            <React.Fragment>\r\n                                <Row>\r\n                                    <Col xl=\"12\">\r\n                                        <div className=\"table-responsive table \"  >\r\n                                            <BootstrapTable\r\n                                                keyField={\"Item_id\"}\r\n                                                id=\"table_Arrow\"\r\n                                                classes={\"table  table-bordered table-hover \"}\r\n                                                noDataIndication={\r\n                                                    <div className=\"text-danger text-center table-cursor-pointer\">\r\n                                                        Record Not available\r\n                                                    </div>\r\n                                                }\r\n                                                onDataSizeChange={(e) => {\r\n                                                    _cfunc.tableInputArrowUpDounFunc(\"#table_Arrow\")\r\n                                                }}\r\n                                                {...toolkitProps.baseProps}\r\n                                            />\r\n                                            {mySearchProps(toolkitProps.searchProps)}\r\n                                        </div>\r\n                                    </Col>\r\n                                </Row>\r\n\r\n                            </React.Fragment>\r\n                        )}\r\n                    </ToolkitProvider>\r\n                </div>\r\n            </div>\r\n            <C_Report />\r\n        </React.Fragment >\r\n    )\r\n}\r\n\r\nexport default ClaimSummaryMaster;","D:\\Rohit\\Git projects\\Manthan\\src\\Reports\\ClaimReportSummary\\ClaimSummaryList.js",["4442","4443","4444","4445","4446","4447","4448","4449"],"import React, { useEffect, useState, } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport {\r\n    BreadcrumbShowCountlabel,\r\n    commonPageFieldList,\r\n    commonPageFieldListSuccess\r\n} from \"../../store/actions\";\r\nimport { claimList_API, claimList_API_Success, deleteClaimSuccess, delete_Claim_ID } from \"../../store/Report/ClaimSummary/action\";\r\n// import { LoadingSheet_API, MultipleInvoice_API } from \"../../../helpers/backend_helper\";\r\nimport * as report from '../../Reports/ReportIndex'\r\nimport { getpdfReportdata, getpdfReportdataSuccess } from \"../../store/Utilites/PdfReport/actions\";\r\nimport { Col, FormGroup, Input, Label } from \"reactstrap\";\r\nimport CommonPurchaseList from \"../../components/Common/CommonPurchaseList\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport * as _cfunc from \"../../components/Common/CommonFunction\";\r\n// import { url, mode, pageId } from \"../../../routes/index\"\r\nimport { url, mode, pageId } from \"../../routes/index\"\r\n\r\nimport { PageLoadingSpinner } from \"../../components/Common/CommonButton\";\r\nimport PartyDropdown_Common from \"../../components/Common/PartyDropdown\";\r\nimport ClaimSummaryMaster from \"./ClaimSummaryMaster\";\r\nimport { initialFiledFunc } from \"../../components/Common/validationFunction\";\r\nimport { ClaimSummary_API, MasterClaimSummary_API } from \"../../helpers/backend_helper\";\r\nimport { customAlert } from \"../../CustomAlert/ConfirmDialog\";\r\nimport { update } from \"plotly.js\";\r\n\r\nconst SelectedMonth = () => _cfunc.getCurrentMonthAndYear()\r\nconst FirstAndLastDate = () => _cfunc.getFirstAndLastDateOfMonth(SelectedMonth());\r\nconst fileds = () => ({\r\n    FromDate: FirstAndLastDate().firstDate,\r\n    ToDate: FirstAndLastDate().lastDate,\r\n    PartyName: \"\",\r\n    SelectedMonth: SelectedMonth(),\r\n})\r\n\r\nconst ClaimSummaryList = () => {\r\n    const history = useHistory();\r\n    const dispatch = useDispatch();\r\n\r\n    const [state, setState] = useState(() => initialFiledFunc(fileds()))\r\n\r\n\r\n\r\n    const [jsonBody, setjsonBody] = useState({});\r\n    const [pageMode] = useState(mode.defaultList);\r\n\r\n    const reducers = useSelector(\r\n        (state) => ({\r\n            deleteMsg: state.ClaimSummaryReducer.deleteMsg,\r\n            tableList: state.ClaimSummaryReducer.ClaimListData,\r\n            ClaimSummaryGobtn: state.ClaimSummaryReducer.ClaimSummaryGobtn,\r\n            pdfdata: state.PdfReportReducers.pdfdata,\r\n            listBtnLoading: (state.PdfReportReducers.ReportBtnLoading) || (state.ClaimSummaryReducer.CreateClaimLoading) || (state.ClaimSummaryReducer.DeleteBtnLoading),\r\n            supplier: state.CommonAPI_Reducer.vendorSupplierCustomer,\r\n            userAccess: state.Login.RoleAccessUpdateData,\r\n            pageField: state.CommonPageFieldReducer.pageFieldList\r\n        })\r\n    );\r\n\r\n    const { pageField, pdfdata, deleteMsg, tableList } = reducers;\r\n    \r\n    const values = { ...state.values }\r\n\r\n    const action = {\r\n        getList: claimList_API,\r\n        deleteId: delete_Claim_ID,\r\n        deleteSucc: deleteClaimSuccess\r\n    }\r\n\r\n    let page_Id = pageId.CLAIM_SUMMARY_lIST\r\n    // Featch Modules List data  First Rendering\r\n    useEffect(() => {\r\n        dispatch(commonPageFieldListSuccess(null))\r\n        dispatch(commonPageFieldList(page_Id))\r\n        MonthAndYearOnchange(values.SelectedMonth, \"InitialDate\")\r\n        return () => {\r\n            dispatch(claimList_API_Success([]))\r\n\r\n        }\r\n    }, []);\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        if ((pdfdata.Status === true) && (pdfdata.StatusCode === 204)) {\r\n            dispatch(getpdfReportdataSuccess({ Status: false }))\r\n            customAlert({\r\n                Type: 3,\r\n                Message: pdfdata.Message,\r\n            })\r\n            return\r\n        }\r\n    }, [pdfdata])\r\n\r\n    useEffect(() => {\r\n        if ((deleteMsg.Status === true) && (deleteMsg.StatusCode === 200)) {\r\n            dispatch(deleteClaimSuccess({ Status: false }))\r\n            dispatch(claimList_API(jsonBody))\r\n            return\r\n        }\r\n    }, [deleteMsg])\r\n\r\n\r\n\r\n    function downClaimBtnFunc(config) {\r\n\r\n\r\n\r\n        const jsonBody = JSON.stringify({\r\n            \"FromDate\": config.rowData.MonthStartDate,\r\n            \"ToDate\": config.rowData.MonthEndDate,\r\n            \"Party\": config.rowData.PartyID,\r\n            \"Mode\": (config.btnmode === \"ItemWiseSummary\") ? 1 : 2,\r\n        });\r\n        let ReportData = {\r\n            jsonBody,\r\n            ToDate: config.rowData.MonthEndDate,\r\n            FromDate: config.rowData.MonthStartDate,\r\n            PartyName: config.rowData.PartyName,\r\n            ClaimID: config.rowData.id,\r\n            btnId: config.btnId\r\n        }\r\n\r\n        if (config.btnmode === \"MastarClaimSummary\") {\r\n            ReportData[\"ReportType\"] = report.CompanyWiseBudget;\r\n            dispatch(getpdfReportdata(MasterClaimSummary_API, ReportData))\r\n        }\r\n\r\n        if ((config.btnmode === \"CustomerWiseSummary\") || (config.btnmode === \"ItemWiseSummary\")) {\r\n            if (config.btnmode === \"CustomerWiseSummary\") {\r\n                ReportData[\"ReportType\"] = report.CustomerWiseReturn;\r\n            } else {\r\n                ReportData[\"ReportType\"] = report.ClaimSummary;\r\n            }\r\n            dispatch(getpdfReportdata(ClaimSummary_API, ReportData))\r\n        }\r\n    }\r\n\r\n\r\n\r\n    async function deleteBodyfunc(config) {\r\n\r\n        const jsonBody = JSON.stringify({\r\n            \"FromDate\": config.rowData.MonthStartDate,\r\n            \"ToDate\": config.rowData.MonthEndDate,\r\n            \"Party\": config.rowData.PartyID,\r\n        });\r\n\r\n\r\n        let DeleteData = { jsonBody, btnId: config.btnId }\r\n\r\n        const isConfirmed = await customAlert({\r\n            Type: 7,\r\n            Message: \"Do you want To Delete Claim ?\",\r\n        });\r\n\r\n        if (isConfirmed) {\r\n            dispatch(delete_Claim_ID(DeleteData))\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    function MonthAndYearOnchange(e, InitialDate) {\r\n\r\n        dispatch(claimList_API_Success([]))\r\n        let selectedMonth = \"\"\r\n        if (InitialDate) {\r\n            selectedMonth = e\r\n        } else {\r\n            selectedMonth = e.target.value\r\n        }\r\n        //function to convert selected month and year to date format first and last date of month\r\n\r\n        const { firstDate, lastDate } = _cfunc.getFirstAndLastDateOfMonth(selectedMonth);\r\n\r\n        setState((i) => {\r\n            const a = { ...i }\r\n            a.values.FromDate = firstDate;\r\n            a.hasValid.FromDate.valid = true\r\n            a.values.ToDate = lastDate;\r\n            a.hasValid.ToDate.valid = true\r\n            a.values.SelectedMonth = selectedMonth;\r\n            a.hasValid.SelectedMonth.valid = true\r\n            return a\r\n        })\r\n        const jsonBody = JSON.stringify({\r\n            \"FromDate\": firstDate,\r\n            \"ToDate\": lastDate,\r\n            \"Party\": _cfunc.loginSelectedPartyID()\r\n        });\r\n\r\n        let config = { jsonBody, Type: \"List\", MonthStartDate: firstDate, MonthEndDate: lastDate }\r\n        setjsonBody(config)\r\n        dispatch(claimList_API(config))\r\n    }\r\n\r\n\r\n\r\n\r\n    const getFormattedDate = (date, format) => {\r\n        const year = date.getFullYear();\r\n        const month = String(date.getMonth() + 1).padStart(2, '0');\r\n        return format.replace('yyyy', year).replace('MM', month);\r\n    };\r\n\r\n    const currentMonth = getFormattedDate(new Date(), \"yyyy-MM\");\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <PageLoadingSpinner isLoading={reducers.loading || !pageField} />\r\n            <div className=\"page-content\">\r\n                <div className=\"px-2   c_card_filter text-black\" >\r\n                    <div className=\"row\" >\r\n                        <Col sm={6}>\r\n                            <FormGroup className=\"mb- row mt-2\" >\r\n                                <Label style={{ width: \"83px\" }} className=\"col-sm-1 p-2 \">Month</Label>\r\n                                <Col sm={4}>\r\n                                    <Input className=\"form-control\"\r\n                                        type=\"month\"\r\n                                        defaultValue={values.SelectedMonth}\r\n                                        id=\"example-month-input\"\r\n                                        onChange={MonthAndYearOnchange}\r\n                                        max={currentMonth}\r\n                                    />\r\n                                </Col>\r\n                            </FormGroup>\r\n                        </Col>\r\n                    </div>\r\n                </div>\r\n                {\r\n                    (pageField) ?\r\n                        <CommonPurchaseList\r\n                            action={action}\r\n                            reducers={reducers}\r\n                            showBreadcrumb={false}\r\n                            pageMode={pageMode}\r\n                            masterPath={ClaimSummaryMaster}\r\n                            newBtnPath={url.CLAIM_SUMMARY_MASTER}\r\n                            downClaimBtnFunc={downClaimBtnFunc}\r\n                            ButtonMsgLable={\"Claim Summary\"}\r\n                            deleteName={\"Claim Summary\"}\r\n                            MasterModal={ClaimSummaryMaster}\r\n                            deleteBodyfunc={deleteBodyfunc}\r\n                        />\r\n                        : null\r\n                }\r\n            </div>\r\n\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default ClaimSummaryList;","D:\\Rohit\\Git projects\\Manthan\\src\\Reports\\ItemSaleReport\\hardcodeDetails.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\Reports\\ItemSaleReport\\showTable.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\routes\\middleware\\SessionContext.js",["4450","4451","4452"],"import React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { sessionAliveNewToken } from '../../store/auth/sessionAlive/actions';\r\n\r\nconst SessionContext = createContext();\r\n\r\n\r\nconst SESSION_TIMEOUT_DURATION = 28 * 60 * 1000; // 2 minutes\r\nconst REFRESH_TOKEN_INTERVAL = 29 * 60 * 1000; // 1.3 minutes \r\n\r\nexport const SessionProvider = ({ history, children }) => {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const [session, setSession] = useState({\r\n        active: ((localStorage.getItem(\"token\")) && (localStorage.getItem(\"roleId\"))) ? true : false,\r\n        // ... other session data\r\n    });\r\n\r\n    const updateSessionActivity = (newSession = {}) => {\r\n        setSession((prevSession) => ({\r\n            ...prevSession,\r\n            ...newSession,\r\n        }));\r\n    };\r\n\r\n\r\n    const sessionEndActivity = ({\r\n        sessionTimeout,\r\n        refreshTokenIntervalId,\r\n        resetSessionTimeout,\r\n    }) => {\r\n\r\n        console.log('logOut function ....');\r\n\r\n        window.removeEventListener('mousemove', resetSessionTimeout);\r\n        window.removeEventListener('keydown', resetSessionTimeout);\r\n        localStorage.clear();\r\n        clearTimeout(sessionTimeout);\r\n        clearInterval(refreshTokenIntervalId);\r\n        updateSessionActivity({ active: false })\r\n    }\r\n\r\n    useEffect(() => {\r\n        let sessionTimeout;\r\n        let refreshTokenIntervalId;\r\n\r\n        const startSessionTimeout = () => {\r\n            // console.log('startSessionTimeout...');\r\n            localStorage.setItem(\"lastActivity\", Date.now())\r\n            sessionTimeout = setTimeout(() => {\r\n\r\n                if (!isUserActive(SESSION_TIMEOUT_DURATION)) {\r\n                    sessionEndActivity({\r\n                        sessionTimeout,\r\n                        refreshTokenIntervalId,\r\n                        resetSessionTimeout,\r\n                        resetSessionTimeout\r\n                    })\r\n\r\n                }\r\n            }, SESSION_TIMEOUT_DURATION);\r\n        };\r\n\r\n        const resetSessionTimeout = () => {\r\n            if (session.active === true) {\r\n                clearTimeout(sessionTimeout);\r\n                startSessionTimeout();\r\n            }\r\n        };\r\n\r\n\r\n\r\n        if (session.active === true) {\r\n            window.addEventListener('mousemove', resetSessionTimeout);\r\n            window.addEventListener('keydown', resetSessionTimeout);\r\n            startSessionTimeout();\r\n\r\n            if (islastToken()) {\r\n                callRefreshToken(dispatch);\r\n            } else {\r\n                localStorage.setItem(\"lastRefreshToken\", Date.now());\r\n            }\r\n\r\n            refreshTokenIntervalId = setInterval(() => {\r\n                callRefreshToken(dispatch);\r\n            }, REFRESH_TOKEN_INTERVAL);\r\n        }\r\n\r\n        return () => {\r\n            clearTimeout(sessionTimeout);\r\n            clearInterval(refreshTokenIntervalId);\r\n            window.removeEventListener('mousemove', resetSessionTimeout);\r\n            window.removeEventListener('keydown', resetSessionTimeout);\r\n        };\r\n    }, [session.active]);\r\n\r\n    useEffect(() => {\r\n        const handleStorageChange = (event) => {\r\n            if ((event.key === 'roleId')) {\r\n                if (!(event.oldValue === event.newValue)) {\r\n\r\n                    history.push({ pathname: \"/Dashboard\" })\r\n                    window.location.reload(true)\r\n                }\r\n\r\n            } else if (!(event.key === \"i18next.I18N_LANGUAGE\")\r\n                && !(event.key === \"i18next.translate.boo\")\r\n                && (event.newValue === null)) {\r\n                window.location.reload(true)\r\n            }\r\n        };\r\n\r\n        window.addEventListener('storage', handleStorageChange);\r\n\r\n        return () => {\r\n            window.removeEventListener('storage', handleStorageChange);\r\n        };\r\n    }, []);\r\n\r\n    return (\r\n        <SessionContext.Provider value={{ session, updateSessionActivity }}>\r\n            {children}\r\n        </SessionContext.Provider>\r\n    );\r\n};\r\n\r\nexport const useSession = () => useContext(SessionContext);\r\n\r\nconst isUserActive = (SESSION_TIMEOUT_DURATION) => {\r\n    const currentTime = Date.now();\r\n    const timeElapsed = currentTime - localStorage.getItem(\"lastActivity\");\r\n    return timeElapsed < SESSION_TIMEOUT_DURATION;\r\n};\r\nconst islastToken = () => {\r\n    const currentTime = Date.now();\r\n    const timeElapsed = currentTime - localStorage.getItem(\"lastRefreshToken\");\r\n    return timeElapsed < REFRESH_TOKEN_INTERVAL;\r\n};\r\n\r\nconst callRefreshToken = (dispatch) => {\r\n\r\n    let istoken = localStorage.getItem(\"refreshToken\")\r\n    if (istoken) {\r\n        localStorage.setItem(\"lastRefreshToken\", Date.now());\r\n        let jsonBody = { \"refresh\": `${istoken}` }\r\n        dispatch(sessionAliveNewToken(jsonBody))\r\n    }\r\n};","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Accounting\\CreditDebitNote\\GoodsCreditNote.js",["4453","4454","4455","4456","4457","4458","4459","4460","4461","4462","4463","4464","4465","4466","4467","4468","4469","4470","4471"],"import React, { useEffect, useState } from \"react\";\r\nimport {\r\n    Col,\r\n    FormGroup,\r\n    Label,\r\n    Input,\r\n    Row,\r\n    Button,\r\n} from \"reactstrap\";\r\nimport { MetaTags } from \"react-meta-tags\";\r\nimport {\r\n    BreadcrumbShowCountlabel,\r\n    Breadcrumb_inputName,\r\n    Retailer_List_Success, commonPageFieldSuccess,\r\n    saveCredit, CredietDebitType, saveCredit_Success, EditCreditlistSuccess\r\n} from \"../../../store/actions\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { commonPageField } from \"../../../store/actions\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {\r\n    comAddPageFieldFunc,\r\n    initialFiledFunc,\r\n    onChangeSelect,\r\n    onChangeText,\r\n    resetFunction,\r\n} from \"../../../components/Common/validationFunction\";\r\nimport Select from \"react-select\";\r\nimport { Change_Button, C_Button, SaveButton, } from \"../../../components/Common/CommonButton\";\r\nimport { url, mode, pageId } from \"../../../routes/index\"\r\nimport { Retailer_List } from \"../../../store/CommonAPI/SupplierRedux/actions\";\r\nimport { customAlert } from \"../../../CustomAlert/ConfirmDialog\";\r\nimport { InvoiceNumberSuccess, SalesReturnAddBtn_Action, SalesReturnAddBtn_Action_Succcess, InvoiceNumber } from \"../../../store/Sales/SalesReturnRedux/action\";\r\nimport { CInput, C_DatePicker, C_Select } from \"../../../CustomValidateForm/index\";\r\nimport { charRegx, decimalRegx, } from \"../../../CustomValidateForm/RegexPattern\";\r\nimport { goButtonPartyItemAddPage } from \"../../../store/Administrator/PartyItemsRedux/action\";\r\nimport { return_discountCalculate_Func } from \"../../Sale/SalesReturn/SalesCalculation\";\r\nimport * as _cfunc from \"../../../components/Common/CommonFunction\";\r\nimport { mySearchProps } from \"../../../components/Common/SearchBox/MySearch\";\r\nimport BootstrapTable from \"react-bootstrap-table-next\";\r\nimport ToolkitProvider from \"react-bootstrap-table2-toolkit\";\r\n\r\nfunction initialState(history) {\r\n\r\n    let page_Id = '';\r\n    let listPath = ''\r\n    let sub_Mode = history.location.pathname;\r\n\r\n    if (sub_Mode === url.GOODS_CREDIT_NOTE) {\r\n        page_Id = pageId.GOODS_CREDIT_NOTE;\r\n        listPath = url.GOODS_CREDIT_LIST\r\n    }\r\n    else if (sub_Mode === url.GOODS_DEBIT_NOTE) {\r\n        page_Id = pageId.GOODS_DEBIT_NOTE;\r\n        listPath = url.GOODS_DEBIT_LIST\r\n    }\r\n\r\n    return { page_Id, listPath }\r\n};\r\n\r\n\r\nconst GoodsCreditNote = (props) => {\r\n\r\n    const dispatch = useDispatch();\r\n    const history = useHistory()\r\n    const currentDate_ymd = _cfunc.date_ymd_func();\r\n    const systemSetting = _cfunc.loginSystemSetting();\r\n\r\n\r\n\r\n    const [pageMode, setPageMode] = useState(mode.defaultsave);\r\n    const [userPageAccessState, setUserAccState] = useState('');\r\n    const [editCreatedBy, seteditCreatedBy] = useState(\"\");\r\n    const [page_id] = useState(() => initialState(history).page_Id)\r\n    const [listPath] = useState(() => initialState(history).listPath)\r\n    const [subPageMode] = useState(history.location.pathname)\r\n\r\n    const fileds = {\r\n        CRDRNoteDate: currentDate_ymd,\r\n        Customer: \"\",\r\n        Narration: \"\",\r\n        InvoiceNO: \"\",\r\n        ItemName: \"\",\r\n    }\r\n\r\n    const [state, setState] = useState(initialFiledFunc(fileds))\r\n    const [discountDropOption] = useState([{ value: 1, label: \"Rs\" }, { value: 2, label: \"%\" }]);\r\n    const [TableArr, setTableArr] = useState([]);\r\n\r\n    //Access redux store Data /  'save_ModuleSuccess' action data\r\n    const {\r\n        postMsg,\r\n        RetailerList,\r\n        ItemList,\r\n        InvoiceNo,\r\n        pageField,\r\n        userAccess,\r\n        addButtonData,\r\n        saveBtnloading,\r\n        addBtnLoading,\r\n        invoiceNoDropDownLoading,\r\n        retailerDropLoading,\r\n        CreditDebitType,\r\n    } = useSelector((state) => ({\r\n        saveBtnloading: state.CredietDebitReducer.saveBtnloading,\r\n        postMsg: state.CredietDebitReducer.postMsg,\r\n        RetailerList: state.CommonAPI_Reducer.RetailerList,\r\n        ItemList: state.PartyItemsReducer.partyItem,\r\n        userAccess: state.Login.RoleAccessUpdateData,\r\n        pageField: state.CommonPageFieldReducer.pageField,\r\n        addButtonData: state.SalesReturnReducer.addButtonData,\r\n        InvoiceNo: state.SalesReturnReducer.InvoiceNo,\r\n        addBtnLoading: state.SalesReturnReducer.addBtnLoading,\r\n        invoiceNoDropDownLoading: state.SalesReturnReducer.invoiceNoDropDownLoading,\r\n        retailerDropLoading: state.CommonAPI_Reducer.retailerDropLoading,\r\n        CreditDebitType: state.CredietDebitReducer.CreditDebitType,\r\n    }));\r\n\r\n\r\n    useEffect(() => {\r\n        dispatch(InvoiceNumberSuccess([]));\r\n        dispatch(commonPageFieldSuccess(null));\r\n        dispatch(commonPageField(page_id));\r\n        dispatch(goButtonPartyItemAddPage({ jsonBody: JSON.stringify(_cfunc.loginJsonBody()) }));\r\n\r\n        const jsonBody = JSON.stringify({\r\n            Type: 4,\r\n            PartyID: _cfunc.loginPartyID(),\r\n            CompanyID: _cfunc.loginCompanyID(),\r\n        });\r\n        dispatch(Retailer_List(jsonBody));\r\n        dispatch(BreadcrumbShowCountlabel(`${\"Total Amount\"} :${0}`));\r\n        return () => {\r\n            dispatch(Retailer_List_Success([]));\r\n        };\r\n    }, []);\r\n\r\n    const location = { ...history.location };\r\n    const hasShowloction = location.hasOwnProperty(mode.editValue);//changes\r\n    const hasShowModal = props.hasOwnProperty(mode.editValue);//changes\r\n\r\n    const values = { ...state.values };\r\n    const { isError } = state;\r\n    const { fieldLabel } = state;\r\n\r\n\r\n    useEffect(() => {// userAccess useEffect\r\n        let userAcc = null;\r\n        let locationPath = location.pathname;\r\n        if (hasShowModal) {\r\n            locationPath = props.masterPath;\r\n        };\r\n        userAcc = userAccess.find((inx) => {\r\n            return (`/${inx.ActualPagePath}` === locationPath);\r\n        })\r\n        if (userAcc) {\r\n            setUserAccState(userAcc);\r\n            _cfunc.breadcrumbReturnFunc({ dispatch, userAcc });\r\n        };\r\n    }, [userAccess]);\r\n\r\n    useEffect(() => {\r\n        let credietDebitBody = JSON.stringify({\r\n            Company: _cfunc.loginCompanyID(),\r\n            TypeID: 5\r\n        });\r\n        dispatch(CredietDebitType(credietDebitBody));\r\n\r\n    }, []);\r\n\r\n    // This UseEffect 'SetEdit' data and 'autoFocus' while this Component load First Time.\r\n    useEffect(() => {\r\n        try {\r\n            if ((hasShowloction || hasShowModal)) {\r\n\r\n                let hasEditVal = null\r\n                if (hasShowloction) {\r\n                    setPageMode(location.pageMode)\r\n                    hasEditVal = location.editValue\r\n                }\r\n                else if (hasShowModal) {\r\n                    hasEditVal = props.editValue\r\n                    setPageMode(props.pageMode)\r\n                }\r\n                if (hasEditVal) {\r\n\r\n                    const { CRDRNoteDate, Customer, Narration, GrandTotal, CRDRInvoices = '', CustomerID, CRDRNoteItems = [] } = hasEditVal\r\n\r\n                    const { values, fieldLabel, hasValid, required, isError } = { ...state }\r\n                    values.CRDRNoteDate = CRDRNoteDate;\r\n                    values.Customer = { label: Customer, value: CustomerID };\r\n                    values.InvoiceNO = CRDRInvoices[0]\r\n                        ? {\r\n                            label: CRDRInvoices[0].FullInvoiceNumber,\r\n                            value: CRDRInvoices[0].id\r\n                        } : '';\r\n                    values.Narration = Narration;\r\n                    setTableArr(CRDRNoteItems)\r\n\r\n                    let dataCount = CRDRNoteItems.length;\r\n                    let commaSeparateAmount = _cfunc.amountCommaSeparateFunc(Number(GrandTotal).toFixed(2));\r\n                    dispatch(BreadcrumbShowCountlabel(`Count:${dataCount} ₹ ${commaSeparateAmount}`));\r\n\r\n                    setState({ values, fieldLabel, hasValid, required, isError })\r\n                    dispatch(Breadcrumb_inputName(hasEditVal.Name))\r\n                    seteditCreatedBy(hasEditVal.CreatedBy)\r\n                }\r\n                dispatch(EditCreditlistSuccess({ Status: false }))\r\n            }\r\n        } catch (w) { _cfunc.CommonConsole(w) }\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (pageField) {\r\n            const fieldArr = pageField.PageFieldMaster\r\n            comAddPageFieldFunc({ state, setState, fieldArr })\r\n        }\r\n    }, [pageField])\r\n\r\n    useEffect(async () => {\r\n        if ((postMsg.Status === true) && (postMsg.StatusCode === 200)) {\r\n            dispatch(saveCredit_Success({ Status: false }))\r\n            setState(() => resetFunction(fileds, state)) //Clear form values \r\n            dispatch(Breadcrumb_inputName(''))\r\n            setTableArr([])\r\n\r\n            if (pageMode === \"other\") {\r\n                customAlert({\r\n                    Type: 1,\r\n                    Message: postMsg.Message,\r\n                })\r\n            }\r\n            else {\r\n                let alertResponse = await customAlert({\r\n                    Type: 1,\r\n                    Message: postMsg.Message,\r\n                })\r\n                if (alertResponse) {\r\n                    history.push({ pathname: listPath })\r\n                }\r\n            }\r\n        }\r\n        else if (postMsg.Status === true) {\r\n            dispatch(saveCredit_Success({ Status: false }))\r\n            customAlert({\r\n                Type: 4,\r\n                Message: JSON.stringify(postMsg.Message),\r\n            })\r\n        }\r\n    }, [postMsg]);\r\n\r\n    useEffect(() => {\r\n\r\n        if (addButtonData.StatusCode === 200 && addButtonData.Status === true) {\r\n            dispatch(SalesReturnAddBtn_Action_Succcess({ StatusCode: false }))\r\n            try {\r\n                const updateItemArr = [...TableArr];\r\n                let existingIds = updateItemArr.map(item => item.id);\r\n                let nextId = existingIds.length > 0 ? Math.max(...existingIds) + 1 : 1;\r\n\r\n                addButtonData.Data.forEach((i) => {\r\n                    const MRPOptions = i.ItemMRPDetails.map(i => ({ label: i.MRPValue, value: i.MRP, Rate: i.Rate }));\r\n                    const GSTOptions = i.ItemGSTDetails.map(i => ({ label: i.GSTPercentage, value: i.GST }));\r\n\r\n                    const highestMRP = i.ItemMRPDetails.reduce((prev, current) => {// Default highest GST when Return mode \"2==ItemWise\"\r\n                        return (prev.MRP > current.MRP) ? prev : current;\r\n                    }, '');\r\n\r\n                    const highestGST = i.ItemGSTDetails.reduce((prev, current) => {// Default  highest GST when Return mode \"2==ItemWise\"\r\n                        return (prev.GST > current.GST) ? prev : current;\r\n                    }, '');\r\n\r\n                    i.Rate = highestMRP.Rate || \"\";\r\n                    i.MRP = highestMRP.MRP || \"\";\r\n                    i.MRPValue = highestMRP.MRPValue || \"\";\r\n\r\n                    i.GST = highestGST.GST || \"\";\r\n                    i.GSTPercentage = highestGST.GSTPercentage || \"\";\r\n\r\n                    const InvoiceQuantity = i.Quantity\r\n                    const newItemRow = {\r\n                        ...i,\r\n                        Quantity: '',\r\n                        InvoiceQuantity,\r\n                        id: nextId,\r\n                        MRPOptions,\r\n                        GSTOptions,\r\n                    }\r\n                    const caculate = return_discountCalculate_Func(newItemRow)\r\n                    newItemRow[\"roundedTotalAmount\"] = caculate.roundedTotalAmount;\r\n                    updateItemArr.push(newItemRow);\r\n                    nextId++;\r\n                });\r\n\r\n                let sumOfGrandTotal = updateItemArr.reduce((accumulator, currentObject) => accumulator + Number(currentObject[\"roundedTotalAmount\"]) || 0, 0);\r\n                let count_label = `${\"Total Amount\"} :${Number(sumOfGrandTotal).toLocaleString()}`\r\n                dispatch(BreadcrumbShowCountlabel(count_label));\r\n                updateItemArr.sort((a, b) => b.id - a.id);\r\n                setTableArr(updateItemArr);\r\n                setState((i) => {\r\n                    let a = { ...i }\r\n                    a.values.ItemName = \"\"\r\n                    a.hasValid.ItemName.valid = true;\r\n                    return a\r\n                })\r\n\r\n            } catch (error) { _cfunc.CommonConsole(error); }\r\n        }\r\n    }, [addButtonData]);\r\n\r\n\r\n    const customerOptions = RetailerList.map((index) => ({\r\n        value: index.id,\r\n        label: index.Name,\r\n    }));\r\n\r\n    const itemList = ItemList.map((index) => ({\r\n        value: index.Item,\r\n        label: index.ItemName,\r\n        itemCheck: index.selectCheck\r\n    }));\r\n\r\n    const ItemList_Options = itemList.filter((index) => {\r\n        return index.itemCheck === true\r\n    });\r\n\r\n    const InvoiceNo_Options = InvoiceNo.map((index) => ({\r\n        value: index.Invoice,\r\n        label: index.FullInvoiceNumber,\r\n    }));\r\n\r\n    const pagesListColumns = [\r\n        {\r\n            text: \"Item Name\",\r\n            dataField: \"ItemName\",\r\n            formatter: (cell, row) => (<Label style={{ minWidth: \"200px\" }}>{row.ItemName}</Label>)\r\n        },\r\n\r\n        {\r\n            text: \"Quantity\",\r\n            dataField: \"\",\r\n            classes: () => \"sales-discount-row\",\r\n            formatExtraData: { TableArr },\r\n            formatter: (cell, row, key, { TableArr }) => {\r\n                return (\r\n                    <div className=\"parent\" >\r\n                        <div className=\"child\" style={{ minWidth: \"100px\" }}>\r\n                            <CInput\r\n\r\n                                defaultValue={row.Quantity}\r\n                                autoComplete=\"off\"\r\n                                type=\"text\"\r\n                                cpattern={decimalRegx}\r\n                                placeholder=\"Enter Quantity\"\r\n                                className=\"col col-sm text-end\"\r\n                                onChange={(event) => {\r\n                                    row[\"Quantity\"] = event.target.value;\r\n                                    totalAmountCalcuationFunc(row, TableArr)\r\n                                }}\r\n                            />\r\n                        </div>\r\n                        <div className=\"child mt-2 pl-1\">\r\n                            <label className=\"label\">&nbsp;{row.UnitName}</label>\r\n                        </div>\r\n\r\n                    </div>\r\n                )\r\n            }\r\n        },\r\n\r\n        {\r\n            text: \"MRP\",\r\n            dataField: \"MRP\",\r\n            formatExtraData: { TableArr },\r\n            formatter: (cell, row, key, { TableArr }) => {\r\n                return (\r\n                    <>\r\n                        <div style={{ minWidth: \"90px\" }}>\r\n                            <Select\r\n                                id={`MRP${key}`}\r\n                                name=\"MRP\"\r\n                                defaultValue={(row.MRP === \"\") ? \"\" : { value: row.MRP, label: row.MRPValue }}\r\n                                isSearchable={true}\r\n                                className=\"react-dropdown\"\r\n                                classNamePrefix=\"dropdown\"\r\n                                options={row.MRPOptions}\r\n                                onChange={(event) => {\r\n                                    try {\r\n                                        row.MRP = event.value;\r\n                                        row.MRPValue = event.label;\r\n                                        row.Rate = event.Rate;\r\n                                        totalAmountCalcuationFunc(row, TableArr)\r\n                                        document.getElementById(`Rate-${key}-${row.id}`).value = event.Rate\r\n                                    } catch (error) {\r\n                                        _cfunc.CommonConsole(error)\r\n                                    }\r\n\r\n                                }}\r\n\r\n                            />\r\n                        </div>\r\n                    </>\r\n                )\r\n            }\r\n        },\r\n\r\n        {\r\n            text: \"GST\",\r\n            dataField: \"\",\r\n\r\n            formatExtraData: { TableArr },\r\n            formatter: (cell, row, key, { TableArr }) => {\r\n                return (<div style={{ minWidth: \"90px\" }}>\r\n                    <Select\r\n                        id={`GST${key}`}\r\n                        name=\"GST\"\r\n                        defaultValue={(row.GST === \"\") ? \"\" : { value: row.GST, label: row.GSTPercentage }}\r\n                        isSearchable={true}\r\n                        // isDisabled={returnMode === 1 && true}\r\n                        className=\"react-dropdown\"\r\n                        classNamePrefix=\"dropdown\"\r\n                        options={row.GSTOptions}\r\n                        onChange={(event) => {\r\n                            row.GST = event.value;\r\n                            row.GSTPercentage = event.label;\r\n                            totalAmountCalcuationFunc(row, TableArr)\r\n                        }}\r\n                    />\r\n                </div>)\r\n            }\r\n        },\r\n        {\r\n            text: \"Basic Rate\",\r\n            dataField: \"\",\r\n\r\n            classes: () => \"sales-rate-row\",\r\n            formatExtraData: { TableArr },\r\n            formatter: (cellContent, row, key, { TableArr }) => {\r\n                if (!Number(row[\"DiscountType\"])) {\r\n                    row[\"DiscountType\"] = 2;\r\n                }\r\n                return (\r\n                    <>\r\n                        <div className=\"\">\r\n                            <div className=\"parent  mb-1\">\r\n                                <div className=\"child\">\r\n                                    <Select\r\n                                        id={`DicountType_${key}`}\r\n                                        classNamePrefix=\"select2-selection\"\r\n                                        defaultValue={discountDropOption[1]}\r\n                                        options={discountDropOption}\r\n                                        onChange={(e) => {\r\n                                            row.DiscountType = e.value;\r\n                                            row.Discount = ''\r\n                                            document.getElementById(`Discount-${key}`).value = ''//changr Discount value  by id\r\n                                            totalAmountCalcuationFunc(row, TableArr);\r\n                                        }}\r\n                                    />\r\n                                </div>\r\n                                <div className=\"child\">\r\n                                    <CInput\r\n                                        type=\"text\"\r\n                                        id={`Discount-${key}`}//this id use discount type onchange\r\n                                        placeholder=\"Dist.\"\r\n                                        className=\"text-end\"\r\n                                        cpattern={decimalRegx}\r\n                                        onChange={(e) => {\r\n                                            let e_val = Number(e.target.value);\r\n\r\n                                            // Check if discount type is \"percentage\"\r\n                                            if (Number(row.DiscountType) === 2) {// Discount type 2 represents \"percentage\"\r\n                                                // Limit the input to the range of 0 to 100\r\n                                                if (e_val >= 100) {\r\n                                                    e.target.value = 100; // Set the input value to 100 if it exceeds 100\r\n                                                } else if (!(e_val >= 0 && e_val < 100)) {\r\n                                                    e.target.value = \"\"; // Clear the input value if it is less than 0\r\n                                                }\r\n                                            }\r\n                                            row.Discount = e.target.value;\r\n                                            totalAmountCalcuationFunc(row, TableArr)\r\n                                        }}\r\n\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"parent\">\r\n                                <CInput\r\n                                    defaultValue={row.Rate}\r\n                                    id={`Rate-${key}-${row.id}`}//this id use discount type onchange\r\n                                    placeholder=\"Enter Rate\"\r\n                                    type=\"text\"\r\n                                    cpattern={decimalRegx}\r\n                                    className=\"text-end\"\r\n                                    onChange={(event) => {\r\n                                        row.Rate = event.target.value\r\n                                        totalAmountCalcuationFunc(row, TableArr)\r\n                                    }}\r\n                                />\r\n                            </div>\r\n\r\n                        </div>\r\n                    </>\r\n                );\r\n            },\r\n        },\r\n        {\r\n            text: \"Item Comment\",\r\n            dataField: \"\",\r\n            // headerFormatter: () => {\r\n            //     return (<>\r\n            //         <div className=\"mt-n1\">\r\n            //             <Label>Item Comment</Label>\r\n            //         </div>\r\n            //         <span className=\"fs-6 text-muted \">\r\n            //             <small>*100 character accept</small>\r\n            //         </span>\r\n            //     </>)\r\n            // },\r\n            formatter: (cell, row, key) => {\r\n\r\n                return (<>\r\n                    <div className=\"parent\">\r\n                        <div className=\"child\">\r\n                            <CInput\r\n                                type=\"text\"\r\n                                id={`itemComment-${key}`}\r\n                                defaultValue={row.ItemComment}\r\n                                placeholder=\"Enter Comment\"\r\n                                autoComplete='off'\r\n                                cpattern={charRegx}\r\n                                onChange={(event) => { row.ItemComment = event.target.value }}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                </>)\r\n            }\r\n        },\r\n        {\r\n            text: \"Action \",\r\n            formatExtraData: { TableArr },\r\n            formatter: (_cell, row, key, { TableArr }) => (\r\n                <>\r\n                    <div style={{ justifyContent: 'center' }} >\r\n                        <Col>\r\n                            <FormGroup className=\" col col-sm-4 \">\r\n                                <Button\r\n                                    id={\"deleteid\"}\r\n                                    type=\"button\"\r\n                                    className=\"badge badge-soft-danger font-size-12 btn btn-danger waves-effect waves-light w-xxs border border-light\"\r\n                                    data-mdb-toggle=\"tooltip\" data-mdb-placement=\"top\" title='Delete MRP'\r\n                                    onClick={(e) => { deleteButtonAction(row, TableArr) }}>\r\n                                    <i className=\"mdi mdi-delete font-size-18\"></i>\r\n                                </Button>\r\n                            </FormGroup>\r\n                        </Col>\r\n                    </div>\r\n                </>\r\n            ),\r\n        },\r\n    ];\r\n\r\n    const totalAmountCalcuationFunc = (row, TablelistArray = []) => {\r\n        const caculate = return_discountCalculate_Func(row)\r\n        row.roundedTotalAmount = caculate.roundedTotalAmount;\r\n\r\n        let sumOfGrandTotal = TablelistArray.reduce((accumulator, currentObject) => accumulator + Number(currentObject[\"roundedTotalAmount\"]) || 0, 0);\r\n        let dataCount = TablelistArray.length;\r\n        let commaSeparateAmount = _cfunc.amountCommaSeparateFunc(Number(sumOfGrandTotal).toFixed(2));\r\n        dispatch(BreadcrumbShowCountlabel(`Count:${dataCount} ₹ ${commaSeparateAmount}`));\r\n    }\r\n\r\n    const deleteButtonAction = (row, TablelistArray = []) => {\r\n        const newArr = TablelistArray.filter((index) => !(index.id === row.id))\r\n        let sumOfGrandTotal = newArr.reduce((accumulator, currentObject) => accumulator + Number(currentObject[\"roundedTotalAmount\"]) || 0, 0);\r\n        let count_label = `${\"Total Amount\"} :${Number(sumOfGrandTotal).toLocaleString()}`\r\n        dispatch(BreadcrumbShowCountlabel(count_label));\r\n        setTableArr(newArr)\r\n    }\r\n\r\n    const ReturnDate_Onchange = (e, date) => {\r\n        setState((i) => {\r\n            const a = { ...i }\r\n            a.values.CRDRNoteDate = date;\r\n            a.hasValid.CRDRNoteDate.valid = true\r\n            return a\r\n        })\r\n    }\r\n\r\n    const AddPartyHandler = async () => {\r\n\r\n        const invalidMsg1 = []\r\n        if ((values.ItemName === '')) {\r\n            invalidMsg1.push(`Select Item Name`)\r\n        }\r\n\r\n        if (invalidMsg1.length > 0) {\r\n            customAlert({\r\n                Type: 4,\r\n                Message: JSON.stringify(invalidMsg1)\r\n            })\r\n            return\r\n        }\r\n\r\n        const jsonBody = JSON.stringify({\r\n            \"ItemID\": values.ItemName.value,\r\n            \"BatchCode\": \"\",\r\n            \"Customer\": values.Customer.value // Customer Swipe when Po return\r\n        })\r\n\r\n        const InvoiceId = ''\r\n        dispatch(SalesReturnAddBtn_Action({ jsonBody, InvoiceId, returnMode: 2 }))//(returnMode === 2) ItemWise\r\n    }\r\n\r\n    const RetailerHandler = (event) => {\r\n        setState((i) => {\r\n            let a = { ...i }\r\n            a.values.ItemName = \"\"\r\n            a.values.InvoiceNO = \"\"\r\n            a.values.Customer = event\r\n\r\n            a.hasValid.Customer.valid = true;\r\n            a.hasValid.ItemName.valid = true;\r\n            a.hasValid.InvoiceNO.valid = true;\r\n\r\n            return a\r\n        })\r\n        setTableArr([])\r\n\r\n        const jsonBody = JSON.stringify({\r\n            PartyID: _cfunc.loginPartyID(),\r\n            CustomerID: event.value\r\n        });\r\n\r\n        dispatch(InvoiceNumber(jsonBody));\r\n    }\r\n\r\n    const RetailerOnCancelClickHandler = () => {\r\n        setState((i) => {\r\n            let a = { ...i }\r\n            a.values.ItemName = \"\"\r\n            a.values.InvoiceNO = \"\"\r\n            a.values.Customer = ''\r\n\r\n            a.hasValid.Customer.valid = true;\r\n            a.hasValid.ItemName.valid = true;\r\n            a.hasValid.InvoiceNO.valid = true;\r\n            return a\r\n        })\r\n        setTableArr([])\r\n    }\r\n\r\n    const itemNameOnChangeHandler = (hasSelect, evn) => {\r\n        if (values.Customer === \"\") {\r\n            customAlert({ Type: 3, Message: `Please select ${fieldLabel.Customer}` })\r\n            return\r\n        }\r\n        onChangeSelect({ hasSelect, evn, state, setState, })\r\n        // setReturnMode(2)\r\n    }\r\n\r\n    const changeButtonHandler = async () => {\r\n        const permission = await customAlert({ Type: 7, Message: \"Are you sure you want to change the customer?\" })\r\n        if (permission) {\r\n            setTableArr([])\r\n        }\r\n    }\r\n\r\n    const SaveHandler = async (event) => {\r\n        try {\r\n            event.preventDefault();\r\n            const btnId = event.target.id;\r\n            let grand_total = 0;\r\n            const invalidMessages = [];\r\n            const filterData = TableArr.filter((i) => {\r\n                if (i.Quantity > 0) {\r\n                    let msgString = ' Please Select';\r\n\r\n                    if (i.MRP === '') { msgString = msgString + ', ' + \"MRP\" };\r\n                    if (i.GST === '') { msgString = msgString + ', ' + \"GST\" };\r\n                    if (!(Number(i.Rate) > 0)) { msgString = msgString + ', ' + \"Rate\" };\r\n\r\n                    if (((i.MRP === '') || (i.GST === '') || !(Number(i.Rate) > 0))) {\r\n                        invalidMessages.push({ [i.ItemName]: msgString });\r\n                    }\r\n                    return true\r\n                }\r\n            });\r\n\r\n            if (invalidMessages.length > 0) {\r\n                customAlert({\r\n                    Type: 4,\r\n                    Message: invalidMessages,\r\n                });\r\n                return;\r\n            }\r\n\r\n            if (filterData.length === 0) {\r\n                customAlert({\r\n                    Type: 4,\r\n                    Message: \"Please Enter One Item Quantity\",\r\n                });\r\n                return;\r\n            }\r\n\r\n            if (values.InvoiceNO === '') {\r\n                customAlert({\r\n                    Type: 4,\r\n                    Message: \"Invoice Number is Required\",\r\n                });\r\n                return;\r\n            }\r\n\r\n            const creditNoteItems = filterData.map((i) => {\r\n\r\n                const calculate = return_discountCalculate_Func(i);\r\n                grand_total += Number(calculate.roundedTotalAmount);\r\n\r\n                return {\r\n                    \"CRDRNoteDate\": \"2023-09-04\",\r\n                    \"Item\": i.Item,\r\n                    \"ItemName\": i.ItemName,\r\n                    \"Quantity\": i.Quantity,\r\n                    \"Unit\": i.Unit,\r\n                    \"BaseUnitQuantity\": i.BaseUnitQuantity,\r\n                    \"BatchCode\": '1111',\r\n                    \"MRP\": i.MRP,\r\n                    \"MRPValue\": i.MRPValue,\r\n                    \"Rate\": i.Rate,\r\n                    \"GST\": i.GST,\r\n                    \"ItemComment\": i.ItemComment,\r\n                    \"CGST\": Number(calculate.CGST_Amount).toFixed(2),\r\n                    \"SGST\": Number(calculate.SGST_Amount).toFixed(2),\r\n                    \"IGST\": Number(calculate.IGST_Amount).toFixed(2),\r\n                    \"GSTPercentage\": calculate.GST_Percentage,\r\n                    \"CGSTPercentage\": calculate.CGST_Percentage,\r\n                    \"SGSTPercentage\": calculate.SGST_Percentage,\r\n                    \"IGSTPercentage\": calculate.IGST_Percentage,\r\n                    \"BasicAmount\": Number(calculate.discountBaseAmt).toFixed(2),\r\n                    \"GSTAmount\": Number(calculate.roundedGstAmount).toFixed(2),\r\n                    \"Amount\": Number(calculate.roundedTotalAmount).toFixed(2),\r\n                    \"TaxType\": 'GST',\r\n                    \"DiscountType\": calculate.discountType,\r\n                    \"Discount\": calculate.discount,\r\n                    \"DiscountAmount\": Number(calculate.disCountAmt).toFixed(2),\r\n                };\r\n            });\r\n\r\n            const noteType_BySubPageMode = () => {\r\n                return (subPageMode === url.GOODS_CREDIT_NOTE) ?\r\n                    CreditDebitType.find((index) => index.Name === \"Goods CreditNote\")?.id\r\n                    : CreditDebitType.find((index) => index.Name === \"Goods DebitNote\")?.id;\r\n            };\r\n            debugger\r\n            const isGrandAmtRound = systemSetting.CreditDebitAmountRoundConfiguration === '1';\r\n\r\n            const jsonBody = JSON.stringify({\r\n                CRDRNoteDate: values.CRDRNoteDate,\r\n                Customer: values.Customer.value,\r\n                NoteType: noteType_BySubPageMode(),\r\n                GrandTotal: isGrandAmtRound ? Math.round(grand_total).toFixed(2) : grand_total.toFixed(2),\r\n                RoundOffAmount: (grand_total - Math.trunc(grand_total)).toFixed(2),\r\n                Narration: values.Narration,\r\n                CRDRNoteItems: creditNoteItems,\r\n                Party: _cfunc.loginPartyID(),\r\n                CreatedBy: _cfunc.loginUserID(),\r\n                UpdatedBy: _cfunc.loginUserID(),\r\n                CRDRInvoices: [{ Invoice: values.InvoiceNO.value, }],\r\n            });\r\n\r\n            dispatch(saveCredit({ jsonBody, btnId }));\r\n\r\n        } catch (e) { _cfunc.CommonConsole(e) }\r\n    };\r\n\r\n\r\n\r\n\r\n    if (!(userPageAccessState === '')) {\r\n        return (\r\n            <React.Fragment>\r\n                <MetaTags>{_cfunc.metaTagLabel(userPageAccessState)}</MetaTags>\r\n\r\n                <div className=\"page-content\" >\r\n\r\n                    <form noValidate>\r\n                        <div className=\"px-2 c_card_filter header text-black mb-1\" >\r\n                            <Row>\r\n                                <Col sm=\"6\">\r\n                                    <FormGroup className=\"row mt-2\" >\r\n                                        <Label className=\"col-sm-1 p-2\"\r\n                                            style={{ width: \"115px\", marginRight: \"0.4cm\" }}>{fieldLabel.CRDRNoteDate}  </Label>\r\n                                        <Col sm=\"7\">\r\n                                            <C_DatePicker\r\n                                                name='CRDRNoteDate'\r\n                                                value={values.CRDRNoteDate}\r\n                                                onChange={ReturnDate_Onchange}\r\n                                            />\r\n                                        </Col>\r\n                                    </FormGroup>\r\n                                </Col >\r\n\r\n\r\n\r\n                            </Row>\r\n\r\n                            <Row>\r\n                                <Col sm=\"6\"> {/*//Retailer DropDown */}\r\n                                    <FormGroup className=\" row mt-1 \" >\r\n                                        <Label className=\"col-sm-1 p-2\"\r\n                                            style={{ width: \"115px\", marginRight: \"0.4cm\" }}>{fieldLabel.Customer} </Label>\r\n                                        <Col sm=\"7\">\r\n                                            <C_Select\r\n                                                id=\"Customer \"\r\n                                                name=\"Customer\"\r\n                                                value={values.Customer}\r\n                                                isSearchable={true}\r\n                                                isLoading={retailerDropLoading}\r\n                                                isDisabled={((TableArr.length > 0)) ? true : false}\r\n                                                options={customerOptions}\r\n                                                styles={{\r\n                                                    menu: provided => ({ ...provided, zIndex: 2 })\r\n                                                }}\r\n                                                onChange={RetailerHandler}\r\n                                                onCancelClick={RetailerOnCancelClickHandler}\r\n                                            />\r\n                                            {isError.Customer.length > 0 && (\r\n                                                <span className=\"text-danger f-8\"><small>{isError.Customer}</small></span>\r\n                                            )}\r\n                                        </Col>\r\n\r\n                                        <Col sm=\"1\" className=\"mx-6 mt-1\">\r\n                                            {TableArr.length > 0 &&\r\n                                                <Change_Button\r\n                                                    type=\"button\"\r\n                                                    onClick={changeButtonHandler}\r\n                                                />\r\n                                            }\r\n                                        </Col>\r\n                                    </FormGroup>\r\n                                </Col >\r\n\r\n                                <Col sm=\"6\"> {/* Narration Input*/}\r\n                                    <FormGroup className=\" row mt-1 \" >\r\n                                        <Label className=\"col-sm-1 p-2\"\r\n                                            style={{ width: \"115px\", marginRight: \"0.4cm\" }}>{fieldLabel.Narration} </Label>\r\n                                        <Col sm=\"7\">\r\n                                            <Input\r\n                                                name=\"Narration\"\r\n                                                id=\"Narration\"\r\n                                                value={values.Narration}\r\n                                                type=\"text\"\r\n                                                className={isError.Narration.length > 0 ? \"is-invalid form-control\" : \"form-control\"}\r\n                                                placeholder=\"Enter Comment\"\r\n                                                autoComplete='off'\r\n                                                onChange={(event) => {\r\n                                                    onChangeText({ event, state, setState })\r\n                                                }}\r\n                                            />\r\n                                            {isError.Narration.length > 0 && (\r\n                                                <span className=\"invalid-feedback\">{isError.Narration}</span>\r\n                                            )}\r\n                                        </Col>\r\n\r\n                                    </FormGroup>\r\n                                </Col>\r\n                            </Row>\r\n\r\n                            <Row>\r\n                                <Col sm=\"6\"> {/* //ItemName */}\r\n                                    <FormGroup className=\" row mt-1 \" >\r\n                                        <Label className=\"col-sm-1 p-2\"\r\n                                            style={{ width: \"115px\", marginRight: \"0.4cm\" }}>{fieldLabel.ItemName} </Label>\r\n                                        <Col sm=\"7\">\r\n                                            <C_Select\r\n                                                id=\"ItemName \"\r\n                                                name=\"ItemName\"\r\n                                                value={values.ItemName}\r\n                                                isSearchable={true}\r\n                                                className=\"react-dropdown\"\r\n                                                classNamePrefix=\"dropdown\"\r\n                                                styles={{\r\n                                                    menu: provided => ({ ...provided, zIndex: 2 })\r\n                                                }}\r\n\r\n                                                options={ItemList_Options}\r\n                                                onChange={itemNameOnChangeHandler}\r\n                                            />\r\n                                        </Col>\r\n\r\n                                        <Col sm=\"1\" className=\"mx-6 mt-1\">\r\n                                            <C_Button\r\n                                                type=\"button\"\r\n                                                loading={addBtnLoading}\r\n                                                className=\"btn btn-outline-primary border-1 font-size-12 text-center\"\r\n                                                onClick={() => AddPartyHandler(\"ItemWise\")}\r\n                                            >\r\n                                                Add\r\n                                            </C_Button>\r\n                                        </Col>\r\n                                    </FormGroup>\r\n                                </Col >\r\n\r\n                                <Col sm=\"6\">{/* //InvoiceNO DropDown */}\r\n                                    <FormGroup className=\" row mt-1 \" >\r\n                                        <Label className=\"col-sm-1 p-2\"\r\n                                            style={{ width: \"115px\", marginRight: \"0.4cm\" }}>{fieldLabel.InvoiceNO}</Label>\r\n                                        <Col sm=\"7\">\r\n                                            <C_Select\r\n                                                name=\"InvoiceNO\"\r\n                                                value={values.InvoiceNO}\r\n                                                className=\"react-dropdown\"\r\n                                                classNamePrefix=\"dropdown\"\r\n                                                options={InvoiceNo_Options}\r\n                                                isLoading={invoiceNoDropDownLoading}\r\n                                                onChange={(hasSelect, evn) => {\r\n                                                    onChangeSelect({ hasSelect, evn, state, setState, })\r\n                                                }}\r\n                                                styles={{\r\n                                                    menu: provided => ({ ...provided, zIndex: 2 })\r\n                                                }}\r\n                                            />\r\n\r\n                                        </Col>\r\n                                    </FormGroup>\r\n                                </Col >\r\n\r\n                            </Row>\r\n                        </div>\r\n\r\n                        <div>\r\n                            <ToolkitProvider\r\n                                keyField={\"id\"}\r\n                                data={TableArr}\r\n                                columns={pagesListColumns}\r\n                                search\r\n                            >\r\n                                {(toolkitProps) => (\r\n                                    <React.Fragment>\r\n                                        <Row>\r\n                                            <Col xl=\"12\">\r\n                                                <div className=\"table-responsive table\" style={{ minHeight: \"60vh\" }}>\r\n                                                    <BootstrapTable\r\n                                                        keyField={\"id\"}\r\n                                                        id=\"table_Arrow\"\r\n                                                        classes={\"table  table-bordered \"}\r\n                                                        noDataIndication={\r\n                                                            <div className=\"text-danger text-center \">\r\n                                                                Items Not available\r\n                                                            </div>\r\n                                                        }\r\n                                                        {...toolkitProps.baseProps}\r\n                                                        onDataSizeChange={(e) => {\r\n                                                            _cfunc.tableInputArrowUpDounFunc(\"#table_Arrow\")\r\n                                                        }}\r\n                                                    />\r\n                                                </div>\r\n                                            </Col>\r\n                                            {mySearchProps(toolkitProps.searchProps,)}\r\n                                        </Row>\r\n\r\n                                    </React.Fragment>\r\n                                )}\r\n                            </ToolkitProvider>\r\n                        </div>\r\n\r\n                        {\r\n                            TableArr.length > 0 ?\r\n                                <FormGroup>\r\n                                    <Col sm={2} style={{ marginLeft: \"-40px\" }} className={\"row save1\"}>\r\n                                        <SaveButton\r\n                                            pageMode={pageMode}\r\n                                            forceDisabled={addBtnLoading}\r\n                                            loading={saveBtnloading}\r\n                                            onClick={SaveHandler}\r\n                                            userAcc={userPageAccessState}\r\n                                            module={\"SalesReturn\"}\r\n                                        />\r\n\r\n                                    </Col>\r\n                                </FormGroup >\r\n                                : null\r\n                        }\r\n\r\n                    </form >\r\n                </div >\r\n            </React.Fragment >\r\n        );\r\n    }\r\n    else {\r\n        return (\r\n            <React.Fragment></React.Fragment>\r\n        )\r\n    }\r\n};\r\n\r\nexport default GoodsCreditNote\r\n\r\n\r\n\r\n\r\n\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\components\\Common\\NewCommonPartyDropdown.js",["4472","4473","4474","4475","4476"],"import React, { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Col, FormGroup, Label } from \"reactstrap\";\r\nimport { C_Button } from \"./CommonButton\";\r\nimport { C_Select } from \"../../CustomValidateForm\";\r\nimport { loginUserAdminRole } from \"./CommonFunction\";\r\nimport { commonPartyDropSelectAction } from \"../../store/Utilites/PartyDrodown/action\";\r\nimport { customAlert } from \"../../CustomAlert/ConfirmDialog\";\r\nimport { useHistory } from \"react-router-dom/cjs/react-router-dom.min\";\r\nimport { mode } from \"../../routes\";\r\n\r\nconst NewCommonPartyDropdown = ({ pageMode }) => {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const [selectedParty, setSelectedParty] = useState('');\r\n    const [changeButtonShow, setChangeButtonShow] = useState(false);\r\n\r\n    const { partyList, partyDropdownLoading, commonPartyDropSelect } = useSelector((state) => ({\r\n        partyList: state.CommonPartyDropdownReducer.commonPartyDropdown,\r\n        partyDropdownLoading: state.CommonPartyDropdownReducer.partyDropdownLoading,\r\n        commonPartyDropSelect: state.CommonPartyDropdownReducer.commonPartyDropSelect\r\n    }));\r\n\r\n    useEffect(() => {\r\n        setSelectedParty(commonPartyDropSelect);\r\n        if (commonPartyDropSelect.value > 0) {\r\n            setChangeButtonShow(true)\r\n        }\r\n    }, []);\r\n\r\n    const updateSelectedParty = () => {\r\n        if (selectedParty.value === 0) {\r\n            customAlert({ Type: 3, Message: \"Please Select Party\" });\r\n            return;\r\n        }\r\n        setChangeButtonShow(true)\r\n        dispatch(commonPartyDropSelectAction(selectedParty))\r\n        localStorage.setItem(\"selectedParty\", JSON.stringify(selectedParty));\r\n    };\r\n\r\n    const partyOnchange = () => {\r\n        setChangeButtonShow(false)\r\n        setSelectedParty({ value: 0, label: \"select...\", SAPPartyCode: \"\" })\r\n        dispatch(commonPartyDropSelectAction({ value: 0, label: \"select...\", SAPPartyCode: \"\" }))\r\n        localStorage.setItem(\"selectedParty\", JSON.stringify({ value: 0, label: \"select...\", SAPPartyCode: \"\" }));\r\n    };\r\n\r\n    const PartyDropdownOptions = partyList.map((data) => ({\r\n        value: data.id,\r\n        label: data.Name,\r\n        SAPPartyCode: data.SAPPartyCode\r\n    }))\r\n\r\n    return (\r\n        loginUserAdminRole() && (\r\n            <div className=\"px-2 c_card_header text-black mb-1\">\r\n                <div className=\"row pt-2\">\r\n                    <Col sm=\"5\">\r\n                        <FormGroup className=\"row\">\r\n                            <Label className=\"col-sm-5 p-2\" style={{ width: \"83px\" }}>\r\n                                Party\r\n                            </Label>\r\n                            <Col sm=\"6\">\r\n                                <C_Select\r\n                                    value={selectedParty}\r\n                                    styles={{ menu: (provided) => ({ ...provided, zIndex: 2 }) }}\r\n                                    isSearchable={true}\r\n                                    isLoading={partyDropdownLoading}\r\n                                    className=\"react-dropdown\"\r\n                                    classNamePrefix=\"dropdown\"\r\n                                    options={PartyDropdownOptions}\r\n                                    isDisabled={(changeButtonShow && !(selectedParty.value === 0))}\r\n                                    onChange={(e) => setSelectedParty(e)}\r\n                                />\r\n                            </Col>\r\n                        </FormGroup>\r\n                    </Col>\r\n\r\n                    <Col sm=\"1\">\r\n                        {(!(changeButtonShow)) ? (\r\n                            <C_Button\r\n                                type=\"button\"\r\n                                className=\"btn btn-outline-primary border-1 font-size-12 text-center\"\r\n                                onClick={updateSelectedParty}\r\n                            >\r\n                                Select\r\n                            </C_Button>\r\n                        )\r\n                            : !(pageMode === mode.view || pageMode === mode.edit) &&\r\n                            (\r\n                                <C_Button\r\n                                    type=\"button\"\r\n                                    spinnerColor={\"info\"}\r\n                                    className=\"btn btn-outline-info border-1 font-size-12 \"\r\n                                    onClick={partyOnchange}\r\n                                >Change</C_Button>\r\n                            )\r\n                        }\r\n                    </Col>\r\n\r\n                </div>\r\n            </div>\r\n        )\r\n    );\r\n};\r\n\r\nexport default NewCommonPartyDropdown;","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Adminisrator\\PartyItemPage\\ChannelViewDetails.js",["4477","4478"],"import BootstrapTable from \"react-bootstrap-table-next\";\r\nimport ToolkitProvider from \"react-bootstrap-table2-toolkit\";\r\nimport { Card, CardBody, CardHeader, Label, Modal, } from \"reactstrap\";\r\nimport { mySearchProps } from \"../../../components/Common/SearchBox/MySearch\";\r\nimport React, { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { CommonConsole } from \"../../../components/Common/CommonFunction\";\r\nimport { channalItemViewDetailActionSuccess } from \"../../../store/actions\";\r\nimport { useState } from \"react\";\r\n\r\n\r\nconst ChannelViewDetails = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const [modal_view, setModal_view] = useState(false);\r\n    const [tableArray, setTableArray] = useState([]);\r\n\r\n    const viewDetail = useSelector((state) => (state.PartyItemsReducer.channeItemViewDetail))\r\n    \r\n    useEffect(() => {\r\n        try {\r\n            if ((viewDetail.Status === true)) {\r\n                setTableArray(viewDetail.Data)// modify Custom Table Data\r\n                setModal_view(true);\r\n            }\r\n        } catch (error) { CommonConsole(error) }\r\n    }, [viewDetail]);\r\n\r\n    function modalToggleFunc() {\r\n        setModal_view(false);\r\n        dispatch(channalItemViewDetailActionSuccess({ Status: false }))// modify Custom Api Action call\r\n\r\n    }\r\n\r\n    const pagesListColumns = [\r\n        {\r\n            text: \"Party Name\",\r\n            dataField: \"Name\",\r\n        },\r\n    ];\r\n\r\n    return (\r\n        <Modal\r\n            isOpen={modal_view}\r\n            toggle={modalToggleFunc}\r\n            centered\r\n        >\r\n            <Card>\r\n                <CardHeader className=\" text-center\">\r\n                    <Label className=\"font-size-24\">Item Assing by this Parties.</Label>\r\n                </CardHeader>\r\n                <CardBody className=\"c_card_body\">\r\n                    <div className=\"modal-body\">\r\n                        <div className=\"mt-n1 table-responsive\">\r\n                            <BootstrapTable\r\n                                keyField={\"Item\"}\r\n                                data={tableArray}\r\n                                columns={pagesListColumns}\r\n                                bordered={true}\r\n                                striped={false}\r\n                                noDataIndication={<div className=\"text-danger text-center \">Record Not Available</div>}\r\n                                headerWrapperClasses={\"thead-light\"}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n\r\n\r\n                </CardBody>\r\n            </Card>\r\n        </Modal>\r\n    )\r\n\r\n}\r\nexport default ChannelViewDetails;\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\components\\Common\\CommonImageComponent.js",["4479","4480","4481"],"import React, { Component } from \"react\"\r\nimport {\r\n    Carousel,\r\n    CarouselItem,\r\n    CarouselControl,\r\n    CarouselIndicators,\r\n    CarouselCaption,\r\n    Modal,\r\n} from \"reactstrap\"\r\n\r\n\r\n\r\nclass Slidewithcaption extends Component {\r\n\r\n    constructor(props) {\r\n        debugger\r\n        super(props)\r\n        this.items = props.Images\r\n        this.state = { activeIndex: 0 }\r\n        this.next = this.next.bind(this)\r\n        this.previous = this.previous.bind(this)\r\n        this.goToIndex = this.goToIndex.bind(this)\r\n        this.onExiting = this.onExiting.bind(this)\r\n        this.onExited = this.onExited.bind(this)\r\n    }\r\n\r\n    onExiting() {\r\n        this.animating = true\r\n    }\r\n\r\n    onExited() {\r\n        this.animating = false\r\n    }\r\n\r\n    next() {\r\n\r\n\r\n        if (this.animating) return\r\n        const nextIndex =\r\n            this.state.activeIndex === this.items.length - 1\r\n                ? 0\r\n                : this.state.activeIndex + 1\r\n        this.setState({ activeIndex: nextIndex })\r\n    }\r\n\r\n    previous() {\r\n\r\n        if (this.animating) return\r\n        const nextIndex =\r\n            this.state.activeIndex === 0\r\n                ? this.items.length - 1\r\n                : this.state.activeIndex - 1\r\n        this.setState({ activeIndex: nextIndex })\r\n    }\r\n\r\n    goToIndex(newIndex) {\r\n        if (this.animating) return\r\n        this.setState({ activeIndex: newIndex })\r\n    }\r\n\r\n    render() {\r\n\r\n        const { activeIndex } = this.state\r\n\r\n        const slides = this.items.map((item, key) => {\r\n            debugger\r\n            return (\r\n                // <CarouselItem\r\n                //     onExiting={this.onExiting}\r\n                //     onExited={this.onExited}\r\n                //     key={key}\r\n                // >\r\n                //     <img\r\n                //         src={item}\r\n                //         className=\"k img-fluid\"\r\n                //     />\r\n                // </CarouselItem>\r\n\r\n                <CarouselItem\r\n                    onExiting={this.onExiting}\r\n                    onExited={this.onExited}\r\n                    key={key}\r\n                >\r\n                    <img\r\n                        src={item} // Replace with the actual image source\r\n                        className=\"k img-fluid\"\r\n                        style={{ width: \"600px\", height: \"600px\" }}\r\n                        // Set the dimensions\r\n                        alt=\"Image Description\" // Add a meaningful alt attribute for accessibility\r\n                    />\r\n                </CarouselItem>\r\n\r\n\r\n\r\n\r\n\r\n            )\r\n        })\r\n\r\n        return (\r\n            <React.Fragment>\r\n\r\n                <Carousel\r\n                    activeIndex={activeIndex}\r\n                    next={this.next}\r\n                    previous={this.previous}\r\n                >\r\n                    <CarouselIndicators\r\n                        items={this.items}\r\n                        activeIndex={activeIndex}\r\n                        onClickHandler={this.goToIndex}\r\n                    />\r\n                    {slides}\r\n                    <CarouselControl\r\n                        direction=\"prev\"\r\n                        directionText=\"Previous\"\r\n                        onClickHandler={this.previous}\r\n                    />\r\n                    <CarouselControl\r\n                        direction=\"next\"\r\n                        directionText=\"Next\"\r\n                        onClickHandler={this.next}\r\n                    />\r\n                </Carousel>\r\n\r\n\r\n\r\n            </React.Fragment >\r\n        )\r\n    }\r\n}\r\n\r\nexport default Slidewithcaption\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Inventory\\StockAdjustment\\index.js",["4482","4483","4484","4485","4486","4487","4488"],"import React, { useEffect, useState } from \"react\";\r\nimport {\r\n    Col,\r\n    FormGroup,\r\n    Label,\r\n    Input,\r\n    Row,\r\n    Button\r\n} from \"reactstrap\";\r\nimport { MetaTags } from \"react-meta-tags\";\r\nimport { commonPageFieldSuccess } from \"../../../store/actions\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { commonPageField } from \"../../../store/actions\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { SaveButton } from \"../../../components/Common/CommonButton\";\r\nimport { url, mode, pageId } from \"../../../routes/index\"\r\nimport { customAlert } from \"../../../CustomAlert/ConfirmDialog\";\r\nimport { CInput, C_Select, decimalRegx } from \"../../../CustomValidateForm/index\";\r\nimport { goButtonPartyItemAddPageSuccess, goButtonPartyItemAddPage } from \"../../../store/Administrator/PartyItemsRedux/action\";\r\nimport * as _cfunc from \"../../../components/Common/CommonFunction\";\r\nimport \"../../../pages/Sale/SalesReturn/salesReturn.scss\";\r\nimport { mySearchProps } from \"../../../components/Common/SearchBox/MySearch\";\r\nimport BootstrapTable from \"react-bootstrap-table-next\";\r\nimport ToolkitProvider from \"react-bootstrap-table2-toolkit\";\r\nimport { getBatchCode_By_ItemID_Action, getBatchCode_By_ItemID_Action_Success } from \"../../../store/Inventory/StockAdjustmentRedux/action\";\r\nimport { saveStockEntryAction, saveStockEntrySuccess } from \"../../../store/Inventory/StockEntryRedux/action\";\r\n\r\nconst StockAdjustment = (props) => {\r\n\r\n    const dispatch = useDispatch();\r\n    const history = useHistory()\r\n    const currentDate_ymd = _cfunc.date_ymd_func();\r\n\r\n    const [pageMode] = useState(mode.defaultsave);\r\n    const [subPageMode] = useState(history.location.pathname)\r\n    const [userPageAccessState, setUserAccState] = useState('');\r\n\r\n    const [TableArr, setTableArr] = useState([]);\r\n\r\n    const [itemNameSelect, setItemNameSelect] = useState('');\r\n    const [batchCodeSelect, setBatchCodeSelect] = useState('');\r\n\r\n    //Access redux store Data /  'save_ModuleSuccess' action data\r\n    const {\r\n        ItemList,\r\n        partyItemListLoading,\r\n        BatchCodeRedux,\r\n        batchCodeDropLoading,\r\n        postMsg,\r\n        saveBtnloading,\r\n        userAccess,\r\n    } = useSelector((state) => ({\r\n        partyItemListLoading: state.PartyItemsReducer.partyItemListLoading,\r\n        ItemList: state.PartyItemsReducer.partyItem,\r\n\r\n        saveBtnloading: state.StockEntryReducer.saveBtnloading,\r\n        postMsg: state.StockEntryReducer.postMsg,\r\n\r\n        BatchCodeRedux: state.StockAdjustmentReducer.batchCode_By_ItemID,\r\n        batchCodeDropLoading: state.StockAdjustmentReducer.batchCodeDropLoading,\r\n\r\n        userAccess: state.Login.RoleAccessUpdateData,\r\n    }));\r\n\r\n    useEffect(() => {\r\n        let page_Id\r\n        if (subPageMode === url.STOCK_ADJUSTMENT) {\r\n            page_Id = pageId.STOCK_ADJUSTMENT;\r\n        }\r\n        else {\r\n            page_Id = pageId.STOCK_ADJUSTMENT_MODE_2;\r\n        }\r\n        dispatch(commonPageFieldSuccess(null));\r\n        dispatch(commonPageField(page_Id));\r\n\r\n        dispatch(goButtonPartyItemAddPage({\r\n            jsonBody: JSON.stringify({\r\n                ..._cfunc.loginJsonBody(),\r\n                PartyID: _cfunc.loginSelectedPartyID()\r\n            })\r\n        }))\r\n        return () => {\r\n            dispatch(goButtonPartyItemAddPageSuccess([]));\r\n            dispatch(getBatchCode_By_ItemID_Action_Success([]));\r\n        }\r\n    }, []);\r\n\r\n    const location = { ...history.location }\r\n    const hasShowModal = props.hasOwnProperty(mode.editValue)\r\n\r\n    // userAccess useEffect\r\n    useEffect(() => {\r\n        let userAcc = null;\r\n        let locationPath = location.pathname;\r\n        if (hasShowModal) {\r\n            locationPath = props.masterPath;\r\n        };\r\n        userAcc = userAccess.find((inx) => {\r\n            return (`/${inx.ActualPagePath}` === locationPath)\r\n        })\r\n        if (userAcc) {\r\n            setUserAccState(userAcc)\r\n            _cfunc.breadcrumbReturnFunc({ dispatch, userAcc });\r\n        };\r\n    }, [userAccess])\r\n\r\n    const itemList = ItemList.map((index) => ({\r\n        value: index.Item,\r\n        label: index.ItemName,\r\n        itemCheck: index.selectCheck\r\n    }));\r\n\r\n    const ItemList_Options = itemList.filter((index) => {\r\n        return index.itemCheck === true\r\n    });\r\n\r\n    const BatchCode_Options = BatchCodeRedux.map((index) => ({\r\n        value: index.id,\r\n        label: `${index.BatchCode} (${index.SystemBatchCode}) MRP:${index.MRP} Qty:${index.OriginalBaseUnitQuantity}`,\r\n    }));\r\n\r\n    function QuantityHandler(event, row) {\r\n\r\n        let input = event.target.value\r\n\r\n        let v1 = Number(row.OriginalBaseUnitQuantity);\r\n        let v2 = Number(input)\r\n        if (!(v1 >= v2)) {\r\n            event.target.value = v1;\r\n        }\r\n        row.Quantity = input;\r\n    }\r\n\r\n    const pagesListColumns = [\r\n        {\r\n            text: \"Item Name\",\r\n            dataField: \"ItemName\",\r\n        },\r\n        {\r\n            text: \"BatchCode\",\r\n            dataField: \"BatchCode\",\r\n        },\r\n        {\r\n            text: \"MRP\",\r\n            dataField: \"MRP\",\r\n        },\r\n        {\r\n            text: \"Original Quantity\",\r\n            dataField: \"OriginalBaseUnitQuantity\",\r\n            formatter: (cellContent, row, key) => {\r\n\r\n                return (<span >\r\n                    <Label >{row.OriginalBaseUnitQuantity}&nbsp;&nbsp;&nbsp;&nbsp;{row.OriginalQtyUnitName}</Label>\r\n                </span>)\r\n            }\r\n        },\r\n        {\r\n            text: \"Quantity\",\r\n            dataField: \"\",\r\n            formatExtraData: { TableArr },\r\n            formatter: (cell, row, key, { TableArr }) => {\r\n                return (\r\n                    <div className=\"parent\" >\r\n                        <div className=\"child\" style={{ minWidth: \"100px\" }}>\r\n                            <CInput\r\n                                defaultValue={row.Quantity}\r\n                                autoComplete=\"off\"\r\n                                type=\"text\"\r\n                                cpattern={decimalRegx}\r\n                                className=\"col col-sm text-end\"\r\n                                onChange={(event) => {\r\n                                    QuantityHandler(event, row, TableArr)\r\n                                }}\r\n                            />\r\n                        </div>\r\n\r\n                    </div>\r\n                )\r\n            },\r\n            headerStyle: () => {\r\n                return { width: '120px', textAlign: 'center' };\r\n            }\r\n        },\r\n        {\r\n            text: \"Unit\",\r\n            dataField: \"\",\r\n            classes: () => \"\",\r\n            style: { minWidth: \"10vw\" },\r\n            formatter: (cellContent, row, key,) => {\r\n\r\n                return (<span style={{ justifyContent: 'center' }}>\r\n                    <C_Select\r\n                        id={`Unit${key}`}\r\n                        name=\"Unit\"\r\n                        isSearchable={true}\r\n                        defaultValue={row.defaultUnit}\r\n                        className=\"react-dropdown\"\r\n                        classNamePrefix=\"dropdown\"\r\n                        options={row.UnitOptions}\r\n                        styles={{\r\n                            menu: provided => ({ ...provided, zIndex: 2 })\r\n                        }}\r\n                        onChange={(event) => {\r\n                            row.defaultUnit = event\r\n                        }}\r\n                    />\r\n                </span>)\r\n            }\r\n        },\r\n    ];\r\n\r\n    useEffect(() => {\r\n        if ((postMsg.Status === true) && (postMsg.StatusCode === 200)) {\r\n            dispatch(saveStockEntrySuccess({ Status: false }))\r\n            setTableArr([])\r\n            customAlert({\r\n                Type: 1,\r\n                Message: postMsg.Message,\r\n                RedirectPath: url.STOCK_ENTRY,\r\n            })\r\n        }\r\n        else if (postMsg.Status === true) {\r\n            dispatch(saveStockEntrySuccess({ Status: false }))\r\n            customAlert({\r\n                Type: 4,\r\n                Message: JSON.stringify(postMsg.Message),\r\n            })\r\n        }\r\n    }, [postMsg])\r\n\r\n    function ItemNameOnChange(e) {\r\n        setItemNameSelect(e)\r\n        setBatchCodeSelect('')\r\n        dispatch(getBatchCode_By_ItemID_Action({ itemId: e.value, partyId: _cfunc.loginPartyID() }));\r\n    }\r\n\r\n    const AddPartyHandler = async () => {\r\n\r\n        let isfound = TableArr.find(i => i.id === batchCodeSelect.value);\r\n        if (itemNameSelect === '') {\r\n            return customAlert({ Type: 4, Message: `Please Select ItemName` })\r\n\r\n        }\r\n        else if (batchCodeSelect === '') {\r\n            return customAlert({ Type: 4, Message: `Please Select Batch Code` })\r\n\r\n        }\r\n        else if (!(isfound === undefined)) {\r\n            return customAlert({ Type: 3, Message: \"This BatchCode Already Exist\" })\r\n        }\r\n\r\n        setBatchCodeSelect('');\r\n        setItemNameSelect('');\r\n        dispatch(getBatchCode_By_ItemID_Action_Success([]));\r\n\r\n        // Assuming TableArr is an array\r\n        const data = [...TableArr];\r\n\r\n        const BatchCodeFind = BatchCodeRedux.find(i => i.id === batchCodeSelect.value);\r\n\r\n        // Check if BatchCodeFind exists before constructing the object\r\n        if (BatchCodeFind) {\r\n\r\n            const defaultUnitOption = BatchCodeFind.UnitOptions.find(option => option.UnitName.includes(\"No\"));\r\n\r\n            data.push({\r\n                id: BatchCodeFind.id,\r\n                Item: BatchCodeFind.Item,\r\n                ItemName: BatchCodeFind.ItemName,\r\n                BatchCode: BatchCodeFind.BatchCode,\r\n                MRP: BatchCodeFind.MRP,\r\n                MRPID: BatchCodeFind.MRPID,\r\n                GSTID: BatchCodeFind.GSTID,\r\n                GSTPercentage: BatchCodeFind.GSTPercentage,\r\n                OriginalBaseUnitQuantity: BatchCodeFind.OriginalBaseUnitQuantity,\r\n                OriginalQtyUnitName: BatchCodeFind.UnitName,\r\n                UnitOptions: BatchCodeFind.UnitOptions.map(i => ({ value: i.Unit, label: i.UnitName })),\r\n                defaultUnit: defaultUnitOption ? { value: defaultUnitOption.Unit, label: defaultUnitOption.UnitName } : null,\r\n                BatchDate: BatchCodeFind.BatchDate,\r\n                Quantity: \"\"\r\n            });\r\n        }\r\n\r\n        setTableArr(data);\r\n    }\r\n\r\n    const SaveHandler = async (event) => {\r\n\r\n        event.preventDefault();\r\n\r\n        const btnId = event.target.id\r\n\r\n        const ReturnItems = TableArr.map((index) => {\r\n\r\n            return ({\r\n                \"Item\": index.Item,\r\n                \"Quantity\": index.Quantity,\r\n                \"MRP\": index.MRPID,\r\n                \"Unit\": index.defaultUnit.value,\r\n                \"GST\": index.GSTID,\r\n                \"MRPValue\": index.MRP,\r\n                \"GSTPercentage\": index.GSTPercentage,\r\n                \"BatchDate\": index.BatchDate,\r\n                \"BatchCode\": index.BatchCode,\r\n                \"BatchCodeID\": index.id\r\n            })\r\n        })\r\n\r\n        const filterData = ReturnItems.filter((i) => {\r\n            return i.Quantity > 0;\r\n        });\r\n\r\n        if (filterData.length === 0) {\r\n            customAlert({\r\n                Type: 4,\r\n                Message: \" Please Enter One Item Quantity\"\r\n            })\r\n            return _cfunc.btnIsDissablefunc({ btnId, state: false })\r\n        }\r\n\r\n        try {\r\n            const jsonBody = JSON.stringify({\r\n                \"PartyID\": _cfunc.loginPartyID(),\r\n                \"CreatedBy\": _cfunc.loginUserID(),\r\n                \"Date\": currentDate_ymd,\r\n                \"Mode\": subPageMode === url.STOCK_ADJUSTMENT ? 2 : 3,\r\n                \"StockItems\": filterData\r\n            })\r\n\r\n            dispatch(saveStockEntryAction({ jsonBody, btnId }));\r\n        }\r\n        catch (e) { _cfunc.btnIsDissablefunc({ btnId, state: false }) }\r\n    };\r\n\r\n    if (!(userPageAccessState === '')) {\r\n        return (\r\n            <React.Fragment>\r\n                <MetaTags>{_cfunc.metaTagLabel(userPageAccessState)}</MetaTags>\r\n                <div className=\"page-content\">\r\n\r\n                    <form noValidate>\r\n                        <div className=\"px-3 c_card_filter header text-black mb-1\" >\r\n\r\n                            <Row>\r\n                                <Col sm=\"6\">\r\n                                    <FormGroup className=\"row mt-2\" >\r\n                                        <Label className=\"col-sm-1 p-2\"\r\n                                            style={{ width: \"115px\", marginRight: \"0.4cm\" }}>ItemName </Label>\r\n                                        <Col sm=\"7\">\r\n                                            <C_Select\r\n                                                id=\"ItemName \"\r\n                                                name=\"ItemName\"\r\n                                                value={itemNameSelect}\r\n                                                isSearchable={true}\r\n                                                isLoading={partyItemListLoading}\r\n                                                className=\"react-dropdown\"\r\n                                                classNamePrefix=\"dropdown\"\r\n                                                styles={{\r\n                                                    menu: provided => ({ ...provided, zIndex: 2 })\r\n                                                }}\r\n                                                options={ItemList_Options}\r\n                                                onChange={(e) => { ItemNameOnChange(e) }}\r\n                                            />\r\n                                        </Col>\r\n                                    </FormGroup>\r\n                                </Col >\r\n\r\n                                <Col sm=\"6\">\r\n                                    <FormGroup className=\" row mt-2 \" >\r\n                                        <Label className=\"col-sm-1 p-2\"\r\n                                            style={{ width: \"115px\", marginRight: \"0.4cm\" }}>Batch Code</Label>\r\n                                        <Col sm=\"7\">\r\n                                            <C_Select\r\n                                                id=\"batchCode \"\r\n                                                name=\"batchCode\"\r\n                                                value={batchCodeSelect}\r\n                                                isSearchable={true}\r\n                                                isLoading={batchCodeDropLoading}\r\n                                                className=\"react-dropdown\"\r\n                                                classNamePrefix=\"dropdown\"\r\n                                                styles={{\r\n                                                    menu: provided => ({ ...provided, zIndex: 2 })\r\n                                                }}\r\n                                                options={BatchCode_Options}\r\n                                                onChange={(e) => { setBatchCodeSelect(e) }}\r\n                                            />\r\n                                        </Col>\r\n\r\n                                        <Col sm=\"1\" className=\"mx-6 mt-1\">\r\n                                            {\r\n                                                < Button type=\"button\" color=\"btn btn-outline-primary border-1 font-size-11 text-center\"\r\n                                                    onClick={(e,) => AddPartyHandler(e, \"add\")}\r\n                                                > Add</Button>\r\n                                            }\r\n\r\n                                        </Col>\r\n                                    </FormGroup>\r\n                                </Col >\r\n\r\n                            </Row>\r\n                        </div>\r\n\r\n                        <ToolkitProvider\r\n                            keyField={\"id\"}\r\n                            data={TableArr}\r\n                            columns={pagesListColumns}\r\n                            search\r\n                        >\r\n                            {(toolkitProps,) => (\r\n                                <React.Fragment>\r\n                                    <Row>\r\n                                        <Col xl=\"12\">\r\n                                            <div className=\"table-responsive table\" style={{ minHeight: \"45vh\" }}>\r\n                                                <BootstrapTable\r\n                                                    keyField={\"id\"}\r\n                                                    id=\"table_Arrow\"\r\n                                                    classes={\"table  table-bordered table-hover \"}\r\n                                                    noDataIndication={\r\n                                                        <div className=\"text-danger text-center \">\r\n                                                            Items Not available\r\n                                                        </div>\r\n                                                    }\r\n                                                    onDataSizeChange={(e) => {\r\n                                                        _cfunc.tableInputArrowUpDounFunc(\"#table_Arrow\")\r\n                                                    }}\r\n                                                    {...toolkitProps.baseProps}\r\n                                                />\r\n                                                {mySearchProps(toolkitProps.searchProps)}\r\n                                            </div>\r\n                                        </Col>\r\n                                    </Row>\r\n\r\n                                </React.Fragment>\r\n                            )}\r\n                        </ToolkitProvider>\r\n\r\n                        {\r\n                            TableArr.length > 0 ?\r\n                                <FormGroup>\r\n                                    <Col sm={2} style={{ marginLeft: \"-40px\" }} className={\"row save1\"}>\r\n                                        <SaveButton\r\n                                            pageMode={pageMode}\r\n                                            loading={saveBtnloading}\r\n                                            onClick={SaveHandler}\r\n                                            userAcc={userPageAccessState}\r\n                                        />\r\n\r\n                                    </Col>\r\n                                </FormGroup >\r\n                                : null\r\n                        }\r\n\r\n                    </form >\r\n                </div >\r\n            </React.Fragment >\r\n        );\r\n    }\r\n    else {\r\n        return (\r\n            <React.Fragment></React.Fragment>\r\n        )\r\n    }\r\n};\r\n\r\nexport default StockAdjustment\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\pages\\ActivityLog\\TransactionLog.js",["4489","4490","4491","4492","4493","4494","4495","4496","4497","4498","4499","4500","4501"],"import React, { useMemo, useState } from 'react'\r\nimport { useEffect } from 'react';\r\nimport BootstrapTable from 'react-bootstrap-table-next';\r\nimport ToolkitProvider from 'react-bootstrap-table2-toolkit';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { Col, FormGroup, Label, Row } from 'reactstrap';\r\nimport { Go_Button, PageLoadingSpinner } from '../../components/Common/CommonButton';\r\nimport { breadcrumbReturnFunc, convertDateTime_dmy, convertDateTime_ydm, date_dmy_func, getDateTime_dmy, loginEmployeeID } from '../../components/Common/CommonFunction';\r\nimport { mySearchProps } from '../../components/Common/SearchBox/MySearch';\r\nimport { C_DatePicker, C_Select, C_TimePicker } from '../../CustomValidateForm';\r\nimport { showToastAlert } from '../../helpers/axios_Config';\r\nimport { commonPartyDropdown_API, TransactionLog_Get_User_Api, TransactionLog_Go_Btn_Api, TransactionLog_transactionType_Api } from '../../helpers/backend_helper';\r\nimport { BreadcrumbShowCountlabel } from '../../store/actions';\r\n\r\nconst TransactionLog = () => {\r\n    const dispatch = useDispatch();\r\n    const history = useHistory()\r\n\r\n\r\n\r\n    const [userPageAccessState, setUserAccState] = useState('');\r\n    const [transactionTypeSelect, setTransactionTypeSelect] = useState([]);\r\n    const [userSelect, setUserSelect] = useState([]);\r\n    const [partySelect, setPartySelect] = useState([]);\r\n    const [formDateSelect, setFormDateSelect] = useState(()=>getDateTime_dmy(1));//offSetTime 1 hour earlier\r\n    const [toDateSelect, setToDateSelect] = useState(getDateTime_dmy);\r\n\r\n    const [goBtnloading, setGoBtnloading] = useState(false);\r\n    const [tableData, setTableData] = useState([]);\r\n    const [transctionTypeReux, setTransctionTypeReux] = useState([]);\r\n    const [usersRedux, setUsersRedux] = useState([]);\r\n    const [partyRedux, setPartyRedux] = useState([]);\r\n\r\n    //Access redux store Data /  'save_ModuleSuccess' action data\r\n    const { userAccess } = useSelector((state) => ({ userAccess: state.Login.RoleAccessUpdateData }));\r\n\r\n    useEffect(async () => {//initioal Api\r\n        const resp1 = await TransactionLog_transactionType_Api()\r\n        if (resp1.StatusCode === 200) {\r\n            setTransctionTypeReux(resp1.Data)\r\n        }\r\n        const resp2 = await TransactionLog_Get_User_Api()\r\n        if (resp2.StatusCode === 200) {\r\n            setUsersRedux(resp2.Data)\r\n        }\r\n        const resp3 = await commonPartyDropdown_API(loginEmployeeID())\r\n        if (resp3.StatusCode === 200) {\r\n            setPartyRedux(resp3.Data.map((item, key) => {\r\n                item[\"id\"] = key + 1\r\n                return item\r\n            }))\r\n        }\r\n    }, [])\r\n\r\n    const generateOptions = (sourceArray, labelField = \"Name\", valueField = \"id\") =>\r\n        [{ value: '', label: \"All\" }, ...sourceArray.map(item => ({ value: item[valueField], label: item[labelField] }))];\r\n\r\n    const transactionTypeOptions = useMemo(() => generateOptions(transctionTypeReux), [transctionTypeReux])\r\n    const userOptions = useMemo(() => generateOptions(usersRedux), [usersRedux]);\r\n    const partyOptions = useMemo(() => generateOptions(partyRedux), [partyRedux]);\r\n\r\n    // userAccess useEffect\r\n    useEffect(() => {\r\n        let locationPath = history.location.pathname;\r\n        let userAcc = userAccess.find((inx) => {\r\n            return (`/${inx.ActualPagePath}` === locationPath)\r\n        })\r\n        if (userAcc) {\r\n            setUserAccState(userAcc);\r\n            breadcrumbReturnFunc({ dispatch, userAcc });\r\n        };\r\n    }, [userAccess]);\r\n\r\n    const tableColumns = [\r\n        {\r\n            text: \"Transaction Date\",\r\n            dataField: \"TranasactionDate\",\r\n            sort: true\r\n        }, {\r\n            text: \"User Name\",\r\n            dataField: \"UserName\",\r\n            sort: true\r\n        }, {\r\n            text: \"IP Address\",\r\n            dataField: \"IPaddress\",\r\n            sort: true\r\n        },\r\n        {\r\n            text: \"Transaction Type\",\r\n            dataField: \"TransactionType\",\r\n            sort: true\r\n        },\r\n        // {\r\n        //     text: \"Transaction Id\",\r\n        //     dataField: \"TransactionID\",\r\n        //     sort: true\r\n\r\n        // },\r\n        {\r\n            text: \"Transaction Detail\",\r\n            dataField: \"TransactionDetails\",\r\n            sort: true\r\n\r\n        },\r\n        {\r\n            text: \"Party Name\",\r\n            dataField: \"PartyName\",\r\n            sort: true\r\n        },]\r\n\r\n    const goButtonHandler = async () => {\r\n        try {\r\n            setGoBtnloading(true);\r\n            setTableData([])\r\n            const jsonBody = JSON.stringify({\r\n                \"FromDate\": convertDateTime_ydm(formDateSelect),\r\n                \"ToDate\": convertDateTime_ydm(toDateSelect),\r\n                \"TransactionType\": transactionTypeSelect.map(item => item.value).join(','),\r\n                \"User\": userSelect.map(item => item.value).join(','),\r\n                \"Party\": partySelect.map(item => item.value).join(','),\r\n            })\r\n            const resp3 = await TransactionLog_Go_Btn_Api({ jsonBody })\r\n            setGoBtnloading(false);\r\n            if (resp3.StatusCode === 200) {\r\n\r\n                setTableData(resp3.Data);\r\n                dispatch(BreadcrumbShowCountlabel(`Count : ${resp3.Data.length}`))\r\n            } else if (!(resp3.StatusCode === 406)) {\r\n                showToastAlert()\r\n            }\r\n        } catch (w) { setGoBtnloading(false); }\r\n\r\n    }\r\n\r\n\r\n    const HeaderContent = () => {\r\n        return (\r\n            <div className=\"px-2 c_card_filter text-black\">\r\n                <div className=\"row\">\r\n                    <Col sm=\"3\">\r\n                        <FormGroup>\r\n                            <div className=\"d-flex align-items-center\">\r\n                                <Label className=\"col-sm-5 p-2\" htmlFor=\"fromdate\">\r\n                                    From Date\r\n                                </Label>\r\n                                <Col sm=\"7\">\r\n                                    <C_TimePicker\r\n                                        id=\"fromdate\"\r\n                                        value={formDateSelect}\r\n                                        onChange={(obj, selectedDate) => {\r\n                                            setFormDateSelect(selectedDate)\r\n                                        }}\r\n                                        placeholder=\"Select From Date\"\r\n                                        name=\"fromdate\"\r\n                                    />\r\n                                </Col>\r\n                            </div>\r\n                        </FormGroup>\r\n                    </Col>\r\n                    <Col sm=\"3\" >\r\n                        <FormGroup >\r\n                            <div className=\"d-flex align-items-center\">\r\n                                <Label className=\"col-sm-5 p-2\" htmlFor=\"todate\">\r\n                                    To Date\r\n                                </Label>\r\n                                <Col sm=\"7\">\r\n                                    <C_TimePicker\r\n                                        id=\"todate\"\r\n                                        name=\"todate\"\r\n                                        value={toDateSelect}\r\n                                        onChange={(obj, selectedDate) => setToDateSelect(selectedDate)}\r\n                                        placeholder=\"Select To Date\"\r\n                                    />\r\n                                </Col>\r\n                            </div>\r\n                        </FormGroup>\r\n                    </Col>\r\n                    {/* <Col sm=\"3\">\r\n                        <FormGroup>\r\n                            <div className=\"d-flex align-items-center\">\r\n                                <Label className=\"col-sm-5 p-2\" htmlFor=\"fromtime\">\r\n                                    From Time\r\n                                </Label>\r\n                                <Col sm=\"7\">\r\n                                    <C_TimePicker\r\n                                        id=\"fromtime\"\r\n                                        value={formDateSelect}\r\n                                        onChange={(selectedDate) => setFormDateSelect(selectedDate)}\r\n                                        placeholder=\"Select from time\"\r\n                                        name=\"fromtime\"\r\n                                    />\r\n                                </Col>\r\n                            </div>\r\n                        </FormGroup>\r\n                    </Col>\r\n                    <Col sm=\"3\" >\r\n                        <FormGroup >\r\n                            <div className=\"d-flex align-items-center\">\r\n                                <Label className=\"col-sm-5 p-2\" htmlFor=\"totime\">\r\n                                    To Time\r\n                                </Label>\r\n                                <Col sm=\"7\">\r\n                                    <C_TimePicker\r\n                                        id=\"totime\"\r\n                                        name=\"totime\"\r\n                                        value={toDateSelect}\r\n                                        onChange={(selectedDate,a,b,c) => {\r\n                                            debugger\r\n                                            setToDateSelect(selectedDate)}}\r\n                                        placeholder=\"Select To time\"\r\n                                    />\r\n                                </Col>\r\n                            </div>\r\n                        </FormGroup>\r\n                    </Col> */}\r\n                </div>\r\n                <div className=\"row\">\r\n                    <Col sm=\"3\" >\r\n                        <FormGroup>\r\n                            <div className=\"d-flex align-items-center\">\r\n                                <Label className=\"col-sm-5 p-2\" htmlFor=\"transactionType\">\r\n                                    Transaction Type\r\n                                </Label>\r\n                                <Col sm=\"7\">\r\n                                    <C_Select\r\n                                        id=\"transactionType\"\r\n                                        placeholder=\"Select Transaction\"\r\n                                        classNamePrefix=\"select2-Customer\"\r\n                                        isMulti\r\n                                        value={transactionTypeSelect}\r\n                                        onChange={(e => setTransactionTypeSelect(e))}\r\n                                        options={transactionTypeOptions}\r\n                                        styles={{\r\n                                            menu: (provided) => ({ ...provided, zIndex: 2 }),\r\n                                        }}\r\n                                    />\r\n                                </Col>\r\n                            </div>\r\n                        </FormGroup>\r\n                    </Col>\r\n                    <Col sm=\"3\" >\r\n                        <FormGroup >\r\n                            <div className=\"d-flex align-items-center\">\r\n                                <Label className=\"col-sm-5 p-2\" htmlFor=\"userName\">\r\n                                    User Name\r\n                                </Label>\r\n                                <Col sm=\"7\">\r\n                                    <C_Select\r\n                                        id=\"userName\"\r\n                                        placeholder=\"Select User\"\r\n                                        classNamePrefix=\"select2-Customer\"\r\n                                        isMulti\r\n                                        value={userSelect}\r\n                                        onChange={(e => setUserSelect(e))}\r\n                                        options={userOptions}\r\n                                        styles={{\r\n                                            menu: (provided) => ({ ...provided, zIndex: 2 }),\r\n                                        }}\r\n                                    />\r\n                                </Col>\r\n                            </div>\r\n                        </FormGroup>\r\n                    </Col>\r\n                    <Col sm=\"5\" >\r\n                        <FormGroup >\r\n                            <div className=\"d-flex align-items-center\">\r\n                                <Label className=\"col-sm-3 p-2\" htmlFor=\"party\">\r\n                                    Party\r\n                                </Label>\r\n                                <Col sm=\"5\">\r\n                                    <C_Select\r\n                                        id=\"party\"\r\n                                        placeholder=\"Select Party\"\r\n                                        classNamePrefix=\"select2-Customer\"\r\n                                        isMulti\r\n                                        value={partySelect}\r\n                                        options={partyOptions}\r\n                                        onChange={(e => setPartySelect(e))}\r\n                                        styles={{\r\n                                            menu: (provided) => ({ ...provided, zIndex: 2 }),\r\n                                        }}\r\n                                    />\r\n                                </Col>\r\n                            </div>\r\n                        </FormGroup>\r\n                    </Col>\r\n                    <Col sm=\"1\" >\r\n                        <Go_Button\r\n                            loading={goBtnloading}\r\n                            onClick={goButtonHandler} />\r\n                    </Col>\r\n                </div>\r\n            </div>\r\n        );\r\n    };\r\n\r\n    return (\r\n        <React.Fragment>\r\n            {/* <PageLoadingSpinner isLoading={goBtnloading || !pageField} /> */}\r\n            <div className=\"page-content\">\r\n                {/* <PartyDropdown_Common pageMode={pageMode}\r\n                    goButtonHandler={partySelectButtonHandler}\r\n                    changeButtonHandler={partyOnChngeButtonHandler} /> */}\r\n                <HeaderContent />\r\n                <ToolkitProvider\r\n                    keyField={\"id\"}\r\n                    // defaultSorted={defaultSorted}\r\n                    data={tableData}\r\n                    columns={tableColumns}\r\n                    search\r\n                >\r\n                    {(toolkitProps,) => (\r\n                        <React.Fragment>\r\n                            <Row>\r\n                                <Col xl=\"12\">\r\n                                    <div className=\"table-responsive table\" style={{ minHeight: \"45vh\" }}>\r\n                                        <BootstrapTable\r\n                                            keyField={\"id\"}\r\n                                            id=\"table_Arrow\"\r\n                                            classes={\"table  table-bordered table-hover\"}\r\n                                            noDataIndication={\r\n                                                <div className=\"text-danger text-center \">\r\n                                                    Record Not available\r\n                                                </div>\r\n                                            }\r\n                                            onDataSizeChange={({ dataSize }) => {\r\n                                                dispatch(BreadcrumbShowCountlabel(`Count : ${dataSize}`))\r\n                                            }}\r\n                                            {...toolkitProps.baseProps}\r\n                                        />\r\n                                        {mySearchProps(toolkitProps.searchProps)}\r\n                                    </div>\r\n                                </Col>\r\n                            </Row>\r\n\r\n                        </React.Fragment>\r\n                    )}\r\n                </ToolkitProvider>\r\n            </div>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default TransactionLog\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\CustomValidateForm\\C_TimePicker.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Inventory\\StockAdjustmentRedux\\saga.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Inventory\\StockAdjustmentRedux\\action.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Inventory\\StockAdjustmentRedux\\actionType.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Inventory\\StockAdjustmentRedux\\reducer.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\Reports\\ItemSaleReport\\HeaderSection.js",["4502","4503","4504","4505","4506","4507","4508","4509","4510","4511","4512","4513","4514","4515","4516","4517","4518","4519","4520","4521","4522","4523","4524","4525"],"import React, { useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { Col, FormGroup, Input, Label, Row } from \"reactstrap\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { C_Button, Change_Button, Go_Button } from \"../../components/Common/CommonButton\";\r\nimport { C_DatePicker, C_Select } from \"../../CustomValidateForm\";\r\nimport * as _cfunc from \"../../components/Common/CommonFunction\";\r\nimport { mode, pageId, url } from \"../../routes/index\"\r\nimport { MetaTags } from \"react-meta-tags\";\r\nimport { BreadcrumbShowCountlabel, GetVenderSupplierCustomer, GetVenderSupplierCustomerSuccess, commonPageField, commonPageFieldSuccess, getBaseUnit_ForDropDown, getGroupList, getItemList, getSubGroupList, getSubGroupListSuccess, get_Group_By_GroupType_ForDropDown, get_Sub_Group_By_Group_ForDropDown, get_Sub_Group_By_Group_ForDropDown_Success } from \"../../store/actions\";\r\nimport { GetRoutesList, GetRoutesListSuccess } from \"../../store/Administrator/RoutesRedux/actions\";\r\nimport { getPartyTypelist, getPartyTypelistSuccess } from \"../../store/Administrator/PartyTypeRedux/action\";\r\nimport { ItemSaleGoButton_API, ItemSaleGoButton_API_Success, Items_On_Group_And_Subgroup_API, Items_On_Group_And_Subgroup_API_Success, SupplierOnPartyType_API, SupplierOnPartyType_API_Success } from \"../../store/Report/ItemSaleReport/action\";\r\nimport \"../ItemSaleReport/ItemSaleCSS.scss\";\r\nimport { useMemo } from \"react\";\r\nimport * as initail from \"./hardcodeDetails\";\r\nimport { ItemSaleContext } from \"./ContextDataProvider\";\r\nimport { ExcelButtonFunc } from \"./SortAndExcelDownloadFunc\";\r\n\r\nconst HeaderSection = (props) => {\r\n\r\n    const states = ItemSaleContext()\r\n\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n    const isSCMParty = _cfunc.loginIsSCMParty();\r\n\r\n    const { goBtnLoading,\r\n        ItemSaleReportGobtn,\r\n        userAccess,\r\n        supplierLoading,\r\n        supplier,\r\n        RoutesList,\r\n        routesDropLoading,\r\n        PartyTypes,\r\n        customerDropdown,\r\n        customerDropLoading,\r\n        ItemDropdownloading,\r\n        ItemNameList,\r\n        productLoading,\r\n        productDropdown,\r\n        subProductLoading,\r\n        subProductDropdown,\r\n        getSubProductbyProduct,\r\n        supplierListLoading,\r\n        supplierListOnPartyType } = useSelector(\r\n            (state) => ({\r\n                goBtnLoading: state.ItemSaleReportReducer.goBtnLoading,\r\n                ItemSaleReportGobtn: state.ItemSaleReportReducer.ItemSaleReportGobtn,\r\n\r\n                supplierLoading: (state.CommonAPI_Reducer.SSDD_ListLoading\r\n                    || state.ItemSaleReportReducer.supplierListLoading),\r\n\r\n                supplier: state.CommonPartyDropdownReducer.commonPartyDropdown,\r\n                // supplierListLoading:state.ItemSaleReportReducer.supplierListLoading ,\r\n                supplierListOnPartyType: state.ItemSaleReportReducer.supplierList,\r\n\r\n                RoutesList: state.RoutesReducer.RoutesList,\r\n                routesDropLoading: state.RoutesReducer.goBtnLoading,\r\n\r\n                PartyTypes: state.PartyTypeReducer.ListData,\r\n\r\n                customerDropdown: state.CommonAPI_Reducer.vendorSupplierCustomer,\r\n                customerDropLoading: state.CommonAPI_Reducer.vendorSupplierCustomerLoading,\r\n\r\n                ItemDropdownloading: state.ItemSaleReportReducer.itemListLoading,\r\n                ItemNameList: state.ItemSaleReportReducer.itemList,\r\n\r\n                productLoading: state.GroupReducer.goBtnLoading,\r\n                productDropdown: state.GroupReducer.groupList,\r\n\r\n                subProductLoading: state.SubGroupReducer.goBtnLoading,\r\n                subProductDropdown: state.SubGroupReducer.SubgroupList,\r\n                getSubProductbyProduct: state.ItemMastersReducer.SubGroupList,\r\n\r\n                userAccess: state.Login.RoleAccessUpdateData,\r\n            })\r\n        );\r\n\r\n    const { fromdate, todate, } = states.hederFilters;\r\n\r\n    const location = { ...history.location }\r\n    const hasShowModal = props.hasOwnProperty(mode.editValue)\r\n\r\n    // userAccess useEffect\r\n    useEffect(() => {\r\n        let userAcc = null;\r\n        let locationPath = location.pathname;\r\n        if (hasShowModal) {\r\n            locationPath = props.masterPath;\r\n        };\r\n        userAcc = userAccess.find((inx) => {\r\n            return (`/${inx.ActualPagePath}` === locationPath)\r\n        })\r\n        if (userAcc) {\r\n            states.setUserAccState(userAcc)\r\n            _cfunc.breadcrumbReturnFunc({ dispatch, userAcc });\r\n        };\r\n    }, [userAccess])\r\n\r\n    useEffect(() => {\r\n        dispatch(commonPageFieldSuccess(null));\r\n        dispatch(commonPageField(pageId.ITEM_SALE_REPORT));\r\n        dispatch(GetRoutesList());\r\n        dispatch(getPartyTypelist());\r\n        dispatch(GetVenderSupplierCustomer({ subPageMode: url.ITEM_SALE_REPORT, RouteID: 0 }));\r\n        dispatch(getGroupList());\r\n        dispatch(getSubGroupList())\r\n        dispatch(Items_On_Group_And_Subgroup_API({ \"Group\": 0, \"SubGroup\": 0 }));\r\n        dispatch(BreadcrumbShowCountlabel(`Count:0 ₹ 0`))\r\n        return () => {\r\n            dispatch(commonPageFieldSuccess(null));\r\n            dispatch(getPartyTypelistSuccess([]));\r\n            dispatch(ItemSaleGoButton_API_Success([]));\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (ItemSaleReportGobtn.length > 0) {\r\n            states.setInitaialBaseData(ItemSaleReportGobtn);\r\n            dispatch(ItemSaleGoButton_API_Success([]));\r\n            dataManpulationFunction(ItemSaleReportGobtn);\r\n\r\n        }\r\n    }, [ItemSaleReportGobtn]);\r\n\r\n    const subProductDropdownOptions = useMemo(() => {\r\n\r\n        let options = [];\r\n        if (states.productSelect[0].value === 0) {\r\n            options = subProductDropdown.map(i => ({\r\n                value: i.id,\r\n                label: i.Name,\r\n            }));\r\n        } else {\r\n            options = getSubProductbyProduct.map(i => ({\r\n                value: i.id,\r\n                label: i.Name,\r\n            }));\r\n        }\r\n        return options;\r\n    }, [states.productSelect, subProductDropdown, getSubProductbyProduct]);\r\n\r\n    const supplierDropdownOptions = useMemo(() => {\r\n        let options = [];\r\n        if (states.channelFromSelect.value === 0) {\r\n            options = supplier.map(i => ({\r\n                value: i.id,\r\n                label: i.Name,\r\n            }));\r\n        } else {\r\n            options = supplierListOnPartyType.map(i => ({\r\n                value: i.id,\r\n                label: i.Name,\r\n            }));\r\n        }\r\n        options.unshift(initail.INITIAL_ZERO);\r\n        return options;\r\n    }, [states.channelFromSelect, supplier, supplierListOnPartyType]);\r\n\r\n    const generateOptions = (sourceArray, labelField = \"Name\", valueField = \"id\") =>\r\n        [initail.INITIAL_ZERO, ...sourceArray.map(item => ({ value: item[valueField], label: item[labelField] }))];\r\n\r\n    const channelFromDropdownOptions = useMemo(() => generateOptions(PartyTypes), [PartyTypes]);\r\n\r\n    const generateOptions1 = (sourceArray, labelField = \"Name\", valueField = \"id\") =>\r\n        [...sourceArray.map(item => ({ value: item[valueField], label: item[labelField] }))];\r\n\r\n    const channelToDropdownOptions = useMemo(() => generateOptions1(PartyTypes), [PartyTypes]);\r\n    const routeDropdownOptions = useMemo(() => generateOptions1(RoutesList.filter(route => route.IsActive)), [RoutesList]);\r\n    const itemNameDropdownOptions = useMemo(() => generateOptions1(ItemNameList), [ItemNameList]);\r\n    const productDropdownOptions = useMemo(() => generateOptions1(productDropdown), [productDropdown]);\r\n    const customerDropdownOptions = useMemo(() => generateOptions1(customerDropdown), [customerDropdown]);\r\n\r\n    function fromdateOnchange(e, date) {\r\n        let newObj = { ...states.hederFilters }\r\n        newObj.fromdate = date\r\n        states.setHederFilters(newObj);\r\n        states.setTableData([]);\r\n        states.setInitaialBaseData([]);\r\n    }\r\n\r\n    function todateOnchange(e, date) {\r\n        let newObj = { ...states.hederFilters }\r\n        newObj.todate = date\r\n        states.setHederFilters(newObj);\r\n        states.setTableData([]);\r\n        states.setInitaialBaseData([]);\r\n    }\r\n\r\n    function ChannelFromDropdown_Onchange(e) {\r\n\r\n        states.setChannelFromSelect(e)\r\n        states.setSupplierSelect(initail.INITIAL_ZERO)\r\n        dispatch(SupplierOnPartyType_API({ employeeID: _cfunc.loginEmployeeID(), channelFromID: e.value }))\r\n    }\r\n\r\n    function SupplierOnChange(event) {\r\n\r\n        states.setSupplierSelect(event)\r\n        states.setRouteSelect([{ value: 0, label: \"All\" }])\r\n        states.setCustomerSelect([{ value: 0, label: \"All\" }])\r\n        states.setTableData([]);\r\n        states.setInitaialBaseData([]);\r\n        dispatch(GetVenderSupplierCustomerSuccess([]))\r\n        dispatch(GetRoutesListSuccess([]))\r\n        if (event.value > 0) {\r\n            dispatch(GetVenderSupplierCustomer({ subPageMode: url.ITEM_SALE_REPORT, PartyID: event.value, RouteID: '' }))\r\n            const jsonBody = JSON.stringify({\r\n                CompanyID: _cfunc.loginCompanyID(),\r\n                PartyID: event.value,\r\n            });\r\n            dispatch(GetRoutesList(jsonBody));\r\n        }\r\n    }\r\n\r\n    function ChannelToOnchange(e = []) {\r\n\r\n        if (e.length === 0) {\r\n            e = [{ value: 0, label: \"All\" }]\r\n        } else {\r\n            e = e.filter(i => (i.value > 0))\r\n        }\r\n        states.setChannelToSelect(e)\r\n    }\r\n\r\n    function RouteOnChange(e = []) {\r\n\r\n        states.setCustomerSelect([{ value: 0, label: \"All\" }])\r\n        dispatch(GetVenderSupplierCustomerSuccess([]))\r\n\r\n        if (e.length === 0) {\r\n            e = [{ value: 0, label: \"All\" }]\r\n            dispatch(GetVenderSupplierCustomer({ subPageMode: url.ITEM_SALE_REPORT, RouteID: \"\", PartyID: states.supplierSelect.value }))\r\n        }\r\n        else {\r\n\r\n            e = e.filter(i => (i.value > 0));\r\n            if (e.length === 1) {\r\n                dispatch(GetVenderSupplierCustomer({ subPageMode: url.ITEM_SALE_REPORT, RouteID: e[0].value, PartyID: states.supplierSelect.value }))\r\n            } else {\r\n                states.setCustomerSelect(initail.INITIAL_ARRAY)\r\n                dispatch(GetVenderSupplierCustomerSuccess([]))\r\n            }\r\n        }\r\n        states.setRouteSelect(e)\r\n    }\r\n\r\n    function CustomerOnChange(e = []) {\r\n\r\n        if (e.length === 0) {\r\n            e = [{ value: 0, label: \"All\" }]\r\n        } else {\r\n            e = e.filter(i => (i.value > 0))\r\n        }\r\n        states.setCustomerSelect(e)\r\n    }\r\n\r\n    function ProductOnchange(e = []) {\r\n\r\n        dispatch(getSubGroupListSuccess([]));\r\n        dispatch(get_Sub_Group_By_Group_ForDropDown_Success([]));\r\n        dispatch(Items_On_Group_And_Subgroup_API_Success([]));\r\n        states.setSubProductSelect(initail.INITIAL_ARRAY)\r\n        states.setItemNameSelect(initail.INITIAL_ARRAY)\r\n\r\n        if (e.length === 0) {\r\n            e = [{ value: 0, label: \"All\" }]\r\n            dispatch(getGroupList());\r\n            dispatch(getSubGroupList());\r\n            dispatch(Items_On_Group_And_Subgroup_API({ \"Group\": 0, \"SubGroup\": 0 }));\r\n        } else {\r\n            e = e.filter(i => (i.value > 0))\r\n            if (e.length === 1) {\r\n                dispatch(get_Sub_Group_By_Group_ForDropDown(e[0].value))\r\n                dispatch(Items_On_Group_And_Subgroup_API({ \"Group\": e[0].value, \"SubGroup\": 0 }));\r\n\r\n            } else {\r\n                dispatch(get_Sub_Group_By_Group_ForDropDown_Success([]))\r\n                dispatch(Items_On_Group_And_Subgroup_API_Success([]))\r\n                states.setSubProductSelect(initail.INITIAL_ARRAY)\r\n                states.setItemNameSelect(initail.INITIAL_ARRAY)\r\n            }\r\n        }\r\n        states.setProductSelect(e)\r\n    }\r\n\r\n    function Sub_ProductOnChange(e = []) {\r\n\r\n        dispatch(Items_On_Group_And_Subgroup_API_Success([]));\r\n        states.setItemNameSelect(initail.INITIAL_ARRAY)\r\n\r\n        if (e.length === 0) {\r\n            e = [{ value: 0, label: \"All\" }]\r\n            dispatch(Items_On_Group_And_Subgroup_API({ \"Group\": 0, \"SubGroup\": 0 }));\r\n            states.setItemNameSelect(initail.INITIAL_ARRAY)\r\n        } else {\r\n            e = e.filter(i => (i.value > 0))\r\n            if (e.length === 1) {\r\n                dispatch(Items_On_Group_And_Subgroup_API({ \"Group\": 0, \"SubGroup\": e[0].value }))\r\n\r\n            } else {\r\n                dispatch(Items_On_Group_And_Subgroup_API_Success([]))\r\n                states.setItemNameSelect(initail.INITIAL_ARRAY)\r\n            }\r\n        }\r\n\r\n        states.setSubProductSelect(e)\r\n    }\r\n\r\n    function ItemOnChange(e = []) {\r\n        if (e.length === 0) {\r\n            e = [{ value: 0, label: \"All\" }]\r\n        } else {\r\n            e = e.filter(i => (i.value > 0))\r\n        }\r\n        states.setItemNameSelect(e)\r\n    }\r\n\r\n    function showAlsoOnChange(event) {\r\n        let isLastInvoice =\r\n            event.length > 0\r\n                ? [1, 5, 6, 7].includes(event[event.length - 1].value)\r\n                : false;\r\n\r\n        if (isLastInvoice) {\r\n            if (event.some((item) => [2, 4].includes(item.value))) {\r\n                event = event.filter((item) => ![2, 4].includes(item.value));\r\n            }\r\n            if (!event.some((item) => item.value === 1)) {\r\n                event.push(initail.SHOW_ALSO_OPTIONS[0]);\r\n            }\r\n        }\r\n\r\n        if (event.some((item) => [2, 4].includes(item.value))) {\r\n            if (event.some((item) => [1, 5, 6, 7].includes(item.value))) {\r\n                event = event.filter((item) => ![1, 5, 6, 7].includes(item.value));\r\n            }\r\n            if (!event.some((item) => item.value === 4)) {\r\n                event.push(initail.SHOW_ALSO_OPTIONS[3]);\r\n            }\r\n        }\r\n        states.setShowAlsoSelect(event);\r\n    }\r\n\r\n    function goButtonHandler() {\r\n        try {\r\n            const jsonBody = JSON.stringify({\r\n                \"FromDate\": fromdate,\r\n                \"ToDate\": todate,\r\n                \"PartyType\": states.supplierSelect.value > 0 ? 0 : states.channelFromSelect.value,\r\n                \"Party\": !(isSCMParty) ? _cfunc.loginPartyID() : states.supplierSelect.value\r\n            });\r\n            dispatch(ItemSaleGoButton_API({ jsonBody, btnId: url.ITEM_SALE_REPORT }))\r\n\r\n        } catch (error) { _cfunc.CommonConsole(error) }\r\n    }\r\n\r\n    function change_ButtonHandler(e) {\r\n        dispatch(ItemSaleGoButton_API_Success([]));\r\n        states.setTableData([]);\r\n        states.setInitaialBaseData([]);\r\n        dispatch(BreadcrumbShowCountlabel(`Count:0 ₹ 0`))\r\n    }\r\n\r\n    const dataManpulationFunction = async (baseData) => {\r\n        const { selectedColumns = [{}], manupulatedData = [], totalAmount } = await states.sortManipulationFunc(baseData);\r\n        states.setSelectedColumns(selectedColumns);\r\n        states.setTableData(manupulatedData);\r\n        let commaSeparateAmount = _cfunc.amountCommaSeparateFunc(Number(totalAmount).toFixed(2));\r\n        dispatch(BreadcrumbShowCountlabel(`Count:${manupulatedData.length} ₹ ${commaSeparateAmount}`));\r\n        return { selectedColumns, manupulatedData, totalAmount };\r\n    }\r\n\r\n    async function ExcelDownload() {\r\n        const { selectedColumns, manupulatedData } = await dataManpulationFunction(states.initaialBaseData);\r\n        ExcelButtonFunc({ selectedColumns, manupulatedData })\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <MetaTags>{_cfunc.metaTagLabel(states.userPageAccessState)}</MetaTags>\r\n\r\n            <div className=\"page-content\">\r\n                <div className=\"item-Sale-card_1 px-2 text-black mt-n1 \">\r\n                    <Row>\r\n                        <Col className=\"col col-11 mb-n1 mt-1\">\r\n                            <Row>\r\n                                <Col sm={3}>\r\n                                    <FormGroup className=\"mb-n3 row mt-1\">\r\n                                        <Input style={{ marginLeft: \"5px\", marginTop: \"10px\" }}\r\n                                            className=\"p-1\"\r\n                                            id=\"fromdate\"\r\n                                            type=\"checkbox\"\r\n                                            checked={states.fromDateCheckbox}\r\n                                            onClick={(e) => {\r\n                                                states.setFromDateCheckbox(e.target.checked)\r\n                                            }}\r\n                                        />\r\n                                        <Label className=\"col-sm-3 p-2\">FromDate</Label>\r\n                                        <Col sm={6}>\r\n                                            <C_DatePicker\r\n                                                name=\"FromDate\"\r\n                                                value={fromdate}\r\n                                                disabled={(states.tableData.length > 0) && true}\r\n                                                onChange={fromdateOnchange}\r\n                                            />\r\n                                        </Col>\r\n                                    </FormGroup>\r\n                                </Col>\r\n\r\n                                <Col sm={3} className=\"custom-to-date-col\">\r\n                                    <FormGroup className=\"mb-n3 row mt-1\">\r\n                                        <div style={{ marginLeft: \"1px\", marginTop: \"10px\", width: \"5px\", }}></div>\r\n                                        <Label className=\"col-sm-4 p-2\">ToDate</Label>\r\n                                        <Col>\r\n                                            <C_DatePicker\r\n                                                name=\"ToDate\"\r\n                                                value={todate}\r\n                                                disabled={(states.tableData.length > 0) && true}\r\n                                                onChange={todateOnchange}\r\n                                            />\r\n                                        </Col>\r\n                                    </FormGroup>\r\n                                </Col>\r\n\r\n\r\n                                <Col sm={3}>\r\n                                    <FormGroup className=\"mb-n3 row mt-1\">\r\n                                        <Input style={{ marginLeft: \"5px\", marginTop: \"10px\" }}\r\n                                            className=\"p-1\"\r\n                                            type=\"checkbox\"\r\n                                            id=\"channelFrom\"\r\n                                            checked={states.channelFromCheckbox}\r\n                                            onChange={(e) => { states.setChannelFromCheckbox(e.target.checked) }}\r\n                                        />\r\n                                        <Label className=\"col-sm-4 p-2\">Channel From</Label>\r\n                                        <Col>\r\n                                            <C_Select\r\n                                                value={states.channelFromSelect}\r\n                                                isSearchable={true}\r\n                                                className=\"react-dropdown\"\r\n                                                classNamePrefix=\"dropdown\"\r\n                                                isDisabled={(states.tableData.length > 0 || !(isSCMParty)) && true}\r\n                                                styles={{\r\n                                                    menu: provided => ({ ...provided, zIndex: 2 })\r\n                                                }}\r\n                                                options={channelFromDropdownOptions}\r\n                                                onChange={ChannelFromDropdown_Onchange}\r\n\r\n                                            />\r\n                                        </Col>\r\n                                    </FormGroup>\r\n                                </Col>\r\n\r\n                                <Col sm={3}>\r\n                                    <FormGroup className=\"mb-n3 row mt-1\">\r\n                                        <Input style={{ marginLeft: \"5px\", marginTop: \"10px\" }}\r\n                                            className=\"p-1\"\r\n                                            type=\"checkbox\"\r\n                                            id=\"supplier\"\r\n                                            checked={states.supplierCheckbox}\r\n                                            onChange={(e) => { states.setSupplierCheckbox(e.target.checked) }}\r\n                                        />\r\n                                        <Label className=\"col-sm-4 p-2\">Supplier</Label>\r\n                                        <Col>\r\n                                            <C_Select\r\n\r\n                                                value={!(isSCMParty) ? { label: _cfunc.loginPartyName() } : states.supplierSelect}\r\n                                                isSearchable={true}\r\n                                                isLoading={supplierLoading}\r\n                                                className=\"react-dropdown\"\r\n                                                classNamePrefix=\"dropdown\"\r\n                                                isDisabled={(states.tableData.length > 0 || !(isSCMParty)) && true}\r\n                                                styles={{\r\n                                                    menu: provided => ({ ...provided, zIndex: 2 })\r\n                                                }}\r\n                                                options={supplierDropdownOptions}\r\n                                                onChange={SupplierOnChange}\r\n                                            />\r\n                                        </Col>\r\n                                    </FormGroup>\r\n                                </Col>\r\n                            </Row>\r\n                        </Col>\r\n\r\n                        <Col sm=\"1\" className=\"mt-2 mb-1 \">\r\n                            {!(states.initaialBaseData.length > 0) ?\r\n                                <Go_Button\r\n                                    loading={goBtnLoading}\r\n                                    onClick={goButtonHandler}\r\n                                /> :\r\n                                <Change_Button onClick={change_ButtonHandler} />}\r\n                        </Col>\r\n                    </Row>\r\n                </div>\r\n\r\n                <div className=\"item-Sale-card_3 px-2 text-black mt-1 mb-1\">\r\n                    <Row className=\"mb-1\">\r\n                        <Col className=\"col col-11\">\r\n                            <Row>\r\n                                <Col sm={3}>\r\n                                    <FormGroup className=\" row mt-1 mb-n3\">\r\n                                        <Input style={{ marginLeft: \"5px\", marginTop: \"10px\" }}\r\n                                            className=\"p-1\"\r\n                                            type=\"checkbox\"\r\n                                            checked={states.channelToCheckbox}\r\n                                            onChange={(e) => { states.setChannelToCheckbox(e.target.checked) }}\r\n                                        />\r\n                                        <Label className=\"col-sm-3 p-2\">Channel to</Label>\r\n                                        <Col sm={6}>\r\n                                            <C_Select\r\n                                                value={states.channelToSelect}\r\n                                                isSearchable={true}\r\n                                                className=\"react-dropdown\"\r\n                                                classNamePrefix=\"dropdown\"\r\n                                                isMulti={true}\r\n                                                styles={{\r\n                                                    menu: provided => ({ ...provided, zIndex: 2 })\r\n                                                }}\r\n                                                options={channelToDropdownOptions}\r\n\r\n                                                onChange={(e) => { ChannelToOnchange(e) }}\r\n                                            />\r\n                                        </Col>\r\n                                    </FormGroup>\r\n                                </Col>\r\n\r\n                                <Col sm={3}>\r\n                                    <FormGroup className=\" row mt-1\">\r\n                                        <Input style={{ marginLeft: \"5px\", marginTop: \"10px\" }}\r\n                                            className=\"p-1\"\r\n                                            type=\"checkbox\"\r\n                                            checked={states.routeCheckbox}\r\n                                            onChange={(e) => { states.setRouteCheckbox(e.target.checked) }}\r\n                                        />\r\n                                        <Label className=\"col-sm-4 p-2\">Route</Label>\r\n                                        <Col>\r\n                                            <C_Select\r\n                                                classNamePrefix=\"react-select\"\r\n                                                value={states.routeSelect}\r\n                                                options={routeDropdownOptions}\r\n                                                // onChange={(e) => { states.setRouteSelect(e) }}\r\n                                                onChange={(e) => { RouteOnChange(e) }}\r\n                                                isMulti={true}\r\n                                                isLoading={routesDropLoading}\r\n                                                styles={{\r\n                                                    menu: provided => ({ ...provided, zIndex: 2 })\r\n                                                }}\r\n                                            />\r\n                                        </Col>\r\n                                    </FormGroup>\r\n                                </Col>\r\n\r\n                                <Col sm={3}>\r\n                                    <FormGroup className=\" row mt-1\">\r\n                                        <Input style={{ marginLeft: \"5px\", marginTop: \"10px\" }}\r\n                                            className=\"p-1\"\r\n                                            type=\"checkbox\"\r\n                                            checked={states.customerCheckbox}\r\n                                            onChange={(e) => { states.setCustomerCheckbox(e.target.checked) }}\r\n                                        />\r\n                                        <Label className=\"col-sm-4 p-2\">Customer</Label>\r\n\r\n                                        <Col>\r\n                                            <C_Select\r\n                                                value={states.customerSelect}\r\n                                                isSearchable={true}\r\n                                                isLoading={customerDropLoading}\r\n                                                isMulti={true}\r\n                                                className=\"react-dropdown\"\r\n                                                classNamePrefix=\"dropdown\"\r\n                                                styles={{\r\n                                                    menu: provided => ({ ...provided, zIndex: 2 })\r\n                                                }}\r\n                                                options={customerDropdownOptions}\r\n                                                onChange={(e) => { CustomerOnChange(e) }}\r\n\r\n                                            />\r\n                                        </Col>\r\n                                    </FormGroup>\r\n                                </Col>\r\n\r\n                                <Col sm={3}>\r\n                                    <FormGroup className=\" row mt-1\">\r\n                                        <div style={{ marginLeft: \"1px\", marginTop: \"10px\", width: \"5px\", }}></div>\r\n                                        <Label className=\"col-sm-4 p-2\">Show Also</Label>\r\n\r\n                                        <Col>\r\n                                            <C_Select\r\n                                                value={states.showAlsoSelect}\r\n                                                isSearchable={true}\r\n                                                isMulti={true}\r\n                                                className=\"react-dropdown\"\r\n                                                classNamePrefix=\"dropdown\"\r\n                                                styles={{\r\n                                                    menu: provided => ({ ...provided, zIndex: 2 })\r\n                                                }}\r\n                                                options={initail.SHOW_ALSO_OPTIONS}\r\n                                                onChange={showAlsoOnChange}\r\n\r\n                                            />\r\n                                        </Col>\r\n                                    </FormGroup>\r\n                                </Col>\r\n                            </Row>\r\n                        </Col>\r\n\r\n                        <Col sm=\"1\" className=\"mt-1 mb-1 \">\r\n                            {(states.initaialBaseData.length > 0) &&\r\n                                <C_Button\r\n                                    type=\"button\"\r\n                                    className=\"btn btn-success border-1 font-size-12 text-center\"\r\n                                    onClick={() => { dataManpulationFunction(states.initaialBaseData) }} // Example field, you can change it\r\n                                >\r\n                                    <span className=\"font-weight-bold\" style={{ fontWeight: \"bold\", fontSize: \"14px\" }}> Sort</span>\r\n                                </C_Button>\r\n                            }\r\n                        </Col>\r\n                    </Row>\r\n\r\n                    <Row>\r\n                        <Col className=\"col col-11\">\r\n                            <Row>\r\n                                <Col sm={3}>\r\n                                    <FormGroup className=\" row mt-2\">\r\n                                        <Input style={{ marginLeft: \"5px\", marginTop: \"10px\" }}\r\n                                            className=\"p-1\"\r\n                                            type=\"checkbox\"\r\n                                            checked={states.productCheckbox}\r\n                                            onChange={(e) => { states.setProductCheckbox(e.target.checked) }}\r\n                                        />\r\n                                        <Label className=\"col-sm-3 p-2\">Product</Label>\r\n                                        <Col sm={6}>\r\n                                            <C_Select\r\n                                                value={states.productSelect}\r\n                                                isSearchable={true}\r\n                                                isLoading={productLoading}\r\n                                                isMulti={true}\r\n                                                className=\"react-dropdown\"\r\n                                                classNamePrefix=\"dropdown\"\r\n                                                styles={{\r\n                                                    menu: provided => ({ ...provided, zIndex: 2 })\r\n                                                }}\r\n                                                options={productDropdownOptions}\r\n                                                onChange={ProductOnchange}\r\n\r\n                                            />\r\n                                        </Col>\r\n                                    </FormGroup>\r\n                                </Col>\r\n\r\n                                <Col sm={3}>\r\n                                    <FormGroup className=\" row mt-2\">\r\n                                        <Input style={{ marginLeft: \"5px\", marginTop: \"10px\" }}\r\n                                            className=\"p-1\"\r\n                                            type=\"checkbox\"\r\n                                            checked={states.subProductCheckbox}\r\n                                            onChange={(e) => { states.setSubProductCheckbox(e.target.checked) }}\r\n                                        />\r\n                                        <Label className=\"col-sm-4 p-2\">Sub Product</Label>\r\n                                        <Col>\r\n                                            <C_Select\r\n                                                value={states.subProductSelect}\r\n                                                isSearchable={true}\r\n                                                isMulti={true}\r\n                                                isLoading={subProductLoading}\r\n                                                className=\"react-dropdown\"\r\n                                                classNamePrefix=\"dropdown\"\r\n                                                styles={{\r\n                                                    menu: provided => ({ ...provided, zIndex: 2 })\r\n                                                }}\r\n                                                options={subProductDropdownOptions}\r\n                                                onChange={(e) => { Sub_ProductOnChange(e) }}\r\n                                            />\r\n                                        </Col>\r\n                                    </FormGroup>\r\n                                </Col>\r\n\r\n                                <Col sm={3}>\r\n                                    <FormGroup className=\" row mt-2\">\r\n                                        <Input style={{ marginLeft: \"5px\", marginTop: \"10px\" }}\r\n                                            className=\"p-1\"\r\n                                            type=\"checkbox\"\r\n                                            checked={states.itemNameCheckbox}\r\n                                            onChange={(e) => { states.setItemNameCheckbox(e.target.checked) }}\r\n                                        />\r\n                                        <Label className=\"col-sm-4 p-2\">Items</Label>\r\n                                        <Col>\r\n                                            <C_Select\r\n                                                value={states.itemNameSelect}\r\n                                                isSearchable={true}\r\n                                                isMulti={true}\r\n                                                isLoading={ItemDropdownloading}\r\n                                                className=\"react-dropdown\"\r\n                                                classNamePrefix=\"dropdown\"\r\n                                                styles={{\r\n                                                    menu: provided => ({ ...provided, zIndex: 2 })\r\n                                                }}\r\n                                                options={itemNameDropdownOptions}\r\n                                                onChange={(e) => { ItemOnChange(e) }}\r\n                                            />\r\n                                        </Col>\r\n                                    </FormGroup>\r\n                                </Col>\r\n\r\n                                <Col sm={3}>\r\n                                    <FormGroup className=\" row mt-2\">\r\n                                        <div style={{ marginLeft: \"1px\", marginTop: \"10px\", width: \"5px\", }}></div>\r\n                                        <Label className=\"col-sm-4 p-2\">Quantity</Label>\r\n                                        <Col>\r\n                                            <C_Select\r\n                                                value={states.unitDropdownSelect}\r\n                                                isSearchable={true}\r\n                                                // isMulti={true}\r\n                                                //  isLoading={partyLoading}       \r\n                                                className=\"react-dropdown\"\r\n                                                classNamePrefix=\"dropdown\"\r\n                                                styles={{\r\n                                                    menu: provided => ({ ...provided, zIndex: 2 })\r\n                                                }}\r\n                                                options={initail.UNIT_DROPDOWN_OPTIONS}\r\n                                                onChange={(e) => { states.setUnitDropdownSelect(e) }}\r\n                                            />\r\n                                        </Col>\r\n                                    </FormGroup>\r\n                                </Col>\r\n                            </Row>\r\n                        </Col>\r\n\r\n                        <Col sm=\"1\" className=\"mt-1 mb-1 \">\r\n                            {(states.initaialBaseData.length > 0) &&\r\n                                <C_Button\r\n                                    type=\"button\"\r\n                                    className=\"btn btn-primary border-1 font-size-12 text-center\"\r\n                                    onClick={ExcelDownload} // Example field, you can change it\r\n                                >\r\n                                    <span className=\"font-weight-bold\" style={{ fontWeight: \"bold\", fontSize: \"14px\" }}> Excel</span>\r\n                                </C_Button>\r\n                            }\r\n                        </Col>\r\n                    </Row>\r\n                </div>\r\n            </div>\r\n\r\n        </React.Fragment >\r\n    )\r\n}\r\n\r\nexport default HeaderSection;\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\Reports\\ItemSaleReport\\ContextDataProvider.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\Reports\\ItemSaleReport\\SortAndExcelDownloadFunc.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Accounting\\Claim Tracking Entry\\ClaimTrackingEntryList.js",["4526","4527","4528"],"D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Accounting\\Claim Tracking Entry\\ClaimTrackingEntry.js",["4529","4530","4531","4532","4533","4534","4535","4536","4537","4538","4539","4540","4541"],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Accounting\\ClaimTrackingEntryRedux\\reducer.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\pages\\Accounting\\Claim Tracking Entry\\ClaimRelatedData.js",["4542"],"\r\nimport {\r\n    Col,\r\n    FormGroup,\r\n    Input,\r\n    Label,\r\n    Row,\r\n} from \"reactstrap\";\r\nimport Select from \"react-select\";\r\n\r\nexport function ClaimForTheMonthOtions() {\r\n    let currentYear = new Date().getFullYear(); // Get the current year\r\n    let currentMonth = new Date().getMonth() + 1; // Get the current month (0-based index)\r\n\r\n    let currentAndLastYear = [];\r\n\r\n    for (let year = currentYear - 1; year <= currentYear; year++) {\r\n        for (let month = 1; month <= 12; month++) {\r\n            if (year === currentYear && month > currentMonth) {\r\n                break; // Stop when reaching future months in the current year\r\n            }\r\n\r\n            const monthNames = [\r\n                \"January\", \"February\", \"March\", \"April\",\r\n                \"May\", \"June\", \"July\", \"August\",\r\n                \"September\", \"October\", \"November\", \"December\"\r\n            ];\r\n\r\n            currentAndLastYear.push({\r\n                year: year,\r\n                monthNumber: month.toString().padStart(2, '0'),\r\n                monthName: monthNames[month - 1]\r\n            });\r\n        }\r\n    }\r\n\r\n    return currentAndLastYear;\r\n}\r\n\r\nexport const ClaimForTheMonthOtion = ClaimForTheMonthOtions().map((data, index, key) => ({\r\n    value: index + 1,\r\n    label: `${data.monthName}(${data.year})`,\r\n    monthNumber: data.monthNumber,\r\n    year: `${data.year}`\r\n}));\r\n\r\n\r\n// Reusable component for form groups with label and input/select\r\nexport function FormGroupWithLabel(props) {\r\n    const { label, children } = props;\r\n    return (\r\n        <FormGroup className=\"row mt-1\">\r\n            <Label className=\"col-sm-1 p-2\" style={{ width: \"115px\", marginRight: \"0.4cm\" }}>\r\n                {label}\r\n            </Label>\r\n            <Col sm=\"7\">{children}</Col>\r\n        </FormGroup>\r\n    );\r\n}\r\n\r\n// Reusable function for rendering a Select component\r\nexport function renderSelect(name, value, options, onChange, isError) {\r\n    return (\r\n        <Select\r\n            name={name}\r\n            value={value}\r\n            isSearchable={true}\r\n            className=\"react-dropdown\"\r\n            classNamePrefix=\"dropdown\"\r\n            styles={{ menu: provided => ({ ...provided, zIndex: 2 }) }}\r\n            options={options}\r\n            onChange={(hasSelect, evn) => onChange(hasSelect, evn)}\r\n        />\r\n    );\r\n}\r\n\r\n// Reusable function for rendering an Input component\r\nexport function renderInput(name, value, isError, placeholder, onChange) {\r\n    return (\r\n        <Input\r\n            type=\"text\"\r\n            name={name}\r\n            id={name}\r\n            value={value}\r\n            placeholder={placeholder}\r\n            autoComplete='off'\r\n            autoFocus={true}\r\n            className={isError.length > 0 ? \"is-invalid form-control\" : \"form-control\"}\r\n            onChange={(event) => onChange({ event })}\r\n        />\r\n    );\r\n}\r\n","D:\\Rohit\\Git projects\\Manthan\\src\\store\\Accounting\\ClaimTrackingEntryRedux\\actionType.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Accounting\\ClaimTrackingEntryRedux\\action.js",[],"D:\\Rohit\\Git projects\\Manthan\\src\\store\\Accounting\\ClaimTrackingEntryRedux\\saga.js",[],{"ruleId":"4543","severity":1,"message":"4544","line":155,"column":8,"nodeType":"4545","messageId":"4546","endLine":155,"endColumn":13},{"ruleId":"4543","severity":1,"message":"4547","line":8,"column":5,"nodeType":"4545","messageId":"4546","endLine":8,"endColumn":15},{"ruleId":"4543","severity":1,"message":"4548","line":80,"column":7,"nodeType":"4545","messageId":"4546","endLine":80,"endColumn":23},{"ruleId":"4549","severity":1,"message":"4550","line":99,"column":6,"nodeType":"4551","endLine":99,"endColumn":28,"suggestions":"4552"},{"ruleId":"4549","severity":1,"message":"4553","line":43,"column":6,"nodeType":"4551","endLine":43,"endColumn":8,"suggestions":"4554"},{"ruleId":"4549","severity":1,"message":"4555","line":58,"column":6,"nodeType":"4551","endLine":58,"endColumn":8,"suggestions":"4556"},{"ruleId":"4549","severity":1,"message":"4557","line":75,"column":6,"nodeType":"4551","endLine":75,"endColumn":20,"suggestions":"4558"},{"ruleId":"4549","severity":1,"message":"4559","line":93,"column":6,"nodeType":"4551","endLine":93,"endColumn":30,"suggestions":"4560"},{"ruleId":"4549","severity":1,"message":"4561","line":106,"column":6,"nodeType":"4551","endLine":106,"endColumn":18,"suggestions":"4562"},{"ruleId":"4549","severity":1,"message":"4563","line":22,"column":6,"nodeType":"4551","endLine":22,"endColumn":31,"suggestions":"4564"},{"ruleId":"4543","severity":1,"message":"4565","line":1,"column":8,"nodeType":"4545","messageId":"4546","endLine":1,"endColumn":17},{"ruleId":"4543","severity":1,"message":"4566","line":9,"column":10,"nodeType":"4545","messageId":"4546","endLine":9,"endColumn":20},{"ruleId":"4543","severity":1,"message":"4567","line":9,"column":28,"nodeType":"4545","messageId":"4546","endLine":9,"endColumn":38},{"ruleId":"4543","severity":1,"message":"4568","line":32,"column":10,"nodeType":"4545","messageId":"4546","endLine":32,"endColumn":17},{"ruleId":"4549","severity":1,"message":"4569","line":77,"column":6,"nodeType":"4551","endLine":77,"endColumn":56,"suggestions":"4570"},{"ruleId":"4549","severity":1,"message":"4569","line":94,"column":6,"nodeType":"4551","endLine":94,"endColumn":55,"suggestions":"4571"},{"ruleId":"4549","severity":1,"message":"4572","line":42,"column":6,"nodeType":"4551","endLine":42,"endColumn":8,"suggestions":"4573"},{"ruleId":"4549","severity":1,"message":"4574","line":58,"column":6,"nodeType":"4551","endLine":58,"endColumn":18,"suggestions":"4575"},{"ruleId":"4576","severity":1,"message":"4577","line":104,"column":25,"nodeType":"4578","messageId":"4579","endLine":111,"endColumn":27},{"ruleId":"4576","severity":1,"message":"4580","line":114,"column":25,"nodeType":"4578","messageId":"4579","endLine":117,"endColumn":27},{"ruleId":"4549","severity":1,"message":"4569","line":85,"column":8,"nodeType":"4551","endLine":85,"endColumn":10,"suggestions":"4581"},{"ruleId":"4549","severity":1,"message":"4582","line":121,"column":8,"nodeType":"4551","endLine":121,"endColumn":20,"suggestions":"4583"},{"ruleId":"4549","severity":1,"message":"4584","line":160,"column":8,"nodeType":"4551","endLine":160,"endColumn":10,"suggestions":"4585"},{"ruleId":"4549","severity":1,"message":"4586","line":163,"column":15,"nodeType":"4587","endLine":202,"endColumn":6},{"ruleId":"4549","severity":1,"message":"4588","line":202,"column":8,"nodeType":"4551","endLine":202,"endColumn":17,"suggestions":"4589"},{"ruleId":"4549","severity":1,"message":"4590","line":218,"column":8,"nodeType":"4551","endLine":218,"endColumn":29,"suggestions":"4591"},{"ruleId":"4549","severity":1,"message":"4592","line":226,"column":8,"nodeType":"4551","endLine":226,"endColumn":19,"suggestions":"4593"},{"ruleId":"4543","severity":1,"message":"4594","line":16,"column":30,"nodeType":"4545","messageId":"4546","endLine":16,"endColumn":40},{"ruleId":"4549","severity":1,"message":"4569","line":50,"column":8,"nodeType":"4551","endLine":50,"endColumn":10,"suggestions":"4595"},{"ruleId":"4549","severity":1,"message":"4569","line":57,"column":8,"nodeType":"4551","endLine":57,"endColumn":10,"suggestions":"4596"},{"ruleId":"4549","severity":1,"message":"4569","line":50,"column":6,"nodeType":"4551","endLine":50,"endColumn":8,"suggestions":"4597"},{"ruleId":"4549","severity":1,"message":"4598","line":118,"column":6,"nodeType":"4551","endLine":118,"endColumn":18,"suggestions":"4599"},{"ruleId":"4549","severity":1,"message":"4584","line":165,"column":6,"nodeType":"4551","endLine":165,"endColumn":8,"suggestions":"4600"},{"ruleId":"4549","severity":1,"message":"4586","line":167,"column":13,"nodeType":"4587","endLine":198,"endColumn":4},{"ruleId":"4549","severity":1,"message":"4601","line":198,"column":6,"nodeType":"4551","endLine":198,"endColumn":15,"suggestions":"4602"},{"ruleId":"4549","severity":1,"message":"4590","line":213,"column":6,"nodeType":"4551","endLine":213,"endColumn":27,"suggestions":"4603"},{"ruleId":"4549","severity":1,"message":"4592","line":220,"column":6,"nodeType":"4551","endLine":220,"endColumn":17,"suggestions":"4604"},{"ruleId":"4549","severity":1,"message":"4569","line":51,"column":6,"nodeType":"4551","endLine":51,"endColumn":8,"suggestions":"4605"},{"ruleId":"4549","severity":1,"message":"4569","line":114,"column":6,"nodeType":"4551","endLine":114,"endColumn":8,"suggestions":"4606"},{"ruleId":"4549","severity":1,"message":"4607","line":126,"column":6,"nodeType":"4551","endLine":126,"endColumn":17,"suggestions":"4608"},{"ruleId":"4549","severity":1,"message":"4582","line":158,"column":6,"nodeType":"4551","endLine":158,"endColumn":18,"suggestions":"4609"},{"ruleId":"4549","severity":1,"message":"4592","line":166,"column":6,"nodeType":"4551","endLine":166,"endColumn":17,"suggestions":"4610"},{"ruleId":"4549","severity":1,"message":"4584","line":217,"column":6,"nodeType":"4551","endLine":217,"endColumn":8,"suggestions":"4611"},{"ruleId":"4549","severity":1,"message":"4586","line":219,"column":13,"nodeType":"4587","endLine":249,"endColumn":4},{"ruleId":"4549","severity":1,"message":"4612","line":249,"column":6,"nodeType":"4551","endLine":249,"endColumn":22,"suggestions":"4613"},{"ruleId":"4614","severity":1,"message":"4615","line":281,"column":40,"nodeType":"4587","messageId":"4616","endLine":281,"endColumn":42},{"ruleId":"4614","severity":1,"message":"4615","line":283,"column":30,"nodeType":"4587","messageId":"4616","endLine":283,"endColumn":32},{"ruleId":"4543","severity":1,"message":"4617","line":56,"column":20,"nodeType":"4545","messageId":"4546","endLine":56,"endColumn":31},{"ruleId":"4614","severity":1,"message":"4618","line":133,"column":29,"nodeType":"4587","messageId":"4619","endLine":133,"endColumn":31},{"ruleId":"4549","severity":1,"message":"4598","line":138,"column":6,"nodeType":"4551","endLine":138,"endColumn":18,"suggestions":"4620"},{"ruleId":"4621","severity":1,"message":"4622","line":221,"column":45,"nodeType":"4623","messageId":"4624","endLine":221,"endColumn":47},{"ruleId":"4621","severity":1,"message":"4622","line":221,"column":68,"nodeType":"4623","messageId":"4624","endLine":221,"endColumn":70},{"ruleId":"4549","severity":1,"message":"4625","line":267,"column":6,"nodeType":"4551","endLine":267,"endColumn":31,"suggestions":"4626"},{"ruleId":"4549","severity":1,"message":"4586","line":284,"column":13,"nodeType":"4587","endLine":315,"endColumn":4},{"ruleId":"4549","severity":1,"message":"4627","line":315,"column":6,"nodeType":"4551","endLine":315,"endColumn":15,"suggestions":"4628"},{"ruleId":"4549","severity":1,"message":"4629","line":337,"column":6,"nodeType":"4551","endLine":337,"endColumn":29,"suggestions":"4630"},{"ruleId":"4549","severity":1,"message":"4631","line":352,"column":6,"nodeType":"4551","endLine":352,"endColumn":27,"suggestions":"4632"},{"ruleId":"4633","severity":1,"message":"4634","line":456,"column":7,"nodeType":"4635","messageId":"4636","endLine":467,"endColumn":8},{"ruleId":"4576","severity":1,"message":"4637","line":986,"column":25,"nodeType":"4578","messageId":"4579","endLine":988,"endColumn":72},{"ruleId":"4543","severity":1,"message":"4638","line":15,"column":10,"nodeType":"4545","messageId":"4546","endLine":15,"endColumn":18},{"ruleId":"4543","severity":1,"message":"4594","line":18,"column":10,"nodeType":"4545","messageId":"4546","endLine":18,"endColumn":20},{"ruleId":"4549","severity":1,"message":"4569","line":50,"column":8,"nodeType":"4551","endLine":50,"endColumn":10,"suggestions":"4639"},{"ruleId":"4543","severity":1,"message":"4640","line":53,"column":24,"nodeType":"4545","messageId":"4546","endLine":53,"endColumn":34},{"ruleId":"4549","severity":1,"message":"4569","line":56,"column":6,"nodeType":"4551","endLine":56,"endColumn":8,"suggestions":"4641"},{"ruleId":"4543","severity":1,"message":"4642","line":2,"column":8,"nodeType":"4545","messageId":"4546","endLine":2,"endColumn":14},{"ruleId":"4614","severity":1,"message":"4618","line":179,"column":29,"nodeType":"4587","messageId":"4619","endLine":179,"endColumn":31},{"ruleId":"4549","severity":1,"message":"4582","line":190,"column":6,"nodeType":"4551","endLine":190,"endColumn":18,"suggestions":"4643"},{"ruleId":"4543","severity":1,"message":"4644","line":217,"column":71,"nodeType":"4545","messageId":"4546","endLine":217,"endColumn":82},{"ruleId":"4543","severity":1,"message":"4645","line":217,"column":127,"nodeType":"4545","messageId":"4546","endLine":217,"endColumn":142},{"ruleId":"4543","severity":1,"message":"4646","line":217,"column":149,"nodeType":"4545","messageId":"4546","endLine":217,"endColumn":153},{"ruleId":"4543","severity":1,"message":"4647","line":218,"column":34,"nodeType":"4545","messageId":"4546","endLine":218,"endColumn":44},{"ruleId":"4549","severity":1,"message":"4584","line":258,"column":6,"nodeType":"4551","endLine":258,"endColumn":8,"suggestions":"4648"},{"ruleId":"4549","severity":1,"message":"4586","line":260,"column":13,"nodeType":"4587","endLine":291,"endColumn":4},{"ruleId":"4549","severity":1,"message":"4649","line":291,"column":6,"nodeType":"4551","endLine":291,"endColumn":15,"suggestions":"4650"},{"ruleId":"4549","severity":1,"message":"4590","line":306,"column":6,"nodeType":"4551","endLine":306,"endColumn":27,"suggestions":"4651"},{"ruleId":"4549","severity":1,"message":"4592","line":314,"column":6,"nodeType":"4551","endLine":314,"endColumn":17,"suggestions":"4652"},{"ruleId":"4576","severity":1,"message":"4653","line":507,"column":27,"nodeType":"4578","messageId":"4579","endLine":514,"endColumn":29},{"ruleId":"4576","severity":1,"message":"4577","line":582,"column":29,"nodeType":"4578","messageId":"4579","endLine":594,"endColumn":31},{"ruleId":"4576","severity":1,"message":"4577","line":605,"column":29,"nodeType":"4578","messageId":"4579","endLine":617,"endColumn":31},{"ruleId":"4576","severity":1,"message":"4577","line":627,"column":27,"nodeType":"4578","messageId":"4579","endLine":638,"endColumn":29},{"ruleId":"4576","severity":1,"message":"4577","line":679,"column":29,"nodeType":"4578","messageId":"4579","endLine":690,"endColumn":31},{"ruleId":"4576","severity":1,"message":"4577","line":708,"column":29,"nodeType":"4578","messageId":"4579","endLine":719,"endColumn":31},{"ruleId":"4549","severity":1,"message":"4598","line":192,"column":8,"nodeType":"4551","endLine":192,"endColumn":20,"suggestions":"4654"},{"ruleId":"4549","severity":1,"message":"4569","line":200,"column":8,"nodeType":"4551","endLine":200,"endColumn":10,"suggestions":"4655"},{"ruleId":"4549","severity":1,"message":"4625","line":336,"column":8,"nodeType":"4551","endLine":336,"endColumn":10,"suggestions":"4656"},{"ruleId":"4549","severity":1,"message":"4569","line":351,"column":8,"nodeType":"4551","endLine":351,"endColumn":10,"suggestions":"4657"},{"ruleId":"4549","severity":1,"message":"4586","line":353,"column":15,"nodeType":"4587","endLine":383,"endColumn":6},{"ruleId":"4549","severity":1,"message":"4627","line":383,"column":8,"nodeType":"4551","endLine":383,"endColumn":17,"suggestions":"4658"},{"ruleId":"4549","severity":1,"message":"4631","line":397,"column":8,"nodeType":"4551","endLine":397,"endColumn":29,"suggestions":"4659"},{"ruleId":"4660","severity":1,"message":"4661","line":775,"column":26,"nodeType":"4662","messageId":"4663","endLine":775,"endColumn":28},{"ruleId":"4664","severity":1,"message":"4665","line":776,"column":17,"nodeType":"4545","messageId":"4666","endLine":776,"endColumn":18},{"ruleId":"4543","severity":1,"message":"4667","line":781,"column":9,"nodeType":"4545","messageId":"4546","endLine":781,"endColumn":14},{"ruleId":"4660","severity":1,"message":"4661","line":808,"column":32,"nodeType":"4662","messageId":"4663","endLine":808,"endColumn":34},{"ruleId":"4660","severity":1,"message":"4661","line":811,"column":33,"nodeType":"4662","messageId":"4663","endLine":811,"endColumn":35},{"ruleId":"4576","severity":1,"message":"4577","line":1117,"column":73,"nodeType":"4578","messageId":"4579","endLine":1132,"endColumn":75},{"ruleId":"4576","severity":1,"message":"4668","line":1299,"column":69,"nodeType":"4578","messageId":"4579","endLine":1299,"endColumn":131},{"ruleId":"4543","severity":1,"message":"4669","line":16,"column":29,"nodeType":"4545","messageId":"4546","endLine":16,"endColumn":40},{"ruleId":"4614","severity":1,"message":"4615","line":25,"column":32,"nodeType":"4587","messageId":"4616","endLine":25,"endColumn":34},{"ruleId":"4614","severity":1,"message":"4615","line":26,"column":38,"nodeType":"4587","messageId":"4616","endLine":26,"endColumn":40},{"ruleId":"4660","severity":1,"message":"4670","line":140,"column":31,"nodeType":"4662","messageId":"4663","endLine":140,"endColumn":33},{"ruleId":"4660","severity":1,"message":"4670","line":140,"column":48,"nodeType":"4662","messageId":"4663","endLine":140,"endColumn":50},{"ruleId":"4543","severity":1,"message":"4671","line":155,"column":13,"nodeType":"4545","messageId":"4546","endLine":155,"endColumn":22},{"ruleId":"4543","severity":1,"message":"4672","line":295,"column":14,"nodeType":"4545","messageId":"4546","endLine":295,"endColumn":22},{"ruleId":"4549","severity":1,"message":"4569","line":98,"column":6,"nodeType":"4551","endLine":98,"endColumn":8,"suggestions":"4673"},{"ruleId":"4614","severity":1,"message":"4618","line":129,"column":29,"nodeType":"4587","messageId":"4619","endLine":129,"endColumn":31},{"ruleId":"4549","severity":1,"message":"4598","line":134,"column":6,"nodeType":"4551","endLine":134,"endColumn":18,"suggestions":"4674"},{"ruleId":"4549","severity":1,"message":"4584","line":183,"column":6,"nodeType":"4551","endLine":183,"endColumn":8,"suggestions":"4675"},{"ruleId":"4549","severity":1,"message":"4586","line":185,"column":13,"nodeType":"4587","endLine":215,"endColumn":4},{"ruleId":"4549","severity":1,"message":"4676","line":215,"column":6,"nodeType":"4551","endLine":215,"endColumn":22,"suggestions":"4677"},{"ruleId":"4549","severity":1,"message":"4590","line":230,"column":6,"nodeType":"4551","endLine":230,"endColumn":27,"suggestions":"4678"},{"ruleId":"4549","severity":1,"message":"4592","line":238,"column":6,"nodeType":"4551","endLine":238,"endColumn":17,"suggestions":"4679"},{"ruleId":"4543","severity":1,"message":"4680","line":26,"column":22,"nodeType":"4545","messageId":"4546","endLine":26,"endColumn":33},{"ruleId":"4549","severity":1,"message":"4569","line":45,"column":8,"nodeType":"4551","endLine":45,"endColumn":10,"suggestions":"4681"},{"ruleId":"4549","severity":1,"message":"4682","line":72,"column":8,"nodeType":"4551","endLine":72,"endColumn":17,"suggestions":"4683"},{"ruleId":"4549","severity":1,"message":"4569","line":56,"column":6,"nodeType":"4551","endLine":56,"endColumn":8,"suggestions":"4684"},{"ruleId":"4549","severity":1,"message":"4685","line":104,"column":8,"nodeType":"4551","endLine":104,"endColumn":20,"suggestions":"4686"},{"ruleId":"4549","severity":1,"message":"4687","line":121,"column":8,"nodeType":"4551","endLine":121,"endColumn":10,"suggestions":"4688"},{"ruleId":"4549","severity":1,"message":"4569","line":131,"column":8,"nodeType":"4551","endLine":131,"endColumn":10,"suggestions":"4689"},{"ruleId":"4549","severity":1,"message":"4586","line":142,"column":15,"nodeType":"4587","endLine":154,"endColumn":6},{"ruleId":"4549","severity":1,"message":"4631","line":154,"column":8,"nodeType":"4551","endLine":154,"endColumn":17,"suggestions":"4690"},{"ruleId":"4543","severity":1,"message":"4691","line":209,"column":23,"nodeType":"4545","messageId":"4546","endLine":209,"endColumn":29},{"ruleId":"4614","severity":1,"message":"4615","line":325,"column":64,"nodeType":"4587","messageId":"4616","endLine":325,"endColumn":66},{"ruleId":"4614","severity":1,"message":"4615","line":339,"column":38,"nodeType":"4587","messageId":"4616","endLine":339,"endColumn":40},{"ruleId":"4543","severity":1,"message":"4692","line":398,"column":91,"nodeType":"4545","messageId":"4546","endLine":398,"endColumn":105},{"ruleId":"4576","severity":1,"message":"4577","line":512,"column":49,"nodeType":"4578","messageId":"4579","endLine":518,"endColumn":51},{"ruleId":"4576","severity":1,"message":"4577","line":527,"column":49,"nodeType":"4578","messageId":"4579","endLine":534,"endColumn":51},{"ruleId":"4549","severity":1,"message":"4569","line":81,"column":8,"nodeType":"4551","endLine":81,"endColumn":10,"suggestions":"4693"},{"ruleId":"4549","severity":1,"message":"4582","line":117,"column":8,"nodeType":"4551","endLine":117,"endColumn":20,"suggestions":"4694"},{"ruleId":"4549","severity":1,"message":"4584","line":162,"column":8,"nodeType":"4551","endLine":162,"endColumn":10,"suggestions":"4695"},{"ruleId":"4549","severity":1,"message":"4586","line":165,"column":15,"nodeType":"4587","endLine":206,"endColumn":6},{"ruleId":"4549","severity":1,"message":"4588","line":206,"column":8,"nodeType":"4551","endLine":206,"endColumn":17,"suggestions":"4696"},{"ruleId":"4549","severity":1,"message":"4590","line":223,"column":8,"nodeType":"4551","endLine":223,"endColumn":29,"suggestions":"4697"},{"ruleId":"4549","severity":1,"message":"4592","line":231,"column":8,"nodeType":"4551","endLine":231,"endColumn":19,"suggestions":"4698"},{"ruleId":"4543","severity":1,"message":"4699","line":2,"column":10,"nodeType":"4545","messageId":"4546","endLine":2,"endColumn":13},{"ruleId":"4543","severity":1,"message":"4700","line":2,"column":15,"nodeType":"4545","messageId":"4546","endLine":2,"endColumn":18},{"ruleId":"4543","severity":1,"message":"4701","line":2,"column":27,"nodeType":"4545","messageId":"4546","endLine":2,"endColumn":33},{"ruleId":"4543","severity":1,"message":"4638","line":3,"column":8,"nodeType":"4545","messageId":"4546","endLine":3,"endColumn":16},{"ruleId":"4543","severity":1,"message":"4702","line":5,"column":8,"nodeType":"4545","messageId":"4546","endLine":5,"endColumn":22},{"ruleId":"4543","severity":1,"message":"4703","line":6,"column":8,"nodeType":"4545","messageId":"4546","endLine":6,"endColumn":25},{"ruleId":"4543","severity":1,"message":"4704","line":7,"column":5,"nodeType":"4545","messageId":"4546","endLine":7,"endColumn":23},{"ruleId":"4543","severity":1,"message":"4705","line":7,"column":25,"nodeType":"4545","messageId":"4546","endLine":7,"endColumn":49},{"ruleId":"4543","severity":1,"message":"4706","line":9,"column":8,"nodeType":"4545","messageId":"4546","endLine":9,"endColumn":23},{"ruleId":"4543","severity":1,"message":"4707","line":24,"column":30,"nodeType":"4545","messageId":"4546","endLine":24,"endColumn":44},{"ruleId":"4543","severity":1,"message":"4708","line":25,"column":10,"nodeType":"4545","messageId":"4546","endLine":25,"endColumn":23},{"ruleId":"4543","severity":1,"message":"4709","line":28,"column":10,"nodeType":"4545","messageId":"4546","endLine":28,"endColumn":30},{"ruleId":"4543","severity":1,"message":"4710","line":28,"column":51,"nodeType":"4545","messageId":"4546","endLine":28,"endColumn":65},{"ruleId":"4543","severity":1,"message":"4711","line":28,"column":67,"nodeType":"4545","messageId":"4546","endLine":28,"endColumn":78},{"ruleId":"4543","severity":1,"message":"4712","line":28,"column":80,"nodeType":"4545","messageId":"4546","endLine":28,"endColumn":91},{"ruleId":"4549","severity":1,"message":"4569","line":71,"column":8,"nodeType":"4551","endLine":71,"endColumn":10,"suggestions":"4713"},{"ruleId":"4549","severity":1,"message":"4629","line":90,"column":8,"nodeType":"4551","endLine":90,"endColumn":21,"suggestions":"4714"},{"ruleId":"4543","severity":1,"message":"4640","line":136,"column":24,"nodeType":"4545","messageId":"4546","endLine":136,"endColumn":34},{"ruleId":"4549","severity":1,"message":"4569","line":58,"column":6,"nodeType":"4551","endLine":58,"endColumn":8,"suggestions":"4715"},{"ruleId":"4543","severity":1,"message":"4594","line":17,"column":30,"nodeType":"4545","messageId":"4546","endLine":17,"endColumn":40},{"ruleId":"4549","severity":1,"message":"4569","line":53,"column":6,"nodeType":"4551","endLine":53,"endColumn":8,"suggestions":"4716"},{"ruleId":"4549","severity":1,"message":"4569","line":86,"column":8,"nodeType":"4551","endLine":86,"endColumn":10,"suggestions":"4717"},{"ruleId":"4549","severity":1,"message":"4582","line":122,"column":8,"nodeType":"4551","endLine":122,"endColumn":20,"suggestions":"4718"},{"ruleId":"4549","severity":1,"message":"4584","line":161,"column":8,"nodeType":"4551","endLine":161,"endColumn":10,"suggestions":"4719"},{"ruleId":"4549","severity":1,"message":"4586","line":163,"column":15,"nodeType":"4587","endLine":202,"endColumn":6},{"ruleId":"4549","severity":1,"message":"4588","line":202,"column":8,"nodeType":"4551","endLine":202,"endColumn":17,"suggestions":"4720"},{"ruleId":"4549","severity":1,"message":"4590","line":220,"column":8,"nodeType":"4551","endLine":220,"endColumn":29,"suggestions":"4721"},{"ruleId":"4549","severity":1,"message":"4592","line":228,"column":8,"nodeType":"4551","endLine":228,"endColumn":19,"suggestions":"4722"},{"ruleId":"4549","severity":1,"message":"4569","line":56,"column":6,"nodeType":"4551","endLine":56,"endColumn":8,"suggestions":"4723"},{"ruleId":"4549","severity":1,"message":"4569","line":74,"column":8,"nodeType":"4551","endLine":74,"endColumn":10,"suggestions":"4724"},{"ruleId":"4549","severity":1,"message":"4582","line":111,"column":8,"nodeType":"4551","endLine":111,"endColumn":20,"suggestions":"4725"},{"ruleId":"4549","severity":1,"message":"4584","line":143,"column":8,"nodeType":"4551","endLine":143,"endColumn":10,"suggestions":"4726"},{"ruleId":"4549","severity":1,"message":"4586","line":145,"column":15,"nodeType":"4587","endLine":184,"endColumn":6},{"ruleId":"4549","severity":1,"message":"4588","line":184,"column":8,"nodeType":"4551","endLine":184,"endColumn":17,"suggestions":"4727"},{"ruleId":"4549","severity":1,"message":"4590","line":199,"column":8,"nodeType":"4551","endLine":199,"endColumn":29,"suggestions":"4728"},{"ruleId":"4549","severity":1,"message":"4592","line":208,"column":8,"nodeType":"4551","endLine":208,"endColumn":19,"suggestions":"4729"},{"ruleId":"4549","severity":1,"message":"4569","line":91,"column":8,"nodeType":"4551","endLine":91,"endColumn":10,"suggestions":"4730"},{"ruleId":"4614","severity":1,"message":"4618","line":126,"column":33,"nodeType":"4587","messageId":"4619","endLine":126,"endColumn":35},{"ruleId":"4549","severity":1,"message":"4582","line":132,"column":8,"nodeType":"4551","endLine":132,"endColumn":20,"suggestions":"4731"},{"ruleId":"4549","severity":1,"message":"4584","line":167,"column":8,"nodeType":"4551","endLine":167,"endColumn":10,"suggestions":"4732"},{"ruleId":"4549","severity":1,"message":"4586","line":169,"column":15,"nodeType":"4587","endLine":200,"endColumn":6},{"ruleId":"4549","severity":1,"message":"4601","line":200,"column":8,"nodeType":"4551","endLine":200,"endColumn":17,"suggestions":"4733"},{"ruleId":"4549","severity":1,"message":"4590","line":215,"column":8,"nodeType":"4551","endLine":215,"endColumn":29,"suggestions":"4734"},{"ruleId":"4549","severity":1,"message":"4592","line":222,"column":8,"nodeType":"4551","endLine":222,"endColumn":19,"suggestions":"4735"},{"ruleId":"4549","severity":1,"message":"4569","line":56,"column":6,"nodeType":"4551","endLine":56,"endColumn":8,"suggestions":"4736"},{"ruleId":"4543","severity":1,"message":"4737","line":1,"column":28,"nodeType":"4545","messageId":"4546","endLine":1,"endColumn":36},{"ruleId":"4549","severity":1,"message":"4738","line":63,"column":6,"nodeType":"4551","endLine":63,"endColumn":8,"suggestions":"4739"},{"ruleId":"4576","severity":1,"message":"4740","line":90,"column":9,"nodeType":"4578","messageId":"4579","endLine":94,"endColumn":11},{"ruleId":"4543","severity":1,"message":"4741","line":43,"column":5,"nodeType":"4545","messageId":"4546","endLine":43,"endColumn":17},{"ruleId":"4543","severity":1,"message":"4742","line":60,"column":11,"nodeType":"4545","messageId":"4546","endLine":60,"endColumn":24},{"ruleId":"4549","severity":1,"message":"4569","line":99,"column":8,"nodeType":"4551","endLine":99,"endColumn":10,"suggestions":"4743"},{"ruleId":"4549","severity":1,"message":"4598","line":126,"column":8,"nodeType":"4551","endLine":126,"endColumn":20,"suggestions":"4744"},{"ruleId":"4549","severity":1,"message":"4584","line":165,"column":8,"nodeType":"4551","endLine":165,"endColumn":10,"suggestions":"4745"},{"ruleId":"4549","severity":1,"message":"4586","line":167,"column":15,"nodeType":"4587","endLine":197,"endColumn":6},{"ruleId":"4549","severity":1,"message":"4601","line":197,"column":8,"nodeType":"4551","endLine":197,"endColumn":17,"suggestions":"4746"},{"ruleId":"4549","severity":1,"message":"4590","line":212,"column":8,"nodeType":"4551","endLine":212,"endColumn":29,"suggestions":"4747"},{"ruleId":"4549","severity":1,"message":"4592","line":220,"column":8,"nodeType":"4551","endLine":220,"endColumn":19,"suggestions":"4748"},{"ruleId":"4543","severity":1,"message":"4749","line":227,"column":11,"nodeType":"4545","messageId":"4546","endLine":227,"endColumn":30},{"ruleId":"4576","severity":1,"message":"4740","line":279,"column":25,"nodeType":"4578","messageId":"4579","endLine":279,"endColumn":69},{"ruleId":"4549","severity":1,"message":"4569","line":49,"column":6,"nodeType":"4551","endLine":49,"endColumn":8,"suggestions":"4750"},{"ruleId":"4543","severity":1,"message":"4737","line":1,"column":28,"nodeType":"4545","messageId":"4546","endLine":1,"endColumn":36},{"ruleId":"4549","severity":1,"message":"4738","line":59,"column":6,"nodeType":"4551","endLine":59,"endColumn":8,"suggestions":"4751"},{"ruleId":"4576","severity":1,"message":"4740","line":86,"column":9,"nodeType":"4578","messageId":"4579","endLine":90,"endColumn":11},{"ruleId":"4549","severity":1,"message":"4569","line":56,"column":6,"nodeType":"4551","endLine":56,"endColumn":8,"suggestions":"4752"},{"ruleId":"4549","severity":1,"message":"4569","line":80,"column":8,"nodeType":"4551","endLine":80,"endColumn":10,"suggestions":"4753"},{"ruleId":"4549","severity":1,"message":"4598","line":108,"column":8,"nodeType":"4551","endLine":108,"endColumn":20,"suggestions":"4754"},{"ruleId":"4543","severity":1,"message":"4755","line":128,"column":49,"nodeType":"4545","messageId":"4546","endLine":128,"endColumn":54},{"ruleId":"4543","severity":1,"message":"4756","line":128,"column":56,"nodeType":"4545","messageId":"4546","endLine":128,"endColumn":65},{"ruleId":"4549","severity":1,"message":"4584","line":148,"column":8,"nodeType":"4551","endLine":148,"endColumn":10,"suggestions":"4757"},{"ruleId":"4549","severity":1,"message":"4586","line":150,"column":15,"nodeType":"4587","endLine":179,"endColumn":6},{"ruleId":"4549","severity":1,"message":"4601","line":179,"column":8,"nodeType":"4551","endLine":179,"endColumn":17,"suggestions":"4758"},{"ruleId":"4549","severity":1,"message":"4590","line":194,"column":8,"nodeType":"4551","endLine":194,"endColumn":29,"suggestions":"4759"},{"ruleId":"4549","severity":1,"message":"4592","line":201,"column":8,"nodeType":"4551","endLine":201,"endColumn":19,"suggestions":"4760"},{"ruleId":"4576","severity":1,"message":"4740","line":248,"column":25,"nodeType":"4578","messageId":"4579","endLine":248,"endColumn":69},{"ruleId":"4576","severity":1,"message":"4653","line":291,"column":65,"nodeType":"4578","messageId":"4579","endLine":296,"endColumn":67},{"ruleId":"4543","severity":1,"message":"4761","line":361,"column":7,"nodeType":"4545","messageId":"4546","endLine":361,"endColumn":12},{"ruleId":"4543","severity":1,"message":"4762","line":365,"column":7,"nodeType":"4545","messageId":"4546","endLine":365,"endColumn":13},{"ruleId":"4543","severity":1,"message":"4763","line":368,"column":7,"nodeType":"4545","messageId":"4546","endLine":368,"endColumn":14},{"ruleId":"4549","severity":1,"message":"4569","line":80,"column":8,"nodeType":"4551","endLine":80,"endColumn":10,"suggestions":"4764"},{"ruleId":"4549","severity":1,"message":"4598","line":108,"column":8,"nodeType":"4551","endLine":108,"endColumn":20,"suggestions":"4765"},{"ruleId":"4549","severity":1,"message":"4584","line":141,"column":8,"nodeType":"4551","endLine":141,"endColumn":10,"suggestions":"4766"},{"ruleId":"4549","severity":1,"message":"4586","line":143,"column":15,"nodeType":"4587","endLine":172,"endColumn":6},{"ruleId":"4549","severity":1,"message":"4601","line":172,"column":8,"nodeType":"4551","endLine":172,"endColumn":17,"suggestions":"4767"},{"ruleId":"4549","severity":1,"message":"4590","line":187,"column":8,"nodeType":"4551","endLine":187,"endColumn":29,"suggestions":"4768"},{"ruleId":"4549","severity":1,"message":"4592","line":194,"column":8,"nodeType":"4551","endLine":194,"endColumn":19,"suggestions":"4769"},{"ruleId":"4543","severity":1,"message":"4770","line":1,"column":38,"nodeType":"4545","messageId":"4546","endLine":1,"endColumn":44},{"ruleId":"4543","severity":1,"message":"4771","line":19,"column":27,"nodeType":"4545","messageId":"4546","endLine":19,"endColumn":33},{"ruleId":"4549","severity":1,"message":"4569","line":84,"column":8,"nodeType":"4551","endLine":84,"endColumn":10,"suggestions":"4772"},{"ruleId":"4549","severity":1,"message":"4598","line":117,"column":8,"nodeType":"4551","endLine":117,"endColumn":20,"suggestions":"4773"},{"ruleId":"4549","severity":1,"message":"4592","line":125,"column":8,"nodeType":"4551","endLine":125,"endColumn":19,"suggestions":"4774"},{"ruleId":"4549","severity":1,"message":"4775","line":162,"column":8,"nodeType":"4551","endLine":162,"endColumn":10,"suggestions":"4776"},{"ruleId":"4549","severity":1,"message":"4777","line":187,"column":8,"nodeType":"4551","endLine":187,"endColumn":23,"suggestions":"4778"},{"ruleId":"4549","severity":1,"message":"4586","line":247,"column":15,"nodeType":"4587","endLine":277,"endColumn":6},{"ruleId":"4549","severity":1,"message":"4601","line":277,"column":8,"nodeType":"4551","endLine":277,"endColumn":17,"suggestions":"4779"},{"ruleId":"4543","severity":1,"message":"4780","line":279,"column":11,"nodeType":"4545","messageId":"4546","endLine":279,"endColumn":22},{"ruleId":"4621","severity":1,"message":"4622","line":339,"column":40,"nodeType":"4623","messageId":"4624","endLine":339,"endColumn":42},{"ruleId":"4621","severity":1,"message":"4622","line":339,"column":70,"nodeType":"4623","messageId":"4624","endLine":339,"endColumn":72},{"ruleId":"4576","severity":1,"message":"4653","line":507,"column":57,"nodeType":"4578","messageId":"4579","endLine":521,"endColumn":59},{"ruleId":"4576","severity":1,"message":"4580","line":529,"column":49,"nodeType":"4578","messageId":"4579","endLine":529,"endColumn":136},{"ruleId":"4549","severity":1,"message":"4781","line":102,"column":8,"nodeType":"4551","endLine":102,"endColumn":20,"suggestions":"4782"},{"ruleId":"4549","severity":1,"message":"4553","line":108,"column":8,"nodeType":"4551","endLine":108,"endColumn":10,"suggestions":"4783"},{"ruleId":"4549","severity":1,"message":"4784","line":121,"column":8,"nodeType":"4551","endLine":121,"endColumn":25,"suggestions":"4785"},{"ruleId":"4549","severity":1,"message":"4625","line":153,"column":8,"nodeType":"4551","endLine":153,"endColumn":10,"suggestions":"4786"},{"ruleId":"4549","severity":1,"message":"4784","line":164,"column":8,"nodeType":"4551","endLine":164,"endColumn":27,"suggestions":"4787"},{"ruleId":"4549","severity":1,"message":"4784","line":177,"column":8,"nodeType":"4551","endLine":177,"endColumn":23,"suggestions":"4788"},{"ruleId":"4543","severity":1,"message":"4789","line":184,"column":11,"nodeType":"4545","messageId":"4546","endLine":184,"endColumn":39},{"ruleId":"4614","severity":1,"message":"4615","line":193,"column":28,"nodeType":"4587","messageId":"4616","endLine":193,"endColumn":30},{"ruleId":"4614","severity":1,"message":"4615","line":195,"column":39,"nodeType":"4587","messageId":"4616","endLine":195,"endColumn":41},{"ruleId":"4614","severity":1,"message":"4615","line":263,"column":42,"nodeType":"4587","messageId":"4616","endLine":263,"endColumn":44},{"ruleId":"4614","severity":1,"message":"4615","line":373,"column":47,"nodeType":"4587","messageId":"4616","endLine":373,"endColumn":49},{"ruleId":"4614","severity":1,"message":"4615","line":408,"column":47,"nodeType":"4587","messageId":"4616","endLine":408,"endColumn":49},{"ruleId":"4543","severity":1,"message":"4790","line":4,"column":3,"nodeType":"4545","messageId":"4546","endLine":4,"endColumn":27},{"ruleId":"4543","severity":1,"message":"4791","line":11,"column":13,"nodeType":"4545","messageId":"4546","endLine":11,"endColumn":19},{"ruleId":"4549","severity":1,"message":"4792","line":54,"column":6,"nodeType":"4551","endLine":54,"endColumn":8,"suggestions":"4793"},{"ruleId":"4549","severity":1,"message":"4569","line":62,"column":6,"nodeType":"4551","endLine":62,"endColumn":17,"suggestions":"4794"},{"ruleId":"4549","severity":1,"message":"4631","line":74,"column":6,"nodeType":"4551","endLine":74,"endColumn":19,"suggestions":"4795"},{"ruleId":"4543","severity":1,"message":"4796","line":58,"column":12,"nodeType":"4545","messageId":"4546","endLine":58,"endColumn":20},{"ruleId":"4549","severity":1,"message":"4569","line":83,"column":8,"nodeType":"4551","endLine":83,"endColumn":10,"suggestions":"4797"},{"ruleId":"4549","severity":1,"message":"4582","line":120,"column":8,"nodeType":"4551","endLine":120,"endColumn":20,"suggestions":"4798"},{"ruleId":"4549","severity":1,"message":"4584","line":158,"column":8,"nodeType":"4551","endLine":158,"endColumn":10,"suggestions":"4799"},{"ruleId":"4549","severity":1,"message":"4586","line":160,"column":15,"nodeType":"4587","endLine":199,"endColumn":6},{"ruleId":"4549","severity":1,"message":"4588","line":199,"column":8,"nodeType":"4551","endLine":199,"endColumn":17,"suggestions":"4800"},{"ruleId":"4549","severity":1,"message":"4590","line":218,"column":8,"nodeType":"4551","endLine":218,"endColumn":29,"suggestions":"4801"},{"ruleId":"4549","severity":1,"message":"4592","line":225,"column":8,"nodeType":"4551","endLine":225,"endColumn":19,"suggestions":"4802"},{"ruleId":"4543","severity":1,"message":"4790","line":4,"column":3,"nodeType":"4545","messageId":"4546","endLine":4,"endColumn":27},{"ruleId":"4543","severity":1,"message":"4594","line":16,"column":30,"nodeType":"4545","messageId":"4546","endLine":16,"endColumn":40},{"ruleId":"4543","severity":1,"message":"4803","line":25,"column":10,"nodeType":"4545","messageId":"4546","endLine":25,"endColumn":22},{"ruleId":"4549","severity":1,"message":"4792","line":56,"column":6,"nodeType":"4551","endLine":56,"endColumn":8,"suggestions":"4804"},{"ruleId":"4549","severity":1,"message":"4805","line":65,"column":6,"nodeType":"4551","endLine":65,"endColumn":18,"suggestions":"4806"},{"ruleId":"4549","severity":1,"message":"4569","line":73,"column":6,"nodeType":"4551","endLine":73,"endColumn":17,"suggestions":"4807"},{"ruleId":"4549","severity":1,"message":"4631","line":85,"column":6,"nodeType":"4551","endLine":85,"endColumn":22,"suggestions":"4808"},{"ruleId":"4543","severity":1,"message":"4770","line":1,"column":38,"nodeType":"4545","messageId":"4546","endLine":1,"endColumn":44},{"ruleId":"4543","severity":1,"message":"4703","line":19,"column":8,"nodeType":"4545","messageId":"4546","endLine":19,"endColumn":25},{"ruleId":"4543","severity":1,"message":"4705","line":20,"column":5,"nodeType":"4545","messageId":"4546","endLine":20,"endColumn":29},{"ruleId":"4543","severity":1,"message":"4704","line":21,"column":5,"nodeType":"4545","messageId":"4546","endLine":21,"endColumn":23},{"ruleId":"4543","severity":1,"message":"4771","line":23,"column":27,"nodeType":"4545","messageId":"4546","endLine":23,"endColumn":33},{"ruleId":"4543","severity":1,"message":"4809","line":29,"column":5,"nodeType":"4545","messageId":"4546","endLine":29,"endColumn":18},{"ruleId":"4543","severity":1,"message":"4810","line":49,"column":10,"nodeType":"4545","messageId":"4546","endLine":49,"endColumn":15},{"ruleId":"4549","severity":1,"message":"4569","line":95,"column":8,"nodeType":"4551","endLine":95,"endColumn":10,"suggestions":"4811"},{"ruleId":"4549","severity":1,"message":"4598","line":128,"column":8,"nodeType":"4551","endLine":128,"endColumn":20,"suggestions":"4812"},{"ruleId":"4549","severity":1,"message":"4592","line":136,"column":8,"nodeType":"4551","endLine":136,"endColumn":19,"suggestions":"4813"},{"ruleId":"4549","severity":1,"message":"4775","line":173,"column":8,"nodeType":"4551","endLine":173,"endColumn":10,"suggestions":"4814"},{"ruleId":"4549","severity":1,"message":"4777","line":195,"column":8,"nodeType":"4551","endLine":195,"endColumn":23,"suggestions":"4815"},{"ruleId":"4549","severity":1,"message":"4586","line":249,"column":15,"nodeType":"4587","endLine":279,"endColumn":6},{"ruleId":"4549","severity":1,"message":"4601","line":279,"column":8,"nodeType":"4551","endLine":279,"endColumn":17,"suggestions":"4816"},{"ruleId":"4543","severity":1,"message":"4780","line":281,"column":11,"nodeType":"4545","messageId":"4546","endLine":281,"endColumn":22},{"ruleId":"4621","severity":1,"message":"4622","line":341,"column":40,"nodeType":"4623","messageId":"4624","endLine":341,"endColumn":42},{"ruleId":"4621","severity":1,"message":"4622","line":341,"column":73,"nodeType":"4623","messageId":"4624","endLine":341,"endColumn":75},{"ruleId":"4576","severity":1,"message":"4653","line":506,"column":53,"nodeType":"4578","messageId":"4579","endLine":520,"endColumn":55},{"ruleId":"4576","severity":1,"message":"4580","line":528,"column":45,"nodeType":"4578","messageId":"4579","endLine":528,"endColumn":132},{"ruleId":"4549","severity":1,"message":"4569","line":58,"column":6,"nodeType":"4551","endLine":58,"endColumn":8,"suggestions":"4817"},{"ruleId":"4549","severity":1,"message":"4569","line":58,"column":6,"nodeType":"4551","endLine":58,"endColumn":8,"suggestions":"4818"},{"ruleId":"4549","severity":1,"message":"4569","line":97,"column":8,"nodeType":"4551","endLine":97,"endColumn":10,"suggestions":"4819"},{"ruleId":"4549","severity":1,"message":"4820","line":106,"column":9,"nodeType":"4551","endLine":106,"endColumn":21,"suggestions":"4821"},{"ruleId":"4549","severity":1,"message":"4584","line":152,"column":8,"nodeType":"4551","endLine":152,"endColumn":10,"suggestions":"4822"},{"ruleId":"4549","severity":1,"message":"4823","line":161,"column":9,"nodeType":"4551","endLine":161,"endColumn":18,"suggestions":"4824"},{"ruleId":"4549","severity":1,"message":"4590","line":177,"column":8,"nodeType":"4551","endLine":177,"endColumn":29,"suggestions":"4825"},{"ruleId":"4549","severity":1,"message":"4592","line":185,"column":8,"nodeType":"4551","endLine":185,"endColumn":19,"suggestions":"4826"},{"ruleId":"4549","severity":1,"message":"4569","line":46,"column":6,"nodeType":"4551","endLine":46,"endColumn":8,"suggestions":"4827"},{"ruleId":"4543","severity":1,"message":"4790","line":4,"column":3,"nodeType":"4545","messageId":"4546","endLine":4,"endColumn":27},{"ruleId":"4543","severity":1,"message":"4594","line":16,"column":30,"nodeType":"4545","messageId":"4546","endLine":16,"endColumn":40},{"ruleId":"4543","severity":1,"message":"4803","line":25,"column":10,"nodeType":"4545","messageId":"4546","endLine":25,"endColumn":22},{"ruleId":"4549","severity":1,"message":"4792","line":59,"column":6,"nodeType":"4551","endLine":59,"endColumn":8,"suggestions":"4828"},{"ruleId":"4549","severity":1,"message":"4805","line":68,"column":6,"nodeType":"4551","endLine":68,"endColumn":18,"suggestions":"4829"},{"ruleId":"4549","severity":1,"message":"4569","line":76,"column":6,"nodeType":"4551","endLine":76,"endColumn":17,"suggestions":"4830"},{"ruleId":"4549","severity":1,"message":"4631","line":88,"column":6,"nodeType":"4551","endLine":88,"endColumn":19,"suggestions":"4831"},{"ruleId":"4543","severity":1,"message":"4701","line":2,"column":10,"nodeType":"4545","messageId":"4546","endLine":2,"endColumn":16},{"ruleId":"4543","severity":1,"message":"4699","line":2,"column":80,"nodeType":"4545","messageId":"4546","endLine":2,"endColumn":83},{"ruleId":"4549","severity":1,"message":"4832","line":94,"column":8,"nodeType":"4551","endLine":94,"endColumn":10,"suggestions":"4833"},{"ruleId":"4549","severity":1,"message":"4834","line":114,"column":8,"nodeType":"4551","endLine":114,"endColumn":20,"suggestions":"4835"},{"ruleId":"4549","severity":1,"message":"4625","line":143,"column":8,"nodeType":"4551","endLine":143,"endColumn":10,"suggestions":"4836"},{"ruleId":"4549","severity":1,"message":"4837","line":168,"column":8,"nodeType":"4551","endLine":168,"endColumn":17,"suggestions":"4838"},{"ruleId":"4576","severity":1,"message":"4839","line":237,"column":21,"nodeType":"4578","messageId":"4579","endLine":247,"endColumn":28},{"ruleId":"4660","severity":1,"message":"4661","line":285,"column":49,"nodeType":"4662","messageId":"4663","endLine":285,"endColumn":51},{"ruleId":"4660","severity":1,"message":"4661","line":289,"column":49,"nodeType":"4662","messageId":"4663","endLine":289,"endColumn":51},{"ruleId":"4576","severity":1,"message":"4740","line":321,"column":17,"nodeType":"4578","messageId":"4579","endLine":325,"endColumn":19},{"ruleId":"4576","severity":1,"message":"4577","line":341,"column":37,"nodeType":"4578","messageId":"4579","endLine":352,"endColumn":39},{"ruleId":"4576","severity":1,"message":"4839","line":359,"column":33,"nodeType":"4578","messageId":"4579","endLine":366,"endColumn":34},{"ruleId":"4576","severity":1,"message":"4839","line":370,"column":33,"nodeType":"4578","messageId":"4579","endLine":376,"endColumn":34},{"ruleId":"4660","severity":1,"message":"4661","line":438,"column":88,"nodeType":"4662","messageId":"4663","endLine":438,"endColumn":90},{"ruleId":"4549","severity":1,"message":"4569","line":101,"column":8,"nodeType":"4551","endLine":101,"endColumn":10,"suggestions":"4840"},{"ruleId":"4549","severity":1,"message":"4598","line":128,"column":8,"nodeType":"4551","endLine":128,"endColumn":20,"suggestions":"4841"},{"ruleId":"4549","severity":1,"message":"4584","line":163,"column":8,"nodeType":"4551","endLine":163,"endColumn":10,"suggestions":"4842"},{"ruleId":"4549","severity":1,"message":"4586","line":165,"column":15,"nodeType":"4587","endLine":193,"endColumn":6},{"ruleId":"4549","severity":1,"message":"4627","line":193,"column":8,"nodeType":"4551","endLine":193,"endColumn":17,"suggestions":"4843"},{"ruleId":"4549","severity":1,"message":"4631","line":207,"column":8,"nodeType":"4551","endLine":207,"endColumn":29,"suggestions":"4844"},{"ruleId":"4549","severity":1,"message":"4592","line":215,"column":8,"nodeType":"4551","endLine":215,"endColumn":19,"suggestions":"4845"},{"ruleId":"4549","severity":1,"message":"4846","line":230,"column":8,"nodeType":"4551","endLine":230,"endColumn":23,"suggestions":"4847"},{"ruleId":"4543","severity":1,"message":"4848","line":327,"column":11,"nodeType":"4545","messageId":"4546","endLine":327,"endColumn":27},{"ruleId":"4543","severity":1,"message":"4780","line":357,"column":11,"nodeType":"4545","messageId":"4546","endLine":357,"endColumn":22},{"ruleId":"4543","severity":1,"message":"4771","line":29,"column":27,"nodeType":"4545","messageId":"4546","endLine":29,"endColumn":33},{"ruleId":"4549","severity":1,"message":"4569","line":84,"column":8,"nodeType":"4551","endLine":84,"endColumn":10,"suggestions":"4849"},{"ruleId":"4549","severity":1,"message":"4598","line":112,"column":8,"nodeType":"4551","endLine":112,"endColumn":20,"suggestions":"4850"},{"ruleId":"4549","severity":1,"message":"4592","line":120,"column":8,"nodeType":"4551","endLine":120,"endColumn":19,"suggestions":"4851"},{"ruleId":"4549","severity":1,"message":"4775","line":155,"column":8,"nodeType":"4551","endLine":155,"endColumn":10,"suggestions":"4852"},{"ruleId":"4549","severity":1,"message":"4586","line":157,"column":15,"nodeType":"4587","endLine":187,"endColumn":6},{"ruleId":"4549","severity":1,"message":"4601","line":187,"column":8,"nodeType":"4551","endLine":187,"endColumn":17,"suggestions":"4853"},{"ruleId":"4549","severity":1,"message":"4777","line":212,"column":8,"nodeType":"4551","endLine":212,"endColumn":23,"suggestions":"4854"},{"ruleId":"4543","severity":1,"message":"4780","line":248,"column":11,"nodeType":"4545","messageId":"4546","endLine":248,"endColumn":22},{"ruleId":"4621","severity":1,"message":"4622","line":287,"column":40,"nodeType":"4623","messageId":"4624","endLine":287,"endColumn":42},{"ruleId":"4621","severity":1,"message":"4622","line":287,"column":76,"nodeType":"4623","messageId":"4624","endLine":287,"endColumn":78},{"ruleId":"4621","severity":1,"message":"4622","line":336,"column":40,"nodeType":"4623","messageId":"4624","endLine":336,"endColumn":42},{"ruleId":"4621","severity":1,"message":"4622","line":336,"column":77,"nodeType":"4623","messageId":"4624","endLine":336,"endColumn":79},{"ruleId":"4576","severity":1,"message":"4653","line":452,"column":57,"nodeType":"4578","messageId":"4579","endLine":466,"endColumn":59},{"ruleId":"4576","severity":1,"message":"4580","line":474,"column":49,"nodeType":"4578","messageId":"4579","endLine":474,"endColumn":136},{"ruleId":"4543","severity":1,"message":"4855","line":11,"column":8,"nodeType":"4545","messageId":"4546","endLine":11,"endColumn":19},{"ruleId":"4543","severity":1,"message":"4856","line":39,"column":20,"nodeType":"4545","messageId":"4546","endLine":39,"endColumn":31},{"ruleId":"4543","severity":1,"message":"4857","line":132,"column":9,"nodeType":"4545","messageId":"4546","endLine":132,"endColumn":24},{"ruleId":"4549","severity":1,"message":"4858","line":201,"column":8,"nodeType":"4551","endLine":201,"endColumn":10,"suggestions":"4859"},{"ruleId":"4549","severity":1,"message":"4860","line":209,"column":9,"nodeType":"4551","endLine":209,"endColumn":21,"suggestions":"4861"},{"ruleId":"4549","severity":1,"message":"4862","line":242,"column":8,"nodeType":"4551","endLine":242,"endColumn":31,"suggestions":"4863"},{"ruleId":"4549","severity":1,"message":"4864","line":304,"column":8,"nodeType":"4551","endLine":304,"endColumn":10,"suggestions":"4865"},{"ruleId":"4549","severity":1,"message":"4586","line":306,"column":15,"nodeType":"4587","endLine":372,"endColumn":6},{"ruleId":"4549","severity":1,"message":"4866","line":372,"column":8,"nodeType":"4551","endLine":372,"endColumn":17,"suggestions":"4867"},{"ruleId":"4549","severity":1,"message":"4868","line":379,"column":9,"nodeType":"4551","endLine":379,"endColumn":20,"suggestions":"4869"},{"ruleId":"4549","severity":1,"message":"4592","line":385,"column":9,"nodeType":"4551","endLine":385,"endColumn":20,"suggestions":"4870"},{"ruleId":"4549","severity":1,"message":"4871","line":404,"column":8,"nodeType":"4551","endLine":404,"endColumn":24,"suggestions":"4872"},{"ruleId":"4549","severity":1,"message":"4873","line":411,"column":8,"nodeType":"4551","endLine":411,"endColumn":25,"suggestions":"4874"},{"ruleId":"4549","severity":1,"message":"4873","line":420,"column":8,"nodeType":"4551","endLine":420,"endColumn":19,"suggestions":"4875"},{"ruleId":"4549","severity":1,"message":"4569","line":424,"column":8,"nodeType":"4551","endLine":424,"endColumn":24,"suggestions":"4876"},{"ruleId":"4549","severity":1,"message":"4877","line":428,"column":8,"nodeType":"4551","endLine":428,"endColumn":26,"suggestions":"4878"},{"ruleId":"4549","severity":1,"message":"4879","line":442,"column":8,"nodeType":"4551","endLine":442,"endColumn":30,"suggestions":"4880"},{"ruleId":"4549","severity":1,"message":"4881","line":474,"column":8,"nodeType":"4551","endLine":474,"endColumn":68,"suggestions":"4882"},{"ruleId":"4543","severity":1,"message":"4883","line":839,"column":34,"nodeType":"4545","messageId":"4546","endLine":839,"endColumn":50},{"ruleId":"4884","severity":1,"message":"4885","line":1164,"column":64,"nodeType":"4886","messageId":"4887","endLine":1164,"endColumn":134,"fix":"4888"},{"ruleId":"4884","severity":1,"message":"4885","line":1178,"column":64,"nodeType":"4886","messageId":"4887","endLine":1178,"endColumn":134,"fix":"4889"},{"ruleId":"4576","severity":1,"message":"4653","line":1365,"column":53,"nodeType":"4578","messageId":"4579","endLine":1375,"endColumn":55},{"ruleId":"4576","severity":1,"message":"4577","line":1387,"column":57,"nodeType":"4578","messageId":"4579","endLine":1398,"endColumn":59},{"ruleId":"4576","severity":1,"message":"4577","line":1411,"column":53,"nodeType":"4578","messageId":"4579","endLine":1420,"endColumn":55},{"ruleId":"4576","severity":1,"message":"4580","line":1438,"column":57,"nodeType":"4578","messageId":"4579","endLine":1460,"endColumn":66},{"ruleId":"4576","severity":1,"message":"4890","line":1462,"column":57,"nodeType":"4578","messageId":"4579","endLine":1472,"endColumn":59},{"ruleId":"4576","severity":1,"message":"4577","line":1502,"column":53,"nodeType":"4578","messageId":"4579","endLine":1511,"endColumn":55},{"ruleId":"4576","severity":1,"message":"4577","line":1589,"column":53,"nodeType":"4578","messageId":"4579","endLine":1598,"endColumn":55},{"ruleId":"4576","severity":1,"message":"4653","line":1652,"column":57,"nodeType":"4578","messageId":"4579","endLine":1657,"endColumn":59},{"ruleId":"4576","severity":1,"message":"4653","line":1667,"column":57,"nodeType":"4578","messageId":"4579","endLine":1672,"endColumn":59},{"ruleId":"4891","severity":1,"message":"4892","line":46,"column":9,"nodeType":"4893","messageId":"4663","endLine":46,"endColumn":20},{"ruleId":"4891","severity":1,"message":"4894","line":72,"column":13,"nodeType":"4893","messageId":"4663","endLine":72,"endColumn":23},{"ruleId":"4891","severity":1,"message":"4895","line":73,"column":13,"nodeType":"4893","messageId":"4663","endLine":73,"endColumn":22},{"ruleId":"4549","severity":1,"message":"4896","line":204,"column":8,"nodeType":"4551","endLine":204,"endColumn":10,"suggestions":"4897"},{"ruleId":"4549","severity":1,"message":"4862","line":210,"column":8,"nodeType":"4551","endLine":210,"endColumn":10,"suggestions":"4898"},{"ruleId":"4549","severity":1,"message":"4592","line":218,"column":8,"nodeType":"4551","endLine":218,"endColumn":19,"suggestions":"4899"},{"ruleId":"4549","severity":1,"message":"4879","line":227,"column":8,"nodeType":"4551","endLine":227,"endColumn":17,"suggestions":"4900"},{"ruleId":"4549","severity":1,"message":"4879","line":237,"column":8,"nodeType":"4551","endLine":237,"endColumn":23,"suggestions":"4901"},{"ruleId":"4549","severity":1,"message":"4879","line":245,"column":8,"nodeType":"4551","endLine":245,"endColumn":30,"suggestions":"4902"},{"ruleId":"4549","severity":1,"message":"4903","line":265,"column":8,"nodeType":"4551","endLine":265,"endColumn":25,"suggestions":"4904"},{"ruleId":"4549","severity":1,"message":"4738","line":271,"column":8,"nodeType":"4551","endLine":271,"endColumn":26,"suggestions":"4905"},{"ruleId":"4549","severity":1,"message":"4569","line":275,"column":8,"nodeType":"4551","endLine":275,"endColumn":24,"suggestions":"4906"},{"ruleId":"4549","severity":1,"message":"4738","line":293,"column":8,"nodeType":"4551","endLine":293,"endColumn":19,"suggestions":"4907"},{"ruleId":"4576","severity":1,"message":"4653","line":573,"column":33,"nodeType":"4578","messageId":"4579","endLine":582,"endColumn":35},{"ruleId":"4576","severity":1,"message":"4653","line":594,"column":33,"nodeType":"4578","messageId":"4579","endLine":603,"endColumn":35},{"ruleId":"4576","severity":1,"message":"4577","line":616,"column":37,"nodeType":"4578","messageId":"4579","endLine":627,"endColumn":39},{"ruleId":"4576","severity":1,"message":"4577","line":642,"column":33,"nodeType":"4578","messageId":"4579","endLine":652,"endColumn":35},{"ruleId":"4576","severity":1,"message":"4580","line":659,"column":25,"nodeType":"4578","messageId":"4579","endLine":659,"endColumn":109},{"ruleId":"4576","severity":1,"message":"4740","line":689,"column":17,"nodeType":"4578","messageId":"4579","endLine":691,"endColumn":71},{"ruleId":"4576","severity":1,"message":"4908","line":727,"column":13,"nodeType":"4578","messageId":"4579","endLine":727,"endColumn":32},{"ruleId":"4543","severity":1,"message":"4909","line":15,"column":10,"nodeType":"4545","messageId":"4546","endLine":15,"endColumn":21},{"ruleId":"4549","severity":1,"message":"4586","line":33,"column":13,"nodeType":"4587","endLine":43,"endColumn":4},{"ruleId":"4549","severity":1,"message":"4631","line":43,"column":6,"nodeType":"4551","endLine":43,"endColumn":33,"suggestions":"4910"},{"ruleId":"4549","severity":1,"message":"4911","line":54,"column":6,"nodeType":"4551","endLine":54,"endColumn":8,"suggestions":"4912"},{"ruleId":"4549","severity":1,"message":"4913","line":93,"column":7,"nodeType":"4662","endLine":93,"endColumn":39},{"ruleId":"4549","severity":1,"message":"4914","line":126,"column":6,"nodeType":"4551","endLine":126,"endColumn":64,"suggestions":"4915"},{"ruleId":"4549","severity":1,"message":"4916","line":126,"column":31,"nodeType":"4662","endLine":126,"endColumn":63},{"ruleId":"4614","severity":1,"message":"4917","line":177,"column":53,"nodeType":"4587","messageId":"4619","endLine":177,"endColumn":55},{"ruleId":"4543","severity":1,"message":"4918","line":21,"column":3,"nodeType":"4545","messageId":"4546","endLine":21,"endColumn":28},{"ruleId":"4543","severity":1,"message":"4919","line":23,"column":3,"nodeType":"4545","messageId":"4546","endLine":23,"endColumn":37},{"ruleId":"4549","severity":1,"message":"4586","line":70,"column":13,"nodeType":"4587","endLine":89,"endColumn":4},{"ruleId":"4549","severity":1,"message":"4920","line":89,"column":6,"nodeType":"4551","endLine":89,"endColumn":15,"suggestions":"4921"},{"ruleId":"4543","severity":1,"message":"4922","line":187,"column":10,"nodeType":"4545","messageId":"4546","endLine":187,"endColumn":21},{"ruleId":"4543","severity":1,"message":"4923","line":189,"column":9,"nodeType":"4545","messageId":"4546","endLine":189,"endColumn":25},{"ruleId":"4543","severity":1,"message":"4924","line":193,"column":9,"nodeType":"4545","messageId":"4546","endLine":193,"endColumn":25},{"ruleId":"4543","severity":1,"message":"4925","line":4,"column":20,"nodeType":"4545","messageId":"4546","endLine":4,"endColumn":34},{"ruleId":"4543","severity":1,"message":"4855","line":8,"column":8,"nodeType":"4545","messageId":"4546","endLine":8,"endColumn":19},{"ruleId":"4543","severity":1,"message":"4926","line":7,"column":3,"nodeType":"4545","messageId":"4546","endLine":7,"endColumn":32},{"ruleId":"4576","severity":1,"message":"4653","line":132,"column":45,"nodeType":"4578","messageId":"4579","endLine":142,"endColumn":47},{"ruleId":"4543","severity":1,"message":"4927","line":4,"column":8,"nodeType":"4545","messageId":"4546","endLine":4,"endColumn":12},{"ruleId":"4543","severity":1,"message":"4928","line":5,"column":8,"nodeType":"4545","messageId":"4546","endLine":5,"endColumn":12},{"ruleId":"4543","severity":1,"message":"4929","line":6,"column":8,"nodeType":"4545","messageId":"4546","endLine":6,"endColumn":12},{"ruleId":"4614","severity":1,"message":"4615","line":19,"column":25,"nodeType":"4587","messageId":"4616","endLine":19,"endColumn":27},{"ruleId":"4614","severity":1,"message":"4615","line":38,"column":25,"nodeType":"4587","messageId":"4616","endLine":38,"endColumn":27},{"ruleId":"4614","severity":1,"message":"4615","line":18,"column":25,"nodeType":"4587","messageId":"4616","endLine":18,"endColumn":27},{"ruleId":"4543","severity":1,"message":"4930","line":2,"column":10,"nodeType":"4545","messageId":"4546","endLine":2,"endColumn":23},{"ruleId":"4543","severity":1,"message":"4930","line":3,"column":3,"nodeType":"4545","messageId":"4546","endLine":3,"endColumn":16},{"ruleId":"4543","severity":1,"message":"4930","line":2,"column":10,"nodeType":"4545","messageId":"4546","endLine":2,"endColumn":23},{"ruleId":"4543","severity":1,"message":"4931","line":33,"column":10,"nodeType":"4545","messageId":"4546","endLine":33,"endColumn":27},{"ruleId":"4543","severity":1,"message":"4930","line":29,"column":10,"nodeType":"4545","messageId":"4546","endLine":29,"endColumn":23},{"ruleId":"4614","severity":1,"message":"4615","line":90,"column":23,"nodeType":"4587","messageId":"4616","endLine":90,"endColumn":25},{"ruleId":"4543","severity":1,"message":"4909","line":9,"column":10,"nodeType":"4545","messageId":"4546","endLine":9,"endColumn":21},{"ruleId":"4543","severity":1,"message":"4932","line":12,"column":3,"nodeType":"4545","messageId":"4546","endLine":12,"endColumn":11},{"ruleId":"4543","severity":1,"message":"4933","line":14,"column":3,"nodeType":"4545","messageId":"4546","endLine":14,"endColumn":15},{"ruleId":"4543","severity":1,"message":"4934","line":1,"column":155,"nodeType":"4545","messageId":"4546","endLine":1,"endColumn":182},{"ruleId":"4543","severity":1,"message":"4935","line":16,"column":10,"nodeType":"4545","messageId":"4546","endLine":16,"endColumn":20},{"ruleId":"4543","severity":1,"message":"4936","line":23,"column":12,"nodeType":"4545","messageId":"4546","endLine":23,"endColumn":29},{"ruleId":"4543","severity":1,"message":"4937","line":23,"column":31,"nodeType":"4545","messageId":"4546","endLine":23,"endColumn":51},{"ruleId":"4660","severity":1,"message":"4661","line":59,"column":38,"nodeType":"4662","messageId":"4663","endLine":59,"endColumn":40},{"ruleId":"4660","severity":1,"message":"4661","line":61,"column":19,"nodeType":"4662","messageId":"4663","endLine":61,"endColumn":21},{"ruleId":"4660","severity":1,"message":"4661","line":77,"column":34,"nodeType":"4662","messageId":"4663","endLine":77,"endColumn":36},{"ruleId":"4660","severity":1,"message":"4661","line":79,"column":19,"nodeType":"4662","messageId":"4663","endLine":79,"endColumn":21},{"ruleId":"4576","severity":1,"message":"4577","line":167,"column":41,"nodeType":"4578","messageId":"4579","endLine":175,"endColumn":43},{"ruleId":"4576","severity":1,"message":"4577","line":180,"column":41,"nodeType":"4578","messageId":"4579","endLine":188,"endColumn":43},{"ruleId":"4576","severity":1,"message":"4653","line":73,"column":37,"nodeType":"4578","messageId":"4579","endLine":85,"endColumn":39},{"ruleId":"4576","severity":1,"message":"4653","line":143,"column":23,"nodeType":"4578","messageId":"4579","endLine":153,"endColumn":25},{"ruleId":"4543","severity":1,"message":"4737","line":1,"column":28,"nodeType":"4545","messageId":"4546","endLine":1,"endColumn":36},{"ruleId":"4549","severity":1,"message":"4938","line":64,"column":8,"nodeType":"4551","endLine":64,"endColumn":19,"suggestions":"4939"},{"ruleId":"4543","severity":1,"message":"4940","line":21,"column":5,"nodeType":"4545","messageId":"4546","endLine":21,"endColumn":40},{"ruleId":"4543","severity":1,"message":"4941","line":4,"column":3,"nodeType":"4545","messageId":"4546","endLine":4,"endColumn":14},{"ruleId":"4543","severity":1,"message":"4942","line":5,"column":3,"nodeType":"4545","messageId":"4546","endLine":5,"endColumn":22},{"ruleId":"4543","severity":1,"message":"4943","line":6,"column":3,"nodeType":"4545","messageId":"4546","endLine":6,"endColumn":12},{"ruleId":"4543","severity":1,"message":"4944","line":10,"column":3,"nodeType":"4545","messageId":"4546","endLine":10,"endColumn":40},{"ruleId":"4543","severity":1,"message":"4945","line":47,"column":11,"nodeType":"4545","messageId":"4546","endLine":47,"endColumn":20},{"ruleId":"4543","severity":1,"message":"4640","line":47,"column":21,"nodeType":"4545","messageId":"4546","endLine":47,"endColumn":31},{"ruleId":"4543","severity":1,"message":"4737","line":1,"column":17,"nodeType":"4545","messageId":"4546","endLine":1,"endColumn":25},{"ruleId":"4543","severity":1,"message":"4737","line":1,"column":17,"nodeType":"4545","messageId":"4546","endLine":1,"endColumn":25},{"ruleId":"4543","severity":1,"message":"4737","line":1,"column":28,"nodeType":"4545","messageId":"4546","endLine":1,"endColumn":36},{"ruleId":"4549","severity":1,"message":"4938","line":65,"column":6,"nodeType":"4551","endLine":65,"endColumn":17,"suggestions":"4946"},{"ruleId":"4543","severity":1,"message":"4737","line":1,"column":28,"nodeType":"4545","messageId":"4546","endLine":1,"endColumn":36},{"ruleId":"4549","severity":1,"message":"4938","line":66,"column":6,"nodeType":"4551","endLine":66,"endColumn":17,"suggestions":"4947"},{"ruleId":"4549","severity":1,"message":"4569","line":57,"column":6,"nodeType":"4551","endLine":57,"endColumn":8,"suggestions":"4948"},{"ruleId":"4543","severity":1,"message":"4796","line":60,"column":12,"nodeType":"4545","messageId":"4546","endLine":60,"endColumn":20},{"ruleId":"4549","severity":1,"message":"4569","line":88,"column":8,"nodeType":"4551","endLine":88,"endColumn":10,"suggestions":"4949"},{"ruleId":"4549","severity":1,"message":"4598","line":115,"column":8,"nodeType":"4551","endLine":115,"endColumn":20,"suggestions":"4950"},{"ruleId":"4549","severity":1,"message":"4584","line":157,"column":8,"nodeType":"4551","endLine":157,"endColumn":10,"suggestions":"4951"},{"ruleId":"4549","severity":1,"message":"4586","line":159,"column":15,"nodeType":"4587","endLine":190,"endColumn":6},{"ruleId":"4549","severity":1,"message":"4601","line":190,"column":8,"nodeType":"4551","endLine":190,"endColumn":17,"suggestions":"4952"},{"ruleId":"4549","severity":1,"message":"4590","line":205,"column":8,"nodeType":"4551","endLine":205,"endColumn":29,"suggestions":"4953"},{"ruleId":"4549","severity":1,"message":"4592","line":212,"column":8,"nodeType":"4551","endLine":212,"endColumn":19,"suggestions":"4954"},{"ruleId":"4543","severity":1,"message":"4930","line":24,"column":10,"nodeType":"4545","messageId":"4546","endLine":24,"endColumn":23},{"ruleId":"4549","severity":1,"message":"4955","line":30,"column":8,"nodeType":"4551","endLine":30,"endColumn":10,"suggestions":"4956"},{"ruleId":"4957","severity":1,"message":"4958","line":175,"column":29,"nodeType":"4578","endLine":175,"endColumn":50},{"ruleId":"4959","severity":1,"message":"4960","line":175,"column":88,"nodeType":"4578","endLine":175,"endColumn":132},{"ruleId":"4549","severity":1,"message":"4569","line":59,"column":6,"nodeType":"4551","endLine":59,"endColumn":8,"suggestions":"4961"},{"ruleId":"4543","severity":1,"message":"4930","line":28,"column":10,"nodeType":"4545","messageId":"4546","endLine":28,"endColumn":23},{"ruleId":"4549","severity":1,"message":"4569","line":72,"column":8,"nodeType":"4551","endLine":72,"endColumn":10,"suggestions":"4962"},{"ruleId":"4549","severity":1,"message":"4598","line":97,"column":8,"nodeType":"4551","endLine":97,"endColumn":20,"suggestions":"4963"},{"ruleId":"4549","severity":1,"message":"4584","line":132,"column":8,"nodeType":"4551","endLine":132,"endColumn":10,"suggestions":"4964"},{"ruleId":"4549","severity":1,"message":"4586","line":133,"column":15,"nodeType":"4587","endLine":166,"endColumn":6},{"ruleId":"4549","severity":1,"message":"4601","line":166,"column":8,"nodeType":"4551","endLine":166,"endColumn":17,"suggestions":"4965"},{"ruleId":"4549","severity":1,"message":"4590","line":182,"column":8,"nodeType":"4551","endLine":182,"endColumn":29,"suggestions":"4966"},{"ruleId":"4549","severity":1,"message":"4592","line":189,"column":8,"nodeType":"4551","endLine":189,"endColumn":19,"suggestions":"4967"},{"ruleId":"4614","severity":1,"message":"4615","line":63,"column":26,"nodeType":"4587","messageId":"4616","endLine":63,"endColumn":28},{"ruleId":"4543","severity":1,"message":"4968","line":1,"column":21,"nodeType":"4545","messageId":"4546","endLine":1,"endColumn":30},{"ruleId":"4543","severity":1,"message":"4969","line":6,"column":8,"nodeType":"4545","messageId":"4546","endLine":6,"endColumn":13},{"ruleId":"4543","severity":1,"message":"4970","line":2,"column":8,"nodeType":"4545","messageId":"4546","endLine":2,"endColumn":16},{"ruleId":"4543","severity":1,"message":"4971","line":3,"column":8,"nodeType":"4545","messageId":"4546","endLine":3,"endColumn":19},{"ruleId":"4543","severity":1,"message":"4972","line":392,"column":9,"nodeType":"4545","messageId":"4546","endLine":392,"endColumn":21},{"ruleId":"4543","severity":1,"message":"4973","line":4,"column":10,"nodeType":"4545","messageId":"4546","endLine":4,"endColumn":14},{"ruleId":"4891","severity":1,"message":"4974","line":107,"column":381,"nodeType":"4893","messageId":"4663","endLine":107,"endColumn":390},{"ruleId":"4891","severity":1,"message":"4974","line":262,"column":329,"nodeType":"4893","messageId":"4663","endLine":262,"endColumn":338},{"ruleId":"4664","severity":1,"message":"4975","line":455,"column":13,"nodeType":"4545","messageId":"4666","endLine":455,"endColumn":24},{"ruleId":"4976","severity":1,"message":"4977","line":457,"column":13,"nodeType":"4551","messageId":"4978","endLine":457,"endColumn":72},{"ruleId":"4543","severity":1,"message":"4979","line":803,"column":11,"nodeType":"4545","messageId":"4546","endLine":803,"endColumn":16},{"ruleId":"4543","severity":1,"message":"4700","line":260,"column":30,"nodeType":"4545","messageId":"4546","endLine":260,"endColumn":33},{"ruleId":"4549","severity":1,"message":"4569","line":329,"column":6,"nodeType":"4551","endLine":329,"endColumn":33,"suggestions":"4980"},{"ruleId":"4549","severity":1,"message":"4981","line":344,"column":6,"nodeType":"4551","endLine":344,"endColumn":19,"suggestions":"4982"},{"ruleId":"4614","severity":1,"message":"4615","line":354,"column":30,"nodeType":"4587","messageId":"4616","endLine":354,"endColumn":32},{"ruleId":"4614","severity":1,"message":"4615","line":355,"column":35,"nodeType":"4587","messageId":"4616","endLine":355,"endColumn":37},{"ruleId":"4549","severity":1,"message":"4569","line":57,"column":8,"nodeType":"4551","endLine":57,"endColumn":10,"suggestions":"4983"},{"ruleId":"4549","severity":1,"message":"4569","line":92,"column":8,"nodeType":"4551","endLine":92,"endColumn":10,"suggestions":"4984"},{"ruleId":"4549","severity":1,"message":"4598","line":119,"column":8,"nodeType":"4551","endLine":119,"endColumn":20,"suggestions":"4985"},{"ruleId":"4549","severity":1,"message":"4584","line":157,"column":8,"nodeType":"4551","endLine":157,"endColumn":10,"suggestions":"4986"},{"ruleId":"4549","severity":1,"message":"4569","line":165,"column":8,"nodeType":"4551","endLine":165,"endColumn":10,"suggestions":"4987"},{"ruleId":"4549","severity":1,"message":"4586","line":167,"column":15,"nodeType":"4587","endLine":197,"endColumn":6},{"ruleId":"4549","severity":1,"message":"4601","line":197,"column":8,"nodeType":"4551","endLine":197,"endColumn":17,"suggestions":"4988"},{"ruleId":"4549","severity":1,"message":"4590","line":214,"column":8,"nodeType":"4551","endLine":214,"endColumn":29,"suggestions":"4989"},{"ruleId":"4549","severity":1,"message":"4592","line":221,"column":8,"nodeType":"4551","endLine":221,"endColumn":19,"suggestions":"4990"},{"ruleId":"4543","severity":1,"message":"4699","line":7,"column":5,"nodeType":"4545","messageId":"4546","endLine":7,"endColumn":8},{"ruleId":"4543","severity":1,"message":"4991","line":8,"column":5,"nodeType":"4545","messageId":"4546","endLine":8,"endColumn":10},{"ruleId":"4543","severity":1,"message":"4992","line":23,"column":10,"nodeType":"4545","messageId":"4546","endLine":23,"endColumn":24},{"ruleId":"4543","severity":1,"message":"4993","line":98,"column":9,"nodeType":"4545","messageId":"4546","endLine":98,"endColumn":21},{"ruleId":"4549","severity":1,"message":"4569","line":130,"column":8,"nodeType":"4551","endLine":130,"endColumn":10,"suggestions":"4994"},{"ruleId":"4549","severity":1,"message":"4862","line":145,"column":8,"nodeType":"4551","endLine":145,"endColumn":31,"suggestions":"4995"},{"ruleId":"4549","severity":1,"message":"4598","line":163,"column":8,"nodeType":"4551","endLine":163,"endColumn":20,"suggestions":"4996"},{"ruleId":"4549","severity":1,"message":"4586","line":165,"column":15,"nodeType":"4587","endLine":204,"endColumn":6},{"ruleId":"4549","severity":1,"message":"4997","line":204,"column":8,"nodeType":"4551","endLine":204,"endColumn":17,"suggestions":"4998"},{"ruleId":"4549","severity":1,"message":"4631","line":220,"column":8,"nodeType":"4551","endLine":220,"endColumn":29,"suggestions":"4999"},{"ruleId":"4549","severity":1,"message":"4592","line":227,"column":8,"nodeType":"4551","endLine":227,"endColumn":19,"suggestions":"5000"},{"ruleId":"4549","severity":1,"message":"4569","line":241,"column":8,"nodeType":"4551","endLine":241,"endColumn":23,"suggestions":"5001"},{"ruleId":"4549","severity":1,"message":"5002","line":262,"column":8,"nodeType":"4551","endLine":262,"endColumn":22,"suggestions":"5003"},{"ruleId":"4543","severity":1,"message":"5004","line":579,"column":14,"nodeType":"4545","messageId":"4546","endLine":579,"endColumn":29},{"ruleId":"4576","severity":1,"message":"4653","line":753,"column":45,"nodeType":"4578","messageId":"4579","endLine":759,"endColumn":47},{"ruleId":"4543","severity":1,"message":"5005","line":1,"column":17,"nodeType":"4545","messageId":"4546","endLine":1,"endColumn":26},{"ruleId":"4543","severity":1,"message":"5006","line":3,"column":10,"nodeType":"4545","messageId":"4546","endLine":3,"endColumn":25},{"ruleId":"4543","severity":1,"message":"5007","line":3,"column":27,"nodeType":"4545","messageId":"4546","endLine":3,"endColumn":46},{"ruleId":"4543","severity":1,"message":"5008","line":3,"column":48,"nodeType":"4545","messageId":"4546","endLine":3,"endColumn":77},{"ruleId":"4543","severity":1,"message":"5009","line":17,"column":11,"nodeType":"4545","messageId":"4546","endLine":17,"endColumn":19},{"ruleId":"4576","severity":1,"message":"4577","line":173,"column":45,"nodeType":"4578","messageId":"4579","endLine":181,"endColumn":47},{"ruleId":"4614","severity":1,"message":"4615","line":129,"column":38,"nodeType":"4587","messageId":"4616","endLine":129,"endColumn":40},{"ruleId":"4543","severity":1,"message":"4790","line":4,"column":5,"nodeType":"4545","messageId":"4546","endLine":4,"endColumn":29},{"ruleId":"4549","severity":1,"message":"5010","line":154,"column":8,"nodeType":"4551","endLine":154,"endColumn":18,"suggestions":"5011"},{"ruleId":"4549","severity":1,"message":"4738","line":178,"column":8,"nodeType":"4551","endLine":178,"endColumn":32,"suggestions":"5012"},{"ruleId":"4549","severity":1,"message":"4569","line":197,"column":8,"nodeType":"4551","endLine":197,"endColumn":22,"suggestions":"5013"},{"ruleId":"4549","severity":1,"message":"4738","line":223,"column":8,"nodeType":"4551","endLine":223,"endColumn":27,"suggestions":"5014"},{"ruleId":"4549","severity":1,"message":"4738","line":244,"column":8,"nodeType":"4551","endLine":244,"endColumn":27,"suggestions":"5015"},{"ruleId":"4549","severity":1,"message":"4586","line":246,"column":15,"nodeType":"4587","endLine":266,"endColumn":6},{"ruleId":"4549","severity":1,"message":"4738","line":266,"column":8,"nodeType":"4551","endLine":266,"endColumn":25,"suggestions":"5016"},{"ruleId":"4549","severity":1,"message":"4586","line":268,"column":15,"nodeType":"4587","endLine":287,"endColumn":6},{"ruleId":"4549","severity":1,"message":"4738","line":287,"column":8,"nodeType":"4551","endLine":287,"endColumn":25,"suggestions":"5017"},{"ruleId":"4576","severity":1,"message":"4653","line":398,"column":33,"nodeType":"4578","messageId":"4579","endLine":402,"endColumn":35},{"ruleId":"4576","severity":1,"message":"4653","line":411,"column":33,"nodeType":"4578","messageId":"4579","endLine":415,"endColumn":35},{"ruleId":"4576","severity":1,"message":"4577","line":425,"column":33,"nodeType":"4578","messageId":"4579","endLine":434,"endColumn":35},{"ruleId":"4576","severity":1,"message":"4580","line":440,"column":25,"nodeType":"4578","messageId":"4579","endLine":441,"endColumn":63},{"ruleId":"4576","severity":1,"message":"4740","line":475,"column":17,"nodeType":"4578","messageId":"4579","endLine":477,"endColumn":72},{"ruleId":"4576","severity":1,"message":"4577","line":528,"column":41,"nodeType":"4578","messageId":"4579","endLine":545,"endColumn":43},{"ruleId":"4549","severity":1,"message":"4598","line":59,"column":8,"nodeType":"4551","endLine":59,"endColumn":20,"suggestions":"5018"},{"ruleId":"4549","severity":1,"message":"4569","line":84,"column":8,"nodeType":"4551","endLine":84,"endColumn":17,"suggestions":"5019"},{"ruleId":"4576","severity":1,"message":"4653","line":218,"column":37,"nodeType":"4578","messageId":"4579","endLine":224,"endColumn":39},{"ruleId":"4543","severity":1,"message":"4790","line":11,"column":10,"nodeType":"4545","messageId":"4546","endLine":11,"endColumn":34},{"ruleId":"4543","severity":1,"message":"5020","line":25,"column":22,"nodeType":"4545","messageId":"4546","endLine":25,"endColumn":33},{"ruleId":"4543","severity":1,"message":"4640","line":42,"column":13,"nodeType":"4545","messageId":"4546","endLine":42,"endColumn":23},{"ruleId":"4549","severity":1,"message":"5021","line":63,"column":8,"nodeType":"4551","endLine":63,"endColumn":10,"suggestions":"5022"},{"ruleId":"4576","severity":1,"message":"4653","line":116,"column":41,"nodeType":"4578","messageId":"4579","endLine":120,"endColumn":43},{"ruleId":"4576","severity":1,"message":"4653","line":129,"column":41,"nodeType":"4578","messageId":"4579","endLine":133,"endColumn":43},{"ruleId":"4576","severity":1,"message":"4580","line":155,"column":33,"nodeType":"4578","messageId":"4579","endLine":155,"endColumn":72},{"ruleId":"4976","severity":1,"message":"4977","line":68,"column":20,"nodeType":"4551","messageId":"4978","endLine":81,"endColumn":14},{"ruleId":"4543","severity":1,"message":"4790","line":3,"column":10,"nodeType":"4545","messageId":"4546","endLine":3,"endColumn":34},{"ruleId":"4549","severity":1,"message":"5023","line":64,"column":8,"nodeType":"4551","endLine":64,"endColumn":10,"suggestions":"5024"},{"ruleId":"4549","severity":1,"message":"4879","line":74,"column":8,"nodeType":"4551","endLine":74,"endColumn":23,"suggestions":"5025"},{"ruleId":"4576","severity":1,"message":"4653","line":119,"column":37,"nodeType":"4578","messageId":"4579","endLine":123,"endColumn":39},{"ruleId":"4576","severity":1,"message":"4653","line":132,"column":37,"nodeType":"4578","messageId":"4579","endLine":136,"endColumn":39},{"ruleId":"4549","severity":1,"message":"4569","line":84,"column":8,"nodeType":"4551","endLine":84,"endColumn":10,"suggestions":"5026"},{"ruleId":"4549","severity":1,"message":"4625","line":173,"column":8,"nodeType":"4551","endLine":173,"endColumn":10,"suggestions":"5027"},{"ruleId":"4549","severity":1,"message":"4598","line":190,"column":8,"nodeType":"4551","endLine":190,"endColumn":20,"suggestions":"5028"},{"ruleId":"4549","severity":1,"message":"4586","line":192,"column":15,"nodeType":"4587","endLine":212,"endColumn":6},{"ruleId":"4549","severity":1,"message":"4920","line":212,"column":8,"nodeType":"4551","endLine":212,"endColumn":17,"suggestions":"5029"},{"ruleId":"4549","severity":1,"message":"4631","line":227,"column":8,"nodeType":"4551","endLine":227,"endColumn":29,"suggestions":"5030"},{"ruleId":"4549","severity":1,"message":"4592","line":234,"column":8,"nodeType":"4551","endLine":234,"endColumn":19,"suggestions":"5031"},{"ruleId":"4576","severity":1,"message":"4653","line":328,"column":45,"nodeType":"4578","messageId":"4579","endLine":333,"endColumn":47},{"ruleId":"4576","severity":1,"message":"4653","line":393,"column":45,"nodeType":"4578","messageId":"4579","endLine":398,"endColumn":47},{"ruleId":"4543","severity":1,"message":"4617","line":69,"column":22,"nodeType":"4545","messageId":"4546","endLine":69,"endColumn":33},{"ruleId":"4549","severity":1,"message":"4569","line":96,"column":8,"nodeType":"4551","endLine":96,"endColumn":10,"suggestions":"5032"},{"ruleId":"4543","severity":1,"message":"5033","line":100,"column":11,"nodeType":"4545","messageId":"4546","endLine":100,"endColumn":25},{"ruleId":"4549","severity":1,"message":"4598","line":126,"column":8,"nodeType":"4551","endLine":126,"endColumn":20,"suggestions":"5034"},{"ruleId":"4549","severity":1,"message":"4569","line":151,"column":8,"nodeType":"4551","endLine":151,"endColumn":31,"suggestions":"5035"},{"ruleId":"4549","severity":1,"message":"4586","line":209,"column":15,"nodeType":"4587","endLine":240,"endColumn":6},{"ruleId":"4549","severity":1,"message":"4627","line":240,"column":8,"nodeType":"4551","endLine":240,"endColumn":17,"suggestions":"5036"},{"ruleId":"4549","severity":1,"message":"4631","line":256,"column":8,"nodeType":"4551","endLine":256,"endColumn":29,"suggestions":"5037"},{"ruleId":"4549","severity":1,"message":"4592","line":264,"column":8,"nodeType":"4551","endLine":264,"endColumn":19,"suggestions":"5038"},{"ruleId":"4543","severity":1,"message":"5039","line":446,"column":15,"nodeType":"4545","messageId":"4546","endLine":446,"endColumn":17},{"ruleId":"4614","severity":1,"message":"4615","line":536,"column":40,"nodeType":"4587","messageId":"4616","endLine":536,"endColumn":42},{"ruleId":"4614","severity":1,"message":"4615","line":539,"column":37,"nodeType":"4587","messageId":"4616","endLine":539,"endColumn":39},{"ruleId":"4633","severity":1,"message":"4634","line":545,"column":17,"nodeType":"4635","messageId":"4636","endLine":547,"endColumn":18},{"ruleId":"4614","severity":1,"message":"4615","line":569,"column":41,"nodeType":"4587","messageId":"4616","endLine":569,"endColumn":43},{"ruleId":"4576","severity":1,"message":"4653","line":627,"column":49,"nodeType":"4578","messageId":"4579","endLine":631,"endColumn":51},{"ruleId":"4576","severity":1,"message":"4580","line":665,"column":45,"nodeType":"4578","messageId":"4579","endLine":665,"endColumn":94},{"ruleId":"4576","severity":1,"message":"4890","line":667,"column":45,"nodeType":"4578","messageId":"4579","endLine":667,"endColumn":99},{"ruleId":"4549","severity":1,"message":"4569","line":88,"column":8,"nodeType":"4551","endLine":88,"endColumn":10,"suggestions":"5040"},{"ruleId":"4549","severity":1,"message":"4598","line":116,"column":8,"nodeType":"4551","endLine":116,"endColumn":20,"suggestions":"5041"},{"ruleId":"4549","severity":1,"message":"5042","line":138,"column":8,"nodeType":"4551","endLine":138,"endColumn":18,"suggestions":"5043"},{"ruleId":"4549","severity":1,"message":"5044","line":183,"column":8,"nodeType":"4551","endLine":183,"endColumn":10,"suggestions":"5045"},{"ruleId":"4549","severity":1,"message":"4586","line":185,"column":15,"nodeType":"4587","endLine":216,"endColumn":6},{"ruleId":"4549","severity":1,"message":"4627","line":216,"column":8,"nodeType":"4551","endLine":216,"endColumn":17,"suggestions":"5046"},{"ruleId":"4549","severity":1,"message":"4631","line":233,"column":8,"nodeType":"4551","endLine":233,"endColumn":29,"suggestions":"5047"},{"ruleId":"4549","severity":1,"message":"4592","line":240,"column":8,"nodeType":"4551","endLine":240,"endColumn":19,"suggestions":"5048"},{"ruleId":"4664","severity":1,"message":"5049","line":408,"column":14,"nodeType":"4545","messageId":"4666","endLine":408,"endColumn":26},{"ruleId":"4543","severity":1,"message":"5050","line":518,"column":13,"nodeType":"4545","messageId":"4546","endLine":518,"endColumn":15},{"ruleId":"4614","severity":1,"message":"4615","line":518,"column":49,"nodeType":"4587","messageId":"4616","endLine":518,"endColumn":51},{"ruleId":"4614","severity":1,"message":"4615","line":520,"column":37,"nodeType":"4587","messageId":"4616","endLine":520,"endColumn":39},{"ruleId":"4633","severity":1,"message":"4634","line":526,"column":17,"nodeType":"4635","messageId":"4636","endLine":528,"endColumn":18},{"ruleId":"4614","severity":1,"message":"4615","line":549,"column":41,"nodeType":"4587","messageId":"4616","endLine":549,"endColumn":43},{"ruleId":"4576","severity":1,"message":"4653","line":613,"column":49,"nodeType":"4578","messageId":"4579","endLine":617,"endColumn":51},{"ruleId":"4576","severity":1,"message":"4580","line":694,"column":45,"nodeType":"4578","messageId":"4579","endLine":694,"endColumn":94},{"ruleId":"4576","severity":1,"message":"4890","line":696,"column":45,"nodeType":"4578","messageId":"4579","endLine":696,"endColumn":139},{"ruleId":"4543","severity":1,"message":"4790","line":3,"column":10,"nodeType":"4545","messageId":"4546","endLine":3,"endColumn":34},{"ruleId":"4549","severity":1,"message":"5051","line":64,"column":8,"nodeType":"4551","endLine":64,"endColumn":10,"suggestions":"5052"},{"ruleId":"4549","severity":1,"message":"4879","line":74,"column":8,"nodeType":"4551","endLine":74,"endColumn":31,"suggestions":"5053"},{"ruleId":"4576","severity":1,"message":"4653","line":126,"column":37,"nodeType":"4578","messageId":"4579","endLine":130,"endColumn":39},{"ruleId":"4576","severity":1,"message":"4653","line":139,"column":37,"nodeType":"4578","messageId":"4579","endLine":143,"endColumn":39},{"ruleId":"4543","severity":1,"message":"5054","line":55,"column":7,"nodeType":"4545","messageId":"4546","endLine":55,"endColumn":17},{"ruleId":"4543","severity":1,"message":"5055","line":56,"column":7,"nodeType":"4545","messageId":"4546","endLine":56,"endColumn":19},{"ruleId":"4549","severity":1,"message":"4569","line":115,"column":8,"nodeType":"4551","endLine":115,"endColumn":10,"suggestions":"5056"},{"ruleId":"4549","severity":1,"message":"4598","line":135,"column":8,"nodeType":"4551","endLine":135,"endColumn":20,"suggestions":"5057"},{"ruleId":"4549","severity":1,"message":"4584","line":184,"column":8,"nodeType":"4551","endLine":184,"endColumn":10,"suggestions":"5058"},{"ruleId":"4549","severity":1,"message":"4586","line":186,"column":15,"nodeType":"4587","endLine":214,"endColumn":6},{"ruleId":"4549","severity":1,"message":"4627","line":214,"column":8,"nodeType":"4551","endLine":214,"endColumn":17,"suggestions":"5059"},{"ruleId":"4549","severity":1,"message":"4879","line":231,"column":8,"nodeType":"4551","endLine":231,"endColumn":29,"suggestions":"5060"},{"ruleId":"4549","severity":1,"message":"4592","line":238,"column":8,"nodeType":"4551","endLine":238,"endColumn":19,"suggestions":"5061"},{"ruleId":"4549","severity":1,"message":"4569","line":252,"column":8,"nodeType":"4551","endLine":252,"endColumn":10,"suggestions":"5062"},{"ruleId":"4633","severity":1,"message":"4634","line":403,"column":14,"nodeType":"4635","messageId":"4636","endLine":431,"endColumn":14},{"ruleId":"4576","severity":1,"message":"4653","line":451,"column":53,"nodeType":"4578","messageId":"4579","endLine":458,"endColumn":55},{"ruleId":"4576","severity":1,"message":"4580","line":614,"column":49,"nodeType":"4578","messageId":"4579","endLine":614,"endColumn":112},{"ruleId":"4576","severity":1,"message":"4890","line":616,"column":49,"nodeType":"4578","messageId":"4579","endLine":617,"endColumn":125},{"ruleId":"4543","severity":1,"message":"4790","line":3,"column":10,"nodeType":"4545","messageId":"4546","endLine":3,"endColumn":34},{"ruleId":"4543","severity":1,"message":"5063","line":16,"column":5,"nodeType":"4545","messageId":"4546","endLine":16,"endColumn":26},{"ruleId":"4549","severity":1,"message":"5064","line":85,"column":8,"nodeType":"4551","endLine":85,"endColumn":10,"suggestions":"5065"},{"ruleId":"4549","severity":1,"message":"4879","line":100,"column":8,"nodeType":"4551","endLine":100,"endColumn":31,"suggestions":"5066"},{"ruleId":"4576","severity":1,"message":"4653","line":162,"column":37,"nodeType":"4578","messageId":"4579","endLine":165,"endColumn":39},{"ruleId":"4576","severity":1,"message":"4653","line":174,"column":37,"nodeType":"4578","messageId":"4579","endLine":177,"endColumn":39},{"ruleId":"4543","severity":1,"message":"4790","line":4,"column":5,"nodeType":"4545","messageId":"4546","endLine":4,"endColumn":29},{"ruleId":"4543","severity":1,"message":"5067","line":12,"column":10,"nodeType":"4545","messageId":"4546","endLine":12,"endColumn":17},{"ruleId":"4543","severity":1,"message":"4803","line":38,"column":12,"nodeType":"4545","messageId":"4546","endLine":38,"endColumn":24},{"ruleId":"4543","severity":1,"message":"5068","line":54,"column":36,"nodeType":"4545","messageId":"4546","endLine":54,"endColumn":45},{"ruleId":"4543","severity":1,"message":"5069","line":54,"column":47,"nodeType":"4545","messageId":"4546","endLine":54,"endColumn":61},{"ruleId":"4543","severity":1,"message":"5070","line":56,"column":31,"nodeType":"4545","messageId":"4546","endLine":56,"endColumn":43},{"ruleId":"4549","severity":1,"message":"5071","line":77,"column":8,"nodeType":"4551","endLine":77,"endColumn":10,"suggestions":"5072"},{"ruleId":"4576","severity":1,"message":"4653","line":122,"column":37,"nodeType":"4578","messageId":"4579","endLine":126,"endColumn":39},{"ruleId":"4576","severity":1,"message":"4653","line":136,"column":37,"nodeType":"4578","messageId":"4579","endLine":140,"endColumn":39},{"ruleId":"4543","severity":1,"message":"5073","line":29,"column":12,"nodeType":"4545","messageId":"4546","endLine":29,"endColumn":23},{"ruleId":"4543","severity":1,"message":"5074","line":29,"column":25,"nodeType":"4545","messageId":"4546","endLine":29,"endColumn":39},{"ruleId":"4543","severity":1,"message":"4680","line":30,"column":22,"nodeType":"4545","messageId":"4546","endLine":30,"endColumn":33},{"ruleId":"4543","severity":1,"message":"5075","line":31,"column":24,"nodeType":"4545","messageId":"4546","endLine":31,"endColumn":37},{"ruleId":"4543","severity":1,"message":"4803","line":33,"column":12,"nodeType":"4545","messageId":"4546","endLine":33,"endColumn":24},{"ruleId":"4549","severity":1,"message":"4738","line":63,"column":8,"nodeType":"4551","endLine":63,"endColumn":10,"suggestions":"5076"},{"ruleId":"4576","severity":1,"message":"4653","line":125,"column":37,"nodeType":"4578","messageId":"4579","endLine":128,"endColumn":39},{"ruleId":"4576","severity":1,"message":"4653","line":137,"column":37,"nodeType":"4578","messageId":"4579","endLine":140,"endColumn":39},{"ruleId":"4891","severity":1,"message":"4892","line":26,"column":29,"nodeType":"4893","messageId":"4663","endLine":26,"endColumn":40},{"ruleId":"4549","severity":1,"message":"5077","line":91,"column":8,"nodeType":"4551","endLine":91,"endColumn":10,"suggestions":"5078"},{"ruleId":"4549","severity":1,"message":"4631","line":102,"column":8,"nodeType":"4551","endLine":102,"endColumn":21,"suggestions":"5079"},{"ruleId":"4576","severity":1,"message":"4653","line":166,"column":33,"nodeType":"4578","messageId":"4579","endLine":170,"endColumn":35},{"ruleId":"4576","severity":1,"message":"4653","line":179,"column":33,"nodeType":"4578","messageId":"4579","endLine":183,"endColumn":35},{"ruleId":"4576","severity":1,"message":"4580","line":207,"column":25,"nodeType":"4578","messageId":"4579","endLine":211,"endColumn":27},{"ruleId":"4576","severity":1,"message":"4740","line":235,"column":17,"nodeType":"4578","messageId":"4579","endLine":237,"endColumn":71},{"ruleId":"4543","severity":1,"message":"5074","line":23,"column":25,"nodeType":"4545","messageId":"4546","endLine":23,"endColumn":39},{"ruleId":"4549","severity":1,"message":"5064","line":72,"column":8,"nodeType":"4551","endLine":72,"endColumn":10,"suggestions":"5080"},{"ruleId":"4549","severity":1,"message":"4879","line":81,"column":8,"nodeType":"4551","endLine":81,"endColumn":17,"suggestions":"5081"},{"ruleId":"4576","severity":1,"message":"4653","line":150,"column":41,"nodeType":"4578","messageId":"4579","endLine":154,"endColumn":43},{"ruleId":"4576","severity":1,"message":"4653","line":163,"column":41,"nodeType":"4578","messageId":"4579","endLine":167,"endColumn":43},{"ruleId":"4549","severity":1,"message":"4553","line":73,"column":8,"nodeType":"4551","endLine":73,"endColumn":10,"suggestions":"5082"},{"ruleId":"4549","severity":1,"message":"4820","line":85,"column":9,"nodeType":"4551","endLine":85,"endColumn":21,"suggestions":"5083"},{"ruleId":"4549","severity":1,"message":"4627","line":92,"column":9,"nodeType":"4551","endLine":92,"endColumn":18,"suggestions":"5084"},{"ruleId":"4549","severity":1,"message":"4592","line":98,"column":9,"nodeType":"4551","endLine":98,"endColumn":20,"suggestions":"5085"},{"ruleId":"4549","severity":1,"message":"5086","line":135,"column":8,"nodeType":"4551","endLine":135,"endColumn":15,"suggestions":"5087"},{"ruleId":"4549","severity":1,"message":"4625","line":170,"column":8,"nodeType":"4551","endLine":170,"endColumn":10,"suggestions":"5088"},{"ruleId":"5089","severity":1,"message":"5090","line":187,"column":23,"nodeType":"5091","messageId":"5092","endLine":187,"endColumn":39},{"ruleId":"4576","severity":1,"message":"4653","line":427,"column":21,"nodeType":"4578","messageId":"4579","endLine":434,"endColumn":23},{"ruleId":"4543","severity":1,"message":"4780","line":491,"column":11,"nodeType":"4545","messageId":"4546","endLine":491,"endColumn":22},{"ruleId":"4576","severity":1,"message":"4653","line":669,"column":41,"nodeType":"4578","messageId":"4579","endLine":674,"endColumn":43},{"ruleId":"4576","severity":1,"message":"4653","line":707,"column":41,"nodeType":"4578","messageId":"4579","endLine":709,"endColumn":43},{"ruleId":"4549","severity":1,"message":"4569","line":86,"column":8,"nodeType":"4551","endLine":86,"endColumn":10,"suggestions":"5093"},{"ruleId":"4549","severity":1,"message":"4598","line":111,"column":8,"nodeType":"4551","endLine":111,"endColumn":20,"suggestions":"5094"},{"ruleId":"4549","severity":1,"message":"4584","line":161,"column":8,"nodeType":"4551","endLine":161,"endColumn":10,"suggestions":"5095"},{"ruleId":"4549","severity":1,"message":"4586","line":163,"column":15,"nodeType":"4587","endLine":193,"endColumn":6},{"ruleId":"4549","severity":1,"message":"4627","line":193,"column":8,"nodeType":"4551","endLine":193,"endColumn":17,"suggestions":"5096"},{"ruleId":"4549","severity":1,"message":"5097","line":219,"column":8,"nodeType":"4551","endLine":219,"endColumn":29,"suggestions":"5098"},{"ruleId":"4549","severity":1,"message":"4592","line":227,"column":8,"nodeType":"4551","endLine":227,"endColumn":19,"suggestions":"5099"},{"ruleId":"4576","severity":1,"message":"4653","line":322,"column":45,"nodeType":"4578","messageId":"4579","endLine":328,"endColumn":47},{"ruleId":"4543","severity":1,"message":"5100","line":33,"column":10,"nodeType":"4545","messageId":"4546","endLine":33,"endColumn":16},{"ruleId":"4543","severity":1,"message":"5101","line":33,"column":18,"nodeType":"4545","messageId":"4546","endLine":33,"endColumn":29},{"ruleId":"4543","severity":1,"message":"5102","line":33,"column":51,"nodeType":"4545","messageId":"4546","endLine":33,"endColumn":67},{"ruleId":"4543","severity":1,"message":"5103","line":55,"column":31,"nodeType":"4545","messageId":"4546","endLine":55,"endColumn":51},{"ruleId":"4543","severity":1,"message":"5104","line":82,"column":13,"nodeType":"4545","messageId":"4546","endLine":82,"endColumn":23},{"ruleId":"4549","severity":1,"message":"4598","line":102,"column":8,"nodeType":"4551","endLine":102,"endColumn":20,"suggestions":"5105"},{"ruleId":"4549","severity":1,"message":"5106","line":128,"column":8,"nodeType":"4551","endLine":128,"endColumn":10,"suggestions":"5107"},{"ruleId":"4549","severity":1,"message":"4586","line":130,"column":15,"nodeType":"4587","endLine":157,"endColumn":6},{"ruleId":"4549","severity":1,"message":"5108","line":157,"column":8,"nodeType":"4551","endLine":157,"endColumn":17,"suggestions":"5109"},{"ruleId":"4549","severity":1,"message":"4879","line":171,"column":8,"nodeType":"4551","endLine":171,"endColumn":29,"suggestions":"5110"},{"ruleId":"4549","severity":1,"message":"4569","line":180,"column":8,"nodeType":"4551","endLine":180,"endColumn":10,"suggestions":"5111"},{"ruleId":"4549","severity":1,"message":"4592","line":187,"column":8,"nodeType":"4551","endLine":187,"endColumn":19,"suggestions":"5112"},{"ruleId":"4549","severity":1,"message":"4592","line":194,"column":8,"nodeType":"4551","endLine":194,"endColumn":19,"suggestions":"5113"},{"ruleId":"4543","severity":1,"message":"5114","line":418,"column":13,"nodeType":"4545","messageId":"4546","endLine":418,"endColumn":19},{"ruleId":"4576","severity":1,"message":"4653","line":538,"column":49,"nodeType":"4578","messageId":"4579","endLine":544,"endColumn":51},{"ruleId":"4576","severity":1,"message":"4580","line":597,"column":49,"nodeType":"4578","messageId":"4579","endLine":597,"endColumn":98},{"ruleId":"4576","severity":1,"message":"4890","line":599,"column":49,"nodeType":"4578","messageId":"4579","endLine":599,"endColumn":126},{"ruleId":"4543","severity":1,"message":"5115","line":29,"column":10,"nodeType":"4545","messageId":"4546","endLine":29,"endColumn":13},{"ruleId":"4543","severity":1,"message":"5116","line":4,"column":5,"nodeType":"4545","messageId":"4546","endLine":4,"endColumn":9},{"ruleId":"4543","severity":1,"message":"5117","line":5,"column":5,"nodeType":"4545","messageId":"4546","endLine":5,"endColumn":13},{"ruleId":"4543","severity":1,"message":"5005","line":1,"column":17,"nodeType":"4545","messageId":"4546","endLine":1,"endColumn":26},{"ruleId":"4543","severity":1,"message":"4737","line":1,"column":28,"nodeType":"4545","messageId":"4546","endLine":1,"endColumn":36},{"ruleId":"4543","severity":1,"message":"4700","line":2,"column":18,"nodeType":"4545","messageId":"4546","endLine":2,"endColumn":21},{"ruleId":"4543","severity":1,"message":"5118","line":1,"column":10,"nodeType":"4545","messageId":"4546","endLine":1,"endColumn":14},{"ruleId":"4543","severity":1,"message":"5119","line":16,"column":26,"nodeType":"4545","messageId":"4546","endLine":16,"endColumn":46},{"ruleId":"4543","severity":1,"message":"5120","line":18,"column":8,"nodeType":"4545","messageId":"4546","endLine":18,"endColumn":28},{"ruleId":"4543","severity":1,"message":"5121","line":28,"column":10,"nodeType":"4545","messageId":"4546","endLine":28,"endColumn":18},{"ruleId":"4549","severity":1,"message":"4569","line":64,"column":6,"nodeType":"4551","endLine":64,"endColumn":8,"suggestions":"5122"},{"ruleId":"4549","severity":1,"message":"4738","line":74,"column":6,"nodeType":"4551","endLine":74,"endColumn":29,"suggestions":"5123"},{"ruleId":"4543","severity":1,"message":"4741","line":37,"column":5,"nodeType":"4545","messageId":"4546","endLine":37,"endColumn":17},{"ruleId":"4549","severity":1,"message":"4569","line":93,"column":8,"nodeType":"4551","endLine":93,"endColumn":10,"suggestions":"5124"},{"ruleId":"4549","severity":1,"message":"4598","line":120,"column":8,"nodeType":"4551","endLine":120,"endColumn":20,"suggestions":"5125"},{"ruleId":"4549","severity":1,"message":"4584","line":172,"column":8,"nodeType":"4551","endLine":172,"endColumn":10,"suggestions":"5126"},{"ruleId":"4549","severity":1,"message":"4586","line":174,"column":15,"nodeType":"4587","endLine":206,"endColumn":6},{"ruleId":"4549","severity":1,"message":"4601","line":206,"column":8,"nodeType":"4551","endLine":206,"endColumn":17,"suggestions":"5127"},{"ruleId":"4549","severity":1,"message":"4590","line":224,"column":8,"nodeType":"4551","endLine":224,"endColumn":29,"suggestions":"5128"},{"ruleId":"4549","severity":1,"message":"4592","line":232,"column":8,"nodeType":"4551","endLine":232,"endColumn":19,"suggestions":"5129"},{"ruleId":"4576","severity":1,"message":"4740","line":285,"column":21,"nodeType":"4578","messageId":"4579","endLine":285,"endColumn":65},{"ruleId":"4543","severity":1,"message":"4973","line":4,"column":10,"nodeType":"4545","messageId":"4546","endLine":4,"endColumn":14},{"ruleId":"4543","severity":1,"message":"5130","line":2,"column":8,"nodeType":"4545","messageId":"4546","endLine":2,"endColumn":22},{"ruleId":"4543","severity":1,"message":"4971","line":3,"column":8,"nodeType":"4545","messageId":"4546","endLine":3,"endColumn":19},{"ruleId":"4543","severity":1,"message":"5131","line":129,"column":9,"nodeType":"4545","messageId":"4546","endLine":129,"endColumn":13},{"ruleId":"4543","severity":1,"message":"5132","line":43,"column":11,"nodeType":"4545","messageId":"4546","endLine":43,"endColumn":23},{"ruleId":"4543","severity":1,"message":"5133","line":101,"column":9,"nodeType":"4545","messageId":"4546","endLine":101,"endColumn":12},{"ruleId":"4543","severity":1,"message":"4741","line":39,"column":5,"nodeType":"4545","messageId":"4546","endLine":39,"endColumn":17},{"ruleId":"4549","severity":1,"message":"4569","line":94,"column":8,"nodeType":"4551","endLine":94,"endColumn":10,"suggestions":"5134"},{"ruleId":"4549","severity":1,"message":"4598","line":121,"column":8,"nodeType":"4551","endLine":121,"endColumn":20,"suggestions":"5135"},{"ruleId":"4549","severity":1,"message":"4584","line":167,"column":8,"nodeType":"4551","endLine":167,"endColumn":10,"suggestions":"5136"},{"ruleId":"4549","severity":1,"message":"4586","line":169,"column":15,"nodeType":"4587","endLine":199,"endColumn":6},{"ruleId":"4549","severity":1,"message":"4601","line":199,"column":8,"nodeType":"4551","endLine":199,"endColumn":17,"suggestions":"5137"},{"ruleId":"4549","severity":1,"message":"4590","line":214,"column":8,"nodeType":"4551","endLine":214,"endColumn":29,"suggestions":"5138"},{"ruleId":"4549","severity":1,"message":"4592","line":221,"column":8,"nodeType":"4551","endLine":221,"endColumn":19,"suggestions":"5139"},{"ruleId":"4576","severity":1,"message":"4740","line":298,"column":21,"nodeType":"4578","messageId":"4579","endLine":301,"endColumn":23},{"ruleId":"4543","severity":1,"message":"4737","line":1,"column":28,"nodeType":"4545","messageId":"4546","endLine":1,"endColumn":36},{"ruleId":"4543","severity":1,"message":"5068","line":40,"column":38,"nodeType":"4545","messageId":"4546","endLine":40,"endColumn":47},{"ruleId":"4549","severity":1,"message":"4738","line":63,"column":8,"nodeType":"4551","endLine":63,"endColumn":10,"suggestions":"5140"},{"ruleId":"4576","severity":1,"message":"4740","line":89,"column":17,"nodeType":"4578","messageId":"4579","endLine":93,"endColumn":19},{"ruleId":"4543","severity":1,"message":"4930","line":24,"column":10,"nodeType":"4545","messageId":"4546","endLine":24,"endColumn":23},{"ruleId":"5141","replacedBy":"5142"},{"ruleId":"5143","replacedBy":"5144"},{"ruleId":"4543","severity":1,"message":"4617","line":53,"column":22,"nodeType":"4545","messageId":"4546","endLine":53,"endColumn":33},{"ruleId":"4543","severity":1,"message":"4680","line":54,"column":22,"nodeType":"4545","messageId":"4546","endLine":54,"endColumn":33},{"ruleId":"4543","severity":1,"message":"5145","line":67,"column":9,"nodeType":"4545","messageId":"4546","endLine":67,"endColumn":18},{"ruleId":"4543","severity":1,"message":"5033","line":82,"column":11,"nodeType":"4545","messageId":"4546","endLine":82,"endColumn":25},{"ruleId":"4543","severity":1,"message":"5146","line":85,"column":11,"nodeType":"4545","messageId":"4546","endLine":85,"endColumn":17},{"ruleId":"4543","severity":1,"message":"5147","line":86,"column":13,"nodeType":"4545","messageId":"4546","endLine":86,"endColumn":20},{"ruleId":"4543","severity":1,"message":"5104","line":87,"column":13,"nodeType":"4545","messageId":"4546","endLine":87,"endColumn":23},{"ruleId":"4549","severity":1,"message":"4569","line":95,"column":8,"nodeType":"4551","endLine":95,"endColumn":10,"suggestions":"5148"},{"ruleId":"4549","severity":1,"message":"4598","line":111,"column":8,"nodeType":"4551","endLine":111,"endColumn":20,"suggestions":"5149"},{"ruleId":"4549","severity":1,"message":"5150","line":147,"column":8,"nodeType":"4551","endLine":147,"endColumn":24,"suggestions":"5151"},{"ruleId":"4549","severity":1,"message":"4592","line":154,"column":8,"nodeType":"4551","endLine":154,"endColumn":19,"suggestions":"5152"},{"ruleId":"4549","severity":1,"message":"4569","line":158,"column":8,"nodeType":"4551","endLine":158,"endColumn":14,"suggestions":"5153"},{"ruleId":"4549","severity":1,"message":"5154","line":160,"column":5,"nodeType":"4545","endLine":160,"endColumn":14},{"ruleId":"4633","severity":1,"message":"4634","line":170,"column":13,"nodeType":"4635","messageId":"4636","endLine":179,"endColumn":14},{"ruleId":"4576","severity":1,"message":"4580","line":314,"column":69,"nodeType":"4578","messageId":"4579","endLine":314,"endColumn":118},{"ruleId":"5141","replacedBy":"5155"},{"ruleId":"5143","replacedBy":"5156"},{"ruleId":"4543","severity":1,"message":"5157","line":74,"column":10,"nodeType":"4545","messageId":"4546","endLine":74,"endColumn":15},{"ruleId":"4543","severity":1,"message":"5158","line":74,"column":17,"nodeType":"4545","messageId":"4546","endLine":74,"endColumn":29},{"ruleId":"4543","severity":1,"message":"5159","line":76,"column":10,"nodeType":"4545","messageId":"4546","endLine":76,"endColumn":25},{"ruleId":"4543","severity":1,"message":"4971","line":4,"column":8,"nodeType":"4545","messageId":"4546","endLine":4,"endColumn":19},{"ruleId":"4543","severity":1,"message":"5160","line":6,"column":28,"nodeType":"4545","messageId":"4546","endLine":6,"endColumn":35},{"ruleId":"4543","severity":1,"message":"5161","line":7,"column":46,"nodeType":"4545","messageId":"4546","endLine":7,"endColumn":61},{"ruleId":"4891","severity":1,"message":"5162","line":279,"column":13,"nodeType":"4893","messageId":"4663","endLine":279,"endColumn":22},{"ruleId":"4543","severity":1,"message":"5163","line":2,"column":10,"nodeType":"4545","messageId":"4546","endLine":2,"endColumn":17},{"ruleId":"4891","severity":1,"message":"4974","line":120,"column":50,"nodeType":"4893","messageId":"4663","endLine":120,"endColumn":59},{"ruleId":"4543","severity":1,"message":"5164","line":250,"column":9,"nodeType":"4545","messageId":"4546","endLine":250,"endColumn":17},{"ruleId":"4543","severity":1,"message":"5165","line":271,"column":13,"nodeType":"4545","messageId":"4546","endLine":271,"endColumn":28},{"ruleId":"4891","severity":1,"message":"4974","line":298,"column":50,"nodeType":"4893","messageId":"4663","endLine":298,"endColumn":59},{"ruleId":"4664","severity":1,"message":"4975","line":500,"column":13,"nodeType":"4545","messageId":"4666","endLine":500,"endColumn":24},{"ruleId":"4976","severity":1,"message":"4977","line":502,"column":13,"nodeType":"4551","messageId":"4978","endLine":502,"endColumn":72},{"ruleId":"4543","severity":1,"message":"5166","line":5,"column":30,"nodeType":"4545","messageId":"4546","endLine":5,"endColumn":46},{"ruleId":"4543","severity":1,"message":"5167","line":5,"column":48,"nodeType":"4545","messageId":"4546","endLine":5,"endColumn":67},{"ruleId":"4543","severity":1,"message":"5168","line":10,"column":13,"nodeType":"4545","messageId":"4546","endLine":10,"endColumn":20},{"ruleId":"4543","severity":1,"message":"5169","line":18,"column":15,"nodeType":"4545","messageId":"4546","endLine":18,"endColumn":23},{"ruleId":"4576","severity":1,"message":"5170","line":110,"column":17,"nodeType":"4578","messageId":"4579","endLine":110,"endColumn":29},{"ruleId":"4891","severity":1,"message":"5171","line":4007,"column":5,"nodeType":"4893","messageId":"4663","endLine":4007,"endColumn":7},{"ruleId":"4891","severity":1,"message":"5172","line":4008,"column":5,"nodeType":"4893","messageId":"4663","endLine":4008,"endColumn":16},{"ruleId":"4891","severity":1,"message":"5173","line":4009,"column":5,"nodeType":"4893","messageId":"4663","endLine":4009,"endColumn":18},{"ruleId":"4891","severity":1,"message":"5174","line":4010,"column":5,"nodeType":"4893","messageId":"4663","endLine":4010,"endColumn":22},{"ruleId":"4891","severity":1,"message":"5175","line":4011,"column":5,"nodeType":"4893","messageId":"4663","endLine":4011,"endColumn":15},{"ruleId":"4891","severity":1,"message":"5176","line":4012,"column":5,"nodeType":"4893","messageId":"4663","endLine":4012,"endColumn":19},{"ruleId":"4891","severity":1,"message":"5177","line":4013,"column":5,"nodeType":"4893","messageId":"4663","endLine":4013,"endColumn":13},{"ruleId":"4891","severity":1,"message":"5178","line":4014,"column":5,"nodeType":"4893","messageId":"4663","endLine":4014,"endColumn":17},{"ruleId":"4891","severity":1,"message":"5179","line":4015,"column":5,"nodeType":"4893","messageId":"4663","endLine":4015,"endColumn":18},{"ruleId":"4891","severity":1,"message":"5180","line":4016,"column":5,"nodeType":"4893","messageId":"4663","endLine":4016,"endColumn":10},{"ruleId":"4891","severity":1,"message":"5181","line":4017,"column":5,"nodeType":"4893","messageId":"4663","endLine":4017,"endColumn":14},{"ruleId":"4891","severity":1,"message":"5182","line":4018,"column":5,"nodeType":"4893","messageId":"4663","endLine":4018,"endColumn":15},{"ruleId":"4891","severity":1,"message":"5183","line":4019,"column":5,"nodeType":"4893","messageId":"4663","endLine":4019,"endColumn":17},{"ruleId":"4543","severity":1,"message":"5184","line":10,"column":36,"nodeType":"4545","messageId":"4546","endLine":10,"endColumn":56},{"ruleId":"4549","severity":1,"message":"4569","line":75,"column":8,"nodeType":"4551","endLine":75,"endColumn":10,"suggestions":"5185"},{"ruleId":"4549","severity":1,"message":"4598","line":97,"column":8,"nodeType":"4551","endLine":97,"endColumn":20,"suggestions":"5186"},{"ruleId":"4549","severity":1,"message":"5187","line":125,"column":8,"nodeType":"4551","endLine":125,"endColumn":17,"suggestions":"5188"},{"ruleId":"4549","severity":1,"message":"5189","line":129,"column":8,"nodeType":"4551","endLine":129,"endColumn":25,"suggestions":"5190"},{"ruleId":"4549","severity":1,"message":"4592","line":137,"column":8,"nodeType":"4551","endLine":137,"endColumn":19,"suggestions":"5191"},{"ruleId":"4576","severity":1,"message":"4577","line":167,"column":21,"nodeType":"4578","messageId":"4579","endLine":182,"endColumn":22},{"ruleId":"4543","severity":1,"message":"5192","line":112,"column":9,"nodeType":"4545","messageId":"4546","endLine":112,"endColumn":18},{"ruleId":"4633","severity":1,"message":"4634","line":384,"column":3,"nodeType":"4635","messageId":"4636","endLine":384,"endColumn":79},{"ruleId":"4633","severity":1,"message":"4634","line":404,"column":3,"nodeType":"4635","messageId":"4636","endLine":404,"endColumn":66},{"ruleId":"5193","severity":1,"message":"5194","line":450,"column":7,"nodeType":"5195","messageId":"5196","endLine":597,"endColumn":8},{"ruleId":"4660","severity":1,"message":"4661","line":455,"column":36,"nodeType":"4662","messageId":"4663","endLine":455,"endColumn":38},{"ruleId":"4660","severity":1,"message":"4661","line":488,"column":34,"nodeType":"4662","messageId":"4663","endLine":488,"endColumn":36},{"ruleId":"4664","severity":1,"message":"5197","line":490,"column":17,"nodeType":"4545","messageId":"4666","endLine":490,"endColumn":19},{"ruleId":"4664","severity":1,"message":"5198","line":491,"column":17,"nodeType":"4545","messageId":"4666","endLine":491,"endColumn":20},{"ruleId":"4664","severity":1,"message":"5199","line":492,"column":17,"nodeType":"4545","messageId":"4666","endLine":492,"endColumn":20},{"ruleId":"4664","severity":1,"message":"5200","line":509,"column":17,"nodeType":"4545","messageId":"4666","endLine":509,"endColumn":24},{"ruleId":"4664","severity":1,"message":"5197","line":537,"column":15,"nodeType":"4545","messageId":"4666","endLine":537,"endColumn":17},{"ruleId":"4664","severity":1,"message":"5198","line":538,"column":15,"nodeType":"4545","messageId":"4666","endLine":538,"endColumn":18},{"ruleId":"4664","severity":1,"message":"5200","line":548,"column":17,"nodeType":"4545","messageId":"4666","endLine":548,"endColumn":24},{"ruleId":"4664","severity":1,"message":"5201","line":559,"column":15,"nodeType":"4545","messageId":"4666","endLine":559,"endColumn":24},{"ruleId":"4664","severity":1,"message":"5197","line":577,"column":15,"nodeType":"4545","messageId":"4666","endLine":577,"endColumn":17},{"ruleId":"4664","severity":1,"message":"5198","line":578,"column":15,"nodeType":"4545","messageId":"4666","endLine":578,"endColumn":18},{"ruleId":"4664","severity":1,"message":"5202","line":580,"column":15,"nodeType":"4545","messageId":"4666","endLine":580,"endColumn":24},{"ruleId":"4664","severity":1,"message":"5200","line":588,"column":17,"nodeType":"4545","messageId":"4666","endLine":588,"endColumn":24},{"ruleId":"4543","severity":1,"message":"5203","line":3,"column":35,"nodeType":"4545","messageId":"4546","endLine":3,"endColumn":67},{"ruleId":"4549","severity":1,"message":"4569","line":20,"column":8,"nodeType":"4551","endLine":20,"endColumn":17,"suggestions":"5204"},{"ruleId":"4543","severity":1,"message":"5205","line":49,"column":5,"nodeType":"4545","messageId":"4546","endLine":49,"endColumn":19},{"ruleId":"4549","severity":1,"message":"5206","line":65,"column":6,"nodeType":"4551","endLine":65,"endColumn":18,"suggestions":"5207"},{"ruleId":"4549","severity":1,"message":"5208","line":90,"column":6,"nodeType":"4551","endLine":90,"endColumn":17,"suggestions":"5209"},{"ruleId":"4549","severity":1,"message":"4586","line":93,"column":13,"nodeType":"4587","endLine":110,"endColumn":4},{"ruleId":"4549","severity":1,"message":"5210","line":110,"column":6,"nodeType":"4551","endLine":110,"endColumn":17,"suggestions":"5211"},{"ruleId":"4549","severity":1,"message":"4586","line":113,"column":13,"nodeType":"4587","endLine":129,"endColumn":4},{"ruleId":"4543","severity":1,"message":"5212","line":117,"column":13,"nodeType":"4545","messageId":"4546","endLine":117,"endColumn":20},{"ruleId":"4549","severity":1,"message":"5213","line":129,"column":6,"nodeType":"4551","endLine":129,"endColumn":17,"suggestions":"5214"},{"ruleId":"4549","severity":1,"message":"4586","line":132,"column":13,"nodeType":"4587","endLine":151,"endColumn":4},{"ruleId":"4543","severity":1,"message":"5212","line":136,"column":13,"nodeType":"4545","messageId":"4546","endLine":136,"endColumn":20},{"ruleId":"4549","severity":1,"message":"5215","line":151,"column":6,"nodeType":"4551","endLine":151,"endColumn":15,"suggestions":"5216"},{"ruleId":"4549","severity":1,"message":"5217","line":167,"column":6,"nodeType":"4551","endLine":167,"endColumn":16,"suggestions":"5218"},{"ruleId":"4614","severity":1,"message":"5219","line":146,"column":42,"nodeType":"4587","messageId":"4619","endLine":146,"endColumn":44},{"ruleId":"4614","severity":1,"message":"5220","line":165,"column":40,"nodeType":"4587","messageId":"4616","endLine":165,"endColumn":42},{"ruleId":"4549","severity":1,"message":"5221","line":288,"column":6,"nodeType":"4551","endLine":288,"endColumn":17,"suggestions":"5222"},{"ruleId":"4543","severity":1,"message":"5223","line":2,"column":18,"nodeType":"4545","messageId":"4546","endLine":2,"endColumn":23},{"ruleId":"4543","severity":1,"message":"5224","line":49,"column":72,"nodeType":"4545","messageId":"4546","endLine":49,"endColumn":78},{"ruleId":"4549","severity":1,"message":"5225","line":81,"column":6,"nodeType":"4551","endLine":81,"endColumn":18,"suggestions":"5226"},{"ruleId":"4549","severity":1,"message":"5208","line":107,"column":6,"nodeType":"4551","endLine":107,"endColumn":17,"suggestions":"5227"},{"ruleId":"4549","severity":1,"message":"5228","line":125,"column":6,"nodeType":"4551","endLine":125,"endColumn":17,"suggestions":"5229"},{"ruleId":"4549","severity":1,"message":"5230","line":136,"column":6,"nodeType":"4551","endLine":136,"endColumn":17,"suggestions":"5231"},{"ruleId":"4549","severity":1,"message":"5232","line":148,"column":6,"nodeType":"4551","endLine":148,"endColumn":15,"suggestions":"5233"},{"ruleId":"4549","severity":1,"message":"5217","line":164,"column":6,"nodeType":"4551","endLine":164,"endColumn":16,"suggestions":"5234"},{"ruleId":"4576","severity":1,"message":"4839","line":378,"column":17,"nodeType":"4578","messageId":"4579","endLine":386,"endColumn":18},{"ruleId":"4576","severity":1,"message":"5170","line":408,"column":9,"nodeType":"4578","messageId":"4579","endLine":408,"endColumn":21},{"ruleId":"4543","severity":1,"message":"4669","line":424,"column":5,"nodeType":"4545","messageId":"4546","endLine":424,"endColumn":16},{"ruleId":"4543","severity":1,"message":"5235","line":4,"column":5,"nodeType":"4545","messageId":"4546","endLine":4,"endColumn":10},{"ruleId":"4543","severity":1,"message":"4669","line":8,"column":27,"nodeType":"4545","messageId":"4546","endLine":8,"endColumn":38},{"ruleId":"4543","severity":1,"message":"5236","line":2,"column":119,"nodeType":"4545","messageId":"4546","endLine":2,"endColumn":148},{"ruleId":"4543","severity":1,"message":"5161","line":2,"column":40,"nodeType":"4545","messageId":"4546","endLine":2,"endColumn":55},{"ruleId":"4543","severity":1,"message":"5166","line":3,"column":135,"nodeType":"4545","messageId":"4546","endLine":3,"endColumn":151},{"ruleId":"4543","severity":1,"message":"5237","line":35,"column":13,"nodeType":"4545","messageId":"4546","endLine":35,"endColumn":18},{"ruleId":"4543","severity":1,"message":"4930","line":24,"column":10,"nodeType":"4545","messageId":"4546","endLine":24,"endColumn":23},{"ruleId":"4543","severity":1,"message":"5238","line":54,"column":10,"nodeType":"4545","messageId":"4546","endLine":54,"endColumn":28},{"ruleId":"4543","severity":1,"message":"5239","line":59,"column":11,"nodeType":"4545","messageId":"4546","endLine":59,"endColumn":16},{"ruleId":"4543","severity":1,"message":"4617","line":63,"column":22,"nodeType":"4545","messageId":"4546","endLine":63,"endColumn":33},{"ruleId":"4543","severity":1,"message":"4680","line":64,"column":22,"nodeType":"4545","messageId":"4546","endLine":64,"endColumn":33},{"ruleId":"4543","severity":1,"message":"5240","line":68,"column":38,"nodeType":"4545","messageId":"4546","endLine":68,"endColumn":65},{"ruleId":"4543","severity":1,"message":"5241","line":81,"column":17,"nodeType":"4545","messageId":"4546","endLine":81,"endColumn":25},{"ruleId":"4543","severity":1,"message":"5242","line":82,"column":12,"nodeType":"4545","messageId":"4546","endLine":82,"endColumn":15},{"ruleId":"4543","severity":1,"message":"5104","line":120,"column":13,"nodeType":"4545","messageId":"4546","endLine":120,"endColumn":23},{"ruleId":"4549","severity":1,"message":"4569","line":135,"column":8,"nodeType":"4551","endLine":135,"endColumn":10,"suggestions":"5243"},{"ruleId":"4549","severity":1,"message":"4598","line":151,"column":8,"nodeType":"4551","endLine":151,"endColumn":20,"suggestions":"5244"},{"ruleId":"4549","severity":1,"message":"4569","line":160,"column":8,"nodeType":"4551","endLine":160,"endColumn":10,"suggestions":"5245"},{"ruleId":"4549","severity":1,"message":"4569","line":169,"column":8,"nodeType":"4551","endLine":169,"endColumn":10,"suggestions":"5246"},{"ruleId":"4549","severity":1,"message":"4586","line":171,"column":15,"nodeType":"4587","endLine":202,"endColumn":6},{"ruleId":"4549","severity":1,"message":"4676","line":202,"column":8,"nodeType":"4551","endLine":202,"endColumn":24,"suggestions":"5247"},{"ruleId":"4549","severity":1,"message":"4569","line":206,"column":8,"nodeType":"4551","endLine":206,"endColumn":14,"suggestions":"5248"},{"ruleId":"4549","severity":1,"message":"4592","line":215,"column":8,"nodeType":"4551","endLine":215,"endColumn":19,"suggestions":"5249"},{"ruleId":"4576","severity":1,"message":"4577","line":376,"column":33,"nodeType":"4578","messageId":"4579","endLine":381,"endColumn":35},{"ruleId":"4576","severity":1,"message":"4577","line":439,"column":29,"nodeType":"4578","messageId":"4579","endLine":445,"endColumn":31},{"ruleId":"4576","severity":1,"message":"4653","line":463,"column":29,"nodeType":"4578","messageId":"4579","endLine":467,"endColumn":31},{"ruleId":"4891","severity":1,"message":"5250","line":504,"column":25,"nodeType":"4893","messageId":"4663","endLine":504,"endColumn":31},{"ruleId":"5251","severity":1,"message":"5252","line":542,"column":54,"nodeType":"5091","messageId":"5253","endLine":542,"endColumn":55,"suggestions":"5254"},{"ruleId":"5251","severity":1,"message":"5252","line":542,"column":70,"nodeType":"5091","messageId":"5253","endLine":542,"endColumn":71,"suggestions":"5255"},{"ruleId":"4576","severity":1,"message":"4580","line":683,"column":49,"nodeType":"4578","messageId":"4579","endLine":683,"endColumn":136},{"ruleId":"4543","severity":1,"message":"5256","line":15,"column":10,"nodeType":"4545","messageId":"4546","endLine":15,"endColumn":28},{"ruleId":"4549","severity":1,"message":"4553","line":90,"column":8,"nodeType":"4551","endLine":90,"endColumn":10,"suggestions":"5257"},{"ruleId":"4549","severity":1,"message":"4820","line":97,"column":9,"nodeType":"4551","endLine":97,"endColumn":21,"suggestions":"5258"},{"ruleId":"4549","severity":1,"message":"4627","line":105,"column":9,"nodeType":"4551","endLine":105,"endColumn":18,"suggestions":"5259"},{"ruleId":"4549","severity":1,"message":"4592","line":111,"column":9,"nodeType":"4551","endLine":111,"endColumn":20,"suggestions":"5260"},{"ruleId":"4549","severity":1,"message":"4569","line":136,"column":8,"nodeType":"4551","endLine":136,"endColumn":15,"suggestions":"5261"},{"ruleId":"4549","severity":1,"message":"4631","line":156,"column":8,"nodeType":"4551","endLine":156,"endColumn":17,"suggestions":"5262"},{"ruleId":"4549","severity":1,"message":"4625","line":192,"column":8,"nodeType":"4551","endLine":192,"endColumn":10,"suggestions":"5263"},{"ruleId":"4576","severity":1,"message":"4653","line":426,"column":41,"nodeType":"4578","messageId":"4579","endLine":431,"endColumn":43},{"ruleId":"4576","severity":1,"message":"4653","line":463,"column":41,"nodeType":"4578","messageId":"4579","endLine":465,"endColumn":43},{"ruleId":"4633","severity":1,"message":"4634","line":21,"column":9,"nodeType":"4635","messageId":"4636","endLine":21,"endColumn":40},{"ruleId":"4543","severity":1,"message":"4642","line":14,"column":8,"nodeType":"4545","messageId":"4546","endLine":14,"endColumn":14},{"ruleId":"4549","severity":1,"message":"4569","line":84,"column":8,"nodeType":"4551","endLine":84,"endColumn":10,"suggestions":"5264"},{"ruleId":"4543","severity":1,"message":"5033","line":91,"column":11,"nodeType":"4545","messageId":"4546","endLine":91,"endColumn":25},{"ruleId":"4549","severity":1,"message":"4592","line":100,"column":8,"nodeType":"4551","endLine":100,"endColumn":19,"suggestions":"5265"},{"ruleId":"4549","severity":1,"message":"4598","line":119,"column":8,"nodeType":"4551","endLine":119,"endColumn":20,"suggestions":"5266"},{"ruleId":"4549","severity":1,"message":"4586","line":122,"column":15,"nodeType":"4587","endLine":152,"endColumn":6},{"ruleId":"4549","severity":1,"message":"4601","line":152,"column":8,"nodeType":"4551","endLine":152,"endColumn":17,"suggestions":"5267"},{"ruleId":"4549","severity":1,"message":"4569","line":157,"column":8,"nodeType":"4551","endLine":157,"endColumn":19,"suggestions":"5268"},{"ruleId":"4576","severity":1,"message":"4577","line":232,"column":41,"nodeType":"4578","messageId":"4579","endLine":248,"endColumn":43},{"ruleId":"4576","severity":1,"message":"4580","line":258,"column":37,"nodeType":"4578","messageId":"4579","endLine":261,"endColumn":39},{"ruleId":"4576","severity":1,"message":"4890","line":263,"column":37,"nodeType":"4578","messageId":"4579","endLine":263,"endColumn":110},{"ruleId":"4549","severity":1,"message":"4569","line":123,"column":8,"nodeType":"4551","endLine":123,"endColumn":10,"suggestions":"5269"},{"ruleId":"4549","severity":1,"message":"4569","line":135,"column":8,"nodeType":"4551","endLine":135,"endColumn":10,"suggestions":"5270"},{"ruleId":"4549","severity":1,"message":"4569","line":144,"column":8,"nodeType":"4551","endLine":144,"endColumn":10,"suggestions":"5271"},{"ruleId":"4549","severity":1,"message":"4569","line":153,"column":8,"nodeType":"4551","endLine":153,"endColumn":10,"suggestions":"5272"},{"ruleId":"4549","severity":1,"message":"4592","line":162,"column":8,"nodeType":"4551","endLine":162,"endColumn":19,"suggestions":"5273"},{"ruleId":"4549","severity":1,"message":"4598","line":181,"column":8,"nodeType":"4551","endLine":181,"endColumn":20,"suggestions":"5274"},{"ruleId":"4549","severity":1,"message":"5275","line":188,"column":8,"nodeType":"4551","endLine":188,"endColumn":10,"suggestions":"5276"},{"ruleId":"4543","severity":1,"message":"5277","line":197,"column":17,"nodeType":"4545","messageId":"4546","endLine":197,"endColumn":21},{"ruleId":"4543","severity":1,"message":"5278","line":204,"column":17,"nodeType":"4545","messageId":"4546","endLine":204,"endColumn":31},{"ruleId":"4549","severity":1,"message":"5279","line":238,"column":8,"nodeType":"4551","endLine":238,"endColumn":10,"suggestions":"5280"},{"ruleId":"4549","severity":1,"message":"4586","line":241,"column":15,"nodeType":"4587","endLine":272,"endColumn":6},{"ruleId":"4549","severity":1,"message":"4601","line":272,"column":8,"nodeType":"4551","endLine":272,"endColumn":17,"suggestions":"5281"},{"ruleId":"4614","severity":1,"message":"4615","line":424,"column":26,"nodeType":"4587","messageId":"4616","endLine":424,"endColumn":28},{"ruleId":"4543","severity":1,"message":"4692","line":630,"column":58,"nodeType":"4545","messageId":"4546","endLine":630,"endColumn":72},{"ruleId":"4576","severity":1,"message":"4740","line":638,"column":21,"nodeType":"4578","messageId":"4579","endLine":640,"endColumn":75},{"ruleId":"4576","severity":1,"message":"4653","line":651,"column":45,"nodeType":"4578","messageId":"4579","endLine":656,"endColumn":47},{"ruleId":"4576","severity":1,"message":"4577","line":669,"column":45,"nodeType":"4578","messageId":"4579","endLine":686,"endColumn":47},{"ruleId":"4576","severity":1,"message":"4653","line":838,"column":49,"nodeType":"4578","messageId":"4579","endLine":848,"endColumn":51},{"ruleId":"4543","severity":1,"message":"5282","line":3,"column":3,"nodeType":"4545","messageId":"4546","endLine":3,"endColumn":32},{"ruleId":"4543","severity":1,"message":"4790","line":4,"column":5,"nodeType":"4545","messageId":"4546","endLine":4,"endColumn":29},{"ruleId":"4543","severity":1,"message":"4741","line":11,"column":43,"nodeType":"4545","messageId":"4546","endLine":11,"endColumn":55},{"ruleId":"4543","severity":1,"message":"4803","line":49,"column":12,"nodeType":"4545","messageId":"4546","endLine":49,"endColumn":24},{"ruleId":"4549","severity":1,"message":"5283","line":84,"column":8,"nodeType":"4551","endLine":84,"endColumn":10,"suggestions":"5284"},{"ruleId":"4549","severity":1,"message":"4738","line":108,"column":8,"nodeType":"4551","endLine":108,"endColumn":31,"suggestions":"5285"},{"ruleId":"4549","severity":1,"message":"4569","line":127,"column":8,"nodeType":"4551","endLine":127,"endColumn":10,"suggestions":"5286"},{"ruleId":"4549","severity":1,"message":"5287","line":133,"column":8,"nodeType":"4551","endLine":133,"endColumn":21,"suggestions":"5288"},{"ruleId":"4549","severity":1,"message":"5289","line":198,"column":8,"nodeType":"4551","endLine":198,"endColumn":10,"suggestions":"5290"},{"ruleId":"4576","severity":1,"message":"4653","line":219,"column":33,"nodeType":"4578","messageId":"4579","endLine":223,"endColumn":35},{"ruleId":"4576","severity":1,"message":"4653","line":233,"column":33,"nodeType":"4578","messageId":"4579","endLine":237,"endColumn":35},{"ruleId":"4576","severity":1,"message":"4577","line":247,"column":33,"nodeType":"4578","messageId":"4579","endLine":257,"endColumn":35},{"ruleId":"4576","severity":1,"message":"4580","line":263,"column":25,"nodeType":"4578","messageId":"4579","endLine":263,"endColumn":91},{"ruleId":"4549","severity":1,"message":"4569","line":94,"column":8,"nodeType":"4551","endLine":94,"endColumn":10,"suggestions":"5291"},{"ruleId":"4549","severity":1,"message":"4569","line":102,"column":8,"nodeType":"4551","endLine":102,"endColumn":10,"suggestions":"5292"},{"ruleId":"4549","severity":1,"message":"4569","line":111,"column":8,"nodeType":"4551","endLine":111,"endColumn":10,"suggestions":"5293"},{"ruleId":"4549","severity":1,"message":"4592","line":125,"column":8,"nodeType":"4551","endLine":125,"endColumn":19,"suggestions":"5294"},{"ruleId":"4549","severity":1,"message":"4598","line":144,"column":8,"nodeType":"4551","endLine":144,"endColumn":20,"suggestions":"5295"},{"ruleId":"4549","severity":1,"message":"4586","line":147,"column":15,"nodeType":"4587","endLine":177,"endColumn":6},{"ruleId":"4549","severity":1,"message":"4601","line":177,"column":8,"nodeType":"4551","endLine":177,"endColumn":17,"suggestions":"5296"},{"ruleId":"4543","severity":1,"message":"4692","line":330,"column":58,"nodeType":"4545","messageId":"4546","endLine":330,"endColumn":72},{"ruleId":"4576","severity":1,"message":"4740","line":338,"column":21,"nodeType":"4578","messageId":"4579","endLine":341,"endColumn":23},{"ruleId":"4576","severity":1,"message":"4653","line":351,"column":45,"nodeType":"4578","messageId":"4579","endLine":355,"endColumn":47},{"ruleId":"4576","severity":1,"message":"4577","line":367,"column":45,"nodeType":"4578","messageId":"4579","endLine":383,"endColumn":47},{"ruleId":"4576","severity":1,"message":"4653","line":504,"column":49,"nodeType":"4578","messageId":"4579","endLine":513,"endColumn":51},{"ruleId":"4543","severity":1,"message":"5297","line":1,"column":28,"nodeType":"4545","messageId":"4546","endLine":1,"endColumn":43},{"ruleId":"4543","severity":1,"message":"4790","line":4,"column":5,"nodeType":"4545","messageId":"4546","endLine":4,"endColumn":29},{"ruleId":"4543","severity":1,"message":"4803","line":49,"column":12,"nodeType":"4545","messageId":"4546","endLine":49,"endColumn":24},{"ruleId":"4891","severity":1,"message":"4892","line":50,"column":88,"nodeType":"4893","messageId":"4663","endLine":50,"endColumn":99},{"ruleId":"4549","severity":1,"message":"4569","line":82,"column":8,"nodeType":"4551","endLine":82,"endColumn":10,"suggestions":"5298"},{"ruleId":"4549","severity":1,"message":"4569","line":91,"column":8,"nodeType":"4551","endLine":91,"endColumn":10,"suggestions":"5299"},{"ruleId":"4549","severity":1,"message":"4569","line":101,"column":8,"nodeType":"4551","endLine":101,"endColumn":10,"suggestions":"5300"},{"ruleId":"4549","severity":1,"message":"5287","line":108,"column":8,"nodeType":"4551","endLine":108,"endColumn":21,"suggestions":"5301"},{"ruleId":"4549","severity":1,"message":"4862","line":140,"column":8,"nodeType":"4551","endLine":140,"endColumn":10,"suggestions":"5302"},{"ruleId":"4549","severity":1,"message":"4631","line":153,"column":8,"nodeType":"4551","endLine":153,"endColumn":37,"suggestions":"5303"},{"ruleId":"4543","severity":1,"message":"5304","line":268,"column":27,"nodeType":"4545","messageId":"4546","endLine":268,"endColumn":38},{"ruleId":"4576","severity":1,"message":"4653","line":299,"column":33,"nodeType":"4578","messageId":"4579","endLine":303,"endColumn":35},{"ruleId":"4576","severity":1,"message":"4653","line":313,"column":33,"nodeType":"4578","messageId":"4579","endLine":317,"endColumn":35},{"ruleId":"4576","severity":1,"message":"4580","line":343,"column":25,"nodeType":"4578","messageId":"4579","endLine":343,"endColumn":91},{"ruleId":"4576","severity":1,"message":"4740","line":354,"column":17,"nodeType":"4578","messageId":"4579","endLine":356,"endColumn":72},{"ruleId":"4543","severity":1,"message":"4973","line":4,"column":10,"nodeType":"4545","messageId":"4546","endLine":4,"endColumn":14},{"ruleId":"4543","severity":1,"message":"5305","line":1,"column":8,"nodeType":"4545","messageId":"4546","endLine":1,"endColumn":16},{"ruleId":"4543","severity":1,"message":"5130","line":2,"column":8,"nodeType":"4545","messageId":"4546","endLine":2,"endColumn":22},{"ruleId":"4543","severity":1,"message":"4971","line":3,"column":8,"nodeType":"4545","messageId":"4546","endLine":3,"endColumn":19},{"ruleId":"4543","severity":1,"message":"5306","line":4,"column":40,"nodeType":"4545","messageId":"4546","endLine":4,"endColumn":53},{"ruleId":"4543","severity":1,"message":"5163","line":5,"column":10,"nodeType":"4545","messageId":"4546","endLine":5,"endColumn":17},{"ruleId":"4543","severity":1,"message":"5160","line":6,"column":28,"nodeType":"4545","messageId":"4546","endLine":6,"endColumn":35},{"ruleId":"4543","severity":1,"message":"5307","line":8,"column":5,"nodeType":"4545","messageId":"4546","endLine":8,"endColumn":14},{"ruleId":"4543","severity":1,"message":"5160","line":2,"column":10,"nodeType":"4545","messageId":"4546","endLine":2,"endColumn":17},{"ruleId":"4549","severity":1,"message":"4569","line":83,"column":8,"nodeType":"4551","endLine":83,"endColumn":10,"suggestions":"5308"},{"ruleId":"4543","severity":1,"message":"5104","line":88,"column":13,"nodeType":"4545","messageId":"4546","endLine":88,"endColumn":23},{"ruleId":"4549","severity":1,"message":"4598","line":111,"column":8,"nodeType":"4551","endLine":111,"endColumn":20,"suggestions":"5309"},{"ruleId":"4549","severity":1,"message":"4584","line":144,"column":8,"nodeType":"4551","endLine":144,"endColumn":10,"suggestions":"5310"},{"ruleId":"4549","severity":1,"message":"4586","line":146,"column":15,"nodeType":"4587","endLine":176,"endColumn":6},{"ruleId":"4549","severity":1,"message":"4601","line":176,"column":8,"nodeType":"4551","endLine":176,"endColumn":17,"suggestions":"5311"},{"ruleId":"4549","severity":1,"message":"4590","line":192,"column":8,"nodeType":"4551","endLine":192,"endColumn":29,"suggestions":"5312"},{"ruleId":"4549","severity":1,"message":"4592","line":199,"column":8,"nodeType":"4551","endLine":199,"endColumn":19,"suggestions":"5313"},{"ruleId":"4543","severity":1,"message":"4638","line":8,"column":10,"nodeType":"4545","messageId":"4546","endLine":8,"endColumn":18},{"ruleId":"4549","severity":1,"message":"4569","line":52,"column":8,"nodeType":"4551","endLine":52,"endColumn":10,"suggestions":"5314"},{"ruleId":"4549","severity":1,"message":"4569","line":76,"column":8,"nodeType":"4551","endLine":76,"endColumn":10,"suggestions":"5315"},{"ruleId":"4549","severity":1,"message":"5316","line":97,"column":8,"nodeType":"4551","endLine":97,"endColumn":20,"suggestions":"5317"},{"ruleId":"4549","severity":1,"message":"4586","line":99,"column":15,"nodeType":"4587","endLine":128,"endColumn":6},{"ruleId":"4549","severity":1,"message":"4627","line":128,"column":8,"nodeType":"4551","endLine":128,"endColumn":17,"suggestions":"5318"},{"ruleId":"4549","severity":1,"message":"4569","line":132,"column":8,"nodeType":"4551","endLine":132,"endColumn":23,"suggestions":"5319"},{"ruleId":"4543","severity":1,"message":"4790","line":9,"column":10,"nodeType":"4545","messageId":"4546","endLine":9,"endColumn":34},{"ruleId":"4549","severity":1,"message":"4569","line":55,"column":8,"nodeType":"4551","endLine":55,"endColumn":10,"suggestions":"5320"},{"ruleId":"4549","severity":1,"message":"4586","line":62,"column":15,"nodeType":"4587","endLine":89,"endColumn":6},{"ruleId":"4549","severity":1,"message":"4627","line":89,"column":8,"nodeType":"4551","endLine":89,"endColumn":17,"suggestions":"5321"},{"ruleId":"4549","severity":1,"message":"4598","line":107,"column":8,"nodeType":"4551","endLine":107,"endColumn":20,"suggestions":"5322"},{"ruleId":"4576","severity":1,"message":"4653","line":233,"column":45,"nodeType":"4578","messageId":"4579","endLine":237,"endColumn":47},{"ruleId":"4543","severity":1,"message":"5323","line":1,"column":16,"nodeType":"4545","messageId":"4546","endLine":1,"endColumn":21},{"ruleId":"4543","severity":1,"message":"4790","line":5,"column":5,"nodeType":"4545","messageId":"4546","endLine":5,"endColumn":29},{"ruleId":"4549","severity":1,"message":"4862","line":130,"column":8,"nodeType":"4551","endLine":130,"endColumn":10,"suggestions":"5324"},{"ruleId":"4549","severity":1,"message":"4569","line":140,"column":8,"nodeType":"4551","endLine":140,"endColumn":10,"suggestions":"5325"},{"ruleId":"4549","severity":1,"message":"4569","line":150,"column":8,"nodeType":"4551","endLine":150,"endColumn":10,"suggestions":"5326"},{"ruleId":"4549","severity":1,"message":"4569","line":169,"column":8,"nodeType":"4551","endLine":169,"endColumn":10,"suggestions":"5327"},{"ruleId":"4549","severity":1,"message":"5328","line":198,"column":8,"nodeType":"4551","endLine":198,"endColumn":25,"suggestions":"5329"},{"ruleId":"4549","severity":1,"message":"4738","line":278,"column":8,"nodeType":"4551","endLine":278,"endColumn":40,"suggestions":"5330"},{"ruleId":"4549","severity":1,"message":"4586","line":282,"column":15,"nodeType":"4587","endLine":302,"endColumn":6},{"ruleId":"4549","severity":1,"message":"4738","line":302,"column":8,"nodeType":"4551","endLine":302,"endColumn":38,"suggestions":"5331"},{"ruleId":"4543","severity":1,"message":"5332","line":304,"column":14,"nodeType":"4545","messageId":"4546","endLine":304,"endColumn":30},{"ruleId":"4576","severity":1,"message":"4653","line":343,"column":33,"nodeType":"4578","messageId":"4579","endLine":347,"endColumn":35},{"ruleId":"4576","severity":1,"message":"4653","line":357,"column":33,"nodeType":"4578","messageId":"4579","endLine":361,"endColumn":35},{"ruleId":"4576","severity":1,"message":"4580","line":405,"column":25,"nodeType":"4578","messageId":"4579","endLine":405,"endColumn":89},{"ruleId":"4576","severity":1,"message":"4740","line":416,"column":17,"nodeType":"4578","messageId":"4579","endLine":418,"endColumn":72},{"ruleId":"4543","severity":1,"message":"4594","line":20,"column":10,"nodeType":"4545","messageId":"4546","endLine":20,"endColumn":20},{"ruleId":"4549","severity":1,"message":"4569","line":53,"column":6,"nodeType":"4551","endLine":53,"endColumn":8,"suggestions":"5333"},{"ruleId":"4549","severity":1,"message":"4569","line":101,"column":8,"nodeType":"4551","endLine":101,"endColumn":10,"suggestions":"5334"},{"ruleId":"4549","severity":1,"message":"4598","line":129,"column":8,"nodeType":"4551","endLine":129,"endColumn":20,"suggestions":"5335"},{"ruleId":"4549","severity":1,"message":"4584","line":171,"column":8,"nodeType":"4551","endLine":171,"endColumn":10,"suggestions":"5336"},{"ruleId":"4549","severity":1,"message":"4586","line":174,"column":15,"nodeType":"4587","endLine":205,"endColumn":6},{"ruleId":"4549","severity":1,"message":"4601","line":205,"column":8,"nodeType":"4551","endLine":205,"endColumn":17,"suggestions":"5337"},{"ruleId":"4549","severity":1,"message":"4631","line":219,"column":8,"nodeType":"4551","endLine":219,"endColumn":29,"suggestions":"5338"},{"ruleId":"4549","severity":1,"message":"4592","line":227,"column":8,"nodeType":"4551","endLine":227,"endColumn":19,"suggestions":"5339"},{"ruleId":"4576","severity":1,"message":"4577","line":361,"column":61,"nodeType":"4578","messageId":"4579","endLine":369,"endColumn":63},{"ruleId":"4543","severity":1,"message":"5157","line":6,"column":10,"nodeType":"4545","messageId":"4546","endLine":6,"endColumn":15},{"ruleId":"4543","severity":1,"message":"5158","line":6,"column":17,"nodeType":"4545","messageId":"4546","endLine":6,"endColumn":29},{"ruleId":"4543","severity":1,"message":"5340","line":7,"column":10,"nodeType":"4545","messageId":"4546","endLine":7,"endColumn":21},{"ruleId":"4543","severity":1,"message":"5341","line":7,"column":42,"nodeType":"4545","messageId":"4546","endLine":7,"endColumn":57},{"ruleId":"4664","severity":1,"message":"5342","line":87,"column":9,"nodeType":"4545","messageId":"4666","endLine":87,"endColumn":12},{"ruleId":"4543","severity":1,"message":"4971","line":4,"column":8,"nodeType":"4545","messageId":"4546","endLine":4,"endColumn":19},{"ruleId":"4543","severity":1,"message":"5161","line":5,"column":46,"nodeType":"4545","messageId":"4546","endLine":5,"endColumn":61},{"ruleId":"4891","severity":1,"message":"5162","line":290,"column":13,"nodeType":"4893","messageId":"4663","endLine":290,"endColumn":22},{"ruleId":"4664","severity":1,"message":"5343","line":344,"column":13,"nodeType":"4545","messageId":"4666","endLine":344,"endColumn":17},{"ruleId":"4664","severity":1,"message":"5344","line":345,"column":13,"nodeType":"4545","messageId":"4666","endLine":345,"endColumn":17},{"ruleId":"4543","severity":1,"message":"5163","line":2,"column":10,"nodeType":"4545","messageId":"4546","endLine":2,"endColumn":17},{"ruleId":"4543","severity":1,"message":"5345","line":85,"column":15,"nodeType":"4545","messageId":"4546","endLine":85,"endColumn":22},{"ruleId":"4891","severity":1,"message":"4974","line":122,"column":50,"nodeType":"4893","messageId":"4663","endLine":122,"endColumn":59},{"ruleId":"4543","severity":1,"message":"5346","line":197,"column":15,"nodeType":"4545","messageId":"4546","endLine":197,"endColumn":23},{"ruleId":"4543","severity":1,"message":"5164","line":253,"column":9,"nodeType":"4545","messageId":"4546","endLine":253,"endColumn":17},{"ruleId":"4543","severity":1,"message":"5165","line":265,"column":13,"nodeType":"4545","messageId":"4546","endLine":265,"endColumn":28},{"ruleId":"4543","severity":1,"message":"5345","line":266,"column":15,"nodeType":"4545","messageId":"4546","endLine":266,"endColumn":22},{"ruleId":"4891","severity":1,"message":"4974","line":301,"column":50,"nodeType":"4893","messageId":"4663","endLine":301,"endColumn":59},{"ruleId":"4543","severity":1,"message":"5346","line":368,"column":15,"nodeType":"4545","messageId":"4546","endLine":368,"endColumn":23},{"ruleId":"4543","severity":1,"message":"5347","line":470,"column":13,"nodeType":"4545","messageId":"4546","endLine":470,"endColumn":24},{"ruleId":"4549","severity":1,"message":"5348","line":273,"column":6,"nodeType":"4551","endLine":273,"endColumn":47,"suggestions":"5349"},{"ruleId":"4549","severity":1,"message":"5350","line":114,"column":8,"nodeType":"4551","endLine":114,"endColumn":10,"suggestions":"5351"},{"ruleId":"4549","severity":1,"message":"4598","line":141,"column":8,"nodeType":"4551","endLine":141,"endColumn":20,"suggestions":"5352"},{"ruleId":"4549","severity":1,"message":"4584","line":174,"column":8,"nodeType":"4551","endLine":174,"endColumn":10,"suggestions":"5353"},{"ruleId":"4549","severity":1,"message":"4586","line":176,"column":15,"nodeType":"4587","endLine":208,"endColumn":6},{"ruleId":"4549","severity":1,"message":"5354","line":208,"column":8,"nodeType":"4551","endLine":208,"endColumn":17,"suggestions":"5355"},{"ruleId":"4549","severity":1,"message":"4592","line":215,"column":8,"nodeType":"4551","endLine":215,"endColumn":19,"suggestions":"5356"},{"ruleId":"4549","severity":1,"message":"4569","line":224,"column":8,"nodeType":"4551","endLine":224,"endColumn":10,"suggestions":"5357"},{"ruleId":"4549","severity":1,"message":"4569","line":232,"column":8,"nodeType":"4551","endLine":232,"endColumn":10,"suggestions":"5358"},{"ruleId":"4549","severity":1,"message":"4569","line":240,"column":8,"nodeType":"4551","endLine":240,"endColumn":10,"suggestions":"5359"},{"ruleId":"4543","severity":1,"message":"5360","line":260,"column":14,"nodeType":"4545","messageId":"4546","endLine":260,"endColumn":32},{"ruleId":"4576","severity":1,"message":"4653","line":375,"column":45,"nodeType":"4578","messageId":"4579","endLine":379,"endColumn":47},{"ruleId":"4891","severity":1,"message":"4892","line":34,"column":9,"nodeType":"4893","messageId":"4663","endLine":34,"endColumn":20},{"ruleId":"4549","severity":1,"message":"5064","line":77,"column":8,"nodeType":"4551","endLine":77,"endColumn":31,"suggestions":"5361"},{"ruleId":"4549","severity":1,"message":"5362","line":109,"column":8,"nodeType":"4551","endLine":109,"endColumn":10,"suggestions":"5363"},{"ruleId":"4576","severity":1,"message":"4740","line":138,"column":21,"nodeType":"4578","messageId":"4579","endLine":142,"endColumn":23},{"ruleId":"4549","severity":1,"message":"4569","line":125,"column":8,"nodeType":"4551","endLine":125,"endColumn":31,"suggestions":"5364"},{"ruleId":"4549","severity":1,"message":"4592","line":132,"column":8,"nodeType":"4551","endLine":132,"endColumn":19,"suggestions":"5365"},{"ruleId":"4549","severity":1,"message":"4569","line":148,"column":8,"nodeType":"4551","endLine":148,"endColumn":20,"suggestions":"5366"},{"ruleId":"4549","severity":1,"message":"5367","line":175,"column":8,"nodeType":"4551","endLine":175,"endColumn":31,"suggestions":"5368"},{"ruleId":"4576","severity":1,"message":"4577","line":577,"column":41,"nodeType":"4578","messageId":"4579","endLine":590,"endColumn":43},{"ruleId":"4576","severity":1,"message":"4577","line":602,"column":37,"nodeType":"4578","messageId":"4579","endLine":614,"endColumn":39},{"ruleId":"4549","severity":1,"message":"4592","line":49,"column":8,"nodeType":"4551","endLine":49,"endColumn":19,"suggestions":"5369"},{"ruleId":"4549","severity":1,"message":"4592","line":59,"column":8,"nodeType":"4551","endLine":59,"endColumn":19,"suggestions":"5370"},{"ruleId":"4576","severity":1,"message":"4653","line":199,"column":33,"nodeType":"4578","messageId":"4579","endLine":210,"endColumn":35},{"ruleId":"4543","severity":1,"message":"5371","line":285,"column":14,"nodeType":"4545","messageId":"4546","endLine":285,"endColumn":26},{"ruleId":"4549","severity":1,"message":"5372","line":45,"column":8,"nodeType":"4551","endLine":45,"endColumn":23,"suggestions":"5373"},{"ruleId":"4959","severity":1,"message":"4960","line":130,"column":17,"nodeType":"4578","endLine":130,"endColumn":64},{"ruleId":"4660","severity":1,"message":"4670","line":16,"column":30,"nodeType":"4662","messageId":"4663","endLine":16,"endColumn":32},{"ruleId":"4660","severity":1,"message":"4670","line":16,"column":64,"nodeType":"4662","messageId":"4663","endLine":16,"endColumn":66},{"ruleId":"4549","severity":1,"message":"4820","line":121,"column":9,"nodeType":"4551","endLine":121,"endColumn":21,"suggestions":"5374"},{"ruleId":"4549","severity":1,"message":"4862","line":136,"column":8,"nodeType":"4551","endLine":136,"endColumn":10,"suggestions":"5375"},{"ruleId":"4549","severity":1,"message":"4864","line":257,"column":8,"nodeType":"4551","endLine":257,"endColumn":18,"suggestions":"5376"},{"ruleId":"4549","severity":1,"message":"4858","line":270,"column":8,"nodeType":"4551","endLine":270,"endColumn":10,"suggestions":"5377"},{"ruleId":"4549","severity":1,"message":"4586","line":272,"column":15,"nodeType":"4587","endLine":301,"endColumn":6},{"ruleId":"4549","severity":1,"message":"5378","line":301,"column":8,"nodeType":"4551","endLine":301,"endColumn":24,"suggestions":"5379"},{"ruleId":"4549","severity":1,"message":"5380","line":327,"column":8,"nodeType":"4551","endLine":327,"endColumn":29,"suggestions":"5381"},{"ruleId":"4614","severity":1,"message":"4615","line":408,"column":38,"nodeType":"4587","messageId":"4616","endLine":408,"endColumn":40},{"ruleId":"4543","severity":1,"message":"5005","line":2,"column":10,"nodeType":"4545","messageId":"4546","endLine":2,"endColumn":19},{"ruleId":"4543","severity":1,"message":"5382","line":4,"column":10,"nodeType":"4545","messageId":"4546","endLine":4,"endColumn":21},{"ruleId":"4543","severity":1,"message":"4567","line":5,"column":10,"nodeType":"4545","messageId":"4546","endLine":5,"endColumn":20},{"ruleId":"4543","severity":1,"message":"5383","line":10,"column":28,"nodeType":"4545","messageId":"4546","endLine":10,"endColumn":35},{"ruleId":"4543","severity":1,"message":"5384","line":28,"column":12,"nodeType":"4545","messageId":"4546","endLine":28,"endColumn":31},{"ruleId":"4543","severity":1,"message":"5385","line":34,"column":9,"nodeType":"4545","messageId":"4546","endLine":34,"endColumn":25},{"ruleId":"4549","severity":1,"message":"4569","line":56,"column":8,"nodeType":"4551","endLine":56,"endColumn":10,"suggestions":"5386"},{"ruleId":"4549","severity":1,"message":"4598","line":78,"column":8,"nodeType":"4551","endLine":78,"endColumn":20,"suggestions":"5387"},{"ruleId":"4543","severity":1,"message":"4741","line":5,"column":27,"nodeType":"4545","messageId":"4546","endLine":5,"endColumn":39},{"ruleId":"4549","severity":1,"message":"4569","line":41,"column":8,"nodeType":"4551","endLine":41,"endColumn":31,"suggestions":"5388"},{"ruleId":"4543","severity":1,"message":"4741","line":4,"column":25,"nodeType":"4545","messageId":"4546","endLine":4,"endColumn":37},{"ruleId":"4543","severity":1,"message":"5389","line":19,"column":11,"nodeType":"4545","messageId":"4546","endLine":19,"endColumn":26},{"ruleId":"4549","severity":1,"message":"4569","line":52,"column":8,"nodeType":"4551","endLine":52,"endColumn":31,"suggestions":"5390"},{"ruleId":"4549","severity":1,"message":"4879","line":61,"column":8,"nodeType":"4551","endLine":61,"endColumn":17,"suggestions":"5391"},{"ruleId":"5141","replacedBy":"5392"},{"ruleId":"5143","replacedBy":"5393"},{"ruleId":"4543","severity":1,"message":"4741","line":4,"column":25,"nodeType":"4545","messageId":"4546","endLine":4,"endColumn":37},{"ruleId":"4549","severity":1,"message":"5086","line":35,"column":8,"nodeType":"4551","endLine":35,"endColumn":31,"suggestions":"5394"},{"ruleId":"5193","severity":1,"message":"5194","line":140,"column":13,"nodeType":"5195","messageId":"5196","endLine":284,"endColumn":14},{"ruleId":"4660","severity":1,"message":"4661","line":145,"column":46,"nodeType":"4662","messageId":"4663","endLine":145,"endColumn":48},{"ruleId":"4660","severity":1,"message":"4661","line":178,"column":44,"nodeType":"4662","messageId":"4663","endLine":178,"endColumn":46},{"ruleId":"4664","severity":1,"message":"5197","line":180,"column":29,"nodeType":"4545","messageId":"4666","endLine":180,"endColumn":31},{"ruleId":"4664","severity":1,"message":"5198","line":181,"column":29,"nodeType":"4545","messageId":"4666","endLine":181,"endColumn":32},{"ruleId":"4664","severity":1,"message":"5199","line":182,"column":29,"nodeType":"4545","messageId":"4666","endLine":182,"endColumn":32},{"ruleId":"4664","severity":1,"message":"5200","line":199,"column":29,"nodeType":"4545","messageId":"4666","endLine":199,"endColumn":36},{"ruleId":"4664","severity":1,"message":"5197","line":226,"column":25,"nodeType":"4545","messageId":"4666","endLine":226,"endColumn":27},{"ruleId":"4664","severity":1,"message":"5198","line":227,"column":25,"nodeType":"4545","messageId":"4666","endLine":227,"endColumn":28},{"ruleId":"4664","severity":1,"message":"5200","line":237,"column":29,"nodeType":"4545","messageId":"4666","endLine":237,"endColumn":36},{"ruleId":"4664","severity":1,"message":"5201","line":248,"column":25,"nodeType":"4545","messageId":"4666","endLine":248,"endColumn":34},{"ruleId":"4664","severity":1,"message":"5197","line":264,"column":25,"nodeType":"4545","messageId":"4666","endLine":264,"endColumn":27},{"ruleId":"4664","severity":1,"message":"5198","line":265,"column":25,"nodeType":"4545","messageId":"4666","endLine":265,"endColumn":28},{"ruleId":"4664","severity":1,"message":"5202","line":267,"column":25,"nodeType":"4545","messageId":"4666","endLine":267,"endColumn":34},{"ruleId":"4664","severity":1,"message":"5200","line":275,"column":29,"nodeType":"4545","messageId":"4666","endLine":275,"endColumn":36},{"ruleId":"4543","severity":1,"message":"4930","line":1,"column":10,"nodeType":"4545","messageId":"4546","endLine":1,"endColumn":23},{"ruleId":"4543","severity":1,"message":"4701","line":7,"column":5,"nodeType":"4545","messageId":"4546","endLine":7,"endColumn":11},{"ruleId":"4543","severity":1,"message":"5395","line":25,"column":20,"nodeType":"4545","messageId":"4546","endLine":25,"endColumn":29},{"ruleId":"4543","severity":1,"message":"4810","line":29,"column":10,"nodeType":"4545","messageId":"4546","endLine":29,"endColumn":15},{"ruleId":"4549","severity":1,"message":"4569","line":119,"column":8,"nodeType":"4551","endLine":119,"endColumn":10,"suggestions":"5396"},{"ruleId":"4549","severity":1,"message":"4598","line":138,"column":8,"nodeType":"4551","endLine":138,"endColumn":20,"suggestions":"5397"},{"ruleId":"4549","severity":1,"message":"5398","line":168,"column":8,"nodeType":"4551","endLine":168,"endColumn":36,"suggestions":"5399"},{"ruleId":"4576","severity":1,"message":"4740","line":243,"column":21,"nodeType":"4578","messageId":"4579","endLine":245,"endColumn":67},{"ruleId":"4576","severity":1,"message":"4653","line":255,"column":45,"nodeType":"4578","messageId":"4579","endLine":259,"endColumn":47},{"ruleId":"4576","severity":1,"message":"4653","line":268,"column":45,"nodeType":"4578","messageId":"4579","endLine":272,"endColumn":47},{"ruleId":"4576","severity":1,"message":"4839","line":278,"column":37,"nodeType":"4578","messageId":"4579","endLine":284,"endColumn":38},{"ruleId":"4576","severity":1,"message":"4839","line":291,"column":37,"nodeType":"4578","messageId":"4579","endLine":297,"endColumn":38},{"ruleId":"4549","severity":1,"message":"4569","line":41,"column":8,"nodeType":"4551","endLine":41,"endColumn":10,"suggestions":"5400"},{"ruleId":"4543","severity":1,"message":"5033","line":44,"column":11,"nodeType":"4545","messageId":"4546","endLine":44,"endColumn":25},{"ruleId":"4549","severity":1,"message":"4598","line":64,"column":8,"nodeType":"4551","endLine":64,"endColumn":20,"suggestions":"5401"},{"ruleId":"4549","severity":1,"message":"4582","line":125,"column":8,"nodeType":"4551","endLine":125,"endColumn":20,"suggestions":"5402"},{"ruleId":"4549","severity":1,"message":"4584","line":165,"column":8,"nodeType":"4551","endLine":165,"endColumn":10,"suggestions":"5403"},{"ruleId":"4549","severity":1,"message":"4586","line":167,"column":15,"nodeType":"4587","endLine":205,"endColumn":6},{"ruleId":"4549","severity":1,"message":"4588","line":205,"column":8,"nodeType":"4551","endLine":205,"endColumn":17,"suggestions":"5404"},{"ruleId":"4549","severity":1,"message":"4592","line":213,"column":8,"nodeType":"4551","endLine":213,"endColumn":19,"suggestions":"5405"},{"ruleId":"4576","severity":1,"message":"4577","line":303,"column":57,"nodeType":"4578","messageId":"4579","endLine":314,"endColumn":59},{"ruleId":"4543","severity":1,"message":"5406","line":50,"column":12,"nodeType":"4545","messageId":"4546","endLine":50,"endColumn":25},{"ruleId":"4543","severity":1,"message":"5407","line":65,"column":9,"nodeType":"4545","messageId":"4546","endLine":65,"endColumn":33},{"ruleId":"4549","severity":1,"message":"5408","line":108,"column":8,"nodeType":"4551","endLine":108,"endColumn":10,"suggestions":"5409"},{"ruleId":"4549","severity":1,"message":"4598","line":128,"column":8,"nodeType":"4551","endLine":128,"endColumn":20,"suggestions":"5410"},{"ruleId":"4549","severity":1,"message":"4586","line":130,"column":15,"nodeType":"4587","endLine":155,"endColumn":6},{"ruleId":"4549","severity":1,"message":"4569","line":155,"column":8,"nodeType":"4551","endLine":155,"endColumn":17,"suggestions":"5411"},{"ruleId":"4549","severity":1,"message":"4569","line":166,"column":8,"nodeType":"4551","endLine":166,"endColumn":20,"suggestions":"5412"},{"ruleId":"4660","severity":1,"message":"4661","line":188,"column":26,"nodeType":"4662","messageId":"4663","endLine":188,"endColumn":28},{"ruleId":"4660","severity":1,"message":"4661","line":199,"column":23,"nodeType":"4662","messageId":"4663","endLine":199,"endColumn":25},{"ruleId":"4576","severity":1,"message":"4577","line":324,"column":57,"nodeType":"4578","messageId":"4579","endLine":337,"endColumn":59},{"ruleId":"4576","severity":1,"message":"4839","line":483,"column":33,"nodeType":"4578","messageId":"4579","endLine":489,"endColumn":34},{"ruleId":"4576","severity":1,"message":"4839","line":493,"column":33,"nodeType":"4578","messageId":"4579","endLine":499,"endColumn":34},{"ruleId":"4549","severity":1,"message":"5413","line":80,"column":8,"nodeType":"4551","endLine":80,"endColumn":10,"suggestions":"5414"},{"ruleId":"4549","severity":1,"message":"4598","line":100,"column":8,"nodeType":"4551","endLine":100,"endColumn":20,"suggestions":"5415"},{"ruleId":"4549","severity":1,"message":"4586","line":104,"column":15,"nodeType":"4587","endLine":124,"endColumn":6},{"ruleId":"4549","severity":1,"message":"5416","line":124,"column":8,"nodeType":"4551","endLine":124,"endColumn":17,"suggestions":"5417"},{"ruleId":"4660","severity":1,"message":"4661","line":148,"column":26,"nodeType":"4662","messageId":"4663","endLine":148,"endColumn":28},{"ruleId":"4660","severity":1,"message":"4661","line":158,"column":23,"nodeType":"4662","messageId":"4663","endLine":158,"endColumn":25},{"ruleId":"4576","severity":1,"message":"4577","line":335,"column":57,"nodeType":"4578","messageId":"4579","endLine":348,"endColumn":59},{"ruleId":"4576","severity":1,"message":"4580","line":353,"column":49,"nodeType":"4578","messageId":"4579","endLine":355,"endColumn":81},{"ruleId":"4576","severity":1,"message":"4839","line":493,"column":33,"nodeType":"4578","messageId":"4579","endLine":499,"endColumn":34},{"ruleId":"4576","severity":1,"message":"4839","line":503,"column":33,"nodeType":"4578","messageId":"4579","endLine":509,"endColumn":34},{"ruleId":"4576","severity":1,"message":"4577","line":86,"column":33,"nodeType":"4578","messageId":"4579","endLine":96,"endColumn":35},{"ruleId":"4576","severity":1,"message":"4839","line":103,"column":29,"nodeType":"4578","messageId":"4579","endLine":107,"endColumn":30},{"ruleId":"4576","severity":1,"message":"4839","line":111,"column":29,"nodeType":"4578","messageId":"4579","endLine":118,"endColumn":30},{"ruleId":"4543","severity":1,"message":"5418","line":6,"column":3,"nodeType":"4545","messageId":"4546","endLine":6,"endColumn":32},{"ruleId":"4543","severity":1,"message":"4930","line":26,"column":10,"nodeType":"4545","messageId":"4546","endLine":26,"endColumn":23},{"ruleId":"4543","severity":1,"message":"4642","line":8,"column":8,"nodeType":"4545","messageId":"4546","endLine":8,"endColumn":14},{"ruleId":"4543","severity":1,"message":"5120","line":34,"column":8,"nodeType":"4545","messageId":"4546","endLine":34,"endColumn":28},{"ruleId":"4543","severity":1,"message":"4680","line":43,"column":22,"nodeType":"4545","messageId":"4546","endLine":43,"endColumn":33},{"ruleId":"4549","severity":1,"message":"5413","line":88,"column":8,"nodeType":"4551","endLine":88,"endColumn":10,"suggestions":"5419"},{"ruleId":"4543","severity":1,"message":"5033","line":91,"column":11,"nodeType":"4545","messageId":"4546","endLine":91,"endColumn":25},{"ruleId":"4549","severity":1,"message":"4598","line":109,"column":8,"nodeType":"4551","endLine":109,"endColumn":20,"suggestions":"5420"},{"ruleId":"4549","severity":1,"message":"4592","line":116,"column":8,"nodeType":"4551","endLine":116,"endColumn":19,"suggestions":"5421"},{"ruleId":"4549","severity":1,"message":"4586","line":118,"column":15,"nodeType":"4587","endLine":136,"endColumn":6},{"ruleId":"4549","severity":1,"message":"4569","line":136,"column":8,"nodeType":"4551","endLine":136,"endColumn":17,"suggestions":"5422"},{"ruleId":"4549","severity":1,"message":"4569","line":141,"column":8,"nodeType":"4551","endLine":141,"endColumn":22,"suggestions":"5423"},{"ruleId":"4576","severity":1,"message":"4577","line":254,"column":45,"nodeType":"4578","messageId":"4579","endLine":267,"endColumn":47},{"ruleId":"4576","severity":1,"message":"4580","line":273,"column":41,"nodeType":"4578","messageId":"4579","endLine":275,"endColumn":73},{"ruleId":"4576","severity":1,"message":"4890","line":277,"column":41,"nodeType":"4578","messageId":"4579","endLine":277,"endColumn":89},{"ruleId":"4543","severity":1,"message":"4680","line":47,"column":22,"nodeType":"4545","messageId":"4546","endLine":47,"endColumn":33},{"ruleId":"4543","severity":1,"message":"5424","line":49,"column":12,"nodeType":"4545","messageId":"4546","endLine":49,"endColumn":25},{"ruleId":"4543","severity":1,"message":"5425","line":49,"column":27,"nodeType":"4545","messageId":"4546","endLine":49,"endColumn":43},{"ruleId":"4543","severity":1,"message":"5426","line":50,"column":12,"nodeType":"4545","messageId":"4546","endLine":50,"endColumn":23},{"ruleId":"4543","severity":1,"message":"5427","line":50,"column":25,"nodeType":"4545","messageId":"4546","endLine":50,"endColumn":39},{"ruleId":"4543","severity":1,"message":"5145","line":62,"column":9,"nodeType":"4545","messageId":"4546","endLine":62,"endColumn":18},{"ruleId":"4549","severity":1,"message":"4569","line":93,"column":8,"nodeType":"4551","endLine":93,"endColumn":10,"suggestions":"5428"},{"ruleId":"4543","severity":1,"message":"5033","line":96,"column":11,"nodeType":"4545","messageId":"4546","endLine":96,"endColumn":25},{"ruleId":"4549","severity":1,"message":"4598","line":116,"column":8,"nodeType":"4551","endLine":116,"endColumn":20,"suggestions":"5429"},{"ruleId":"4549","severity":1,"message":"4592","line":123,"column":8,"nodeType":"4551","endLine":123,"endColumn":19,"suggestions":"5430"},{"ruleId":"4549","severity":1,"message":"4569","line":128,"column":8,"nodeType":"4551","endLine":128,"endColumn":21,"suggestions":"5431"},{"ruleId":"4549","severity":1,"message":"4586","line":130,"column":15,"nodeType":"4587","endLine":146,"endColumn":6},{"ruleId":"4549","severity":1,"message":"4569","line":146,"column":8,"nodeType":"4551","endLine":146,"endColumn":17,"suggestions":"5432"},{"ruleId":"4576","severity":1,"message":"4580","line":340,"column":45,"nodeType":"4578","messageId":"4579","endLine":342,"endColumn":102},{"ruleId":"4576","severity":1,"message":"4890","line":344,"column":45,"nodeType":"4578","messageId":"4579","endLine":344,"endColumn":93},{"ruleId":"4543","severity":1,"message":"4737","line":1,"column":28,"nodeType":"4545","messageId":"4546","endLine":1,"endColumn":36},{"ruleId":"4549","severity":1,"message":"4569","line":19,"column":8,"nodeType":"4551","endLine":19,"endColumn":10,"suggestions":"5433"},{"ruleId":"5141","replacedBy":"5434"},{"ruleId":"5143","replacedBy":"5435"},{"ruleId":"4543","severity":1,"message":"4741","line":3,"column":68,"nodeType":"4545","messageId":"4546","endLine":3,"endColumn":80},{"ruleId":"4543","severity":1,"message":"5436","line":5,"column":10,"nodeType":"4545","messageId":"4546","endLine":5,"endColumn":40},{"ruleId":"4543","severity":1,"message":"4699","line":3,"column":39,"nodeType":"4545","messageId":"4546","endLine":3,"endColumn":42},{"ruleId":"4543","severity":1,"message":"5437","line":6,"column":10,"nodeType":"4545","messageId":"4546","endLine":6,"endColumn":25},{"ruleId":"4543","severity":1,"message":"4710","line":7,"column":10,"nodeType":"4545","messageId":"4546","endLine":7,"endColumn":24},{"ruleId":"4543","severity":1,"message":"5438","line":7,"column":26,"nodeType":"4545","messageId":"4546","endLine":7,"endColumn":42},{"ruleId":"4543","severity":1,"message":"5439","line":7,"column":44,"nodeType":"4545","messageId":"4546","endLine":7,"endColumn":59},{"ruleId":"4543","severity":1,"message":"5440","line":8,"column":10,"nodeType":"4545","messageId":"4546","endLine":8,"endColumn":27},{"ruleId":"4543","severity":1,"message":"5441","line":9,"column":10,"nodeType":"4545","messageId":"4546","endLine":9,"endColumn":29},{"ruleId":"4543","severity":1,"message":"5442","line":18,"column":12,"nodeType":"4545","messageId":"4546","endLine":18,"endColumn":19},{"ruleId":"4543","severity":1,"message":"5443","line":18,"column":21,"nodeType":"4545","messageId":"4546","endLine":18,"endColumn":31},{"ruleId":"4549","severity":1,"message":"4569","line":27,"column":8,"nodeType":"4551","endLine":27,"endColumn":10,"suggestions":"5444"},{"ruleId":"4543","severity":1,"message":"5406","line":53,"column":12,"nodeType":"4545","messageId":"4546","endLine":53,"endColumn":25},{"ruleId":"4549","severity":1,"message":"4738","line":85,"column":8,"nodeType":"4551","endLine":85,"endColumn":10,"suggestions":"5445"},{"ruleId":"4543","severity":1,"message":"5033","line":88,"column":11,"nodeType":"4545","messageId":"4546","endLine":88,"endColumn":25},{"ruleId":"4543","severity":1,"message":"5146","line":91,"column":11,"nodeType":"4545","messageId":"4546","endLine":91,"endColumn":17},{"ruleId":"4543","severity":1,"message":"5147","line":92,"column":13,"nodeType":"4545","messageId":"4546","endLine":92,"endColumn":20},{"ruleId":"4549","severity":1,"message":"4598","line":109,"column":8,"nodeType":"4551","endLine":109,"endColumn":20,"suggestions":"5446"},{"ruleId":"4549","severity":1,"message":"4592","line":117,"column":8,"nodeType":"4551","endLine":117,"endColumn":19,"suggestions":"5447"},{"ruleId":"4549","severity":1,"message":"4586","line":119,"column":15,"nodeType":"4587","endLine":135,"endColumn":6},{"ruleId":"4549","severity":1,"message":"4569","line":135,"column":8,"nodeType":"4551","endLine":135,"endColumn":17,"suggestions":"5448"},{"ruleId":"4660","severity":1,"message":"4661","line":164,"column":26,"nodeType":"4662","messageId":"4663","endLine":164,"endColumn":28},{"ruleId":"4660","severity":1,"message":"4661","line":174,"column":23,"nodeType":"4662","messageId":"4663","endLine":174,"endColumn":25},{"ruleId":"4660","severity":1,"message":"4661","line":174,"column":46,"nodeType":"4662","messageId":"4663","endLine":174,"endColumn":48},{"ruleId":"4660","severity":1,"message":"4661","line":174,"column":70,"nodeType":"4662","messageId":"4663","endLine":174,"endColumn":72},{"ruleId":"4543","severity":1,"message":"4791","line":14,"column":13,"nodeType":"4545","messageId":"4546","endLine":14,"endColumn":19},{"ruleId":"4549","severity":1,"message":"4569","line":57,"column":8,"nodeType":"4551","endLine":57,"endColumn":10,"suggestions":"5449"},{"ruleId":"4576","severity":1,"message":"4577","line":127,"column":33,"nodeType":"4578","messageId":"4579","endLine":142,"endColumn":35},{"ruleId":"4576","severity":1,"message":"4580","line":147,"column":25,"nodeType":"4578","messageId":"4579","endLine":147,"endColumn":91},{"ruleId":"4543","severity":1,"message":"5450","line":12,"column":13,"nodeType":"4545","messageId":"4546","endLine":12,"endColumn":17},{"ruleId":"4549","severity":1,"message":"4598","line":73,"column":8,"nodeType":"4551","endLine":73,"endColumn":20,"suggestions":"5451"},{"ruleId":"4549","severity":1,"message":"4569","line":82,"column":8,"nodeType":"4551","endLine":82,"endColumn":10,"suggestions":"5452"},{"ruleId":"4549","severity":1,"message":"5453","line":109,"column":8,"nodeType":"4551","endLine":109,"endColumn":22,"suggestions":"5454"},{"ruleId":"4549","severity":1,"message":"5455","line":129,"column":8,"nodeType":"4551","endLine":129,"endColumn":38,"suggestions":"5456"},{"ruleId":"4576","severity":1,"message":"4653","line":316,"column":37,"nodeType":"4578","messageId":"4579","endLine":325,"endColumn":39},{"ruleId":"4576","severity":1,"message":"4653","line":335,"column":37,"nodeType":"4578","messageId":"4579","endLine":344,"endColumn":39},{"ruleId":"4576","severity":1,"message":"4577","line":355,"column":41,"nodeType":"4578","messageId":"4579","endLine":368,"endColumn":43},{"ruleId":"4576","severity":1,"message":"4839","line":375,"column":29,"nodeType":"4578","messageId":"4579","endLine":381,"endColumn":30},{"ruleId":"4576","severity":1,"message":"4839","line":389,"column":29,"nodeType":"4578","messageId":"4579","endLine":395,"endColumn":30},{"ruleId":"4543","severity":1,"message":"5005","line":1,"column":17,"nodeType":"4545","messageId":"4546","endLine":1,"endColumn":26},{"ruleId":"4543","severity":1,"message":"4737","line":1,"column":28,"nodeType":"4545","messageId":"4546","endLine":1,"endColumn":36},{"ruleId":"4543","severity":1,"message":"5457","line":20,"column":5,"nodeType":"4545","messageId":"4546","endLine":20,"endColumn":20},{"ruleId":"4543","severity":1,"message":"5458","line":21,"column":5,"nodeType":"4545","messageId":"4546","endLine":21,"endColumn":28},{"ruleId":"4543","severity":1,"message":"5459","line":30,"column":5,"nodeType":"4545","messageId":"4546","endLine":30,"endColumn":19},{"ruleId":"4543","severity":1,"message":"5460","line":34,"column":10,"nodeType":"4545","messageId":"4546","endLine":34,"endColumn":27},{"ruleId":"4543","severity":1,"message":"5147","line":93,"column":13,"nodeType":"4545","messageId":"4546","endLine":93,"endColumn":20},{"ruleId":"4549","severity":1,"message":"4569","line":110,"column":8,"nodeType":"4551","endLine":110,"endColumn":10,"suggestions":"5461"},{"ruleId":"4549","severity":1,"message":"4820","line":118,"column":9,"nodeType":"4551","endLine":118,"endColumn":21,"suggestions":"5462"},{"ruleId":"4549","severity":1,"message":"4584","line":154,"column":8,"nodeType":"4551","endLine":154,"endColumn":10,"suggestions":"5463"},{"ruleId":"4549","severity":1,"message":"4823","line":164,"column":9,"nodeType":"4551","endLine":164,"endColumn":18,"suggestions":"5464"},{"ruleId":"4549","severity":1,"message":"4569","line":168,"column":8,"nodeType":"4551","endLine":168,"endColumn":17,"suggestions":"5465"},{"ruleId":"4549","severity":1,"message":"4590","line":185,"column":8,"nodeType":"4551","endLine":185,"endColumn":29,"suggestions":"5466"},{"ruleId":"4549","severity":1,"message":"4592","line":193,"column":8,"nodeType":"4551","endLine":193,"endColumn":19,"suggestions":"5467"},{"ruleId":"4543","severity":1,"message":"5468","line":2,"column":70,"nodeType":"4545","messageId":"4546","endLine":2,"endColumn":98},{"ruleId":"4549","severity":1,"message":"4569","line":82,"column":8,"nodeType":"4551","endLine":82,"endColumn":10,"suggestions":"5469"},{"ruleId":"4549","severity":1,"message":"4598","line":104,"column":8,"nodeType":"4551","endLine":104,"endColumn":20,"suggestions":"5470"},{"ruleId":"4549","severity":1,"message":"4592","line":111,"column":8,"nodeType":"4551","endLine":111,"endColumn":19,"suggestions":"5471"},{"ruleId":"4549","severity":1,"message":"4569","line":130,"column":8,"nodeType":"4551","endLine":130,"endColumn":17,"suggestions":"5472"},{"ruleId":"4576","severity":1,"message":"4653","line":275,"column":21,"nodeType":"4578","messageId":"4579","endLine":281,"endColumn":23},{"ruleId":"4576","severity":1,"message":"4740","line":532,"column":21,"nodeType":"4578","messageId":"4579","endLine":534,"endColumn":75},{"ruleId":"4576","severity":1,"message":"4653","line":545,"column":45,"nodeType":"4578","messageId":"4579","endLine":549,"endColumn":47},{"ruleId":"4576","severity":1,"message":"4577","line":559,"column":45,"nodeType":"4578","messageId":"4579","endLine":574,"endColumn":47},{"ruleId":"4543","severity":1,"message":"4973","line":4,"column":10,"nodeType":"4545","messageId":"4546","endLine":4,"endColumn":14},{"ruleId":"4543","severity":1,"message":"5473","line":22,"column":9,"nodeType":"4545","messageId":"4546","endLine":22,"endColumn":24},{"ruleId":"4543","severity":1,"message":"5474","line":23,"column":9,"nodeType":"4545","messageId":"4546","endLine":23,"endColumn":25},{"ruleId":"4549","severity":1,"message":"4598","line":67,"column":8,"nodeType":"4551","endLine":67,"endColumn":20,"suggestions":"5475"},{"ruleId":"4549","severity":1,"message":"4862","line":71,"column":8,"nodeType":"4551","endLine":71,"endColumn":10,"suggestions":"5476"},{"ruleId":"4549","severity":1,"message":"4569","line":82,"column":8,"nodeType":"4551","endLine":82,"endColumn":17,"suggestions":"5477"},{"ruleId":"4576","severity":1,"message":"4740","line":167,"column":17,"nodeType":"4578","messageId":"4579","endLine":169,"endColumn":71},{"ruleId":"4576","severity":1,"message":"4653","line":178,"column":37,"nodeType":"4578","messageId":"4579","endLine":182,"endColumn":39},{"ruleId":"4576","severity":1,"message":"4653","line":192,"column":37,"nodeType":"4578","messageId":"4579","endLine":196,"endColumn":39},{"ruleId":"4576","severity":1,"message":"4577","line":207,"column":37,"nodeType":"4578","messageId":"4579","endLine":220,"endColumn":39},{"ruleId":"4576","severity":1,"message":"4839","line":227,"column":29,"nodeType":"4578","messageId":"4579","endLine":231,"endColumn":66},{"ruleId":"4576","severity":1,"message":"5170","line":237,"column":13,"nodeType":"4578","messageId":"4579","endLine":237,"endColumn":25},{"ruleId":"4549","severity":1,"message":"4598","line":66,"column":8,"nodeType":"4551","endLine":66,"endColumn":20,"suggestions":"5478"},{"ruleId":"4549","severity":1,"message":"4569","line":79,"column":8,"nodeType":"4551","endLine":79,"endColumn":10,"suggestions":"5479"},{"ruleId":"4549","severity":1,"message":"5480","line":104,"column":8,"nodeType":"4551","endLine":104,"endColumn":22,"suggestions":"5481"},{"ruleId":"4576","severity":1,"message":"4653","line":178,"column":37,"nodeType":"4578","messageId":"4579","endLine":183,"endColumn":39},{"ruleId":"4576","severity":1,"message":"4653","line":193,"column":37,"nodeType":"4578","messageId":"4579","endLine":198,"endColumn":39},{"ruleId":"4576","severity":1,"message":"4839","line":254,"column":29,"nodeType":"4578","messageId":"4579","endLine":260,"endColumn":30},{"ruleId":"4576","severity":1,"message":"4839","line":267,"column":29,"nodeType":"4578","messageId":"4579","endLine":273,"endColumn":30},{"ruleId":"4576","severity":1,"message":"5170","line":292,"column":13,"nodeType":"4578","messageId":"4579","endLine":292,"endColumn":25},{"ruleId":"4614","severity":1,"message":"4618","line":78,"column":33,"nodeType":"4587","messageId":"4619","endLine":78,"endColumn":35},{"ruleId":"4549","severity":1,"message":"5482","line":119,"column":8,"nodeType":"4551","endLine":119,"endColumn":10,"suggestions":"5483"},{"ruleId":"4549","severity":1,"message":"4879","line":128,"column":8,"nodeType":"4551","endLine":128,"endColumn":30,"suggestions":"5484"},{"ruleId":"4549","severity":1,"message":"4862","line":138,"column":8,"nodeType":"4551","endLine":138,"endColumn":10,"suggestions":"5485"},{"ruleId":"4549","severity":1,"message":"5328","line":144,"column":8,"nodeType":"4551","endLine":144,"endColumn":20,"suggestions":"5486"},{"ruleId":"4576","severity":1,"message":"4653","line":268,"column":33,"nodeType":"4578","messageId":"4579","endLine":272,"endColumn":35},{"ruleId":"4576","severity":1,"message":"4653","line":282,"column":33,"nodeType":"4578","messageId":"4579","endLine":286,"endColumn":35},{"ruleId":"4576","severity":1,"message":"4577","line":297,"column":33,"nodeType":"4578","messageId":"4579","endLine":307,"endColumn":35},{"ruleId":"4576","severity":1,"message":"4580","line":313,"column":25,"nodeType":"4578","messageId":"4579","endLine":313,"endColumn":91},{"ruleId":"4576","severity":1,"message":"4740","line":340,"column":17,"nodeType":"4578","messageId":"4579","endLine":342,"endColumn":72},{"ruleId":"4576","severity":1,"message":"5487","line":373,"column":13,"nodeType":"4578","messageId":"4579","endLine":373,"endColumn":38},{"ruleId":"4543","severity":1,"message":"5488","line":71,"column":12,"nodeType":"4545","messageId":"4546","endLine":71,"endColumn":22},{"ruleId":"4543","severity":1,"message":"5489","line":95,"column":9,"nodeType":"4545","messageId":"4546","endLine":95,"endColumn":33},{"ruleId":"4549","severity":1,"message":"4569","line":121,"column":8,"nodeType":"4551","endLine":121,"endColumn":10,"suggestions":"5490"},{"ruleId":"4549","severity":1,"message":"4569","line":155,"column":8,"nodeType":"4551","endLine":155,"endColumn":31,"suggestions":"5491"},{"ruleId":"4549","severity":1,"message":"4598","line":183,"column":8,"nodeType":"4551","endLine":183,"endColumn":20,"suggestions":"5492"},{"ruleId":"4549","severity":1,"message":"4569","line":191,"column":8,"nodeType":"4551","endLine":191,"endColumn":10,"suggestions":"5493"},{"ruleId":"4549","severity":1,"message":"4592","line":198,"column":8,"nodeType":"4551","endLine":198,"endColumn":19,"suggestions":"5494"},{"ruleId":"4549","severity":1,"message":"4601","line":230,"column":8,"nodeType":"4551","endLine":230,"endColumn":17,"suggestions":"5495"},{"ruleId":"4549","severity":1,"message":"5496","line":291,"column":8,"nodeType":"4551","endLine":291,"endColumn":23,"suggestions":"5497"},{"ruleId":"4549","severity":1,"message":"4586","line":315,"column":15,"nodeType":"4587","endLine":326,"endColumn":6},{"ruleId":"4549","severity":1,"message":"5498","line":326,"column":8,"nodeType":"4551","endLine":326,"endColumn":31,"suggestions":"5499"},{"ruleId":"4543","severity":1,"message":"5500","line":342,"column":11,"nodeType":"4545","messageId":"4546","endLine":342,"endColumn":28},{"ruleId":"4576","severity":1,"message":"4653","line":555,"column":33,"nodeType":"4578","messageId":"4579","endLine":567,"endColumn":35},{"ruleId":"4614","severity":1,"message":"5501","line":813,"column":48,"nodeType":"4587","messageId":"4619","endLine":813,"endColumn":50},{"ruleId":"5502","severity":1,"message":"5503","line":817,"column":66,"nodeType":"4662","messageId":"5504","endLine":817,"endColumn":67},{"ruleId":"5502","severity":1,"message":"5503","line":818,"column":66,"nodeType":"4662","messageId":"5504","endLine":818,"endColumn":67},{"ruleId":"5502","severity":1,"message":"5503","line":819,"column":72,"nodeType":"4662","messageId":"5504","endLine":819,"endColumn":73},{"ruleId":"5502","severity":1,"message":"5503","line":820,"column":72,"nodeType":"4662","messageId":"5504","endLine":820,"endColumn":73},{"ruleId":"5502","severity":1,"message":"5503","line":821,"column":75,"nodeType":"4662","messageId":"5504","endLine":821,"endColumn":76},{"ruleId":"5502","severity":1,"message":"5503","line":822,"column":70,"nodeType":"4662","messageId":"5504","endLine":822,"endColumn":71},{"ruleId":"4576","severity":1,"message":"4653","line":963,"column":45,"nodeType":"4578","messageId":"4579","endLine":967,"endColumn":47},{"ruleId":"4576","severity":1,"message":"4577","line":977,"column":45,"nodeType":"4578","messageId":"4579","endLine":990,"endColumn":47},{"ruleId":"4576","severity":1,"message":"4577","line":1006,"column":45,"nodeType":"4578","messageId":"4579","endLine":1020,"endColumn":47},{"ruleId":"4576","severity":1,"message":"4839","line":1076,"column":49,"nodeType":"4578","messageId":"4579","endLine":1081,"endColumn":50},{"ruleId":"4543","severity":1,"message":"4701","line":6,"column":5,"nodeType":"4545","messageId":"4546","endLine":6,"endColumn":11},{"ruleId":"4543","severity":1,"message":"5383","line":7,"column":5,"nodeType":"4545","messageId":"4546","endLine":7,"endColumn":12},{"ruleId":"4543","severity":1,"message":"5505","line":19,"column":10,"nodeType":"4545","messageId":"4546","endLine":19,"endColumn":27},{"ruleId":"4543","severity":1,"message":"5073","line":31,"column":12,"nodeType":"4545","messageId":"4546","endLine":31,"endColumn":23},{"ruleId":"4549","severity":1,"message":"4569","line":91,"column":8,"nodeType":"4551","endLine":91,"endColumn":10,"suggestions":"5506"},{"ruleId":"4549","severity":1,"message":"4569","line":101,"column":8,"nodeType":"4551","endLine":101,"endColumn":32,"suggestions":"5507"},{"ruleId":"4543","severity":1,"message":"5508","line":106,"column":12,"nodeType":"4545","messageId":"4546","endLine":106,"endColumn":24},{"ruleId":"4549","severity":1,"message":"4598","line":123,"column":8,"nodeType":"4551","endLine":123,"endColumn":20,"suggestions":"5509"},{"ruleId":"4549","severity":1,"message":"4631","line":136,"column":8,"nodeType":"4551","endLine":136,"endColumn":37,"suggestions":"5510"},{"ruleId":"4576","severity":1,"message":"4653","line":249,"column":45,"nodeType":"4578","messageId":"4579","endLine":253,"endColumn":47},{"ruleId":"4543","severity":1,"message":"5511","line":26,"column":10,"nodeType":"4545","messageId":"4546","endLine":26,"endColumn":32},{"ruleId":"4549","severity":1,"message":"4569","line":99,"column":8,"nodeType":"4551","endLine":99,"endColumn":10,"suggestions":"5512"},{"ruleId":"4549","severity":1,"message":"4569","line":127,"column":8,"nodeType":"4551","endLine":127,"endColumn":31,"suggestions":"5513"},{"ruleId":"4549","severity":1,"message":"5189","line":131,"column":8,"nodeType":"4551","endLine":131,"endColumn":18,"suggestions":"5514"},{"ruleId":"4549","severity":1,"message":"4598","line":154,"column":8,"nodeType":"4551","endLine":154,"endColumn":20,"suggestions":"5515"},{"ruleId":"4549","severity":1,"message":"4586","line":156,"column":15,"nodeType":"4587","endLine":185,"endColumn":6},{"ruleId":"4549","severity":1,"message":"4601","line":185,"column":8,"nodeType":"4551","endLine":185,"endColumn":17,"suggestions":"5516"},{"ruleId":"4549","severity":1,"message":"4592","line":192,"column":8,"nodeType":"4551","endLine":192,"endColumn":19,"suggestions":"5517"},{"ruleId":"4576","severity":1,"message":"4653","line":354,"column":45,"nodeType":"4578","messageId":"4579","endLine":364,"endColumn":47},{"ruleId":"4576","severity":1,"message":"4653","line":404,"column":45,"nodeType":"4578","messageId":"4579","endLine":409,"endColumn":47},{"ruleId":"4576","severity":1,"message":"4653","line":420,"column":45,"nodeType":"4578","messageId":"4579","endLine":425,"endColumn":47},{"ruleId":"4576","severity":1,"message":"4580","line":487,"column":49,"nodeType":"4578","messageId":"4579","endLine":487,"endColumn":128},{"ruleId":"4576","severity":1,"message":"4890","line":488,"column":51,"nodeType":"4578","messageId":"4579","endLine":490,"endColumn":51},{"ruleId":"4543","severity":1,"message":"4790","line":4,"column":5,"nodeType":"4545","messageId":"4546","endLine":4,"endColumn":29},{"ruleId":"4549","severity":1,"message":"5023","line":72,"column":8,"nodeType":"4551","endLine":72,"endColumn":10,"suggestions":"5518"},{"ruleId":"4549","severity":1,"message":"4879","line":80,"column":8,"nodeType":"4551","endLine":80,"endColumn":32,"suggestions":"5519"},{"ruleId":"4576","severity":1,"message":"4740","line":142,"column":17,"nodeType":"4578","messageId":"4579","endLine":144,"endColumn":71},{"ruleId":"4576","severity":1,"message":"4653","line":154,"column":41,"nodeType":"4578","messageId":"4579","endLine":164,"endColumn":43},{"ruleId":"4576","severity":1,"message":"4653","line":173,"column":41,"nodeType":"4578","messageId":"4579","endLine":183,"endColumn":43},{"ruleId":"4576","severity":1,"message":"4580","line":188,"column":33,"nodeType":"4578","messageId":"4579","endLine":190,"endColumn":65},{"ruleId":"4549","severity":1,"message":"4569","line":54,"column":8,"nodeType":"4551","endLine":54,"endColumn":20,"suggestions":"5520"},{"ruleId":"4549","severity":1,"message":"4569","line":102,"column":8,"nodeType":"4551","endLine":102,"endColumn":10,"suggestions":"5521"},{"ruleId":"4549","severity":1,"message":"4862","line":139,"column":8,"nodeType":"4551","endLine":139,"endColumn":31,"suggestions":"5522"},{"ruleId":"4549","severity":1,"message":"4598","line":154,"column":8,"nodeType":"4551","endLine":154,"endColumn":20,"suggestions":"5523"},{"ruleId":"4543","severity":1,"message":"5147","line":160,"column":13,"nodeType":"4545","messageId":"4546","endLine":160,"endColumn":20},{"ruleId":"4549","severity":1,"message":"4592","line":168,"column":8,"nodeType":"4551","endLine":168,"endColumn":19,"suggestions":"5524"},{"ruleId":"4549","severity":1,"message":"4586","line":172,"column":15,"nodeType":"4587","endLine":203,"endColumn":6},{"ruleId":"4549","severity":1,"message":"4601","line":203,"column":8,"nodeType":"4551","endLine":203,"endColumn":17,"suggestions":"5525"},{"ruleId":"4549","severity":1,"message":"4569","line":218,"column":8,"nodeType":"4551","endLine":218,"endColumn":29,"suggestions":"5526"},{"ruleId":"4549","severity":1,"message":"5527","line":235,"column":8,"nodeType":"4551","endLine":235,"endColumn":25,"suggestions":"5528"},{"ruleId":"4543","severity":1,"message":"5068","line":306,"column":23,"nodeType":"4545","messageId":"4546","endLine":306,"endColumn":32},{"ruleId":"4543","severity":1,"message":"4883","line":306,"column":34,"nodeType":"4545","messageId":"4546","endLine":306,"endColumn":50},{"ruleId":"4543","severity":1,"message":"5068","line":404,"column":23,"nodeType":"4545","messageId":"4546","endLine":404,"endColumn":32},{"ruleId":"4543","severity":1,"message":"5529","line":404,"column":69,"nodeType":"4545","messageId":"4546","endLine":404,"endColumn":80},{"ruleId":"4576","severity":1,"message":"4653","line":597,"column":45,"nodeType":"4578","messageId":"4579","endLine":608,"endColumn":47},{"ruleId":"4576","severity":1,"message":"4653","line":618,"column":45,"nodeType":"4578","messageId":"4579","endLine":629,"endColumn":47},{"ruleId":"4576","severity":1,"message":"4577","line":643,"column":45,"nodeType":"4578","messageId":"4579","endLine":655,"endColumn":47},{"ruleId":"4576","severity":1,"message":"4577","line":689,"column":45,"nodeType":"4578","messageId":"4579","endLine":704,"endColumn":47},{"ruleId":"4576","severity":1,"message":"4580","line":714,"column":41,"nodeType":"4578","messageId":"4579","endLine":716,"endColumn":71},{"ruleId":"4576","severity":1,"message":"4890","line":719,"column":41,"nodeType":"4578","messageId":"4579","endLine":721,"endColumn":43},{"ruleId":"5530","severity":1,"message":"5531","line":131,"column":44,"nodeType":"5532","messageId":"4663","endLine":131,"endColumn":47},{"ruleId":"4543","severity":1,"message":"5450","line":11,"column":13,"nodeType":"4545","messageId":"4546","endLine":11,"endColumn":17},{"ruleId":"4549","severity":1,"message":"4569","line":57,"column":8,"nodeType":"4551","endLine":57,"endColumn":10,"suggestions":"5533"},{"ruleId":"4549","severity":1,"message":"4598","line":73,"column":8,"nodeType":"4551","endLine":73,"endColumn":20,"suggestions":"5534"},{"ruleId":"4549","severity":1,"message":"4569","line":80,"column":8,"nodeType":"4551","endLine":80,"endColumn":10,"suggestions":"5535"},{"ruleId":"4549","severity":1,"message":"5480","line":129,"column":8,"nodeType":"4551","endLine":129,"endColumn":22,"suggestions":"5536"},{"ruleId":"4576","severity":1,"message":"4653","line":191,"column":37,"nodeType":"4578","messageId":"4579","endLine":195,"endColumn":39},{"ruleId":"4576","severity":1,"message":"4653","line":205,"column":37,"nodeType":"4578","messageId":"4579","endLine":209,"endColumn":39},{"ruleId":"4576","severity":1,"message":"4577","line":220,"column":41,"nodeType":"4578","messageId":"4579","endLine":233,"endColumn":43},{"ruleId":"4576","severity":1,"message":"4839","line":240,"column":29,"nodeType":"4578","messageId":"4579","endLine":246,"endColumn":30},{"ruleId":"4576","severity":1,"message":"4839","line":253,"column":29,"nodeType":"4578","messageId":"4579","endLine":259,"endColumn":30},{"ruleId":"4543","severity":1,"message":"4741","line":2,"column":25,"nodeType":"4545","messageId":"4546","endLine":2,"endColumn":37},{"ruleId":"4543","severity":1,"message":"5537","line":2,"column":5,"nodeType":"4545","messageId":"4546","endLine":2,"endColumn":41},{"ruleId":"4549","severity":1,"message":"4598","line":54,"column":8,"nodeType":"4551","endLine":54,"endColumn":20,"suggestions":"5538"},{"ruleId":"4549","severity":1,"message":"4569","line":64,"column":8,"nodeType":"4551","endLine":64,"endColumn":10,"suggestions":"5539"},{"ruleId":"4633","severity":1,"message":"4634","line":85,"column":21,"nodeType":"4635","messageId":"4636","endLine":85,"endColumn":48},{"ruleId":"4549","severity":1,"message":"5398","line":87,"column":8,"nodeType":"4551","endLine":87,"endColumn":23,"suggestions":"5540"},{"ruleId":"4576","severity":1,"message":"4577","line":115,"column":37,"nodeType":"4578","messageId":"4579","endLine":127,"endColumn":39},{"ruleId":"4576","severity":1,"message":"4580","line":133,"column":29,"nodeType":"4578","messageId":"4579","endLine":133,"endColumn":93},{"ruleId":"4549","severity":1,"message":"4738","line":52,"column":8,"nodeType":"4551","endLine":52,"endColumn":10,"suggestions":"5541"},{"ruleId":"4576","severity":1,"message":"4740","line":91,"column":17,"nodeType":"4578","messageId":"4579","endLine":93,"endColumn":19},{"ruleId":"4576","severity":1,"message":"4653","line":102,"column":37,"nodeType":"4578","messageId":"4579","endLine":112,"endColumn":39},{"ruleId":"4576","severity":1,"message":"4653","line":122,"column":37,"nodeType":"4578","messageId":"4579","endLine":132,"endColumn":39},{"ruleId":"4576","severity":1,"message":"4580","line":137,"column":37,"nodeType":"4578","messageId":"4579","endLine":140,"endColumn":39},{"ruleId":"4543","severity":1,"message":"5073","line":49,"column":12,"nodeType":"4545","messageId":"4546","endLine":49,"endColumn":23},{"ruleId":"4549","severity":1,"message":"5542","line":99,"column":8,"nodeType":"4551","endLine":99,"endColumn":10,"suggestions":"5543"},{"ruleId":"4549","severity":1,"message":"4569","line":104,"column":8,"nodeType":"4551","endLine":104,"endColumn":10,"suggestions":"5544"},{"ruleId":"4549","severity":1,"message":"4569","line":115,"column":8,"nodeType":"4551","endLine":115,"endColumn":31,"suggestions":"5545"},{"ruleId":"4549","severity":1,"message":"4598","line":137,"column":8,"nodeType":"4551","endLine":137,"endColumn":20,"suggestions":"5546"},{"ruleId":"4549","severity":1,"message":"4592","line":144,"column":8,"nodeType":"4551","endLine":144,"endColumn":19,"suggestions":"5547"},{"ruleId":"4549","severity":1,"message":"4586","line":146,"column":15,"nodeType":"4587","endLine":164,"endColumn":6},{"ruleId":"4549","severity":1,"message":"4590","line":164,"column":8,"nodeType":"4551","endLine":164,"endColumn":17,"suggestions":"5548"},{"ruleId":"4576","severity":1,"message":"4653","line":425,"column":45,"nodeType":"4578","messageId":"4579","endLine":429,"endColumn":47},{"ruleId":"4576","severity":1,"message":"4577","line":441,"column":45,"nodeType":"4578","messageId":"4579","endLine":455,"endColumn":47},{"ruleId":"4543","severity":1,"message":"5549","line":25,"column":10,"nodeType":"4545","messageId":"4546","endLine":25,"endColumn":23},{"ruleId":"4543","severity":1,"message":"5489","line":98,"column":9,"nodeType":"4545","messageId":"4546","endLine":98,"endColumn":33},{"ruleId":"4549","severity":1,"message":"4569","line":121,"column":8,"nodeType":"4551","endLine":121,"endColumn":10,"suggestions":"5550"},{"ruleId":"4549","severity":1,"message":"4569","line":146,"column":8,"nodeType":"4551","endLine":146,"endColumn":31,"suggestions":"5551"},{"ruleId":"4549","severity":1,"message":"4598","line":175,"column":8,"nodeType":"4551","endLine":175,"endColumn":20,"suggestions":"5552"},{"ruleId":"4549","severity":1,"message":"4569","line":183,"column":8,"nodeType":"4551","endLine":183,"endColumn":10,"suggestions":"5553"},{"ruleId":"4549","severity":1,"message":"4592","line":190,"column":8,"nodeType":"4551","endLine":190,"endColumn":19,"suggestions":"5554"},{"ruleId":"4549","severity":1,"message":"4601","line":227,"column":8,"nodeType":"4551","endLine":227,"endColumn":17,"suggestions":"5555"},{"ruleId":"4549","severity":1,"message":"5496","line":293,"column":8,"nodeType":"4551","endLine":293,"endColumn":23,"suggestions":"5556"},{"ruleId":"4549","severity":1,"message":"4586","line":295,"column":15,"nodeType":"4587","endLine":306,"endColumn":6},{"ruleId":"4549","severity":1,"message":"5498","line":306,"column":8,"nodeType":"4551","endLine":306,"endColumn":31,"suggestions":"5557"},{"ruleId":"4543","severity":1,"message":"5500","line":332,"column":11,"nodeType":"4545","messageId":"4546","endLine":332,"endColumn":28},{"ruleId":"4614","severity":1,"message":"5501","line":866,"column":56,"nodeType":"4587","messageId":"4619","endLine":866,"endColumn":58},{"ruleId":"4614","severity":1,"message":"5558","line":872,"column":25,"nodeType":"5559","messageId":"5560","endLine":872,"endColumn":31},{"ruleId":"5502","severity":1,"message":"5503","line":875,"column":78,"nodeType":"4662","messageId":"5504","endLine":875,"endColumn":79},{"ruleId":"4576","severity":1,"message":"4653","line":1017,"column":45,"nodeType":"4578","messageId":"4579","endLine":1021,"endColumn":47},{"ruleId":"4576","severity":1,"message":"4577","line":1031,"column":45,"nodeType":"4578","messageId":"4579","endLine":1044,"endColumn":47},{"ruleId":"4576","severity":1,"message":"4577","line":1060,"column":45,"nodeType":"4578","messageId":"4579","endLine":1073,"endColumn":47},{"ruleId":"4576","severity":1,"message":"4839","line":1127,"column":49,"nodeType":"4578","messageId":"4579","endLine":1131,"endColumn":97},{"ruleId":"4543","severity":1,"message":"4699","line":3,"column":33,"nodeType":"4545","messageId":"4546","endLine":3,"endColumn":36},{"ruleId":"4543","severity":1,"message":"5561","line":28,"column":23,"nodeType":"4545","messageId":"4546","endLine":28,"endColumn":35},{"ruleId":"4549","severity":1,"message":"4598","line":69,"column":8,"nodeType":"4551","endLine":69,"endColumn":20,"suggestions":"5562"},{"ruleId":"4549","severity":1,"message":"4569","line":81,"column":8,"nodeType":"4551","endLine":81,"endColumn":10,"suggestions":"5563"},{"ruleId":"4549","severity":1,"message":"5480","line":118,"column":8,"nodeType":"4551","endLine":118,"endColumn":29,"suggestions":"5564"},{"ruleId":"4549","severity":1,"message":"5565","line":137,"column":8,"nodeType":"4551","endLine":137,"endColumn":17,"suggestions":"5566"},{"ruleId":"4549","severity":1,"message":"4586","line":139,"column":15,"nodeType":"4587","endLine":156,"endColumn":6},{"ruleId":"4549","severity":1,"message":"4569","line":156,"column":8,"nodeType":"4551","endLine":156,"endColumn":28,"suggestions":"5567"},{"ruleId":"4576","severity":1,"message":"4653","line":228,"column":17,"nodeType":"4578","messageId":"4579","endLine":232,"endColumn":19},{"ruleId":"4576","severity":1,"message":"4653","line":242,"column":17,"nodeType":"4578","messageId":"4579","endLine":246,"endColumn":19},{"ruleId":"4576","severity":1,"message":"4577","line":256,"column":17,"nodeType":"4578","messageId":"4579","endLine":268,"endColumn":19},{"ruleId":"4576","severity":1,"message":"4577","line":278,"column":17,"nodeType":"4578","messageId":"4579","endLine":289,"endColumn":19},{"ruleId":"4576","severity":1,"message":"4839","line":295,"column":9,"nodeType":"4578","messageId":"4579","endLine":301,"endColumn":10},{"ruleId":"4576","severity":1,"message":"4839","line":307,"column":9,"nodeType":"4578","messageId":"4579","endLine":312,"endColumn":10},{"ruleId":"4576","severity":1,"message":"4839","line":318,"column":9,"nodeType":"4578","messageId":"4579","endLine":324,"endColumn":10},{"ruleId":"4576","severity":1,"message":"5170","line":376,"column":13,"nodeType":"4578","messageId":"4579","endLine":376,"endColumn":25},{"ruleId":"4664","severity":1,"message":"5342","line":37,"column":13,"nodeType":"4545","messageId":"4666","endLine":37,"endColumn":16},{"ruleId":"4543","severity":1,"message":"5568","line":2,"column":23,"nodeType":"4545","messageId":"4546","endLine":2,"endColumn":40},{"ruleId":"4543","severity":1,"message":"5569","line":288,"column":9,"nodeType":"4545","messageId":"4546","endLine":288,"endColumn":19},{"ruleId":"4543","severity":1,"message":"5569","line":415,"column":9,"nodeType":"4545","messageId":"4546","endLine":415,"endColumn":19},{"ruleId":"4891","severity":1,"message":"4974","line":77,"column":313,"nodeType":"4893","messageId":"4663","endLine":77,"endColumn":322},{"ruleId":"4543","severity":1,"message":"5346","line":133,"column":15,"nodeType":"4545","messageId":"4546","endLine":133,"endColumn":23},{"ruleId":"4543","severity":1,"message":"5570","line":1,"column":97,"nodeType":"4545","messageId":"4546","endLine":1,"endColumn":136},{"ruleId":"4543","severity":1,"message":"5073","line":45,"column":12,"nodeType":"4545","messageId":"4546","endLine":45,"endColumn":23},{"ruleId":"4543","severity":1,"message":"5571","line":65,"column":25,"nodeType":"4545","messageId":"4546","endLine":65,"endColumn":33},{"ruleId":"4549","severity":1,"message":"4598","line":87,"column":8,"nodeType":"4551","endLine":87,"endColumn":20,"suggestions":"5572"},{"ruleId":"4549","severity":1,"message":"5573","line":94,"column":8,"nodeType":"4551","endLine":94,"endColumn":10,"suggestions":"5574"},{"ruleId":"4549","severity":1,"message":"4569","line":106,"column":8,"nodeType":"4551","endLine":106,"endColumn":17,"suggestions":"5575"},{"ruleId":"4549","severity":1,"message":"5576","line":118,"column":8,"nodeType":"4551","endLine":118,"endColumn":27,"suggestions":"5577"},{"ruleId":"4549","severity":1,"message":"5576","line":131,"column":8,"nodeType":"4551","endLine":131,"endColumn":19,"suggestions":"5578"},{"ruleId":"4576","severity":1,"message":"4839","line":267,"column":33,"nodeType":"4578","messageId":"4579","endLine":276,"endColumn":34},{"ruleId":"4576","severity":1,"message":"4839","line":289,"column":33,"nodeType":"4578","messageId":"4579","endLine":299,"endColumn":34},{"ruleId":"4576","severity":1,"message":"4839","line":309,"column":33,"nodeType":"4578","messageId":"4579","endLine":318,"endColumn":34},{"ruleId":"4576","severity":1,"message":"4839","line":326,"column":33,"nodeType":"4578","messageId":"4579","endLine":336,"endColumn":34},{"ruleId":"4576","severity":1,"message":"4839","line":344,"column":33,"nodeType":"4578","messageId":"4579","endLine":352,"endColumn":34},{"ruleId":"4576","severity":1,"message":"5170","line":469,"column":13,"nodeType":"4578","messageId":"4579","endLine":469,"endColumn":25},{"ruleId":"4543","severity":1,"message":"4973","line":5,"column":10,"nodeType":"4545","messageId":"4546","endLine":5,"endColumn":14},{"ruleId":"4543","severity":1,"message":"5579","line":4,"column":25,"nodeType":"4545","messageId":"4546","endLine":4,"endColumn":43},{"ruleId":"4543","severity":1,"message":"4973","line":5,"column":10,"nodeType":"4545","messageId":"4546","endLine":5,"endColumn":14},{"ruleId":"4543","severity":1,"message":"4973","line":4,"column":10,"nodeType":"4545","messageId":"4546","endLine":4,"endColumn":14},{"ruleId":"4549","severity":1,"message":"5580","line":64,"column":8,"nodeType":"4551","endLine":64,"endColumn":10,"suggestions":"5581"},{"ruleId":"4549","severity":1,"message":"5582","line":87,"column":8,"nodeType":"4551","endLine":87,"endColumn":63,"suggestions":"5583"},{"ruleId":"4543","severity":1,"message":"5584","line":124,"column":10,"nodeType":"4545","messageId":"4546","endLine":124,"endColumn":20},{"ruleId":"4543","severity":1,"message":"5568","line":2,"column":23,"nodeType":"4545","messageId":"4546","endLine":2,"endColumn":40},{"ruleId":"4543","severity":1,"message":"5115","line":4,"column":10,"nodeType":"4545","messageId":"4546","endLine":4,"endColumn":13},{"ruleId":"4543","severity":1,"message":"5585","line":330,"column":9,"nodeType":"4545","messageId":"4546","endLine":330,"endColumn":22},{"ruleId":"4543","severity":1,"message":"5568","line":2,"column":23,"nodeType":"4545","messageId":"4546","endLine":2,"endColumn":40},{"ruleId":"4543","severity":1,"message":"5115","line":4,"column":10,"nodeType":"4545","messageId":"4546","endLine":4,"endColumn":13},{"ruleId":"4543","severity":1,"message":"5586","line":392,"column":9,"nodeType":"4545","messageId":"4546","endLine":392,"endColumn":28},{"ruleId":"4543","severity":1,"message":"5307","line":5,"column":5,"nodeType":"4545","messageId":"4546","endLine":5,"endColumn":14},{"ruleId":"4543","severity":1,"message":"5587","line":64,"column":9,"nodeType":"4545","messageId":"4546","endLine":64,"endColumn":22},{"ruleId":"4543","severity":1,"message":"5588","line":50,"column":9,"nodeType":"4545","messageId":"4546","endLine":50,"endColumn":25},{"ruleId":"4543","severity":1,"message":"5589","line":56,"column":9,"nodeType":"4545","messageId":"4546","endLine":56,"endColumn":13},{"ruleId":"4543","severity":1,"message":"5164","line":57,"column":9,"nodeType":"4545","messageId":"4546","endLine":57,"endColumn":17},{"ruleId":"4543","severity":1,"message":"5590","line":6,"column":5,"nodeType":"4545","messageId":"4546","endLine":6,"endColumn":27},{"ruleId":"4543","severity":1,"message":"5591","line":8,"column":42,"nodeType":"4545","messageId":"4546","endLine":8,"endColumn":68},{"ruleId":"4543","severity":1,"message":"5468","line":8,"column":147,"nodeType":"4545","messageId":"4546","endLine":8,"endColumn":175},{"ruleId":"4543","severity":1,"message":"5592","line":9,"column":48,"nodeType":"4545","messageId":"4546","endLine":9,"endColumn":69},{"ruleId":"4543","severity":1,"message":"5590","line":1,"column":206,"nodeType":"4545","messageId":"4546","endLine":1,"endColumn":228},{"ruleId":"4543","severity":1,"message":"5593","line":1,"column":230,"nodeType":"4545","messageId":"4546","endLine":1,"endColumn":260},{"ruleId":"4543","severity":1,"message":"5395","line":6,"column":20,"nodeType":"4545","messageId":"4546","endLine":6,"endColumn":29},{"ruleId":"4543","severity":1,"message":"5594","line":19,"column":8,"nodeType":"4545","messageId":"4546","endLine":19,"endColumn":12},{"ruleId":"4543","severity":1,"message":"5450","line":20,"column":8,"nodeType":"4545","messageId":"4546","endLine":20,"endColumn":12},{"ruleId":"4549","severity":1,"message":"4598","line":76,"column":8,"nodeType":"4551","endLine":76,"endColumn":20,"suggestions":"5595"},{"ruleId":"4549","severity":1,"message":"4569","line":86,"column":8,"nodeType":"4551","endLine":86,"endColumn":10,"suggestions":"5596"},{"ruleId":"4549","severity":1,"message":"5597","line":140,"column":8,"nodeType":"4551","endLine":140,"endColumn":19,"suggestions":"5598"},{"ruleId":"4576","severity":1,"message":"4653","line":217,"column":37,"nodeType":"4578","messageId":"4579","endLine":221,"endColumn":39},{"ruleId":"4576","severity":1,"message":"4653","line":231,"column":37,"nodeType":"4578","messageId":"4579","endLine":235,"endColumn":39},{"ruleId":"4576","severity":1,"message":"4839","line":278,"column":29,"nodeType":"4578","messageId":"4579","endLine":284,"endColumn":30},{"ruleId":"4576","severity":1,"message":"4839","line":290,"column":29,"nodeType":"4578","messageId":"4579","endLine":296,"endColumn":30},{"ruleId":"4549","severity":1,"message":"4598","line":64,"column":8,"nodeType":"4551","endLine":64,"endColumn":20,"suggestions":"5599"},{"ruleId":"4549","severity":1,"message":"4569","line":77,"column":8,"nodeType":"4551","endLine":77,"endColumn":10,"suggestions":"5600"},{"ruleId":"4549","severity":1,"message":"5480","line":109,"column":8,"nodeType":"4551","endLine":109,"endColumn":22,"suggestions":"5601"},{"ruleId":"4576","severity":1,"message":"4653","line":176,"column":37,"nodeType":"4578","messageId":"4579","endLine":181,"endColumn":39},{"ruleId":"4576","severity":1,"message":"4653","line":191,"column":37,"nodeType":"4578","messageId":"4579","endLine":196,"endColumn":39},{"ruleId":"4576","severity":1,"message":"5170","line":253,"column":13,"nodeType":"4578","messageId":"4579","endLine":253,"endColumn":25},{"ruleId":"4543","severity":1,"message":"5602","line":5,"column":82,"nodeType":"4545","messageId":"4546","endLine":5,"endColumn":110},{"ruleId":"4543","severity":1,"message":"5603","line":5,"column":112,"nodeType":"4545","messageId":"4546","endLine":5,"endColumn":138},{"ruleId":"4549","severity":1,"message":"4862","line":78,"column":8,"nodeType":"4551","endLine":78,"endColumn":10,"suggestions":"5604"},{"ruleId":"4549","severity":1,"message":"4598","line":94,"column":8,"nodeType":"4551","endLine":94,"endColumn":20,"suggestions":"5605"},{"ruleId":"4549","severity":1,"message":"4569","line":100,"column":8,"nodeType":"4551","endLine":100,"endColumn":10,"suggestions":"5606"},{"ruleId":"4549","severity":1,"message":"4862","line":119,"column":8,"nodeType":"4551","endLine":119,"endColumn":36,"suggestions":"5607"},{"ruleId":"4576","severity":1,"message":"4653","line":198,"column":37,"nodeType":"4578","messageId":"4579","endLine":202,"endColumn":39},{"ruleId":"4576","severity":1,"message":"4653","line":211,"column":37,"nodeType":"4578","messageId":"4579","endLine":215,"endColumn":39},{"ruleId":"4576","severity":1,"message":"4839","line":243,"column":29,"nodeType":"4578","messageId":"4579","endLine":249,"endColumn":30},{"ruleId":"4576","severity":1,"message":"4839","line":256,"column":29,"nodeType":"4578","messageId":"4579","endLine":262,"endColumn":30},{"ruleId":"4543","severity":1,"message":"5450","line":11,"column":13,"nodeType":"4545","messageId":"4546","endLine":11,"endColumn":17},{"ruleId":"4549","severity":1,"message":"4569","line":59,"column":8,"nodeType":"4551","endLine":59,"endColumn":10,"suggestions":"5608"},{"ruleId":"4549","severity":1,"message":"4598","line":83,"column":8,"nodeType":"4551","endLine":83,"endColumn":20,"suggestions":"5609"},{"ruleId":"4549","severity":1,"message":"4569","line":90,"column":8,"nodeType":"4551","endLine":90,"endColumn":10,"suggestions":"5610"},{"ruleId":"4549","severity":1,"message":"5611","line":104,"column":8,"nodeType":"4551","endLine":104,"endColumn":19,"suggestions":"5612"},{"ruleId":"4576","severity":1,"message":"4653","line":185,"column":37,"nodeType":"4578","messageId":"4579","endLine":189,"endColumn":39},{"ruleId":"4576","severity":1,"message":"4653","line":198,"column":37,"nodeType":"4578","messageId":"4579","endLine":202,"endColumn":39},{"ruleId":"4576","severity":1,"message":"4839","line":230,"column":29,"nodeType":"4578","messageId":"4579","endLine":236,"endColumn":30},{"ruleId":"4576","severity":1,"message":"4839","line":243,"column":29,"nodeType":"4578","messageId":"4579","endLine":249,"endColumn":30},{"ruleId":"4543","severity":1,"message":"5395","line":6,"column":20,"nodeType":"4545","messageId":"4546","endLine":6,"endColumn":29},{"ruleId":"4543","severity":1,"message":"5613","line":11,"column":13,"nodeType":"4545","messageId":"4546","endLine":11,"endColumn":19},{"ruleId":"4549","severity":1,"message":"4598","line":67,"column":8,"nodeType":"4551","endLine":67,"endColumn":20,"suggestions":"5614"},{"ruleId":"4549","severity":1,"message":"5615","line":89,"column":8,"nodeType":"4551","endLine":89,"endColumn":43,"suggestions":"5616"},{"ruleId":"4549","severity":1,"message":"4569","line":96,"column":8,"nodeType":"4551","endLine":96,"endColumn":10,"suggestions":"5617"},{"ruleId":"4576","severity":1,"message":"4740","line":147,"column":17,"nodeType":"4578","messageId":"4579","endLine":148,"endColumn":71},{"ruleId":"4576","severity":1,"message":"4653","line":157,"column":37,"nodeType":"4578","messageId":"4579","endLine":161,"endColumn":39},{"ruleId":"4576","severity":1,"message":"4653","line":171,"column":37,"nodeType":"4578","messageId":"4579","endLine":175,"endColumn":39},{"ruleId":"4576","severity":1,"message":"4839","line":180,"column":29,"nodeType":"4578","messageId":"4579","endLine":187,"endColumn":30},{"ruleId":"4576","severity":1,"message":"4839","line":193,"column":29,"nodeType":"4578","messageId":"4579","endLine":200,"endColumn":30},{"ruleId":"4576","severity":1,"message":"5170","line":207,"column":13,"nodeType":"4578","messageId":"4579","endLine":207,"endColumn":25},{"ruleId":"4543","severity":1,"message":"5618","line":3,"column":5,"nodeType":"4545","messageId":"4546","endLine":3,"endColumn":22},{"ruleId":"4549","severity":1,"message":"4569","line":57,"column":8,"nodeType":"4551","endLine":57,"endColumn":10,"suggestions":"5619"},{"ruleId":"4549","severity":1,"message":"4598","line":73,"column":8,"nodeType":"4551","endLine":73,"endColumn":20,"suggestions":"5620"},{"ruleId":"4549","severity":1,"message":"4569","line":86,"column":8,"nodeType":"4551","endLine":86,"endColumn":19,"suggestions":"5621"},{"ruleId":"4549","severity":1,"message":"5622","line":129,"column":8,"nodeType":"4551","endLine":129,"endColumn":22,"suggestions":"5623"},{"ruleId":"4576","severity":1,"message":"4653","line":191,"column":37,"nodeType":"4578","messageId":"4579","endLine":195,"endColumn":39},{"ruleId":"4576","severity":1,"message":"4653","line":205,"column":37,"nodeType":"4578","messageId":"4579","endLine":209,"endColumn":39},{"ruleId":"4576","severity":1,"message":"4577","line":220,"column":41,"nodeType":"4578","messageId":"4579","endLine":233,"endColumn":43},{"ruleId":"4576","severity":1,"message":"4839","line":240,"column":29,"nodeType":"4578","messageId":"4579","endLine":246,"endColumn":30},{"ruleId":"4576","severity":1,"message":"4839","line":253,"column":29,"nodeType":"4578","messageId":"4579","endLine":259,"endColumn":30},{"ruleId":"4543","severity":1,"message":"4930","line":5,"column":10,"nodeType":"4545","messageId":"4546","endLine":5,"endColumn":23},{"ruleId":"4543","severity":1,"message":"4737","line":1,"column":17,"nodeType":"4545","messageId":"4546","endLine":1,"endColumn":25},{"ruleId":"4576","severity":1,"message":"4839","line":51,"column":17,"nodeType":"4578","messageId":"4579","endLine":57,"endColumn":18},{"ruleId":"4576","severity":1,"message":"4839","line":64,"column":17,"nodeType":"4578","messageId":"4579","endLine":70,"endColumn":18},{"ruleId":"4576","severity":1,"message":"4577","line":102,"column":29,"nodeType":"4578","messageId":"4579","endLine":111,"endColumn":31},{"ruleId":"4543","severity":1,"message":"5624","line":14,"column":28,"nodeType":"4545","messageId":"4546","endLine":14,"endColumn":49},{"ruleId":"4549","severity":1,"message":"4598","line":71,"column":8,"nodeType":"4551","endLine":71,"endColumn":20,"suggestions":"5625"},{"ruleId":"4549","severity":1,"message":"4569","line":77,"column":8,"nodeType":"4551","endLine":77,"endColumn":10,"suggestions":"5626"},{"ruleId":"4549","severity":1,"message":"4569","line":88,"column":8,"nodeType":"4551","endLine":88,"endColumn":17,"suggestions":"5627"},{"ruleId":"4576","severity":1,"message":"4740","line":191,"column":17,"nodeType":"4578","messageId":"4579","endLine":193,"endColumn":71},{"ruleId":"4576","severity":1,"message":"4653","line":202,"column":37,"nodeType":"4578","messageId":"4579","endLine":206,"endColumn":39},{"ruleId":"4576","severity":1,"message":"4653","line":216,"column":37,"nodeType":"4578","messageId":"4579","endLine":220,"endColumn":39},{"ruleId":"4576","severity":1,"message":"4577","line":231,"column":37,"nodeType":"4578","messageId":"4579","endLine":244,"endColumn":39},{"ruleId":"4576","severity":1,"message":"4577","line":254,"column":37,"nodeType":"4578","messageId":"4579","endLine":266,"endColumn":39},{"ruleId":"4576","severity":1,"message":"4839","line":273,"column":29,"nodeType":"4578","messageId":"4579","endLine":277,"endColumn":66},{"ruleId":"4576","severity":1,"message":"5170","line":283,"column":13,"nodeType":"4578","messageId":"4579","endLine":283,"endColumn":25},{"ruleId":"4543","severity":1,"message":"4973","line":4,"column":10,"nodeType":"4545","messageId":"4546","endLine":4,"endColumn":14},{"ruleId":"4543","severity":1,"message":"5130","line":2,"column":8,"nodeType":"4545","messageId":"4546","endLine":2,"endColumn":22},{"ruleId":"4543","severity":1,"message":"4971","line":3,"column":8,"nodeType":"4545","messageId":"4546","endLine":3,"endColumn":19},{"ruleId":"4543","severity":1,"message":"5160","line":5,"column":10,"nodeType":"4545","messageId":"4546","endLine":5,"endColumn":17},{"ruleId":"4543","severity":1,"message":"5628","line":8,"column":16,"nodeType":"4545","messageId":"4546","endLine":8,"endColumn":22},{"ruleId":"4543","severity":1,"message":"5629","line":10,"column":10,"nodeType":"4545","messageId":"4546","endLine":10,"endColumn":25},{"ruleId":"4543","severity":1,"message":"5630","line":10,"column":27,"nodeType":"4545","messageId":"4546","endLine":10,"endColumn":49},{"ruleId":"4543","severity":1,"message":"5631","line":20,"column":7,"nodeType":"4545","messageId":"4546","endLine":20,"endColumn":20},{"ruleId":"4543","severity":1,"message":"5073","line":45,"column":12,"nodeType":"4545","messageId":"4546","endLine":45,"endColumn":23},{"ruleId":"4543","severity":1,"message":"5571","line":65,"column":25,"nodeType":"4545","messageId":"4546","endLine":65,"endColumn":33},{"ruleId":"4549","severity":1,"message":"4598","line":92,"column":8,"nodeType":"4551","endLine":92,"endColumn":20,"suggestions":"5632"},{"ruleId":"4549","severity":1,"message":"5573","line":104,"column":8,"nodeType":"4551","endLine":104,"endColumn":10,"suggestions":"5633"},{"ruleId":"4549","severity":1,"message":"4569","line":116,"column":8,"nodeType":"4551","endLine":116,"endColumn":17,"suggestions":"5634"},{"ruleId":"4549","severity":1,"message":"5635","line":130,"column":8,"nodeType":"4551","endLine":130,"endColumn":27,"suggestions":"5636"},{"ruleId":"4549","severity":1,"message":"5576","line":143,"column":8,"nodeType":"4551","endLine":143,"endColumn":19,"suggestions":"5637"},{"ruleId":"4543","severity":1,"message":"5638","line":171,"column":11,"nodeType":"4545","messageId":"4546","endLine":171,"endColumn":24},{"ruleId":"4576","severity":1,"message":"4839","line":267,"column":33,"nodeType":"4578","messageId":"4579","endLine":279,"endColumn":34},{"ruleId":"4576","severity":1,"message":"5170","line":354,"column":13,"nodeType":"4578","messageId":"4579","endLine":354,"endColumn":25},{"ruleId":"4543","severity":1,"message":"4790","line":4,"column":5,"nodeType":"4545","messageId":"4546","endLine":4,"endColumn":29},{"ruleId":"4543","severity":1,"message":"5120","line":20,"column":8,"nodeType":"4545","messageId":"4546","endLine":20,"endColumn":28},{"ruleId":"4543","severity":1,"message":"5639","line":25,"column":10,"nodeType":"4545","messageId":"4546","endLine":25,"endColumn":16},{"ruleId":"4543","severity":1,"message":"5640","line":37,"column":11,"nodeType":"4545","messageId":"4546","endLine":37,"endColumn":18},{"ruleId":"4543","severity":1,"message":"5068","line":60,"column":44,"nodeType":"4545","messageId":"4546","endLine":60,"endColumn":53},{"ruleId":"4549","severity":1,"message":"5641","line":80,"column":8,"nodeType":"4551","endLine":80,"endColumn":10,"suggestions":"5642"},{"ruleId":"4549","severity":1,"message":"4569","line":93,"column":8,"nodeType":"4551","endLine":93,"endColumn":17,"suggestions":"5643"},{"ruleId":"4549","severity":1,"message":"5576","line":101,"column":8,"nodeType":"4551","endLine":101,"endColumn":19,"suggestions":"5644"},{"ruleId":"4891","severity":1,"message":"5645","line":58,"column":25,"nodeType":"4893","messageId":"4663","endLine":58,"endColumn":44},{"ruleId":"4549","severity":1,"message":"5646","line":96,"column":8,"nodeType":"4551","endLine":96,"endColumn":24,"suggestions":"5647"},{"ruleId":"4549","severity":1,"message":"4879","line":119,"column":8,"nodeType":"4551","endLine":119,"endColumn":10,"suggestions":"5648"},{"ruleId":"4543","severity":1,"message":"5649","line":72,"column":12,"nodeType":"4545","messageId":"4546","endLine":72,"endColumn":25},{"ruleId":"4549","severity":1,"message":"5350","line":135,"column":8,"nodeType":"4551","endLine":135,"endColumn":10,"suggestions":"5650"},{"ruleId":"4549","severity":1,"message":"4598","line":159,"column":8,"nodeType":"4551","endLine":159,"endColumn":20,"suggestions":"5651"},{"ruleId":"4549","severity":1,"message":"4569","line":168,"column":8,"nodeType":"4551","endLine":168,"endColumn":10,"suggestions":"5652"},{"ruleId":"4549","severity":1,"message":"4584","line":210,"column":8,"nodeType":"4551","endLine":210,"endColumn":10,"suggestions":"5653"},{"ruleId":"4549","severity":1,"message":"4592","line":217,"column":8,"nodeType":"4551","endLine":217,"endColumn":19,"suggestions":"5654"},{"ruleId":"4549","severity":1,"message":"4586","line":219,"column":15,"nodeType":"4587","endLine":249,"endColumn":6},{"ruleId":"4549","severity":1,"message":"5354","line":249,"column":8,"nodeType":"4551","endLine":249,"endColumn":17,"suggestions":"5655"},{"ruleId":"4549","severity":1,"message":"5656","line":308,"column":8,"nodeType":"4551","endLine":308,"endColumn":23,"suggestions":"5657"},{"ruleId":"4614","severity":1,"message":"5501","line":673,"column":52,"nodeType":"4587","messageId":"4619","endLine":673,"endColumn":54},{"ruleId":"5502","severity":1,"message":"5503","line":677,"column":70,"nodeType":"4662","messageId":"5504","endLine":677,"endColumn":71},{"ruleId":"5502","severity":1,"message":"5503","line":678,"column":70,"nodeType":"4662","messageId":"5504","endLine":678,"endColumn":71},{"ruleId":"5502","severity":1,"message":"5503","line":679,"column":79,"nodeType":"4662","messageId":"5504","endLine":679,"endColumn":80},{"ruleId":"4576","severity":1,"message":"4653","line":792,"column":45,"nodeType":"4578","messageId":"4579","endLine":796,"endColumn":47},{"ruleId":"4576","severity":1,"message":"4577","line":811,"column":45,"nodeType":"4578","messageId":"4579","endLine":824,"endColumn":47},{"ruleId":"4576","severity":1,"message":"4890","line":832,"column":49,"nodeType":"4578","messageId":"4579","endLine":835,"endColumn":51},{"ruleId":"4576","severity":1,"message":"4577","line":873,"column":45,"nodeType":"4578","messageId":"4579","endLine":886,"endColumn":47},{"ruleId":"4576","severity":1,"message":"4839","line":890,"column":45,"nodeType":"4578","messageId":"4579","endLine":895,"endColumn":46},{"ruleId":"4576","severity":1,"message":"4577","line":907,"column":45,"nodeType":"4578","messageId":"4579","endLine":920,"endColumn":47},{"ruleId":"4543","severity":1,"message":"4567","line":9,"column":10,"nodeType":"4545","messageId":"4546","endLine":9,"endColumn":20},{"ruleId":"4549","severity":1,"message":"5658","line":30,"column":8,"nodeType":"4551","endLine":30,"endColumn":10,"suggestions":"5659"},{"ruleId":"4576","severity":1,"message":"4577","line":65,"column":33,"nodeType":"4578","messageId":"4579","endLine":75,"endColumn":35},{"ruleId":"4576","severity":1,"message":"4839","line":82,"column":29,"nodeType":"4578","messageId":"4579","endLine":86,"endColumn":30},{"ruleId":"4576","severity":1,"message":"4839","line":92,"column":33,"nodeType":"4578","messageId":"4579","endLine":97,"endColumn":34},{"ruleId":"4543","severity":1,"message":"4706","line":2,"column":8,"nodeType":"4545","messageId":"4546","endLine":2,"endColumn":23},{"ruleId":"4543","severity":1,"message":"4708","line":4,"column":10,"nodeType":"4545","messageId":"4546","endLine":4,"endColumn":23},{"ruleId":"4543","severity":1,"message":"5660","line":7,"column":5,"nodeType":"4545","messageId":"4546","endLine":7,"endColumn":20},{"ruleId":"4543","severity":1,"message":"5661","line":8,"column":5,"nodeType":"4545","messageId":"4546","endLine":8,"endColumn":10},{"ruleId":"5662","severity":1,"message":"5663","line":84,"column":21,"nodeType":"4578","endLine":90,"endColumn":23},{"ruleId":"4543","severity":1,"message":"5223","line":6,"column":5,"nodeType":"4545","messageId":"4546","endLine":6,"endColumn":10},{"ruleId":"4549","severity":1,"message":"4862","line":86,"column":8,"nodeType":"4551","endLine":86,"endColumn":10,"suggestions":"5664"},{"ruleId":"4549","severity":1,"message":"4598","line":105,"column":8,"nodeType":"4551","endLine":105,"endColumn":20,"suggestions":"5665"},{"ruleId":"4576","severity":1,"message":"4577","line":192,"column":21,"nodeType":"4578","messageId":"4579","endLine":206,"endColumn":23},{"ruleId":"4549","severity":1,"message":"4569","line":229,"column":8,"nodeType":"4551","endLine":229,"endColumn":17,"suggestions":"5666"},{"ruleId":"4576","severity":1,"message":"4577","line":350,"column":45,"nodeType":"4578","messageId":"4579","endLine":363,"endColumn":47},{"ruleId":"4576","severity":1,"message":"4577","line":373,"column":45,"nodeType":"4578","messageId":"4579","endLine":386,"endColumn":47},{"ruleId":"4543","severity":1,"message":"5667","line":8,"column":21,"nodeType":"4545","messageId":"4546","endLine":8,"endColumn":39},{"ruleId":"4543","severity":1,"message":"5668","line":9,"column":32,"nodeType":"4545","messageId":"4546","endLine":9,"endColumn":51},{"ruleId":"4543","severity":1,"message":"5306","line":9,"column":74,"nodeType":"4545","messageId":"4546","endLine":9,"endColumn":87},{"ruleId":"4543","severity":1,"message":"5669","line":11,"column":10,"nodeType":"4545","messageId":"4546","endLine":11,"endColumn":22},{"ruleId":"4543","severity":1,"message":"5384","line":22,"column":12,"nodeType":"4545","messageId":"4546","endLine":22,"endColumn":31},{"ruleId":"4549","severity":1,"message":"4586","line":38,"column":15,"nodeType":"4587","endLine":54,"endColumn":6},{"ruleId":"4549","severity":1,"message":"5670","line":73,"column":8,"nodeType":"4551","endLine":73,"endColumn":20,"suggestions":"5671"},{"ruleId":"4576","severity":1,"message":"5672","line":148,"column":37,"nodeType":"4578","messageId":"4579","endLine":156,"endColumn":39},{"ruleId":"4576","severity":1,"message":"5672","line":168,"column":37,"nodeType":"4578","messageId":"4579","endLine":174,"endColumn":39},{"ruleId":"4576","severity":1,"message":"4577","line":226,"column":37,"nodeType":"4578","messageId":"4579","endLine":237,"endColumn":39},{"ruleId":"4576","severity":1,"message":"4577","line":249,"column":37,"nodeType":"4578","messageId":"4579","endLine":260,"endColumn":39},{"ruleId":"4576","severity":1,"message":"4577","line":272,"column":37,"nodeType":"4578","messageId":"4579","endLine":283,"endColumn":39},{"ruleId":"4576","severity":1,"message":"4580","line":289,"column":25,"nodeType":"4578","messageId":"4579","endLine":291,"endColumn":57},{"ruleId":"4543","severity":1,"message":"5673","line":10,"column":138,"nodeType":"4545","messageId":"4546","endLine":10,"endColumn":161},{"ruleId":"4543","severity":1,"message":"5674","line":10,"column":177,"nodeType":"4545","messageId":"4546","endLine":10,"endColumn":188},{"ruleId":"4543","severity":1,"message":"5675","line":10,"column":231,"nodeType":"4545","messageId":"4546","endLine":10,"endColumn":265},{"ruleId":"4543","severity":1,"message":"5676","line":13,"column":161,"nodeType":"4545","messageId":"4546","endLine":13,"endColumn":192},{"ruleId":"4543","severity":1,"message":"5677","line":45,"column":9,"nodeType":"4545","messageId":"4546","endLine":45,"endColumn":28},{"ruleId":"4549","severity":1,"message":"5678","line":99,"column":8,"nodeType":"4551","endLine":99,"endColumn":20,"suggestions":"5679"},{"ruleId":"4549","severity":1,"message":"4569","line":116,"column":8,"nodeType":"4551","endLine":116,"endColumn":10,"suggestions":"5680"},{"ruleId":"4549","severity":1,"message":"5681","line":125,"column":8,"nodeType":"4551","endLine":125,"endColumn":29,"suggestions":"5682"},{"ruleId":"4576","severity":1,"message":"4653","line":402,"column":45,"nodeType":"4578","messageId":"4579","endLine":407,"endColumn":47},{"ruleId":"4576","severity":1,"message":"4653","line":417,"column":45,"nodeType":"4578","messageId":"4579","endLine":422,"endColumn":47},{"ruleId":"4576","severity":1,"message":"4577","line":439,"column":45,"nodeType":"4578","messageId":"4579","endLine":451,"endColumn":47},{"ruleId":"4576","severity":1,"message":"4577","line":467,"column":45,"nodeType":"4578","messageId":"4579","endLine":480,"endColumn":47},{"ruleId":"4576","severity":1,"message":"4580","line":489,"column":33,"nodeType":"4578","messageId":"4579","endLine":492,"endColumn":35},{"ruleId":"4576","severity":1,"message":"4890","line":493,"column":33,"nodeType":"4578","messageId":"4579","endLine":493,"endColumn":81},{"ruleId":"4576","severity":1,"message":"4577","line":512,"column":45,"nodeType":"4578","messageId":"4579","endLine":524,"endColumn":47},{"ruleId":"4576","severity":1,"message":"4577","line":539,"column":45,"nodeType":"4578","messageId":"4579","endLine":550,"endColumn":47},{"ruleId":"4576","severity":1,"message":"4577","line":566,"column":45,"nodeType":"4578","messageId":"4579","endLine":579,"endColumn":47},{"ruleId":"4576","severity":1,"message":"4577","line":590,"column":45,"nodeType":"4578","messageId":"4579","endLine":602,"endColumn":47},{"ruleId":"4576","severity":1,"message":"4839","line":611,"column":33,"nodeType":"4578","messageId":"4579","endLine":615,"endColumn":34},{"ruleId":"4576","severity":1,"message":"4577","line":635,"column":45,"nodeType":"4578","messageId":"4579","endLine":648,"endColumn":47},{"ruleId":"4576","severity":1,"message":"4577","line":663,"column":45,"nodeType":"4578","messageId":"4579","endLine":675,"endColumn":47},{"ruleId":"4576","severity":1,"message":"4577","line":690,"column":45,"nodeType":"4578","messageId":"4579","endLine":702,"endColumn":47},{"ruleId":"4576","severity":1,"message":"4577","line":712,"column":45,"nodeType":"4578","messageId":"4579","endLine":724,"endColumn":47},{"ruleId":"4576","severity":1,"message":"4839","line":733,"column":33,"nodeType":"4578","messageId":"4579","endLine":737,"endColumn":34},{"ruleId":"4549","severity":1,"message":"4569","line":53,"column":8,"nodeType":"4551","endLine":53,"endColumn":10,"suggestions":"5683"},{"ruleId":"4633","severity":1,"message":"4634","line":92,"column":60,"nodeType":"4635","messageId":"4636","endLine":92,"endColumn":92},{"ruleId":"4576","severity":1,"message":"4580","line":99,"column":29,"nodeType":"4578","messageId":"4579","endLine":102,"endColumn":31},{"ruleId":"4549","severity":1,"message":"4592","line":100,"column":8,"nodeType":"4551","endLine":100,"endColumn":19,"suggestions":"5684"},{"ruleId":"4549","severity":1,"message":"4598","line":127,"column":8,"nodeType":"4551","endLine":127,"endColumn":20,"suggestions":"5685"},{"ruleId":"4549","severity":1,"message":"4569","line":137,"column":8,"nodeType":"4551","endLine":137,"endColumn":10,"suggestions":"5686"},{"ruleId":"4549","severity":1,"message":"4569","line":163,"column":8,"nodeType":"4551","endLine":163,"endColumn":10,"suggestions":"5687"},{"ruleId":"4543","severity":1,"message":"5688","line":165,"column":11,"nodeType":"4545","messageId":"4546","endLine":165,"endColumn":29},{"ruleId":"4549","severity":1,"message":"4586","line":243,"column":15,"nodeType":"4587","endLine":273,"endColumn":6},{"ruleId":"4549","severity":1,"message":"4601","line":273,"column":8,"nodeType":"4551","endLine":273,"endColumn":17,"suggestions":"5689"},{"ruleId":"4543","severity":1,"message":"4692","line":315,"column":58,"nodeType":"4545","messageId":"4546","endLine":315,"endColumn":72},{"ruleId":"4576","severity":1,"message":"4653","line":334,"column":45,"nodeType":"4578","messageId":"4579","endLine":338,"endColumn":47},{"ruleId":"4576","severity":1,"message":"4577","line":377,"column":45,"nodeType":"4578","messageId":"4579","endLine":391,"endColumn":47},{"ruleId":"4576","severity":1,"message":"4577","line":425,"column":45,"nodeType":"4578","messageId":"4579","endLine":441,"endColumn":47},{"ruleId":"4576","severity":1,"message":"4653","line":722,"column":45,"nodeType":"4578","messageId":"4579","endLine":726,"endColumn":47},{"ruleId":"4576","severity":1,"message":"4653","line":765,"column":45,"nodeType":"4578","messageId":"4579","endLine":769,"endColumn":47},{"ruleId":"4543","severity":1,"message":"4699","line":7,"column":5,"nodeType":"4545","messageId":"4546","endLine":7,"endColumn":8},"no-unused-vars","'Debit' is defined but never used.","Identifier","unusedVar","'intervalId' is assigned a value but never used.","'keepSessionAlive' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'changelayoutMode' and 'layoutType'. Either include them or remove the dependency array.","ArrayExpression",["5690"],"React Hook useLayoutEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["5691"],"React Hook useLayoutEffect has missing dependencies: 'history' and 'session.active'. Either include them or remove the dependency array.",["5692"],"React Hook useEffect has missing dependencies: 'dispatch' and 'updateSessionActivity'. Either include them or remove the dependency array.",["5693"],"React Hook useEffect has missing dependencies: 'dispatch', 'history', and 'session.active'. Either include them or remove the dependency array.",["5694"],"React Hook useEffect has missing dependencies: 'divisionDropdown_redux.length' and 'history'. Either include them or remove the dependency array.",["5695"],"React Hook useEffect has a missing dependency: 'updateSessionActivity'. Either include it or remove the dependency array.",["5696"],"'PropTypes' is defined but never used.","'withRouter' is defined but never used.","'useHistory' is defined but never used.","'paswErr' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["5697"],["5698"],"React Hook useLayoutEffect has missing dependencies: 'dispatch' and 'divisionDropdown_redux.length'. Either include them or remove the dependency array.",["5699"],"React Hook useLayoutEffect has missing dependencies: 'divisionDropdown_redux.length' and 'history'. Either include them or remove the dependency array.",["5700"],"react/jsx-pascal-case","Imported JSX component C_Select must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","usePascalOrSnakeCase","Imported JSX component Go_Button must be in PascalCase or SCREAMING_SNAKE_CASE",["5701"],"React Hook useEffect has missing dependencies: 'dispatch', 'hasShowModal', 'location.pathname', 'props.isdropdown', 'props.masterPath', and 'props.pageMode'. Either include them or remove the dependency array.",["5702"],"React Hook useEffect has missing dependencies: 'dispatch', 'hasShowModal', 'hasShowloction', 'location.editValue', 'location.pageMode', 'props.editValue', 'props.pageMode', and 'state'. Either include them or remove the dependency array. If 'setPageMode' needs the current value of 'props.pageMode', you can also switch to useReducer instead of useState and read 'props.pageMode' in the reducer.",["5703"],"Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","React Hook useEffect has missing dependencies: 'dispatch', 'fileds', 'history', 'pageMode', 'props', and 'state'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["5704"],"React Hook useEffect has missing dependencies: 'dispatch', 'fileds', 'history', and 'state'. Either include them or remove the dependency array. You can also do a functional update 'setState(s => ...)' if you only need 'state' in the 'setState' call.",["5705"],"React Hook useEffect has a missing dependency: 'state'. Either include it or remove the dependency array.",["5706"],"'Listloader' is defined but never used.",["5707"],["5708"],["5709"],"React Hook useEffect has missing dependencies: 'dispatch', 'hasShowModal', 'location.pathname', and 'props.masterPath'. Either include them or remove the dependency array.",["5710"],["5711"],"React Hook useEffect has missing dependencies: 'dispatch', 'fileds', 'history', 'pageMode', and 'state'. Either include them or remove the dependency array. You can also do a functional update 'setState(s => ...)' if you only need 'state' in the 'setState' call.",["5712"],["5713"],["5714"],["5715"],["5716"],"React Hook useEffect has missing dependencies: 'isCPassword' and 'password'. Either include them or remove the dependency array.",["5717"],["5718"],["5719"],["5720"],"React Hook useEffect has missing dependencies: 'dispatch', 'history', 'pageMode', 'postMsg.Message', and 'postMsg.StatusCode'. Either include them or remove the dependency array.",["5721"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","expectedInside","'setModalCss' is assigned a value but never used.","Array.prototype.find() expects a value to be returned at the end of arrow function.","expectedAtEnd",["5722"],"no-mixed-operators","Unexpected mix of '&&' and '||'. Use parentheses to clarify the intended order of operations.","LogicalExpression","unexpectedMixedOperator","React Hook useEffect has missing dependencies: 'dispatch', 'hasShowModal', 'hasShowloction', 'location.editValue', 'location.pageMode', 'props.editValue', and 'props.pageMode'. Either include them or remove the dependency array. If 'setPageMode' needs the current value of 'props.pageMode', you can also switch to useReducer instead of useState and read 'props.pageMode' in the reducer.",["5723"],"React Hook useEffect has missing dependencies: 'dispatch', 'history', and 'pageMode'. Either include them or remove the dependency array.",["5724"],"React Hook useEffect has missing dependencies: 'dispatch' and 'tog_center'. Either include them or remove the dependency array.",["5725"],"React Hook useEffect has missing dependencies: 'dispatch' and 'history'. Either include them or remove the dependency array.",["5726"],"no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","Imported JSX component PageFieldMaster_Tab must be in PascalCase or SCREAMING_SNAKE_CASE","'MetaTags' is defined but never used.",["5727"],"'userAccess' is assigned a value but never used.",["5728"],"'Select' is defined but never used.",["5729"],"'CompanyName' is assigned a value but never used.","'EmployeeParties' is assigned a value but never used.","'City' is assigned a value but never used.","'Company_id' is assigned a value but never used.",["5730"],"React Hook useEffect has missing dependencies: 'dispatch', 'fileds', 'history', 'props.pageMode', and 'state'. Either include them or remove the dependency array. You can also do a functional update 'setState(s => ...)' if you only need 'state' in the 'setState' call.",["5731"],["5732"],["5733"],"Imported JSX component C_DatePicker must be in PascalCase or SCREAMING_SNAKE_CASE",["5734"],["5735"],["5736"],["5737"],["5738"],["5739"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-redeclare","'x' is already defined.","redeclared","'data1' is assigned a value but never used.","Imported JSX component Margin_Tab must be in PascalCase or SCREAMING_SNAKE_CASE","'searchProps' is assigned a value but never used.","Expected '!==' and instead saw '!='.","'countries' is assigned a value but never used.","'onChange' is defined but never used.",["5740"],["5741"],["5742"],"React Hook useEffect has missing dependencies: 'dispatch', 'fileds', 'history', 'pageMode', 'postMsg.Message', 'postMsg.StatusCode', and 'state'. Either include them or remove the dependency array. You can also do a functional update 'setState(s => ...)' if you only need 'state' in the 'setState' call.",["5743"],["5744"],["5745"],"'setPageMode' is assigned a value but never used.",["5746"],"React Hook useEffect has a missing dependency: 'editDataGatingFromList'. Either include it or remove the dependency array.",["5747"],["5748"],"React Hook useEffect has missing dependencies: 'dispatch' and 'location.pathname'. Either include them or remove the dependency array.",["5749"],"React Hook useEffect has missing dependencies: 'dispatch' and 'history.location.state'. Either include them or remove the dependency array.",["5750"],["5751"],["5752"],"'config' is assigned a value but never used.","'IsEditMode_Css' is assigned a value but never used.",["5753"],["5754"],["5755"],["5756"],["5757"],["5758"],"'Row' is defined but never used.","'Col' is defined but never used.","'Button' is defined but never used.","'BootstrapTable' is defined but never used.","'paginationFactory' is defined but never used.","'PaginationProvider' is defined but never used.","'PaginationListStandalone' is defined but never used.","'ToolkitProvider' is defined but never used.","'countlabelFunc' is defined but never used.","'mySearchProps' is defined but never used.","'breadcrumbReturnFunc' is defined but never used.","'loginCompanyID' is defined but never used.","'loginRoleID' is defined but never used.","'loginUserID' is defined but never used.",["5759"],["5760"],["5761"],["5762"],["5763"],["5764"],["5765"],["5766"],["5767"],["5768"],["5769"],["5770"],["5771"],["5772"],["5773"],["5774"],["5775"],["5776"],["5777"],["5778"],["5779"],["5780"],["5781"],["5782"],"'useState' is defined but never used.","React Hook useEffect has missing dependencies: 'dispatch' and 'goButtonHandler'. Either include them or remove the dependency array.",["5783"],"Imported JSX component PartyDropdown_Common must be in PascalCase or SCREAMING_SNAKE_CASE","'loginPartyID' is defined but never used.","'userAdminRole' is assigned a value but never used.",["5784"],["5785"],["5786"],["5787"],["5788"],["5789"],"'partyOnChngeHandler' is assigned a value but never used.",["5790"],["5791"],["5792"],["5793"],["5794"],"'Party' is assigned a value but never used.","'PartyName' is assigned a value but never used.",["5795"],["5796"],["5797"],["5798"],"'Email' is assigned a value but never used.","'Mobile' is assigned a value but never used.","'NotNull' is assigned a value but never used.",["5799"],["5800"],["5801"],["5802"],["5803"],["5804"],"'useRef' is defined but never used.","'Search' is defined but never used.",["5805"],["5806"],["5807"],"React Hook useEffect has missing dependencies: 'dispatch', 'hasShowModal', 'hasShowloction', 'location.editValue', 'location.page_Mode', 'props.editValue', 'props.pageMode', and 'state'. Either include them or remove the dependency array. If 'setPageMode' needs the current value of 'props.pageMode', you can also switch to useReducer instead of useState and read 'props.pageMode' in the reducer.",["5808"],"React Hook useEffect has missing dependencies: 'GoButton_Handler' and 'dispatch'. Either include them or remove the dependency array.",["5809"],["5810"],"'pageOptions' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'dispatch', 'editDataGatingFromList', 'history.location.pathname', and 'props.relatatedPage'. Either include them or remove the dependency array.",["5811"],["5812"],"React Hook useEffect has missing dependencies: 'dispatch' and 'partyType_dropdown_Select.value'. Either include them or remove the dependency array.",["5813"],["5814"],["5815"],["5816"],"'calculatepathOptionsfunction' is assigned a value but never used.","'BreadcrumbShowCountlabel' is defined but never used.","'_cfunc' is defined but never used.","React Hook useEffect has missing dependencies: 'dispatch', 'hasPagePath', and 'page_Id'. Either include them or remove the dependency array.",["5817"],["5818"],["5819"],"'EditData' is assigned a value but never used.",["5820"],["5821"],["5822"],["5823"],["5824"],["5825"],"'userAccState' is assigned a value but never used.",["5826"],"React Hook useEffect has a missing dependency: 'page_Id'. Either include it or remove the dependency array.",["5827"],["5828"],["5829"],"'getMarginList' is defined but never used.","'async' is defined but never used.",["5830"],["5831"],["5832"],["5833"],["5834"],["5835"],["5836"],["5837"],["5838"],"React Hook useEffect has missing dependencies: 'dispatch' and 'props'. Either include them or remove the dependency array.",["5839"],["5840"],"React Hook useEffect has missing dependencies: 'dispatch', 'fileds', 'history', 'pageMode', and 'state'. Either include them or remove the dependency array.",["5841"],["5842"],["5843"],["5844"],["5845"],["5846"],["5847"],["5848"],"React Hook useEffect has missing dependencies: 'dispatch', 'goButtonHandler', 'hasShowModal', 'hasShowloction', and 'page_id'. Either include them or remove the dependency array.",["5849"],"React Hook useEffect has missing dependencies: 'dispatch', 'hasShowModal', 'location.pathname', 'props.isAssing', and 'props.masterPath'. Either include them or remove the dependency array.",["5850"],["5851"],"React Hook useEffect has missing dependencies: 'dispatch', 'pageMode', and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["5852"],"Imported JSX component C_Button must be in PascalCase or SCREAMING_SNAKE_CASE",["5853"],["5854"],["5855"],["5856"],["5857"],["5858"],"React Hook useEffect has a missing dependency: 'values.PartyName.value'. Either include it or remove the dependency array.",["5859"],"'pagesListColumns' is assigned a value but never used.",["5860"],["5861"],["5862"],["5863"],["5864"],["5865"],"'FeatherIcon' is defined but never used.","'setPosition' is assigned a value but never used.","'partyList_redux' is assigned a value but never used.","React Hook useLayoutEffect has missing dependencies: 'dispatch' and 'page_id'. Either include them or remove the dependency array.",["5866"],"React Hook useEffect has missing dependencies: 'dispatch', 'otherloginAccss', and 'props'. Either include them or remove the dependency array.",["5867"],"React Hook useEffect has missing dependencies: 'dispatch' and 'subPageMode'. Either include them or remove the dependency array.",["5868"],"React Hook useEffect has missing dependencies: 'dispatch', 'hasShowModal', 'hasShowloction', 'location.editValue', 'location.pageMode', 'props.editValue', 'props.pageMode', and 'subPageMode'. Either include them or remove the dependency array. If 'setPageMode' needs the current value of 'props.pageMode', you can also switch to useReducer instead of useState and read 'props.pageMode' in the reducer.",["5869"],"React Hook useEffect has missing dependencies: 'commonPartyDropSelect.value', 'dispatch', 'history', 'listPath', 'orderdate', 'pageMode', 'subPageMode', and 'supplierSelect'. Either include them or remove the dependency array.",["5870"],"React Hook useEffect has missing dependencies: 'dispatch', 'history', 'listPath', and 'modalCss'. Either include them or remove the dependency array.",["5871"],["5872"],"React Hook useEffect has missing dependencies: 'dispatch' and 'selecedItemWiseOrder'. Either include them or remove the dependency array.",["5873"],"React Hook useEffect has missing dependencies: 'hasShowModal' and 'hasShowloction'. Either include them or remove the dependency array.",["5874"],["5875"],["5876"],"React Hook useEffect has missing dependencies: 'dispatch', 'history', and 'listPath'. Either include them or remove the dependency array.",["5877"],"React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.",["5878"],"React Hook useEffect has missing dependencies: 'itemWise_CalculationFunc' and 'orderItemTable'. Either include them or remove the dependency array.",["5879"],"'discountValueAll' is assigned a value but never used.","no-useless-computed-key","Unnecessarily computed property [\"VDC-PO Type\"] found.","Property","unnecessarilyComputedProperty",{"range":"5880","text":"5881"},{"range":"5882","text":"5881"},"Imported JSX component Change_Button must be in PascalCase or SCREAMING_SNAKE_CASE","no-dupe-keys","Duplicate key 'makeBtnShow'.","ObjectExpression","Duplicate key 'userAccess'.","Duplicate key 'pageField'.","React Hook useLayoutEffect has missing dependencies: 'dispatch', 'goButtonHandler', and 'subPageMode'. Either include them or remove the dependency array.",["5883"],["5884"],["5885"],["5886"],["5887"],["5888"],"React Hook useEffect has missing dependencies: 'dispatch', 'goButtonHandler', and 'orderApprovalMsg.Status'. Either include them or remove the dependency array.",["5889"],["5890"],["5891"],["5892"],"Imported JSX component OrderView_Modal must be in PascalCase or SCREAMING_SNAKE_CASE","'customAlert' is defined but never used.",["5893"],"React Hook useEffect has missing dependencies: 'RoleAccessUpdateData.length' and 'dispatch'. Either include them or remove the dependency array.",["5894"],"React Hook useCallback has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","React Hook useEffect has missing dependencies: 'RoleAccessUpdateData' and 'props.location.pathname'. Either include them or remove the dependency array.",["5895"],"React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","Array.prototype.map() expects a value to be returned at the end of arrow function.","'DELETE_ROLE_ACCESS_MASTER' is defined but never used.","'SET_TABLE_DATA_ROLE_ACCSS_ADD_PAGE' is defined but never used.","React Hook useEffect has missing dependencies: 'dispatch', 'fileds', and 'state'. Either include them or remove the dependency array. You can also do a functional update 'setState(s => ...)' if you only need 'state' in the 'setState' call.",["5896"],"'isMouseOver' is assigned a value but never used.","'handleMouseEnter' is assigned a value but never used.","'handleMouseLeave' is assigned a value but never used.","'DropdownToggle' is defined but never used.","'BREADCRUMB_CHECK_RADIO_BUTTON' is defined but never used.","'img1' is defined but never used.","'img2' is defined but never used.","'img3' is defined but never used.","'CommonConsole' is defined but never used.","'btnIsDissablefunc' is defined but never used.","'apiError' is defined but never used.","'loginSuccess' is defined but never used.","'GET_PRICE_LIST_PAGE_SUCCESS' is defined but never used.","'AlertState' is defined but never used.","'categoryTableData' is assigned a value but never used.","'setCategoryTableData' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'dispatch' and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["5897"],"'GET_PRICE_LIST_FOR_DROPDOWN_SUCCESS' is defined but never used.","'LOGOUT_USER' is defined but never used.","'LOGOUT_USER_SUCCESS' is defined but never used.","'API_ERROR' is defined but never used.","'DIVISION_DROPDOWN_SUCCESS_AFTER_LOGIN' is defined but never used.","'pageField' is assigned a value but never used.",["5898"],["5899"],["5900"],["5901"],["5902"],["5903"],["5904"],["5905"],["5906"],"React Hook useEffect has missing dependencies: 'addRowHandler', 'dispatch', and 'imageTable.length'. Either include them or remove the dependency array.",["5907"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.",["5908"],["5909"],["5910"],["5911"],["5912"],["5913"],["5914"],"'takeEvery' is defined but never used.","'axios' is defined but never used.","'cbm_logo' is defined but never used.","'upi_qr_code' is defined but never used.","'stringNumber' is assigned a value but never used.","'Data' is defined but never used.","Duplicate key 'BatchDate'.","'reportArray' is already defined.","no-sparse-arrays","Unexpected comma in middle of array.","unexpectedSparseArray","'terms' is assigned a value but never used.",["5915"],"React Hook useEffect has a missing dependency: 'defaultDownBtnData'. Either include it or remove the dependency array.",["5916"],["5917"],["5918"],["5919"],["5920"],["5921"],["5922"],["5923"],["5924"],"'Table' is defined but never used.","'GotoInvoiceBtn' is defined but never used.","'goBtnloading' is assigned a value but never used.",["5925"],["5926"],["5927"],"React Hook useEffect has missing dependencies: 'dispatch', 'history', 'subPageMode', 'systemSetting.AutoEInvoice', and 'systemSetting.EInvoiceApplicable'. Either include them or remove the dependency array.",["5928"],["5929"],["5930"],["5931"],"React Hook useEffect has missing dependencies: 'dispatch' and 'totalAmountCalcuationFunc'. Either include them or remove the dependency array.",["5932"],"'goButtonHandler' is defined but never used.","'useEffect' is defined but never used.","'getControlTypes' is defined but never used.","'getFieldValidations' is defined but never used.","'getFieldValidationsForALLType' is defined but never used.","'dispatch' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'goButtonHandler' and 'subPageMode'. Either include them or remove the dependency array. You can also do a functional update 'setSubPageMode(s => ...)' if you only need 'subPageMode' in the 'setSubPageMode' call.",["5933"],["5934"],["5935"],["5936"],["5937"],["5938"],["5939"],["5940"],["5941"],"'setpageMode' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'dispatch', 'goButtonHandler', 'page_Id', and 'subPageMode'. Either include them or remove the dependency array.",["5942"],"React Hook useEffect has missing dependencies: 'dispatch', 'goButtonHandler', and 'page_Id'. Either include them or remove the dependency array.",["5943"],["5944"],["5945"],["5946"],["5947"],["5948"],["5949"],["5950"],["5951"],"'hasShowloction' is assigned a value but never used.",["5952"],["5953"],["5954"],["5955"],["5956"],"'t2' is assigned a value but never used.",["5957"],["5958"],"React Hook useEffect has a missing dependency: 'currentDate_ymd'. Either include it or remove the dependency array.",["5959"],"React Hook useEffect has missing dependencies: 'currentDate_ymd', 'dispatch', 'hasShowModal', 'hasShowloction', 'location', and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["5960"],["5961"],["5962"],["5963"],"'ItemOnchange' is already defined.","'ox' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'dispatch', 'goButtonHandler', 'page_Id', and 'page_mode'. Either include them or remove the dependency array.",["5964"],["5965"],"'saveBtnID1' is assigned a value but never used.","'updateBtnID1' is assigned a value but never used.",["5966"],["5967"],["5968"],["5969"],["5970"],["5971"],["5972"],"'Productionlistfilters' is defined but never used.","React Hook useEffect has missing dependencies: 'dispatch', 'goButtonHandler', and 'subPageMode'. Either include them or remove the dependency array.",["5973"],["5974"],"'useMemo' is defined but never used.","'tableList' is assigned a value but never used.","'bomlistFilters' is assigned a value but never used.","'venderSelect' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'dispatch', 'goButtonHandler', and 'hasPagePath'. Either include them or remove the dependency array.",["5975"],"'subPageMode' is assigned a value but never used.","'setSubPageMode' is assigned a value but never used.","'setOtherState' is assigned a value but never used.",["5976"],"React Hook useLayoutEffect has missing dependencies: 'dispatch', 'goButtonHandler', and 'subPageMode'. Either include them or remove the dependency array. You can also do a functional update 'setSubPageMode(s => ...)' if you only need 'subPageMode' in the 'setSubPageMode' call.",["5977"],["5978"],["5979"],["5980"],["5981"],["5982"],["5983"],["5984"],"React Hook useEffect has missing dependencies: 'currentDate_ymd' and 'dispatch'. Either include them or remove the dependency array.",["5985"],["5986"],"no-template-curly-in-string","Unexpected template string expression.","Literal","unexpectedTemplateExpression",["5987"],["5988"],["5989"],["5990"],"React Hook useEffect has missing dependencies: 'PermissionFunction', 'dispatch', and 'history'. Either include them or remove the dependency array.",["5991"],["5992"],"'Amount' is defined but never used.","'basicAmount' is defined but never used.","'roundedGstAmount' is defined but never used.","'setShowAllStockState' is assigned a value but never used.","'fieldLabel' is assigned a value but never used.",["5993"],"React Hook useEffect has missing dependencies: 'hasShowModal', 'hasShowloction', 'location.editValue', 'location.pageMode', 'props.editValue', 'props.pageMode', and 'state'. Either include them or remove the dependency array. If 'setPageMode' needs the current value of 'props.pageMode', you can also switch to useReducer instead of useState and read 'props.pageMode' in the reducer.",["5994"],"React Hook useEffect has missing dependencies: 'history' and 'pageMode'. Either include them or remove the dependency array.",["5995"],["5996"],["5997"],["5998"],["5999"],"'result' is assigned a value but never used.","'url' is defined but never used.","'Card' is defined but never used.","'CardBody' is defined but never used.","'Fade' is defined but never used.","'loginSelectedPartyID' is defined but never used.","'PartyDropdown_Common' is defined but never used.","'pageMode' is assigned a value but never used.",["6000"],["6001"],["6002"],["6003"],["6004"],["6005"],["6006"],["6007"],"'reportHederPng' is defined but never used.","'time' is assigned a value but never used.","'groupedItems' is assigned a value but never used.","'Gst' is assigned a value but never used.",["6008"],["6009"],["6010"],["6011"],["6012"],["6013"],["6014"],"no-native-reassign",["6015"],"no-negated-in-lhs",["6016"],"'updateMsg' is assigned a value but never used.","'values' is assigned a value but never used.","'isError' is assigned a value but never used.",["6017"],["6018"],"React Hook useEffect has missing dependencies: 'dispatch', 'pageMode', 'postMsg.Message', and 'postMsg.StatusCode'. Either include them or remove the dependency array.",["6019"],["6020"],["6021"],"React Hook useEffect received a function whose dependencies are unknown. Pass an inline function instead.",["6015"],["6016"],"'Data1' is defined but never used.","'dataGenrator' is defined but never used.","'E_invoiceQRCode' is defined but never used.","'toWords' is defined but never used.","'convertTimefunc' is defined but never used.","Duplicate key 'textColor'.","'invoice' is defined but never used.","'TotalGst' is assigned a value but never used.","'PcsinNumberUnit' is assigned a value but never used.","'LoadingSheet_API' is defined but never used.","'MultipleInvoice_API' is defined but never used.","'pdfdata' is assigned a value but never used.","'jsonBody' is assigned a value but never used.","Imported JSX component C_Report must be in PascalCase or SCREAMING_SNAKE_CASE","Duplicate key 'id'.","Duplicate key 'InvoiceDate'.","Duplicate key 'InvoiceNumber'.","Duplicate key 'FullInvoiceNumber'.","Duplicate key 'GrandTotal'.","Duplicate key 'RoundOffAmount'.","Duplicate key 'Customer'.","Duplicate key 'CustomerName'.","Duplicate key 'CustomerGSTIN'.","Duplicate key 'Party'.","Duplicate key 'PartyName'.","Duplicate key 'PartyGSTIN'.","Duplicate key 'InvoiceItems'.","'Breadcrumb_inputName' is defined but never used.",["6022"],["6023"],"React Hook useEffect has missing dependencies: 'dispatch' and 'pageMode'. Either include them or remove the dependency array.",["6024"],"React Hook useEffect has missing dependencies: 'Data.length' and 'dispatch'. Either include them or remove the dependency array.",["6025"],["6026"],"'firstDate' is assigned a value but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'tr' is already defined.","'pos' is already defined.","'ctd' is already defined.","'tdInput' is already defined.","'thisIndex' is already defined.","'moveToRow' is already defined.","'postpdfMultipleReportdataSuccess' is defined but never used.",["6027"],"'ButtonMsgLable' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'dispatch', 'history.location.pathname', and 'masterPath'. Either include them or remove the dependency array.",["6028"],"React Hook useEffect has missing dependencies: 'PageFieldMaster' and 'dispatch'. Either include them or remove the dependency array.",["6029"],"React Hook useEffect has missing dependencies: 'dispatch', 'getList', 'getListbodyFunc', 'tog_center', and 'updateSucc'. Either include them or remove the dependency array.",["6030"],"'promise' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'deleteSucc', 'dispatch', 'getList', and 'getListbodyFunc'. Either include them or remove the dependency array.",["6031"],"React Hook useEffect has missing dependencies: 'dispatch', 'getList', 'getListbodyFunc', 'postSucc', and 'tog_center'. Either include them or remove the dependency array.",["6032"],"React Hook useEffect has missing dependencies: 'history', 'masterPath', and 'pageField.IsEditPopuporComponent'. Either include them or remove the dependency array.",["6033"],"Array.prototype.some() expects a value to be returned at the end of arrow function.","Array.prototype.some() expects a return value from arrow function.","React Hook useEffect has a missing dependency: 'isInitialLoad'. Either include it or remove the dependency array.",["6034"],"'Input' is defined but never used.","'viewId' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'dispatch', 'forceNewBtnView', 'history.location.pathname', and 'newBtnPath'. Either include them or remove the dependency array.",["6035"],["6036"],"React Hook useEffect has missing dependencies: 'dispatch', 'goButnFunc', 'masterPath', 'tog_center', 'updateSucc', and 'userAccState'. Either include them or remove the dependency array.",["6037"],"React Hook useEffect has missing dependencies: 'deleteSucc', 'dispatch', and 'goButnFunc'. Either include them or remove the dependency array.",["6038"],"React Hook useEffect has missing dependencies: 'dispatch', 'getList', 'postSucc', and 'tog_center'. Either include them or remove the dependency array.",["6039"],["6040"],"'input' is assigned a value but never used.","'SALES_RETURN_API_ERROR_ACTION' is defined but never used.","'RowId' is assigned a value but never used.","'getDistrictOnState' is defined but never used.","'count' is assigned a value but never used.","'setDistrict_dropdown_Select' is assigned a value but never used.","'setvalue' is assigned a value but never used.","'key' is assigned a value but never used.",["6041"],["6042"],["6043"],["6044"],["6045"],["6046"],["6047"],"Duplicate key 'Value2'.","no-useless-escape","Unnecessary escape character: \\..","unnecessaryEscape",["6048","6049"],["6050","6051"],"'orderCalculateFunc' is defined but never used.",["6052"],["6053"],["6054"],["6055"],["6056"],["6057"],["6058"],["6059"],["6060"],["6061"],["6062"],["6063"],["6064"],["6065"],["6066"],["6067"],["6068"],["6069"],"React Hook useEffect has a missing dependency: 'loginSystemSetting.IsAmountadjustedinInvoice'. Either include it or remove the dependency array.",["6070"],"'Data' is assigned a value but never used.","'insidePageMode' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'AmountPaidDistribution', 'dispatch', 'hasShowModal', 'hasShowloction', 'location.editValue', 'location.pageMode', and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["6071"],["6072"],"'DEPOSITOR_BANK_FILTER_SUCCESS' is defined but never used.","React Hook useEffect has missing dependencies: 'dispatch' and 'hasPagePath'. Either include them or remove the dependency array.",["6073"],["6074"],["6075"],"React Hook useEffect has missing dependencies: 'goButtonHandler' and 'userAdminRole'. Either include them or remove the dependency array.",["6076"],"React Hook useEffect has missing dependencies: 'commonPartyDropSelect.value' and 'dispatch'. Either include them or remove the dependency array.",["6077"],["6078"],["6079"],["6080"],["6081"],["6082"],["6083"],"'useLayoutEffect' is defined but never used.",["6084"],["6085"],["6086"],["6087"],["6088"],["6089"],"'ReceiptDate' is assigned a value but never used.","'CheckBox' is defined but never used.","'date_dmy_func' is defined but never used.","'initial_y' is assigned a value but never used.",["6090"],["6091"],["6092"],["6093"],["6094"],["6095"],["6096"],["6097"],"React Hook useEffect has missing dependencies: 'dispatch', 'hasShowModal', 'history.location.pathname', and 'props.masterPath'. Either include them or remove the dependency array.",["6098"],["6099"],["6100"],["6101"],["6102"],["6103"],"'delay' is defined but never used.",["6104"],["6105"],["6106"],["6107"],"React Hook useEffect has a missing dependency: 'goButtonHandler'. Either include it or remove the dependency array.",["6108"],["6109"],["6110"],"'NoteTypeOnChange' is defined but never used.",["6111"],["6112"],["6113"],["6114"],["6115"],["6116"],["6117"],"'CurrentTime' is defined but never used.","'currentDate_dmy' is defined but never used.","'doc' is already defined.","'date' is already defined.","'time' is already defined.","'pattern' is assigned a value but never used.","'BatchRow' is assigned a value but never used.","'OrderNumber' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'PageFieldMaster', 'lastColumn', 'makeBtnColumn', 'secondLastColumn', and 'thirdLastColumn'. Either include them or remove the dependency array. If 'makeBtnColumn' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["6118"],"React Hook useEffect has missing dependencies: 'dispatch' and 'page_id'. Either include them or remove the dependency array.",["6119"],["6120"],["6121"],"React Hook useEffect has missing dependencies: 'dispatch', 'fileds', 'history', 'listPath', 'pageMode', and 'state'. Either include them or remove the dependency array. You can also do a functional update 'setState(s => ...)' if you only need 'state' in the 'setState' call.",["6122"],["6123"],["6124"],["6125"],["6126"],"'ReciptDateOnchange' is defined but never used.",["6127"],"React Hook useLayoutEffect has missing dependencies: 'dispatch' and 'subPageMode'. Either include them or remove the dependency array.",["6128"],["6129"],["6130"],["6131"],"React Hook useEffect has missing dependencies: 'commonPartyDropSelect.value', 'dispatch', and 'subPageMode'. Either include them or remove the dependency array.",["6132"],["6133"],["6134"],"'curruntState' is defined but never used.","React Hook useEffect has missing dependencies: 'addressTable', 'dispatch', and 'setAddressTable'. Either include them or remove the dependency array. If 'setAddressTable' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["6135"],["6136"],["6137"],["6138"],["6139"],"React Hook useEffect has missing dependencies: 'dispatch', 'history', 'listPath', 'pageMode', 'postMsg.Message', and 'postMsg.StatusCode'. Either include them or remove the dependency array.",["6140"],"React Hook useEffect has missing dependencies: 'dispatch', 'history', 'listPath', and 'subPageMode'. Either include them or remove the dependency array.",["6141"],"'useSelector' is defined but never used.","'Spinner' is defined but never used.","'userPageAccessState' is assigned a value but never used.","'orderApprovalMsg' is assigned a value but never used.",["6142"],["6143"],["6144"],"'currentDate_ymd' is assigned a value but never used.",["6145"],["6146"],["6015"],["6016"],["6147"],"'Go_Button' is defined but never used.",["6148"],["6149"],"React Hook useEffect has missing dependencies: 'dispatch' and 'pageField'. Either include them or remove the dependency array.",["6150"],["6151"],["6152"],["6153"],["6154"],["6155"],["6156"],"'preUploadjson' is assigned a value but never used.","'priceListDropDownLoading' is assigned a value but never used.","React Hook useLayoutEffect has missing dependencies: 'dispatch', 'goButtonHandler', and 'userAdminRole'. Either include them or remove the dependency array.",["6157"],["6158"],["6159"],["6160"],"React Hook useEffect has missing dependencies: 'dispatch', 'goButtonHandler', and 'userAdminRole'. Either include them or remove the dependency array.",["6161"],["6162"],"React Hook useEffect has missing dependencies: 'dispatch' and 'preDetails'. Either include them or remove the dependency array.",["6163"],"'PartyExcelUpload_save_Success' is defined but never used.",["6164"],["6165"],["6166"],["6167"],["6168"],"'mapTypeSelect' is assigned a value but never used.","'SetMapTypeSelect' is assigned a value but never used.","'partySelect' is assigned a value but never used.","'SetPartySelect' is assigned a value but never used.",["6169"],["6170"],["6171"],["6172"],["6173"],["6174"],["6015"],["6016"],"'InvoiceExcelUpload_save_action' is defined but never used.","'getEmployeelist' is defined but never used.","'loginCompanyName' is defined but never used.","'loginEmployeeID' is defined but never used.","'getPartyTableList' is defined but never used.","'Party_Dropdown_List' is defined but never used.","'company' is assigned a value but never used.","'setCompany' is assigned a value but never used.",["6175"],["6176"],["6177"],["6178"],["6179"],["6180"],"'XLSX' is defined but never used.",["6181"],["6182"],"React Hook useEffect has missing dependencies: 'btnMode', 'dispatch', and 'downloadExcelFunction'. Either include them or remove the dependency array.",["6183"],"React Hook useEffect has a missing dependency: 'groupByColumnsWithSumFunc'. Either include it or remove the dependency array.",["6184"],"'saveGroupMaster' is defined but never used.","'saveGroupMaster_Success' is defined but never used.","'onChangeSelect' is defined but never used.","'getGroupTypeslist' is defined but never used.",["6185"],["6186"],["6187"],["6188"],["6189"],["6190"],["6191"],"'postOrderSummary_API_Success' is defined but never used.",["6192"],["6193"],["6194"],["6195"],"'TotalInQuantity' is assigned a value but never used.","'TotalOutQuantity' is assigned a value but never used.",["6196"],["6197"],["6198"],["6199"],["6200"],"React Hook useEffect has missing dependencies: 'btnMode', 'dispatch', and 'pageField'. Either include them or remove the dependency array.",["6201"],"React Hook useEffect has missing dependencies: 'dispatch', 'goButtonHandler', and 'subPageMode'. Either include them or remove the dependency array. You can also do a functional update 'setSubPageMode(s => ...)' if you only need 'subPageMode' in the 'setSubPageMode' call.",["6202"],["6203"],["6204"],["6205"],"Imported JSX component SalesReturnView_Modal must be in PascalCase or SCREAMING_SNAKE_CASE","'ImageCount' is assigned a value but never used.","'invoiceNoDropDownLoading' is assigned a value but never used.",["6206"],["6207"],["6208"],["6209"],["6210"],["6211"],"React Hook useEffect has missing dependencies: 'TableArr', 'dispatch', and 'returnMode'. Either include them or remove the dependency array.",["6212"],"React Hook useEffect has a missing dependency: 'SaleableItemReasonID'. Either include it or remove the dependency array.",["6213"],"'InvoiceNo_Options' is assigned a value but never used.","Array.prototype.filter() expects a value to be returned at the end of arrow function.","no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat","'GetOpeningBalance' is defined but never used.",["6214"],["6215"],"'tableColumns' is assigned a value but never used.",["6216"],["6217"],"'invoiceListGoBtnfilter' is defined but never used.",["6218"],["6219"],["6220"],["6221"],["6222"],["6223"],["6224"],["6225"],["6226"],["6227"],["6228"],["6229"],["6230"],["6231"],["6232"],"React Hook useEffect has missing dependencies: 'commonPartyDropSelect.value', 'dispatch', and 'values.Partytype.value'. Either include them or remove the dependency array.",["6233"],"'showMessage' is assigned a value but never used.","no-empty-pattern","Unexpected empty object pattern.","ObjectPattern",["6234"],["6235"],["6236"],["6237"],"'GENERIC_SALE_REPORT_API_ERROR_ACTION' is defined but never used.",["6238"],["6239"],["6240"],["6241"],"React Hook useEffect has missing dependencies: 'dispatch' and 'sendToSSbtnTableData'. Either include them or remove the dependency array.",["6242"],["6243"],["6244"],["6245"],["6246"],["6247"],"'Change_Button' is defined but never used.",["6248"],["6249"],["6250"],["6251"],["6252"],["6253"],["6254"],["6255"],"Array.prototype.filter() expects a return value from arrow function.","ReturnStatement","expectedReturnValue","'setTableData' is assigned a value but never used.",["6256"],["6257"],["6258"],"React Hook useEffect has missing dependencies: 'btnMode' and 'dispatch'. Either include them or remove the dependency array.",["6259"],["6260"],"'compareGSTINState' is defined but never used.","'totalICGST' is assigned a value but never used.","'COMMON_PARTY_DROP_SELECT_ACTION_SUCCESS' is defined but never used.","'supplier' is assigned a value but never used.",["6261"],"React Hook useEffect has missing dependencies: 'MonthAndYearOnchange', 'dispatch', and 'values.SelectedMonth'. Either include them or remove the dependency array.",["6262"],["6263"],"React Hook useEffect has missing dependencies: 'dispatch' and 'jsonBody'. Either include them or remove the dependency array.",["6264"],["6265"],"'loginSystemSetting' is defined but never used.","React Hook useEffect has a missing dependency: 'searchText'. Either include it or remove the dependency array.",["6266"],"React Hook useMemo has a missing dependency: 'onDataSizeChange'. Either include it or remove the dependency array. If 'onDataSizeChange' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["6267"],"'rowClesess' is defined but never used.","'TotalDiscount' is assigned a value but never used.","'ReturnReasonDetails' is assigned a value but never used.","'GSTPercentage' is assigned a value but never used.","'totalBasicAmount' is assigned a value but never used.","'SrNO' is assigned a value but never used.","'POST_ORDER_SUMMARY_API' is defined but never used.","'OrderSummaryApiErrorAction' is defined but never used.","'OderSummary_GoBtn_API' is defined but never used.","'POST_ORDER_SUMMARY_API_SUCCESS' is defined but never used.","'Papa' is defined but never used.",["6268"],["6269"],"React Hook useEffect has missing dependencies: 'GSTRateWise', 'PurchaseGSTDetails', 'PurchaseGSTRateWiseDetails', 'dispatch', and 'pageField'. Either include them or remove the dependency array.",["6270"],["6271"],["6272"],["6273"],"'postRetailerData_API_Success' is defined but never used.","'RetailerDataApiErrorAction' is defined but never used.",["6274"],["6275"],["6276"],["6277"],["6278"],["6279"],["6280"],"React Hook useEffect has missing dependencies: 'DeletedInvoiceExportSerializerDetails', 'dispatch', and 'pageField'. Either include them or remove the dependency array.",["6281"],"'report' is defined but never used.",["6282"],"React Hook useEffect has missing dependencies: 'dispatch', 'values.FromDate', and 'values.ToDate'. Either include them or remove the dependency array.",["6283"],["6284"],"'GST_3B_REPORT_API' is defined but never used.",["6285"],["6286"],["6287"],"React Hook useEffect has missing dependencies: 'btnMode', 'dispatch', 'fromdate', and 'todate'. Either include them or remove the dependency array.",["6288"],"'PartyLedgerReport_API' is defined but never used.",["6289"],["6290"],["6291"],"'pageId' is defined but never used.","'commonPageField' is defined but never used.","'commonPageFieldSuccess' is defined but never used.","'CWClaimBtnCss' is assigned a value but never used.",["6292"],["6293"],["6294"],"React Hook useEffect has missing dependencies: 'dispatch', 'history', and 'jsonBody'. Either include them or remove the dependency array.",["6295"],["6296"],"'deleteHandler' is assigned a value but never used.","'update' is defined but never used.","'history' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'MonthAndYearOnchange', 'dispatch', 'page_Id', and 'values.SelectedMonth'. Either include them or remove the dependency array.",["6297"],["6298"],["6299"],"Duplicate key 'resetSessionTimeout'.","React Hook useEffect has missing dependencies: 'dispatch' and 'sessionEndActivity'. Either include them or remove the dependency array.",["6300"],["6301"],"'editCreatedBy' is assigned a value but never used.",["6302"],["6303"],["6304"],["6305"],["6306"],["6307"],"React Hook useEffect has missing dependencies: 'TableArr' and 'dispatch'. Either include them or remove the dependency array.",["6308"],"React Hook useEffect has a missing dependency: 'commonPartyDropSelect'. Either include it or remove the dependency array.",["6309"],"'CarouselCaption' is defined but never used.","'Modal' is defined but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.",["6310"],["6311"],["6312"],"'PageLoadingSpinner' is defined but never used.","'convertDateTime_dmy' is defined but never used.","'C_DatePicker' is defined but never used.","React Hook useEffect has missing dependencies: 'dispatch' and 'history.location.pathname'. Either include them or remove the dependency array.",["6313"],"Imported JSX component C_TimePicker must be in PascalCase or SCREAMING_SNAKE_CASE","'getBaseUnit_ForDropDown' is defined but never used.","'getItemList' is defined but never used.","'get_Group_By_GroupType_ForDropDown' is defined but never used.","'SupplierOnPartyType_API_Success' is defined but never used.","'supplierListLoading' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'dispatch', 'hasShowModal', 'location.pathname', 'props.masterPath', and 'states'. Either include them or remove the dependency array.",["6314"],["6315"],"React Hook useEffect has missing dependencies: 'dataManpulationFunction', 'dispatch', and 'states'. Either include them or remove the dependency array.",["6316"],["6317"],["6318"],["6319"],["6320"],["6321"],"'companyListOptions' is assigned a value but never used.",["6322"],{"desc":"6323","fix":"6324"},{"desc":"6325","fix":"6326"},{"desc":"6327","fix":"6328"},{"desc":"6329","fix":"6330"},{"desc":"6331","fix":"6332"},{"desc":"6333","fix":"6334"},{"desc":"6335","fix":"6336"},{"desc":"6337","fix":"6338"},{"desc":"6339","fix":"6340"},{"desc":"6341","fix":"6342"},{"desc":"6333","fix":"6343"},{"desc":"6325","fix":"6344"},{"desc":"6345","fix":"6346"},{"desc":"6347","fix":"6348"},{"desc":"6349","fix":"6350"},{"desc":"6351","fix":"6352"},{"desc":"6353","fix":"6354"},{"desc":"6325","fix":"6355"},{"desc":"6325","fix":"6356"},{"desc":"6325","fix":"6357"},{"desc":"6358","fix":"6359"},{"desc":"6347","fix":"6360"},{"desc":"6361","fix":"6362"},{"desc":"6351","fix":"6363"},{"desc":"6353","fix":"6364"},{"desc":"6325","fix":"6365"},{"desc":"6325","fix":"6366"},{"desc":"6367","fix":"6368"},{"desc":"6345","fix":"6369"},{"desc":"6353","fix":"6370"},{"desc":"6347","fix":"6371"},{"desc":"6372","fix":"6373"},{"desc":"6358","fix":"6374"},{"desc":"6375","fix":"6376"},{"desc":"6377","fix":"6378"},{"desc":"6379","fix":"6380"},{"desc":"6381","fix":"6382"},{"desc":"6325","fix":"6383"},{"desc":"6325","fix":"6384"},{"desc":"6345","fix":"6385"},{"desc":"6347","fix":"6386"},{"desc":"6387","fix":"6388"},{"desc":"6351","fix":"6389"},{"desc":"6353","fix":"6390"},{"desc":"6358","fix":"6391"},{"desc":"6325","fix":"6392"},{"desc":"6393","fix":"6394"},{"desc":"6325","fix":"6395"},{"desc":"6377","fix":"6396"},{"desc":"6381","fix":"6397"},{"desc":"6325","fix":"6398"},{"desc":"6358","fix":"6399"},{"desc":"6347","fix":"6400"},{"desc":"6401","fix":"6402"},{"desc":"6351","fix":"6403"},{"desc":"6353","fix":"6404"},{"desc":"6325","fix":"6405"},{"desc":"6406","fix":"6407"},{"desc":"6325","fix":"6408"},{"desc":"6409","fix":"6410"},{"desc":"6411","fix":"6412"},{"desc":"6325","fix":"6413"},{"desc":"6414","fix":"6415"},{"desc":"6325","fix":"6416"},{"desc":"6345","fix":"6417"},{"desc":"6347","fix":"6418"},{"desc":"6349","fix":"6419"},{"desc":"6351","fix":"6420"},{"desc":"6353","fix":"6421"},{"desc":"6325","fix":"6422"},{"desc":"6423","fix":"6424"},{"desc":"6325","fix":"6425"},{"desc":"6325","fix":"6426"},{"desc":"6325","fix":"6427"},{"desc":"6345","fix":"6428"},{"desc":"6347","fix":"6429"},{"desc":"6349","fix":"6430"},{"desc":"6351","fix":"6431"},{"desc":"6353","fix":"6432"},{"desc":"6325","fix":"6433"},{"desc":"6325","fix":"6434"},{"desc":"6345","fix":"6435"},{"desc":"6347","fix":"6436"},{"desc":"6349","fix":"6437"},{"desc":"6351","fix":"6438"},{"desc":"6353","fix":"6439"},{"desc":"6325","fix":"6440"},{"desc":"6345","fix":"6441"},{"desc":"6347","fix":"6442"},{"desc":"6361","fix":"6443"},{"desc":"6351","fix":"6444"},{"desc":"6353","fix":"6445"},{"desc":"6325","fix":"6446"},{"desc":"6447","fix":"6448"},{"desc":"6325","fix":"6449"},{"desc":"6358","fix":"6450"},{"desc":"6347","fix":"6451"},{"desc":"6361","fix":"6452"},{"desc":"6351","fix":"6453"},{"desc":"6353","fix":"6454"},{"desc":"6325","fix":"6455"},{"desc":"6447","fix":"6456"},{"desc":"6325","fix":"6457"},{"desc":"6325","fix":"6458"},{"desc":"6358","fix":"6459"},{"desc":"6347","fix":"6460"},{"desc":"6361","fix":"6461"},{"desc":"6351","fix":"6462"},{"desc":"6353","fix":"6463"},{"desc":"6325","fix":"6464"},{"desc":"6358","fix":"6465"},{"desc":"6347","fix":"6466"},{"desc":"6361","fix":"6467"},{"desc":"6351","fix":"6468"},{"desc":"6353","fix":"6469"},{"desc":"6325","fix":"6470"},{"desc":"6358","fix":"6471"},{"desc":"6353","fix":"6472"},{"desc":"6473","fix":"6474"},{"desc":"6475","fix":"6476"},{"desc":"6361","fix":"6477"},{"desc":"6478","fix":"6479"},{"desc":"6325","fix":"6480"},{"desc":"6481","fix":"6482"},{"desc":"6393","fix":"6483"},{"desc":"6484","fix":"6485"},{"desc":"6486","fix":"6487"},{"desc":"6488","fix":"6489"},{"desc":"6490","fix":"6491"},{"desc":"6492","fix":"6493"},{"desc":"6325","fix":"6494"},{"desc":"6345","fix":"6495"},{"desc":"6347","fix":"6496"},{"desc":"6349","fix":"6497"},{"desc":"6351","fix":"6498"},{"desc":"6353","fix":"6499"},{"desc":"6488","fix":"6500"},{"desc":"6501","fix":"6502"},{"desc":"6490","fix":"6503"},{"desc":"6504","fix":"6505"},{"desc":"6325","fix":"6506"},{"desc":"6358","fix":"6507"},{"desc":"6353","fix":"6508"},{"desc":"6473","fix":"6509"},{"desc":"6475","fix":"6510"},{"desc":"6361","fix":"6511"},{"desc":"6325","fix":"6512"},{"desc":"6325","fix":"6513"},{"desc":"6325","fix":"6514"},{"desc":"6515","fix":"6516"},{"desc":"6347","fix":"6517"},{"desc":"6361","fix":"6518"},{"desc":"6351","fix":"6519"},{"desc":"6353","fix":"6520"},{"desc":"6325","fix":"6521"},{"desc":"6488","fix":"6522"},{"desc":"6501","fix":"6523"},{"desc":"6490","fix":"6524"},{"desc":"6525","fix":"6526"},{"desc":"6527","fix":"6528"},{"desc":"6529","fix":"6530"},{"desc":"6393","fix":"6531"},{"desc":"6532","fix":"6533"},{"desc":"6325","fix":"6534"},{"desc":"6358","fix":"6535"},{"desc":"6347","fix":"6536"},{"desc":"6377","fix":"6537"},{"desc":"6381","fix":"6538"},{"desc":"6353","fix":"6539"},{"desc":"6540","fix":"6541"},{"desc":"6325","fix":"6542"},{"desc":"6358","fix":"6543"},{"desc":"6353","fix":"6544"},{"desc":"6473","fix":"6545"},{"desc":"6361","fix":"6546"},{"desc":"6475","fix":"6547"},{"desc":"6548","fix":"6549"},{"desc":"6550","fix":"6551"},{"desc":"6552","fix":"6553"},{"desc":"6554","fix":"6555"},{"desc":"6556","fix":"6557"},{"desc":"6558","fix":"6559"},{"desc":"6353","fix":"6560"},{"desc":"6561","fix":"6562"},{"desc":"6563","fix":"6564"},{"desc":"6565","fix":"6566"},{"desc":"6567","fix":"6568"},{"desc":"6569","fix":"6570"},{"desc":"6571","fix":"6572"},{"desc":"6573","fix":"6574"},[49289,49304],"\"VDC-PO Type\"",[50100,50115],{"desc":"6575","fix":"6576"},{"desc":"6577","fix":"6578"},{"desc":"6353","fix":"6579"},{"desc":"6580","fix":"6581"},{"desc":"6582","fix":"6583"},{"desc":"6571","fix":"6584"},{"desc":"6585","fix":"6586"},{"desc":"6587","fix":"6588"},{"desc":"6567","fix":"6589"},{"desc":"6590","fix":"6591"},{"desc":"6592","fix":"6593"},{"desc":"6594","fix":"6595"},{"desc":"6596","fix":"6597"},{"desc":"6598","fix":"6599"},{"desc":"6600","fix":"6601"},{"desc":"6600","fix":"6602"},{"desc":"6600","fix":"6603"},{"desc":"6325","fix":"6604"},{"desc":"6325","fix":"6605"},{"desc":"6358","fix":"6606"},{"desc":"6347","fix":"6607"},{"desc":"6361","fix":"6608"},{"desc":"6351","fix":"6609"},{"desc":"6353","fix":"6610"},{"desc":"6611","fix":"6612"},{"desc":"6325","fix":"6613"},{"desc":"6325","fix":"6614"},{"desc":"6358","fix":"6615"},{"desc":"6347","fix":"6616"},{"desc":"6361","fix":"6617"},{"desc":"6351","fix":"6618"},{"desc":"6353","fix":"6619"},{"desc":"6620","fix":"6621"},{"desc":"6622","fix":"6623"},{"desc":"6325","fix":"6624"},{"desc":"6325","fix":"6625"},{"desc":"6358","fix":"6626"},{"desc":"6347","fix":"6627"},{"desc":"6325","fix":"6628"},{"desc":"6361","fix":"6629"},{"desc":"6351","fix":"6630"},{"desc":"6353","fix":"6631"},{"desc":"6325","fix":"6632"},{"desc":"6552","fix":"6633"},{"desc":"6358","fix":"6634"},{"desc":"6635","fix":"6636"},{"desc":"6381","fix":"6637"},{"desc":"6353","fix":"6638"},{"desc":"6639","fix":"6640"},{"desc":"6641","fix":"6642"},{"desc":"6575","fix":"6643"},{"desc":"6644","fix":"6645"},{"desc":"6646","fix":"6647"},{"desc":"6648","fix":"6649"},{"desc":"6650","fix":"6651"},{"desc":"6652","fix":"6653"},{"desc":"6654","fix":"6655"},{"desc":"6358","fix":"6656"},{"desc":"6657","fix":"6658"},{"desc":"6659","fix":"6660"},{"desc":"6661","fix":"6662"},{"desc":"6663","fix":"6664"},{"desc":"6325","fix":"6665"},{"desc":"6393","fix":"6666"},{"desc":"6358","fix":"6667"},{"desc":"6598","fix":"6668"},{"desc":"6381","fix":"6669"},{"desc":"6353","fix":"6670"},{"desc":"6325","fix":"6671"},{"desc":"6358","fix":"6672"},{"desc":"6673","fix":"6674"},{"desc":"6377","fix":"6675"},{"desc":"6381","fix":"6676"},{"desc":"6353","fix":"6677"},{"desc":"6325","fix":"6678"},{"desc":"6358","fix":"6679"},{"desc":"6680","fix":"6681"},{"desc":"6682","fix":"6683"},{"desc":"6377","fix":"6684"},{"desc":"6381","fix":"6685"},{"desc":"6353","fix":"6686"},{"desc":"6687","fix":"6688"},{"desc":"6689","fix":"6690"},{"desc":"6325","fix":"6691"},{"desc":"6358","fix":"6692"},{"desc":"6347","fix":"6693"},{"desc":"6377","fix":"6694"},{"desc":"6695","fix":"6696"},{"desc":"6353","fix":"6697"},{"desc":"6325","fix":"6698"},{"desc":"6575","fix":"6699"},{"desc":"6689","fix":"6700"},{"desc":"6701","fix":"6702"},{"desc":"6447","fix":"6703"},{"desc":"6575","fix":"6704"},{"desc":"6705","fix":"6706"},{"desc":"6575","fix":"6707"},{"desc":"6708","fix":"6709"},{"desc":"6325","fix":"6710"},{"desc":"6515","fix":"6711"},{"desc":"6377","fix":"6712"},{"desc":"6353","fix":"6713"},{"desc":"6714","fix":"6715"},{"desc":"6393","fix":"6716"},{"desc":"6325","fix":"6717"},{"desc":"6358","fix":"6718"},{"desc":"6347","fix":"6719"},{"desc":"6377","fix":"6720"},{"desc":"6721","fix":"6722"},{"desc":"6353","fix":"6723"},{"desc":"6358","fix":"6724"},{"desc":"6725","fix":"6726"},{"desc":"6727","fix":"6728"},{"desc":"6695","fix":"6729"},{"desc":"6325","fix":"6730"},{"desc":"6353","fix":"6731"},{"desc":"6353","fix":"6732"},{"desc":"6325","fix":"6733"},{"desc":"6734","fix":"6735"},{"desc":"6325","fix":"6736"},{"desc":"6358","fix":"6737"},{"desc":"6347","fix":"6738"},{"desc":"6361","fix":"6739"},{"desc":"6351","fix":"6740"},{"desc":"6353","fix":"6741"},{"desc":"6325","fix":"6742"},{"desc":"6358","fix":"6743"},{"desc":"6347","fix":"6744"},{"desc":"6361","fix":"6745"},{"desc":"6351","fix":"6746"},{"desc":"6353","fix":"6747"},{"desc":"6447","fix":"6748"},"no-global-assign","no-unsafe-negation",{"desc":"6325","fix":"6749"},{"desc":"6358","fix":"6750"},{"desc":"6751","fix":"6752"},{"desc":"6353","fix":"6753"},{"desc":"6754","fix":"6755"},{"desc":"6325","fix":"6756"},{"desc":"6358","fix":"6757"},{"desc":"6758","fix":"6759"},{"desc":"6760","fix":"6761"},{"desc":"6353","fix":"6762"},{"desc":"6763","fix":"6764"},{"desc":"6765","fix":"6766"},{"desc":"6767","fix":"6768"},{"desc":"6769","fix":"6770"},{"desc":"6771","fix":"6772"},{"desc":"6773","fix":"6774"},{"desc":"6775","fix":"6776"},{"desc":"6777","fix":"6778"},{"desc":"6779","fix":"6780"},{"desc":"6767","fix":"6781"},{"desc":"6782","fix":"6783"},{"desc":"6784","fix":"6785"},{"desc":"6786","fix":"6787"},{"desc":"6775","fix":"6788"},{"desc":"6325","fix":"6789"},{"desc":"6358","fix":"6790"},{"desc":"6325","fix":"6791"},{"desc":"6325","fix":"6792"},{"desc":"6401","fix":"6793"},{"desc":"6754","fix":"6794"},{"desc":"6353","fix":"6795"},{"messageId":"6796","fix":"6797","desc":"6798"},{"messageId":"6799","fix":"6800","desc":"6801"},{"messageId":"6796","fix":"6802","desc":"6798"},{"messageId":"6799","fix":"6803","desc":"6801"},{"desc":"6325","fix":"6804"},{"desc":"6515","fix":"6805"},{"desc":"6377","fix":"6806"},{"desc":"6353","fix":"6807"},{"desc":"6808","fix":"6809"},{"desc":"6810","fix":"6811"},{"desc":"6393","fix":"6812"},{"desc":"6325","fix":"6813"},{"desc":"6353","fix":"6814"},{"desc":"6358","fix":"6815"},{"desc":"6361","fix":"6816"},{"desc":"6817","fix":"6818"},{"desc":"6325","fix":"6819"},{"desc":"6325","fix":"6820"},{"desc":"6325","fix":"6821"},{"desc":"6325","fix":"6822"},{"desc":"6353","fix":"6823"},{"desc":"6358","fix":"6824"},{"desc":"6825","fix":"6826"},{"desc":"6827","fix":"6828"},{"desc":"6361","fix":"6829"},{"desc":"6830","fix":"6831"},{"desc":"6734","fix":"6832"},{"desc":"6325","fix":"6833"},{"desc":"6834","fix":"6835"},{"desc":"6836","fix":"6837"},{"desc":"6325","fix":"6838"},{"desc":"6325","fix":"6839"},{"desc":"6325","fix":"6840"},{"desc":"6353","fix":"6841"},{"desc":"6358","fix":"6842"},{"desc":"6361","fix":"6843"},{"desc":"6325","fix":"6844"},{"desc":"6325","fix":"6845"},{"desc":"6325","fix":"6846"},{"desc":"6834","fix":"6847"},{"desc":"6577","fix":"6848"},{"desc":"6849","fix":"6850"},{"desc":"6325","fix":"6851"},{"desc":"6358","fix":"6852"},{"desc":"6347","fix":"6853"},{"desc":"6361","fix":"6854"},{"desc":"6351","fix":"6855"},{"desc":"6353","fix":"6856"},{"desc":"6325","fix":"6857"},{"desc":"6325","fix":"6858"},{"desc":"6859","fix":"6860"},{"desc":"6377","fix":"6861"},{"desc":"6862","fix":"6863"},{"desc":"6325","fix":"6864"},{"desc":"6377","fix":"6865"},{"desc":"6358","fix":"6866"},{"desc":"6577","fix":"6867"},{"desc":"6325","fix":"6868"},{"desc":"6325","fix":"6869"},{"desc":"6325","fix":"6870"},{"desc":"6871","fix":"6872"},{"desc":"6873","fix":"6874"},{"desc":"6875","fix":"6876"},{"desc":"6325","fix":"6877"},{"desc":"6325","fix":"6878"},{"desc":"6358","fix":"6879"},{"desc":"6347","fix":"6880"},{"desc":"6361","fix":"6881"},{"desc":"6381","fix":"6882"},{"desc":"6353","fix":"6883"},{"desc":"6884","fix":"6885"},{"desc":"6548","fix":"6886"},{"desc":"6358","fix":"6887"},{"desc":"6347","fix":"6888"},{"desc":"6889","fix":"6890"},{"desc":"6353","fix":"6891"},{"desc":"6325","fix":"6892"},{"desc":"6325","fix":"6893"},{"desc":"6325","fix":"6894"},{"desc":"6895","fix":"6896"},{"desc":"6577","fix":"6897"},{"desc":"6898","fix":"6899"},{"desc":"6353","fix":"6900"},{"desc":"6901","fix":"6902"},{"desc":"6903","fix":"6904"},{"desc":"6353","fix":"6905"},{"desc":"6353","fix":"6906"},{"desc":"6907","fix":"6908"},{"desc":"6515","fix":"6909"},{"desc":"6577","fix":"6910"},{"desc":"6911","fix":"6912"},{"desc":"6548","fix":"6913"},{"desc":"6914","fix":"6915"},{"desc":"6916","fix":"6917"},{"desc":"6325","fix":"6918"},{"desc":"6358","fix":"6919"},{"desc":"6898","fix":"6920"},{"desc":"6898","fix":"6921"},{"desc":"6580","fix":"6922"},{"desc":"6923","fix":"6924"},{"desc":"6325","fix":"6925"},{"desc":"6358","fix":"6926"},{"desc":"6927","fix":"6928"},{"desc":"6325","fix":"6929"},{"desc":"6358","fix":"6930"},{"desc":"6345","fix":"6931"},{"desc":"6347","fix":"6932"},{"desc":"6349","fix":"6933"},{"desc":"6353","fix":"6934"},{"desc":"6935","fix":"6936"},{"desc":"6358","fix":"6937"},{"desc":"6657","fix":"6938"},{"desc":"6939","fix":"6940"},{"desc":"6935","fix":"6941"},{"desc":"6358","fix":"6942"},{"desc":"6943","fix":"6944"},{"desc":"6935","fix":"6945"},{"desc":"6358","fix":"6946"},{"desc":"6353","fix":"6947"},{"desc":"6657","fix":"6948"},{"desc":"6949","fix":"6950"},{"desc":"6325","fix":"6951"},{"desc":"6358","fix":"6952"},{"desc":"6353","fix":"6953"},{"desc":"6954","fix":"6955"},{"desc":"6657","fix":"6956"},{"desc":"6325","fix":"6957"},{"desc":"6325","fix":"6958"},{"desc":"6447","fix":"6959"},{"desc":"6358","fix":"6960"},{"desc":"6353","fix":"6961"},{"desc":"6657","fix":"6962"},{"desc":"6325","fix":"6963"},{"desc":"6358","fix":"6964"},{"desc":"6325","fix":"6965"},{"desc":"6966","fix":"6967"},{"desc":"6968","fix":"6969"},{"desc":"6325","fix":"6970"},{"desc":"6515","fix":"6971"},{"desc":"6347","fix":"6972"},{"desc":"6361","fix":"6973"},{"desc":"6657","fix":"6974"},{"desc":"6351","fix":"6975"},{"desc":"6353","fix":"6976"},{"desc":"6325","fix":"6977"},{"desc":"6358","fix":"6978"},{"desc":"6353","fix":"6979"},{"desc":"6657","fix":"6980"},{"desc":"6358","fix":"6981"},{"desc":"6577","fix":"6982"},{"desc":"6763","fix":"6983"},{"desc":"6358","fix":"6984"},{"desc":"6325","fix":"6985"},{"desc":"6986","fix":"6987"},{"desc":"6575","fix":"6988"},{"desc":"6989","fix":"6990"},{"desc":"6577","fix":"6991"},{"desc":"6992","fix":"6993"},{"desc":"6325","fix":"6994"},{"desc":"6898","fix":"6995"},{"desc":"6358","fix":"6996"},{"desc":"6325","fix":"6997"},{"desc":"6353","fix":"6998"},{"desc":"6361","fix":"6999"},{"desc":"7000","fix":"7001"},{"desc":"7002","fix":"7003"},{"desc":"6325","fix":"7004"},{"desc":"7005","fix":"7006"},{"desc":"6358","fix":"7007"},{"desc":"6849","fix":"7008"},{"desc":"6325","fix":"7009"},{"desc":"6898","fix":"7010"},{"desc":"7011","fix":"7012"},{"desc":"6358","fix":"7013"},{"desc":"6361","fix":"7014"},{"desc":"6353","fix":"7015"},{"desc":"6661","fix":"7016"},{"desc":"7017","fix":"7018"},{"desc":"7019","fix":"7020"},{"desc":"6325","fix":"7021"},{"desc":"6552","fix":"7022"},{"desc":"6358","fix":"7023"},{"desc":"6353","fix":"7024"},{"desc":"6361","fix":"7025"},{"desc":"7026","fix":"7027"},{"desc":"7028","fix":"7029"},{"desc":"6325","fix":"7030"},{"desc":"6358","fix":"7031"},{"desc":"6325","fix":"7032"},{"desc":"6986","fix":"7033"},{"desc":"6358","fix":"7034"},{"desc":"6325","fix":"7035"},{"desc":"7036","fix":"7037"},{"desc":"6447","fix":"7038"},{"desc":"7039","fix":"7040"},{"desc":"6325","fix":"7041"},{"desc":"6898","fix":"7042"},{"desc":"6358","fix":"7043"},{"desc":"6353","fix":"7044"},{"desc":"7045","fix":"7046"},{"desc":"6325","fix":"7047"},{"desc":"6898","fix":"7048"},{"desc":"6358","fix":"7049"},{"desc":"6325","fix":"7050"},{"desc":"6353","fix":"7051"},{"desc":"6361","fix":"7052"},{"desc":"7000","fix":"7053"},{"desc":"7002","fix":"7054"},{"desc":"6358","fix":"7055"},{"desc":"6325","fix":"7056"},{"desc":"7057","fix":"7058"},{"desc":"7059","fix":"7060"},{"desc":"7061","fix":"7062"},{"desc":"6358","fix":"7063"},{"desc":"7064","fix":"7065"},{"desc":"6763","fix":"7066"},{"desc":"7067","fix":"7068"},{"desc":"7069","fix":"7070"},{"desc":"7071","fix":"7072"},{"desc":"7073","fix":"7074"},{"desc":"6358","fix":"7075"},{"desc":"6325","fix":"7076"},{"desc":"7077","fix":"7078"},{"desc":"6358","fix":"7079"},{"desc":"6325","fix":"7080"},{"desc":"6986","fix":"7081"},{"desc":"6577","fix":"7082"},{"desc":"6358","fix":"7083"},{"desc":"6325","fix":"7084"},{"desc":"7085","fix":"7086"},{"desc":"6325","fix":"7087"},{"desc":"6358","fix":"7088"},{"desc":"6325","fix":"7089"},{"desc":"7090","fix":"7091"},{"desc":"6358","fix":"7092"},{"desc":"7093","fix":"7094"},{"desc":"6325","fix":"7095"},{"desc":"6325","fix":"7096"},{"desc":"6358","fix":"7097"},{"desc":"7098","fix":"7099"},{"desc":"7100","fix":"7101"},{"desc":"6358","fix":"7102"},{"desc":"6325","fix":"7103"},{"desc":"6763","fix":"7104"},{"desc":"6358","fix":"7105"},{"desc":"7064","fix":"7106"},{"desc":"6763","fix":"7107"},{"desc":"7108","fix":"7109"},{"desc":"7069","fix":"7110"},{"desc":"7111","fix":"7112"},{"desc":"6763","fix":"7113"},{"desc":"7069","fix":"7114"},{"desc":"7115","fix":"7116"},{"desc":"7117","fix":"7118"},{"desc":"6548","fix":"7119"},{"desc":"6358","fix":"7120"},{"desc":"6325","fix":"7121"},{"desc":"6347","fix":"7122"},{"desc":"6353","fix":"7123"},{"desc":"6889","fix":"7124"},{"desc":"7125","fix":"7126"},{"desc":"7127","fix":"7128"},{"desc":"6577","fix":"7129"},{"desc":"6358","fix":"7130"},{"desc":"6657","fix":"7131"},{"desc":"7132","fix":"7133"},{"desc":"7134","fix":"7135"},{"desc":"6325","fix":"7136"},{"desc":"7137","fix":"7138"},{"desc":"6325","fix":"7139"},{"desc":"6353","fix":"7140"},{"desc":"6358","fix":"7141"},{"desc":"6325","fix":"7142"},{"desc":"6325","fix":"7143"},{"desc":"6361","fix":"7144"},"Update the dependencies array to be: [layoutMode, dispatch, changelayoutMode, layoutType]",{"range":"7145","text":"7146"},"Update the dependencies array to be: [dispatch]",{"range":"7147","text":"7148"},"Update the dependencies array to be: [history, session.active]",{"range":"7149","text":"7150"},"Update the dependencies array to be: [dispatch, loginSuccess, updateSessionActivity]",{"range":"7151","text":"7152"},"Update the dependencies array to be: [dispatch, divisionDropdown_redux, history, session.active]",{"range":"7153","text":"7154"},"Update the dependencies array to be: [divisionDropdown_redux.length, history, userAccess]",{"range":"7155","text":"7156"},"Update the dependencies array to be: [dispatch, props.history, updateSessionActivity]",{"range":"7157","text":"7158"},"Update the dependencies array to be: [sendPasswordMsg_reducx, sendPasswordError_reducx, dispatch]",{"range":"7159","text":"7160"},"Update the dependencies array to be: [dispatch, sendOTPSuccessMsg_redux, sendOtpMegError_reducx]",{"range":"7161","text":"7162"},"Update the dependencies array to be: [dispatch, divisionDropdown_redux.length]",{"range":"7163","text":"7164"},{"range":"7165","text":"7156"},{"range":"7166","text":"7148"},"Update the dependencies array to be: [dispatch, hasShowModal, location.pathname, props.isdropdown, props.masterPath, props.pageMode, userAccess]",{"range":"7167","text":"7168"},"Update the dependencies array to be: [dispatch, hasShowModal, hasShowloction, location.editValue, location.pageMode, props.editValue, props.pageMode, state]",{"range":"7169","text":"7170"},"Update the dependencies array to be: [dispatch, fileds, history, pageMode, postMsg, props, state]",{"range":"7171","text":"7172"},"Update the dependencies array to be: [updateMsg, modalCss, history, fileds, state, dispatch]",{"range":"7173","text":"7174"},"Update the dependencies array to be: [pageField, state]",{"range":"7175","text":"7176"},{"range":"7177","text":"7148"},{"range":"7178","text":"7148"},{"range":"7179","text":"7148"},"Update the dependencies array to be: [dispatch, hasShowModal, location.pathname, props.masterPath, userAccess]",{"range":"7180","text":"7181"},{"range":"7182","text":"7170"},"Update the dependencies array to be: [dispatch, fileds, history, pageMode, postMsg, state]",{"range":"7183","text":"7184"},{"range":"7185","text":"7174"},{"range":"7186","text":"7176"},{"range":"7187","text":"7148"},{"range":"7188","text":"7148"},"Update the dependencies array to be: [cPassword, isCPassword, password]",{"range":"7189","text":"7190"},{"range":"7191","text":"7168"},{"range":"7192","text":"7176"},{"range":"7193","text":"7170"},"Update the dependencies array to be: [dispatch, history, pageMode, postMsg.Message, postMsg.Status, postMsg.StatusCode]",{"range":"7194","text":"7195"},{"range":"7196","text":"7181"},"Update the dependencies array to be: [dispatch, fieldValidationsALLType, hasShowModal, hasShowloction, location.editValue, location.pageMode, props.editValue, props.pageMode]",{"range":"7197","text":"7198"},"Update the dependencies array to be: [dispatch, history, pageMode, postMsg]",{"range":"7199","text":"7200"},"Update the dependencies array to be: [dispatch, modulePostAPIResponse, tog_center]",{"range":"7201","text":"7202"},"Update the dependencies array to be: [updateMsg, modalCss, history, dispatch]",{"range":"7203","text":"7204"},{"range":"7205","text":"7148"},{"range":"7206","text":"7148"},{"range":"7207","text":"7168"},{"range":"7208","text":"7170"},"Update the dependencies array to be: [dispatch, fileds, history, postMsg, props.pageMode, state]",{"range":"7209","text":"7210"},{"range":"7211","text":"7174"},{"range":"7212","text":"7176"},{"range":"7213","text":"7181"},{"range":"7214","text":"7148"},"Update the dependencies array to be: [dispatch, hasShowModal, hasShowloction, location.editValue, location.pageMode, props.editValue, props.pageMode]",{"range":"7215","text":"7216"},{"range":"7217","text":"7148"},{"range":"7218","text":"7200"},{"range":"7219","text":"7204"},{"range":"7220","text":"7148"},{"range":"7221","text":"7181"},{"range":"7222","text":"7170"},"Update the dependencies array to be: [dispatch, fileds, history, pageMode, postMsg.Message, postMsg.Status, postMsg.StatusCode, state]",{"range":"7223","text":"7224"},{"range":"7225","text":"7174"},{"range":"7226","text":"7176"},{"range":"7227","text":"7148"},"Update the dependencies array to be: [editDataGatingFromList, history]",{"range":"7228","text":"7229"},{"range":"7230","text":"7148"},"Update the dependencies array to be: [dispatch, location.pathname, userAccess]",{"range":"7231","text":"7232"},"Update the dependencies array to be: [dispatch, history.location.state]",{"range":"7233","text":"7234"},{"range":"7235","text":"7148"},"Update the dependencies array to be: [dispatch, history, postMsg]",{"range":"7236","text":"7237"},{"range":"7238","text":"7148"},{"range":"7239","text":"7168"},{"range":"7240","text":"7170"},{"range":"7241","text":"7172"},{"range":"7242","text":"7174"},{"range":"7243","text":"7176"},{"range":"7244","text":"7148"},"Update the dependencies array to be: [dispatch, postMsgCopy, tog_center]",{"range":"7245","text":"7246"},{"range":"7247","text":"7148"},{"range":"7248","text":"7148"},{"range":"7249","text":"7148"},{"range":"7250","text":"7168"},{"range":"7251","text":"7170"},{"range":"7252","text":"7172"},{"range":"7253","text":"7174"},{"range":"7254","text":"7176"},{"range":"7255","text":"7148"},{"range":"7256","text":"7148"},{"range":"7257","text":"7168"},{"range":"7258","text":"7170"},{"range":"7259","text":"7172"},{"range":"7260","text":"7174"},{"range":"7261","text":"7176"},{"range":"7262","text":"7148"},{"range":"7263","text":"7168"},{"range":"7264","text":"7170"},{"range":"7265","text":"7184"},{"range":"7266","text":"7174"},{"range":"7267","text":"7176"},{"range":"7268","text":"7148"},"Update the dependencies array to be: [dispatch, goButtonHandler]",{"range":"7269","text":"7270"},{"range":"7271","text":"7148"},{"range":"7272","text":"7181"},{"range":"7273","text":"7170"},{"range":"7274","text":"7184"},{"range":"7275","text":"7174"},{"range":"7276","text":"7176"},{"range":"7277","text":"7148"},{"range":"7278","text":"7270"},{"range":"7279","text":"7148"},{"range":"7280","text":"7148"},{"range":"7281","text":"7181"},{"range":"7282","text":"7170"},{"range":"7283","text":"7184"},{"range":"7284","text":"7174"},{"range":"7285","text":"7176"},{"range":"7286","text":"7148"},{"range":"7287","text":"7181"},{"range":"7288","text":"7170"},{"range":"7289","text":"7184"},{"range":"7290","text":"7174"},{"range":"7291","text":"7176"},{"range":"7292","text":"7148"},{"range":"7293","text":"7181"},{"range":"7294","text":"7176"},"Update the dependencies array to be: [dispatch, hasShowModal, hasShowloction, location.editValue, location.page_Mode, props.editValue, props.pageMode, state]",{"range":"7295","text":"7296"},"Update the dependencies array to be: [GoButton_Handler, deleteMessage, dispatch]",{"range":"7297","text":"7298"},{"range":"7299","text":"7184"},"Update the dependencies array to be: [dispatch, editDataGatingFromList, history.location.pathname, props.relatatedPage, userAccess]",{"range":"7300","text":"7301"},{"range":"7302","text":"7148"},"Update the dependencies array to be: [PostAPIResponse, dispatch, partyType_dropdown_Select.value]",{"range":"7303","text":"7304"},{"range":"7305","text":"7216"},"Update the dependencies array to be: [deleteAPIResponse, dispatch, partyType_dropdown_Select.value]",{"range":"7306","text":"7307"},"Update the dependencies array to be: [dispatch, partyType_dropdown_Select.value, updateMessage]",{"range":"7308","text":"7309"},"Update the dependencies array to be: [dispatch, hasPagePath, page_Id]",{"range":"7310","text":"7311"},"Update the dependencies array to be: [deleteMsg, dispatch]",{"range":"7312","text":"7313"},"Update the dependencies array to be: [MRPGoButton, dispatch, history]",{"range":"7314","text":"7315"},{"range":"7316","text":"7148"},{"range":"7317","text":"7168"},{"range":"7318","text":"7170"},{"range":"7319","text":"7172"},{"range":"7320","text":"7174"},{"range":"7321","text":"7176"},{"range":"7322","text":"7311"},"Update the dependencies array to be: [page_Id, userAccess]",{"range":"7323","text":"7324"},{"range":"7325","text":"7313"},"Update the dependencies array to be: [MarginGoButton, dispatch, history]",{"range":"7326","text":"7327"},{"range":"7328","text":"7148"},{"range":"7329","text":"7181"},{"range":"7330","text":"7176"},{"range":"7331","text":"7296"},{"range":"7332","text":"7298"},{"range":"7333","text":"7184"},{"range":"7334","text":"7148"},{"range":"7335","text":"7148"},{"range":"7336","text":"7148"},"Update the dependencies array to be: [dispatch, props, userAccess]",{"range":"7337","text":"7338"},{"range":"7339","text":"7170"},{"range":"7340","text":"7184"},{"range":"7341","text":"7174"},{"range":"7342","text":"7176"},{"range":"7343","text":"7148"},{"range":"7344","text":"7311"},{"range":"7345","text":"7324"},{"range":"7346","text":"7313"},"Update the dependencies array to be: [GSTGoButton, dispatch, history]",{"range":"7347","text":"7348"},"Update the dependencies array to be: [dispatch, goButtonHandler, hasShowModal, hasShowloction, page_id]",{"range":"7349","text":"7350"},"Update the dependencies array to be: [dispatch, hasShowModal, location.pathname, props.isAssing, props.masterPath, userAccess]",{"range":"7351","text":"7352"},{"range":"7353","text":"7216"},"Update the dependencies array to be: [dispatch, pageMode, postMsg, props]",{"range":"7354","text":"7355"},{"range":"7356","text":"7148"},{"range":"7357","text":"7181"},{"range":"7358","text":"7170"},{"range":"7359","text":"7200"},{"range":"7360","text":"7204"},{"range":"7361","text":"7176"},"Update the dependencies array to be: [PartySubParty, values.PartyName.value]",{"range":"7362","text":"7363"},{"range":"7364","text":"7148"},{"range":"7365","text":"7181"},{"range":"7366","text":"7176"},{"range":"7367","text":"7296"},{"range":"7368","text":"7184"},{"range":"7369","text":"7298"},"Update the dependencies array to be: [dispatch, page_id]",{"range":"7370","text":"7371"},"Update the dependencies array to be: [dispatch, otherloginAccss, props, userAccess]",{"range":"7372","text":"7373"},"Update the dependencies array to be: [commonPartyDropSelect, dispatch, subPageMode]",{"range":"7374","text":"7375"},"Update the dependencies array to be: [dispatch, hasShowModal, hasShowloction, location.editValue, location.pageMode, props.editValue, props.pageMode, subPageMode]",{"range":"7376","text":"7377"},"Update the dependencies array to be: [commonPartyDropSelect.value, dispatch, history, listPath, orderdate, pageMode, postMsg, subPageMode, supplierSelect]",{"range":"7378","text":"7379"},"Update the dependencies array to be: [dispatch, history, listPath, modalCss, updateMsg]",{"range":"7380","text":"7381"},{"range":"7382","text":"7176"},"Update the dependencies array to be: [dispatch, goBtnOrderdata, selecedItemWiseOrder]",{"range":"7383","text":"7384"},"Update the dependencies array to be: [hasShowModal, hasShowloction, supplierAddress]",{"range":"7385","text":"7386"},"Update the dependencies array to be: [hasShowModal, hasShowloction, orderType]",{"range":"7387","text":"7388"},"Update the dependencies array to be: [approvalDetail, dispatch]",{"range":"7389","text":"7390"},"Update the dependencies array to be: [dispatch, history, listPath, orderApprovalMsg]",{"range":"7391","text":"7392"},"Update the dependencies array to be: [gobutton_Add_invoice, history]",{"range":"7393","text":"7394"},"Update the dependencies array to be: [changeAllDiscount, discountValueAll, discountTypeAll.value, orderItemTable, itemWise_CalculationFunc]",{"range":"7395","text":"7396"},"Update the dependencies array to be: [dispatch, goButtonHandler, subPageMode]",{"range":"7397","text":"7398"},"Update the dependencies array to be: [dispatch, subPageMode]",{"range":"7399","text":"7400"},{"range":"7401","text":"7176"},"Update the dependencies array to be: [GRNitem, history]",{"range":"7402","text":"7403"},"Update the dependencies array to be: [history, makeIBInvoice]",{"range":"7404","text":"7405"},{"range":"7406","text":"7394"},"Update the dependencies array to be: [dispatch, goButtonHandler, orderApprovalMsg.Status, orderConfirmMsg]",{"range":"7407","text":"7408"},"Update the dependencies array to be: [dispatch, goButtonHandler, orderApprovalMsg]",{"range":"7409","text":"7410"},{"range":"7411","text":"7390"},"Update the dependencies array to be: [dispatch, goButtonHandler, unhideMsg]",{"range":"7412","text":"7413"},"Update the dependencies array to be: [dispatch, history, roleAccesssForSidbarError]",{"range":"7414","text":"7415"},"Update the dependencies array to be: [RoleAccessUpdateData.length, dispatch]",{"range":"7416","text":"7417"},"Update the dependencies array to be: [RoleAccessUpdateData, activateParentDropdown, props.location.pathname]",{"range":"7418","text":"7419"},"Update the dependencies array to be: [dispatch, fileds, postMsg, state]",{"range":"7420","text":"7421"},"Update the dependencies array to be: [deleteMsg, dispatch, props]",{"range":"7422","text":"7423"},{"range":"7424","text":"7423"},{"range":"7425","text":"7423"},{"range":"7426","text":"7148"},{"range":"7427","text":"7148"},{"range":"7428","text":"7181"},{"range":"7429","text":"7170"},{"range":"7430","text":"7184"},{"range":"7431","text":"7174"},{"range":"7432","text":"7176"},"Update the dependencies array to be: [addRowHandler, dispatch, imageTable.length]",{"range":"7433","text":"7434"},{"range":"7435","text":"7148"},{"range":"7436","text":"7148"},{"range":"7437","text":"7181"},{"range":"7438","text":"7170"},{"range":"7439","text":"7184"},{"range":"7440","text":"7174"},{"range":"7441","text":"7176"},"Update the dependencies array to be: [dispatch, history.location.pathname]",{"range":"7442","text":"7443"},"Update the dependencies array to be: [defaultDownBtnData, downBtnData]",{"range":"7444","text":"7445"},{"range":"7446","text":"7148"},{"range":"7447","text":"7148"},{"range":"7448","text":"7181"},{"range":"7449","text":"7170"},{"range":"7450","text":"7148"},{"range":"7451","text":"7184"},{"range":"7452","text":"7174"},{"range":"7453","text":"7176"},{"range":"7454","text":"7148"},{"range":"7455","text":"7375"},{"range":"7456","text":"7181"},"Update the dependencies array to be: [dispatch, history, postMsg, subPageMode, systemSetting.AutoEInvoice, systemSetting.EInvoiceApplicable]",{"range":"7457","text":"7458"},{"range":"7459","text":"7204"},{"range":"7460","text":"7176"},"Update the dependencies array to be: [dispatch, makeIBInvoice]",{"range":"7461","text":"7462"},"Update the dependencies array to be: [dispatch, gobutton_Add, totalAmountCalcuationFunc]",{"range":"7463","text":"7464"},{"range":"7465","text":"7398"},"Update the dependencies array to be: [Update_Vehicle_Invoice, dispatch, goButtonHandler]",{"range":"7466","text":"7467"},"Update the dependencies array to be: [dispatch, sendToScmMsg]",{"range":"7468","text":"7469"},"Update the dependencies array to be: [Uploaded_EInvoice, dispatch, goButtonHandler]",{"range":"7470","text":"7471"},"Update the dependencies array to be: [Uploaded_EwayBill, dispatch, goButtonHandler]",{"range":"7472","text":"7473"},"Update the dependencies array to be: [Cancel_EInvoice, dispatch, goButtonHandler]",{"range":"7474","text":"7475"},"Update the dependencies array to be: [Cancel_EwayBill, dispatch, goButtonHandler]",{"range":"7476","text":"7477"},{"range":"7478","text":"7181"},"Update the dependencies array to be: [dispatch, postMsg]",{"range":"7479","text":"7480"},"Update the dependencies array to be: [dispatch, goButtonHandler, page_Id, subPageMode]",{"range":"7481","text":"7482"},"Update the dependencies array to be: [dispatch, goButtonHandler, page_Id]",{"range":"7483","text":"7484"},"Update the dependencies array to be: [history, produtionMake]",{"range":"7485","text":"7486"},{"range":"7487","text":"7148"},{"range":"7488","text":"7216"},{"range":"7489","text":"7181"},{"range":"7490","text":"7421"},{"range":"7491","text":"7204"},{"range":"7492","text":"7176"},{"range":"7493","text":"7148"},{"range":"7494","text":"7181"},"Update the dependencies array to be: [dispatch, makeProductionReIssue]",{"range":"7495","text":"7496"},{"range":"7497","text":"7200"},{"range":"7498","text":"7204"},{"range":"7499","text":"7176"},{"range":"7500","text":"7148"},{"range":"7501","text":"7181"},"Update the dependencies array to be: [GoButton, currentDate_ymd]",{"range":"7502","text":"7503"},"Update the dependencies array to be: [currentDate_ymd, dispatch, hasShowModal, hasShowloction, location, props]",{"range":"7504","text":"7505"},{"range":"7506","text":"7200"},{"range":"7507","text":"7204"},{"range":"7508","text":"7176"},"Update the dependencies array to be: [dispatch, goButtonHandler, page_Id, page_mode]",{"range":"7509","text":"7510"},"Update the dependencies array to be: [history, makeProductionReIssue]",{"range":"7511","text":"7512"},{"range":"7513","text":"7148"},{"range":"7514","text":"7181"},{"range":"7515","text":"7170"},{"range":"7516","text":"7200"},"Update the dependencies array to be: [updateMsg, modalCss, history]",{"range":"7517","text":"7518"},{"range":"7519","text":"7176"},{"range":"7520","text":"7148"},{"range":"7521","text":"7398"},{"range":"7522","text":"7512"},"Update the dependencies array to be: [dispatch, goButtonHandler, hasPagePath]",{"range":"7523","text":"7524"},{"range":"7525","text":"7270"},{"range":"7526","text":"7398"},"Update the dependencies array to be: [dispatch, history, makeChallan]",{"range":"7527","text":"7528"},{"range":"7529","text":"7398"},"Update the dependencies array to be: [history, makeGRN]",{"range":"7530","text":"7531"},{"range":"7532","text":"7148"},{"range":"7533","text":"7338"},{"range":"7534","text":"7200"},{"range":"7535","text":"7176"},"Update the dependencies array to be: [currentDate_ymd, dispatch, items]",{"range":"7536","text":"7537"},{"range":"7538","text":"7216"},{"range":"7539","text":"7148"},{"range":"7540","text":"7181"},{"range":"7541","text":"7170"},{"range":"7542","text":"7200"},"Update the dependencies array to be: [updateMsg, modalCss, history, dispatch, PermissionFunction]",{"range":"7543","text":"7544"},{"range":"7545","text":"7176"},{"range":"7546","text":"7181"},"Update the dependencies array to be: [hasShowModal, hasShowloction, location.editValue, location.pageMode, props.editValue, props.pageMode, state]",{"range":"7547","text":"7548"},"Update the dependencies array to be: [history, pageMode, postMsg]",{"range":"7549","text":"7550"},{"range":"7551","text":"7518"},{"range":"7552","text":"7148"},{"range":"7553","text":"7176"},{"range":"7554","text":"7176"},{"range":"7555","text":"7148"},"Update the dependencies array to be: [commonPartyDropSelect, dispatch, goButtonHandler]",{"range":"7556","text":"7557"},{"range":"7558","text":"7148"},{"range":"7559","text":"7181"},{"range":"7560","text":"7170"},{"range":"7561","text":"7184"},{"range":"7562","text":"7174"},{"range":"7563","text":"7176"},{"range":"7564","text":"7148"},{"range":"7565","text":"7181"},{"range":"7566","text":"7170"},{"range":"7567","text":"7184"},{"range":"7568","text":"7174"},{"range":"7569","text":"7176"},{"range":"7570","text":"7270"},{"range":"7571","text":"7148"},{"range":"7572","text":"7181"},"Update the dependencies array to be: [dispatch, pageMode, postMsg.Message, postMsg.Status, postMsg.StatusCode]",{"range":"7573","text":"7574"},{"range":"7575","text":"7176"},"Update the dependencies array to be: [Data, dispatch]",{"range":"7576","text":"7577"},{"range":"7578","text":"7148"},{"range":"7579","text":"7181"},"Update the dependencies array to be: [dispatch, pageMode, postMsg]",{"range":"7580","text":"7581"},"Update the dependencies array to be: [Data.length, RouteUpdateList, dispatch]",{"range":"7582","text":"7583"},{"range":"7584","text":"7176"},"Update the dependencies array to be: [dispatch, pdfdata]",{"range":"7585","text":"7586"},"Update the dependencies array to be: [dispatch, history.location.pathname, masterPath, userAccess]",{"range":"7587","text":"7588"},"Update the dependencies array to be: [PageFieldMaster, dispatch, tableList]",{"range":"7589","text":"7590"},"Update the dependencies array to be: [dispatch, getList, getListbodyFunc, tog_center, updateMsg, updateSucc]",{"range":"7591","text":"7592"},"Update the dependencies array to be: [deleteMsg, deleteSucc, dispatch, getList, getListbodyFunc]",{"range":"7593","text":"7594"},"Update the dependencies array to be: [dispatch, getList, getListbodyFunc, postMsg, postSucc, tog_center]",{"range":"7595","text":"7596"},"Update the dependencies array to be: [editData, history, masterPath, pageField.IsEditPopuporComponent]",{"range":"7597","text":"7598"},"Update the dependencies array to be: [isInitialLoad, isLoading]",{"range":"7599","text":"7600"},"Update the dependencies array to be: [dispatch, forceNewBtnView, history.location.pathname, newBtnPath, userAccess]",{"range":"7601","text":"7602"},{"range":"7603","text":"7590"},"Update the dependencies array to be: [dispatch, goButnFunc, masterPath, tog_center, updateMsg, updateSucc, userAccState]",{"range":"7604","text":"7605"},"Update the dependencies array to be: [deleteMsg, deleteSucc, dispatch, goButnFunc]",{"range":"7606","text":"7607"},"Update the dependencies array to be: [dispatch, getList, postMsg, postSucc, tog_center]",{"range":"7608","text":"7609"},{"range":"7610","text":"7598"},{"range":"7611","text":"7148"},{"range":"7612","text":"7181"},{"range":"7613","text":"7148"},{"range":"7614","text":"7148"},{"range":"7615","text":"7224"},{"range":"7616","text":"7577"},{"range":"7617","text":"7176"},"removeEscape",{"range":"7618","text":"7619"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"7620","text":"7621"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"7622","text":"7619"},{"range":"7623","text":"7621"},{"range":"7624","text":"7148"},{"range":"7625","text":"7338"},{"range":"7626","text":"7200"},{"range":"7627","text":"7176"},"Update the dependencies array to be: [dispatch, items]",{"range":"7628","text":"7629"},"Update the dependencies array to be: [dispatch, hideMsg, history]",{"range":"7630","text":"7631"},{"range":"7632","text":"7216"},{"range":"7633","text":"7148"},{"range":"7634","text":"7176"},{"range":"7635","text":"7181"},{"range":"7636","text":"7184"},"Update the dependencies array to be: [dispatch, partyList]",{"range":"7637","text":"7638"},{"range":"7639","text":"7148"},{"range":"7640","text":"7148"},{"range":"7641","text":"7148"},{"range":"7642","text":"7148"},{"range":"7643","text":"7176"},{"range":"7644","text":"7181"},"Update the dependencies array to be: [loginSystemSetting.IsAmountadjustedinInvoice]",{"range":"7645","text":"7646"},"Update the dependencies array to be: [AmountPaidDistribution, dispatch, hasShowModal, hasShowloction, location.editValue, location.pageMode, props]",{"range":"7647","text":"7648"},{"range":"7649","text":"7184"},"Update the dependencies array to be: [dispatch, hasPagePath]",{"range":"7650","text":"7651"},{"range":"7652","text":"7557"},{"range":"7653","text":"7148"},"Update the dependencies array to be: [ReceiptType, goButtonHandler, userAdminRole]",{"range":"7654","text":"7655"},"Update the dependencies array to be: [commonPartyDropSelect.value, dispatch]",{"range":"7656","text":"7657"},{"range":"7658","text":"7148"},{"range":"7659","text":"7148"},{"range":"7660","text":"7148"},{"range":"7661","text":"7176"},{"range":"7662","text":"7181"},{"range":"7663","text":"7184"},{"range":"7664","text":"7148"},{"range":"7665","text":"7148"},{"range":"7666","text":"7148"},{"range":"7667","text":"7655"},{"range":"7668","text":"7400"},"Update the dependencies array to be: [makeReceipt, OpeningBalance, dispatch, history]",{"range":"7669","text":"7670"},{"range":"7671","text":"7148"},{"range":"7672","text":"7181"},{"range":"7673","text":"7170"},{"range":"7674","text":"7184"},{"range":"7675","text":"7174"},{"range":"7676","text":"7176"},{"range":"7677","text":"7148"},{"range":"7678","text":"7148"},"Update the dependencies array to be: [dispatch, hasShowModal, history.location.pathname, props.masterPath, userAccess]",{"range":"7679","text":"7680"},{"range":"7681","text":"7200"},"Update the dependencies array to be: [bankTableList, dispatch]",{"range":"7682","text":"7683"},{"range":"7684","text":"7148"},{"range":"7685","text":"7200"},{"range":"7686","text":"7181"},{"range":"7687","text":"7400"},{"range":"7688","text":"7148"},{"range":"7689","text":"7148"},{"range":"7690","text":"7148"},"Update the dependencies array to be: [CreditDebitType, goButtonHandler]",{"range":"7691","text":"7692"},"Update the dependencies array to be: [Uploaded_Credit_Debit_EInvoice, dispatch, goButtonHandler]",{"range":"7693","text":"7694"},"Update the dependencies array to be: [Cancel_Credit_Debit_EInvoice, dispatch, goButtonHandler]",{"range":"7695","text":"7696"},{"range":"7697","text":"7148"},{"range":"7698","text":"7148"},{"range":"7699","text":"7181"},{"range":"7700","text":"7170"},{"range":"7701","text":"7184"},{"range":"7702","text":"7204"},{"range":"7703","text":"7176"},"Update the dependencies array to be: [pageField, userAccState, listBtnLoading, PageFieldMaster, makeBtnColumn, thirdLastColumn, secondLastColumn, lastColumn]",{"range":"7704","text":"7705"},{"range":"7706","text":"7371"},{"range":"7707","text":"7181"},{"range":"7708","text":"7170"},"Update the dependencies array to be: [dispatch, fileds, history, listPath, pageMode, postMsg, state]",{"range":"7709","text":"7710"},{"range":"7711","text":"7176"},{"range":"7712","text":"7148"},{"range":"7713","text":"7148"},{"range":"7714","text":"7148"},"Update the dependencies array to be: [commonPartyDropSelect, dispatch, goButtonHandler, subPageMode]",{"range":"7715","text":"7716"},{"range":"7717","text":"7400"},"Update the dependencies array to be: [commonPartyDropSelect, dispatch]",{"range":"7718","text":"7719"},{"range":"7720","text":"7176"},"Update the dependencies array to be: [PartyTypes, dispatch]",{"range":"7721","text":"7722"},"Update the dependencies array to be: [PartyTypes, commonPartyDropSelect.value, dispatch, pageField, subPageMode]",{"range":"7723","text":"7724"},{"range":"7725","text":"7176"},{"range":"7726","text":"7176"},"Update the dependencies array to be: [addressTable, deleteMessage, dispatch, setAddressTable]",{"range":"7727","text":"7728"},{"range":"7729","text":"7338"},{"range":"7730","text":"7400"},"Update the dependencies array to be: [dispatch, editData, hasShowModal, hasShowloction, location.editValue, location.pageMode, props.editValue, props.pageMode, subPageMode]",{"range":"7731","text":"7732"},{"range":"7733","text":"7371"},"Update the dependencies array to be: [dispatch, history, listPath, pageMode, postMsg.Message, postMsg.Status, postMsg.StatusCode]",{"range":"7734","text":"7735"},"Update the dependencies array to be: [updateMsg, modalCss, subPageMode, dispatch, history, listPath]",{"range":"7736","text":"7737"},{"range":"7738","text":"7148"},{"range":"7739","text":"7181"},{"range":"7740","text":"7719"},{"range":"7741","text":"7719"},{"range":"7742","text":"7403"},"Update the dependencies array to be: [commonPartyDropSelect, currentDate_ymd, dispatch]",{"range":"7743","text":"7744"},{"range":"7745","text":"7148"},{"range":"7746","text":"7181"},"Update the dependencies array to be: [gobuttonReduxData, btnMode, pageField, dispatch]",{"range":"7747","text":"7748"},{"range":"7749","text":"7148"},{"range":"7750","text":"7181"},{"range":"7751","text":"7168"},{"range":"7752","text":"7170"},{"range":"7753","text":"7172"},{"range":"7754","text":"7176"},"Update the dependencies array to be: [dispatch, goButtonHandler, userAdminRole]",{"range":"7755","text":"7756"},{"range":"7757","text":"7181"},{"range":"7758","text":"7480"},"Update the dependencies array to be: [dispatch, partyTypes]",{"range":"7759","text":"7760"},{"range":"7761","text":"7756"},{"range":"7762","text":"7181"},"Update the dependencies array to be: [dispatch, postMsg, preDetails]",{"range":"7763","text":"7764"},{"range":"7765","text":"7756"},{"range":"7766","text":"7181"},{"range":"7767","text":"7176"},{"range":"7768","text":"7480"},"Update the dependencies array to be: [dispatch, goButtonItem]",{"range":"7769","text":"7770"},{"range":"7771","text":"7148"},{"range":"7772","text":"7181"},{"range":"7773","text":"7176"},"Update the dependencies array to be: [dispatch, goButtonArr]",{"range":"7774","text":"7775"},{"range":"7776","text":"7480"},{"range":"7777","text":"7148"},{"range":"7778","text":"7148"},{"range":"7779","text":"7270"},{"range":"7780","text":"7181"},{"range":"7781","text":"7176"},{"range":"7782","text":"7480"},{"range":"7783","text":"7148"},{"range":"7784","text":"7181"},{"range":"7785","text":"7148"},"Update the dependencies array to be: [btnMode, dispatch, downloadExcelFunction, goButtonData]",{"range":"7786","text":"7787"},"Update the dependencies array to be: [orderSummaryApiData, btnMode, groupByColumnsWithSumFunc]",{"range":"7788","text":"7789"},{"range":"7790","text":"7148"},{"range":"7791","text":"7338"},{"range":"7792","text":"7170"},{"range":"7793","text":"7184"},{"range":"7794","text":"7480"},{"range":"7795","text":"7174"},{"range":"7796","text":"7176"},{"range":"7797","text":"7148"},{"range":"7798","text":"7181"},{"range":"7799","text":"7176"},{"range":"7800","text":"7480"},{"range":"7801","text":"7181"},{"range":"7802","text":"7400"},{"range":"7803","text":"7586"},{"range":"7804","text":"7181"},{"range":"7805","text":"7148"},"Update the dependencies array to be: [btnMode, dispatch, goButtonData, pageField]",{"range":"7806","text":"7807"},{"range":"7808","text":"7398"},"Update the dependencies array to be: [history, sendToSSbtnTableData]",{"range":"7809","text":"7810"},{"range":"7811","text":"7400"},"Update the dependencies array to be: [ApprovrMsg, goButtonHandler]",{"range":"7812","text":"7813"},{"range":"7814","text":"7148"},{"range":"7815","text":"7719"},{"range":"7816","text":"7181"},{"range":"7817","text":"7148"},{"range":"7818","text":"7176"},{"range":"7819","text":"7184"},"Update the dependencies array to be: [TableArr, addButtonData, dispatch, returnMode]",{"range":"7820","text":"7821"},"Update the dependencies array to be: [ReturnReasonListRedux, SaleableItemReasonID]",{"range":"7822","text":"7823"},{"range":"7824","text":"7148"},"Update the dependencies array to be: [LoadingSheetUpdateList, dispatch]",{"range":"7825","text":"7826"},{"range":"7827","text":"7181"},{"range":"7828","text":"7670"},{"range":"7829","text":"7148"},{"range":"7830","text":"7719"},"Update the dependencies array to be: [Data.length, GoButton, dispatch]",{"range":"7831","text":"7832"},{"range":"7833","text":"7181"},{"range":"7834","text":"7184"},{"range":"7835","text":"7176"},{"range":"7836","text":"7484"},"Update the dependencies array to be: [LoadingSheetUpdateList, history]",{"range":"7837","text":"7838"},"Update the dependencies array to be: [ApprovrMsg, dispatch]",{"range":"7839","text":"7840"},{"range":"7841","text":"7148"},{"range":"7842","text":"7375"},{"range":"7843","text":"7181"},{"range":"7844","text":"7176"},{"range":"7845","text":"7184"},"Update the dependencies array to be: [dispatch, gobtnDiscount_redux]",{"range":"7846","text":"7847"},"Update the dependencies array to be: [commonPartyDropSelect.value, dispatch, priceListSelect, values.Partytype.value]",{"range":"7848","text":"7849"},{"range":"7850","text":"7148"},{"range":"7851","text":"7181"},{"range":"7852","text":"7148"},{"range":"7853","text":"7807"},{"range":"7854","text":"7181"},{"range":"7855","text":"7148"},"Update the dependencies array to be: [RetailerGobtn, dispatch, pageField]",{"range":"7856","text":"7857"},{"range":"7858","text":"7270"},"Update the dependencies array to be: [dispatch, sendToSSbtnTableData]",{"range":"7859","text":"7860"},{"range":"7861","text":"7148"},{"range":"7862","text":"7719"},{"range":"7863","text":"7181"},{"range":"7864","text":"7176"},"Update the dependencies array to be: [dispatch, fileds, history, postMsg, state]",{"range":"7865","text":"7866"},{"range":"7867","text":"7148"},{"range":"7868","text":"7719"},{"range":"7869","text":"7181"},{"range":"7870","text":"7148"},{"range":"7871","text":"7176"},{"range":"7872","text":"7184"},{"range":"7873","text":"7821"},{"range":"7874","text":"7823"},{"range":"7875","text":"7181"},{"range":"7876","text":"7148"},"Update the dependencies array to be: [StockReport_1_Gobtb, btnMode, dispatch, pageField]",{"range":"7877","text":"7878"},"Update the dependencies array to be: [btnMode, dispatch, pdfdata]",{"range":"7879","text":"7880"},"Update the dependencies array to be: [StockProcessingBtn, dispatch]",{"range":"7881","text":"7882"},{"range":"7883","text":"7181"},"Update the dependencies array to be: [MonthAndYearOnchange, dispatch, values.SelectedMonth]",{"range":"7884","text":"7885"},{"range":"7886","text":"7586"},"Update the dependencies array to be: [ClaimSummaryGobtn, dispatch, jsonBody]",{"range":"7887","text":"7888"},"Update the dependencies array to be: [deleteMsg, dispatch, jsonBody]",{"range":"7889","text":"7890"},"Update the dependencies array to be: [searchText]",{"range":"7891","text":"7892"},"Update the dependencies array to be: [onDataSizeChange, filteredData, paginationEnabled, startIndex, endIndex]",{"range":"7893","text":"7894"},{"range":"7895","text":"7181"},{"range":"7896","text":"7148"},"Update the dependencies array to be: [GSTRateWise, PurchaseGSTDetails, PurchaseGSTRateWiseDetails, dispatch, pageField, tableData]",{"range":"7897","text":"7898"},{"range":"7899","text":"7181"},{"range":"7900","text":"7148"},{"range":"7901","text":"7807"},{"range":"7902","text":"7400"},{"range":"7903","text":"7181"},{"range":"7904","text":"7148"},"Update the dependencies array to be: [goBtnMode, Data, pageField, subPageMode, dispatch]",{"range":"7905","text":"7906"},{"range":"7907","text":"7148"},{"range":"7908","text":"7181"},{"range":"7909","text":"7148"},"Update the dependencies array to be: [DeletedInvoiceExportSerializerDetails, dispatch, pageField, tableData]",{"range":"7910","text":"7911"},{"range":"7912","text":"7181"},"Update the dependencies array to be: [GstR3BReportData, GstR1ReportData, values.FromDate, values.ToDate, dispatch]",{"range":"7913","text":"7914"},{"range":"7915","text":"7148"},{"range":"7916","text":"7148"},{"range":"7917","text":"7181"},"Update the dependencies array to be: [dispatch, tableData]",{"range":"7918","text":"7919"},"Update the dependencies array to be: [btnMode, dispatch, fromdate, goButtonData, todate]",{"range":"7920","text":"7921"},{"range":"7922","text":"7181"},{"range":"7923","text":"7148"},{"range":"7924","text":"7586"},{"range":"7925","text":"7181"},{"range":"7926","text":"7885"},{"range":"7927","text":"7586"},"Update the dependencies array to be: [ClaimSummaryGobtn, dispatch, history, jsonBody]",{"range":"7928","text":"7929"},{"range":"7930","text":"7890"},"Update the dependencies array to be: [MonthAndYearOnchange, dispatch, page_Id, values.SelectedMonth]",{"range":"7931","text":"7932"},{"range":"7933","text":"7586"},{"range":"7934","text":"7890"},"Update the dependencies array to be: [dispatch, session.active, sessionEndActivity]",{"range":"7935","text":"7936"},"Update the dependencies array to be: [history]",{"range":"7937","text":"7938"},{"range":"7939","text":"7371"},{"range":"7940","text":"7181"},{"range":"7941","text":"7148"},{"range":"7942","text":"7170"},{"range":"7943","text":"7176"},{"range":"7944","text":"7710"},"Update the dependencies array to be: [TableArr, addButtonData, dispatch]",{"range":"7945","text":"7946"},"Update the dependencies array to be: [commonPartyDropSelect]",{"range":"7947","text":"7948"},{"range":"7949","text":"7400"},{"range":"7950","text":"7181"},{"range":"7951","text":"7480"},"Update the dependencies array to be: [dispatch, history.location.pathname, userAccess]",{"range":"7952","text":"7953"},"Update the dependencies array to be: [dispatch, hasShowModal, location.pathname, props.masterPath, states, userAccess]",{"range":"7954","text":"7955"},{"range":"7956","text":"7148"},"Update the dependencies array to be: [ItemSaleReportGobtn, dataManpulationFunction, dispatch, states]",{"range":"7957","text":"7958"},{"range":"7959","text":"7148"},{"range":"7960","text":"7176"},{"range":"7961","text":"7181"},{"range":"7962","text":"7148"},{"range":"7963","text":"7148"},{"range":"7964","text":"7184"},[2510,2532],"[layoutMode, dispatch, changelayoutMode, layoutType]",[1535,1537],"[dispatch]",[2050,2052],"[history, session.active]",[2633,2647],"[dispatch, loginSuccess, updateSessionActivity]",[3208,3232],"[dispatch, divisionDropdown_redux, history, session.active]",[3579,3591],"[divisionDropdown_redux.length, history, userAccess]",[611,636],"[dispatch, props.history, updateSessionActivity]",[2592,2642],"[sendPasswordMsg_reducx, sendPasswordError_reducx, dispatch]",[3044,3093],"[dispatch, sendOTPSuccessMsg_redux, sendOtpMegError_reducx]",[1626,1628],"[dispatch, divisionDropdown_redux.length]",[2063,2075],[2605,2607],[3606,3618],"[dispatch, hasShowModal, location.pathname, props.isdropdown, props.masterPath, props.pageMode, userAccess]",[5054,5056],"[dispatch, hasShowModal, hasShowloction, location.editValue, location.pageMode, props.editValue, props.pageMode, state]",[6444,6453],"[dispatch, fileds, history, pageMode, postMsg, props, state]",[7014,7035],"[updateMsg, modalCss, history, fileds, state, dispatch]",[7230,7241],"[pageField, state]",[1887,1889],[2057,2059],[1770,1772],[3384,3396],"[dispatch, hasShowModal, location.pathname, props.masterPath, userAccess]",[4965,4967],[5919,5928],"[dispatch, fileds, history, pageMode, postMsg, state]",[6433,6454],[6623,6634],[1823,1825],[4026,4028],[4331,4342],"[cPassword, isCPassword, password]",[5046,5058],[5228,5239],[6943,6945],[7809,7825],"[dispatch, history, pageMode, postMsg.Message, postMsg.Status, postMsg.StatusCode]",[4543,4555],[9088,9113],"[dispatch, fieldValidationsALLType, hasShowModal, hasShowloction, location.editValue, location.pageMode, props.editValue, props.pageMode]",[10442,10451],"[dispatch, history, pageMode, postMsg]",[11132,11155],"[dispatch, modulePostAPIResponse, tog_center]",[11563,11584],"[updateMsg, modalCss, history, dispatch]",[2052,2054],[2007,2009],[6068,6080],[8608,8610],[9517,9526],"[dispatch, fileds, history, postMsg, props.pageMode, state]",[10011,10032],[10203,10214],[6254,6266],[6471,6473],[11971,11973],"[dispatch, hasShowModal, hasShowloction, location.editValue, location.pageMode, props.editValue, props.pageMode]",[12487,12489],[13519,13528],[14012,14033],[3065,3067],[4018,4030],[5649,5651],[6589,6605],"[dispatch, fileds, history, pageMode, postMsg.Message, postMsg.Status, postMsg.StatusCode, state]",[7109,7130],[7301,7312],[1950,1952],[2852,2861],"[editDataGatingFromList, history]",[2135,2137],[4242,4254],"[dispatch, location.pathname, userAccess]",[5085,5087],"[dispatch, history.location.state]",[5612,5614],[6448,6457],"[dispatch, history, postMsg]",[2624,2626],[3625,3637],[5510,5512],[6989,6998],[7565,7586],[7781,7792],[2880,2882],[3541,3554],"[dispatch, postMsgCopy, tog_center]",[2023,2025],[1909,1911],[2762,2764],[3712,3724],[5189,5191],[6598,6607],[7235,7256],[7451,7462],[2096,2098],[2595,2597],[3568,3580],[4704,4706],[6098,6107],[6691,6712],[6909,6920],[2989,2991],[4176,4188],[5493,5495],[6604,6613],[7191,7212],[7405,7416],[2018,2020],[2301,2303],"[dispatch, goButtonHandler]",[3103,3105],[3881,3893],[5482,5484],[6594,6603],[7163,7184],[7379,7390],[1821,1823],[2131,2133],[2123,2125],[2627,2629],[3414,3426],[4879,4881],[5984,5993],[6560,6581],[6774,6785],[2538,2540],[3318,3330],[4543,4545],[5624,5633],[6203,6224],[6417,6428],[3343,3345],[4260,4272],[4466,4477],[5964,5966],"[dispatch, hasShowModal, hasShowloction, location.editValue, location.page_Mode, props.editValue, props.pageMode, state]",[6861,6876],"[GoButton_Handler, deleteMessage, dispatch]",[9732,9741],[3711,3723],"[dispatch, editDataGatingFromList, history.location.pathname, props.relatatedPage, userAccess]",[3904,3906],[4347,4364],"[PostAPIResponse, dispatch, partyType_dropdown_Select.value]",[5467,5469],[5876,5895],"[deleteAPIResponse, dispatch, partyType_dropdown_Select.value]",[6323,6338],"[dispatch, partyType_dropdown_Select.value, updateMessage]",[2002,2004],"[dispatch, hasPagePath, page_Id]",[2191,2202],"[deleteMsg, dispatch]",[2553,2566],"[MRPGoButton, dispatch, history]",[2638,2640],[3634,3646],[5043,5045],[6425,6434],[7056,7077],[7270,7281],[2233,2235],[2432,2444],"[page_Id, userAccess]",[2637,2648],[3013,3029],"[MarginGoButton, dispatch, history]",[3606,3608],[4523,4535],[4729,4740],[6227,6229],[6931,6946],[9524,9533],[1870,1872],[1977,1979],[3170,3172],[3365,3377],"[dispatch, props, userAccess]",[4837,4839],[5079,5088],[5644,5665],[5860,5871],[1718,1720],[2209,2211],[2408,2420],[2605,2616],[2968,2981],"[GSTGoButton, dispatch, history]",[4076,4078],"[dispatch, goButtonHandler, hasShowModal, hasShowloction, page_id]",[4591,4603],"[dispatch, hasShowModal, location.pathname, props.isAssing, props.masterPath, userAccess]",[5715,5717],[6588,6597],"[dispatch, pageMode, postMsg, props]",[3303,3305],[4088,4100],[5388,5390],[6502,6511],[7003,7024],[7219,7230],[7626,7641],"[PartySubParty, values.PartyName.value]",[2880,2882],[3660,3672],[3866,3877],[5004,5006],[6093,6102],[7004,7019],[8493,8495],"[dispatch, page_id]",[8726,8738],"[dispatch, otherloginAccss, props, userAccess]",[10070,10093],"[commonPartyDropSelect, dispatch, subPageMode]",[12697,12699],"[dispatch, hasShowModal, hasShowloction, location.editValue, location.pageMode, props.editValue, props.pageMode, subPageMode]",[15536,15545],"[commonPartyDropSelect.value, dispatch, history, listPath, orderdate, pageMode, postMsg, subPageMode, supplierSelect]",[15736,15747],"[dispatch, history, listPath, modalCss, updateMsg]",[15896,15907],[16589,16605],"[dispatch, goBtnOrderdata, selecedItemWiseOrder]",[16831,16848],"[hasShowModal, hasShowloction, supplierAddress]",[17110,17121],"[hasShowModal, hasShowloction, orderType]",[17214,17230],"[approvalDetail, dispatch]",[17347,17365],"[dispatch, history, listPath, orderApprovalMsg]",[17900,17922],"[gobutton_Add_invoice, history]",[19116,19176],"[changeAllDiscount, discountValueAll, discountTypeAll.value, orderItemTable, itemWise_CalculationFunc]",[8162,8164],"[dispatch, goButtonHandler, subPageMode]",[8318,8320],"[dispatch, subPageMode]",[8512,8523],[8771,8780],"[GRNitem, history]",[9054,9069],"[history, makeIBInvoice]",[9310,9332],[9966,9983],"[dispatch, goButtonHandler, orderApprovalMsg.Status, orderConfirmMsg]",[10102,10120],"[dispatch, goButtonHandler, orderApprovalMsg]",[10213,10229],[10841,10852],"[dispatch, goButtonHandler, unhideMsg]",[1499,1526],"[dispatch, history, roleAccesssForSidbarError]",[1855,1857],"[RoleAccessUpdateData.length, dispatch]",[4089,4147],"[RoleAccessUpdateData, activateParentDropdown, props.location.pathname]",[2767,2776],"[dispatch, fileds, postMsg, state]",[1977,1988],"[deleteMsg, dispatch, props]",[1825,1836],[2011,2022],[1939,1941],[2784,2786],[3562,3574],[5027,5029],[6127,6136],[6699,6720],[6913,6924],[913,915],"[addRowHandler, dispatch, imageTable.length]",[2193,2195],[2578,2580],[3352,3364],[4605,4607],[5734,5743],[6327,6348],[6541,6552],[10880,10907],"[dispatch, history.location.pathname]",[11298,11311],"[defaultDownBtnData, downBtnData]",[2232,2234],[2754,2756],[3532,3544],[4910,4912],[5084,5086],[6195,6204],[6821,6842],[7035,7046],[5137,5139],[5656,5679],[6172,6184],[7987,7996],"[dispatch, history, postMsg, subPageMode, systemSetting.AutoEInvoice, systemSetting.EInvoiceApplicable]",[8521,8542],[8735,8746],[9177,9192],"[dispatch, makeIBInvoice]",[10037,10051],"[dispatch, gobutton_Add, totalAmountCalcuationFunc]",[6347,6357],[7225,7249],"[Update_Vehicle_Invoice, dispatch, goButtonHandler]",[7909,7923],"[dispatch, sendToScmMsg]",[8624,8643],"[Uploaded_EInvoice, dispatch, goButtonHandler]",[9358,9377],"[Uploaded_EwayBill, dispatch, goButtonHandler]",[10090,10107],"[Cancel_EInvoice, dispatch, goButtonHandler]",[10820,10837],"[Cancel_EwayBill, dispatch, goButtonHandler]",[2173,2185],[3038,3047],"[dispatch, postMsg]",[2852,2854],"[dispatch, goButtonHandler, page_Id, subPageMode]",[2777,2779],"[dispatch, goButtonHandler, page_Id]",[3052,3067],"[history, produtionMake]",[2978,2980],[6580,6582],[7066,7078],[7919,7928],[8500,8521],[8714,8725],[3721,3723],[4655,4667],[5599,5622],"[dispatch, makeProductionReIssue]",[9414,9423],[9994,10015],[10285,10296],[3308,3310],[4068,4080],[5027,5037],"[GoButton, currentDate_ymd]",[6882,6884],"[currentDate_ymd, dispatch, hasShowModal, hasShowloction, location, props]",[8074,8083],[8660,8681],[8874,8885],[2807,2809],"[dispatch, goButtonHandler, page_Id, page_mode]",[3115,3138],"[history, makeProductionReIssue]",[4083,4085],[4575,4587],[6571,6573],[7587,7596],[8191,8212],"[updateMsg, modalCss, history]",[8405,8416],[8797,8799],[3633,3635],[4054,4077],[2845,2847],"[dispatch, goButtonHandler, hasPagePath]",[2962,2964],[3784,3786],[4125,4138],"[dispatch, history, makeChallan]",[3273,3275],[3524,3533],"[history, makeGRN]",[2923,2925],[3314,3326],[3549,3558],[3708,3719],[5047,5054],"[currentDate_ymd, dispatch, items]",[6233,6235],[2946,2948],[3727,3739],[6016,6018],[7135,7144],[8100,8121],"[updateMsg, modalCss, history, dispatch, PermissionFunction]",[8316,8327],[3620,3632],[4484,4486],"[hasShowModal, hasShowloction, location.editValue, location.pageMode, props.editValue, props.pageMode, state]",[5330,5339],"[history, pageMode, postMsg]",[5769,5790],[6063,6065],[6257,6268],[6460,6471],[2473,2475],[2691,2714],"[commonPartyDropSelect, dispatch, goButtonHandler]",[2911,2913],[3689,3701],[5755,5757],[6858,6867],[7438,7459],[7654,7665],[3103,3105],[3881,3893],[5635,5637],[6740,6749],[7311,7332],[7525,7536],[2536,2538],[3481,3483],[3965,3977],[5245,5261],"[dispatch, pageMode, postMsg.Message, postMsg.Status, postMsg.StatusCode]",[5453,5464],[5587,5593],"[Data, dispatch]",[3154,3156],[3755,3767],[4645,4654],"[dispatch, pageMode, postMsg]",[4762,4779],"[Data.length, RouteUpdateList, dispatch]",[4973,4984],[685,694],"[dispatch, pdfdata]",[1645,1657],"[dispatch, history.location.pathname, masterPath, userAccess]",[2272,2283],"[PageFieldMaster, dispatch, tableList]",[2899,2910],"[dispatch, getList, getListbodyFunc, tog_center, updateMsg, updateSucc]",[3425,3436],"[deleteMsg, deleteSucc, dispatch, getList, getListbodyFunc]",[3968,3977],"[dispatch, getList, getListbodyFunc, postMsg, postSucc, tog_center]",[4351,4361],"[editData, history, masterPath, pageField.IsEditPopuporComponent]",[7821,7832],"[isInitialLoad, isLoading]",[2593,2605],"[dispatch, forceNewBtnView, history.location.pathname, newBtnPath, userAccess]",[3260,3271],[3845,3856],"[dispatch, goButnFunc, masterPath, tog_center, updateMsg, updateSucc, userAccState]",[4195,4206],"[deleteMsg, deleteSucc, dispatch, goButnFunc]",[4559,4568],"[dispatch, getList, postMsg, postSucc, tog_center]",[4949,4959],[5219,5221],[5710,5722],[5938,5940],[6190,6192],[7485,7501],[7610,7616],[7890,7901],[18351,18352],"",[18351,18351],"\\",[18367,18368],[18367,18367],[3680,3682],[3852,3864],[4117,4126],[4275,4286],[5104,5111],"[dispatch, items]",[5727,5736],"[dispatch, hideMsg, history]",[6913,6915],[3243,3245],[3728,3739],[4226,4238],[5497,5506],[5622,5633],"[dispatch, partyList]",[4641,4643],[5019,5021],[5273,5275],[5536,5538],[5761,5772],[6259,6271],[6426,6428],"[loginSystemSetting.IsAmountadjustedinInvoice]",[8396,8398],"[AmountPaidDistribution, dispatch, hasShowModal, hasShowloction, location.editValue, location.pageMode, props]",[9605,9614],[3672,3674],"[dispatch, hasPagePath]",[4369,4392],[4932,4934],[5143,5156],"[ReceiptType, goButtonHandler, userAdminRole]",[6997,6999],"[commonPartyDropSelect.value, dispatch]",[3801,3803],[4059,4061],[4325,4327],[4740,4751],[5245,5257],[6467,6476],[3617,3619],[3882,3884],[4174,4176],[4352,4365],[5511,5513],[5950,5979],"[makeReceipt, OpeningBalance, dispatch, history]",[2488,2490],[3286,3298],[4417,4419],[5483,5492],[6048,6069],[6262,6273],[1862,1864],[2734,2736],[3297,3309],"[dispatch, hasShowModal, history.location.pathname, props.masterPath, userAccess]",[4327,4336],[4453,4468],"[bankTableList, dispatch]",[2292,2294],[3360,3369],[3834,3846],[5369,5371],[5624,5626],[5949,5951],[6421,6423],[7369,7386],"[CreditDebitType, goButtonHandler]",[10088,10120],"[Uploaded_Credit_Debit_EInvoice, dispatch, goButtonHandler]",[10928,10958],"[Cancel_Credit_Debit_EInvoice, dispatch, goButtonHandler]",[2021,2023],[3302,3304],[4082,4094],[6028,6030],[7225,7234],[7730,7751],[7946,7957],[7502,7543],"[pageField, userAccState, listBtnLoading, PageFieldMaster, makeBtnColumn, thirdLastColumn, secondLastColumn, lastColumn]",[3921,3923],[4706,4718],[5837,5839],[6927,6936],"[dispatch, fileds, history, listPath, pageMode, postMsg, state]",[7128,7139],[7389,7391],[7613,7615],[7824,7826],[3101,3124],"[commonPartyDropSelect, dispatch, goButtonHandler, subPageMode]",[4343,4345],[4648,4671],"[commonPartyDropSelect, dispatch]",[4864,4875],[5328,5340],"[PartyTypes, dispatch]",[6244,6267],"[PartyTypes, commonPartyDropSelect.value, dispatch, pageField, subPageMode]",[1476,1487],[1653,1664],[1678,1693],"[addressTable, deleteMessage, dispatch, setAddressTable]",[4619,4631],[5080,5082],[11230,11240],"[dispatch, editData, hasShowModal, hasShowloction, location.editValue, location.pageMode, props.editValue, props.pageMode, subPageMode]",[11794,11796],[12831,12847],"[dispatch, history, listPath, pageMode, postMsg.Message, postMsg.Status, postMsg.StatusCode]",[13662,13683],"[updateMsg, modalCss, subPageMode, dispatch, history, listPath]",[2308,2310],[2918,2930],[1486,1509],[2118,2141],[2390,2399],[1396,1419],"[commonPartyDropSelect, currentDate_ymd, dispatch]",[3742,3744],[4344,4356],[5481,5509],"[gobuttonReduxData, btnMode, pageField, dispatch]",[1533,1535],[2220,2232],[3993,4005],[5647,5649],[7008,7017],[7211,7222],[4478,4480],"[dispatch, goButtonHandler, userAdminRole]",[5055,5067],[5919,5928],[6257,6269],"[dispatch, partyTypes]",[3040,3042],[3644,3656],[4386,4395],"[dispatch, postMsg, preDetails]",[3497,3499],[4169,4181],[4373,4384],[4952,4961],[5080,5094],"[dispatch, goButtonItem]",[3555,3557],[4325,4337],[4529,4540],[4658,4671],"[dispatch, goButtonArr]",[5243,5252],[618,620],[1175,1177],[3045,3047],[3824,3836],[4030,4041],[4617,4626],[2232,2234],[3322,3334],[3643,3645],[4555,4569],"[btnMode, dispatch, downloadExcelFunction, goButtonData]",[5276,5306],"[orderSummaryApiData, btnMode, groupByColumnsWithSumFunc]",[3727,3729],[3897,3909],[5106,5108],[5369,5378],[5499,5508],[6066,6087],[6282,6293],[3207,3209],[3886,3898],[4090,4101],[4722,4731],[2828,2840],[2979,2981],[3299,3308],[2978,2990],[3446,3448],[4444,4458],"[btnMode, dispatch, goButtonData, pageField]",[5432,5434],[5681,5703],"[history, sendToSSbtnTableData]",[6063,6065],[6223,6235],"[ApprovrMsg, goButtonHandler]",[5186,5188],[6301,6324],[7152,7164],[7417,7419],[7612,7623],[8730,8739],[11700,11715],"[TableArr, addButtonData, dispatch, returnMode]",[12805,12828],"[ReturnReasonListRedux, SaleableItemReasonID]",[4072,4074],[4442,4466],"[LoadingSheetUpdateList, dispatch]",[5160,5172],[5608,5637],[4018,4020],[5089,5112],[5216,5226],"[Data.length, GoButton, dispatch]",[5935,5947],[7099,7108],[7300,7311],[3008,3010],[3261,3285],"[LoadingSheetUpdateList, history]",[2391,2403],"[ApprovrMsg, dispatch]",[4699,4701],[6099,6122],[6605,6617],[7029,7040],[8282,8291],[8782,8803],"[dispatch, gobtnDiscount_redux]",[9372,9389],"[commonPartyDropSelect.value, dispatch, priceListSelect, values.Partytype.value]",[2584,2586],[3075,3087],[3257,3259],[4781,4795],[2355,2367],[2707,2709],[3593,3608],"[RetailerGobtn, dispatch, pageField]",[2401,2403],[4028,4030],"[dispatch, sendToSSbtnTableData]",[4181,4183],[4556,4579],[5282,5294],[5486,5497],[6217,6226],"[dispatch, fileds, history, postMsg, state]",[5809,5811],[6734,6757],[7587,7599],[7852,7854],[8047,8058],[9299,9308],[12533,12548],[13068,13091],[3279,3291],[3691,3693],[4902,4923],"[StockReport_1_Gobtb, btnMode, dispatch, pageField]",[5483,5492],"[btnMode, dispatch, pdfdata]",[6084,6104],"[StockProcessingBtn, dispatch]",[4147,4159],[4345,4347],"[MonthAndYearOnchange, dispatch, values.SelectedMonth]",[4667,4676],[5065,5084],"[ClaimSummaryGobtn, dispatch, jsonBody]",[5452,5463],"[deleteMsg, dispatch, jsonBody]",[1774,1776],"[searchText]",[2779,2834],"[onDataSizeChange, filteredData, paginationEnabled, startIndex, endIndex]",[3318,3330],[3687,3689],[5696,5707],"[GSTRateWise, PurchaseGSTDetails, PurchaseGSTRateWiseDetails, dispatch, pageField, tableData]",[2905,2917],[3385,3387],[4348,4362],[3298,3300],[3789,3801],[3974,3976],[4626,4654],"[goBtnMode, Data, pageField, subPageMode, dispatch]",[2827,2829],[3584,3596],[3793,3795],[4304,4315],"[DeletedInvoiceExportSerializerDetails, dispatch, pageField, tableData]",[2950,2962],[4017,4052],"[GstR3BReportData, GstR1ReportData, values.FromDate, values.ToDate, dispatch]",[4229,4231],[2500,2502],[2991,3003],[3299,3310],"[dispatch, tableData]",[4823,4837],"[btnMode, dispatch, fromdate, goButtonData, todate]",[3048,3060],[3271,3273],[3591,3600],[4278,4290],[4644,4646],[4966,4975],[5430,5449],"[ClaimSummaryGobtn, dispatch, history, jsonBody]",[5817,5828],[3427,3429],"[MonthAndYearOnchange, dispatch, page_Id, values.SelectedMonth]",[3752,3761],[4013,4024],[3114,3130],"[dispatch, session.active, sessionEndActivity]",[3884,3886],"[history]",[5192,5194],[5991,6003],[6228,6230],[8183,8185],[8378,8389],[9467,9476],[12321,12336],"[TableArr, addButtonData, dispatch]",[1344,1346],"[commonPartyDropSelect]",[3440,3442],[4042,4054],[8167,8176],[3602,3614],"[dispatch, history.location.pathname, userAccess]",[4587,4599],"[dispatch, hasShowModal, location.pathname, props.masterPath, states, userAccess]",[5327,5329],[5602,5623],"[ItemSaleReportGobtn, dataManpulationFunction, dispatch, states]",[2503,2505],[3873,3884],[4600,4612],[4943,4945],[5769,5771],[9163,9172]]